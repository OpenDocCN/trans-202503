- en: 1 Getting Started with Arduino
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 开始使用 Arduino
- en: This project covers everything you need to get your Arduino up and running!
    We’ll introduce the hardware, show you how to install the programming environment,
    and help you make sure everything works by loading a simple program. At the end,
    you should have your own blinking light and the excitement to move on. Let’s go!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目涵盖了让你启动 Arduino 所需的一切！我们将介绍硬件，展示如何安装编程环境，并帮助你通过加载一个简单的程序来确保一切正常。完成后，你应该能够拥有一个自己的闪烁灯，并激发继续前进的兴奋感。我们开始吧！
- en: '**MATERIALS TO GATHER**'
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**收集材料**'
- en: 'You’ll need the following hardware (shown in [Figure 1-1](ch01.xhtml#ch01fig01))
    to complete this project:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下硬件（如[图 1-1](ch01.xhtml#ch01fig01)所示）来完成本项目：
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 SparkFun RedBoard（DEV-13975），Arduino Uno（DEV-11021）或任何其他兼容 Arduino 的板子
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: • 一条 USB Mini-B 数据线（CAB-11301 或你板子的 USB 数据线）
- en: • One LED (COM-09590, or COM-12062 for a pack of 20)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个 LED（COM-09590，或一包 20 个的 COM-12062）
- en: '**FIGURE 1-1:** Required components'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-1：** 所需组件'
- en: '![Image](../images/fig1_1.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_1.jpg)'
- en: '**ABOUT THE ARDUINO**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关于 Arduino**'
- en: An *Arduino* (pronounced är·də’wēn·ō or “arr-dween-oh!”) is a small programmable
    device that can add smarts to nonintelligent things. You can use an Arduino to
    run robots, create LED art, and even act as a handheld gaming console. In this
    section, we’ll go into more detail on what the Arduino is and how it can change
    the way you think about the world around you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*Arduino*（发音为 är·də’wēn·ō 或 “arr-dween-oh!”）是一个小型可编程设备，能够为没有智能的物体添加智能功能。你可以使用
    Arduino 来驱动机器人、创造 LED 艺术，甚至充当手持游戏机。在这一部分，我们将更详细地介绍 Arduino 是什么，以及它如何改变你对周围世界的看法。'
- en: '**An Accessible Hardware Platform**'
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**一个易于接入的硬件平台**'
- en: An Arduino is like a small computer. You can program it using very simple instructions,
    and you can power it with just a few AA batteries. What makes an Arduino really
    different from a regular computer is that it uses a *microcontroller*, rather
    than a CPU, to process information and take action. This small chip acts as the
    brains of your project, and it can receive input from sensors (like light detectors,
    temperature sensors, or buttons) and output signals to control LEDs, motors, buzzers,
    and more. An Arduino board like the one in [Figure 1-2](ch01.xhtml#ch01fig02)
    has all of the supporting components and circuitry to make a micro-controller
    work.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 就像一台小型计算机。你可以使用非常简单的指令对其编程，并且只需少量 AA 电池就能为其供电。与普通计算机不同的是，Arduino 使用*微控制器*而不是
    CPU 来处理信息并执行操作。这个小芯片充当了你项目的大脑，它可以接收传感器（如光传感器、温度传感器或按钮）的输入，并输出信号来控制 LED、马达、蜂鸣器等。像[图
    1-2](ch01.xhtml#ch01fig02)中的 Arduino 板就包含了使微控制器正常工作所需的所有支持组件和电路。
- en: '**FIGURE 1-2:** The Arduino Uno is an open source, programmable electronics
    platform for hobbyists.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-2：** Arduino Uno 是一个开源、可编程的电子平台，适用于爱好者。'
- en: '![Image](../images/fig1_2.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_2.jpg)'
- en: The programming language used for the Arduino is essentially a version of C/C++.
    The programming environment is the *Arduino IDE (integrated development environment)*.
    The team that developed it bundled it with many prewritten functions and libraries
    to simplify the process of writing code to interface with hardware. For example,
    these libraries take the multiple lines of code required to turn on an LED and
    simplify them into a single instruction!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 使用的编程语言本质上是 C/C++ 的一种版本。编程环境是*Arduino IDE（集成开发环境）*。开发该环境的团队将许多预先编写的函数和库打包在一起，以简化与硬件接口的代码编写过程。例如，这些库将打开
    LED 所需的多行代码简化为一条指令！
- en: '**About the SparkFun RedBoard**'
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**关于 SparkFun RedBoard**'
- en: There are many officially Arduino-branded boards, but since the platform is
    *open source* (meaning the source hardware design and software are available for
    anyone to look at and modify), there are also many Arduino derivatives, clones,
    and compatible boards. The board designs are all licensed under a Creative Commons
    Attribution Share-Alike license, and the Arduino FAQ (*[https://www.arduino.cc/en/Main/FAQ](https://www.arduino.cc/en/Main/FAQ)*)
    states that anyone is “free to use and adapt [these designs] for your own needs
    without asking permission or paying a fee.” Derivative boards work with the same
    programming environment as an official Arduino, but often the hardware has been
    tweaked or modified in some way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多官方认证的Arduino品牌电路板，但由于该平台是*开源的*（意味着硬件设计和软件的源代码可以供任何人查看和修改），因此也有许多Arduino衍生板、克隆板和兼容板。所有的电路板设计都采用了创意共享署名相同方式许可协议，Arduino的常见问题解答（*
    [https://www.arduino.cc/en/Main/FAQ](https://www.arduino.cc/en/Main/FAQ) *）中指出，任何人“都可以自由使用和修改这些设计以满足自己的需求，无需请求许可或支付费用。”衍生板与官方Arduino使用相同的编程环境，但硬件通常已经经过某些调整或修改。
- en: The SparkFun RedBoard, pictured in [Figure 1-3](ch01.xhtml#ch01fig03), is an
    Arduino-compatible derivative board. It is based on the Arduino Uno design but
    has a more stable USB interface and uses a USB mini connector instead of the Type-A
    connector. Otherwise, it is exactly the same as the Uno, with the same size and
    shape.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图1-3](ch01.xhtml#ch01fig03)所示的SparkFun RedBoard是一个Arduino兼容衍生板。它基于Arduino
    Uno的设计，但具有更稳定的USB接口，并使用USB迷你连接器而不是Type-A连接器。除此之外，它与Uno完全相同，大小和形状一致。
- en: '**FIGURE 1-3:** The Arduino-compatible SparkFun RedBoard. Notice how its shape
    matches up with the Arduino Uno in [Figure 1-2](ch01.xhtml#ch01fig02).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-3：** Arduino兼容的SparkFun RedBoard。注意它的形状与[图1-2](ch01.xhtml#ch01fig02)中的Arduino
    Uno相匹配。'
- en: '![Image](../images/fig1_3.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_3.jpg)'
- en: The RedBoard is the go-to Arduino board here at SparkFun and has a few key components
    that you’ll need to know in order to navigate the first few chapters of this book.
    We have labeled each term for you in [Figure 1-3](ch01.xhtml#ch01fig03).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: RedBoard是SparkFun推荐的Arduino板，包含了一些你需要了解的关键组件，以帮助你顺利阅读本书的前几个章节。我们在[图1-3](ch01.xhtml#ch01fig03)中标出了每个术语。
- en: '**ATmega328 microcontroller** The square black chip in the middle of the board.
    It is the brain of the Arduino.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**ATmega328微控制器** 电路板中间的方形黑色芯片。它是Arduino的大脑。'
- en: '**Header pins** The tiny metal legs on the microcontroller, which let you read
    input and send output. They are accessible through the four sets of black headers
    on either side of the Arduino. They are numbered and labeled for specific uses.
    The pins you’ll care about most are those labeled *Digital* (0–13), *Analog In*
    (A0–A5), and *Power*.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**插针** 微控制器上的细小金属引脚，用于读取输入和发送输出。你可以通过Arduino两侧的四组黑色插针接触到这些引脚。它们已编号并标注了特定用途。你最常用到的引脚是标有*数字*（0-13）、*模拟输入*（A0-A5）和*电源*的引脚。'
- en: '**Mini-USB port** This is how you send code to and communicate with the Arduino.
    You can also power your board using the USB port for most applications in this
    book. If an external power supply is needed, we’ll be sure to point it out.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**迷你USB端口** 这是你向Arduino发送代码并与其通信的方式。对于本书中的大多数应用，你也可以通过USB端口为电路板供电。如果需要外部电源，我们会特别指出。'
- en: '**Power LED** This LED is an indicator to show that the Arduino is powered
    on. If you ever have a short circuit on your board or a bad power connection,
    this indicator will not turn on.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**电源LED** 这个LED指示灯用来显示Arduino是否已经通电。如果电路板上出现短路或电源连接不良，这个指示灯将不会亮起。'
- en: '**TX/RX LEDs** These LEDs blink when data, such as code or numbers, is being
    passed back and forth between your Arduino and your laptop.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**TX/RX LED** 当数据（如代码或数字）在你的Arduino和笔记本电脑之间传输时，这些LED会闪烁。'
- en: '**Onboard LED 13** A debug light. If you’re plugging your Arduino in for the
    first time, LED 13 should blink once per second. It’s connected to pin 13 on the
    Arduino.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**板载LED 13** 调试指示灯。如果你是第一次插入Arduino，LED 13应该每秒闪烁一次。它连接到Arduino的第13号引脚。'
- en: '**External power jack** A barrel jack port next to the USB port. The Arduino
    takes 5 V of power, though you can safely supply the Arduino a voltage between
    7 and 15 V without damaging your board. A chip on the Arduino scales this input
    voltage down to 5 V for the electronics and circuitry to work properly.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**外部电源插孔** 一个位于USB端口旁的圆柱插孔。Arduino需要5V电源，尽管你可以安全地为Arduino提供7V到15V之间的电压而不会损坏电路板。Arduino上的一个芯片将输入电压降低到5V，以便电子元件和电路正常工作。'
- en: Like all Arduino-compatible boards, you’ll program the RedBoard with the Arduino
    IDE.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有兼容Arduino的板子一样，你将通过Arduino IDE来编程RedBoard。
- en: '**INSTALLING THE ARDUINO IDE AND DRIVERS**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**安装Arduino IDE和驱动程序**'
- en: You should install the Arduino IDE before plugging your RedBoard into the USB
    port for the first time. To install the Arduino IDE, go to *[http://www.arduino.cc/download/](http://www.arduino.cc/download/)*.
    Select the appropriate version for your computer’s operating system, and click
    the link to download ([Figure 1-4](ch01.xhtml#ch01fig04)). You’ll be asked whether
    you’d like to make a contribution; the development and maintenance of the Arduino
    IDE rely on the help and contributions of the community that uses it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次将RedBoard插入USB端口之前，你应该先安装Arduino IDE。要安装Arduino IDE，请访问*[http://www.arduino.cc/download/](http://www.arduino.cc/download/)*。选择适合你电脑操作系统的版本，点击链接进行下载（[图1-4](ch01.xhtml#ch01fig04)）。你将被询问是否愿意做出贡献；Arduino
    IDE的开发和维护依赖于使用该软件的社区的帮助和贡献。
- en: '**NOTE**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’ve already plugged in your board, that’s not a problem—you may just
    need to restart your computer after the installation is complete for the drivers
    to work properly.*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你已经插入了你的板子，那也没问题——你可能只需要在安装完成后重启计算机，才能使驱动程序正常工作。*'
- en: '**FIGURE 1-4:** You can use the online IDE or download the latest version for
    your operating system.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-4：** 你可以使用在线IDE，也可以下载适合你操作系统的最新版本。'
- en: '![Image](../images/fig1_4.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_4.jpg)'
- en: Even if you already have the IDE installed, we recommend downloading and installing
    the latest version. The Arduino IDE is continuously being updated and improved,
    and it’s best to have the newest release. The examples in this book use IDE versions
    1.8.1 and later.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你已经安装了IDE，我们仍然建议下载并安装最新版本。Arduino IDE正在持续更新和改进，最好使用最新发布的版本。本书中的示例使用的是IDE 1.8.1及更高版本。
- en: '**NOTE**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you like to be on the bleeding edge of software, the Arduino Downloads
    page also provides nightly builds that preview the next release. For this book,
    however, we recommend using the latest stable release.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你喜欢使用最新的软件版本，Arduino下载页面还提供了夜间构建版，可以预览下一次发布的版本。不过，本书建议使用最新的稳定版。*'
- en: The Arduino website also provides an online platform called Arduino Create,
    which includes a web-based code editor. It allows you to program your device through
    your web browser and share and view projects with others online. As of the writing
    of this book, it is supported only on Windows and OS X.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino官网还提供了一个名为Arduino Create的在线平台，其中包括一个基于网页的代码编辑器。它允许你通过网页浏览器编程设备，并与他人分享和查看项目。截至本书编写时，它仅支持Windows和OS
    X。
- en: Whether you choose to use Arduino Create or the downloaded IDE, follow the directions
    online to run the installation process.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择使用Arduino Create还是下载的IDE，按照在线指南完成安装过程。
- en: '**Installing on Windows**'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在Windows上安装**'
- en: If you’re working on a Windows PC, we recommend downloading the Windows Installer
    version of Arduino. Download this file, open it, and click **Run**. This will
    bring up the Installation Options dialog ([Figure 1-5](ch01.xhtml#ch01fig05)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Windows电脑，我们建议下载Arduino的Windows安装包版本。下载此文件，打开它，并点击**运行**。这将弹出安装选项对话框（[图1-5](ch01.xhtml#ch01fig05)）。
- en: '**FIGURE 1-5:** Installation Options dialog for Arduino. Make sure that USB
    drivers are selected!'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-5：** Arduino安装选项对话框。确保选择了USB驱动程序！'
- en: '![Image](../images/fig1_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_5.jpg)'
- en: Check the **Install Arduino software** box along with the other options, or
    you’ll have to install the drivers separately. Then, tell the installer where
    you’d like to install Arduino (we recommend accepting the default directory),
    and click **Install**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 勾选**安装Arduino软件**选项以及其他选项，否则你将需要单独安装驱动程序。然后，告诉安装程序你希望将Arduino安装在哪个位置（我们建议接受默认目录），并点击**安装**。
- en: Once you begin the installation process, have a snack or a cup of coffee, because
    it could take a few minutes to complete. Depending on your version of Windows,
    you might again be asked if you want to install drivers and if Arduino LLC is
    trusted, as pictured in [Figure 1-6](ch01.xhtml#ch01fig06).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始安装过程，记得吃个零食或者喝杯咖啡，因为完成安装可能需要几分钟。根据你使用的Windows版本，你可能会再次被询问是否要安装驱动程序，以及是否信任Arduino
    LLC，如[图1-6](ch01.xhtml#ch01fig06)所示。
- en: '**FIGURE 1-6:** In Arduino we trust!'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-6：** 我们信任Arduino！'
- en: '![Image](../images/fig1_6.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_6.jpg)'
- en: If you don’t want to see prompts like this again, check the box that says you
    trust Arduino. Either way, click **Install** to install the USB drivers. That’s
    it! Arduino typically installs a shortcut on your desktop. Double-click that now
    to run the Arduino IDE.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想再看到类似的提示，勾选“我信任Arduino”的选项。无论如何，点击**安装**来安装USB驱动程序。就这样！Arduino通常会在桌面上安装一个快捷方式。现在双击它以运行Arduino
    IDE。
- en: '**Installing on OS X**'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在OS X上安装**'
- en: If you’re using a Mac, download the Arduino IDE option for OS X, and follow
    the directions in this section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Mac，请下载适用于OS X的Arduino IDE选项，并按照本节中的说明操作。
- en: '**Installing the IDE**'
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**安装IDE**'
- en: After the download is complete, hover your cursor over your *Downloads* folder,
    and click **Open in Finder** as shown in [Figure 1-7](ch01.xhtml#ch01fig07).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，将光标悬停在*下载*文件夹上，并点击**在Finder中打开**，如[图1-7](ch01.xhtml#ch01fig07)所示。
- en: '**FIGURE 1-7:** After downloading, the program will be in the *Downloads* folder.
    Click **Open in Finder** to move it into the *Applications* folder.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-7：**下载后，程序将位于*下载*文件夹中。点击**在Finder中打开**将其移动到*应用程序*文件夹。'
- en: '![Image](../images/fig1_7.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_7.jpg)'
- en: Then, simply click and drag the *Arduino* program file into the *Applications*
    folder, as shown in [Figure 1-8](ch01.xhtml#ch01fig08). In most cases, you won’t
    need to install anything else, and you should be able to open the Arduino IDE
    as you would any other program.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需点击并拖动*Arduino*程序文件到*应用程序*文件夹，如[图1-8](ch01.xhtml#ch01fig08)所示。在大多数情况下，你不需要安装其他任何东西，你应该可以像打开其他程序一样打开Arduino
    IDE。
- en: '**FIGURE 1-8:** Click and drag the *Arduino* file into the *Applications* folder
    on the left.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-8：**点击并将*Arduino*文件拖动到左侧的*应用程序*文件夹中。'
- en: '![Image](../images/fig1_8.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_8.jpg)'
- en: '**Installing the FTDI Driver Manually on OS X**'
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在OS X上手动安装FTDI驱动程序**'
- en: If you’re using a standard Arduino Uno board, the drivers should be preinstalled
    and work out of the box. If you’re using the SparkFun RedBoard, there’s one extra
    step needed to manually install a driver. The SparkFun RedBoard uses a USB chip
    from Future Technology Devices International (FTDI) to communicate with your computer.
    You need to manually install the FTDI driver for this chip. First, navigate to
    *[http://www.sparkfun.com/ftdi/](http://www.sparkfun.com/ftdi/)*. This will take
    you to our tutorial on installing FTDI drivers (see [Figure 1-9](ch01.xhtml#ch01fig09)).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是标准的Arduino Uno板，驱动程序应该已经预装并且开箱即用。如果你使用的是SparkFun RedBoard，则需要额外一步来手动安装驱动程序。SparkFun
    RedBoard使用来自未来科技设备国际公司（FTDI）的USB芯片与计算机通信。你需要手动安装该芯片的FTDI驱动程序。首先，访问*[http://www.sparkfun.com/ftdi/](http://www.sparkfun.com/ftdi/)*。这将引导你查看我们关于安装FTDI驱动程序的教程（见[图1-9](ch01.xhtml#ch01fig09)）。
- en: Click the link for Mac OS X. This will direct you to options for a driver to
    install based on the version of OS X running on your computer. There is one option
    if you have Mac OS X 10.3 (Panther) to 10.8 (Mountain Lion) and another option
    if you have Mac OS X 10.9 (Mavericks) or greater.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 点击Mac OS X的链接。这将引导你根据计算机上运行的OS X版本选择要安装的驱动程序选项。如果你使用的是Mac OS X 10.3（Panther）到10.8（Mountain
    Lion），有一个选项；如果你使用的是Mac OS X 10.9（Mavericks）或更高版本，则有另一个选项。
- en: '**FIGURE 1-9:** SparkFun FTDI Installation Guide'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-9：**SparkFun FTDI安装指南'
- en: '![Image](../images/fig1_9.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_9.jpg)'
- en: Download the appropriate driver and double-click it to start the installation
    process. You should be greeted with the familiar Mac software install window.
    Select your hard drive once it is found, and click **OK**. Continue through the
    installation process, and when the progress bar fills up (as in [Figure 1-10](ch01.xhtml#ch01fig10)),
    the drivers should be installed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适当的驱动程序并双击它以启动安装过程。你应该会看到熟悉的Mac软件安装窗口。找到你的硬盘并点击**确定**。继续安装过程，当进度条填满（如[图1-10](ch01.xhtml#ch01fig10)所示）时，驱动程序应已安装完毕。
- en: '**FIGURE 1-10:** Installation of the FTDI drivers on OS X'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-10：**在OS X上安装FTDI驱动程序'
- en: '![Image](../images/fig1_10.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_10.jpg)'
- en: That’s it! Now, double-click the Arduino icon in your *Applications* folder
    to run the IDE. If you’ve already opened the IDE before installing the FTDI drivers,
    you’ll need to fully exit and close out of the Arduino IDE and restart it for
    your serial ports to show up correctly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在，双击你*应用程序*文件夹中的Arduino图标来运行IDE。如果你在安装FTDI驱动程序之前已经打开过IDE，你需要完全退出并关闭Arduino
    IDE，然后重新启动它，才能正确显示串口。
- en: '**NOTE**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you encounter an error after driver installation, check out solutions at*
    [https://www.sparkfun.com/macdriver/](https://www.sparkfun.com/macdriver/)*.*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果在安装驱动程序后遇到错误，请查看解决方案：* [https://www.sparkfun.com/macdriver/](https://www.sparkfun.com/macdriver/)
    *。*'
- en: '**Installing on Linux**'
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在Linux上安装**'
- en: Arduino is available for Linux users, too. Download the correct Linux file for
    your system; it comes in 32- and 64-bit flavors. Then, uncompress the file using
    `xz-utils` or another file compression utility. If you want to use the latest
    version of Arduino in Linux, you may need to install some other dependency programs
    as well. Go to *[http://playground.arduino.cc/Learning/Linux/](http://playground.arduino.cc/Learning/Linux/)*
    for distribution-specific information on this.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino也可以供Linux用户使用。下载适合你系统的Linux文件，文件有32位和64位版本。然后，使用`xz-utils`或其他文件压缩工具解压该文件。如果你想在Linux上使用最新版本的Arduino，可能还需要安装一些其他依赖程序。请访问*[http://playground.arduino.cc/Learning/Linux/](http://playground.arduino.cc/Learning/Linux/)*，查看与特定发行版相关的信息。
- en: 'For most distributions of Linux (including Ubuntu, Debian, and Fedora), you
    should be able to use the `apt-get` package manager to install Arduino from the
    command line. Open a terminal and enter the following command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数Linux发行版（包括Ubuntu、Debian和Fedora），你应该能够使用`apt-get`包管理器通过命令行安装Arduino。打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the process is complete, open the Arduino program you just installed. Arduino
    uses Java to run the IDE and must be run out of an XWindows or comparable window
    user interface environment.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开你刚刚安装的Arduino程序。Arduino使用Java运行IDE，必须在XWindows或类似的窗口用户界面环境中运行。
- en: '**NOTE**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Depending on the package manager for your distribution of Linux, the version
    you install this way may not be the latest version currently hosted on the Arduino
    site.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*根据你的Linux发行版的包管理器，你通过这种方式安装的版本可能不是当前Arduino网站上托管的最新版本。*'
- en: '**A BRIEF IDE TOUR**'
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**简要介绍IDE**'
- en: The IDE is a place for you to write instructions for your Arduino and test them
    out. These instructions form a program, or in Arduino terminology, a *sketch*.
    The IDE allows you to *upload* your sketch to your Arduino and control things
    in the physical world.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: IDE是你编写Arduino指令并进行测试的地方。这些指令组成一个程序，或者在Arduino术语中称为*草图*。IDE允许你将草图*上传*到Arduino，并控制现实世界中的事物。
- en: If you haven’t done so already, open your newly installed Arduino program. After
    a splash screen, you should see the IDE, which looks something like [Figure 1-11](ch01.xhtml#ch01fig11).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，打开你新安装的Arduino程序。经过启动屏幕后，你应该会看到IDE，它看起来像[图1-11](ch01.xhtml#ch01fig11)所示。
- en: '**FIGURE 1-11:** The Arduino IDE'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-11：** Arduino IDE'
- en: '![Image](../images/fig1_11.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_11.jpg)'
- en: You can use the menu bar (which consists of File, Edit, Sketch, Tools, and Help
    menus) ➊ to open or save files, upload your code to the Arduino, modify settings,
    and so on. You should also see a set of graphic buttons ➋. In order from left
    to right, these are Verify/ Compile, Upload, New, Open, and Save. We will explore
    those menus and buttons throughout this book. The majority of the IDE is whitespace
    ➌; this is where you’ll write your code. Underneath the code area is the *alert
    bar* ➍, and below it you’ll find the console ➎; these report statuses, alerts,
    and errors. For example, if there’s a typo in your sketch (called a *syntax error*),
    the IDE will show you the error there. If you try typing your name in the code
    window and click the check mark (Verify/Compile) button, the Arduino IDE will
    think for a bit and then show an error in the alert bar, highlight your name,
    and give you more information in the console about the error, as you can see in
    [Figure 1-12](ch01.xhtml#ch01fig12).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用菜单栏（包含文件、编辑、草图、工具和帮助菜单） ➊ 来打开或保存文件，上传代码到Arduino，修改设置等。你还应该看到一组图形按钮 ➋。从左到右依次是验证/编译、上传、新建、打开和保存。我们将在本书中探讨这些菜单和按钮。IDE的大部分区域是空白区域
    ➌；这里是你编写代码的地方。代码区域下方是*警报栏* ➍，下面是控制台 ➎；这些区域用于报告状态、警报和错误。例如，如果你的草图中有拼写错误（称为*语法错误*），IDE会在那里显示错误。如果你在代码窗口中键入你的名字并点击勾选按钮（验证/编译），Arduino
    IDE会稍作思考，然后在警报栏中显示错误，突出显示你的名字，并在控制台中提供更多错误信息，如[图1-12](ch01.xhtml#ch01fig12)所示。
- en: '**FIGURE 1-12:** A typical error message and readout in the Arduino IDE'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-12：** Arduino IDE中的典型错误信息和输出'
- en: '![Image](../images/fig1_12.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_12.jpg)'
- en: '**CHANGING THE DEFAULT PREFERENCES**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更改默认偏好设置**'
- en: Arduino is a fully open and configurable programming environment. There are
    a few minor things we like to tweak in the preferences to make it easier to write
    code, debug, and make cool stuff. Select **File ▸ Preferences** to view and change
    the general settings of the Arduino IDE. You should see a window similar to [Figure
    1-13](ch01.xhtml#ch01fig13).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 是一个完全开放且可配置的编程环境。我们有一些小设置可以调整，以便更容易编写代码、调试和制作有趣的东西。选择 **文件 ▸ 首选项** 来查看和更改
    Arduino IDE 的一般设置。你应该会看到一个类似于[图 1-13](ch01.xhtml#ch01fig13)的窗口。
- en: We suggest adjusting the editor font size so it’s comfortable for you to read.
    We also like to check **Display line numbers** and uncheck **Save when verifying
    or uploading**. Line numbers will help you navigate around your code easier, and
    unchecking the auto-saving feature will allow you to quickly test code without
    having to save it each time. Arduino is completely open, so if you want to, you
    can also click the *preferences.txt* file and adjust many other features.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议调整编辑器的字体大小，使其适合你阅读。我们还喜欢勾选 **显示行号**，并取消勾选 **验证或上传时保存**。行号会帮助你更容易地导航代码，取消自动保存功能则可以让你快速测试代码，而不必每次都保存。Arduino
    是完全开放的，所以如果你愿意，你也可以点击 *preferences.txt* 文件，调整更多其他功能。
- en: '**FIGURE 1-13:** Arduino Preferences window'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-13：** Arduino 设置窗口'
- en: '![Image](../images/fig1_13.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_13.jpg)'
- en: '**TEST DRIVE: PLUGGING IN THE ARDUINO FOR THE FIRST TIME**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**试用：第一次插入 Arduino**'
- en: When you have the Arduino IDE and drivers fully installed, connect your Arduino
    board to the USB port of your computer using the appropriate cable. The power
    LED should turn on, and if your board is completely new, you should see an LED,
    labeled 13, blinking as in [Figure 1-14](ch01.xhtml#ch01fig14). Your computer
    is powering the Arduino board through the USB cable, and it’s running code that
    was installed at the factory. Unlike a computer, an Arduino can only store and
    run a single sketch at a time. The standard test sketch loaded onto an Arduino
    is a simple LED blink. With your board plugged in, you’ll set up the IDE so that
    you can write your own sketch.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完全安装好 Arduino IDE 和驱动程序后，使用合适的电缆将 Arduino 板子连接到计算机的 USB 端口。电源 LED 应该会亮起，如果你的板子是全新的，你应该会看到一个标记为
    13 的 LED 如[图 1-14](ch01.xhtml#ch01fig14)所示闪烁。你的计算机通过 USB 电缆为 Arduino 板子供电，并运行出厂时已安装的代码。与计算机不同，Arduino
    一次只能存储和运行一个 sketch。加载到 Arduino 上的标准测试 sketch 是一个简单的 LED 闪烁。当你的板子连接好后，你将设置 IDE
    以便编写你自己的 sketch。
- en: '**NOTE**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you plugged in your board before installing the IDE and drivers, you may
    need to restart your computer.*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你在安装 IDE 和驱动程序之前插入了板子，可能需要重启计算机。*'
- en: '**FIGURE 1-14:** The LED labeled 13 blinks when you power a new board.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-14：** 当你为新板子供电时，标记为 13 的 LED 会开始闪烁。'
- en: '![Image](../images/fig1_14.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_14.jpg)'
- en: '**Choosing Your Board in the IDE**'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在 IDE 中选择你的板子**'
- en: Depending on your computer or operating system, it may take a little bit for
    the computer to identify the new hardware you just plugged in and associate it
    with the drivers you installed. After your computer recognizes the new device,
    click **Tools** and mouse over the **Board** option, as in [Figure 1-15](ch01.xhtml#ch01fig15).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的计算机或操作系统，可能需要一些时间让计算机识别你刚插入的新硬件，并与已安装的驱动程序关联。在计算机识别新设备后，点击 **工具**，并将鼠标悬停在
    **板子** 选项上，如[图 1-15](ch01.xhtml#ch01fig15)所示。
- en: '**FIGURE 1-15:** The Board selection list in the Tools menu'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-15：** 工具菜单中的板子选择列表'
- en: '![Image](../images/fig1_15.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_15.jpg)'
- en: A list of pre-supported Arduino boards should appear. If you’re using a standard
    Arduino Uno or the SparkFun RedBoard, select the option **Arduino/Genuino Uno**.
    If you end up using a board other than an Uno or RedBoard in the future, select
    the correct Arduino based on your board’s documentation—this book assumes that
    you’re using the Uno or an Uno derivative.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 应该会出现一个预支持的 Arduino 板子列表。如果你使用的是标准的 Arduino Uno 或 SparkFun RedBoard，选择 **Arduino/Genuino
    Uno** 选项。如果以后使用的板子不同于 Uno 或 RedBoard，请根据板子的文档选择正确的 Arduino——本书假设你使用的是 Uno 或 Uno
    衍生板。
- en: '**Selecting the Communication Port**'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**选择通信端口**'
- en: Each device that’s plugged into your computer has a unique communication port
    identifier. You need to configure the IDE so that it knows which port your Arduino
    is connected to. To do this, first select **Tools ▸ Port** to see the communication
    port options for your device. You’ll see different options depending on your operating
    system.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每个连接到你计算机的设备都有一个独特的通信端口标识符。你需要配置 IDE，以便它知道你的 Arduino 连接到哪个端口。为此，首先选择 **工具 ▸
    端口**，查看设备的通信端口选项。根据你的操作系统，你会看到不同的选项。
- en: '**On Windows**'
  id: totrans-103
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在 Windows 上**'
- en: If you’re using a Windows PC, you may see COM3, COM4, or another numbered COM
    port, as shown in [Figure 1-16](ch01.xhtml#ch01fig16). Select this option. If
    no options show up, see “[Basic Arduino Troubleshooting](ch01.xhtml#ch01lev1sec8)”
    on page [27](ch01.xhtml#page_27).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows PC，你可能会看到 COM3、COM4 或其他编号的 COM 端口，如[图 1-16](ch01.xhtml#ch01fig16)所示。选择此选项。如果没有显示任何选项，请参阅页面[27](ch01.xhtml#page_27)上的“[基本
    Arduino 故障排除](ch01.xhtml#ch01lev1sec8)”。
- en: '**FIGURE 1-16:** Selecting the communication port on Windows'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-16：** 在 Windows 上选择通信端口'
- en: '![Image](../images/fig1_16.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_16.jpg)'
- en: '**On OS X and Linux**'
  id: totrans-107
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**在 OS X 和 Linux 上**'
- en: On Mac or Linux machines, the communication port should be listed as */dev/cu.usbserial-A<xxxx>*,
    where the *<xxxx>* is a string of random characters unique to your Arduino. Select
    this option. You may see more than one port listed, as in [Figure 1-17](ch01.xhtml#ch01fig17),
    but only the one with this unique ID string will map to your Arduino. If no options
    show up, see “[Basic Arduino Troubleshooting](ch01.xhtml#ch01lev1sec8)” on page
    [27](ch01.xhtml#page_27).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac 或 Linux 机器上，通信端口应该列为 */dev/cu.usbserial-A<xxxx>*，其中的 *<xxxx>* 是一个独特的随机字符序列，特定于你的
    Arduino。选择此选项。你可能会看到列出多个端口，如[图 1-17](ch01.xhtml#ch01fig17)所示，但只有带有此唯一 ID 字符串的端口会映射到你的
    Arduino。如果没有显示任何选项，请参阅页面[27](ch01.xhtml#page_27)上的“[基本 Arduino 故障排除](ch01.xhtml#ch01lev1sec8)”。
- en: '**FIGURE 1-17:** Selecting the communication port on OS X'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-17：** 在 OS X 上选择通信端口'
- en: '![Image](../images/fig1_17.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_17.jpg)'
- en: '**AN ARDUINO “HELLO, WORLD!”**'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**一个 Arduino 的“Hello, World！”**'
- en: “Hello, world!” is the classic first program that many beginning programmers
    write. In most other programming languages, this program displays `Hello, world!`
    to the screen. Because the Arduino doesn’t have a screen, its version of “Hello,
    world!” is a blinking LED.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “Hello, world!” 是许多初学者编写的经典第一个程序。在大多数其他编程语言中，这个程序会在屏幕上显示 `Hello, world!`。由于
    Arduino 没有屏幕，它的“Hello, world!”版本是一个闪烁的 LED。
- en: For your first sketch, we’ll show you how to use an example that comes with
    the Arduino IDE. With your board connected to your computer, click the **File**
    drop-down menu and select **Examples ▸ 01.Basics ▸ Blink** as shown in [Figure
    1-18](ch01.xhtml#ch01fig18) to open a sketch called *Blink*.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你的第一个程序，我们将向你展示如何使用 Arduino IDE 自带的示例。将你的板子连接到计算机后，点击 **文件** 下拉菜单，选择 **示例
    ▸ 01.基础 ▸ Blink**，如[图 1-18](ch01.xhtml#ch01fig18)所示，打开名为 *Blink* 的程序。
- en: A new IDE window containing the Blink sketch should open. In this window, click
    **Sketch ▸ Upload** or click the **Upload** icon. The IDE will turn this relatively
    human-readable code into 1s and 0s that the Arduino understands (a process called
    *compiling*) and then upload the sketch to your board.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应该会打开一个包含 Blink 程序的新 IDE 窗口。在这个窗口中，点击 **程序 ▸ 上传** 或点击 **上传** 图标。IDE 会将这段相对易于理解的代码转化为
    Arduino 可以理解的 1 和 0（二进制代码），这叫做 *编译*，然后将程序上传到你的板子上。
- en: '**FIGURE 1-18:** Finding the Blink sketch'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-18：** 查找 Blink 程序'
- en: '![Image](../images/fig1_18.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_18.jpg)'
- en: After you click Upload, watch the alert area for status messages. It should
    say *Compiling sketch…* and show a progress bar. After the compiling is complete,
    your computer will start to upload the sketch to your Arduino. The RX (receive)
    and TX (transmit) LEDs on your Arduino board should blink rapidly, indicating
    that the sketch is being transmitted to the Arduino board. The TX light blinks
    because you’re transmitting something to the Arduino, and the RX light blinks
    because as the Arduino receives the sketch, it responds to your computer to confirm
    receipt. When the upload process is done, the status area on the IDE should say
    *Upload complete*, and the LED labeled 13 on your board should blink, as in [Figure
    1-19](ch01.xhtml#ch01fig19).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击上传后，注意观察警报区域的状态消息。它应该显示*正在编译草图…*并显示进度条。编译完成后，你的电脑将开始将草图上传到 Arduino。Arduino
    板上的 RX（接收）和 TX（发送）指示灯应该快速闪烁，表示草图正在传输到 Arduino 板上。TX 灯闪烁是因为你正在向 Arduino 发送数据，RX
    灯闪烁是因为 Arduino 在接收到草图后，会向你的电脑确认已接收。当上传过程完成时，IDE 上的状态区域应该显示*上传完成*，并且板上标有 13 的 LED
    应该闪烁，正如[图 1-19](ch01.xhtml#ch01fig19)所示。
- en: '**FIGURE 1-19:** Turning on LED 13'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-19：** 打开 LED 13'
- en: '![Image](../images/fig1_19.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_19.jpg)'
- en: If you get any error messages, your Arduino might not be talking to your computer.
    Read the next section, “[Basic Arduino Troubleshooting](ch01.xhtml#ch01lev1sec8),”
    for some common problems to look out for, and then try uploading the sketch again.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你收到任何错误消息，可能是你的 Arduino 没有与电脑通信。阅读下一节“[基本的 Arduino 故障排除](ch01.xhtml#ch01lev1sec8)”以了解一些常见问题，并尝试重新上传草图。
- en: '**BASIC ARDUINO TROUBLESHOOTING**'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**基础的 Arduino 故障排除**'
- en: The Arduino, like any other programmable piece of electronics, is temperamental
    at times. Here are a few troubleshooting tips for when you have trouble programming
    your Arduino.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他任何可编程电子设备一样，Arduino 有时也会出现问题。以下是一些编程 Arduino 时遇到问题的故障排除建议。
- en: 1\. Make sure that your Arduino is plugged into your USB cable and that the
    cable is plugged into your computer all the way. It’s easy to have the cable only
    partially plugged into the board. You can also try unplugging it and plugging
    it back in.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 确保你的 Arduino 已插入 USB 电缆，并且电缆完全插入电脑。电缆可能只部分插入了板上。你也可以尝试拔掉电缆再重新插上。
- en: 2\. Always confirm the board selected in the Board menu is the board plugged
    into your computer. For our examples, we will have *Arduino/Genuino Uno* selected.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 始终确认在板菜单中选择的板是已插入电脑的板。我们的示例中将选择 *Arduino/Genuino Uno*。
- en: 3\. Confirm that the correct communication port is selected in the Tools ▸ Port
    menu; it should have a checkmark or dot next to it. If you’re not sure which port
    goes with your Arduino, unplug your USB cable from your computer, refresh the
    communication port listing, and watch to see which port disappears.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 确认在工具 ▸ 端口菜单中选择了正确的通信端口；该端口旁边应该有一个勾选标记或圆点。如果你不确定哪个端口对应你的 Arduino，可以拔掉 USB
    电缆，刷新通信端口列表，观察哪个端口消失。
- en: 4\. Make sure you didn’t accidentally type some stray characters into your example
    sketch. The code will not compile if there are any extra characters.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 4. 确保你没有在示例草图中错误地输入一些杂散字符。如果有多余的字符，代码将无法编译。
- en: 5\. On Windows, check your computer’s Device Manager. Make sure that there isn’t
    an exclamation mark next to the device. If there is, you need to reinstall the
    drivers manually.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 在 Windows 上，检查你电脑的设备管理器。确保设备旁没有感叹号。如果有，你需要手动重新安装驱动程序。
- en: 6\. If you’re still getting error messages, reinstall the drivers for your board.
    We have additional instructions available at *[www.sparkfun.com/ftdi/](http://www.sparkfun.com/ftdi/)*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 如果你仍然收到错误消息，重新安装你的板驱动程序。我们在 *[www.sparkfun.com/ftdi/](http://www.sparkfun.com/ftdi/)*
    提供了更多的安装说明。
- en: These six tips are solutions to common speed bumps for anyone new to Arduino,
    so start here. If none of these suggestions solves the issue, just stay calm,
    be patient, and remember that you’re not the first one to have a problem. If you
    get completely stuck, look for solutions on the official Arduino forum at *[http://forum.arduino.cc/](http://forum.arduino.cc/).*
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这六个小贴士是解决 Arduino 新手常见问题的方法，建议从这里开始。如果这些建议没有解决问题，请保持冷静，耐心等待，记住你不是第一个遇到问题的人。如果你完全卡住了，可以在官方
    Arduino 论坛上寻找解决方案，地址是 *[http://forum.arduino.cc/](http://forum.arduino.cc/)*。
- en: '**ANATOMY OF AN ARDUINO SKETCH**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Arduino 草图的结构**'
- en: In this section, we’ll walk you through the Blink sketch that you uploaded to
    the Arduino in ‘An Arduino “Hello, World!”’ on page [25](ch01.xhtml#page_25).
    First, [Listing 1-1](ch01.xhtml#ch01ex01) gives the sketch itself, in all its
    blinky glory.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将引导你通过上传到Arduino中的Blink示例，这个示例在《Arduino "Hello, World!"》的第[25](ch01.xhtml#page_25)页中出现。首先，[清单
    1-1](ch01.xhtml#ch01ex01)展示了完整的Blink示例，闪烁效果尽显其中。
- en: '**LISTING 1-1:** The Blink example sketch'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 1-1:** Blink示例代码'
- en: '[PRE1]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When writing sketches in Arduino, you need to be very specific with the words,
    punctuation, and capitalization you use. These elements are part of a programming
    language’s *syntax*. For the IDE to compile your sketch properly, you must use
    words that it recognizes. These are called *keywords*, and you’ll notice them
    when they change to a different color, such as orange, teal, or green. Now, let’s
    look at some of the features used in this first sketch in detail.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Arduino示例时，你需要非常注意使用的词汇、标点符号和大小写。这些元素是编程语言*语法*的一部分。为了使IDE能够正确编译你的示例，你必须使用它所识别的单词。这些单词被称为*关键字*，你会注意到它们会变成不同的颜色，比如橙色、青色或绿色。现在，让我们详细看看这个第一个示例中使用的一些特性。
- en: '**Key Sketch Elements**'
  id: totrans-135
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**关键示例元素**'
- en: At the top of the sketch, you declare a new *global namespace* ➊. This is a
    space that describes what the sketch does and often includes other information
    such as variable initializations and library statements. Nearly every sketch will
    include a namespace. This sketch’s namespace has comments written to help human
    readers understand what the sketch does. In the Arduino IDE, comments are gray.
    Every comment either starts with the characters `//` or is bounded by the symbols
    `/*` and `*/` if the comment is longer than a few lines. Notice that not all comments
    come between lines of code; some appear on the same line as the code they clarify.
    This doesn’t affect the sketch, because comments are ignored by the IDE. Unlike
    with code, you can write anything you want in the comments using regular words,
    spelling, or punctuation.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例的顶部，你会声明一个新的*全局命名空间* ➊。这个命名空间描述了示例的功能，并且通常会包含其他信息，如变量初始化和库声明。几乎每个示例都会包括一个命名空间。这个示例的命名空间有注释，帮助人类读者理解示例的功能。在Arduino
    IDE中，注释是灰色的。每个注释要么以`//`开始，要么如果注释内容较长，则用`/*`和`*/`符号包围。注意，不是所有注释都出现在代码行之间；有些注释会出现在它们解释的代码同一行。这不会影响示例，因为IDE会忽略注释。与代码不同，你可以在注释中写任何你想写的内容，包括常规的单词、拼写或标点。
- en: The skeleton of any sketch consists of two main function definitions, `setup()`
    ➋ and `loop()` ➌. A *function* is simply a way of grouping multiple instructions
    or lines of code together. Each function has a data type, a name, and a group
    of instructions. The word before the function indicates the type of data the function
    will return. Both `setup()` and `loop()` have the type `void` because they do
    not return any values.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 任何示例的框架都由两个主要的函数定义组成，`setup()` ➋和`loop()` ➌。*函数*仅仅是将多个指令或代码行组合在一起的一种方式。每个函数都有一个数据类型、一个名称和一组指令。函数前面的单词表示函数将返回的数据类型。`setup()`和`loop()`都有`void`类型，因为它们不会返回任何值。
- en: The name of every function includes a set of parentheses. These parentheses
    are where you pass *parameters* to the function. Parameters are values that a
    function needs to do its job. Neither `setup()` nor `loop()` needs parameters,
    but you’ll use some functions in later projects that do need them. Finally, the
    lines of code that make up the function are grouped by an opening curly bracket,
    `{`, and closing curly bracket, `}`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数的名称后面都包括一对圆括号。这对圆括号是你传递*参数*给函数的地方。参数是函数执行任务所需要的值。`setup()`和`loop()`不需要参数，但在后续的项目中，你将使用一些需要参数的函数。最后，构成函数的代码行由一个大括号`{`和一个闭合的大括号`}`包围。
- en: 'The `setup()` and `loop()` functions are required for every Arduino sketch;
    when the Arduino is turned on for the first time or is reset, the `setup()` code
    runs once and only once, and `loop()` code repeats continuously over and over.
    It’s like baking cookies: instructions in `setup()` get out all of your tools
    and ingredients, and `loop()` bakes batches over and over until you turn off the
    oven (that is, the Arduino).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()`和`loop()`函数是每个Arduino示例所必需的；当Arduino首次启动或被重置时，`setup()`代码只会运行一次，而`loop()`代码则会不断地循环执行。这就像是在烤饼干：`setup()`中的指令准备好所有的工具和原料，而`loop()`则一次次地烘烤批次，直到你关掉烤箱（也就是Arduino）。'
- en: Now, let’s figure out what each line of code in `setup()` and `loop()` is actually
    doing.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来弄清楚`setup()`和`loop()`中的每一行代码究竟在做什么。
- en: '**The setup() Function**'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**setup()函数**'
- en: First, let’s take a closer look at the Blink sketch’s `setup()` function; see
    [Listing 1-2](ch01.xhtml#ch01ex02).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们仔细看看Blink示例中的`setup()`函数；请参见[清单1-2](ch01.xhtml#ch01ex02)。
- en: '**LISTING 1-2:** The `setup()` code for our Blink example'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单1-2：** 我们的Blink示例中的`setup()`代码'
- en: '[PRE2]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The only line of code inside the `setup()` function is a call to the `pinMode()`
    function. Pins 0–13 on the Arduino are considered *general-purpose input/output
    (GPIO) pins*. They can be used as either inputs or outputs, and `pinMode()` allows
    you to tell the Arduino how you plan to use a digital pin. You do this by passing
    two parameters. The first is the pin number, and it can range from 0 to 13\. The
    second parameter is the pin configuration.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()`函数中的唯一一行代码是对`pinMode()`函数的调用。Arduino上的引脚0–13被认为是*通用输入/输出(GPIO)引脚*。它们可以用作输入或输出，而`pinMode()`允许你告诉Arduino你打算如何使用数字引脚。你通过传递两个参数来实现这一点。第一个是引脚编号，范围从0到13。第二个参数是引脚配置。'
- en: For the pin reference, the Blink sketch uses a system constant called `LED_BUILTIN`
    to specify that you’re using the default LED on the device. On most Arduino devices,
    this is the same as pin 13\. Notice that the value is in all caps and colored
    dark teal. This color indicates that `LED_BUILTIN` is a special keyword with a
    predefined value used in the IDE.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于引脚的引用，Blink示例使用了一个名为`LED_BUILTIN`的系统常量，来指定你正在使用设备上的默认LED。在大多数Arduino设备上，这与引脚13相同。注意，值是全大写且为深青色。这种颜色表示`LED_BUILTIN`是一个具有预定义值的特殊关键字，用于IDE中。
- en: The second parameter defines the pin configuration as an `OUTPUT`. Notice that
    the keyword `OUTPUT` is also dark teal because it is another constant used in
    Arduino. There are a few other choices here, which we’ll cover in detail in [Projects
    4](ch04.xhtml#ch04) and [9](ch09.xhtml#ch09), but for now just note that Blink
    sets the pin as an `OUTPUT` for the LED.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数将引脚配置定义为`OUTPUT`。注意，关键字`OUTPUT`也是深青色的，因为它是Arduino中使用的另一个常量。这里还有一些其他选择，我们将在[项目4](ch04.xhtml#ch04)和[项目9](ch09.xhtml#ch09)中详细讨论，但现在请注意，Blink将引脚设置为LED的`OUTPUT`。
- en: If you were to describe this line of code as a sentence, it would say, “Tell
    pin 13 to output from the Arduino.”
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要将这一行代码描述为一句话，它的意思是：“告诉引脚13从Arduino输出。”
- en: '**NOTE**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The* *`pinMode()`* *function follows a capitalization convention called* camel
    case. *In camel case, the first letter is lowercase, and any later letters that
    start words are capitalized.*'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '*`pinMode()`* *函数遵循一种称为驼峰命名法的大小写约定。在驼峰命名法中，首字母小写，后续单词的首字母大写。*'
- en: The very last character in the `pinMode()` call is a semicolon (`;`), which
    marks the end of a line of code. When you start writing your own sketches, always
    end a finished line of code with a semicolon. If you forget one, don’t worry;
    nearly everyone who’s ever programmed forgets a semicolon eventually, so the Arduino
    IDE will show a handy warning to help you figure out where to put the missing
    punctuation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`pinMode()`调用中的最后一个字符是分号（`;`），它标志着一行代码的结束。当你开始编写自己的代码时，始终以分号结束一行代码。如果你忘记了，也不用担心；几乎每个编程过的人都会忘记分号，所以Arduino
    IDE会显示一个有用的警告，帮助你找出哪里需要加上缺失的标点符号。'
- en: '**WHERE’S THE MAIN() FUNCTION?**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**main()函数在哪里？**'
- en: If you know a bit of programming or are familiar with C or C++, you might wonder
    where the `main()` function is in Arduino sketches. When you click Verify/Compile
    or Upload, Arduino actually pulls together a lot of other files behind the scenes—including
    a file called *main.cpp*. Dig around the Arduino program folder, and you can find
    all the nitty-gritty details of what’s going on. Remember, it’s open source!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对编程有所了解，或者熟悉C或C++，你可能会想知道Arduino示例中`main()`函数在哪里。当你点击验证/编译或上传时，Arduino实际上会在后台集成许多其他文件，包括一个名为*main.cpp*的文件。你可以在Arduino程序文件夹中找到所有有关操作的详细信息。记住，它是开源的！
- en: 'Here’s a snippet of code from the *main.cpp* file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是来自*main.cpp*文件的一段代码：
- en: '[PRE3]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See where the `setup()` function is called at ➊? And notice that the `loop()`
    function ➋ is inside a forever loop; Arduino implements a forever loop using an
    empty `for(;;)`. That’s how it runs continuously.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 看看`setup()`函数在哪里被调用的➊？并注意`loop()`函数➋处于一个无限循环中；Arduino通过一个空的`for(;;)`来实现这个永远循环。就是这样，它不断运行。
- en: '**The loop() Function**'
  id: totrans-157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**loop()函数**'
- en: Now let’s look again at the `loop()` function, which executes each instruction
    from top to bottom and repeats itself forever. See [Listing 1-3](ch01.xhtml#ch01ex03).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再看看`loop()`函数，它按从上到下的顺序执行每一条指令，并且永远重复自己。请参见[清单1-3](ch01.xhtml#ch01ex03)。
- en: '**LISTING 1-3:** The `loop()` code for the Blink sketch'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单1-3：** Blink示例的`loop()`代码'
- en: '[PRE4]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `digitalWrite()` function allows you to turn the Arduino pins on or off;
    this is called controlling a pin’s *state*. This function also uses two parameters.
    The first indicates the pin you want to control; in this case, we’re using the
    system constant `LED_BUILTIN` again. The second parameter is the state you want
    the pin to be in. To turn the light on, the Blink sketch passes in `HIGH`. To
    turn the light off, it passes in `LOW`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`digitalWrite()`函数允许你打开或关闭Arduino的引脚；这称为控制引脚的**状态**。这个函数也使用两个参数。第一个参数指示你想要控制的引脚；在这种情况下，我们再次使用系统常量`LED_BUILTIN`。第二个参数是你希望引脚处于的状态。要点亮LED，Blink示例传入`HIGH`。要熄灭LED，则传入`LOW`。'
- en: The second instruction is `delay()`, which delays your sketch by the number
    of milliseconds you pass as its parameter. The Arduino Uno and derivative boards
    like the SparkFun RedBoard execute 16 million instructions per second; that’s
    really fast! It’s so fast, in fact, that without a delay, you’d never notice a
    change in the LED. The delay lets us control how long the LED stays on. In the
    example, `delay(1000)` instructs the Arduino to delay for 1,000 ms before executing
    the next command.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条指令是`delay()`，它通过传入的毫秒数来延迟你的程序执行。Arduino Uno以及像SparkFun RedBoard这样的衍生板每秒钟能执行1600万个指令；这真是非常快！实际上，它非常快，以至于没有延迟，你根本不会注意到LED的变化。延迟使我们能够控制LED点亮的持续时间。在这个示例中，`delay(1000)`指示Arduino在执行下一条命令之前延迟1000毫秒。
- en: The next two lines of code are similar to the first two; they simply instruct
    the Arduino to turn the LED off and delay another 1,000 ms. After the last line,
    the `loop()` function repeats from the top and turns the LED back on.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行代码与前两行类似；它们只是指示Arduino关闭LED，并延迟另外1000毫秒。在最后一行之后，`loop()`函数会从顶部开始重复，并重新点亮LED。
- en: '**HACK THE (HELLO) WORLD**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**黑客（你好）世界**'
- en: One of the best ways to learn from example code is by changing what it does.
    Try decreasing the delays to `500`. Click **Upload**. How did the blink change?
    What if you pass `delay()` the number `5` instead? This is a 5 ms blink! Can you
    see it? What is the fastest blink rate that you *can* see?
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 学习示例代码的最佳方法之一是修改它的行为。试着将延迟时间减少到`500`。点击**上传**。闪烁的变化是什么？如果你传入数字`5`呢？这是一个5毫秒的闪烁！你能看得清楚吗？你能看到的最快闪烁频率是多少？
- en: '**Your First Piece of Hardware**'
  id: totrans-166
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你的第一个硬件**'
- en: 'With the LED on your board working and blinking away, the next step is to add
    your first piece of hardware: an external LED. As we mentioned, the pins on the
    Arduino are used for hooking up inputs and outputs to the microcontroller, and
    we can demonstrate that simply with an LED. Grab an LED and take a close look
    at it. It will look something like [Figure 1-20](ch01.xhtml#ch01fig20).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当板子上的LED正常工作并闪烁时，下一步是添加你第一个硬件：一个外部LED。正如我们之前提到的，Arduino的引脚用于连接输入和输出到微控制器，我们可以通过LED来简单地展示这一点。拿一个LED仔细看看，它的样子大致如[图1-20](ch01.xhtml#ch01fig20)所示。
- en: You’ll notice that the LED has a short leg and a long leg. If you look really
    closely, you’ll also see that the edge of the LED bulb has a flat surface on the
    same side as the short leg. These help you identify the *polarity* of the legs;
    the LED’s long leg is the positive leg, and the short leg on the side of the flat
    bulb surface is the negative, or ground, leg.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到LED有一个短脚和一个长脚。如果你仔细观察，你还会看到LED灯泡的边缘有一个平面，且平面位于短脚的同一侧。这些帮助你识别**极性**；LED的长脚是正极，位于平面一侧的短脚是负极或地线脚。
- en: '**FIGURE 1-20:** An LED showing the long and short legs'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-20：** 显示长脚和短脚的LED'
- en: '![Image](../images/fig1_20.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig1_20.jpg)'
- en: 'Remember that `LED_BUILTIN` refers to pin 13 on the Arduino. So, adding your
    LED to the Arduino is as simple as plugging the long leg of the LED into pin 13
    and the short leg of the LED into the GND (ground) pin right next to pin 13\.
    Insert the LED now, with your board powered. If you plug it in correctly, as shown
    in [Figure 1-21](ch01.xhtml#ch01fig21), the LED will start blinking. If the LED
    doesn’t blink, you probably have it plugged in backward. Not to worry: pull it
    out and flip it around.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`LED_BUILTIN`指的是Arduino上的引脚13。所以，将LED连接到Arduino就像是将LED的长脚插入引脚13，将短脚插入紧邻引脚13的GND（地线）引脚一样简单。现在插入LED，确保板子已通电。如果你正确插入，如[图1-21](ch01.xhtml#ch01fig21)所示，LED会开始闪烁。如果LED没有闪烁，可能是你插反了。别担心：拔出来并反过来插。
- en: '**FIGURE 1-21:** An LED added to pin 13 the quick and dirty way'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**图1-21：** 将LED添加到引脚13的快速简便方式'
- en: '![Image](../images/fig1_21.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_21.jpg)'
- en: '**GOING FURTHER**'
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: Each project in this book will have a “[Going Further](ch01.xhtml#ch01lev1sec10)”
    section, which describes ways to take the concepts you learned in that project
    to the next level. These sections will include advice on using the existing project,
    hacking the code, and modifying the project physically.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的每个项目都会有一个“[进一步探索](ch01.xhtml#ch01lev1sec10)”部分，介绍如何将你在该项目中学到的概念提升到更高的层次。这些部分会包括关于如何使用现有项目、修改代码以及物理修改项目的建议。
- en: '**Hack**'
  id: totrans-176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**破解**'
- en: For this project, we suggest you try to create some nifty blink patterns. First,
    copy and paste the four lines in the `loop()` function so that it repeats and
    you end up with eight lines of code. This gives you two blink sequences and more
    code to work with. You can create patterns by modifying the delay times to control
    when the LED lights. For example, we made a pattern that looks like a heartbeat;
    our modified Blink sketch is shown in [Listing 1-4](ch01.xhtml#ch01ex04).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们建议你尝试创建一些有趣的闪烁模式。首先，复制并粘贴 `loop()` 函数中的四行代码，让它重复执行，这样你就得到了八行代码。这将产生两个闪烁序列，并且提供更多的代码可以使用。你可以通过修改延迟时间来创建模式，从而控制LED的点亮时机。例如，我们制作了一个看起来像心跳的模式；我们修改过的
    Blink 草图见 [列表 1-4](ch01.xhtml#ch01ex04)。
- en: '**LISTING 1-4:** Example code of a heartbeat pattern'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 1-4：** 心跳模式的示例代码'
- en: '[PRE5]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For a real challenge, try programming your Arduino to flash the letters of your
    name in Morse code with a series of short (dot) and long (dash) blinks. [Figure
    1-22](ch01.xhtml#ch01fig22) shows a Morse code cheat sheet to help you figure
    out the blink patterns. The classic message that most people start with is S-O-S,
    or . . . - - - . . . (dot dot dot, dash dash dash, dot dot dot).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个真正的挑战，试着编程让你的 Arduino 用摩尔斯电码闪烁出你的名字，使用一系列短点（点）和长线（划）的闪烁。[图 1-22](ch01.xhtml#ch01fig22)
    展示了一个摩尔斯电码备忘单，帮助你理解闪烁模式。大多数人开始时使用的经典信息是 S-O-S，或者 . . . - - - . . . （点点点，划划划，点点点）。
- en: '**FIGURE 1-22:** Basic Morse code chart'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-22：** 基本摩尔斯电码图表'
- en: '![Image](../images/fig1_22.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_22.jpg)'
- en: '**Modify**'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: A blinking light is a powerful thing! With your newfound superpower, you can
    physically add LEDs to a lot of things around the house. A Halloween costume is
    always a great place for some blinky bling. You could solder the LED legs to some
    wire to make the connections longer so it’s easy to hide the Arduino somewhere
    more comfortable for the wearer (like in a pocket). We took a Halloween spider
    we got from the local grocery store and hacked it with some creepy red eyes that
    blink (see [Figure 1-23](ch01.xhtml#ch01fig23)).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 闪烁的灯光是一件强大的事情！拥有了这个新发现的超级能力，你可以在家里的很多物品上加上LED灯。万圣节服装总是一个放入闪烁灯饰的好地方。你可以将LED的引脚焊接到一些导线上，延长连接线，这样就能轻松地将
    Arduino 隐藏在佩戴者更舒适的地方（比如口袋里）。我们拿了一个从本地超市买来的万圣节蜘蛛，并给它加上了一些会闪烁的红色眼睛（见 [图 1-23](ch01.xhtml#ch01fig23)）。
- en: Another good fit for blinking and controlling LEDs is in scale modeling. Adding
    working LEDs to car headlights, buildings, or streetlights is always a great way
    to create the illusion of reality in any scale model or scene, as shown in [Figure
    1-24](ch01.xhtml#ch01fig24).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个适合闪烁和控制LED的场景是比例模型。为汽车头灯、建筑物或街灯等添加可工作LED总是一个很好的方式，可以在任何比例模型或场景中创造出现实的假象，如
    [图 1-24](ch01.xhtml#ch01fig24) 所示。
- en: '**FIGURE 1-23:** A blinky scary spider'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-23：** 一个闪烁的可怕蜘蛛'
- en: '![Image](../images/fig1_23.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_23.jpg)'
- en: '**FIGURE 1-24:** A scale model with Arduino-controlled lights'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1-24：** 一个带有 Arduino 控制灯光的模型'
- en: '![Image](../images/fig1_24.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig1_24.jpg)'
- en: '**SAVING YOUR SKETCH**'
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存草图**'
- en: Every project looks more stylish with a few blinking LEDs, so we suggest you
    keep your remixed Blink sketch handy so you can reuse parts of it in future builds.
    Save your sketch, and be sure to name it something descriptive that’ll remind
    you what it is. Your filename should not contain any spaces; if it does, Arduino
    will replace the spaces with underscore (_) characters. By default, when you save
    your sketches, Arduino will save them to the Arduino sketchbook folder, usually
    found in the *Documents* folder on your computer. You can choose to save them
    elsewhere, but it’s often a good idea to have all your sketches in one place.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目在加入一些闪烁的LED后都会显得更加时尚，因此我们建议你随时保留你修改过的 Blink 草图，以便在未来的项目中重复使用其中的部分代码。保存你的草图，并确保给它起一个描述性的名字，以便提醒你它是什么。你的文件名不应包含空格；如果包含空格，Arduino
    会用下划线（_）替换空格。默认情况下，当你保存草图时，Arduino 会将其保存在 Arduino 草图文件夹中，该文件夹通常位于你计算机的 *Documents*
    文件夹内。你可以选择将它们保存在其他地方，但通常把所有草图保存在一个地方是个好主意。
- en: When you’re ready to level up your blinking skills, head to [Project 2](ch02.xhtml#ch02),
    where we’ll show you how to build your very own Arduino-powered stoplight.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好提升你的眨眼技能时，前往[项目 2](ch02.xhtml#ch02)，我们将在那里教你如何构建一个由 Arduino 驱动的红绿灯。
