- en: '22'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '22'
- en: Conducting Code Reviews
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 进行代码审查
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: You’ll sometimes come across the source code of an application you’re attacking.
    For example, you might be able to extract JavaScript code from a web application,
    find scripts stored on servers during the recon process, or obtain Java source
    code from an Android application. If so, you are in luck! Reviewing code is one
    of the best ways to find vulnerabilities in applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你有时会遇到你正在攻击的应用程序的源代码。例如，你可能能够从 Web 应用程序中提取 JavaScript 代码，在侦查过程中找到存储在服务器上的脚本，或者从
    Android 应用程序中获取 Java 源代码。如果是这样，你真幸运！审查代码是发现应用程序漏洞的最佳方法之一。
- en: Instead of testing applications by trying different payloads and attacks, you
    can locate insecure programming directly by looking for bugs in an application’s
    source code. Source code review not only is a faster way of finding vulnerabilities,
    but also helps you learn how to program safely in the future, because you’ll observe
    the mistakes of others.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 与其通过尝试不同的有效负载和攻击来测试应用程序，你可以通过查看应用程序源代码来直接定位不安全的编程问题。源代码审查不仅是发现漏洞的更快方式，还能帮助你将来学习如何安全编程，因为你将看到他人的错误。
- en: By learning how vulnerabilities manifest themselves in source code, you can
    develop an intuition about how and why vulnerabilities happen. Learning to conduct
    source code reviews will eventually help you become a better hacker.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习漏洞如何在源代码中表现出来，你可以培养出对漏洞发生的方式和原因的直觉。学习进行源代码审查最终会帮助你成为一个更优秀的黑客。
- en: This chapter introduces strategies that will help you get started reviewing
    code. We’ll cover what you should look for and walk through example exercises
    to get your feet wet.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了一些策略，帮助你开始进行代码审查。我们将讨论你应该关注的内容，并通过示例练习帮助你入门。
- en: Remember that, most of the time, you don’t have to be a master programmer to
    conduct a code review in a particular language. As long as you understand one
    programming language, you can apply your intuition to review a wide variety of
    software written in different languages. But understanding the target’s particular
    language and architecture will allow you to spot more nuanced bugs.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，大多数情况下，你不需要成为某种编程语言的专家才能进行代码审查。只要你理解一种编程语言，你就可以利用直觉审查用不同语言编写的各种软件。但理解目标语言和架构将帮助你发现更细微的漏洞。
- en: White-Box vs. Black-Box Testing
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 白盒与黑盒测试
- en: You might have heard people in the cybersecurity industry mention black-box
    and white-box testing. *Black-box testing* is testing the software from the outside
    in. Like a real-life attacker, these testers have little understanding of the
    application’s internal logic. In contrast, in *gray-box testing*, the tester has
    limited knowledge of the application’s internals. In a *white-box review*, the
    tester gets full access to the software’s source code and documentation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听到过网络安全行业的人提到黑盒测试和白盒测试。*黑盒测试*是从外部测试软件。就像真实的攻击者一样，这些测试者对应用程序的内部逻辑了解不多。相比之下，*灰盒测试*，测试者对应用程序的内部有有限的了解。在*白盒审查*中，测试者可以完全访问软件的源代码和文档。
- en: Usually, bug bounty hunting is a black-box process, since you don’t have access
    to an application’s source code. But if you can identify the open source components
    of the application or find its source code, you can convert your hunting to a
    more advantageous gray-box or white-box test.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，漏洞赏金猎取是一个黑盒过程，因为你无法访问应用程序的源代码。但如果你能够识别应用程序的开源组件或找到其源代码，你就可以将你的猎取转变为更有利的灰盒或白盒测试。
- en: 'The Fast Approach: grep Is Your Best Friend'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速方法：grep 是你最好的朋友
- en: There are several ways to go about hunting for vulnerabilities in source code,
    depending on how thorough you want to be. We’ll begin with what I call the “I’ll
    take what I can get” strategy. It works great if you want to maximize the number
    of bugs found in a short time. These techniques are speedy and often lead to the
    discovery of some of the most severe vulnerabilities, but they tend to leave out
    the more subtle bugs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找源代码漏洞的方法有很多，取决于你想多深入。我们将从我所说的“我能找到什么就拿什么”的策略开始。如果你想在短时间内最大化发现漏洞的数量，这个策略非常有效。这些技巧快速，并且通常会发现一些最严重的漏洞，但它们往往忽略了更微妙的漏洞。
- en: Dangerous Patterns
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 危险模式
- en: Using the `grep` command, look for specific functions, strings, keywords, and
    coding patterns that are known to be dangerous. For example, the use of the `eval()`
    function in PHP can indicate a possible code injection vulnerability.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`grep`命令，查找已知的危险函数、字符串、关键字和编码模式。例如，PHP中使用`eval()`函数可能表明存在代码注入漏洞。
- en: 'To see how, imagine you search for `eval()` and pull up the following code
    snippet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看如何操作，假设你搜索了`eval()`并调出了以下代码片段：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `$_COOKIE['data']` 2 retrieves a user cookie named `data`.
    The `eval()` function 1 executes the PHP code represented by the string passed
    in. Put together, this piece of code takes a user cookie named `data` and unserializes
    it. The application also defines a class named `UserFunction`, which runs `eval()`
    on the string stored in the instance’s `$hook` property when unserialized.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`$_COOKIE['data']` 2 获取名为`data`的用户cookie。`eval()`函数 1 执行传入字符串表示的PHP代码。组合起来，这段代码获取名为`data`的用户cookie并对其进行反序列化。应用程序还定义了一个名为`UserFunction`的类，当反序列化时，它会对实例的`$hook`属性存储的字符串运行`eval()`。
- en: This code contains an insecure deserialization vulnerability, leading to an
    RCE. That’s because the application takes user input from a user’s cookie and
    plugs it directly into an `unserialize()` function. As a result, users can make
    `unserialize()` initiate any class the application has access to by constructing
    a serialized object and passing it into the `data` cookie.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码包含了一个不安全的反序列化漏洞，导致远程代码执行（RCE）。原因是应用程序从用户的cookie中获取用户输入，并将其直接传递给`unserialize()`函数。结果，用户可以通过构造一个序列化对象并将其传递到`data`
    cookie中，使`unserialize()`启动应用程序可以访问的任何类。
- en: 'You can achieve RCE by using this deserialization flaw because it passes a
    user-provided object into `unserialize()`, and the `UserFunction` class runs `eval()`
    on user-provided input, which means users can make the application execute arbitrary
    user code. To exploit this RCE, you simply have to set your `data` cookie to a
    serialized `UserFunction` object with the `hook` property set to whatever PHP
    code you want. You can generate the serialized object by using the following bit
    of code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以利用这个反序列化漏洞实现RCE，因为它将用户提供的对象传递给`unserialize()`，而`UserFunction`类会对用户提供的输入执行`eval()`，这意味着用户可以让应用程序执行任意的用户代码。要利用这个RCE，你只需要将`data`
    cookie设置为一个序列化的`UserFunction`对象，并将`hook`属性设置为你想要的PHP代码。你可以使用以下代码生成序列化对象：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Passing the resulting string into the `data` cookie will cause the code `phpinfo();`
    to be executed. This example is taken from OWASP’s PHP object injection guide
    at [https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection](https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection).
    You can learn more about insecure deserialization vulnerabilities in Chapter 14.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将结果字符串传递到`data` cookie中将导致代码`phpinfo();`被执行。这个例子摘自OWASP的PHP对象注入指南，链接为[https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection](https://owasp.org/www-community/vulnerabilities/PHP_Object_Injection)。你可以在第14章了解更多关于不安全反序列化漏洞的内容。
- en: When you are just starting out reviewing a piece of source code, focus on the
    search for dangerous functions used on user-controlled data. [Table 22-1](#table22-1)
    lists a few examples of dangerous functions to look out for. The presence of these
    functions does not guarantee a vulnerability, but can alert you to possible vulnerabilities.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始审查一段源代码时，集中精力查找对用户控制数据使用的危险函数。[表22-1](#table22-1)列出了几个需要注意的危险函数的例子。这些函数的存在并不能保证存在漏洞，但可以提醒你可能存在的漏洞。
- en: 'Table 22-1: Potentially Vulnerable Functions'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表22-1：潜在的危险函数
- en: '| **Language** | **Function** | **Possible vulnerability** |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **语言** | **函数** | **可能的漏洞** |'
- en: '| --- | --- | --- |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| PHP | `eval()`, `assert()`, `system()`, `exec()`, `shell_exec()`, `passthru()`,
    `popen()`, backticks `` (` [PRE2] `) ``, `include()`, `require()` | RCE if used
    on unsanitized user input. `eval()` and `assert()` execute PHP code in its input,
    while `system()`, `exec()`, `shell_exec()`, `passthru()`, `popen()`, and backticks
    execute system commands. `include()` and `require()` can be used to execute PHP
    code by feeding the function a URL to a remote PHP script. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| PHP | `eval()`，`assert()`，`system()`，`exec()`，`shell_exec()`，`passthru()`，`popen()`，反引号``
    (` [PRE2] `) ``，`include()`，`require()` | 如果对未经清理的用户输入使用，可能导致远程代码执行（RCE）。`eval()`和`assert()`执行传入的PHP代码，而`system()`，`exec()`，`shell_exec()`，`passthru()`，`popen()`和反引号执行系统命令。`include()`和`require()`可以通过将远程PHP脚本的URL传递给函数来执行PHP代码。
    |'
- en: '| PHP | `unserialize()` | Insecure deserialization if used on unsanitized user
    input. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| PHP | `unserialize()` | 如果对未经清理的用户输入使用，将导致不安全的反序列化。 |'
- en: '| Python | `eval()`, `exec()`, `os.system()` | RCE if used on unsanitized user
    input. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Python | `eval()`, `exec()`, `os.system()` | 如果在未经清理的用户输入上使用，可能会导致RCE。 |'
- en: '| Python | `pickle.loads()`, `yaml.load()` | Insecure deserialization if used
    on unsanitized user input. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Python | `pickle.loads()`, `yaml.load()` | 如果在未经清理的用户输入上使用，可能会导致不安全的反序列化。
    |'
- en: '| JavaScript | `document.write()`, `document.writeln` | XSS if used on unsanitized
    user input. These functions write to the HTML document. So if attackers can control
    the value passed into it on a victim’s page, the attacker can write JavaScript
    onto a victim’s page. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| JavaScript | `document.write()`, `document.writeln` | 如果在未经清理的用户输入上使用，可能会导致XSS。
    这些函数会写入HTML文档。因此，如果攻击者能够控制传入该函数的值，那么攻击者就可以在受害者的页面上写入JavaScript代码。 |'
- en: '| JavaScript | `document.location.href()` | Open redirect when used on unsanitized
    user input. `document.location.href()` changes the location of the user’s page.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| JavaScript | `document.location.href()` | 如果在未经清理的用户输入上使用，可能会导致开放重定向。`document.location.href()`会更改用户页面的URL位置。
    |'
- en: '| Ruby | `System()`, `exec()`, `%x()`, backticks `` (` [PRE3] `) `` | RCE if
    used on unsanitized user input. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| Ruby | `System()`, `exec()`, `%x()`, backticks `` (` [PRE3] `) `` | 如果在未经清理的用户输入上使用，可能会导致RCE。
    |'
- en: '| Ruby | `Marshall.load()`, `yaml.load()` | Insecure deserialization if used
    on unsanitized user input. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Ruby | `Marshall.load()`, `yaml.load()` | 如果在未经清理的用户输入上使用，可能会导致不安全的反序列化。
    |'
- en: Leaked Secrets and Weak Encryption
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 泄露的密钥和弱加密
- en: Look for leaked secrets and credentials. Sometimes developers make the mistake
    of hardcoding secrets such as API keys, encryption keys, and database passwords
    into source code. When that source code is leaked to an attacker, the attacker
    can use these credentials to access the company’s assets. For example, I’ve found
    hardcoded API keys in the JavaScript files of web applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 查找泄露的密钥和凭证。有时，开发者犯了将API密钥、加密密钥、数据库密码等密钥硬编码进源代码的错误。当这些源代码被攻击者泄露时，攻击者可以利用这些凭证访问公司的资产。例如，我曾在Web应用的JavaScript文件中发现硬编码的API密钥。
- en: You can look for these issues by grepping for keywords such as `key`, `secret`,
    `password`, `encrypt`, `API`, `login`, or `token`. You can also regex search for
    hex or base64 strings, depending on the key format of the credentials you’re looking
    for. For instance, GitHub access tokens are lowercase, 40-character hex strings.
    A search pattern like `[a-f0-9]{40}` would find them in the source code. This
    search pattern matches strings that are 40 characters long and contains only digits
    and the hex letters *a* to *f*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过搜索诸如`key`、`secret`、`password`、`encrypt`、`API`、`login`或`token`等关键词来查找这些问题。你还可以根据你寻找的凭证密钥格式，使用正则表达式搜索十六进制或Base64字符串。例如，GitHub访问令牌是40个字符的小写十六进制字符串。类似`[a-f0-9]{40}`的搜索模式将能在源代码中找到它们。这个搜索模式匹配的是长度为40个字符且只包含数字和十六进制字母*a*到*f*的字符串。
- en: 'When searching, you might pull up a section of code like this one, written
    in Python:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索时，你可能会遇到类似这样的一段代码，写在Python中：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This Python program takes in the username of a user from GitHub 2 and prints
    out the names of all the user’s repositories 3. This is probably an internal script
    used to monitor the organization’s assets. But this code contains a hardcoded
    credential, as the developer hardcoded a GitHub access token into the source code
    1. Once the source code is leaked, the API key becomes public information.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序接收GitHub用户的用户名，并打印出该用户所有仓库的名称。这可能是一个内部脚本，用于监控组织的资产。但该代码包含了硬编码的凭证，因为开发者将GitHub访问令牌硬编码进了源代码。一旦源代码被泄露，API密钥就变成了公开信息。
- en: Entropy scanning can help you find secrets that don’t adhere to a specific format.
    In computing, *entropy* is a measurement of how random and unpredictable something
    is. For instance, a string composed of only one repeated character, like `aaaaa`,
    has very low entropy. A longer string with a larger set of characters, like `wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`,
    has higher entropy. Entropy is therefore a good tool to find highly randomized
    and complex strings, which often indicate a secret. TruffleHog by Dylan Ayrey
    ([https://github.com/trufflesecurity/truffleHog/](https://github.com/trufflesecurity/truffleHog/))
    is a tool that searches for secrets by using both regex and entropy scanning.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 熵扫描可以帮助你找到不遵循特定格式的密钥。在计算中，*熵*是衡量某物有多么随机和不可预测的指标。例如，一个由单一重复字符组成的字符串，如`aaaaa`，具有非常低的熵。而一个包含更多字符集的较长字符串，如`wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`，则具有较高的熵。因此，熵是寻找高度随机和复杂字符串的好工具，这些字符串通常表示一个密钥。Dylan
    Ayrey开发的TruffleHog工具（[https://github.com/trufflesecurity/truffleHog/](https://github.com/trufflesecurity/truffleHog/)）就是利用正则表达式和熵扫描来寻找密钥的工具。
- en: Finally, look for the use of weak cryptography or hashing algorithms. This issue
    is hard to find during black-box testing but easy to spot when reviewing source
    code. Look for issues such as weak encryption keys, breakable encryption algorithms,
    and weak hashing algorithms. Grep the names of weak algorithms like ECB, MD4,
    and MD5\. The application might have functions named after these algorithms, such
    as `ecb()`, `create_md4()`, or md5_hash(). It might also have variables with the
    name of the algorithm, like `ecb_key`, and so on. The impact of weak hashing algorithms
    depends on where they are used. If they are used to hash values that are not considered
    security sensitive, their usage will have less of an impact than if they are used
    to hash passwords.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，检查是否使用了弱加密算法或哈希算法。这个问题在黑盒测试中很难发现，但在审查源代码时容易发现。注意查看诸如弱加密密钥、易破解的加密算法和弱哈希算法等问题。可以通过`grep`查找弱算法的名称，如ECB、MD4和MD5。应用程序中可能会有与这些算法同名的函数，例如`ecb()`、`create_md4()`或`md5_hash()`。它可能还会有以算法名称命名的变量，如`ecb_key`等。弱哈希算法的影响取决于它们的使用场景。如果它们用于哈希那些不被视为安全敏感的值，那么它们的使用影响将比用于哈希密码时要小。
- en: New Patches and Outdated Dependencies
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新补丁和过时的依赖项
- en: If you have access to the commit or change history of the source code, you can
    also focus your attention on the most recent code fixes and security patches.
    Recent changes haven’t stood the test of time and are more likely to contain bugs.
    Look at the protection mechanisms implemented and see if you can bypass them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有源代码的提交或变更历史，你还可以关注最近的代码修复和安全补丁。最近的变更尚未经受时间考验，更容易包含漏洞。查看已实现的保护机制，并检查是否能够绕过它们。
- en: Also search for the program’s dependencies and check whether any of them are
    outdated. Grep for specific code import functions in the language you are using
    with keywords like `import`, `require`, and `dependencies`. Then research the
    versions they’re using to see if any vulnerabilities are associated with them
    in the CVE database ([https://cve.mitre.org/](https://cve.mitre.org/)). The process
    of scanning an application for vulnerable dependencies is called *software composition
    analysis (**SCA)*. The OWASP Dependency-Check tool ([https://owasp.org/www-project-dependency-check/](https://owasp.org/www-project-dependency-check/))
    can help you automate this process. Commercial tools with more capabilities exist
    too.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，查找程序的依赖项，检查它们是否过时。可以使用`grep`查找你所用编程语言中的特定代码导入函数，如`import`、`require`和`dependencies`等关键字。然后，研究它们使用的版本，看看是否在CVE数据库中与它们相关的漏洞（[https://cve.mitre.org/](https://cve.mitre.org/)）。扫描应用程序中的脆弱依赖项的过程被称为*软件组成分析（**SCA）*。OWASP的Dependency-Check工具（[https://owasp.org/www-project-dependency-check/](https://owasp.org/www-project-dependency-check/)）可以帮助你自动化这个过程。也有功能更强大的商业工具。
- en: Developer Comments
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发者评论
- en: You should also look for developer comments and hidden debug functionalities,
    and accidentally exposed configuration files. These are resources that developers
    often forget about, and they leave the application in a dangerous state.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该查找开发者评论、隐藏的调试功能以及不小心暴露的配置文件。这些是开发者常常忽略的资源，往往会让应用程序处于危险状态。
- en: 'Developer comments can point out obvious programming mistakes. For example,
    some developers like to put comments in their code to remind themselves of incomplete
    tasks. They might write comments like this, which points out vulnerabilities in
    the code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者评论可以指出明显的编程错误。例如，一些开发者喜欢在代码中添加评论来提醒自己有未完成的任务。他们可能会写出类似这样的评论，指出代码中的漏洞：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can find developer comments by searching for the comment characters of each
    programming language. In Python, it’s `#`. In Java, JavaScript, and C++, it’s
    `//`. You can also search for terms like *todo*, *fix*, *completed*, *config*,
    *setup*, and *removed* in source code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查找每种编程语言的注释符号来找到开发者评论。在Python中，注释符号是`#`。在Java、JavaScript和C++中，注释符号是`//`。你还可以在源代码中查找诸如*todo*、*fix*、*completed*、*config*、*setup*和*removed*等词汇。
- en: Debug Functionalities, Configuration Files, and Endpoints
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试功能、配置文件和端点
- en: 'Hidden debug functionalities often lead to privilege escalation, as they’re
    intended to let the developers themselves bypass protection mechanisms. You can
    often find them at special endpoints, so search for strings like `HTTP`, `HTTPS`,
    `FTP`, and `dev`. For example, you might find a URL like this somewhere in the
    code that points you to an admin panel:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏的调试功能常常导致权限提升，因为它们本来是为了让开发者绕过保护机制。你经常可以在特殊端点找到它们，因此可以搜索像 `HTTP`、`HTTPS`、`FTP`
    和 `dev` 这样的字符串。例如，你可能会在代码的某个地方发现一个指向管理员面板的 URL：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Configuration files allow you to gain more information about the target application
    and might contain credentials. You can look for filepaths to configuration files
    in source code as well. Configuration files often have the file extensions *.conf*,
    *.env*, *.cnf*, *.cfg*, *.cf*, *.ini*, *.sys*, or *.plist*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件可以让你获得更多关于目标应用的信息，并可能包含凭据。你也可以在源代码中查找指向配置文件的文件路径。配置文件通常具有文件扩展名 *.conf*、*.env*、*.cnf*、*.cfg*、*.cf*、*.ini*、*.sys*
    或 *.plist*。
- en: Next, look for additional paths, deprecated endpoints, and endpoints in development.
    These are endpoints that users might not encounter when using the application
    normally. But if they work and are discovered by an attacker, they can lead to
    vulnerabilities such as authentication bypass and sensitive information leak,
    depending on the exposed endpoint. You can search for strings and characters that
    indicate URLs like *HTTP*, *HTTPS*, slashes (/), URL parameter markers (?), file
    extensions (*.php*, *.html*, *.js*, *.json*), and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，查找其他路径、已弃用的端点以及正在开发中的端点。这些端点是用户在正常使用应用时可能不会遇到的。但是，如果它们有效并且被攻击者发现，它们可能会导致认证绕过和敏感信息泄露等漏洞，具体取决于暴露的端点。你可以搜索那些指示
    URL 的字符串和字符，比如*HTTP*、*HTTPS*、斜杠（/）、URL 参数标记（?）、文件扩展名（*.php*、*.html*、*.js*、*.json*）等。
- en: The Detailed Approach
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细方法
- en: If you have more time, complement the fast techniques with a more extensive
    source code review to find subtle vulnerabilities. Instead of reading the entire
    codebase line by line, try these strategies to maximize your efficiency.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有更多时间，可以通过更全面的源代码审查来补充快速的技术，以便发现微妙的漏洞。不要逐行阅读整个代码库，而是尝试这些策略来最大化你的效率。
- en: Important Functions
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要功能
- en: 'When reading source code, focus on important functions, such as authentication,
    password reset, state-changing actions, and sensitive info reads. For example,
    you’d want to take a close look at this login function, written in Python:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读源代码时，关注重要的功能，比如认证、密码重置、状态变更操作和敏感信息读取。例如，你可能需要仔细查看这个用 Python 编写的登录函数：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This function looks for a user in the database by using a SQL query constructed
    from the username and password provided by the user 1. If a user with the specified
    username and password exists, the function logs in the user 2.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数通过使用用户提供的用户名和密码构造 SQL 查询来在数据库中查找用户 1。如果存在具有指定用户名和密码的用户，函数将登录该用户 2。
- en: 'This code contains a classic example of a SQL injection vulnerability. At 1,
    the application uses user input to formulate a SQL query without sanitizing the
    input in any way. Attackers could formulate an attack, for example, by entering
    `admin''--` as the username to log in as the admin user. This works because the
    query would become the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码包含了一个经典的 SQL 注入漏洞示例。在 1 处，应用程序使用用户输入来构建 SQL 查询，但没有对输入进行任何清理。攻击者可以通过输入 `admin'--`
    作为用户名来登录为管理员用户。之所以有效，是因为查询会变成以下内容：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Which parts of the application are important depend on the priorities of the
    organization. Also review how important components interact with other parts of
    the application. This will show you how an attacker’s input can affect different
    parts of the application.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的哪些部分很重要取决于组织的优先级。同时，审查重要组件与应用程序其他部分的交互。这将帮助你了解攻击者的输入如何影响应用程序的不同部分。
- en: User Input
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户输入
- en: Another approach is to carefully read the code that processes user input. User
    input, such as HTTP request parameters, HTTP headers, HTTP request paths, database
    entries, file reads, and file uploads provide the entry points for attackers to
    exploit the application’s vulnerabilities. This can help find common vulnerabilities
    such as stored XSS, SQL injections, and XXEs.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是仔细阅读处理用户输入的代码。用户输入，比如 HTTP 请求参数、HTTP 头、HTTP 请求路径、数据库条目、文件读取和文件上传，提供了攻击者利用应用程序漏洞的切入点。这有助于发现常见的漏洞，如存储型
    XSS、SQL 注入和 XXE。
- en: Focusing on parts of the code that deal with user input will provide a good
    starting point for identifying potential dangers. Make sure to also review how
    the user input gets stored or transferred. Finally, see whether other parts of
    the application use the previously processed user input. You might find that the
    same user input interacts differently with various components of the application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关注处理用户输入的代码部分将为识别潜在的危险提供一个良好的起点。确保还要检查用户输入是如何存储或传输的。最后，查看应用程序的其他部分是否使用了之前处理过的用户输入。你可能会发现相同的用户输入在应用程序的不同组件中有不同的交互方式。
- en: 'For example, the following snippet accepts user input. The PHP variable `$_GET`
    contains the parameters submitted in the URL query string, so the variable `$_GET[''next'']`
    refers to the value of the URL query parameter named `next`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下片段接受用户输入。PHP 变量 `$_GET` 包含在 URL 查询字符串中提交的参数，因此变量 `$_GET['next']` 指的是名为
    `next` 的 URL 查询参数的值：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This parameter gets stored in the `$redirect_url` variable 1. Then the `header()`
    PHP function sets the response header `Location` to that variable 2. The `Location`
    header controls where the browser redirects a user. This means the user will be
    redirected to the location specified in the `next` URL parameter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个参数存储在 `$redirect_url` 变量中 1。然后，`header()` PHP 函数将响应头 `Location` 设置为该变量 2。`Location`
    头部控制浏览器重定向用户到哪里。这意味着用户将被重定向到 `next` URL 参数指定的位置。
- en: The vulnerability in this code snippet is an open redirect. The `next` URL query
    parameter is used to redirect the user after login, but the application doesn’t
    validate the redirect URL before redirecting the user. It simply takes the value
    of the URL query parameter `next` and sets the response header accordingly.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段中的漏洞是一个开放重定向。`next` URL 查询参数用于在登录后重定向用户，但应用程序在重定向之前没有验证该 URL。它只是获取 URL
    查询参数 `next` 的值，并相应地设置响应头。
- en: 'Even a more robust version of this functionality might contain vulnerabilities.
    Take a look at this code snippet:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 即便是这个功能的更强大版本，也可能包含漏洞。看看这个代码片段：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now the code contains some input validation: the `preg_match(``PATTERN``,`
    `STRING``)` PHP function checks whether the `STRING` matches the regex pattern
    `PATTERN` 1. Presumably, this pattern would make sure the page redirects to a
    legitimate location. But this code still contains an open redirect. Although the
    application now validates the redirect URL before redirecting the user, it does
    so incompletely. It checks only whether the redirect URL contains the string *example.com*.
    As discussed in Chapter 7, attackers could easily bypass this protection by using
    a redirect URL such as *attacker.com/example.com*, or *example.com.attacker.com*.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码包含了一些输入验证：`preg_match(``PATTERN``,` `STRING``)` PHP 函数检查 `STRING` 是否匹配正则表达式模式
    `PATTERN` 1。大概这个模式会确保页面重定向到一个合法的位置。但这段代码仍然包含开放重定向。虽然应用程序现在在重定向用户之前验证了重定向 URL，但这种验证并不完全。它只检查重定向
    URL 是否包含字符串 *example.com*。如第七章所述，攻击者可以轻松绕过此保护，使用诸如 *attacker.com/example.com*
    或 *example.com.attacker.com* 的重定向 URL。
- en: 'Let’s look at another instance where tracing user input can point us to vulnerabilities.
    The `parse_url(``URL, COMPONENT``)` PHP function parses a URL and returns the
    specified URL component. For example, this function will return the string `/index.html`.
    In this case, it returns the `PHP_URL_PATH`, the filepath part of the input URL:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个通过追踪用户输入可以发现漏洞的实例。`parse_url(``URL, COMPONENT``)` PHP 函数解析一个 URL 并返回指定的
    URL 组件。例如，这个函数会返回字符串`/index.html`。在这个例子中，它返回的是 `PHP_URL_PATH`，即输入 URL 的文件路径部分：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Can you spot the vulnerabilities in the following piece of PHP code?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你能在以下 PHP 代码片段中找出漏洞吗？
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This page contains a command injection vulnerability and a reflected XSS vulnerability.
    You can find them by paying attention to where the application uses the user-supplied
    `download_file` parameter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面包含一个命令注入漏洞和一个反射型 XSS 漏洞。通过关注应用程序使用用户提供的 `download_file` 参数的地方，你可以发现这些漏洞。
- en: 'Let’s say this page is located at *https://example.com/download*. This code
    retrieves the `download_file` URL query parameter and parses the URL to retrieve
    its path component 1. Then the server downloads the file located on the *example.com*
    server with the filepath that matches the path in the `download_file` URL 2. For
    example, visiting this URL will download the file *https://example.com/abc*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设这个页面位于*https://example.com/download*。这段代码获取`download_file` URL查询参数，并解析URL以提取其路径部分1。然后，服务器下载位于*example.com*服务器上的文件，文件路径与`download_file`
    URL中的路径匹配2。例如，访问这个URL将会下载文件*https://example.com/abc*：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The PHP `system()` command executes a system command, and `system(``COMMAND,
    OUTPUT``)` will store the output of `COMMAND` into the variable `OUTPUT`. This
    program passes user input into a variable `$command`, then into the `system()`
    function 3. This means that users can get arbitrary code executed by injecting
    their payload into the `$url_path`. They’d simply have to meddle with the `download_file`
    GET parameter while requesting a page, like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: PHP中的`system()`命令执行系统命令，`system(``COMMAND, OUTPUT``)`将会把`COMMAND`的输出存储到变量`OUTPUT`中。这个程序将用户输入传递给变量`$command`，然后再传递给`system()`函数3。这意味着用户可以通过注入载荷到`$url_path`中来执行任意代码。用户只需在请求页面时，像这样修改`download_file`的GET参数：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The application then displays a message on the web page by using direct user
    input 4. Attackers could embed an XSS payload in the `download_file`’s URL path
    portion and get it reflected onto the victim’s page after a victim user accesses
    the crafted URL. The exploit URL can be generated with this code snippet. (Note
    that the second line wraps onto a third for display purposes.)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，应用程序通过直接用户输入在网页上显示一条消息4。攻击者可以在`download_file`的URL路径部分嵌入一个XSS载荷，并在受害者访问构造的URL后让它反射到受害者的页面上。可以通过以下代码片段生成这个漏洞URL。（注意，第二行为了显示的需要换行到第三行。）
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Exercise: Spot the Vulnerabilities'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习：发现漏洞
- en: Some of these tips may seem abstract, so let’s walk through an example program,
    written in Python, that will help you practice the tricks introduced in this chapter.
    Ultimately, reviewing source code is a skill to be practiced. The more you look
    at vulnerable code, the more adept you will become at spotting bugs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技巧中的一些可能显得抽象，所以我们通过一个用Python编写的示例程序来一步步讲解，这将帮助你练习本章介绍的技巧。最终，审查源代码是一项需要练习的技能。你查看易受攻击的代码越多，越能熟练地发现漏洞。
- en: 'The following program has multiple issues. See how many you can find:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序存在多个问题。看看你能发现多少个：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let’s begin by considering how this program works. It’s supposed to take a `new_password`
    URL parameter to set a new password for the user. It parses the URL parameters
    for `new_password` and `csrf_token`. Then, it validates the CSRF token and performs
    the POST request to change the user’s password.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来看看这个程序是如何工作的。它应该接受一个`new_password` URL参数，用于为用户设置新密码。它解析`new_password`和`csrf_token`的URL参数。然后，它验证CSRF令牌，并执行POST请求来更改用户的密码。
- en: This program has multiple issues. First, it contains several revealing developer
    comments 1. It points out that the request to change the user’s password is initiated
    by a GET request, and both the user’s new password and CSRF token are communicated
    in the URL. Transmitting secrets in URLs is bad practice because they may be made
    available to browser histories, browser extensions, and traffic analytics providers.
    This creates the possibility of attackers stealing these secrets. Next, another
    development comment points out that the user’s current password isn’t needed to
    change to a new password! A third revealing comment points out to the attacker
    that the CSRF referer check functionality is incomplete 4.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序有多个问题。首先，它包含了几条暴露开发者的评论1。评论指出更改用户密码的请求是通过GET请求发起的，并且用户的新密码和CSRF令牌都通过URL传递。通过URL传递机密信息是不好的做法，因为它们可能会暴露给浏览器历史记录、浏览器扩展和流量分析提供商。这就给攻击者窃取这些机密信息提供了可能性。接下来，另一条开发者评论指出更改密码时不需要用户的当前密码！第三条暴露的评论则指出CSRF的referer检查功能不完整4。
- en: 'You can see for yourself that the program employs two types of CSRF protection,
    both of which are incomplete. The referer check function checks only if the referer
    is present, not whether the referer URL is from a legitimate site 3. Next, the
    site implements incomplete CSRF token validation. It checks that the CSRF token
    is valid only if the `csrf_token` parameter is provided in the URL 2. Attackers
    will be able to execute the CSRF to change users’ passwords by simply providing
    them with a URL that doesn’t have the `csrf_token` parameter, or contains a blank
    `csrf_token`, as in these examples:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自己查看该程序使用了两种类型的CSRF保护，但它们都不完整。Referer检查功能仅检查是否存在referer，而不检查referer URL是否来自合法网站。接下来，该网站实现了不完整的CSRF令牌验证。它仅在URL中提供了`csrf_token`参数时，才会检查CSRF令牌是否有效。攻击者只需提供一个不包含`csrf_token`参数，或者包含空白`csrf_token`的URL，就能够执行CSRF攻击，进而更改用户密码，举例如下：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Code review is an effective way of finding vulnerabilities, so if you can extract
    source code at any point during your hacking process, dive into the source code
    and see what you can find. Manual code review can be time-consuming. Using static
    analysis security testing (SAST) tools is a great way to automate the process.
    Many open source and commercial SAST tools with different capabilities exist,
    so if you are interested in code analysis and participating in many source code
    programs, you might want to look into using a SAST tool that you like.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是发现漏洞的有效方法，因此，如果你在黑客攻击过程中能够随时提取源代码，就应该深入源代码，看看能发现什么。手动代码审查可能非常耗时。使用静态分析安全测试（SAST）工具是自动化这个过程的好方法。现有许多开源和商业的SAST工具，功能各异，因此，如果你对代码分析感兴趣，并且参与了许多源代码项目，可能需要考虑使用你喜欢的SAST工具。
