["```\n    $ `mount -o user_xattr` ``*`device directory`*``\n    ```", "```\n`$ touch tfile`\n`$ setfattr -n user.x -v \"The past is not dead.\" tfile`\n`$ setfattr -n user.y -v \"In fact, it's not even past.\" tfile`\n`$ getfattr -n user.x tfile`          *Retrieve value of a single EA*\n# file: tfile                       *Informational message from getfattr*\nuser.x=\"The past is not dead.\"      *The getfattr command prints a blank*\n                                    *line after each fileâ€™s attributes*\n$ getfattr -d tfile                 *Dump values of all user EAs*\n# file: tfile\nuser.x=\"The past is not dead.\"\nuser.y=\"In fact, it's not even past.\"\n\n`$ setfattr -n user.x tfile`          *Change value of EA to be an empty string*\n`$ getfattr -d tfile`\n# file: tfile\nuser.x\nuser.y=\"In fact, it's not even past.\"\n\n`$ setfattr -x user.y tfile`          *Remove an EA*\n`$ getfattr -d tfile`\n# file: tfile\nuser.x\n```", "```\n`$ getfattr -m '```", "```'` ``*`file`*``\n```", "```\n$ ``getfattr -m - *`file`*``\n```", "```\n#include <sys/xattr.h>\n\nint `setxattr`(const char **pathname*, const char **name*, const void **value*,\n              size_t *size*, int *f lags*);\nint `lsetxattr`(const char **pathname*, const char **name*, const void **value*,\n              size_t *size*, int *f lags*);\nint `fsetxattr`(int *fd*, const char **name*, const void **value*,\n              size_t *size*, int *f lags*);\n```", "```\nchar *value;\n\nvalue = \"The past is not dead.\";\n\nif (setxattr(pathname, \"user.x\", value, strlen(value), 0) == -1)\n    errExit(\"setxattr\");\n```", "```\n#include <sys/xattr.h>\n\nssize_t `getxattr`(const char **pathname*, const char **name*, void **value*,\n                  size_t *size*);\nssize_t `lgetxattr`(const char **pathname*, const char **name*, void **value*,\n                  size_t *size*);\nssize_t `fgetxattr`(int *fd*, const char **name*, void **value*,\n                  size_t *size*);\n```", "```\n#include <sys/xattr.h>\n\nint `removexattr`(const char **pathname*, const char **name*);\nint `lremovexattr`(const char **pathname*, const char **name*);\nint `fremovexattr`(int *fd*, const char **name*);\n```", "```\n#include <sys/xattr.h>\n\nssize_t `listxattr`(const char **pathname*, char **list*, size_t *size*);\nssize_t `llistxattr`(const char **pathname*, char **list*, size_t *size*);\nssize_t `flistxattr`(int *fd*, char **list*, size_t *size*);\n```", "```\n`$ setfattr -n user.x -v \"The past is not dead.\" tfile`\n`$ setfattr -n user.y -v \"In fact, it's not even past.\" tfile`\n`$ ./xattr_view tfile`\ntfile:\n        name=user.x; value=The past is not dead.\n        name=user.y; value=In fact, it's not even past.\n```", "```\n`xattr/xattr_view.c`\n#include <sys/xattr.h>\n#include \"tlpi_hdr.h\"\n\n#define XATTR_SIZE 10000\n\nstatic void\nusageError(char *progName)\n{\n    fprintf(stderr, \"Usage: %s [-x] file...\\n\", progName);\n    exit(EXIT_FAILURE);\n}\n\nint\nmain(int argc, char *argv[])\n{\n    char list[XATTR_SIZE], value[XATTR_SIZE];\n    ssize_t listLen, valueLen;\n    int ns, j, k, opt;\n    Boolean hexDisplay;\n\n    hexDisplay = 0;\n    while ((opt = getopt(argc, argv, \"x\")) != -1) {\n        switch (opt) {\n        case 'x': hexDisplay = 1;       break;\n        case '?': usageError(argv[0]);\n        }\n    }\n\n    if (optind >= argc + 2)\n        usageError(argv[0]);\n    for (j = optind; j < argc; j++) {\n        listLen = listxattr(argv[j], list, XATTR_SIZE);\n        if (listLen == -1)\n            errExit(\"listxattr\");\n\n        printf(\"%s:\\n\", argv[j]);\n\n        /* Loop through all EA names, displaying name + value */\n\n        for (ns = 0; ns < listLen; ns += strlen(&list[ns]) + 1) {\n            printf(\"        name=%s; \", &list[ns]);\n\n            valueLen = getxattr(argv[j], &list[ns], value, XATTR_SIZE);\n            if (valueLen == -1) {\n                printf(\"couldn't get value\");\n            } else if (!hexDisplay) {\n                printf(\"value=%.*s\", (int) valueLen, value);\n            } else {\n                printf(\"value=\");\n                for (k = 0; k < valueLen; k++)\n                    printf(\"%02x \", (unsigned int) value[k]);\n            }\n\n            printf(\"\\n\");\n        }\n\n        printf(\"\\n\");\n    }\n\n    exit(EXIT_SUCCESS);\n}\n      `xattr/xattr_view.c`\n```"]