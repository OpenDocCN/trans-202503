["```\nroot@bunnie-novena:~/ax211-code# ./ax211 -d debug.bin\nFPGA hardware v1.26\nDebug mode APPO response [6]: {0x3f 0x00 0xc1 0x04 0x17 0xab}\nResult of factory mode: 0\n00000000  0f 41 1f 0f 0f 0f ff ff                      |.A......|\nExpected 0x00 0x00, got 0x0f 0x41\nLoaded debugger\nLocating fixup hooks... Done\nAX211> help\nList of available commands:\n   hello Make sure the card is there\n    peek Read an area of memory\n    poke Write to an area of memory\n    jump Jump to an area of memory\n dumprom Dump all of ROM to a file\n  memset Set a range of memory to a single value\n    null Do nothing and return all zeroes\n  disasm Disassemble an area of memory\n     ram Manipulate internal RAM\n     sfr Manipulate special function registers\n    nand Operate on the NAND in some fashion\n   extop Execute an extended opcode on the chip\n   reset Reset the AX211 card\n    help Print this help\nFor more information on a specific command, type 'help [command]'\nAX211> help disasm\nHelp for disasm:\nDisassemble a number of bytes at the given offset.\nUsage: disasm [address] [bytes]\nAX211> disasm 0x200 16\n.org 0x0200\n        nop\n        nop\n        reti\n\n        nop\n        mov R7, A\n        reti\n\n        mov R7, A\n        nop\n        mov R7, A\n        nop\n        mov R7, A\n        nop\n```", "```\n0x0000_0000        media signature \"SF_BOOT\"\n0x0000_0200        bootloader signature \"BRLYT\", \"BBBB\"\n0x0000_0800        sector header 1 (\"MMM.8\")\n0x0000_09BC        reset vector table\n0x0000_0A10        start of ARM32 instructions\n                     – stage 1 bootloader?\n0x0000_3400        sector header 2 (\"MMM.8\")\n                     – stage 2 bootloader?\n0x0000_A518        thunk table of some type\n0x0000_B704        end of code (padding until next sector)\n0x0001_0000        sector header 3( \"MMM.8\") – kernel?\n0x0001_0368        jump table + runtime setup (stack, etc.)\n0x0001_0828        ARM thumb code start – possibly also\n                     baseband code\n0x0007_2F04        code end\n0x0007_2F05        begin padding \"DFFF\"\n0x0009_F005       end padding \"DFFF\"\n0x0009_F006        code section begin \"Accelerated\n                     Technology / ATI / Nucleus PLUS\"\n0x000A_2C1A        code section end; pad with zeros\n0x000A_328C        region of compressed/unknown data begin\n0x007E_E200        modified FAT partition #1\n0x007E_F400        modified FAT partition #2\n```", "```\nbunnie@bunnie-novena-laptop:~/code/fernvale-qemu$ ./run.sh\n\n~~~ Welcome to MTK Bootloader V005 (since 2005) ~~~\n**===================================================**\n\nREAD WORD Fernvale Live 0xa0010328 = 0x0000... ok\nWRITE WORD Fernvale Live 0xa0010328 = 0x0800... ok\nREAD WORD Fernvale Live 0xa0010230 = 0x0001... ok\nWRITE WORD Fernvale Live 0xa0010230 = 0x0001... ok\nREAD DWORD Fernvale Live 0xa0020c80 = 0x11111011... ok\nWRITE DWORD Fernvale Live 0xa0020c80 = 0x11111011... ok\nREAD DWORD Fernvale Live 0xa0020c90 = 0x11111111... ok\nWRITE DWORD Fernvale Live 0xa0020c90 = 0x11111111... ok\nREAD WORD Fernvale Live 0xa0020b10 = 0x3f34... ok\nWRITE WORD Fernvale Live 0xa0020b10 = 0x3f34... ok\n```", "```\nenum mtk_commands {\n  mtk_cmd_old_write16 = 0xa1,\n  mtk_cmd_old_read16 = 0xa2,\n  mtk_checksum16 = 0xa4,\n  mtk_remap_before_jump_to_da = 0xa7,\n  mtk_jump_to_da = 0xa8,\n  mtk_send_da = 0xad,\n  mtk_jump_to_maui = 0xb7,\n  mtk_get_version = 0xb8,\n  mtk_close_usb_and_reset = 0xb9,\n  mtk_cmd_new_read16 = 0xd0,\n  mtk_cmd_new_read32 = 0xd1,\n  mtk_cmd_new_write16 = 0xd2,\n  mtk_cmd_new_write32 = 0xd4,\n  // mtk_jump_to_da = 0xd5,\n  mtk_jump_to_bl = 0xd6,\n  mtk_get_sec_conf = 0xd8,\n  mtk_send_cert = 0xe0,\n  mtk_get_me = 0xe1, /* Responds with 22 bytes */\n  mtk_send_auth = 0xe2,\n  mtk_sla_flow = 0xe3,\n  mtk_send_root_cert = 0xe5,\n  mtk_do_security = 0xfe,\n  mtk_firmware_version = 0xff,\n};\n```"]