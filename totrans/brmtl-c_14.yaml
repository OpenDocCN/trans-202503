- en: Part II
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分
- en: C for Big Machines
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大型机器的C语言
- en: So far we’ve concentrated on embedded programming. With embedded systems, you
    have limited memory and limited resources. However, C is designed to work on larger
    machines with operating systems (that we don’t have to program ourselves), and
    it has many features that are useful on these larger machines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们集中讨论了嵌入式编程。在嵌入式系统中，你有有限的内存和资源。然而，C语言是为有操作系统的大型机器设计的（这些操作系统我们不需要自己编程），它具有许多在这些大型机器上有用的功能。
- en: For example, there is a memory region called the *heap* that allows you to allocate
    and free memory, as needed, to store complex objects. Things like web browsers
    and XML parsers make extensive use of the heap.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有一个称为*堆*的内存区域，它允许你根据需要分配和释放内存来存储复杂的对象。像网页浏览器和XML解析器广泛使用堆。
- en: We haven’t covered this before because we barely had enough memory for the stack—and
    dividing memory into a stack and heap would like dividing a drop of water between
    two glasses. It’s possible, but very tricky and not very useful.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前没有讨论过这个，因为我们几乎没有足够的内存来处理堆栈——将内存划分为堆栈和堆就像将一滴水分到两个杯子里。虽然可能，但非常棘手且不太有用。
- en: We also haven’t covered the C I/O system. We’ve had to do the I/O ourselves,
    going directly to the hardware. On big machines with an operating system, the
    C I/O system and the operating system hide all those details from you.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也没有讨论过C语言的I/O系统。我们必须自己处理I/O，直接访问硬件。而在具有操作系统的大型机器上，C语言的I/O系统和操作系统会将所有这些细节隐藏起来。
- en: Let’s take a look at the differences between embedded and non-embedded programming.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下嵌入式编程和非嵌入式编程之间的区别。
- en: Inembedded programming, when you write to a device, you write directly to the
    device. This means that you must know the details of the device you are using.
    Fornon-embedded programming, when you call `write` to write to a device, you tell
    the operating system to do the work, including buffering to make the I/O more
    efficient and dealing with the actual device.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式编程中，当你写入设备时，你是直接写入设备。这意味着你必须了解你所使用的设备的详细信息。而在非嵌入式编程中，当你调用`write`写入设备时，你是告诉操作系统来完成这项工作，包括缓冲区处理，以提高I/O效率，并处理实际的设备。
- en: Inembedded programming, you have limited memory. You need to know where every
    byte is and how its being used. With non-embedded programming,you have an operating
    system and memory mapping system, which gives you access to a lot of memory. Most
    programs can afford to waste memory, and a lot of programs do.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在嵌入式编程中，你的内存是有限的。你需要知道每一个字节的位置以及它是如何使用的。而在非嵌入式编程中，你有操作系统和内存映射系统，这使你可以访问大量内存。大多数程序可以浪费一些内存，而且许多程序确实会这样做。
- en: An embedded program is loaded into flash memory by an external loader. In our
    case, it’s called ST-LINK and is hidden inside the IDE, but it’s there. The program
    stays in flash forever and is never unloaded or replaced during the normal operation
    of the system. Non-embedded systems, on the other hand, have an operating system
    that loads and unloads programs as needed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式程序通过外部加载器加载到闪存中。在我们的例子中，它被称为ST-LINK，并且隐藏在IDE内部，但它确实存在。程序永远驻留在闪存中，在系统正常运行期间永远不会被卸载或替换。而非嵌入式系统则有一个操作系统，根据需要加载和卸载程序。
- en: An embedded system runs one program. You barely have enough memory for that.
    However non-embedded systems can and do run more than one program at a time. The
    system I’m writing this on is currently running 341 programs, and it’s a small
    system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统运行一个程序。你几乎没有足够的内存来运行其他程序。然而，非嵌入式系统可以并且确实能同时运行多个程序。我现在使用的系统正在运行341个程序，而且它是一个小型系统。
- en: Embedded programs never stop, whereas non-embeddedones can exit and return control
    to the operating system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式程序永远不会停止，而非嵌入式程序可以退出并将控制权返回给操作系统。
- en: Embedded systems store all their data in memory. Non-embedded systems have a
    filesystem and can read and write file data as well as screens, networks, and
    other peripherals.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统将所有数据存储在内存中。非嵌入式系统有一个文件系统，可以读取和写入文件数据，以及屏幕、网络和其他外设。
- en: Finally, errors in embedded systems must be handled by your program. For non-embedded
    systems, you have an operating system that will catch errors not handled by the
    program and print a warning or stop the program. The operating system keeps a
    bad program from damaging other resources on the system. In contrast, if an embedded
    programgoes south, you can easily brick the system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，嵌入式系统中的错误必须由你的程序来处理。对于非嵌入式系统，你有一个操作系统，它会捕捉程序未处理的错误并打印警告或停止程序。操作系统可以防止坏程序损坏系统中的其他资源。相比之下，如果嵌入式程序出现问题，你很容易就会把系统“砖化”。
- en: C++ works well on larger systems because, in most cases, the overhead does not
    significantly affect things. For example, let’s suppose you want to write a program
    to read a bunch of data from a database and write a report. For a report that
    runs once a day, who cares if the program uses 0.5 seconds of CPU time versus
    0.2 seconds?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 在大系统上运行得很好，因为在大多数情况下，开销不会对事情产生显著影响。例如，假设你想编写一个程序从数据库中读取一堆数据并生成报告。对于一天运行一次的报告，谁在乎程序使用了
    0.5 秒 CPU 时间还是 0.2 秒？
- en: However, if you are doing high-performance computing, such as gaming, animation,
    or video editing, you need the performance and precision of C. Even though it’s
    an older language, C still has its place on mainframes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你从事高性能计算，如游戏、动画或视频编辑，你需要 C 语言的性能和精度。尽管它是一个较老的语言，C 语言仍然在大型机上占有一席之地。
- en: 'In this section, you’ll learn how to use the heap, which is dynamic memory
    that can be allocated or freed at will. You will also learn how to deal with the
    operating system’s I/O system—actually, two I/O systems: the buffered I/O system
    and the raw I/O system.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习如何使用堆，它是可以随时分配或释放的动态内存。你还将学习如何处理操作系统的 I/O 系统——实际上有两个 I/O 系统：缓冲 I/O
    系统和原始 I/O 系统。
- en: Finally, you will discover how to use floating-point numbers. Most cheap embedded
    processors don’t have a floating-point unit, so we can’t use floating-point numbers
    in embedded programs. Also, although mainframes have dedicated floating-point
    hardware, you must use this feature carefully; otherwise, you may get unexpected
    results.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将发现如何使用浮动点数。大多数廉价的嵌入式处理器没有浮点单元，因此我们无法在嵌入式程序中使用浮动点数。此外，尽管大型机有专用的浮点硬件，你必须小心使用此功能；否则，可能会得到意外的结果。
