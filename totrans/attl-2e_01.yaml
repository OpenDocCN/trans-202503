- en: '1'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1'
- en: AN END USER’S PERSPECTIVE ON THE GNU AUTOTOOLS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: GNU Autotools 的最终用户视角
- en: '*I am not afraid of storms, for I am learning how to sail my ship.*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*我不害怕风暴，因为我在学习如何驾驶我的船。*'
- en: —*Louisa May Alcott*, Little Women
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: —**路易莎·梅·奥尔科特**，《小妇人》
- en: '![Image](../images/common.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: If you’re not a software developer, either by trade or by hobby, you may still
    have a need or desire at some point to build open source software to be installed
    on your computer. Perhaps you’re a graphic artist who wishes to use the latest
    version of GIMP, or maybe you’re a video enthusiast and you need to build a late
    version of FFmpeg. This chapter, therefore, may be the only one you read in this
    book. I hope that is not the case, because even a power user can gain so much
    more by striving to understand what goes on under the covers. Nevertheless, this
    chapter is designed for you. Here, I’ll discuss what to do with that so-called
    *tarball* you downloaded from that project website. I’ll use the Autoconf package
    to illustrate, and I’ll try to provide enough context so that you can follow the
    same process for any package you download^([1](footnote.xhtml#ch01fn1)) from a
    project website.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是一名软件开发者，无论是职业上的还是兴趣上的，你可能在某些时候仍然需要或希望构建开源软件以安装在你的计算机上。也许你是一个图形艺术家，想使用最新版本的
    GIMP，或者你是一个视频爱好者，需要构建一个较新的 FFmpeg 版本。因此，本章可能是你在本书中阅读的唯一一章。我希望情况不是这样，因为即使是高级用户，通过努力理解幕后发生的事情，也能获得更多的收获。不过，本章是为你设计的。在这里，我将讨论如何处理你从项目网站下载的所谓
    *tarball*。我将使用 Autoconf 包来说明，并尽量提供足够的背景信息，使你能够遵循相同的流程来处理任何你从项目网站下载的包^([1](footnote.xhtml#ch01fn1))。
- en: If you are a software developer, there’s a good chance the material in this
    chapter is too basic for you; therefore, I’d recommend skipping right to the next
    chapter, where we’ll jump into a more developer-centric discussion of the Autotools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是软件开发者，那么本章的内容很可能对你来说过于基础；因此，我建议你跳到下一章，我们将在那里深入讨论 Autotools，更侧重于开发者的内容。
- en: Software Source Archives
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件源代码归档
- en: 'Open source software is distributed as single-file source archives containing
    the source and build files necessary to build the software on your system. Linux
    distributions remove much of the pain for end users by prebuilding these source
    archives and packaging the built binaries into installation packages ending in
    extensions like *.rpm* (for Red Hat–based systems) and *.deb* (for Debian/Ubuntu-based
    systems). Installing software using your system package manager is relatively
    easy, but sometimes you need the latest feature set of some software and it hasn’t
    yet been packaged for your particular flavor of Linux. When this happens, you
    need to download the source archive from the project website’s download page and
    then build and install it yourself. Let’s begin by downloading version 2.69 of
    the Autoconf package:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 开源软件作为单文件源代码归档进行分发，包含了在你的系统上构建软件所需的源代码和构建文件。Linux 发行版通过预构建这些源代码归档，并将已构建的二进制文件打包成以
    *.rpm*（针对 Red Hat 系统）和 *.deb*（针对 Debian/Ubuntu 系统）等扩展名结尾的安装包，减轻了最终用户的痛苦。使用系统的包管理器安装软件相对容易，但有时你需要某些软件的最新功能集，而这些功能还没有为你的
    Linux 版本打包。在这种情况下，你需要从项目网站的下载页面下载源代码归档文件，然后自己构建和安装它。让我们首先下载版本 2.69 的 Autoconf
    包：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Source archive names generally follow a de facto standard format supported
    by the Autotools. Unless the project maintainer has gone out of their way to modify
    this format, the Autotools will automatically generate a source archive file named
    according to the following template: *pkgname*-*version*.*format*. Here, *pkgname*
    is the short name of the software, *version* is the version of the software, and
    *format* represents the archive format, or file extensions. The *format* portion
    may contain more than one period, depending on the way the archive was built.
    For instance, *.tar.gz* represents two encodings in the format—a `tar` archive
    that has been compressed with the `gzip` utility, as is the case with the Autoconf
    source archive:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码归档文件的名称通常遵循 Autotools 支持的事实标准格式。除非项目维护者特别修改了这个格式，否则 Autotools 会自动生成一个源代码归档文件，其命名遵循以下模板：*pkgname*-*version*.*format*。这里，*pkgname*
    是软件的简短名称，*version* 是软件的版本，*format* 表示归档格式或文件扩展名。*format* 部分可能包含多个点，具体取决于归档的构建方式。例如，*.tar.gz*
    表示格式中有两个编码——一个 `tar` 归档，使用 `gzip` 工具进行了压缩，就像 Autoconf 源代码归档文件那样：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unpacking a Source Archive
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解压源代码归档
- en: By convention, source archives contain a single root directory as the top-level
    entry. You should feel safe unpacking a source archive to find only a single new
    directory in the current directory, named the same as the archive file minus the
    *format* portion. Source archives packaged using Autotools-based build systems
    never unpack the contents of the original top-level directory into the current
    directory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，源代码归档包含一个作为顶级条目的单一根目录。你应该放心地将源代码归档解压缩到当前目录中，只会看到一个新目录，目录名称与归档文件的名称相同，只是去掉了
    *格式* 部分。使用基于 Autotools 的构建系统打包的源代码归档，从不将原始顶级目录的内容解压到当前目录中。
- en: Nevertheless, occasionally, you’ll download an archive and unpack it to find
    dozens of new files in the current directory. It’s therefore prudent to unpack
    a source archive of unknown origin into a new, empty subdirectory. You can always
    move it up a level if you need to. Additionally, you can see what will happen
    by using the `tar` utility’s `t` option (instead of `x`), which lists the contents
    of the archive without unpacking it. The `unzip` utility supports the `-l` option
    to the same effect.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，偶尔你会下载一个归档文件并解压缩它，结果发现当前目录中出现了数十个新文件。因此，将一个来源不明的源代码归档解压缩到一个新的、空的子目录中是明智的做法。如果需要，你随时可以将其移动到上一级目录。此外，你可以使用
    `tar` 工具的 `t` 选项（而不是 `x` 选项）来查看将会发生什么，这会列出归档文件的内容，而不解压缩它。`unzip` 工具也支持 `-l` 选项来达到同样的效果。
- en: 'Source archives can take many shapes, each ending in a unique file extension:
    *.zip*, *.tar*, *.tar.gz* (or *.tgz*), *.tar.bz2*, *.tar.xz*, *tar.Z*, and so
    on. The files contained in these source archives are the source code and build
    files used to build the software. The most common of these formats are *.zip*,
    *.tar.gz* (or *.tgz*), and *.tar.bz2*. Newer formats that are gaining in popularity
    include *.xz* (for which the latest Autotools even have native support) and *.zstd*.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码归档可以有多种形式，每种形式的文件扩展名都不相同：*.zip*、*.tar*、*.tar.gz*（或 *.tgz*）、*.tar.bz2*、*.tar.xz*、*tar.Z*
    等等。这些源代码归档文件中包含的是用于构建软件的源代码和构建文件。最常见的这些格式是 *.zip*、*.tar.gz*（或 *.tgz*）和 *.tar.bz2*。近年来逐渐流行的新格式包括
    *.xz*（最新的 Autotools 已经原生支持）和 *.zstd*。
- en: ZIP files use compression techniques developed decades ago by Phil Katz on Microsoft
    DOS systems. ZIP was a proprietary multifile compressed archive format that was
    eventually released into the public domain. Since then, versions have been written
    for Microsoft Windows and Linux as well as other Unix-like operating systems.
    In later versions of Windows, a user can unpack a *.zip* file merely by right-clicking
    it in Windows Explorer and selecting an **Extract** menu option. The same is true
    of the Nautilus (Nemo on Mint’s Cinnamon desktop) file browser on Linux Gnome
    desktops.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ZIP 文件使用的是几十年前由 Phil Katz 在 Microsoft DOS 系统上开发的压缩技术。ZIP 是一种专有的多文件压缩归档格式，后来被公开发布。此后，Windows
    和 Linux 以及其他类 Unix 操作系统都为其编写了版本。在 Windows 的较新版本中，用户只需在 Windows 资源管理器中右键点击 *.zip*
    文件并选择 **提取** 菜单选项，就可以解压缩该文件。Linux Gnome 桌面上的 Nautilus 文件浏览器（在 Mint 的 Cinnamon
    桌面中为 Nemo）也有相同的功能。
- en: 'ZIP files can be unpacked at the Linux command line using the more or less
    ubiquitous `unzip` program,^([2](footnote.xhtml#ch01fn2)) like so:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ZIP 文件可以通过 Linux 命令行使用几乎无处不在的 `unzip` 程序解压缩，命令如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ZIP files are most often intended by project maintainers to be used on Microsoft
    Windows systems. A much more common format used on Linux platforms is the compressed
    *.tar* file. The name *tar* comes from *tape archive*. The `tar` utility was originally
    designed to stream the contents of online storage media, such as hard disk drives,
    to more archival storage formats, such as magnetic tape. Because it’s not a random-access
    format, magnetic tape doesn’t have a hierarchical filesystem. Rather, data is
    written to tape in one long string of bits, with these archive files appended
    end to end. To find a particular file on tape, you have to read from the beginning
    of the tape through to the file you’re interested in. Hence, it’s better to store
    fewer files on tape to reduce search time.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ZIP 文件通常是项目维护者为在 Microsoft Windows 系统上使用而创建的。Linux 平台上更常用的格式是压缩的 *.tar* 文件。*tar*
    这个名称来源于 *磁带归档*。`tar` 工具最初是为了将在线存储介质（如硬盘驱动器）的内容流式传输到更具存档性的存储格式（如磁带）而设计的。由于磁带不是随机访问格式，因此它没有分层文件系统。相反，数据是以一长串比特写入磁带，归档文件是一个接一个地附加在一起。要在磁带上找到特定的文件，你必须从磁带的开头开始读取，直到找到你感兴趣的文件。因此，将较少的文件存储在磁带上是更好的选择，可以减少搜索时间。
- en: The `tar` utility was designed to convert a set of files in a hierarchical filesystem
    into just such a long string of bits—an archive. The `tar` utility was specifically
    *not* designed to compress this data in a manner that would reduce the amount
    of space it takes up, as there are other utilities to do that sort of thing—remember,
    a founding principle of Unix is that of a single responsibility per tool. In fact,
    a *.tar* file is usually slightly larger than the sum of the sizes of the files
    it contains because of the overhead of storing the hierarchy, names, and attributes
    of the archived files.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`tar` 工具的设计目的是将一组文件从层级文件系统转换为一个这样的长位串——即归档文件。`tar` 工具的设计**并不是**为了以减少占用空间的方式压缩数据，因为已经有其他工具可以做这种事情——记住，Unix
    的一个基本原则是每个工具只负责一个功能。实际上，*.tar* 文件通常比其包含的文件大小总和稍大，因为存储层次结构、文件名和文件属性所需的开销。'
- en: 'Occasionally, you’ll find a source archive that ends only in a *.tar* extension.
    This implies that the file is an uncompressed *.tar* archive. More often, however,
    you’ll see extensions such as *.tar.gz*, *.tgz*, and *.tar.bz2*. These are compressed
    *.tar* archives. An archive is created from the contents of a directory tree using
    the `tar` utility, and then the archive is compressed using the `gzip` or `bzip2`
    utility. A file with an extension of *.tar.gz* or *.tgz* is a *.tar* archive that
    has been compressed with the `gzip` utility. Technically, you can extract the
    contents of a *.tar.gz* file by using a pipeline of commands to first uncompress
    the *.gz* file with `gunzip` and then unpack the remaining *.tar* file with `tar`,
    in the following manner:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 偶尔，你会遇到一个仅以 *.tar* 扩展名结尾的源归档文件。这意味着该文件是一个未压缩的 *.tar* 归档文件。然而，更常见的是，你会看到 *.tar.gz*、*.tgz*
    和 *.tar.bz2* 等扩展名。这些是压缩过的 *.tar* 归档文件。一个归档文件是通过使用 `tar` 工具从目录树的内容创建的，然后归档文件被使用
    `gzip` 或 `bzip2` 工具压缩。一个扩展名为 *.tar.gz* 或 *.tgz* 的文件是一个已经使用 `gzip` 工具压缩过的 *.tar*
    归档文件。从技术上讲，你可以使用命令管道来提取 *.tar.gz* 文件的内容，首先使用 `gunzip` 解压 *.gz* 文件，然后使用 `tar` 解包剩下的
    *.tar* 文件，方法如下：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However, the `tar` utility has evolved since it was used for creating tape
    data streams. Nowadays, it’s used as a general-purpose archive file management
    tool. It understands, based on file extensions and sometimes the initial bytes
    of an archive, how to execute the correct tools to uncompress a compressed *.tar*
    archive before unpacking the files. For example, the following command recognizes
    *autoconf-2.69.tar.gz* as a *.tar* archive that was subsequently compressed with
    the *gzip* utility:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`tar` 工具自用于创建磁带数据流以来已经发展了很多。如今，它被用作一个通用的归档文件管理工具。它根据文件扩展名，有时还根据归档的初始字节，知道如何执行正确的工具来解压一个压缩过的
    *.tar* 归档文件，再解包文件。例如，以下命令将 *autoconf-2.69.tar.gz* 识别为一个 *.tar* 归档文件，且该文件随后使用 *gzip*
    工具进行了压缩：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command first executes the `gunzip` program (or the `gzip` program with
    the `-d` option) to uncompress the archive, and then it uses internal algorithms
    to convert the archive into its original multifile directory structure, complete
    with original timestamps and file attributes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令首先执行 `gunzip` 程序（或者带 `-d` 选项的 `gzip` 程序）来解压归档文件，然后使用内部算法将归档文件转换回其原始的多文件目录结构，且保留原始的时间戳和文件属性。
- en: Building the Software
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建软件
- en: Once you’ve unpacked the source archive, the next step usually involves examining
    the contents of the unpacked directory tree in an effort to determine how the
    software should be built and installed. A few patterns have become pervasive in
    the open source world, and GNU and the Autotools try to promote the use of these
    patterns as the default behavior of an Autotools-based project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解包完源归档文件后，下一步通常是检查解包后的目录树内容，试图确定如何构建和安装软件。在开源世界中，几个模式已经变得广泛流行，GNU 和 Autotools
    尝试推动这些模式作为基于 Autotools 的项目的默认行为。
- en: First, look for a file named *INSTALL* in the root directory of the unpacked
    archive. This file usually contains step-by-step instructions for how to build
    and install the software, or it tells you how to find those instructions—perhaps
    via a URL reference to a project web page.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在解包后的归档文件的根目录中查找名为 *INSTALL* 的文件。该文件通常包含如何构建和安装软件的逐步说明，或者告诉你如何找到这些说明——可能是通过项目网页上的
    URL 引用。
- en: 'The *INSTALL* file for GNU packages such as Autoconf is pretty verbose. The
    GNU project tends to try to set an example for the rest of the open source world.
    Nevertheless, it does carefully outline the steps required to build the Autoconf
    package. I’d recommend reading a GNU project *INSTALL* file completely at least
    once, because it contains details about how most GNU projects are built and installed.
    In fact, the one bundled with the Autoconf package is actually a generic one that
    GNU bundles with many of its packages—which in itself is a testament to the consistency
    of Autotools-generated build systems. Let’s dive in and see what it tells us about
    building Autoconf:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: GNU 软件包的 *INSTALL* 文件，比如 Autoconf 文件，内容相当冗长。GNU 项目通常会尽力为其他开源世界树立榜样。尽管如此，它确实详细列出了构建
    Autoconf 包所需的步骤。我建议至少完整阅读一次 GNU 项目的 *INSTALL* 文件，因为它包含了大多数 GNU 项目如何构建和安装的细节。事实上，和
    Autoconf 包捆绑在一起的文件其实是一个通用文件，GNU 在许多包中都会捆绑这个文件——这本身就是 Autotools 生成的构建系统一致性的证明。让我们深入了解一下它是如何指导我们构建
    Autoconf 的：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The instructions indicate that you should use the `cd` command to change to
    the directory containing the project’s source code and then type `./configure`
    to configure the package for your system. However, it should be clear that if
    you’re reading the *INSTALL* file, you’re probably already in the directory containing
    `configure`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 说明中提到，你应该使用 `cd` 命令切换到包含项目源代码的目录，然后输入 `./configure` 来为你的系统配置该包。然而，应该很明显的是，如果你正在阅读
    *INSTALL* 文件，你可能已经在包含 `configure` 的目录中了。
- en: 'Running `configure` can take a while if the package is large and complex. For
    the Autoconf package, it takes only a couple of seconds and spews a single page
    of text to the screen in the process. Let’s take a closer look at what gets displayed
    during a successful Autoconf configuration process:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `configure` 可能需要一段时间，特别是当软件包很大且复杂时。对于 Autoconf 包来说，只需要几秒钟，并且在过程中会输出一页文本到屏幕。让我们仔细看看在成功的
    Autoconf 配置过程中会显示哪些内容：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There are basically two parts to `configure`’s output. The first part contains
    lines that start with `checking` (though there are a few in the middle that start
    with `configure:`). These lines indicate the status of the features that `configure`
    was programmed to look for. If a feature is not found, the trailing text will
    be `no`. On the other hand, if the feature is found, the trailing text will sometimes
    be `yes` but will often be the filesystem location of the tool or feature that
    was discovered.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure` 的输出基本上分为两部分。第一部分包含以 `checking` 开头的行（虽然中间有些行以 `configure:` 开头）。这些行表示
    `configure` 被编程用来查找的功能的状态。如果某个功能未找到，后面的文字将显示 `no`。另一方面，如果功能被发现，后面的文字有时会是 `yes`，但通常会是发现的工具或功能的文件系统位置。'
- en: It’s not uncommon for `configure` to fail due to missing tools or utilities,
    especially if this is a newly installed system or if you haven’t downloaded and
    built a lot of software on this system. A new user will often start posting questions
    to online forums at this point—or just give up.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure` 因缺少工具或实用程序而失败并不罕见，尤其是在这是一个新安装的系统，或者你没有在这个系统上下载和构建很多软件时。此时，新用户通常会开始在在线论坛上发布问题，或者直接放弃。'
- en: 'It’s important to understand the contents of this section because it can help
    you figure out how to solve problems. Addressing a failure is often as simple
    as installing a compiler using your system’s package manager. For the Autoconf
    package, not much is required that isn’t installed by default on most Linux systems.
    There are a few exceptions, however. For example, here’s the output of `configure`
    on a system that doesn’t have M4 installed:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一部分的内容非常重要，因为它可以帮助你找出如何解决问题。解决失败问题通常很简单，比如使用系统的包管理器安装一个编译器。对于 Autoconf 包，大多数
    Linux 系统默认会安装所需的工具。然而，也有一些例外。例如，以下是 `configure` 在一个没有安装 M4 的系统上的输出：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, you’ll notice the last few lines show an error. The Autoconf package
    is a GNU software tool, and, true to form, it provides a lot of information to
    help you figure out what’s wrong. You need to install an M4 macro processor, and
    we’ll do that with our package manager. My system is a Linux Mint system, based
    on Ubuntu, so I’ll use the `apt` utility. If you’re using a Red Hat–based system,
    you may use `yum` to accomplish the same thing or just use the graphical user
    interface (GUI) for your system package manager from the GUI desktop. The key
    here is that we’re installing the m4 package:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你会注意到最后几行显示了一个错误。Autoconf包是一个GNU软件工具，按照其惯例，它提供了很多信息，帮助你找出问题所在。你需要安装一个M4宏处理器，我们将通过包管理器来安装它。我的系统是基于Ubuntu的Linux
    Mint系统，因此我将使用`apt`工具。如果你使用的是基于Red Hat的系统，你可以使用`yum`来完成同样的操作，或者直接通过图形用户界面（GUI）使用你的系统包管理器。这里的关键是我们正在安装m4包：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now `configure` can complete successfully:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`configure`可以成功完成了：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The second section is a set of lines beginning with `config.status:`. This
    section starts with the line `configure: creating ./config.status`, at ➊. The
    last thing `configure` does is create another script called *config.status* and
    then execute this script. The lines that start with `config.status:` are actually
    displayed by *config.status*. The primary task of *config.status* is to generate
    the build system based on the findings of `configure`. The lines output by this
    script merely tell you the names of the files being generated.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '第二部分是一组以`config.status:`开头的行。该部分从`configure: creating ./config.status`这一行开始，位于➊处。`configure`做的最后一件事是创建另一个脚本，名为*config.status*，然后执行该脚本。以`config.status:`开头的行实际上是由*config.status*显示的。*config.status*的主要任务是根据`configure`的结果生成构建系统。该脚本输出的行仅仅是告诉你正在生成的文件的名称。'
- en: You can also run `configure` from a different directory, if you wish, by using
    a relative path to the `configure` command. This is useful if, for example, the
    project source code comes to you on a CD or via a read-only NFS mount. You could,
    at this point, create a build directory in your home directory and, using a relative
    or absolute path, execute `configure` from the read-only source directory. The
    `configure` script will create the entire build tree for the project in the current
    directory, including makefiles and any other files needed to build the project
    with `make`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，也可以从其他目录运行`configure`，方法是使用相对路径来调用`configure`命令。如果项目源代码是通过CD或只读NFS挂载提供给你的，这会很有用。例如，你可以在你的主目录中创建一个构建目录，然后通过相对路径或绝对路径，从只读源目录中执行`configure`。`configure`脚本将在当前目录中为项目创建整个构建树，包括makefile和任何其他构建项目所需的文件。
- en: 'Once `configure` has completed, it’s possible to run `make`. Before this point,
    there are no files in the directory tree named *Makefile*. Running `make` after
    `configure` yields the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`configure`完成，就可以运行`make`了。在此之前，目录树中没有名为*Makefile*的文件。在`configure`之后运行`make`将会得到以下结果：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The primary task of `configure` is to ensure that `make` will succeed, so it’s
    not likely that `make` will fail. If it does, the problem will probably be very
    specific to your system, so I can’t provide any guidelines here except to suggest
    a careful reading of the `make` output in order to determine what caused the failure.
    If you can’t discover the problem by reading the output, you can check the Autoconf
    mailing list archives, ask on the mailing list directly, and finally post a bug
    report to the Autoconf project website.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure`的主要任务是确保`make`能够成功，因此`make`失败的可能性不大。如果它失败了，问题可能是非常特定于你的系统的，所以我无法提供任何指导，除非建议你仔细阅读`make`的输出，以确定导致失败的原因。如果你通过阅读输出无法发现问题，你可以查阅Autoconf邮件列表档案，直接在邮件列表上询问，最后在Autoconf项目网站上提交一个bug报告。'
- en: Testing the Build
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试构建
- en: Once we’ve built the software using `make`, it would be nice to exercise any
    tests the project maintainers might have added to the build system to provide
    some level of assurance that the software will run correctly on our system.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们使用`make`构建了软件，运行项目维护者可能已添加到构建系统中的任何测试会很有意义，这些测试能够提供某种程度的保证，确保软件能够在我们的系统上正确运行。
- en: When we built the software, we ran `make` without any command line arguments.
    This caused `make` to assume we wanted to build the *default target*, which by
    convention is the `all` target. Therefore, running `make all` is the same as running
    `make` without any arguments. However, Autotools build systems have many targets
    that can be directly specified on the `make` command line. The one we’re interested
    in at this point is the `check` target.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建软件时，我们运行了没有任何命令行参数的 `make`。这使得 `make` 假设我们想要构建*默认目标*，根据约定，这个目标是 `all` 目标。因此，运行
    `make all` 就等同于运行没有任何参数的 `make`。然而，Autotools 构建系统有许多目标，可以直接在 `make` 命令行中指定。我们此时关注的目标是
    `check` 目标。
- en: 'Running `make check` within the source directory will build and execute any
    test programs that were included by the project maintainers (this takes several
    minutes to complete for Autoconf):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码目录中运行 `make check` 会构建并执行项目维护者所包含的任何测试程序（对于 Autoconf 来说，这需要几分钟才能完成）：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**NOTE**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Your output may differ slightly in minor ways from mine. Different Linux distributions
    and tool versions display differently, so don’t be too concerned about minor differences.
    The number of tests skipped or failed may also differ from system to system due
    to differences in the tools installed.*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*你的输出可能会与我的稍有不同。不同的 Linux 发行版和工具版本显示方式不同，因此不要太担心细微的差异。由于系统中安装的工具不同，跳过或失败的测试数量也可能因系统而异。*'
- en: 'As you can see, the Autoconf package provides 503 tests; 460 of those were
    run and 43 were purposely skipped. Of the 460 tests that were executed, six failed,
    but four of those were expected failures, so we have only two problems: test 501
    and test 503.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Autoconf 包提供了 503 个测试，其中 460 个被执行，43 个被故意跳过。在执行的 460 个测试中，有六个失败，但其中四个是预期的失败，所以我们只有两个问题：测试
    501 和测试 503。
- en: With only two failures out of 460, I’d personally call this a whopping success,
    but if you would like to dig a little deeper to see what’s causing these problems,
    there are two approaches you can take. The first is to go to the Autoconf mailing
    list archives and either search for a similar question with answers or ask the
    list directly; notice the request in the preceding output to send the *tests/testsuite.log*
    file to *[bug-autoconf@gnu.org](mailto:bug-autoconf@gnu.org)*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 460 个测试中只有两个失败，从个人角度来看，我会称这是一个巨大的成功，但如果你想深入挖掘一下这些问题的根源，可以采取两种方法。第一种方法是访问 Autoconf
    邮件列表的档案，搜索类似的问题及其答案，或者直接向列表提问；注意在前面的输出中请求将 *tests/testsuite.log* 文件发送到 *[bug-autoconf@gnu.org](mailto:bug-autoconf@gnu.org)*。
- en: The other option requires a bit more programming skill. These tests are run
    by Autoconf’s *autotest* framework, which automatically creates a directory for
    each failed test under *tests/testsuite.dir*. Each directory found under *testsuite.dir*
    is named after the number of the failed test. If you look there, you’ll see six
    directories, including directories for the four expected failures. Each of these
    numbered directories contains a `run` script that will re-execute the failed test,
    displaying output to `stdout` rather than to a log file. This allows you to experiment
    with your system (perhaps by installing a different version of Libtool for test
    501, for example) and then try running the test again.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择需要稍微多一点的编程技巧。这些测试是由 Autoconf 的 *autotest* 框架运行的，它会为每个失败的测试自动创建一个目录，放在 *tests/testsuite.dir*
    下。在 *testsuite.dir* 下找到的每个目录都以失败测试的编号命名。如果你查看这些目录，你会看到六个目录，其中包括四个预期失败的目录。每个编号目录中都有一个
    `run` 脚本，它将重新执行失败的测试，并将输出显示到 `stdout`，而不是日志文件中。这允许你对系统进行实验（例如，可能为测试 501 安装不同版本的
    Libtool），然后重新运行测试。
- en: There is also the possibility, however slight, that the project maintainers
    are aware of these test failures. In this case, they would likely respond to your
    email with a comment to this effect (or a quick search of the archives may also
    turn up the same answer), at which point you can simply ignore the failed tests.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，也有一种可能性，尽管很小，那就是项目维护者已经知道这些测试失败的情况。在这种情况下，他们可能会通过电子邮件回复你类似的评论（或者快速搜索档案也可能会找到相同的答案），这时你可以简单地忽略失败的测试。
- en: Installing the Built Software
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装构建的软件
- en: Running `make` usually leaves built software products—executables, libraries,
    and data files—scattered throughout the build directory tree. Take heart, you’re
    almost there. The final step is installing the built software onto your system
    so you can use it. Thankfully, most build systems, including those managed by
    the Autotools, provide a mechanism for installing built software.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `make` 通常会将构建好的软件产品——可执行文件、库和数据文件——散布在整个构建目录树中。放心，你快完成了。最后一步是将已构建的软件安装到系统上，这样你就可以使用它了。幸运的是，大多数构建系统，包括由
    Autotools 管理的构建系统，都提供了安装已构建软件的机制。
- en: A complex build system is only useful to non-experts if it assumes a lot of
    basic defaults; otherwise, the poor user would be required to specify dozens of
    command line options for even the simplest build. The location of software installation
    is one such assumption; by default, the build system assumes you want to install
    built software into the */usr/local* directory tree.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的构建系统只有在假设了许多基本的默认设置时，对非专家才有用；否则，用户就需要为即使是最简单的构建也指定数十个命令行选项。软件安装位置就是这样的一个假设；默认情况下，构建系统假设你想将已构建的软件安装到
    */usr/local* 目录树中。
- en: The */usr/local* directory tree mirrors the */usr* directory tree; it’s the
    standard location for software that is built locally. The */usr* directory tree,
    on the other hand, is where Linux distribution packages get installed. For instance,
    if you installed the Autoconf package using the command `sudo apt-get install
    autoconf` (or `sudo yum install autoconf`), the package binaries would be installed
    into the */usr/bin* directory. When you install your hand-built Autoconf binaries,
    they’ll go into */usr/local/bin*, by default.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*/usr/local* 目录树镜像了 */usr* 目录树；它是本地构建软件的标准安装位置。而 */usr* 目录树则是 Linux 发行版包安装的位置。例如，如果你使用命令
    `sudo apt-get install autoconf`（或 `sudo yum install autoconf`）安装了 Autoconf 包，那么包的二进制文件将安装到
    */usr/bin* 目录。当你安装手动构建的 Autoconf 二进制文件时，它们默认会安装到 */usr/local/bin*。'
- en: It’s most often the case that */usr/local/bin* is positioned in your `PATH`
    environment variable before */usr/bin*. This allows your locally built and installed
    programs to override the ones installed by your distribution’s package manager.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，*/usr/local/bin* 会在你的 `PATH` 环境变量中位于 */usr/bin* 之前。这使得你本地构建和安装的程序可以覆盖由你的发行版包管理器安装的程序。
- en: 'If you wish to override this default behavior and install your software into
    a different location, you can use the `--prefix` option on `configure`’s command
    line,^([3](footnote.xhtml#ch01fn3)) as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望覆盖这个默认行为，并将软件安装到不同的位置，可以在 `configure` 的命令行中使用 `--prefix` 选项，^([3](footnote.xhtml#ch01fn3))
    如下所示：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will cause `configure` to generate the build scripts such that executable
    binaries will be installed into your `$HOME`*/bin* directory.^([4](footnote.xhtml#ch01fn4))
    If you don’t have root access on your system, this is a good compromise that will
    allow you to install built software without asking your system administrator for
    extra rights.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使得 `configure` 生成构建脚本，使可执行的二进制文件被安装到你的 `$HOME`*/bin* 目录中。^([4](footnote.xhtml#ch01fn4))
    如果你没有系统管理员权限，这是一个不错的折中方案，允许你安装已构建的软件而不需要向系统管理员申请额外权限。
- en: Another reason for choosing a different `--prefix` location is to allow yourself
    to install the software into an isolated location. You can then examine the location
    after installation to see exactly what got installed and where it went, relative
    to `--prefix`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 选择不同的 `--prefix` 安装位置的另一个原因是为了让你将软件安装到一个隔离的位置。然后，你可以在安装后检查该位置，查看安装了哪些内容以及相对于
    `--prefix`，它们被安装到了哪里。
- en: 'Let’s first install into a private installation location so we can see what
    the Autoconf project installs onto our system:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先安装到一个私人安装位置，这样我们就可以看到 Autoconf 项目安装到了我们的系统上：
- en: '![Image](../images/pg010-01.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/pg010-01.jpg)'
- en: '**NOTE**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*As with the earlier build process, the number of files and directories on
    your system may differ slightly from mine, based on the difference in tool availability
    between our systems. If you have additional documentation tools installed, for
    example, you may see more directories than I do, as Autoconf will build more documentation
    if the tools are available.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*和早期的构建过程一样，系统上的文件和目录数量可能会因我们的工具可用性差异而略有不同。如果你安装了额外的文档工具，例如，你可能会看到比我更多的目录，因为如果工具可用，Autoconf
    会构建更多的文档。*'
- en: Note that I specified the installation location on `configure`’s command line
    using a full path—the `PWD` environment variable contains the absolute path of
    the current directory in the shell. It’s important to always use a full path in
    `--prefix`. In many cases, using a relative path will cause installation failures
    because the `--prefix` argument is referenced from different directories during
    the installation process.^([5](footnote.xhtml#ch01fn5))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在`configure`的命令行上指定了安装位置，并使用了完整路径——`PWD`环境变量包含当前目录在shell中的绝对路径。在`--prefix`中始终使用完整路径是很重要的。在很多情况下，使用相对路径会导致安装失败，因为在安装过程中`--prefix`参数会从不同的目录引用。^([5](footnote.xhtml#ch01fn5))
- en: I used the `tree` command on the *private-install* directory in order to get
    a visual picture of what Autoconf installs.^([6](footnote.xhtml#ch01fn6)) There
    were 61 files installed into 11 directories within *private-install*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我在*private-install*目录上使用了`tree`命令，以便获得Autoconf安装内容的可视化图像。^([6](footnote.xhtml#ch01fn6))
    共安装了61个文件，分布在*private-install*中的11个目录里。
- en: 'Now, let’s install Autoconf into the default location in */usr/local/bin*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将Autoconf安装到默认位置*/usr/local/bin*：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It’s important to note the use of `sudo` on this command line to run `make install`
    with root privileges. When you install software outside of your home directory,
    you’ll need higher privileges. If you set the `--prefix` directory to somewhere
    within your home directory, then you can omit the use of `sudo` in the command.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，在此命令行中使用了`sudo`，以便以root权限运行`make install`。当你在主目录之外安装软件时，你需要更高的权限。如果你将`--prefix`目录设置为主目录内的某个位置，那么你可以省略在命令中使用`sudo`。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point, you should understand what a source archive is and how to download,
    unpack, build, test, and install it. I hope I’ve also given you the impetus to
    dig further and discover more about open source build systems. Those generated
    by the Autotools follow common patterns so pedantically that they’re reasonably
    predictable. For hints on the sorts of things you can do, try running `./configure
    --help`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该已经理解了什么是源代码归档，并且知道如何下载、解压、构建、测试和安装它。我也希望我能激发你进一步探索并了解更多关于开源构建系统的知识。由Autotools生成的系统严格遵循常见的模式，因此它们是相当可预测的。关于你可以做的事情的提示，试着运行`./configure
    --help`。
- en: There are other build systems out there. Most of them follow a reasonable set
    of patterns, but once in a while you’ll run into one that’s significantly different
    from all the rest. All open source build systems tend to follow some very fundamental,
    high-level concepts—the idea of a configuration process, followed by a build step,
    is one such principle. However, the nature of the configuration process as well
    as the command used to build the software might not align very closely with what
    we’ve discussed here. One of the benefits of the Autotools is the consistent nature
    of the build systems they generate.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他构建系统。它们大多数遵循一套合理的模式，但偶尔你会遇到一个与其他所有系统明显不同的系统。所有开源构建系统都倾向于遵循一些非常基本的高层次概念——例如，先进行配置过程，然后是构建步骤，这是其中之一。然而，配置过程的性质以及用来构建软件的命令，可能与我们在这里讨论的有所不同。Autotools的一个好处是它们生成的构建系统具有一致性。
- en: If you want to understand how all this magic works, keep reading.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解所有这些魔法是如何运作的，请继续阅读。
