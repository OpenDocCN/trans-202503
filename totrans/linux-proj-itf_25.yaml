- en: Chapter 25. Process Termination
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第25章。进程终止
- en: This chapter describes what happens when a process terminates. We begin by describing
    the use of *exit()* and *_exit()* to terminate a process. We then discuss the
    use of exit handlers to automatically perform cleanups when a process calls *exit()*.
    We conclude by considering some interactions between *fork()*, *stdio* buffers,
    and *exit()*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了进程终止时发生的情况。我们首先介绍如何使用*exit()*和*_exit()*来终止进程。然后，我们讨论如何使用退出处理程序在进程调用*exit()*时自动执行清理操作。最后，我们考虑*fork()*、*stdio*缓冲区和*exit()*之间的一些交互。
- en: 'Terminating a Process: *_exit()* and *exit()*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 终止进程：*_exit()*和*exit()*
- en: A process may terminate in two general ways. One of these is *abnormal* termination,
    caused by the delivery of a signal whose default action is to terminate the process
    (with or without a core dump), as described in Section 20.1\. Alternatively, a
    process can terminate *normally*, using the *_exit()* system call.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 进程可以通过两种方式终止。其中一种是*非正常*终止，由默认动作为终止进程的信号传递引起（有或没有核心转储），如第20.1节所述。另一种方式是通过使用*_exit()*系统调用*正常*终止进程。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The *status* argument given to *_exit()* defines the *termination status* of
    the process, which is available to the parent of this process when it calls *wait()*.
    Although defined as an *int*, only the bottom 8 bits of *status* are actually
    made available to the parent. By convention, a termination status of 0 indicates
    that a process completed successfully, and a nonzero status value indicates that
    the process terminated unsuccessfully. There are no fixed rules about how nonzero
    status values are to be interpreted; different applications follow their own conventions,
    which should be described in their documentation. SUSv3 specifies two constants,
    `EXIT_SUCCESS` (0) and `EXIT_FAILURE` (1), that are used in most programs in this
    book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给*_exit()*的*status*参数定义了进程的*终止状态*，该状态在父进程调用*wait()*时可用。虽然定义为*int*类型，但实际上只有*status*的最低8位会传递给父进程。根据约定，终止状态为0表示进程成功完成，而非零状态值表示进程未能成功终止。关于如何解释非零状态值没有固定规则；不同的应用程序遵循各自的约定，这些约定应在它们的文档中进行说明。SUSv3规范了两个常量，`EXIT_SUCCESS`（0）和`EXIT_FAILURE`（1），它们在本书中的大多数程序中被使用。
- en: A process is always successfully terminated by *_exit()* (i.e., *_exit()* never
    returns).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 进程总是通过*_exit()*成功终止（即，*_exit()*永不返回）。
- en: Note
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Although any value in the range 0 to 255 can be passed to the parent via the
    *status* argument to *_exit()*, specifying values greater than 128 can cause confusion
    in shell scripts. The reason is that, when a command is terminated by a signal,
    the shell indicates this fact by setting the value of the variable *$?* to 128
    plus the signal number, and this value is indistinguishable from that yielded
    when a process calls *_exit()* with the same *status* value.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以通过*status*参数将0到255范围内的任何值传递给父进程，但指定大于128的值可能会在 shell 脚本中引起混淆。原因是，当命令通过信号终止时，shell
    会通过将变量*$?*的值设置为128加上信号编号来表示这一事实，而这个值与进程调用*_exit()*时传递相同*status*值的结果无法区分。
- en: Programs generally don’t call *_exit()* directly, but instead call the *exit()*
    library function, which performs various actions before calling *_exit()*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 程序通常不会直接调用*_exit()*，而是调用*exit()*库函数，该函数在调用*_exit()*之前执行各种操作。
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following actions are performed by *exit()*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*exit()*执行以下操作：'
- en: Exit handlers (functions registered with *atexit()* and *on_exit()*) are called,
    in reverse order of their registration ([Exit Handlers](ch25.html#exit_handlers
    "Exit Handlers")).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退出处理程序（通过*atexit()*和*on_exit()*注册的函数）按其注册的逆序被调用（[退出处理程序](ch25.html#exit_handlers
    "Exit Handlers")）。
- en: The *stdio* stream buffers are flushed.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*stdio*流缓冲区被刷新。'
- en: The *_exit()* system call is invoked, using the value supplied in *status*.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用*_exit()*系统调用时，使用在*status*中提供的值。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Unlike *_exit()*, which is UNIX-specific, *exit()* is defined as part of the
    standard C library; that is, it is available with every C implementation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与特定于 UNIX 的*_exit()*不同，*exit()*作为标准 C 库的一部分被定义；也就是说，每个 C 实现都可以使用它。
- en: One other way in which a process may terminate is to return from *main()*, either
    explicitly, or implicitly, by falling off the end of the *main()* function. Performing
    an explicit *return n* is generally equivalent to calling *exit(n)*, since the
    run-time function that invokes *main()* uses the return value from *main()* in
    a call to *exit()*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种进程终止的方式是从 *main()* 返回，或者通过隐式的方式（即在 *main()* 函数的末尾退出）。显式执行 *return n* 通常等同于调用
    *exit(n)*，因为调用 *main()* 的运行时函数会使用 *main()* 的返回值来调用 *exit()*。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is one circumstance in which calling *exit()* and returning from *main()*
    are not equivalent. If any steps performed during exit processing access variables
    local to *main()*, then doing a `return` from *main()* results in undefined behavior.
    For example, this could occur if a variable that is local to *main()* is specified
    in a call to *setvbuf()* or *setbuf()* ([Buffering in the *stdio* Library](ch13.html#buffering_in_the_stdio_library
    "Buffering in the stdio Library")).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种情况下，调用 *exit()* 和从 *main()* 返回并不等同。如果退出处理过程中访问了 *main()* 中的局部变量，那么从 *main()*
    返回会导致未定义行为。例如，如果在调用 *setvbuf()* 或 *setbuf()*（[stdio 库中的缓冲区](ch13.html#buffering_in_the_stdio_library
    "stdio 库中的缓冲区")）时指定了 *main()* 中的局部变量，就可能会发生这种情况。
- en: 'Performing a return without specifying a value, or falling off the end of the
    *main()* function, also results in the caller of *main()* invoking *exit()*, but
    with results that vary depending on the version of the C standard supported and
    the compilation options employed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行返回时没有指定返回值，或者在 *main()* 函数的末尾退出，也会导致 *main()* 的调用者调用 *exit()*，但结果会根据所支持的
    C 标准版本和使用的编译选项有所不同：
- en: In C89, the behavior in these circumstances is undefined; the program can terminate
    with an arbitrary *status* value. This is the behavior that occurs by default
    with *gcc* on Linux, where the exit status of the program is taken from some random
    value lying on the stack or in a particular CPU register. Terminating a program
    in this way should be avoided.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 C89 标准中，这种情况下的行为是未定义的；程序可能会以任意的 *status* 值终止。这就是在 Linux 上使用 *gcc* 编译时的默认行为，程序的退出状态会取自栈上的某个随机值或某个特定的
    CPU 寄存器。应避免以这种方式终止程序。
- en: The C99 standard requires that falling off the end of the main program should
    be equivalent to calling *exit(0)*. This is the behavior we obtain on Linux if
    we compile a program using *gcc -std=c99*.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C99 标准要求，在程序主函数的末尾退出应当等同于调用 *exit(0)*。这是我们在 Linux 上使用 *gcc -std=c99* 编译程序时获得的行为。
- en: Details of Process Termination
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进程终止的详细信息
- en: 'During both normal and abnormal termination of a process, the following actions
    occur:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在进程的正常和异常终止过程中，都会发生以下操作：
- en: 'Open file descriptors, directory streams ([Reading Directories: *opendir()*
    and *readdir()*](ch18.html#reading_directories_colon_opendir_open_p "Reading Directories:
    opendir() and readdir()")), message catalog descriptors (see the *catopen(3)*
    and *catgets(3)* manual pages), and conversion descriptors (see the *iconv_open(3)*
    manual page) are closed.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开的文件描述符、目录流（[读取目录：*opendir()* 和 *readdir()*](ch18.html#reading_directories_colon_opendir_open_p
    "读取目录：opendir() 和 readdir()")）、消息目录描述符（参见 *catopen(3)* 和 *catgets(3)* 手册页）以及转换描述符（参见
    *iconv_open(3)* 手册页）都会被关闭。
- en: As a consequence of closing file descriptors, any file locks ([Chapter 55](ch55.html
    "Chapter 55. File Locking")) held by this process are released.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于关闭文件描述符，任何由该进程持有的文件锁（[第 55 章](ch55.html "第 55 章：文件锁定")）都会被释放。
- en: Any attached System V shared memory segments are detached, and the *shm_nattch*
    counter corresponding to each segment is decremented by one. (Refer to Section
    48.8.)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有附加的 System V 共享内存段都会被分离，且每个内存段对应的 *shm_nattch* 计数器会减一。（参见第 48.8 节。）
- en: For each System V semaphore for which a *semadj* value has been set by the process,
    that *semadj* value is added to the semaphore value. (Refer to Section 47.8.)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个由进程设置了 *semadj* 值的 System V 信号量，该 *semadj* 值会被加到信号量值上。（参见第 47.8 节。）
- en: If this is the controlling process for a controlling terminal, then the `SIGHUP`
    signal is sent to each process in the controlling terminal’s foreground process
    group, and the terminal is disassociated from the session. We consider this point
    further in Section 34.6.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是控制终端的控制进程，那么会向控制终端的前台进程组中的每个进程发送 `SIGHUP` 信号，且终端会与会话解除关联。我们将在第 34.6 节进一步讨论这一点。
- en: Any POSIX named semaphores that are open in the calling process are closed as
    though *sem_close()* were called.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何在调用进程中打开的 POSIX 命名信号量都会被关闭，就像调用了 *sem_close()* 一样。
- en: Any POSIX message queues that are open in the calling process are closed as
    though *mq_close()* were called.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用进程中打开的任何 POSIX 消息队列都会被关闭，仿佛调用了*mq_close()*。
- en: If, as a consequence of this process exiting, a process group becomes orphaned
    and there are any stopped processes in that group, then all processes in the group
    are sent a `SIGHUP` signal followed by a `SIGCONT` signal. We consider this point
    further in [Orphaned Process Groups (and `SIGHUP` Revisited)](ch34.html#orphaned_process_groups_open_parenthesis
    "Orphaned Process Groups (and SIGHUP Revisited)").
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由于该进程退出而导致进程组变为孤儿，并且该组中有任何停止的进程，则该组中的所有进程将收到`SIGHUP`信号，随后是`SIGCONT`信号。我们将在[孤儿进程组（以及`SIGHUP`回顾）](ch34.html#orphaned_process_groups_open_parenthesis
    "孤儿进程组（以及SIGHUP回顾）")中进一步讨论这一点。
- en: 'Any memory locks established by this process using *mlock()* or *mlockall()*
    ([Memory Locking: *mlock()* and *mlockall()*](ch50.html#memory_locking_colon_mlock_open_parenthe
    "Memory Locking: mlock() and mlockall()")) are removed.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该进程使用*mlock()*或*mlockall()*（[内存锁定：*mlock()*和*mlockall()*](ch50.html#memory_locking_colon_mlock_open_parenthe
    "内存锁定：mlock()和mlockall()")）建立的任何内存锁会被移除。
- en: Any memory mappings established by this process using *mmap()* are unmapped.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该进程使用*mmap()*建立的任何内存映射都将被解除映射。
- en: Exit Handlers
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 退出处理程序
- en: Sometimes, an application needs to automatically perform some operations on
    process termination. Consider the example of an application library that, if used
    during the life of the process, needs to have some cleanup actions performed automatically
    when the process exits. Since the library doesn’t have control of when and how
    the process exits, and can’t mandate that the main program call a library-specific
    cleanup function before exiting, cleanup is not guaranteed to occur. One approach
    in such situations is to use an *exit handler* (older System V manuals used the
    term *program termination routine*).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，一个应用程序需要在进程终止时自动执行一些操作。考虑一个应用程序库的例子，如果在进程生命周期内使用该库，则需要在进程退出时自动执行一些清理操作。由于该库无法控制进程退出的时机和方式，也无法强制主程序在退出前调用库特定的清理函数，因此无法保证清理操作会执行。在这种情况下，一种方法是使用*退出处理程序*（旧版
    System V 手册中使用术语*程序终止例程*）。
- en: An exit handler is a programmer-supplied function that is registered at some
    point during the life of the process and is then automatically called during *normal*
    process termination via *exit()*. Exit handlers are not called if a program calls
    *_exit()* directly or if the process is terminated abnormally by a signal.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 退出处理程序是一个由程序员提供的函数，它在进程生命周期的某个时刻注册，并在*正常*进程终止时通过*exit()*自动调用。如果程序直接调用*_exit()*，或进程被信号异常终止，则不会调用退出处理程序。
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To some extent, the fact that exit handlers are not called when a process is
    terminated by a signal limits their utility. The best we can do is to establish
    handlers for the signals that might be sent to the process, and have these handlers
    set a flag that causes the main program to call *exit()*. (Because *exit()* is
    not one of the async-signal-safe functions listed in [Table 21-1](ch21.html#functions_required_to_be_async-signal-sa
    "Table 21-1. Functions required to be async-signal-safe by POSIX.1-1990, SUSv2,
    and SUSv3"), in [Use of *errno* inside signal handlers](ch21.html#use_of_errno_inside_signal_handlers
    "Use of errno inside signal handlers"), we generally can’t call it from a signal
    handler.) Even then, this doesn’t handle the case of `SIGKILL`, whose default
    action can’t be changed. This is one more reason we should avoid using `SIGKILL`
    to terminate a process (as noted in [Signal Types and Default Actions](ch20.html#signal_types_and_default_actions
    "Signal Types and Default Actions")), and instead use `SIGTERM`, which is the
    default signal sent by the *kill* command.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在一定程度上，退出处理程序在进程因信号终止时未被调用，限制了其效用。我们能做的最好方法是为可能发送到进程的信号建立处理程序，并让这些处理程序设置一个标志，促使主程序调用*exit()*。（因为*exit()*不是在[表21-1](ch21.html#functions_required_to_be_async-signal-sa
    "表21-1。POSIX.1-1990、SUSv2 和 SUSv3 要求的异步信号安全函数")中列出的异步信号安全函数之一，在[信号处理程序中的*errno*使用](ch21.html#use_of_errno_inside_signal_handlers
    "信号处理程序中的errno使用")中提到，我们通常不能从信号处理程序中调用它。）即便如此，这也不能处理`SIGKILL`的情况，因为`SIGKILL`的默认操作无法更改。这是我们应该避免使用`SIGKILL`来终止进程的另一个原因（如在[信号类型和默认操作](ch20.html#signal_types_and_default_actions
    "信号类型和默认操作")中所述），而应该使用`SIGTERM`，它是*kill*命令发送的默认信号。
- en: Registering exit handlers
  id: totrans-40
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注册退出处理程序
- en: The GNU C library provides two ways of registering exit handlers. The first
    method, specified in SUSv3, is to use the *atexit()* function.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: GNU C 库提供了两种注册退出处理程序的方法。第一种方法是在 SUSv3 中指定的，使用 *atexit()* 函数。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns 0 on success, or nonzero on error
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回 0，出错时返回非零值
- en: 'The *atexit()* function adds *func* to a list of functions that are called
    when the process terminates. The function *func* should be defined to take no
    arguments and return no value, thus having the following general form:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*atexit()* 函数将 *func* 添加到一个在进程终止时调用的函数列表中。函数 *func* 应该定义为不带参数且不返回值，因此具有以下通用形式：'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that *atexit()* returns a nonzero value (not necessarily -1) on error.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，*atexit()* 在发生错误时返回一个非零值（不一定是 -1）。
- en: It is possible to register multiple exit handlers (and even the same exit handler
    multiple times). When the program invokes *exit()*, these functions are called
    *in reverse order* of registration. This ordering is logical because, typically,
    functions that are registered earlier are those that carry out more fundamental
    types of cleanups that may need to be performed after later-registered functions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以注册多个退出处理程序（甚至是同一个退出处理程序多次）。当程序调用 *exit()* 时，这些函数会按注册的 *逆序* 被调用。这种顺序是合理的，因为通常，较早注册的函数是执行更基础清理操作的函数，这些操作可能需要在后注册的函数执行后进行。
- en: Essentially, any desired action can be performed inside an exit handler, including
    registering additional exit handlers, which are placed at the head of the list
    of exit handlers that remain to be called. However, if one of the exit handlers
    fails to return—either because it called *_exit()* or because the process was
    terminated by a signal (e.g., the exit handler called *raise()*)—then the remaining
    exit handlers are not called. In addition, the remaining actions that would normally
    be performed by *exit()* (i.e., flushing *stdio* buffers) are not performed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，任何想要的操作都可以在退出处理程序中执行，包括注册额外的退出处理程序，这些处理程序会被放置在待调用的退出处理程序列表的头部。然而，如果某个退出处理程序未能返回——无论是因为它调用了
    *_exit()*，还是因为进程被信号终止（例如，退出处理程序调用了 *raise()*）——则剩余的退出处理程序不会被调用。此外，通常由 *exit()*
    执行的剩余操作（例如，刷新 *stdio* 缓冲区）也不会被执行。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: SUSv3 states that if an exit handler itself calls *exit()*, the results are
    undefined. On Linux, the remaining exit handlers are invoked as normal. However,
    on some systems, this causes all of the exit handlers to once more be invoked,
    which can result in an infinite recursion (until a stack overflow kills the process).
    Portable applications should avoid calling *exit()* inside an exit handler.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 声明，如果一个退出处理程序本身调用 *exit()*，结果是未定义的。在 Linux 上，剩余的退出处理程序会正常调用。然而，在某些系统上，这会导致所有退出处理程序再次被调用，这可能导致无限递归（直到栈溢出导致进程终止）。可移植的应用程序应该避免在退出处理程序中调用
    *exit()*。
- en: SUSv3 requires that an implementation allow a process to be able to register
    at least 32 exit handlers. Using the call *sysconf(_SC_ATEXIT_MAX)*, a program
    can determine the implementation-defined upper limit on the number of exit handlers
    that can be registered. (However, there is no way to find out how many exit handlers
    have already been registered.) By chaining the registered exit handlers in a dynamically
    allocated linked list, *glibc* allows a virtually unlimited number of exit handlers
    to be registered. On Linux, *sysconf(_SC_ATEXIT_MAX)* returns 2,147,482,647 (i.e.,
    the maximum signed 32-bit integer). In other words, something else will break
    (e.g., lack of memory) before we reach the limit on the number of functions that
    can be registered.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: SUSv3 要求实现必须允许进程至少注册 32 个退出处理程序。通过调用 *sysconf(_SC_ATEXIT_MAX)*，程序可以确定实现定义的最大可注册退出处理程序数量。（然而，没有办法知道已经注册了多少个退出处理程序。）通过将注册的退出处理程序链接在一个动态分配的链表中，*glibc*
    允许几乎无限数量的退出处理程序注册。在 Linux 上，*sysconf(_SC_ATEXIT_MAX)* 返回 2,147,482,647（即最大有符号
    32 位整数）。换句话说，在我们达到可注册函数数量的限制之前，其他问题（例如内存不足）会导致程序出错。
- en: A child process created via *fork()* inherits a copy of its parent’s exit handler
    registrations. When a process performs an *exec()*, all exit handler registrations
    are removed. (This is necessarily so, since an *exec()* replaces the code of the
    exit handlers along with the rest of the existing program code.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 *fork()* 创建的子进程会继承父进程的退出处理程序注册副本。当一个进程执行 *exec()* 时，所有退出处理程序的注册都会被移除。（这是必然的，因为
    *exec()* 会替换退出处理程序的代码以及其余的程序代码。）
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can’t deregister an exit handler that has been registered with *atexit()*
    (or *on_exit()*, described below). However, we can have the exit handler check
    whether a global flag is set before it performs its actions, and disable the exit
    handler by clearing the flag.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法注销已经通过*atexit()*（或下面描述的*on_exit()*）注册的退出处理程序。然而，我们可以让退出处理程序在执行操作之前检查某个全局标志是否已设置，并通过清除该标志来禁用退出处理程序。
- en: Exit handlers registered with *atexit()* suffer a couple of limitations. The
    first is that when called, an exit handler doesn’t know what status was passed
    to *exit()*. Occasionally, knowing the status could be useful; for example, we
    may like to perform different actions depending on whether the process is exiting
    successfully or unsuccessfully. The second limitation is that we can’t specify
    an argument to the exit handler when it is called. Such a facility could be useful
    to define an exit handler that performs different actions depending on its argument,
    or to register a function multiple times, each time with a different argument.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*atexit()*注册的退出处理程序存在一些限制。第一个限制是，当被调用时，退出处理程序无法知道传递给*exit()*的状态。有时，了解状态可能会有用；例如，我们可能希望根据进程是成功退出还是失败退出来执行不同的操作。第二个限制是，当调用退出处理程序时，我们无法为其指定参数。这样的功能对于定义一个根据其参数执行不同操作的退出处理程序，或者多次注册一个函数，每次使用不同的参数，可能会非常有用。
- en: 'To address these limitations, *glibc* provides a (nonstandard) alternative
    method of registering exit handlers: *on_exit()*.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些限制，*glibc*提供了一种（非标准的）替代方法来注册退出处理程序：*on_exit()*。
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Returns 0 on success, or nonzero on error
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 成功时返回0，出错时返回非零值
- en: 'The *func* argument of *on_exit()* is a pointer to a function of the following
    type:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*on_exit()*的*func*参数是指向以下类型函数的指针：'
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When called, *func()* is passed two arguments: the *status* argument supplied
    to *exit()*, and a copy of the *arg* argument supplied to *on_exit()* at the time
    the function was registered. Although defined as a pointer type, *arg* is open
    to programmer-defined interpretation. It could be used as a pointer to some structure;
    equally, through judicious use of casting, it could be treated as an integer or
    other scalar type.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当被调用时，*func()*会传递两个参数：传递给*exit()*的*status*参数，以及在注册时传递给*on_exit()*的*arg*参数的副本。尽管被定义为指针类型，*arg*对程序员来说可以有多种解释。它可以用作指向某个结构体的指针；同样，通过适当的类型转换，它也可以被当作整数或其他标量类型处理。
- en: Like *atexit()*, *on_exit()* returns a nonzero value (not necessarily -1) on
    error.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与*atexit()*一样，*on_exit()*在出错时返回一个非零值（不一定是-1）。
- en: As with *atexit()*, multiple exit handlers can be registered with *on_exit()*.
    Functions registered using *atexit()* and *on_exit()* are placed on the same list.
    If both methods are used in the same program, then the exit handlers are called
    in reverse order of their registration using the two methods.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与*atexit()*一样，可以使用*on_exit()*注册多个退出处理程序。通过*atexit()*和*on_exit()*注册的函数被放置在同一个列表中。如果在同一个程序中同时使用这两种方法，那么退出处理程序会按照注册顺序的逆序调用。
- en: Although more flexible than *atexit()*, *on_exit()* should be avoided in programs
    intended to be portable, since it is not covered by any standards and is available
    on few other UNIX implementations.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管比*atexit()*更灵活，*on_exit()*应该避免在旨在具有可移植性的程序中使用，因为它不受任何标准的约束，并且仅在少数其他UNIX实现中可用。
- en: Example program
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例程序
- en: '[Example 25-1](ch25.html#using_exit_handlers "Example 25-1. Using exit handlers")
    demonstrates the use of *atexit()* and *on_exit()* to register exit handlers.
    When we run this program, we see the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 25-1](ch25.html#using_exit_handlers "示例 25-1. 使用退出处理程序")演示了如何使用*atexit()*和*on_exit()*注册退出处理程序。当我们运行这个程序时，我们会看到如下输出：'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Example 25-1. Using exit handlers
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 25-1. 使用退出处理程序
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Interactions Between *fork()*, *stdio* Buffers, and *_exit()*
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*fork()*、*stdio*缓冲区和*_exit()*之间的交互'
- en: 'The output yielded by the program in [Example 25-2](ch25.html#interaction_of_fork_open_parenthesis_clo
    "Example 25-2. Interaction of fork() and stdio buffering") demonstrates a phenomenon
    that is at first puzzling. When we run this program with standard output directed
    to the terminal, we see the expected result:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 25-2](ch25.html#interaction_of_fork_open_parenthesis_clo "示例 25-2. fork()和stdio缓冲区的交互")中程序输出展示了一种初看令人困惑的现象。当我们将标准输出定向到终端时，看到预期的结果：'
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, when we redirect standard output to a file, we see the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们将标准输出重定向到文件时，看到如下结果：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the above output, we see two strange things: the line written by *printf()*
    appears twice, and the output of *write()* precedes that of *printf()*.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述输出中，我们看到两个奇怪的现象：由*printf()*写入的行出现了两次，*write()*的输出出现在*printf()*之前。
- en: Example 25-2. Interaction of *fork()* and *stdio* buffering
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 25-2. *fork()*和*stdio*缓冲的交互
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To understand why the message written with *printf()* appears twice, recall
    that the *stdio* buffers are maintained in a process’s user-space memory (refer
    to [Buffering in the *stdio* Library](ch13.html#buffering_in_the_stdio_library
    "Buffering in the stdio Library")). Therefore, these buffers are duplicated in
    the child by *fork()*. When standard output is directed to a terminal, it is line-buffered
    by default, with the result that the newline-terminated string written by *printf()*
    appears immediately. However, when standard output is directed to a file, it is
    block-buffered by default. Thus, in our example, the string written by *printf()*
    is still in the parent’s *stdio* buffer at the time of the *fork()*, and this
    string is duplicated in the child. When the parent and the child later call *exit()*,
    they both flush their copies of the *stdio* buffers, resulting in duplicate output.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么使用*printf()*写入的消息会出现两次，回想一下*stdio*缓冲区是保存在进程的用户空间内存中的（请参见[stdio库中的缓冲](ch13.html#buffering_in_the_stdio_library
    "stdio库中的缓冲")）。因此，这些缓冲区会在*fork()*时被复制到子进程中。当标准输出定向到终端时，默认是行缓冲，因此由*printf()*写入的以换行符结束的字符串会立即显示。然而，当标准输出定向到文件时，默认是块缓冲。因此，在我们的示例中，*printf()*写入的字符串在*fork()*时仍然存在于父进程的*stdio*缓冲区中，这个字符串会在子进程中被复制。当父进程和子进程稍后调用*exit()*时，它们都会刷新自己的*stdio*缓冲区，导致重复输出。
- en: 'We can prevent this duplicated output from occurring in one of the following
    ways:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下几种方式来防止这种重复输出的发生：
- en: As a specific solution to the *stdio* buffering issue, we can use *fflush()*
    to flush the *stdio* buffer prior to a *fork()* call. Alternatively, we could
    use *setvbuf()* or *setbuf()* to disable buffering on the *stdio* stream.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为解决*stdio*缓冲问题的具体方法，我们可以使用*fflush()*在调用*fork()*之前刷新*stdio*缓冲区。或者，我们可以使用*setvbuf()*或*setbuf()*来禁用*stdio*流的缓冲。
- en: 'Instead of calling *exit()*, the child can call *_exit()*, so that it doesn’t
    flush *stdio* buffers. This technique exemplifies a more general principle: in
    an application that creates child processes that don’t exec new programs, typically
    only one of the processes (most often the parent) should terminate via *exit()*,
    while the other processes should terminate via *_exit()*. This ensures that only
    one process calls exit handlers and flushes *stdio* buffers, which is usually
    desirable.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子进程可以调用*_exit()*代替调用*exit()*，这样它就不会刷新*stdio*缓冲区。这个技巧体现了一个更一般的原则：在一个创建子进程且子进程不执行新程序的应用程序中，通常只有一个进程（通常是父进程）应该通过*exit()*终止，而其他进程应该通过*_exit()*终止。这可以确保只有一个进程调用退出处理程序并刷新*stdio*缓冲区，这通常是期望的行为。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Other approaches that allow both the parent and child to call *exit()* are possible
    (and sometimes necessary). For example, it may be possible to design exit handlers
    so that they operate correctly even if called from multiple processes, or to have
    the application install exit handlers only after the call to *fork()*. Furthermore,
    sometimes we may actually want all processes to flush their *stdio* buffers after
    a *fork()*. In this case, we may choose to terminate the processes using *exit()*,
    or use explicit calls to *fflush()* in each process, as appropriate.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其他允许父进程和子进程都调用*exit()*的方法也是可能的（有时也是必要的）。例如，可以设计退出处理程序，使其即使在多个进程中被调用时也能正确工作，或者在调用*fork()*之后才为应用程序安装退出处理程序。此外，有时我们可能确实希望所有进程在*fork()*之后刷新它们的*stdio*缓冲区。在这种情况下，我们可以选择使用*exit()*终止进程，或根据需要在每个进程中显式调用*fflush()*。
- en: The output of the *write()* in the program in [Example 25-2](ch25.html#interaction_of_fork_open_parenthesis_clo
    "Example 25-2. Interaction of fork() and stdio buffering") doesn’t appear twice,
    because *write()* transfers data directly to a kernel buffer, and this buffer
    is not duplicated during a *fork()*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 程序中[示例25-2](ch25.html#interaction_of_fork_open_parenthesis_clo "示例25-2. *fork()*和*stdio*缓冲的交互")中的*write()*输出没有出现两次，因为*write()*直接将数据传输到内核缓冲区，而该缓冲区在*fork()*时不会被复制。
- en: By now, the reason for the second strange aspect of the program’s output when
    redirected to a file should be clear. The output of *write()* appears before that
    from *printf()* because the output of *write()* is immediately transferred to
    the kernel buffer cache, while the output from *printf()* is transferred only
    when the *stdio* buffers are flushed by the call to *exit()*. (In general, care
    is required when mixing *stdio* functions and system calls to perform I/O on the
    same file, as described in Section 13.7.)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，程序输出被重定向到文件时的第二个奇怪现象的原因应该已经清楚了。*write()* 的输出先于 *printf()* 的输出出现，因为 *write()*
    的输出会立即传输到内核缓冲区，而 *printf()* 的输出只有在通过调用 *exit()* 刷新 *stdio* 缓冲区后才会传输。（通常，在同一个文件上混合使用
    *stdio* 函数和系统调用来执行 I/O 时需要小心，详见第 13.7 节。）
- en: Summary
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: A process can terminate either abnormally or normally. Abnormal termination
    occurs on delivery of certain signals, some of which also cause the process to
    produce a core dump file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一个进程可以以异常或正常方式终止。异常终止发生在接收到某些信号时，其中一些信号还会导致进程生成核心转储文件。
- en: Normal termination is accomplished by calling *_exit()* or, more usually, *exit()*,
    which is layered on top of *_exit()*. Both *_exit()* and *exit()* take an integer
    argument whose least significant 8 bits define the termination status of the process.
    By convention, a status of 0 is used to indicate successful termination, and a
    nonzero status indicates unsuccessful termination.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正常终止是通过调用 *_exit()* 或更常见的 *exit()* 完成的，后者是基于 *_exit()* 之上的。*exit()* 和 *_exit()*
    都接受一个整数参数，其最低有效的 8 位定义了进程的终止状态。按照惯例，状态 0 表示成功终止，非零状态表示终止失败。
- en: As part of both normal and abnormal process termination, the kernel performs
    various cleanup steps. Terminating a process normally by calling *exit()* additionally
    causes exit handlers registered using *atexit()* and *on_exit()* to be called
    (in reverse order of registration), and causes *stdio* buffers to be flushed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常和异常的进程终止过程中，内核会执行各种清理步骤。通过调用 *exit()* 正常终止进程时，还会调用使用 *atexit()* 和 *on_exit()*
    注册的退出处理程序（按照注册的反向顺序），并导致 *stdio* 缓冲区被刷新。
- en: Further information
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进一步信息
- en: Refer to the sources of further information listed in Section 24.6.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考第 24.6 节中列出的进一步信息来源。
- en: Exercise
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习
- en: If a child process makes the call exit(-1), what exit status (as returned by
    `WEXITSTATUS()`) will be seen by the parent?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个子进程调用 exit(-1)，父进程将看到什么退出状态（由 `WEXITSTATUS()` 返回）？
