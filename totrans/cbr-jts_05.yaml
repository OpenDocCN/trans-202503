- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Double-Sealed Password
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, a set of signs such as pinching the nose or holding the ear should
    be used with these passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Aikei identifying signs include techniques of tachisuguri isuguri—that is, standing
    and sitting while giving passwords.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Bansenshūkai, Yo-Nin II
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Both *Bansenshūkai* and the *Gunpo Jiyoshu* scrolls describe an open-disguise
    detection protocol supposedly devised by 14th-century samurai Kusunoki Masashige.^([1](b01.xhtml#endnote-39))
    *Tachisuguri isuguri* signal techniques use gestures, posture, or body positioning
    as a secret authentication factor, thus adding a layer of security to the password
    verification process. These techniques form what’s called a *double-sealing*^([2](b01.xhtml#endnote-40))
    password system, designed to catch disguised enemy shinobi, even if they could
    pass other authentication challenges with stolen passwords, identifying marks,
    and correct challenge response words.
  prefs: []
  type: TYPE_NORMAL
- en: In the most common example of tachisuguri isuguri, a person bearing the correct
    uniform and crest approaches a gate for entry. Not recognizing the stranger, the
    guard chooses to either sit or stand, then whispers a challenge word. If the visitor
    is an ally who has been briefed on the tachisuguri isuguri identification protocol,
    they perform the prearranged corresponding action in response—a non-obvious signal
    such as touching their nose or ear—and whisper the matching code word. The guard
    permits entry only if the stranger answers with both the correct code word and
    the correct physical movement. (There may be multiple ways to implement tachisuguri
    isuguri besides having the guard stand or sit, but unfortunately those methods
    are believed to be recorded in the *Teikairon* scroll, a lost supplemental section
    of *Bansenshūkai*.)^([3](b01.xhtml#endnote-41))
  prefs: []
  type: TYPE_NORMAL
- en: 'The simple brilliance of this technique is that the act of standing or sitting
    is usually not given a passing thought. Even a malicious observer trying to impersonate
    authorized personnel would likely fail to notice this second, silent challenge
    response. They may watch 100 people enter a gate using the same passphrase while
    the guard sits (because he recognizes them all), and thus they will not see how
    the interaction differs when the guard stands. Tachisuguri isuguri was successful
    enough that even other shinobi did not have adequate countermeasures to thwart
    it, though *Bansenshūkai* instructs shinobi to mirror what guards do and say at
    all checkpoints, even if the guards seem to be acting without conscious intent;^([4](b01.xhtml#endnote-42))
    if nothing else, this could confuse the guard into believing the shinobi is disorganized
    or simply stupid. The scrolls also provide this helpful advice to any shinobi
    who fails an unknown tachisuguri isuguri challenge: either think fast and talk
    fast—or run for your life.^([5](b01.xhtml#endnote-43))'
  prefs: []
  type: TYPE_NORMAL
- en: While the shinobi scrolls are not explicit in their definition of *double-sealing*
    and I have no evidence that the following hypothetical example actually occurred,
    I still feel it’s a plausible illustration of the concept. Seals, often impressed
    into wax, have been used since ancient times to secure the content of a letter
    or scroll. Ideally, each sender of communications had a unique metal stamp and
    so was the only person who could make a particular mark, thus verifying a document’s
    authenticity. In addition, if anyone other than the intended recipient were to
    open the letter or scroll, the seal would break, indicating that tampering had
    taken place.
  prefs: []
  type: TYPE_NORMAL
- en: However, spies learned that with special heating techniques, they could loosen
    the wax, remove the seal intact without harming the paper, read the missive’s
    contents, and then reseal the original document or affix the seal to a newly forged
    document that included misinformation. A counter to the technique of melting the
    paper side of the wax seal may have been to “double-seal” the wax. Imagine that
    instead of a single metal stamp, the author used a clamp or vice-like device with
    both a front and back stamp. The underside of the wax wafer would be given a hidden
    seal on the underside of the paper that could be inspected only by ripping the
    document open. Attempts at melting the seal off the paper might preserve the top
    seal but would destroy the second hidden seal, thus making the communication double-sealed.
  prefs: []
  type: TYPE_NORMAL
- en: You can see why double-sealing was adopted as an effective countermeasure against
    attempts to penetrate a single seal and how it helped detect the activity of enemy
    shinobi. In this chapter, I will note the difference between two-factor authentication
    and second-step authentication. I’ll also discuss how a modern second-step authenticator
    could be double-sealed to improve its effectiveness. I will then describe what
    I believe are the requirements and criteria for implementing double-sealed passwords,
    along with implementations that use existing authenticators and technology. My
    hope is that after performing the thought exercises and seeing my examples for
    implementations of double-sealed passwords, you will appreciate the genius of
    Kusunoki Masashige and try this highly intuitive idea out yourself.
  prefs: []
  type: TYPE_NORMAL
- en: A Concealed 2-Step Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Increasingly, more cyber authentication and identification protocols require
    a layer of security on top of a password. This is called *2-step authentication*:
    the second step requires a user to perform an additional authentication action,
    such as providing a secret code or clicking a button on an *out-of-band* *device*
    (that is, one not involved in the rest of the authentication process). Note the
    slight difference from last chapter’s two-*factor* authentication, which is used
    to prevent an adversary from accessing an account with stolen login credentials.'
  prefs: []
  type: TYPE_NORMAL
- en: While the secret code (second step) can be randomized through software applications,
    it is typically generated each time using the same procedure. Unfortunately, this
    procedural rigidity gives adversaries a number of opportunities to compromise
    2-step authentication methods. For example, a 2-step authentication code is typically
    sent in a cleartext, unsecured message that can be intercepted via phone cloning.
    In this case, a user who receives the code 12345 and enters that sequence at the
    passcode prompt also inadvertently provides the code to the adversary. The device
    used to authenticate—often a phone—can be stolen, hijacked via call forwarding,
    or cloned and used by the adversary to complete the authentication. Similarly,
    the out-of-band device established for delivering 2-step codes could be lost or
    stolen and used to bypass the authentication process, allowing the adversary to
    steal user-provided backup codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'A 2-step code that was double-sealed with a tachisuguri isuguri technique could
    mitigate some of the weaknesses inherent in authentication procedures. Each user
    should be able to establish a prearranged tachisuguri isuguri identifier that
    is unique and meaningful to them. For instance, suppose a user has been instructed,
    either orally or by another secure method, to transpose the digits in their 2-step
    code across the number 5 on the keypad—1 becomes 9, 2 becomes 8, and so on^([6](b01.xhtml#endnote-44))—but
    only when the code displays in red font rather than the normal green. This color
    change is the silent tachisuguri isuguri factor, triggered when the system finds
    the authentication request suspicious due to the odd hour, an unrecognized device
    or different IP address making the request, or other criteria. (To conceal it
    from adversaries who may be observing logins, this protocol should not be used
    too frequently.) Now, when the legitimate user receives the red code 12345, they
    know to respond 98765, while an adversary who has stolen the user’s credentials
    but is not aware of the concealed rule enters 12345\. This halts the authentication
    process, flags the account for investigation, and adds a 2-step authentication
    failure to the session. The 2-step authenticator then sends a hint—“Use authenticator
    protocol #5,” perhaps along with another red code, such as 64831 (to which the
    user should respond 46279). Another incorrect response triggers further alerts
    or account lockout.'
  prefs: []
  type: TYPE_NORMAL
- en: Developing Double-Sealed Passwords
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A double-sealed security solution that integrates with industry-standard authorization
    controls would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be used only when the user’s identity is suspect, such as when users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in from a new device, location, IP address, or time window
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Report that their mobile device has been stolen or compromised
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lose their backup token, code, or password and need to reset their password
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an out-of-band or side-channel communication method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a secret, rule-based knowledge factor. Each user should be able to customize
    the protocol to create a unique set of concealed rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leverage authentication factors that are easy to understand and remember, yet
    not obvious.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow rules to be stacked on top of each other in the case of wrong consecutive
    guesses or enough time passing between authentication attempts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the restriction, freezing, or locking out of an account that has failed
    authentication too many times. Most applications have a lockout after consecutive
    wrong passwords but not consecutive wrong 2-step authentication attempts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not be described in any help desk SOPs or other documentation. Employees should
    also refrain from talking openly about the double-sealed security layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Popularizing double-sealed security requires designers, engineers, and users
    to explore what is technically feasible and apply creative thinking. For example,
    consider the various input variations that can be used on existing mobile devices
    with a 2-step authentication app and require only that the user press Yes or No
    buttons to verify their identity. Following are some examples to demonstrate the
    range of possible responses when the user is given the tachisuguri isuguri signal
    in their 2-step authentication app:'
  prefs: []
  type: TYPE_NORMAL
- en: The user rotates their screen upside down before selecting Yes, and the app
    performs a silent inspection of the DeviceOrientation status to test whether it
    equals `portraitUpsideDown`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user manipulates the physical volume buttons on the mobile device to set
    the `OutputVolume` to 0.0 (silent) or 1.0 (max) before selecting Yes, and the
    app performs a silent get of the volume float value to test whether it matches
    the intended value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user waits to select Yes until they observe the mobile device clock roll
    over to the next minute, when they immediately select Yes. The app performs a
    silent timestamp request to compare the time of selection to HH:MM:0*X*, where
    *X* is less than 3 seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user uses excessive pressure when selecting Yes on the mobile device, and
    the app performs a silent get of the `UITouch.force` of the event to determine
    whether it was greater than a preset threshold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user performs multiple quick taps of the Yes button on the mobile device,
    and the app performs a silent get of the `tapCount` of the `UIEvent` to determine
    if it is less than 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user performs a gesture while selecting the Yes button on the mobile device,
    and the app performs a silent get of the `UIGestureRecognizer` to determine whether
    it was a `Pinch`, `LongPress`, `Swipe` (up, down, left, right), or `Rotation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Recommended Security Controls and Mitigations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where relevant, recommendations are presented with an applicable security control
    from the NIST 800-53 standard. Each should be evaluated in terms of 2-step (double-sealed)
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Utilize Out-of-Band Authentication (OOBA) through a separate communication
    path to verify that authentication requests originate from verified users. [IA-2:
    Identification and Authentication | (13) Out-Of-Band Authentication]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that staff do not disclose the existence of concealed rules for 2-step
    authentication. [IA-5: Authenticator Management | (6) Protection of Authenticators]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Establish multiple double-sealed rules so the tachisuguri isuguri is not static.
    [IA-5: Authenticator Management | (7) No Embedded Unencrypted Static Authenticators]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement out-of-band communication and establish double-sealed rules to maintain
    confidentiality. [SC-37: Out-Of-Band Channels]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Carefully design error messages for failed authentication attempts so they
    do not reveal double-sealed password information that an adversary could exploit.
    [SI-11: Error Handling]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debrief
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned about an anti-shinobi authentication technique
    called the double-sealed password or tachisuguri isuguri. We covered the distinction
    between factors and steps in the identity verification process. Then we undertook
    a brief analysis of the criteria for a good tachisuguri isuguri authenticator
    along with several examples.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will discuss a shinobi concept called the hours
    of infiltration. You’ll learn how certain hours of the day provide advantageous
    opportunities for infiltration. Understanding these time-based opportunities may
    help you choose when to implement or trigger tachisuguri isuguri authenticators
    in your organization, such as only during certain hours or on specific dates,
    to minimize the use of tachisuguri isuguri and safeguard its secrecy.
  prefs: []
  type: TYPE_NORMAL
