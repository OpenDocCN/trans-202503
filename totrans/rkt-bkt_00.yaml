- en: '## **INTRODUCTION**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We came up with the idea for this book when, having published a series of articles
    and blog posts about rootkits and bootkits, we realized the topic wasn’t getting
    nearly as much attention as it deserved. We felt there was a bigger picture, and
    we wanted a book that tried to
  prefs: []
  type: TYPE_NORMAL
- en: make sense of it all—one that generalized the medley of nifty tricks, operating
    system architectural observations, and design patterns used by attacker and defender
    innovations. We looked for such a book and found none, so we set out to write
    the one we wanted to read.
  prefs: []
  type: TYPE_NORMAL
- en: It took us four and a half years, longer than we planned and, regrettably, much
    longer than we could count on for the prospective readers and supporters of the
    early access editions to stay with us. If you are one of these early access supporters
    and are still reading this book, we’re humbled by your continued devotion!
  prefs: []
  type: TYPE_NORMAL
- en: During this time, we observed the coevolution of offense and defense. In particular,
    we saw Microsoft Windows defenses dead-ending several major branches of rootkit
    and bootkit designs. You’ll find that story in the pages of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw the emergence of new classes of malware that target the BIOS and
    the chipset firmware, beyond the reach of current Windows defensive software.
    We’ll explain how this coevolution developed and where we expect its next steps
    to take us.
  prefs: []
  type: TYPE_NORMAL
- en: Another theme of this book is the development of the reverse engineering techniques
    targeting the early stages of the OS boot process. Traditionally, the earlier
    in the long chain of the PC boot process a piece of code came into play, the less
    observable it was. This lack of observability has long been confused with security.
    Yet, as we dig into the forensics of bootkits and BIOS implants subverting low-level
    operating system technologies such as Secure Boot, we see that security by obscurity
    fares no better here than in other areas of computer science. After a short time
    (which is only getting shorter on the internet time scale), the security-by-obscurity
    approach comes to favor the attackers more than the defenders. This idea has not
    been sufficiently covered in other books on the subject, so we try to fill this
    gap.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why Read This Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We write for a very broad circle of information security researchers interested
    in how advanced persistent malware threats bypass OS-level security. We focus
    on how these advanced threats can be observed, reverse engineered, and effectively
    analyzed. Each part of the book reflects a new stage of the evolutionary development
    of advanced threats, from their emergence as narrow proofs of concept, to their
    subsequent spread among threat actors, and finally to their adoption into the
    sneakier arsenal of targeted attacks.
  prefs: []
  type: TYPE_NORMAL
- en: However, we aim to reach a wider audience than just PC malware analysts. In
    particular, we hope that embedded systems developers and cloud security specialists
    will find this book equally useful, considering that the threat of rootkits and
    other implants looms large in their respective ecosystems.
  prefs: []
  type: TYPE_NORMAL
- en: '**What’s in the Book?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We start with an exploration of rootkits in [Part 1](part01.xhtml#part01), where
    we introduce the internals of the Windows kernel that historically served as the
    rootkits’ playground. Then in [Part 2](part02.xhtml#part02), we shift focus toward
    the OS boot process and the bootkits that developed after Windows started hardening
    its kernel mode. We dissect the stages of the boot process from the attacker’s
    perspective, paying particular attention to the new UEFI firmware schemes and
    their vulnerabilities. Finally, in [Part 3](part03.xhtml#part03), we focus on
    the forensics of both the classic OS rootkit attacks and newer bootkit attacks
    on the BIOS and firmware.
  prefs: []
  type: TYPE_NORMAL
- en: '***[Part 1: Rootkits](part01.xhtml#part01)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This part focuses on the classic OS-level rootkits during their heyday. These
    historic rootkit examples provide valuable insights into how attackers see the
    operating system internals and find ways to reliably compose their implants into
    them, using the OS’s own structure.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1](ch01.xhtml#ch01): [What’s in a Rootkit: The TDL3 Case Study](ch01.xhtml#ch01)**
    We start exploring how rootkits work by telling the story of one of the most interesting
    rootkits of its time, based on our own encounters with its diverse variants and
    our analysis of these threats.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2](ch02.xhtml#ch02): [Festi Rootkit: The Most Advanced Spam and
    DDoS Bot](ch02.xhtml#ch02)** Here we analyze the remarkable Festi rootkit, which
    used the most advanced stealth techniques of its time to deliver spam and DDoS
    attacks. These techniques included bringing along its own custom kernel-level
    TCP/IP stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3](ch03.xhtml#ch03): [Observing Rootkit Infections](ch03.xhtml#ch03)**
    This chapter takes our journey into the depths of the operating system kernel,
    highlighting the tricks attackers used to fight for control of the kernel’s deeper
    layers, such as intercepting system events and calls.'
  prefs: []
  type: TYPE_NORMAL
- en: '***[Part 2: Bootkits](part02.xhtml#part02)***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The second part shifts focus to the evolution of bootkits, the conditions that
    spurred that evolution, and the techniques for reverse engineering these threats.
    We’ll see how bootkits developed to implant themselves into the BIOS and exploit
    UEFI firmware vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4](ch04.xhtml#ch04): [Evolution of the Bootkit](ch04.xhtml#ch04)**
    This chapter takes a deep dive into the (co)evolutionary forces that brought bootkits
    into being and guided their development. We’ll look at some of the first bootkits
    discovered, like the notorious Elk Cloner.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5](ch05.xhtml#ch05): [Operating System Boot Process Essentials](ch05.xhtml#ch05)**
    Here we cover the internals of the Windows boot process and how they’ve changed
    over time. We’ll dig into specifics like the Master Boot Record, partition tables,
    configuration data, and the *bootmgr* module.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6](ch06.xhtml#ch06): [Boot Process Security](ch06.xhtml#ch06)**
    This chapter takes you on a guided tour of Windows boot process defense technologies,
    such as Early Launch Anti-Malware (ELAM) modules, the Kernel-Mode Code Signing
    Policy and its vulnerabilities, and newer virtualization-based security.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7](ch07.xhtml#ch07): [Bootkit Infection Techniques](ch07.xhtml#ch07)**
    In this chapter, we dissect the methods of infecting boot sectors and look at
    how these methods had to evolve over time. We’ll use some familiar bootkits as
    examples: TDL4, Gapz, and Rovnix.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8](ch08.xhtml#ch08): [Static Analysis of a Bootkit Using IDA Pro](ch08.xhtml#ch08)**
    This chapter covers the methods and instruments for static analysis of bootkit
    infections. We’ll guide you through the analysis of the TDL4 bootkit as an example,
    and we’ll provide materials for you to use in your own analysis, including a disk
    image to download.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9](ch09.xhtml#ch09): [Bootkit Dynamic Analysis: Emulation and Virtualization](ch09.xhtml#ch09)**
    Here we shift focus to dynamic analysis methods, using the Bochs emulator and
    VMware’s built-in GDB debugger. Again, we’ll take you through the steps of dynamically
    analyzing the MBR and VBR bootkits.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10](ch10.xhtml#ch10): [An Evolution of MBR and VBR Infection Techniques:
    Olmasco](ch10.xhtml#ch10)** This chapter traces the evolution of the stealth techniques
    used to take bootkits into the lower levels of the boot process. We’ll use Olmasco
    as an example, looking at its infection and persistence techniques, the malware
    functionality, and payload injection.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 11](ch11.xhtml#ch11): [IPL Bootkits: Rovnix and Carberp](ch11.xhtml#ch11)**
    Here we take a look under the hood of two of the most complex bootkits, Rovnix
    and Carberp, which targeted electronic banking. These were the first bootkits
    to target the IPL and evade contemporary defense software. We’ll use VMware and
    IDA Pro to analyze them.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 12](ch12.xhtml#ch12): [Gapz: Advanced VBR Infection](ch12.xhtml#ch12)**
    We’ll demystify the pinnacle of the bootkit stealth evolution: the mysterious
    Gapz rootkit, which used the most advanced techniques of its time to target the
    VBR.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 13](ch13.xhtml#ch13): [Rise of MBR Ransomware](ch13.xhtml#ch13)**
    In this chapter, we look at how bootkits rebounded in ransomware threats.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 14](ch14.xhtml#ch14): [UEFI Boot vs. the MBR/VBR Boot Process](ch14.xhtml#ch14)**
    Here we explore the boot process of UEFI BIOS designs—essential information for
    discovering the newest malware evolutions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 15](ch15.xhtml#ch15): [Contemporary UEFI Bootkits](ch15.xhtml#ch15)**
    This chapter covers our original research into the various BIOS implants, both
    proofs of concept and those deployed in the wild. We’ll discuss methods for infecting
    and persisting on the UEFI BIOS and look at UEFI malware found in the wild, like
    Computrace.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 16](ch16.xhtml#ch16): [UEFI Firmware Vulnerabilities](ch16.xhtml#ch16)**
    Here we take an in-depth look at different classes of modern BIOS vulnerabilities
    that enable the introduction of BIOS implants. This is a deep exploration of UEFI
    vulnerabilities and exploits, including case studies.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### ***[Part 3: Defense and Forensic Techniques](part03.xhtml#part03)***'
  prefs: []
  type: TYPE_NORMAL
- en: The final part of the book addresses the forensics of bootkits, rootkits, and
    other BIOS threats.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 17](ch17.xhtml#ch17): [How UEFI Secure Boot Works](ch17.xhtml#ch17)**
    This chapter takes a deep dive into the workings of the Secure Boot technology
    and its evolution, vulnerabilities, and effectiveness.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 18](ch18.xhtml#ch18): [Approaches to Analyzing Hidden Filesystems](ch18.xhtml#ch18)**
    This chapter provides an overview of the hidden filesystems used by malware and
    methods of detecting them. We’ll parse a hidden filesystem image and introduce
    a tool we devised: the HiddenFsReader.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 19](ch19.xhtml#ch19): [BIOS/UEFI Forensics: Firmware Acquisition
    and Analysis Approaches](ch19.xhtml#ch19)** This final chapter discusses approaches
    to detecting the most advanced state-of-the-art threats. We look at hardware,
    firmware, and software approaches, using various open source tools, like UEFITool
    and Chipsec.'
  prefs: []
  type: TYPE_NORMAL
- en: '**How to Read This Book**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the specimens of threats discussed in the book, as well as other supporting
    materials, can be found at the book’s website, *[https://nostarch.com/rootkits/](https://nostarch.com/rootkits/)*.
    This site also points to the tools used in the bootkits’ analysis, such as the
    source code of the IDA Pro plug-ins that we used in our original research.
  prefs: []
  type: TYPE_NORMAL
