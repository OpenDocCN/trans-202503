- en: '**6**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PACKET ANALYSIS ON THE COMMAND LINE**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While many scenarios can be addressed using a GUI, in some cases, using command
    line tools—such as TShark or tcpdump—is necessary or preferable. Here are some
    situations in which a command line tool might be used instead of Wireshark:'
  prefs: []
  type: TYPE_NORMAL
- en: •     Wireshark provides a lot of information at once. By using a command line
    tool, you can limit displayed information to only pertinent data, such as a single
    line showing IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: •     Command line tools are best suited for filtering a packet capture file
    and providing the results directly to another tool using Unix pipes.
  prefs: []
  type: TYPE_NORMAL
- en: •     Dealing with a very large capture file can often overwhelm Wireshark because
    the entire file must be loaded into RAM. Stream processing of large capture files
    with command line tools can allow you to quickly filter the file down to the relevant
    packets.
  prefs: []
  type: TYPE_NORMAL
- en: •     If you are dealing with a server and don’t have access to a graphical
    tool, you may be forced to rely on command line tools.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, I’ll demonstrate the features of two common command line packet
    analysis tools, TShark and tcpdump. I think it’s helpful to be familiar with both,
    but I generally find myself using TShark on Windows systems and tcpdump on Unix
    systems. If you exclusively use Windows, you may want to skip the parts on tcpdump.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing TShark**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Terminal-based Wireshark, or TShark, is a packet analysis application that
    provides a lot of the same functionality as Wireshark but exclusively from a command
    line interface with no GUI. If you’ve installed Wireshark, then you likely have
    TShark as well unless you explicitly chose not to install it during Wireshark
    installation. You can verify that TShark is installed by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt. Click the **Start Menu**, enter cmd, and click **Command
    Prompt**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the directory where Wireshark is installed. If you installed it to
    the default location, you can go there by entering cd C:\Program Files\ Wireshark
    in the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run TShark and print its version information by entering tshark –v. If TShark
    isn’t installed, you’ll get an error saying the command is not recognized. If
    TShark is installed on your system, you’ll get an output with the TShark version
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you didn’t install TShark and would like to use it now, you can simply rerun
    the Wireshark installation and make sure TShark is selected. (It is by default.)
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to immediately start learning more about TShark’s capabilities,
    you can print the available commands with the `–h` argument. We’ll cover some
    of these commands in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Like Wireshark, TShark can run on multiple operating systems, but since it’s
    not dependent on OS-specific graphics libraries, the user experience is more consistent
    across different OS platforms. Because of this, TShark operates very similarly
    on Windows, Linux, and OS X. However, there are still some differences in how
    TShark runs on each platform. In this book, we’ll focus on running TShark on Windows
    because that is the primary operating system it was designed to work with.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing tcpdump**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While Wireshark is the most popular graphical packet analysis application in
    the world, tcpdump is by far the most popular command line packet analysis application.
    Designed to work on Unix-based operating systems, tcpdump is very easy to install
    via popular package management applications and even comes preinstalled on many
    flavors of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the majority of this book is Windows focused, sections on tcpdump
    are included for Unix users. Specifically, we’ll be using Ubuntu 14.04 LTS. If
    you would like to use tcpdump on a Windows device, then you can download and install
    its Windows counterpart, WinDump, from *[http://www.winpcap.org/windump/](http://www.winpcap.org/windump/)*.
    While the experience of tcpdump and that of WinDump aren’t entirely the same,
    these packet analyzers function similarly. Note, however, that WinDump isn’t nearly
    as actively maintained as tcpdump. As a result, a few newer features might be
    missing, and security vulnerabilities may exist. (We won’t be covering WinDump
    in this book.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Ubuntu doesn’t come with tcpdump preinstalled, but installing it is very easy
    thanks to the APT package management system. To install tcpdump, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal window and run the command sudo apt-get update to ensure that
    your package repositories are up-to-date with the latest package versions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the command sudo apt-get install tcpdump.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You’ll be asked to install a number of prerequisites that are needed to run
    tcpdump. Allow these installations by typing Y and pressing `ENTER` when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installation has completed, run the command tcpdump –h to execute
    tcpdump and print its version information. You’re ready to start using tcpdump
    if the command is successful and you see text like this in the terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can print all of tcpdump’s available commands by invoking the `man tcpdump`
    command, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We’ll talk about how to use several of these commands.
  prefs: []
  type: TYPE_NORMAL
- en: '**Capturing and Saving Packets**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first order of business is to capture packets from the wire and display
    them on the screen. To start a capture in TShark, simply execute the command tshark.
    This command will start the process of capturing packets from a network interface
    and dumping them on screen in your terminal window, which will look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a capture in tcpdump, execute the command tcpdump. After you run this
    command, your terminal window should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Since administrative privileges are required to capture packets on Unix systems,
    you’ll likely either have to execute `tcpdump` as the root user or use the `sudo`
    command in front of the commands listed in this book. In many cases, you’ll probably
    be accessing your Unix-based system as a user with limited privileges. If you
    encounter a permissions error while following along, this is probably the reason
    why.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on how your system is configured, TShark or tcpdump may not default
    to the network interface you want to capture traffic from. If that happens, you
    will need to specify it. You can list the interfaces available to TShark by using
    the `–D` argument, which outputs the interfaces as a numbered list, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To use a specific interface, use the `–i` argument with the interface’s assigned
    number from the interface list, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command will capture packets exclusively from the interface named Local
    Area Connection 2, which is assigned the number 1 in the interface list. I recommend
    always specifying which interface you are capturing from. It’s common for virtual
    machine tools or VPNs to add interfaces, and you want to be certain that the packets
    you are capturing are coming from the correct source.
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Linux or OS X system running tcpdump, use the `ifconfig` command to list
    the available interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Specifying the interface is also done by using the `–i` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This command will capture packets exclusively from the eth0 interface.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have everything properly configured, you can start capturing packets.
    If the device you’re capturing traffic from is even remotely busy on the network,
    then you’ll probably notice that lines representing individual packets are flying
    by rather quickly—potentially too quickly for you to read. We can remedy this
    by saving the packets to a file and then reading only a few of them from that
    file.
  prefs: []
  type: TYPE_NORMAL
- en: To save collected packets to a file in both tools, use the `–w` argument along
    with the name of the file. The capture will continue running until you stop it
    by pressing CTRL-C. The file will be saved to whatever directory the program was
    executed from, unless otherwise specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of this command in TShark:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command will write all of the packets captured from the first interface
    in the interface list to *packets.pcap*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In tcpdump, the same command would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To read packets back from a saved file, use the `–r` argument along with the
    name of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This command will read all the packets from *packets.pcap* onto the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tcpdump command is nearly identical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You may notice that if the file you are attempting to read from contains a lot
    of packets, you’ll encounter a situation similar to the one just described, with
    the packets scrolling across your screen too fast for you to read. You can limit
    the number of packets displayed when reading from a file by using the `–c` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following command will show only the first 10 packets of the
    capture file in TShark:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In tcpdump, the same argument can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `–c` argument can also be used at capture time. Executing this command will
    capture only the first 10 packets that are observed. They can also be saved when
    `–c` is combined with the `–w` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what this command looks like in TShark:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And in tcpdump:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Manipulating Output**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A benefit of using command line tools is that the output is usually considered
    more carefully. A GUI typically shows you everything and it’s up to you to find
    what you want. Command line tools typically only show the bare minimum and force
    you to use additional commands to dig deeper. TShark and tcpdump are no different.
    They both show a single line of output for each packet, requiring you to use additional
    commands to view information such as protocol details or individual bytes.
  prefs: []
  type: TYPE_NORMAL
- en: In the TShark output, each line represents a single packet, and the format of
    the line depends on the protocols used in that packet. TShark uses the same dissectors
    as Wireshark and analyzes packet data in the same way, so TShark output will mirror
    Wireshark’s Packet List pane when the two are run side by side. Because TShark
    has dissectors for layer 7 protocols, it can provide a lot more information about
    packets containing headers than can tcpdump.
  prefs: []
  type: TYPE_NORMAL
- en: In tcpdump, each line also represents one packet, which is formatted differently
    based on the protocol being used. Since tcpdump doesn’t use Wireshark’s protocol
    dissectors, layer 7 protocol information isn’t interpreted by the tool. This is
    one of tcpdump’s biggest limitations. Instead, single-line packets are formatted
    based on their transport layer protocol, which is either TCP or UDP (we’ll learn
    more about these in [Chapter 8](ch08.xhtml#ch08)).
  prefs: []
  type: TYPE_NORMAL
- en: 'TCP packets use this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'While UDP packets use this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: These basic one-line summaries are great for quick analysis, but you’ll eventually
    need to perform a deep dive into a packet. In Wireshark, you would do this by
    clicking a packet in the Packet List pane, which would display information in
    the Packet Details and Packet Bytes panes. You can access the same information
    on the command line using a few options.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to gain more information about each packet is to increase the
    verbosity of the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'In TShark, a capital `V` is used to increase verbosity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This will provide an output similar to Wireshark’s Packet Details pane for packets
    read from the *packets.pcap* capture file. Examples of a packet with normal verbosity
    (a basic summary) and expanded verbosity (more detailed summaries obtained through
    the `–V` argument) are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'First the standard output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'And now a portion of the more in-depth information produced with expanded verbosity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In tcpdump, the lowercase `v` is used to increase verbosity. Unlike TShark,
    tcpdump allows multiple levels of verbosity to be displayed for each packet. You
    can add up to three levels of verbosity by appending additional `v`s, as seen
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: An example of the same packet displayed with normal verbosity and one level
    of expanded verbosity is shown below. Even with full verbosity, this output isn’t
    nearly as verbose as what TShark produces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The levels of verbosity available will depend on the protocol of the packet
    you’re examining. While expanded verbosity is useful, it still doesn’t show us
    everything there is to see. TShark and tcpdump store the entire contents of each
    packet, which can also be viewed in hexadecimal or ASCII form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In TShark, you can view the hex and ASCII representation of packets by using
    the `–x` argument, which can be combined with the `r` argument to read and display
    a packet from file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This view, which is similar to Wireshark’s Packet Bytes pane, is shown in [Figure
    6-1](ch06.xhtml#ch06fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f111-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-1: Viewing raw packets in hex and ASCII in TShark*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In tcpdump, you can view the hex and ASCII representation by using the `–X`
    switch. You can also combine `–X` with the `r` argument to read from a packet
    file, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The output from this command is shown in [Figure 6-2](ch06.xhtml#ch06fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f111-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-2: Viewing raw packets in hex and ASCII in tcpdump*'
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump also lets you get a bit more granular if you need to. You can view only
    the hexadecimal output using the `–x` (lowercase) argument or only the ASCII output
    using the `–A` argument.
  prefs: []
  type: TYPE_NORMAL
- en: It’s easy to become overwhelmed with data when you start experimenting with
    these data output options. I find it most efficient to use the least amount of
    information needed when doing analysis from the command line. Start by viewing
    packets in their default list view and use more verbose output when you narrow
    your analysis down to a few interesting packets. This approach will keep you from
    being overwhelmed with data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Name Resolution**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like Wireshark, TShark and tcpdump will attempt to perform name resolution to
    convert addresses and port numbers to names. If you followed along with any of
    the earlier examples, you may have noticed that this occurs by default. As mentioned
    previously, I typically prefer to disable this functionality to prevent the possibility
    of my analysis generating more packets on the wire.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can disable name resolution in TShark by using the `–n` argument. This
    argument, like many others, can be combined with other commands to enhance readability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can enable or disable certain aspects of name resolution with the `–N`
    argument. If you use the `–N` argument, all name resolution will be disabled except
    for any you explicitly enable using the appropriate values. For instance, the
    following command will enable only transport layer (port name) resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can combine multiple values. This command will enable transport layer and
    MAC resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following values are available when using this option:'
  prefs: []
  type: TYPE_NORMAL
- en: m  MAC address resolution
  prefs: []
  type: TYPE_NORMAL
- en: n  Network address resolution
  prefs: []
  type: TYPE_NORMAL
- en: t  Transport layer (port name) resolution
  prefs: []
  type: TYPE_NORMAL
- en: N  Use external resolvers
  prefs: []
  type: TYPE_NORMAL
- en: C  Concurrent DNS lookups
  prefs: []
  type: TYPE_NORMAL
- en: In tcpdump, using `–n` will disable IP name resolution, and using `–nn` will
    disable port name resolution as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'This argument can also be combined with other commands, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The following examples show a packet capture first with port resolution enabled
    and then with it disabled (`-n`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Both of these commands read just the first packet from the capture file *tcp_ports.pcap*.
    With the first command, port name resolution is on and resolves port 80 to http
    ➊, but with the second command, the port is just displayed by number ➋.
  prefs: []
  type: TYPE_NORMAL
- en: '**Applying Filters**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filtering in TShark and tcpdump is very flexible because both allow the use
    of BPF capture filters. TShark can also use Wireshark display filters. Just as
    with Wireshark, capture filters in TShark can be used only at capture time, and
    display filters can be used at capture time or while displaying already captured
    packets. We’ll start by looking at TShark filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Capture filters can be applied using the `–f` argument, followed by the BPF
    syntax you wish to use in quotation marks. This command will only capture and
    save packets with a destination of port 80 and using the TCP protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Display filters can be applied using the `–Y` argument, followed by the Wireshark
    filter syntax you wish to use in quotation marks. This can be applied at capture
    time like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Display filters can be applied on already captured packets using the same argument.
    This command will display only packets from *packets.pcap* that match the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'With tcpdump, you specify filters inline at the end of a command within single
    quotes. This command will also capture and save only packets destined to TCP port
    80:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You can specify a filter when reading packets as well. This command will display
    only packets from *packets.pcap* that match the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: It’s important to keep in mind that if the original capture file was created
    without a filter, then it still contains other packets; you are just limiting
    what is shown on the screen when reading from an existing file.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you have a capture file that contains a large variety of packets, but
    you want to filter out a subset of them and save that subset to a separate file?
    You can do this by combining the `–w` and `–r` arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This command will read the file *packets.pcap*, filter out only the traffic
    destined for TCP port 80 (which is used for http), and write those packets to
    a new file called *http_packets.pcap*. This is a very common technique to use
    when you want to maintain a larger source .*pcap* file but only analyze a small
    portion of it at a time. I frequently use this technique to whittle down very
    large capture files with tcpdump so that I can analyze a subset of the packets
    in Wireshark. Smaller capture files are much easier to wrangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to specifying a filter inline, tcpdump allows you to reference
    a BPF file containing a series of filters. This is handy when you’d like to apply
    an extremely large or complex filter that might otherwise be unwieldy to edit
    and maintain inline with the tcpdump command. You can specify a filter file using
    the `–F` argument, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If your file gets too large, you might be tempted to add notes or comments
    to it to keep track of what each part of the filter does. Keep in mind that a
    BPF filter file does not allow for comments and will generate an error if anything
    other than a filtering statement is encountered. Since comments are very helpful
    for deciphering large filter files, I usually maintain two copies of every file:
    one for use with tcpdump that doesn’t contain comments and one that contains comments
    for reference.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Time Display Formats in TShark**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One thing that often confuses new analysts is the default timestamp used by
    TShark. It shows packet timestamps in relation to the start of the packet capture.
    There are times when such timestamping is preferable, but in many cases you may
    want to see the time the packet was captured, as is the default for tcpdump timestamps.
    You can get this same output from TShark by using the `–t` argument with the value
    `ad` for absolute date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a comparison of the same packets as before with the default relative
    timestamps ➊ and absolute timestamps ➋:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: By using the `–t` argument, you can specify any time display format you would
    find in Wireshark. These formats are shown in [Table 6-1](ch06.xhtml#ch06tab1).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 6-1:** Time Display Formats Available in TShark'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Value** | **Timestamp** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `a` | Absolute time the packet was captured (in your time zone) | `15:47:58.004669`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ad` | Absolute time the packet was captured with date (in your time zone)
    | `2015-10-09 15:47:58.004669` |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Delta (time difference) since previous captured packet | `0.000140`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `dd` | Delta since previous displayed packet | `0.000140` |'
  prefs: []
  type: TYPE_TB
- en: '| `e` | Epoch time (seconds since January 1, 1970, UTC) | `1444420078.004669`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `r` | Elapsed time between the first packet and the current packet | `0.000140`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `u` | Absolute time the packet was captured (UTC) | `19:47:58.004669` |'
  prefs: []
  type: TYPE_TB
- en: '| `ud` | Absolute time the packet was captured with date (UTC) | `2015-10-09
    19:47:58.004669` |'
  prefs: []
  type: TYPE_TB
- en: Unfortunately, tcpdump doesn’t provide this level of control for manipulating
    how timestamps are shown.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary Statistics in TShark**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another useful TShark feature (and one that sets it apart from tcpdump) is
    its ability to generate a subset of statistics from a capture file. These statistics
    mirror many of the capabilities found in Wireshark but provide easy command line
    access. Statistics are generated by using the `–z` argument and specifying the
    name of the output you would like to generate. You can view a full listing of
    available statistics by using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Many of the features we’ve already covered are available using the `–z` argument.
    They include the ability to output endpoint and conversation statistics using
    this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This command prints a table of statistics with information about the IP conversations
    in the file *packets.pcap*, as shown in [Figure 6-3](ch06.xhtml#ch06fig3).
  prefs: []
  type: TYPE_NORMAL
- en: You can also use this argument to view protocol-specific information. As shown
    in [Figure 6-4](ch06.xhtml#ch06fig4), you can use the `http,tree` option to see
    a breakdown of HTTP requests and responses in table form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![image](../images/f116-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-3: Using TShark to view conversation statistics*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f116-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-4: Using TShark to view HTTP request and response statistics*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful feature is the ability to view reassembled stream output, similar
    to what we did earlier by right-clicking packets in Wireshark and choosing the
    Follow TCP Stream option. To get this output, we have to use the `follow` option
    and specify the type of stream, the output mode, and which stream we want to display.
    You can identify a stream with the number assigned to it in the leftmost column
    when outputting conversation statistics (as seen in [Figure 6-3](ch06.xhtml#ch06fig3)).
    A command might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will print TCP stream 0 to the screen in ASCII format from the
    file *http_google.pcap*. The output for this command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify which stream you’d like to view by providing the address
    details. For example, the following command will retrieve a UDP stream for the
    specified endpoints and ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This command will print the UDP stream for the endpoints 192.168.1.5 on port
    23429 ➊ and 4.2.2.1 on port 53 ➋ from *packets.pcap*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of my favorite statistical options:'
  prefs: []
  type: TYPE_NORMAL
- en: ip_hosts,tree   Displays every IP address in a capture, along with the rate
    and percentage of traffic each address is responsible for
  prefs: []
  type: TYPE_NORMAL
- en: io,phs   Displays a protocol hierarchy showing all protocols found within the
    capture file
  prefs: []
  type: TYPE_NORMAL
- en: http,tree   Displays statistics related to HTTP requests and responses
  prefs: []
  type: TYPE_NORMAL
- en: http_req,tree   Displays statistics for every HTTP request
  prefs: []
  type: TYPE_NORMAL
- en: smb,srt   Displays statistics related to SMB commands for analyzing Windows
    communication
  prefs: []
  type: TYPE_NORMAL
- en: endpoints,wlan   Displays wireless endpoints
  prefs: []
  type: TYPE_NORMAL
- en: expert   Displays expert information (chats, errors, and so on) from the capture
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a lot of useful options available using the `–z` argument. It would
    take far too many pages to cover them all here, but if you plan to use TShark
    frequently, you should invest time in reviewing the official documentation to
    learn more about everything that is available. You can find that documentation
    here: *[https://www.wireshark.org/docs/man-pages/tshark.html](https://www.wireshark.org/docs/man-pages/tshark.html)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Comparing TShark and tcpdump**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Both command line packet analysis applications we’ve examined in this chapter
    are well suited to their respective tasks, and either of them will allow you to
    accomplish whatever task is at hand with varying degrees of effort. There are
    a few differences worth highlighting so you can choose the best tool for the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operating system**   tcpdump is only available for Unix-based operating systems,
    while TShark can function on Windows and Unix-based systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Protocol support**   Both tools support common layer 3 and 4 protocols, but
    tcpdump has limited layer 7 protocol support. TShark provides a rich level of
    layer 7 protocol support because it has access to Wireshark’s protocol dissectors.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analysis features**   Both tools rely heavily on human analysis to produce
    meaningful results, but TShark also provides a robust set of analytical and statistical
    features, similar to those in Wireshark, that can aid analysis when a GUI isn’t
    available.'
  prefs: []
  type: TYPE_NORMAL
- en: Tool availability and personal preference are usually the ultimate deciders
    of which application to use. Fortunately, the tools are similar enough that learning
    one will inherently teach you something about the other, making you more versatile
    and increasing the size of your tool kit.
  prefs: []
  type: TYPE_NORMAL
