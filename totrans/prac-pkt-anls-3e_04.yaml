- en: '**4**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4**'
- en: '**WORKING WITH CAPTURED PACKETS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**处理捕获的数据包**'
- en: '![image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common.jpg)'
- en: Now that you’ve been introduced to Wireshark, you’re ready to start capturing
    and analyzing packets. In this chapter, you’ll learn how to work with capture
    files, packets, and time-display formats. We’ll also cover more advanced options
    for capturing packets and dive into the world of filters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Wireshark，准备开始捕获和分析数据包了。在本章中，你将学习如何处理捕获文件、数据包和时间显示格式。我们还将介绍更多关于捕获数据包的高级选项，并深入了解过滤器的使用。
- en: '**Working with Capture Files**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**处理捕获文件**'
- en: You’ll find that a good portion of your packet analysis will happen after your
    capture. Usually, you’ll perform several captures at various times, save them,
    and analyze them all at once. Therefore, Wireshark allows you to save your capture
    files to be analyzed later. You can also merge multiple capture files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，你的大部分数据包分析会发生在捕获之后。通常，你会在不同的时间进行几次捕获，保存它们，并一次性分析它们。因此，Wireshark 允许你将捕获的文件保存以便稍后分析。你还可以合并多个捕获文件。
- en: '***Saving and Exporting Capture Files***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保存和导出捕获文件***'
- en: To save a packet capture, select **File** ▶ **Save As**. You should see the
    Save file as dialog, as shown in [Figure 4-1](ch04.xhtml#ch04fig1). You’ll be
    asked for a location to save your packet capture and for the file format you wish
    to use. If you don’t specify a file format, Wireshark will use the default *.pcapng*
    file format.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存数据包捕获，选择**文件** ▶ **另存为**。你将看到“保存文件为”对话框，如[图 4-1](ch04.xhtml#ch04fig1)所示。系统会要求你指定保存捕获文件的位置和希望使用的文件格式。如果没有指定文件格式，Wireshark
    将使用默认的 *.pcapng* 格式。
- en: '![image](../images/f54-01.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f54-01.jpg)'
- en: '*Figure 4-1: The Save file as dialog allows you to save your packet captures.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-1: “保存文件为”对话框允许你保存数据包捕获。*'
- en: In many cases, you may only want to save a subset of the packets in your capture.
    To do so, select **File** ▶ **Export Specified Packets**. The dialog that appears
    is shown in [Figure 4-2](ch04.xhtml#ch04fig2). This is a great way to thin bloated
    packet-capture files. You can choose to save only packets in a specific number
    range, marked packets, or packets visible as the result of a display filter (marked
    packets and filters are discussed later in this chapter).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你可能只想保存捕获中的一部分数据包。要做到这一点，选择**文件** ▶ **导出指定数据包**。出现的对话框如[图 4-2](ch04.xhtml#ch04fig2)所示。这是精简冗长数据包捕获文件的好方法。你可以选择仅保存某个数字范围内的数据包、标记的数据包，或者作为显示过滤结果可见的数据包（标记的数据包和过滤器将在本章后面讨论）。
- en: You can export your Wireshark capture data into several formats for viewing
    in other media or for importing into other packet analysis tools. Formats include
    plaintext, PostScript, comma-separated values (CSV), and XML. To export your packet
    capture in one of these formats, choose **File** ▶ **Export Packet Dissections**
    and then select the format for the exported file. You’ll see a Save As dialog
    containing options related to the format you’ve chosen.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Wireshark 捕获的数据导出为几种格式，以便在其他媒体中查看或导入到其他数据包分析工具中。这些格式包括纯文本、PostScript、逗号分隔值
    (CSV) 和 XML。要以其中一种格式导出数据包捕获，选择**文件** ▶ **导出数据包解析**，然后选择导出文件的格式。你将看到一个“另存为”对话框，其中包含与你选择的格式相关的选项。
- en: '![image](../images/f55-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f55-01.jpg)'
- en: '*Figure 4-2: The Export Specified Packets dialog allows you to have more granular
    control over the packets you choose to save.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-2: “导出指定数据包”对话框让你可以更精确地控制你选择保存的数据包。*'
- en: '***Merging Capture Files***'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***合并捕获文件***'
- en: Certain types of analysis require the ability to merge multiple capture files.
    This is a common practice when comparing two data streams or combining streams
    of the same traffic that were captured separately.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 某些类型的分析需要合并多个捕获文件的能力。这通常是在比较两个数据流或将分别捕获的相同流量数据合并时使用的做法。
- en: To merge capture files, open one of the files you want to merge and choose **File**
    ▶ **Merge** to bring up the Merge with capture file dialog, shown in [Figure 4-3](ch04.xhtml#ch04fig3).
    Select the new file you wish to merge into the already open file and then select
    the method to use for merging the files. You can prepend the selected file to
    the currently open one, append it, or merge the files chronologically based on
    their timestamps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并捕获文件，打开其中一个你想要合并的文件，然后选择**文件** ▶ **合并**，以打开“合并捕获文件”对话框，如[图 4-3](ch04.xhtml#ch04fig3)所示。选择你希望合并到当前打开文件的新文件，然后选择合并文件的方法。你可以将选定文件添加到当前文件前面、后面，或者根据时间戳按时间顺序合并文件。
- en: '![image](../images/f56-01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f56-01.jpg)'
- en: '*Figure 4-3: The Merge with capture file dialog allows you to merge two capture
    files.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-3：与捕获文件合并对话框允许你合并两个捕获文件。*'
- en: '**Working with Packets**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**处理数据包**'
- en: You will eventually encounter a situation involving a very large number of packets.
    As the number of packets grows into the thousands and even millions, you will
    need to navigate through packets more efficiently. For this purpose, Wireshark
    allows you to find and mark packets that match certain criteria. You can also
    print packets for easy reference.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你最终会遇到涉及大量数据包的情况。随着数据包数量的增长，达到几千甚至几百万个数据包，你需要更高效地浏览这些数据包。为此，Wireshark 允许你查找并标记符合特定标准的数据包。你还可以打印数据包以方便参考。
- en: '***Finding Packets***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***查找数据包***'
- en: To find packets that match particular criteria, open the Find Packet bar, shown
    circled in [Figure 4-4](ch04.xhtml#ch04fig4), by pressing CTRL-F. This bar should
    appear between the Filter bar and the Packet List pane.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找符合特定标准的数据包，请通过按CTRL-F打开查找数据包栏，如[图 4-4](ch04.xhtml#ch04fig4)中圈出的部分所示。该栏应出现在过滤器栏和数据包列表面板之间。
- en: '![image](../images/f56-02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f56-02.jpg)'
- en: '*Figure 4-4: Finding packets in Wireshark based on specified criteria—in this
    case, packets matching the display filter expression* tcp'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-4：在 Wireshark 中根据指定的标准查找数据包——在这种情况下，是符合显示过滤器表达式* tcp 的数据包'
- en: 'This pane offers three options for finding packets:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个面板提供了三种查找数据包的选项：
- en: •     The Display filter option allows you to enter an expression-based filter
    that will find only those packets that satisfy that expression. This option is
    used in [Figure 4-4](ch04.xhtml#ch04fig4).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: •     显示过滤器选项允许你输入基于表达式的过滤器，该过滤器将只查找满足该表达式的数据包。此选项在[图 4-4](ch04.xhtml#ch04fig4)中使用。
- en: •     The Hex value option searches for packets with a hexadecimal value you
    specify.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: •     十六进制值选项可以搜索你指定的十六进制值的数据包。
- en: •     The String option searches for packets with a text string you specify.
    You can specify the pane the search is performed in or make the search string
    case sensitive.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: •     字符串选项搜索包含你指定文本字符串的数据包。你可以指定搜索执行的面板，或者使搜索字符串区分大小写。
- en: '[Table 4-1](ch04.xhtml#ch04tab1) shows examples of these search types.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-1](ch04.xhtml#ch04tab1)展示了这些搜索类型的示例。'
- en: '**Table 4-1:** Search Types for Finding Packets'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4-1：** 查找数据包的搜索类型'
- en: '| **Search type** | **Examples** |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| **搜索类型** | **示例** |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Display filter | `not ip ip.addr==192.168.0.1 arp` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 显示过滤器 | `not ip ip.addr==192.168.0.1 arp` |'
- en: '| Hex value | `00ff ffff 00ABB1f0` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 十六进制值 | `00ff ffff 00ABB1f0` |'
- en: '| String | `Workstation1 UserB domain` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 字符串 | `Workstation1 UserB domain` |'
- en: Once you’ve decided which search type you will use, enter your search criteria
    in the text box and click **Find** to find the first packet that meets your criterion.
    To find the next matching packet, click **Find** again or press CTRL-N; find the
    previous matching packet by pressing CTRL-B.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦决定使用哪种搜索类型，就在文本框中输入搜索标准，并点击**查找**以查找第一个符合标准的数据包。要查找下一个匹配的数据包，再次点击**查找**或按CTRL-N；要查找前一个匹配的数据包，请按CTRL-B。
- en: '***Marking Packets***'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***标记数据包***'
- en: After you have found packets that match your criterion, you can mark those of
    particular interest. For example, marking packets will let you save only these
    packets. Also, you can find your marked packets quickly by their black background
    and white text, as shown in [Figure 4-5](ch04.xhtml#ch04fig5).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到符合标准的数据包后，你可以标记那些特别感兴趣的数据包。例如，标记数据包可以让你只保存这些数据包。此外，你还可以通过其黑色背景和白色文本快速找到你的标记数据包，如[图
    4-5](ch04.xhtml#ch04fig5)所示。
- en: '![image](../images/f57-01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f57-01.jpg)'
- en: '*Figure 4-5: A marked packet is highlighted on your screen. In this example,
    the second packet is marked and appears darker.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-5：屏幕上突出显示了一个标记的包。在这个例子中，第二个包被标记并显示为较暗。*'
- en: To mark a packet, either right-click it in the Packet List pane and choose **Mark
    Packet** from the pop-up or click a packet in the Packet List pane and press CTRL-M.
    To unmark a packet, toggle this setting off by pressing CTRL-M again. You can
    mark as many packets as you wish in a capture. To jump forward and backward between
    marked packets, press SHIFT-CTRL-N and SHIFT-CTRL-B, respectively.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要标记数据包，可以右键点击数据包列表面板中的数据包，然后从弹出菜单中选择**标记数据包**，或点击数据包并按CTRL-M。要取消标记数据包，再次按CTRL-M可以切换此设置。你可以在一个捕获中标记任意数量的数据包。要在标记的数据包之间跳转，可以分别按SHIFT-CTRL-N和SHIFT-CTRL-B。
- en: '***Printing Packets***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***打印数据包***'
- en: Although most analysis will take place on the computer screen, you may need
    to print captured data. I occasionally print out packets and tape them to my desk
    so I can quickly reference their contents while doing other analysis. Being able
    to print packets to a PDF file is also very convenient, especially when preparing
    reports.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数分析将在计算机屏幕上进行，您可能需要打印捕获的数据。我偶尔会打印出数据包并将其贴在桌子上，这样在进行其他分析时可以快速参考其内容。能够将数据包打印成PDF文件也非常方便，尤其是在准备报告时。
- en: To print captured packets, open the Print dialog by choosing **File** ▶ **Print**
    from the main menu, as shown in [Figure 4-6](ch04.xhtml#ch04fig6).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要打印捕获的数据包，请通过主菜单选择**文件** ▶ **打印**打开打印对话框，如[图4-6](ch04.xhtml#ch04fig6)所示。
- en: '![image](../images/f58-01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f58-01.jpg)'
- en: '*Figure 4-6: The Print dialog allows you to print the packets you specify.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-6：打印对话框允许您打印指定的数据包。*'
- en: As with the Export Specified Packets dialog, you can print a specific packet
    range, marked packets only, or packets displayed as the result of a filter. You
    can also select the level of detail you wish to print for each packet. Once you
    have selected the options, click **Print**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 与“导出指定数据包”对话框类似，您可以打印特定的数据包范围、仅标记的数据包或作为过滤结果显示的数据包。您还可以选择每个数据包的打印详细程度。一旦选择好选项，点击**打印**。
- en: '**Setting Time Display Formats and References**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置时间显示格式和参考**'
- en: Time is of the essence—especially in packet analysis. Everything that happens
    on a network is time sensitive, and you will need to examine trends and network
    latency in capture files frequently. Wireshark supplies several configurable options
    related to time. In this section, we’ll look at time display formats and references.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 时间至关重要——尤其是在数据包分析中。网络上的一切活动都是时间敏感的，您需要频繁地检查捕获文件中的趋势和网络延迟。Wireshark提供了多个与时间相关的可配置选项。在本节中，我们将探讨时间显示格式和参考。
- en: '***Time Display Formats***'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***时间显示格式***'
- en: Each packet that Wireshark captures is given a timestamp, which is applied to
    the packet by the operating system. Wireshark can show the absolute timestamp,
    which indicates the exact moment when the packet was captured, as well as the
    time in relation to the last captured packet and the beginning and end of the
    capture.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark捕获的每个数据包都会被赋予一个时间戳，该时间戳由操作系统应用于数据包。Wireshark可以显示绝对时间戳，表示数据包捕获的确切时刻，以及与上一个捕获的数据包和捕获的开始与结束时间的关系。
- en: Options related to time display are found under the View heading on the main
    menu. The Time Display Format section, shown in [Figure 4-7](ch04.xhtml#ch04fig7),
    lets you configure the presentation format as well as the precision of the time
    display.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与时间显示相关的选项位于主菜单中的“视图”项下。时间显示格式部分，如[图4-7](ch04.xhtml#ch04fig7)所示，允许您配置时间显示格式以及时间显示的精度。
- en: '![image](../images/f59-01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f59-01.jpg)'
- en: '*Figure 4-7: Several time display formats are available.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-7：提供多种时间显示格式。*'
- en: The presentation format options let you choose various settings for time display.
    These include date and time of day, UTC date and time of day, seconds since epoch,
    seconds since beginning of capture (the default setting), seconds since previous
    captured packet, and more.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 显示格式选项允许您选择不同的时间显示设置。这些设置包括日期和时间、UTC日期和时间、纪元以来的秒数、捕获开始以来的秒数（默认设置）、上一个捕获的数据包以来的秒数等等。
- en: The precision options allow you to set the time display precision to an automatic
    setting, which takes the format from the capture file, or to a manual setting,
    such as seconds, milliseconds, microseconds, and so on. We will be changing these
    options later in the book, so you should familiarize yourself with them now.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 精度选项允许您将时间显示精度设置为自动设置，从捕获文件获取格式，或者设置为手动设置，如秒、毫秒、微秒等。我们将在书中的后面部分更改这些选项，因此您现在应该熟悉它们。
- en: '**NOTE**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When comparing packet data from multiple devices, be sure that the devices
    are synchronized with the same time source, especially if you are performing forensic
    analysis or troubleshooting. You can use the Network Time Protocol (NTP) to ensure
    network devices are synced. When examining packets from devices spanning more
    than one time zone, consider analyzing packets in UTC instead of local time to
    avoid confusion when reporting your findings.*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*在比较来自多个设备的数据包时，请确保这些设备与相同的时间源同步，特别是当您进行法医分析或故障排除时。您可以使用网络时间协议（NTP）确保网络设备同步。当检查来自跨越多个时区的设备的数据包时，考虑以UTC时间分析数据包，而非本地时间，以避免在报告发现时产生混淆。*'
- en: '***Packet Time Referencing***'
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***数据包时间参考***'
- en: Packet time referencing allows you to configure a certain packet so that all
    subsequent time calculations are done in relation to that packet. This feature
    is particularly handy when you are examining a series of sequential events that
    are triggered at some point other than the start of the capture file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数据包时间参考允许你配置某个数据包，使得所有后续的时间计算都相对于该数据包进行。当你检查一系列在捕获文件开始之外的某个时间点触发的顺序事件时，这个功能尤其有用。
- en: To set a time reference to a packet, right-click the reference packet in the
    Packet List pane and choose **Set/Unset Time Reference**. To toggle this reference
    off, repeat the same action. You can also toggle a packet as a time reference
    on and off by selecting the packet you wish to reference in the Packet List pane
    and pressing CTRL-T.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要将时间参考设置为某个数据包，右键单击数据包列表窗格中的参考数据包并选择**设置/取消时间参考**。要关闭此参考，请重复相同的操作。你还可以通过在数据包列表窗格中选择你希望作为参考的数据包并按
    CTRL-T 来切换数据包的时间参考。
- en: When you enable a time reference on a packet, the Time column in the Packet
    List pane will display `*REF*`, as shown in [Figure 4-8](ch04.xhtml#ch04fig8).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在数据包上启用时间参考时，数据包列表窗格中的时间列将显示`*REF*`，如[图 4-8](ch04.xhtml#ch04fig8)所示。
- en: '![image](../images/f60-01.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f60-01.jpg)'
- en: '*Figure 4-8: Packet 4 with the packet time reference toggle enabled*'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-8：启用数据包时间参考切换的第4个数据包*'
- en: Setting a packet time reference is useful only when the time display format
    of a capture is set to display the time in relation to the beginning of the capture.
    Any other setting will produce no usable results and indeed will generate a set
    of times that can be very confusing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 设置数据包时间参考只有在捕获的时间显示格式设置为相对于捕获开始时间显示时才有用。任何其他设置将无法产生可用的结果，实际上会生成一组非常混乱的时间。
- en: '***Time Shifting***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***时间偏移***'
- en: In some cases, you might encounter packets from multiple sources that are not
    synchronized to the same time source. This is especially common when examining
    capture files taken from two locations that contain the same stream of data. While
    most administrators desire a state in which every device on their network is synced,
    it’s not uncommon for there to be a few seconds of time skew between certain types
    of devices. Wireshark provides the ability to shift the timestamp on packets to
    alleviate this problem during your analysis.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能会遇到来自多个源的数据包，它们并未同步到相同的时间源。当检查从两个位置捕获的文件时，尤其常见，其中包含相同数据流的捕获。尽管大多数管理员希望网络上的每个设备都同步，但某些类型的设备之间可能会有几秒钟的时间偏差。Wireshark提供了调整数据包时间戳的功能，可以在分析过程中缓解这个问题。
- en: To shift the timestamp on one or more packets, select **Edit** ▶ **Time Shift**
    or press CTRL-SHIFT-T. On the Time Shift screen that opens, you can specify a
    time range to shift the entire capture file by, or you can specify a time to set
    individual packets to. In the example shown in [Figure 4-9](ch04.xhtml#ch04fig9),
    I’ve chosen to shift the timestamp of every packet in the capture by adding two
    minutes and five seconds to each packet.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要调整一个或多个数据包的时间戳，选择**编辑** ▶ **时间偏移**，或者按下 CTRL-SHIFT-T。在打开的时间偏移屏幕上，你可以指定一个时间范围来调整整个捕获文件，或者你可以指定一个时间来设置单个数据包的时间戳。在[图
    4-9](ch04.xhtml#ch04fig9)中，我选择通过为每个数据包增加两分钟五秒来调整捕获中每个数据包的时间戳。
- en: '![image](../images/f61-01.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f61-01.jpg)'
- en: '*Figure 4-9: The Time Shift dialog*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-9：时间偏移对话框*'
- en: '**Setting Capture Options**'
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设置捕获选项**'
- en: We looked at the Capture Interfaces dialog while walking through a very basic
    packet capture in the last chapter. Wireshark offers quite a few additional capture
    options that we didn’t address then. To access these options, choose **Capture**
    ▶ **Options**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上章的简单数据包捕获过程中，我们曾讨论过捕获接口对话框。Wireshark还提供了许多额外的捕获选项，但我们当时没有提到。要访问这些选项，请选择**捕获**
    ▶ **选项**。
- en: 'The Capture Interfaces dialog has a lot of bells and whistles, all designed
    to give you more flexibility while capturing packets. It’s divided into three
    tabs: Input, Output, and Options. We’ll examine each separately.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获接口对话框有很多功能，旨在为你在捕获数据包时提供更多灵活性。它分为三个标签页：输入、输出和选项。我们将分别讨论每一个。
- en: '***Input Tab***'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***输入标签***'
- en: The main purpose of the Input tab ([Figure 4-10](ch04.xhtml#ch04fig10)) is to
    display all the interfaces available for capturing packets and some basic information
    for each interface. This includes the friendly name of the interface provided
    by the operating system, a traffic graph showing the throughput on the interface,
    and additional configuration options such as promiscuous mode status and buffer
    size. At the far right (not pictured), there is also a column for the applied
    capture filter, which we’ll talk about in “Capture Filters” on [page 65](ch04.xhtml#page_65).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输入选项卡 ([图 4-10](ch04.xhtml#ch04fig10)) 的主要目的是显示所有可用的捕获接口，并提供每个接口的一些基本信息。这些信息包括操作系统提供的接口友好名称、显示接口流量的图表，以及其他配置选项，如混杂模式状态和缓冲区大小。在最右侧（未显示）还有一个列，显示应用的捕获过滤器，稍后我们会在
    [第 65 页](ch04.xhtml#page_65)的“捕获过滤器”中讨论。
- en: In this section, you can click most of these options and edit them inline. For
    example, if you want to disable promiscuous mode on an interface, you can click
    that field and change it from enabled to disabled via the provided drop-down menu.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你可以点击这些选项中的大多数，并直接进行编辑。例如，如果你想禁用某个接口的混杂模式，可以点击该字段，通过提供的下拉菜单将其从启用状态更改为禁用状态。
- en: '![image](../images/f62-01.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f62-01.jpg)'
- en: '*Figure 4-10: The Capture Interfaces Input options tab*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-10：捕获接口输入选项卡*'
- en: '***Output Tab***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***输出选项卡***'
- en: The Output tab ([Figure 4-11](ch04.xhtml#ch04fig11)) allows you to automatically
    store captured packets in a file, rather than capturing them first and then saving
    the file. Doing so offers you more flexibility in managing how packets are saved.
    You can choose to save them as a single file or a file set or even use a ring
    buffer (which we’ll cover in a moment) to manage the number of files created.
    To enable this option, enter a complete file path and name in the File text box.
    Alternatively, use the Browse... button to select a directory and provide a filename.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 输出选项卡 ([图 4-11](ch04.xhtml#ch04fig11)) 允许你自动将捕获的报文存储到文件中，而不是先捕获报文然后再保存文件。这样做为你提供了更多的灵活性来管理报文的保存方式。你可以选择将它们保存为单个文件或文件集，甚至可以使用环形缓冲区（稍后我们会介绍）来管理创建的文件数量。要启用此选项，请在文件文本框中输入完整的文件路径和名称。或者，使用浏览...按钮选择目录并提供文件名。
- en: '![image](../images/f62-02.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f62-02.jpg)'
- en: '*Figure 4-11: The Capture Interfaces Output options tab*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-11：捕获接口输出选项卡*'
- en: When you are capturing a large amount of traffic or performing long-term captures,
    file sets can prove particularly useful. A *file set* is a grouping of multiple
    files separated by a particular condition. To save to a file set, check the **Create
    a new file automatically after...** option.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你捕获大量流量或进行长期捕获时，文件集特别有用。*文件集*是由多个文件组成的集合，这些文件通过特定条件进行分隔。要保存到文件集，请勾选 **在...之后自动创建新文件**
    选项。
- en: Wireshark uses various triggers to manage saving to file sets based upon a file
    size or time condition. To enable one of these triggers, select the radio button
    next to the size- or time-based option and then specify the value and unit on
    which to trigger. For instance, you can set a trigger that creates a new file
    after every 1MB of traffic captured or, as shown in [Figure 4-12](ch04.xhtml#ch04fig12),
    after every minute of traffic captured.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 使用各种触发器来基于文件大小或时间条件管理文件集保存。要启用这些触发器之一，选择大小或基于时间的选项旁边的单选按钮，然后指定触发的值和单位。例如，你可以设置一个触发器，在每捕获
    1MB 流量后创建一个新文件，或者如 [图 4-12](ch04.xhtml#ch04fig12) 所示，在每捕获 1 分钟的流量后创建一个新文件。
- en: '![image](../images/f63-01.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f63-01.jpg)'
- en: '*Figure 4-12: A file set created by Wireshark at one-minute intervals*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-12：Wireshark 在每分钟间隔创建的文件集*'
- en: The Use a ring buffer option lets you specify a certain number of files your
    file set will hold before Wireshark begins to overwrite files. Although the term
    *ring buffer* has multiple meanings, for our purposes, it is essentially a file
    set that specifies that once the last file it can hold has been written, when
    more data must be saved, the first file is overwritten. In other words, it establishes
    a first in, first out (FIFO) method of writing files. You can check this option
    and specify the maximum number of files you wish to cycle through. For example,
    say you choose to use multiple files for your capture with a new file created
    every hour, and you set your ring buffer to 6\. Once the sixth file has been created,
    the ring buffer will cycle back around and overwrite the first file rather than
    create a seventh file. This ensures that no more than six files (or in this case,
    hours) of data will remain on your hard drive, while still allowing new data to
    be written.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '"使用环形缓冲区"选项允许你指定在 Wireshark 开始覆盖文件之前，文件集能保存的文件数量。虽然“环形缓冲区”一词有多种含义，但在我们的应用中，它本质上是一个文件集，指定一旦保存的最后一个文件写入完成，当需要保存更多数据时，第一个文件会被覆盖。换句话说，它建立了一种先进先出（FIFO）文件写入方法。你可以勾选此选项并指定希望循环使用的最大文件数量。例如，假设你选择为捕获使用多个文件，每小时创建一个新文件，并将环形缓冲区设置为6。第六个文件创建完成后，环形缓冲区将会回绕并覆盖第一个文件，而不是创建第七个文件。这确保了最多只有六个文件（或在此情况下，六个小时）的数据保存在硬盘上，同时仍允许新数据被写入。'
- en: Lastly, the Output tab also lets you specify whether to use the .*pcapng* file
    format. If you plan to interact with your saved packets using a tool that isn’t
    capable of parsing .*pcapng*, you can select the traditional .*pcap* format.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，输出标签还允许你指定是否使用.*pcapng*文件格式。如果你计划使用无法解析.*pcapng*格式的工具来处理保存的数据包，可以选择传统的.*pcap*格式。
- en: '***Options Tab***'
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***选项标签***'
- en: The Options tab contains a number of other packet-capturing choices, including
    display, name resolution, and capture termination options, shown in [Figure 4-13](ch04.xhtml#ch04fig13).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 选项标签包含其他一些数据包捕获选项，包括显示、名称解析和捕获终止选项，详见[图4-13](ch04.xhtml#ch04fig13)。
- en: '![image](../images/f64-01.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f64-01.jpg)'
- en: '*Figure 4-13: The Capture Interfaces Options tab*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-13：捕获接口选项标签*'
- en: '**Display Options**'
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示选项**'
- en: The Display Options section controls how packets are shown as they are being
    captured. The Update list of packets in real-time option is self-explanatory and
    can be paired with the Automatically scroll during live capture option. When both
    of these options are enabled, all captured packets are displayed on the screen,
    with the most recently captured ones shown instantly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 显示选项部分控制捕获过程中数据包的显示方式。"实时更新数据包列表"选项不言自明，可以与"实时捕获时自动滚动"选项配对使用。当这两个选项都启用时，所有捕获的数据包都会显示在屏幕上，最新捕获的数据包会立即显示。
- en: '**WARNING**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*When paired, the Update list of packets in real-time and Automatically scroll
    during live capture options can be processor intensive, even when you are capturing
    a modest amount of data. Unless you have a specific need to see the packets in
    real time, it’s best to deselect both options.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*当这两个选项配对使用时，即使你只捕获少量数据，它们也可能会消耗较多的处理器资源。除非你有特定需要实时查看数据包，否则最好取消勾选这两个选项。*'
- en: The Show extra capture information dialog option lets you enable or suppress
    the display of a small window that shows the number and percentage of packets
    that have been captured, sorted by their protocol. I like to show the capture
    info dialog since I typically don’t allow for the live scrolling of packets during
    capture.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"显示额外的捕获信息对话框"选项让你启用或抑制一个小窗口的显示，该窗口显示已捕获的数据包数量及其按协议分类的百分比。我喜欢显示捕获信息对话框，因为我通常不允许在捕获过程中实时滚动数据包。'
- en: '**Name Resolution Settings**'
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**名称解析设置**'
- en: The Name Resolution section options allow you to enable automatic MAC (layer
    2), network (layer 3), and transport (layer 4) name resolution for your capture.
    We’ll discuss name resolution as a general topic in more depth, including its
    drawbacks, in [Chapter 5](ch05.xhtml#ch05).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 名称解析部分的选项允许你启用自动的 MAC（第二层）、网络（第三层）和传输（第四层）名称解析功能。我们将在[第5章](ch05.xhtml#ch05)中更深入地讨论名称解析这一主题，包括它的缺点。
- en: '**Stop Capture Settings**'
  id: totrans-100
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**停止捕获设置**'
- en: The Stop capture automatically after... section lets you stop the running capture
    when certain conditions are met. As with multiple file sets, you can trigger the
    capture to stop based on file size and time interval, but you can also trigger
    on number of packets. These options can be used with the multiple-file options
    on the Output tab.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “在...之后自动停止捕获”部分让你在满足某些条件时停止正在进行的捕获。与多个文件集一样，你可以根据文件大小和时间间隔触发停止捕获，也可以基于数据包数量触发停止。这些选项可以与输出选项卡上的多文件选项一起使用。
- en: '**Using Filters**'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用过滤器**'
- en: Filters allow you to specify which packets you have available for analysis.
    Simply stated, a filter is an expression that defines criteria for the inclusion
    or exclusion of packets. If there are packets you don’t want to see, you can write
    a filter that gets rid of them. If there are packets you want to see exclusively,
    you can write a filter that shows only those packets.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器允许你指定可供分析的包。简单来说，过滤器是一个表达式，用于定义包的包含或排除标准。如果你不希望看到某些包，可以写一个过滤器将它们去除。如果你只希望看到特定的包，可以写一个过滤器仅显示这些包。
- en: 'Wireshark offers two main types of filters:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 提供了两种主要的过滤器类型：
- en: •     *Capture filters* are specified when packets are being captured and will
    capture only those packets that are specified for inclusion/exclusion in the given
    expression.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: •     *捕获过滤器* 在捕获数据包时指定，只会捕获那些在给定表达式中指定为包含/排除的数据包。
- en: •     *Display filters* are applied to an existing set of captured packets in
    order to hide unwanted packets or show desired packets based on the specified
    expression.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: •     *显示过滤器* 被应用于已捕获的数据包集，用于根据指定的表达式隐藏不需要的包或显示所需的包。
- en: Let’s look at capture filters first.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看一下捕获过滤器。
- en: '***Capture Filters***'
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***捕获过滤器***'
- en: Capture filters are applied during the packet-capturing process to limit the
    packets delivered to the analyst from the start. One primary reason for using
    a capture filter is performance. If you know that you do not need to analyze a
    particular form of traffic, you can simply filter it out with a capture filter
    and save the processing power that would typically be used in capturing those
    packets.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获过滤器在数据包捕获过程中应用，用于从一开始就限制交付给分析员的数据包。使用捕获过滤器的一个主要原因是性能。如果你知道某种类型的流量不需要分析，你可以通过捕获过滤器简单地过滤掉它，从而节省通常用于捕获这些包的处理能力。
- en: The ability to create custom capture filters comes in handy when you’re dealing
    with large amounts of data. The analysis can be sped up by ensuring that you are
    looking at only the packet relevant to the issue at hand.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大量数据时，创建自定义捕获过滤器非常有用。通过确保只查看与当前问题相关的包，可以加快分析速度。
- en: 'As an example, suppose you are troubleshooting an issue with a service running
    on port 262, but the server you are analyzing runs several different services
    on a variety of ports. Finding and analyzing only the traffic on one port would
    be quite a job in itself. To capture only the traffic on a specific port, you
    could use a capture filter. To do so, use the Capture Interfaces dialog as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在排查一个运行在262端口的服务问题，但你正在分析的服务器在多个端口上运行着不同的服务。仅找到并分析某一个端口的流量本身就是一项工作。为了只捕获特定端口的流量，你可以使用捕获过滤器。具体做法是，使用捕获接口对话框，如下所示：
- en: Choose the **Capture** ▶ **Options** button next to the interface on which you
    want to capture packets. This will open the Capture Interfaces dialog.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你希望捕获数据包的接口旁边的**捕获** ▶ **选项**按钮。这将打开捕获接口对话框。
- en: Find the interface you wish to use and scroll to the Capture Filter option in
    the far-right column.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到你希望使用的接口，并滚动到最右侧列的捕获过滤器选项。
- en: You can apply the capture filter by clicking in this column to enter an expression.
    We want our filter to show only traffic inbound and outbound to port 262, so enter
    **port 262**, as shown in [Figure 4-14](ch04.xhtml#ch04fig14). (We’ll discuss
    expressions in more detail in the next section.) The color of the cell should
    turn green, indicating that you’ve entered a valid expression; it will turn red
    if the expression is invalid.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过点击这一列并输入表达式来应用捕获过滤器。我们希望过滤器只显示进出262端口的流量，因此输入**port 262**，如[图4-14](ch04.xhtml#ch04fig14)所示。（我们将在下一节详细讨论表达式。）单元格的颜色应该变为绿色，表示你输入了一个有效的表达式；如果表达式无效，单元格会变为红色。
- en: '![image](../images/f66-01.jpg)'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f66-01.jpg)'
- en: '*Figure 4-14: Creating a capture filter in the Capture Interfaces dialog*'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图4-14：在捕获接口对话框中创建捕获过滤器*'
- en: Once you have set your filter, click **Start** to begin the capture.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置好过滤器后，点击**开始**以开始捕获。
- en: You should now see only port 262 traffic and be able to more efficiently analyze
    this particular data.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该只看到端口262的流量，并能够更高效地分析这部分数据。
- en: '**Capture/BPF Syntax**'
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**捕获/BPF语法**'
- en: Capture filters are applied by libpcap/WinPcap and use the Berkeley Packet Filter
    (BPF) syntax. This syntax is common in several packet-sniffing applications, mostly
    because packet-sniffing applications tend to rely on the libpcap/WinPcap libraries,
    which allow for the use of BPFs. A knowledge of BPF syntax will be crucial as
    you dig deeper into networks at the packet level.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获过滤器由libpcap/WinPcap应用，并使用伯克利数据包过滤器（BPF）语法。这个语法在多个数据包嗅探应用中常见，主要是因为数据包嗅探应用通常依赖于libpcap/WinPcap库，而这些库支持使用BPF。掌握BPF语法对于深入理解网络层级的数据包分析至关重要。
- en: A filter created using the BPF syntax is called an *expression*, and each expression
    consists of one or more *primitives*. Primitives consist of one or more *qualifiers*
    (as listed in [Table 4-2](ch04.xhtml#ch04tab2)), followed by an ID name or number,
    as shown in [Figure 4-15](ch04.xhtml#ch04fig15).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BPF语法创建的过滤器被称为*表达式*，每个表达式由一个或多个*原语*组成。原语由一个或多个*限定符*（如[表4-2](ch04.xhtml#ch04tab2)所列）和一个ID名称或编号组成，如[图4-15](ch04.xhtml#ch04fig15)所示。
- en: '**Table 4-2:** The BPF Qualifiers'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4-2：** BPF限定符'
- en: '| **Qualifier** | **Description** | **Examples** |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **限定符** | **描述** | **示例** |'
- en: '| --- | --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Type | Identifies what the ID name or number refers to | `host, net, port`
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 标识ID名称或编号所代表的内容 | `host, net, port` |'
- en: '| Dir | Specifies a transfer direction to or from the ID name or number | `src,
    dst` |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 方向 | 指定传输方向到或来自ID名称或编号 | `src, dst` |'
- en: '| Proto | Restricts the match to a particular protocol | `ether, ip, tcp, udp,
    http, ftp` |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 协议 | 限制匹配特定协议 | `ether, ip, tcp, udp, http, ftp` |'
- en: '![image](../images/f67-01.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f67-01.jpg)'
- en: '*Figure 4-15: A sample capture filter*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4-15：一个示例捕获过滤器*'
- en: Given the components of an expression, a qualifier of `dst host` and an ID of
    192.168.0.10 would combine to form a primitive. This primitive alone is an expression
    that would capture traffic only with a destination IP address of 192.168.0.10.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 结合表达式的组成，`dst host`的限定符与ID 192.168.0.10结合形成一个原语。这个原语本身就是一个表达式，它只会捕获目的IP地址为192.168.0.10的流量。
- en: 'You can use logical operators to combine primitives to create more advanced
    expressions. Three logical operators are available:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用逻辑运算符将原语结合起来，创建更复杂的表达式。共有三种逻辑运算符可用：
- en: •     Concatenation operator AND (`&&`)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: •     连接运算符 AND (`&&`)
- en: •     Alternation operator OR (`||`)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: •     选择运算符 OR (`||`)
- en: •     Negation operator NOT (`!`)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: •     否定运算符 NOT (`!`)
- en: 'For example, the following expression will capture only traffic with a source
    IP address of 192.168.0.10 and a source or destination port of 80:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下表达式将仅捕获源IP地址为192.168.0.10且源端口或目标端口为80的流量：
- en: '[PRE0]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Hostname and Addressing Filters**'
  id: totrans-137
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**主机名和地址过滤器**'
- en: Most filters you create will center on a particular network device or grouping
    of devices. Depending on the circumstances, filtering can be based on a device’s
    MAC address, IPv4 address, IPv6 address, or DNS hostname.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的大多数过滤器将集中在特定的网络设备或设备组上。根据具体情况，过滤可以基于设备的MAC地址、IPv4地址、IPv6地址或DNS主机名。
- en: 'For example, say you’re curious about the traffic of a particular host that
    is interacting with a server on your network. From the server, you can create
    a filter using the `host` qualifier that captures all traffic associated with
    that host’s IPv4 address:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，你想了解某个特定主机与网络上服务器交互的流量。你可以在服务器上使用`host`限定符创建一个过滤器，捕获与该主机IPv4地址相关的所有流量：
- en: '[PRE1]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are on an IPv6 network, you would filter based on an IPv6 address using
    the `host` qualifier, as shown here:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在IPv6网络中，你可以使用`host`限定符过滤基于IPv6地址的数据，如下所示：
- en: '[PRE2]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also filter based on a device’s hostname with the `host` qualifier,
    like so:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过`host`限定符基于设备的主机名进行过滤，如下所示：
- en: '[PRE3]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Or, if you’re concerned that the IP address for a host might change, you can
    filter based on its MAC address as well by adding the `ether` protocol qualifier:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你担心某个主机的IP地址可能变化，你也可以通过添加`ether`协议限定符来基于其MAC地址进行过滤：
- en: '[PRE4]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The transfer direction qualifiers are often used in conjunction with filters,
    such as the ones in the previous examples, to capture traffic based on whether
    it’s going to or coming from a host. For example, to capture only traffic coming
    from a particular host, add the `src` qualifier:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 传输方向限定符通常与过滤器一起使用，例如前面示例中的过滤器，用于根据流量是从主机发送还是接收来捕获流量。例如，要仅捕获来自特定主机的流量，可以添加 `src`
    限定符：
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To capture only data destined for 172.16.16.149, use the `dst` qualifier:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅捕获发送到 172.16.16.149 的数据，可以使用 `dst` 限定符：
- en: '[PRE6]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'When you don’t use a type qualifier (`host`, `net`, or `port`) with a primitive,
    the `host` qualifier is assumed. Therefore, this expression, which excludes that
    qualifier, is the equivalent of the preceding example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当您不使用类型限定符（`host`、`net` 或 `port`）与原语一起时，默认使用 `host` 限定符。因此，这个不包含限定符的表达式，相当于之前的示例：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Port Filters**'
  id: totrans-153
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**端口过滤器**'
- en: 'In addition to filtering on hosts, you can filter based on the ports used in
    each packet. Port filtering can be used to filter for services and applications
    that use known service ports. For example, here’s a simple filter to capture traffic
    only to or from port 8080:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 除了根据主机进行过滤外，您还可以根据每个数据包中使用的端口进行过滤。端口过滤可以用于过滤使用已知服务端口的服务和应用程序。例如，以下是一个简单的过滤器，只捕获到或来自端口
    8080 的流量：
- en: '[PRE8]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To capture all traffic except that on port 8080, this would work:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要捕获除端口 8080 以外的所有流量，可以使用以下表达式：
- en: '[PRE9]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The port filters can be combined with transfer direction qualifiers. For example,
    to capture only traffic going to the web server listening on the standard HTTP
    port 80, use the `dst` qualifier:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 端口过滤器可以与传输方向限定符结合使用。例如，要仅捕获发送到监听标准 HTTP 80 端口的 Web 服务器的流量，可以使用 `dst` 限定符：
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Protocol Filters**'
  id: totrans-160
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**协议过滤器**'
- en: 'Protocol filters let you filter packets based on certain protocols. They are
    used to match non–application layer protocols that can’t simply be defined by
    the use of a certain port. Thus, if you want to see only ICMP traffic, you could
    use this filter:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 协议过滤器允许您基于特定协议过滤数据包。它们用于匹配那些不能仅通过使用某个端口来定义的非应用层协议。因此，如果您只想查看 ICMP 流量，可以使用以下过滤器：
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To see everything but IPv6 traffic, this will do the trick:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看除了 IPv6 流量以外的所有流量，可以使用以下过滤器：
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Protocol Field Filters**'
  id: totrans-165
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**协议字段过滤器**'
- en: One of the real strengths of the BPF syntax is the ability that it gives us
    to examine every byte of a protocol header in order to create very specific filters
    based on that data. The advanced filters that we’ll discuss in this section will
    allow you to retrieve a specific number of bytes from a packet beginning at a
    particular location.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: BPF 语法的一个真正强大的地方在于，它允许我们检查协议头的每个字节，从而基于这些数据创建非常具体的过滤器。本节中我们将讨论的高级过滤器将允许您从数据包的特定位置开始检索特定数量的字节。
- en: 'For example, suppose that we want to filter based on the type field of an ICMP
    header. The type field is located at the very beginning of a packet, which puts
    it at offset 0\. To identify the location to examine within a packet, specify
    the byte offset in square brackets next to the protocol qualifier—`icmp[0]` in
    this example. This specification will return a 1-byte integer value that we can
    compare against. For instance, to get only ICMP packets that represent destination
    unreachable (type 3) messages, we use the equal to operator in our filter expression:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想根据 ICMP 头部的类型字段进行过滤。类型字段位于数据包的最开始位置，因此它的偏移量是 0。为了标识数据包中需要检查的位置，可以在协议限定符旁边用方括号指定字节偏移量——例如，`icmp[0]`。这个规范将返回一个
    1 字节的整数值，我们可以与之进行比较。例如，为了仅捕获表示目标不可达（类型 3）消息的 ICMP 数据包，我们可以在过滤表达式中使用等于操作符：
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To examine only ICMP packets that represent an echo request (type 8) or echo
    reply (type 0), use two primitives with the OR operator:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查仅表示回显请求（类型 8）或回显回复（类型 0）的 ICMP 数据包，可以使用两个原语与 OR 操作符：
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These filters work great, but they filter based on only 1 byte of information
    within a packet header. You can also specify the length of the data to be returned
    in your filter expression by appending the byte length after the offset number
    within the square brackets, separated by a colon.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些过滤器效果很好，但它们仅根据数据包头部中的 1 字节信息进行过滤。您还可以通过在方括号中的偏移量后添加字节长度，并用冒号分隔，来指定过滤表达式中返回的数据长度。
- en: 'For example, say we want to create a filter that captures all ICMP destination-unreachable,
    host-unreachable packets, identified by type 3, code 1\. These are 1-byte fields,
    located next to each other at offset 0 of the packet header. To do this, we create
    a filter that checks 2 bytes of data beginning at offset 0 of the packet header,
    and we compare that data against the hex value 0301 (type 3, code 1), like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想要创建一个过滤器，捕获所有 ICMP 目标不可达，主机不可达的数据包，这些数据包的类型是 3，代码是 1。这些是 1 字节的字段，位于数据包头部的偏移量
    0 处并紧邻在一起。为此，我们创建一个过滤器，检查数据包头部从偏移量 0 开始的 2 个字节，并将这些数据与十六进制值 0301（类型 3，代码 1）进行比较，如下所示：
- en: '[PRE15]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: A common scenario is to capture only TCP packets with the RST flag set. We will
    cover TCP extensively in [Chapter 8](ch08.xhtml#ch08). For now, you just need
    to know that the flags of a TCP packet are located at offset 13\. This is an interesting
    field because it is collectively 1 byte in size as the flags field, but each particular
    flag is identified by a single bit within this byte. As I will discuss further
    in [Appendix B](ch15_appb.xhtml#ch15_appb), each bit in a byte represents some
    base 2 number. The bit the flag is stored in is specified by the number the bit
    represents, so the first bit would represent 1, the second 2, the third 4, and
    so on. Multiple flags can be set simultaneously in a TCP packet. Therefore, we
    can’t efficiently filter by using a single `tcp[13]` value because several values
    may represent the RST bit being set.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的场景是只捕获 TCP 数据包中 RST 标志位被设置的数据包。我们将在[第 8 章](ch08.xhtml#ch08)详细讨论 TCP。现在，你只需要知道
    TCP 数据包的标志位位于偏移量 13。这是一个有趣的字段，因为它总共占用 1 字节作为标志字段，但每个特定的标志位由这个字节中的单个位标识。正如我将在[附录
    B](ch15_appb.xhtml#ch15_appb)中进一步讨论的那样，每个字节中的位表示某个二进制数。该标志位存储的位由该位表示的数字指定，所以第一个位表示
    1，第二个表示 2，第三个表示 4，依此类推。多个标志位可以同时在 TCP 数据包中被设置。因此，我们不能仅使用单一的 `tcp[13]` 值来进行高效的过滤，因为多个值可能表示
    RST 位被设置。
- en: 'Instead, we must specify the location within the byte that we wish to examine
    by appending a single ampersand (`&`), followed by the number that represents
    where the flag is stored. The RST flag is at the bit representing the number 4
    within this byte, and the fact that this bit is set to 4 tells us that the RST
    flag is set. The filter looks like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们必须通过附加一个单一的 & 符号 (`&`)，然后跟上表示该标志存储位置的数字来指定我们希望检查的字节中的位置。RST 标志位位于表示数字 4
    的位中，而该位被设置为 4，意味着 RST 标志已被设置。过滤器如下所示：
- en: '[PRE16]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see all packets with the PSH flag set, which is identified by the bit location
    representing the number 8 in the TCP flags at offset 13, our filter would use
    that location instead:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要查看所有设置了 PSH 标志位的数据包，可以使用该标志位在 TCP 标志字段中偏移量 13 的位置，这个位置表示数字 8。我们的过滤器会使用这个位置：
- en: '[PRE17]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Sample Capture Filter Expressions**'
  id: totrans-179
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**示例捕获过滤器表达式**'
- en: You will often find that the success or failure of your analysis depends on
    your ability to create filters appropriate for your current situation. [Table
    4-3](ch04.xhtml#ch04tab3) shows a few common capture filters that you might use
    frequently.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你会经常发现，你的分析成功与否取决于你是否能够为当前情况创建合适的过滤器。[表 4-3](ch04.xhtml#ch04tab3)展示了一些你可能经常使用的常见捕获过滤器。
- en: '**Table 4-3:** Commonly Used Capture Filters'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4-3：** 常用的捕获过滤器'
- en: '| **Filter** | **Description** |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| **过滤器** | **描述** |'
- en: '| --- | --- |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `tcp[13] & 32 == 32` | TCP packets with the URG flag set |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] & 32 == 32` | TCP 数据包中 URG 标志位被设置 |'
- en: '| `tcp[13] & 16 == 16` | TCP packets with the ACK flag set |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] & 16 == 16` | TCP 数据包中 ACK 标志位被设置 |'
- en: '| `tcp[13] & 8 == 8` | TCP packets with the PSH flag set |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] & 8 == 8` | TCP 数据包中 PSH 标志位被设置 |'
- en: '| `tcp[13] & 4 == 4` | TCP packets with the RST flag set |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] & 4 == 4` | TCP 数据包中 RST 标志位被设置 |'
- en: '| `tcp[13] & 2 == 2` | TCP packets with the SYN flag set |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] & 2 == 2` | TCP 数据包中 SYN 标志位被设置 |'
- en: '| `tcp[13] & 1 == 1` | TCP packets with the FIN flag set |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] & 1 == 1` | TCP 数据包中 FIN 标志位被设置 |'
- en: '| `tcp[13] == 18` | TCP SYN-ACK packets |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `tcp[13] == 18` | TCP SYN-ACK 数据包 |'
- en: '| `ether host` 00`:`00`:`00`:`00`:`00`:`00 | Traffic to or from your MAC address
    |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `ether host` 00`:`00`:`00`:`00`:`00`:`00 | 属于或来自你 MAC 地址的流量 |'
- en: '| `!ether host` 00`:`00`:`00`:`00`:`00`:`00 | Traffic not to or from your MAC
    address |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `!ether host` 00`:`00`:`00`:`00`:`00`:`00 | 不属于或来自你 MAC 地址的流量 |'
- en: '| `broadcast` | Broadcast traffic only |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `broadcast` | 仅广播流量 |'
- en: '| `icmp` | ICMP traffic |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `icmp` | ICMP 流量 |'
- en: '| `icmp[0:2] == 0x0301` | ICMP destination unreachable, host unreachable |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `icmp[0:2] == 0x0301` | ICMP 目标不可达，主机不可达 |'
- en: '| `ip` | IPv4 traffic only |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `ip` | 仅 IPv4 流量 |'
- en: '| `ip6` | IPv6 traffic only |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `ip6` | 仅 IPv6 流量 |'
- en: '| `udp` | UDP traffic only |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `udp` | 仅 UDP 流量 |'
- en: '***Display Filters***'
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***显示过滤器***'
- en: A display filter is one that, when applied to a capture file, tells Wireshark
    to display only packets that match that filter. You can enter a display filter
    in the Filter text box above the Packet List pane.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 显示过滤器是指，当应用于捕获文件时，告诉 Wireshark 只显示匹配该过滤器的数据包。你可以在数据包列表窗格上方的过滤器文本框中输入显示过滤器。
- en: Display filters are used more often than capture filters because they allow
    you to filter the packet data you see without actually omitting the rest of the
    data in the capture file. That way, if you need to revert to the original capture,
    you can simply clear the filter expression. They are also a lot more powerful
    thanks to Wireshark’s extensive library of packet dissectors.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 显示过滤器比捕获过滤器使用得更频繁，因为它们允许你筛选你看到的数据包，而不会实际删除捕获文件中的其他数据。这样，如果你需要恢复到原始捕获文件，你只需清除过滤器表达式即可。由于
    Wireshark 拥有大量的协议分析器，显示过滤器也更为强大。
- en: As an example, in some situations, you might use a display filter to clear irrelevant
    broadcast traffic from a capture file by filtering out ARP broadcasts from the
    Packet List pane when those packets don’t relate to the current problem being
    analyzed. However, because those ARP broadcast packets may be useful later, it’s
    better to filter them temporarily than it is to delete them.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在某些情况下，你可能会使用显示过滤器从捕获文件中过滤掉无关的广播流量，比如当这些数据包与当前分析的问题无关时，从数据包列表窗格中过滤掉 ARP 广播数据包。然而，由于这些
    ARP 广播数据包以后可能会有用，所以最好是临时过滤它们，而不是删除它们。
- en: To filter out all ARP packets in the capture window, place your cursor in the
    Filter text box at the top of the Packet List pane and enter !arp to remove all
    ARP packets from the list ([Figure 4-16](ch04.xhtml#ch04fig16)). To remove the
    filter, click the **X** button, and to save the filter for later, click the plus
    (+) button.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要在捕获窗口中过滤掉所有 ARP 数据包，将光标置于数据包列表窗格上方的过滤器文本框中，输入 !arp 即可从列表中移除所有 ARP 数据包（见[图 4-16](ch04.xhtml#ch04fig16)）。要移除过滤器，点击**X**按钮；要保存过滤器以供以后使用，点击加号（+）按钮。
- en: '![image](../images/f71-01.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f71-01.jpg)'
- en: '*Figure 4-16: Creating a display filter using the Filter text box above the
    Packet List pane*'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-16：使用位于数据包列表窗格上方的过滤器文本框创建显示过滤器*'
- en: There are two ways to apply display filters. One is to apply them directly using
    the appropriate syntax, as we did in this example. Another is to use the Display
    Filter Expression dialog to build your filter iteratively; this is the easier
    method when you are first starting to use filters. Let’s explore both methods,
    starting with the easier first.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种应用显示过滤器的方法。一种是使用适当的语法直接应用，就像我们在这个例子中做的那样。另一种是使用显示过滤器表达式对话框逐步构建过滤器；当你刚开始使用过滤器时，这种方法更容易。让我们从更简单的方法开始，依次探讨两种方法。
- en: '**The Display Filter Expression Dialog**'
  id: totrans-207
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**显示过滤器表达式对话框**'
- en: The Display Filter Expression dialog, shown in [Figure 4-17](ch04.xhtml#ch04fig17),
    makes it easy for novice Wireshark users to create capture and display filters.
    To access this dialog, click the **Expression** button on the Filter toolbar.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 显示过滤器表达式对话框，如[图 4-17](ch04.xhtml#ch04fig17)所示，便于新手 Wireshark 用户创建捕获和显示过滤器。要访问此对话框，点击过滤器工具栏上的**表达式**按钮。
- en: '![image](../images/f72-01.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f72-01.jpg)'
- en: '*Figure 4-17: The Display Filter Expression dialog allows for the easy creation
    of filters in Wireshark.*'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-17：显示过滤器表达式对话框允许在 Wireshark 中轻松创建过滤器。*'
- en: 'The left side of the dialog lists all possible protocol fields, and these fields
    specify all possible filter criteria. To create a filter, follow these steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框的左侧列出了所有可能的协议字段，这些字段指定了所有可能的过滤标准。要创建过滤器，请按照以下步骤操作：
- en: To view the criteria fields associated with a protocol, expand that protocol
    by clicking the arrow symbol next to it. Once you find the criterion you want
    to base your filter on, click to select it.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 若要查看与某个协议相关的标准字段，点击该协议旁边的箭头符号展开它。找到你想基于其创建过滤器的标准后，点击选中它。
- en: Choose how your selected field will relate to the criterion value you supply.
    This relation is specified as equal to, greater than, less than, and so on.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你所选字段与所提供的标准值之间的关系。这个关系可以是等于、大于、小于等。
- en: Create your filter expression by specifying a criterion value that will relate
    to your selected field. You can define this value or select it from predefined
    ones programmed into Wireshark.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过指定与所选字段相关的标准值来创建你的过滤器表达式。你可以定义此值，或者从 Wireshark 中预定义的选项中选择。
- en: Your complete filter will be displayed at the bottom of the screen. When you’ve
    finished, click **OK** to insert it into the filter bar.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的完整过滤器将在屏幕底部显示。当你完成后，点击 **OK** 将其插入过滤栏。
- en: The Display Filter Expression dialog is great for novice users, but once you
    get the hang of things, you’ll find that manually entering filter expressions
    greatly increases your efficiency. The display filter expression syntax structure
    is simple, yet extremely powerful.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 显示过滤器表达式对初学者来说很有帮助，但一旦你掌握了操作，你会发现手动输入过滤表达式可以大大提高效率。显示过滤器表达式的语法结构简单而强大。
- en: '**The Filter Expression Syntax Structure**'
  id: totrans-217
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**过滤表达式语法结构**'
- en: When you begin using Wireshark more, you will want to start using the display
    filter syntax directly in the main window to save time. Fortunately, the syntax
    used for display filters follows a standard scheme and is easy to navigate. In
    most cases, this scheme is protocol-centric and follows the format protocol`.`feature`.`subfeature,
    as you saw when looking at the Display Filter Expression dialog. Now we will look
    at a few examples.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始更多地使用 Wireshark 时，你会希望直接在主窗口中使用显示过滤器语法，以节省时间。幸运的是，显示过滤器使用的语法遵循标准方案，易于导航。在大多数情况下，这个方案是以协议为中心的，遵循协议`.`特性`.`子特性`的格式，正如你在查看显示过滤器表达式对话框时看到的。现在我们来看一些例子。
- en: You will most often use a capture or display filter to see packets based on
    a specific protocol alone. For example, say you are troubleshooting a TCP problem
    and you want to see only TCP traffic in a capture file. If so, a simple `tcp`
    filter will do the job.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你最常使用捕获或显示过滤器来查看基于特定协议的包。例如，假设你正在排查一个 TCP 问题，并且你只想查看捕获文件中的 TCP 流量。如果是这样，使用简单的
    `tcp` 过滤器就可以完成任务。
- en: Now let’s look at things from the other side of the fence. Imagine that in the
    course of troubleshooting your TCP problem, you have used the ping utility quite
    a bit, thereby generating a lot of ICMP traffic. You could remove this ICMP traffic
    from your capture file with the filter `expression !icmp`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们从另一角度来看问题。假设在排查你的 TCP 问题时，你已经使用了 ping 工具很多次，因此生成了大量的 ICMP 流量。你可以通过过滤器 `expression
    !icmp` 从你的捕获文件中去除这些 ICMP 流量。
- en: 'Comparison operators allow you to compare values. For example, when troubleshooting
    TCP/IP networks, you will often need to view all packets that reference a particular
    IP address. The equal to comparison operator (`==`) will allow you to create a
    filter showing all packets with an IP address of 192.168.0.1:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 比较操作符允许你比较值。例如，在排查 TCP/IP 网络问题时，你经常需要查看所有涉及特定 IP 地址的包。等于比较操作符（`==`）将允许你创建一个过滤器，显示所有
    IP 地址为 192.168.0.1 的包：
- en: '[PRE18]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now suppose that you need to view only packets that are less than 128 bytes.
    You can use the less than or equal to operator (`<=`) to accomplish this goal:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你只需要查看小于128字节的包。你可以使用小于或等于操作符（`<=`）来实现这个目标：
- en: '[PRE19]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[Table 4-4](ch04.xhtml#ch04tab4) shows Wireshark’s comparison operators.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-4](ch04.xhtml#ch04tab4) 显示了 Wireshark 的比较操作符。'
- en: '**Table 4-4:** Wireshark Filter Expression Comparison Operators'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4-4：** Wireshark 过滤表达式比较操作符'
- en: '| **Operator** | **Description** |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| **操作符** | **描述** |'
- en: '| --- | --- |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `==` | Equal to |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 等于 |'
- en: '| `!=` | Not equal to |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 不等于 |'
- en: '| `>` | Greater than |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 |'
- en: '| `<` | Less than |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 |'
- en: '| `>=` | Greater than or equal to |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 |'
- en: '| `<=` | Less than or equal to |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 |'
- en: 'Logical operators allow you to combine multiple filter expressions into one
    statement, dramatically increasing the effectiveness of your filters. For example,
    say that you’re interested in displaying only packets to two IP addresses. You
    can use the `or` operator to create one expression that will display packets containing
    either IP address, like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑操作符允许你将多个过滤表达式组合成一个语句，从而大大提高过滤器的有效性。例如，假设你只对显示两个 IP 地址的包感兴趣。你可以使用 `or` 操作符创建一个表达式，显示包含任一
    IP 地址的包，如下所示：
- en: '[PRE20]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[Table 4-5](ch04.xhtml#ch04tab5) lists Wireshark’s logical operators.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 4-5](ch04.xhtml#ch04tab5) 列出了 Wireshark 的逻辑操作符。'
- en: '**Table 4-5:** Wireshark Filter Expression Logical Operators'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4-5：** Wireshark 过滤表达式逻辑操作符'
- en: '| **Operator** | **Description** |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| **操作符** | **描述** |'
- en: '| --- | --- |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `and` | Both conditions must be true. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `and` | 两个条件必须都为真。 |'
- en: '| `or` | Either one of the conditions must be true. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `or` | 其中一个条件必须为真。 |'
- en: '| `xor` | One and only one condition must be true. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `xor` | 必须且仅有一个条件为真。 |'
- en: '| `not` | Neither one of the conditions is true. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `not` | 两个条件都不为真。 |'
- en: '**Sample Display Filter Expressions**'
  id: totrans-245
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**示例显示过滤器表达式**'
- en: Although the concepts related to creating filter expressions are fairly simple,
    you will need to use several specific keywords and operators when creating new
    filters for various problems. [Table 4-6](ch04.xhtml#ch04tab6) shows some of the
    display filters that I use most often. For a complete list, see the Wireshark
    display filter reference at *[http://www.wireshark.org/docs/dfref/](http://www.wireshark.org/docs/dfref/)*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管创建过滤器表达式的概念相对简单，但在为各种问题创建新过滤器时，你需要使用一些特定的关键词和运算符。[表 4-6](ch04.xhtml#ch04tab6)展示了我最常用的一些显示过滤器。有关完整的列表，请参考
    Wireshark 显示过滤器参考文档，网址为 *[http://www.wireshark.org/docs/dfref/](http://www.wireshark.org/docs/dfref/)*。
- en: '**Table 4-6:** Commonly Used Display Filters'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 4-6：** 常用显示过滤器'
- en: '| **Filter** | **Description** |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| **过滤器** | **描述** |'
- en: '| --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `!tcp.port==3389` | Filter out RDP traffic |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `!tcp.port==3389` | 过滤掉 RDP 流量 |'
- en: '| `tcp.flags.syn==1` | TCP packets with the SYN flag set |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `tcp.flags.syn==1` | 带 SYN 标志的 TCP 数据包 |'
- en: '| `tcp.flags.reset==1` | TCP packets with the RST flag set |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `tcp.flags.reset==1` | 带 RST 标志的 TCP 数据包 |'
- en: '| `!arp` | Clear ARP traffic |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `!arp` | 清除 ARP 流量 |'
- en: '| `http` | All HTTP traffic |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `http` | 所有 HTTP 流量 |'
- en: '| `tcp.port==23 &#124;&#124; tcp.port==21` | Telnet or FTP traffic |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `tcp.port==23 &#124;&#124; tcp.port==21` | Telnet 或 FTP 流量 |'
- en: '| `smtp &#124;&#124; pop &#124;&#124; imap` | Email traffic (SMTP, POP, or
    IMAP) |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `smtp &#124;&#124; pop &#124;&#124; imap` | 邮件流量（SMTP、POP 或 IMAP） |'
- en: '***Saving Filters***'
  id: totrans-257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***保存过滤器***'
- en: 'Once you begin creating a lot of capture and display filters, you will find
    that you use certain ones frequently. Fortunately, you don’t need to type these
    in each time you want to use them, because Wireshark lets you save your filters
    for later use. To save a custom capture filter, follow these steps:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始创建大量的捕获和显示过滤器，你会发现自己经常使用某些过滤器。幸运的是，你不需要每次都输入这些过滤器，因为 Wireshark 允许你保存过滤器以便后续使用。要保存自定义捕获过滤器，请按照以下步骤操作：
- en: Select **Capture** ▶ **Capture Filters** to open the Capture Filter dialog.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **捕获** ▶ **捕获过滤器**，以打开捕获过滤器对话框。
- en: Create a new filter by clicking the plus (+) button on the lower left side of
    the dialog.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击对话框左下角的加号（+）按钮来创建一个新过滤器。
- en: Enter a name for your filter in the Filter Name box.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“过滤器名称”框中输入过滤器名称。
- en: Enter the actual filter expression in the Filter String box.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“过滤器字符串”框中输入实际的过滤器表达式。
- en: Click the **OK** button to save your filter expression in the list.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**按钮，将过滤器表达式保存到列表中。
- en: 'To save a custom display filter, follow these steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存自定义显示过滤器，请按照以下步骤操作：
- en: Type your filter into the Filter bar above the Packet List pane in the main
    window and click the **ribbon** button on the left side of the bar.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主窗口的“数据包列表”面板上方的过滤器栏中输入你的过滤器，并点击栏左侧的**按钮**。
- en: Click the **Save this Filter** option, and a list of saved display filters will
    be presented in a separate dialog. There you can provide a name for your filter
    before clicking **OK** to save it ([Figure 4-18](ch04.xhtml#ch04fig18)).
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存此过滤器**选项，将在单独的对话框中显示已保存的显示过滤器列表。在此，你可以为过滤器提供名称，之后点击**确定**以保存它（[图 4-18](ch04.xhtml#ch04fig18)）。
- en: '![image](../images/f75-01.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f75-01.jpg)'
- en: '*Figure 4-18: You can save display filters directly from the main toolbar.*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-18：你可以直接从主工具栏保存显示过滤器。*'
- en: '***Adding Display Filters to a Toolbar***'
  id: totrans-269
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***将显示过滤器添加到工具栏***'
- en: 'If you have filters that you find yourself flipping on and off frequently,
    one of the easiest ways to interact with them is to add filter toggles to the
    Filter bar just above the Packet List pane. To do this, complete the following
    steps:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己频繁切换的过滤器，一个最简单的操作方式是将过滤器切换按钮添加到数据包列表面板上方的过滤器栏中。为此，完成以下步骤：
- en: Type your filter into the Filter bar above the Packet List pane in the main
    window and click the plus (+) button on the right side of the bar.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主窗口的数据包列表面板上方的过滤器栏中输入过滤器，并点击栏右侧的加号（+）按钮。
- en: A new bar will display below the Filter bar where you can provide a name for
    your filter in the Label field ([Figure 4-19](ch04.xhtml#ch04fig19)). This is
    the label that will be used to represent the filter on the toolbar. Once you’ve
    input something in this field, click **OK** to create a shortcut to this expression
    in the Filter toolbar.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在过滤器栏下方会显示一个新栏，在该栏中你可以在标签字段中为你的过滤器提供一个名称（[图 4-19](ch04.xhtml#ch04fig19)）。这是将在工具栏上表示该过滤器的标签。一旦你在此字段中输入内容，点击**确定**即可在过滤器工具栏中创建该表达式的快捷方式。
- en: '![image](../images/f76-01.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f76-01.jpg)'
- en: '*Figure 4-19: Adding a filter expression shortcut to the Filter toolbar*'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-19：将过滤器表达式快捷方式添加到过滤器工具栏*'
- en: As you can see in [Figure 4-20](ch04.xhtml#ch04fig20), we’ve created a shortcut
    to a filter that will quickly show any TCP packets with the RST flag enabled.
    Additions to the filtering toolbar are saved to your configuration profile (as
    discussed in [Chapter 3](ch03.xhtml#ch03)), making them a powerful way to enhance
    your ability to identify problems in packet captures in various scenarios.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[图 4-20](ch04.xhtml#ch04fig20)中看到的，我们创建了一个快捷方式，可以快速显示所有启用了 RST 标志的 TCP 数据包。对过滤工具栏的添加会保存在你的配置文件中（如[第
    3 章](ch03.xhtml#ch03)中所讨论的），使它们成为增强你在各种场景下识别数据包捕获问题能力的有力工具。
- en: '![image](../images/f76-02.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f76-02.jpg)'
- en: '*Figure 4-20: Filtering using a toolbar shortcut*'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 4-20：使用工具栏快捷方式进行过滤*'
- en: Wireshark includes several built-in filters that are great examples of what
    a filter should look like. You’ll want to use them (together with the Wireshark
    help pages) when creating your own filters. We’ll use filters in examples throughout
    this book.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Wireshark 包含了几个内置的过滤器，这些过滤器是过滤器应有样子的很好的示例。在创建自己的过滤器时，你会希望使用它们（以及 Wireshark 帮助页面）。在本书的示例中，我们将使用这些过滤器。
