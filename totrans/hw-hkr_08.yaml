- en: Part 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: what open hardware means to me
  prefs: []
  type: TYPE_NORMAL
- en: Before there was open hardware, hardware was open.
  prefs: []
  type: TYPE_NORMAL
- en: A yellow, tattered sheet of paper hanging next to my monitors—the schematic
    for the Apple II computer—reminds me of that fact every day. When I got the schematic
    as a child, it became a blueprint for the rest of my life. I couldn’t understand
    the schematic, but that didn’t matter; it taught me that *hardware is knowable*.
    It empowered me to understand my world and master the technology I relied on.
    That empowerment propels me to this day.
  prefs: []
  type: TYPE_NORMAL
- en: 'The legal doctrine of open source was still nascent when the Apple II was created,
    so while anyone can read the schematic, it bears no open source license. It simply
    shows the patent number 4,136,359\. Back then, people just shared ideas—until
    investors with lawyers came along and tragically spoiled the commons. The software
    community defended itself with the same tools used against it: primarily, copyright
    law.'
  prefs: []
  type: TYPE_NORMAL
- en: Copyright law originally applied to literary and artistic works. Today it also
    applies to computer code because, like literature and art, code is a form of expressive
    speech. In the same way that you can copyright a painting of the Grand Canyon
    but not the Grand Canyon itself, you can copyright an implementation of Quicksort
    in C but not Quicksort itself. To ensure source code could be shared freely, the
    software community created open source licenses. Those licenses range from *copyleft*
    (that is, openness begets openness) arrangements like the GNU Public License (GPL)
    to more permissive agreements that boil down to “acknowledge me, don’t sue me,
    and otherwise do as you wish,” like the Berkeley Software Distribution (BSD) licenses.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware blueprints can be protected by copyright, too, but blueprints are functional,
    so defining “open hardware” is trickier. Virtually every piece of hardware used
    to ship with a schematic. Somewhere along the way, however, it became impossible
    for users to service hardware themselves without breaking its warranty. Devices
    are now filled with trade secrets. This shift created an artificial distinction
    between closed and open hardware. I say “artificial” because while software can
    be encrypted with ciphers so strong you’d have to build a planetsized computer
    to break them, you can reverse any hardware design into a schematic, given a powerful
    enough microscope and the software to stitch and process the resulting images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The internet is littered with well-intentioned but misguided attempts to apply
    software-centric open copyright licenses to hardware. But using a software license
    on a piece of hardware is like filing a marriage license for a corporate merger:
    while the license conveys the author’s intent, it may not actually do anything.
    For example, the text of the GPL doesn’t use the word *hardware* once, meaning
    a court could rule that the GPL doesn’t legally apply to hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: Some hardware-specific open licenses have been created to help rectify the situation
    (the CERN OHL is a decent copyleft-style hardware license), but the community
    is divided over how much of the creation process has to be open for a piece of
    hardware to be considered open. For instance, if I share schematics for a board
    I designed using a closed-source tool, many would argue that the design does not
    qualify as open source. But even if I designed the board using a schematic capture
    and layout tool that was free and open source software (F/OSS) compliant, what
    about the designs of the silicon chips it uses or the bits of firmware burned
    into the silicon? Do we need to see blueprints of the particle accelerators used
    to shoot dopants into the silicon? What about the machine used to engrave the
    masks used for silicon production? It’s turtles all the way down. Hardware can’t
    be purely open source, because at some point, ideas must translate into matter,
    and access to the objects required to transform and shape matter is rarely open
    to the community.
  prefs: []
  type: TYPE_NORMAL
- en: There are, however, much more pragmatic approaches to open hardware than doing
    electron microscopy or demanding open silicon foundries. Simply sharing blueprints
    at a given layer of abstraction takes much less effort, is more intuitive, and
    still has a positive effect. The shanzhai’s gray-market style of open source,
    which I referred to in earlier chapters as *gongkai*, reaps the benefits of such
    sharing. In China, blueprints are shared publicly, but under dubious terms. Most
    designs still bear “confidential” or “proprietary” copyright notices, and the
    shanzhai use pirated copies of professional-grade, closed source design software
    to create derivative works. But at the end of the day, this laissez-faire openness
    creates an ecosystem where hundreds of small companies make a living repairing
    or building mobile phones. Walking through the electronics markets of Shenzhen
    made me realize that building a phone isn’t difficult or scary. Communities outside
    the shanzhai just don’t feel empowered to peer inside the box, due to restrictive
    IP laws.
  prefs: []
  type: TYPE_NORMAL
- en: 'The gongkai ecosystem, explored in Part 2, values intellectual and physical
    property almost equally. Schematics without a supply chain are useless: you can’t
    make a phone call with blueprints for a phone. Likewise, chipmakers have no business
    if no products use their chips. As a result, hardware creators have a natural
    incentive to share information, particularly the information necessary to design
    a given module or chip into a larger system. Getting a customer to adopt chip-specific
    design IP virtually guarantees that customer will purchase the same chips when
    they’re ready to bring a product to mass production. This balance between IP and
    the supply chain has been difficult to strike in IP-centric Western ecosystems,
    where ideas are much more valuable than factories. This may partially explain
    why so many manufacturing jobs have migrated to China, an ecosystem that more
    comparably values the production of products and the ideas behind them.'
  prefs: []
  type: TYPE_NORMAL
- en: I’m optimistic that with consistent effort, growing public awareness, and the
    right economic conditions, the world’s hardware ecosystem will eventually yield
    an open silicon foundry. However, until then, “open hardware” has to be a more
    pragmatic concept that is constrained to exist within certain layers of abstraction.
    After all, just being able to share blueprints (even if the licenses aren’t perfect
    and the formats aren’t easily edited) dramatically affects innovation. The shanzhai
    are living proof.
  prefs: []
  type: TYPE_NORMAL
- en: Whether it’s gongkai or open source, open hardware is about empowering users
    to be the masters of their own technology, not about any specific legal arrangement.
    Damn the torpedoes—full speed ahead! The freedom to learn, tinker, and improve
    technology is so core to my person that I view it as a basic human right. Freedom
    atrophies if not exercised, which is why I actively defend this freedom. I share
    my work openly, hoping to empower others and raise awareness that technology is
    knowable. We’re not slaves to our computers or the corporations that build them.
  prefs: []
  type: TYPE_NORMAL
- en: I also challenge legislative and legal attempts to curtail our freedoms. I was
    born into a DMCA-free world; I’d like to leave the world in a similar state by
    establishing that everyone has the right to understand, repair, and modify the
    things they own. This is more important than ever as we become increasingly dependent
    upon technology. If we allow technology to become a black box, we also surrender
    our agency to the companies and governments that produce and regulate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part of the book describes how I built three open hardware platforms:
    chumby, Novena, and chibitronics. I hope that by reading my stories, you’ll also
    realize hardware is knowable and be empowered by this knowledge.'
  prefs: []
  type: TYPE_NORMAL
