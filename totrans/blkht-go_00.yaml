- en: INTRODUCTION
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: '![Image](Images/common.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![Image](Images/common.jpg)'
- en: For about six years, the three of us led one of North America’s largest dedicated
    penetration-testing consulting practices. As principal consultants, we executed
    technical project work, including network penetration tests, on behalf of our
    clients—but we also spearheaded the development of better tools, processes, and
    methodology. And at some point, we adopted Go as one of our primary development
    languages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大约六年来，我们三人领导了北美最大的一家专门从事渗透测试咨询的公司。作为首席顾问，我们为客户执行技术项目工作，包括网络渗透测试——但我们也主导了更好工具、流程和方法的开发。在某个时刻，我们将
    Go 作为我们主要的开发语言之一。
- en: Go provides the best features of other programming languages, striking a balance
    between performance, safety, and user-friendliness. Soon, we defaulted to it as
    our language of choice when developing tools. Eventually, we even found ourselves
    acting as advocates of the language, pushing for our colleagues in the security
    industry to try it. We felt the benefits of Go were at least worthy of consideration.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Go 提供了其他编程语言的最佳特性，在性能、安全性和用户友好性之间取得了平衡。很快，我们在开发工具时默认选择它作为我们的首选语言。最终，我们甚至发现自己变成了
    Go 语言的倡导者，推动我们在安全行业的同事尝试它。我们觉得 Go 的优势至少值得考虑。
- en: In this book, we’ll take you on a journey through the Go programming language
    from the perspective of security practitioners and hackers. Unlike other hacking
    books, we won’t just show you how to automate third-party or commercial tools
    (although we’ll touch on that a little). Instead, we’ll delve into practical and
    diverse topics that approach a specific problem, protocol, or tactic useful to
    adversaries. We’ll cover TCP, HTTP, and DNS communications, interact with Metasploit
    and Shodan, search filesystems and databases, port exploits from other languages
    to Go, write the core functions of an SMB client, attack Windows, cross-compile
    binaries, mess with crypto, call C libraries, interact with the Windows API, and
    much, much more. It’s ambitious! We’d better begin . . .
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将带你通过从安全实践者和黑客的角度，了解 Go 编程语言的旅程。与其他黑客书籍不同，我们不仅仅是向你展示如何自动化第三方或商业工具（虽然我们会稍微涉及一下）。相反，我们将深入探讨实用且多样化的话题，解决具体问题、协议或战术，这些对于对手来说非常有用。我们将涵盖
    TCP、HTTP 和 DNS 通信，交互使用 Metasploit 和 Shodan，搜索文件系统和数据库，将其他语言的漏洞利用移植到 Go，编写 SMB
    客户端的核心功能，攻击 Windows，进行跨平台编译，破解加密，调用 C 库，交互使用 Windows API，等等，等等。这是一个雄心勃勃的计划！我们最好还是开始吧……
- en: Who This Book Is For
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书适合谁阅读
- en: This book is for anyone who wants to learn how to develop their own hacking
    tools using Go. Throughout our professional careers, and particularly as consultants,
    we’ve advocated for programming as a fundamental skill for penetration testers
    and security professionals. Specifically, the ability to code enhances your understanding
    of how software works and how it can be broken. Also, if you’ve walked in a developer’s
    shoes, you’ll gain a more holistic appreciation for the challenges they face in
    securing software, and you can use your personal experience to better recommend
    mitigations, eliminate false positives, and locate obscure vulnerabilities. Coding
    often forces you to interact with third-party libraries and various application
    stacks and frameworks. For many people (us included), it’s hands-on experience
    and tinkering that leads to the greatest personal development.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书适用于任何想要学习如何使用 Go 开发自己黑客工具的人。在我们的职业生涯中，特别是作为顾问时，我们一直倡导编程作为渗透测试员和安全专业人员的基本技能。具体来说，编程能力能增强你对软件如何工作的理解，并帮助你了解它如何被攻破。此外，如果你曾经站在开发人员的角度，你将对他们在确保软件安全方面面临的挑战有更全面的认识，并可以利用你的个人经验更好地推荐缓解措施，消除误报，找到隐蔽的漏洞。编程通常迫使你与第三方库以及各种应用栈和框架进行互动。对于许多人（包括我们自己）来说，正是动手实践和调试使得个人成长达到最大。
- en: To get the most out of this book, we encourage you to clone the book’s official
    code repository so you have all the working examples we’ll discuss. Find the examples
    at [*https://github.com/blackhat-go/bhg/*](https://github.com/blackhat-go/bhg/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本书的内容，我们鼓励你克隆本书的官方代码仓库，这样你就可以获得我们讨论的所有工作示例。可以在 [*https://github.com/blackhat-go/bhg/*](https://github.com/blackhat-go/bhg/)
    找到这些示例。
- en: What This Book Isn’t
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本书的内容不包括
- en: This book is not an introduction to Go programming in general but an introduction
    to using Go for developing security tools. We are hackers and then coders—in that
    order. None of us have ever been software engineers. This means that, as hackers,
    we put a premium on function over elegance. In many instances, we’ve opted to
    code as hackers do, disregarding some of the idioms or best practices of software
    design. As consultants, time is always scarce; developing simpler code is often
    faster and, therefore, preferable over elegance. When you need to quickly create
    a solution to a problem, style concerns come secondary.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不是 Go 编程的入门书，而是介绍如何使用 Go 开发安全工具。我们是黑客，首先是黑客，然后才是编码员——按这个顺序。我们中没有人是软件工程师。这意味着，作为黑客，我们更看重功能而非优雅。在许多情况下，我们选择像黑客一样编程，不拘泥于一些软件设计的习惯用法或最佳实践。作为顾问，时间总是稀缺的；开发简化的代码通常更快，因此，比起优雅，简化的代码更受青睐。当你需要迅速为问题创建解决方案时，风格上的考虑就显得不那么重要。
- en: This is bound to anger Go purists, who will likely tweet at us that we don’t
    gracefully handle all error conditions, that our examples could be optimized,
    or that better constructs or methods are available to produce the desired results.
    We’re not, in most cases, concerned with teaching you the best, the most elegant,
    or 100 percent idiomatic solutions, unless doing so will concretely benefit the
    end result. Although we’ll briefly cover the language syntax, we do so purely
    to establish a baseline foundation upon which we can build. After all, this isn’t
    *Learning to Program Elegantly with Go*—this is *Black Hat Go*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会激怒 Go 的纯粹主义者，他们可能会在 Twitter 上对我们发火，指责我们没有优雅地处理所有错误条件，指责我们的示例可以优化，或者说有更好的构造或方法来产生期望的结果。在大多数情况下，我们并不关心教给你最佳、最优雅的或
    100% 地道的解决方案，除非这样做能实际改善最终结果。虽然我们会简要介绍语言语法，但这么做纯粹是为了建立一个可以进一步发展的基础。毕竟，这不是《用 Go
    优雅编程》——这是《黑帽 Go》。
- en: Why Use Go for Hacking?
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择 Go 来进行黑客攻击？
- en: Prior to Go, you could prioritize ease of use by using dynamically typed languages—such
    as Python, Ruby, or PHP—at the expense of performance and safety. Alternatively,
    you could choose a statically typed language, like C or C++, that offers high
    performance and safety but isn’t very user-friendly. Go is stripped of much of
    the ugliness of C, its primary ancestor, making development more user-friendly.
    At the same time, it’s a statically typed language that produces syntax errors
    at compile time, increasing your assurance that your code will actually run safely.
    As it’s compiled, it performs more optimally than interpreted languages and was
    designed with multicore computing considerations, making concurrent programming
    a breeze.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Go 之前，你可以通过使用动态类型语言——如 Python、Ruby 或 PHP——来优先考虑易用性，但这会牺牲性能和安全性。或者，你可以选择像
    C 或 C++ 这样的静态类型语言，它提供高性能和安全性，但不太友好。Go 去除了 C（其主要祖先）中的许多丑陋特性，使得开发更加友好。与此同时，它是一种静态类型语言，在编译时会产生语法错误，增加了你的代码能安全运行的保障。由于它是编译型语言，Go
    的性能优于解释型语言，并且它在设计时考虑了多核计算，使得并发编程变得轻松自如。
- en: 'These reasons for using Go don’t concern security practitioners specifically.
    However, many of the language’s features are particularly useful for hackers and
    adversaries:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Go 的这些原因与安全从业者并无直接关系。然而，许多语言特性对于黑客和对手尤其有用：
- en: '**Clean package management system** Go’s package management solution is elegant
    and integrated directly with Go’s tooling. Through the use of the `go` binary,
    you can easily download, compile, and install packages and dependencies, which
    makes consuming third-party libraries simple and generally free from conflict.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**简洁的包管理系统** Go 的包管理解决方案优雅且与 Go 的工具直接集成。通过使用 `go` 二进制文件，你可以轻松地下载、编译和安装包及其依赖项，这使得使用第三方库变得简单，并且通常避免冲突。'
- en: '**Cross-compilation** One of the best features in Go is its ability to cross-compile
    executables. So long as your code doesn’t interact with raw C, you can easily
    write code on your Linux or Mac system but compile the code in a Windows-friendly,
    Portable Executable format.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**交叉编译** Go 最棒的特性之一就是它能够交叉编译可执行文件。只要你的代码不与原生 C 代码交互，你就可以轻松地在 Linux 或 Mac 系统上编写代码，并将其编译为
    Windows 友好的可移植执行文件格式。'
- en: '**Rich standard library** Time spent developing in other languages has helped
    us appreciate the extent of Go’s standard library. Many modern languages lack
    the standard libraries required to perform many common tasks such as crypto, network
    communications, database connectivity, and data encoding (JSON, XML, Base64, hex).
    Go includes many of these critical functions and libraries as part of the language’s
    standard packaging, reducing the effort necessary to correctly set up your development
    environment or to call the functions.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**丰富的标准库** 在其他语言的开发过程中所花费的时间帮助我们更好地认识到 Go 标准库的广度。许多现代语言缺乏执行许多常见任务所需的标准库，例如加密、网络通信、数据库连接和数据编码（JSON、XML、Base64、十六进制）。Go
    将许多这些关键功能和库作为语言标准包的一部分，从而减少了正确设置开发环境或调用函数所需的工作量。'
- en: '**Concurrency** Unlike languages that have been around longer, Go was released
    around the same time as the initial mainstream multicore processors became available.
    For this reason, Go’s concurrency patterns and performance optimizations are tuned
    specifically to this model.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**并发性** 与那些已经存在更长时间的语言不同，Go 是在最初的主流多核处理器发布时问世的。因此，Go 的并发模式和性能优化特别针对这一模型进行调整。'
- en: Why You Might Not Love Go
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么你可能不喜欢 Go
- en: 'We recognize that Go isn’t a perfect solution to every problem. Here are some
    of the downsides of the language:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们承认 Go 并不是解决每个问题的完美方案。以下是该语言的一些缺点：
- en: '**Binary size** ’Nuff said. When you compile a binary in Go, the binary is
    likely to be multiple megabytes in size. Of course, you can strip debugging symbols
    and use a packer to help reduce the size, but these steps require attention. This
    can be a drawback, particularly for security practitioners who need to attach
    a binary to an email, host it on a shared filesystem, or transfer it over a network.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**二进制大小** 说得够多了。当你在 Go 中编译一个二进制文件时，生成的二进制文件通常会达到几兆字节。当然，你可以去除调试符号并使用压缩工具帮助减小文件大小，但这些步骤需要额外关注。对于那些需要将二进制文件附加到电子邮件中、托管在共享文件系统上或通过网络传输的安全从业人员来说，这可能是一个缺点。'
- en: '**Verbosity** While Go is less verbose than languages like C#, Java, or even
    C/C++, you still might find that the simplistic language construct forces you
    to be overly expressive for things like lists (called *slices* in Go), processing,
    looping, or error handling. A Python one-liner might easily become a three-liner
    in Go.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**冗长性** 尽管 Go 比 C#、Java 甚至 C/C++ 等语言更简洁，但你仍然可能会发现，简化的语言结构迫使你在处理如列表（在 Go 中称为
    *slice*）、处理、循环或错误处理时表现得过于冗长。一个 Python 的单行代码在 Go 中可能会变成三行。'
- en: Chapter Overview
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节概述
- en: The first chapter of this book covers a basic overview of Go’s syntax and philosophy.
    Next, we start to explore examples that you can leverage for tool development,
    including various common network protocols like HTTP, DNS, and SMB. We then dig
    into various tactics and problems that we’ve encountered as penetration testers,
    addressing topics including data pilfering, packet sniffing, and exploit development.
    Finally, we take a brief step back to talk about how you can create dynamic, pluggable
    tools before diving into crypto, attacking Microsoft Windows, and implementing
    steganography.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第一章概述了 Go 的语法和哲学。接下来，我们将开始探索你可以利用来开发工具的示例，包括各种常见的网络协议，如 HTTP、DNS 和 SMB。然后，我们将深入探讨作为渗透测试人员时遇到的各种策略和问题，涉及数据窃取、数据包嗅探和漏洞开发等话题。最后，我们将简要回顾如何创建动态、可插拔的工具，然后再深入讨论加密、攻击
    Microsoft Windows 和实现隐写术。
- en: In many cases, there will be opportunities to extend the tools we show you to
    meet your specific objectives. Although we present robust examples throughout,
    our real intent is to provide you with the knowledge and foundation through which
    you can extend or rework the examples to meet your goals. We want to teach you
    to fish.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你将有机会扩展我们展示的工具，以满足你的特定目标。虽然我们在全书中呈现了强大的示例，但我们真正的目的在于为你提供知识和基础，使你能够扩展或重做这些示例，以实现你的目标。我们希望教你如何自力更生。
- en: Before you continue with anything in this book, please note that we—the authors
    and publisher—have created this content for legal usage only. We won’t accept
    any liability for the nefarious or illegal things you choose to do. All the content
    here is for educational purposes only; do not perform any penetration-testing
    activities against systems or applications without authorized consent.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '在继续阅读本书之前，请注意，我们——作者和出版社——仅为合法用途创建了这些内容。对于您选择从事的任何不当或非法行为，我们不承担任何责任。本书中的所有内容仅供教育用途；在未获得授权同意的情况下，请不要对系统或应用程序进行渗透测试。  '
- en: The sections that follow provide a brief overview of each chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '以下部分提供了每章的简要概述。  '
- en: '[Chapter 1: Go Fundamentals](ch01.xhtml)'
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第1章：Go 基础](ch01.xhtml)  '
- en: The goal of this chapter is to introduce the fundamentals of the Go programming
    language and provide a foundation necessary for understanding the concepts within
    this book. This includes an abridged review of basic Go syntax and idioms. We
    discuss the Go ecosystem, including supporting tools, IDEs, dependency management,
    and more. Readers new to the programming language can expect to learn the bare
    necessities of Go, which will allow them to, hopefully, comprehend, implement,
    and extend the examples in later chapters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '本章的目标是介绍 Go 编程语言的基础知识，并为理解本书中的概念提供必要的基础。这包括对基本 Go 语法和习惯用法的简要回顾。我们还会讨论 Go 生态系统，包括支持工具、集成开发环境（IDE）、依赖管理等内容。对于编程语言新手来说，可以通过本章学到
    Go 的基本知识，这将帮助他们理解、实现并扩展后续章节中的示例。  '
- en: '[Chapter 2: TCP, Scanners, and Proxies](ch02.xhtml)'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第2章：TCP、扫描器和代理](ch02.xhtml)  '
- en: This chapter introduces basic Go concepts and concurrency primitives and patterns,
    input/output (I/O), and the use of interfaces through practical TCP applications.
    We’ll first walk you through creating a simple TCP port scanner that scans a list
    of ports using parsed command line options. This will highlight the simplicity
    of Go code compared to other languages and will develop your understanding of
    basic types, user input, and error handling. Next, we’ll discuss how to improve
    the efficiency and speed of this port scanner by introducing concurrent functions.
    We’ll then introduce I/O by building a TCP proxy—a port forwarder—starting with
    basic examples and refining our code to create a more reliable solution. Lastly,
    we’ll re-create Netcat’s “gaping security hole” feature in Go, teaching you how
    to run operating system commands while manipulating stdin and stdout and redirecting
    them over TCP.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '本章介绍了基本的 Go 概念、并发原语和模式、输入/输出（I/O）以及通过实践 TCP 应用程序使用接口的方式。我们将首先引导你创建一个简单的 TCP
    端口扫描器，该扫描器使用解析后的命令行选项扫描一系列端口。这将突出 Go 代码相较于其他语言的简洁性，并加深你对基本数据类型、用户输入和错误处理的理解。接下来，我们将讨论如何通过引入并发函数来提高端口扫描器的效率和速度。然后，我们将通过构建一个
    TCP 代理（端口转发器）来引入 I/O，从简单的示例开始，逐步完善代码，创建一个更可靠的解决方案。最后，我们将用 Go 重现 Netcat 的“巨大安全漏洞”功能，教你如何在操作系统命令运行时操作
    stdin 和 stdout，并通过 TCP 重定向它们。  '
- en: '[Chapter 3: HTTP Clients and Remote Interaction with Tools](ch03.xhtml)'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第3章：HTTP 客户端和与工具的远程交互](ch03.xhtml)  '
- en: HTTP clients are a critical component to interacting with modern web server
    architectures. This chapter shows you how to create the HTTP clients necessary
    to perform a variety of common web interactions. You’ll handle a variety of formats
    to interact with Shodan and Metasploit. We’ll also demonstrate how to work with
    search engines, using them to scrape and parse document metadata so as to extract
    information useful for organizational profiling activities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'HTTP 客户端是与现代 Web 服务器架构交互的关键组件。本章将展示如何创建必要的 HTTP 客户端，以执行各种常见的 Web 交互。你将处理多种格式，以与
    Shodan 和 Metasploit 进行交互。我们还将演示如何使用搜索引擎，通过抓取和解析文档元数据来提取有助于组织档案分析的有用信息。  '
- en: '[Chapter 4: HTTP Servers, Routing, and Middleware](ch04.xhtml)'
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第4章：HTTP 服务器、路由和中间件](ch04.xhtml)  '
- en: This chapter introduces the concepts and conventions necessary for creating
    an HTTP server. We’ll discuss common routing, middleware, and templating patterns,
    leveraging this knowledge to create a credential harvester and keylogger. Lastly,
    we’ll demonstrate how to multiplex command-and-control (C2) connections by building
    a reverse HTTP proxy.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了创建 HTTP 服务器所需的概念和规范。我们将讨论常见的路由、中间件和模板化模式，并运用这些知识创建凭证采集器和键盘记录器。最后，我们将演示如何通过构建一个反向
    HTTP 代理来复用命令与控制（C2）连接。
- en: '[Chapter 5: Exploiting DNS](ch05.xhtml)'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第5章：利用 DNS](ch05.xhtml)  '
- en: This chapter introduces you to basic DNS concepts using Go. First, we’ll perform
    client operations, including how to look for particular domain records. Then we’ll
    show you how to write a custom DNS server and DNS proxy, both of which are useful
    for C2 operations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用 Go 进行基本 DNS 概念的操作。首先，我们将执行客户端操作，包括如何查找特定的域名记录。然后，我们将向您展示如何编写自定义 DNS
    服务器和 DNS 代理，这两者在 C2 操作中非常有用。
- en: '[Chapter 6: Interacting with SMB and NTLM](ch06.xhtml)'
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第6章：与 SMB 和 NTLM 交互](ch06.xhtml)'
- en: We’ll explore the SMB and NTLM protocols, using them as a basis for a discussion
    of protocol implementations in Go. Using a partial implementation of the SMB protocol,
    we’ll discuss the marshaling and unmarshaling of data, the usage of custom field
    tags, and more. We’ll discuss and demonstrate how to use this implementation to
    retrieve the SMB-signing policy, as well as perform password-guessing attacks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨 SMB 和 NTLM 协议，使用它们作为 Go 中协议实现讨论的基础。通过对 SMB 协议的部分实现，我们将讨论数据的序列化和反序列化、使用自定义字段标签等内容。我们将讨论并演示如何使用这一实现来检索
    SMB 签名策略，并进行密码猜测攻击。
- en: '[Chapter 7: Abusing Databases and Filesystems](ch07.xhtml)'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第7章：滥用数据库和文件系统](ch07.xhtml)'
- en: Pillaging data is a critical aspect of adversarial testing. Data lives in numerous
    resources, including databases and filesystems. This chapter introduces basic
    ways to connect to and interact with databases across a variety of common SQL
    and NoSQL platforms. You’ll learn the basics of connecting to SQL databases and
    running queries. We’ll show you how to search databases and tables for sensitive
    information, a common technique used during post-exploitation. We’ll also show
    how to walk filesystems and inspect files for sensitive information.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 数据掠夺是对抗性测试中的一个关键方面。数据存在于多种资源中，包括数据库和文件系统。本章介绍了如何在多种常见的 SQL 和 NoSQL 平台上连接并与数据库交互的基本方法。您将学习如何连接到
    SQL 数据库并运行查询。我们将向您展示如何在数据库和表中搜索敏感信息，这是在后期利用阶段常用的技术。我们还将演示如何遍历文件系统并检查文件中的敏感信息。
- en: '[Chapter 8: Raw Packet Processing](ch08.xhtml)'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第8章：原始数据包处理](ch08.xhtml)'
- en: We’ll show you how to sniff and process network packets by using the `gopacket`
    library, which uses `libpcap`. You’ll learn how to identify available network
    devices, use packet filters, and process those packets. We will then develop a
    port scanner that can scan reliably through various protection mechanisms, including
    syn-flood and syn-cookies, which cause normal port scans to show excessive false
    positives.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向您展示如何使用`gopacket`库（该库使用`libpcap`）来嗅探和处理网络数据包。您将学习如何识别可用的网络设备、使用数据包过滤器并处理这些数据包。然后，我们将开发一个端口扫描器，能够通过各种保护机制进行可靠扫描，包括
    SYN 洪水和 SYN Cookie，它们会导致正常的端口扫描出现大量的假阳性。
- en: '[Chapter 9: Writing and Porting Exploit Code](ch09.xhtml)'
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第9章：编写和移植漏洞利用代码](ch09.xhtml)'
- en: This chapter focuses almost solely on creating exploits. It begins with creating
    a fuzzer to discover different types of vulnerabilities. The second half of the
    chapter discusses how to port existing exploits to Go from other languages. This
    discussion includes a port of a Java deserialization exploit and the Dirty COW
    privilege escalation exploit. We conclude the chapter with a discussion on creating
    and transforming shellcode for use within your Go programs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本章几乎完全专注于创建漏洞利用工具。它首先介绍如何创建模糊测试工具以发现不同类型的漏洞。章节的后半部分讨论如何将现有的漏洞利用代码从其他语言移植到 Go
    中。这一部分讨论包括了 Java 反序列化漏洞利用和 Dirty COW 权限提升漏洞利用的移植。我们将以讨论如何为 Go 程序创建和转换 shellcode
    作为本章的结尾。
- en: '[Chapter 10: Go Plugins and Extendable Tools](ch10.xhtml)'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第10章：Go 插件和可扩展工具](ch10.xhtml)'
- en: We’ll introduce two separate methods for creating extendable tools. The first
    method, introduced in Go version 1.8, uses Go’s native plug-in mechanism. We’ll
    discuss the use cases for this approach and discuss a second approach that leverages
    Lua to create extensible tools. We’ll demonstrate practical examples showing how
    to adopt either approach to perform a common security task.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍两种创建可扩展工具的方法。第一种方法是在 Go 1.8 版本中引入的，使用 Go 的本地插件机制。我们将讨论这种方法的使用场景，并介绍第二种方法，利用
    Lua 创建可扩展的工具。我们将通过实际示例演示如何采用这两种方法执行常见的安全任务。
- en: '[Chapter 11: Implementing and Attacking Cryptography](ch11.xhtml)'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第11章：实现和攻击加密技术](ch11.xhtml)'
- en: This chapter covers the fundamental concepts of symmetric and asymmetric cryptography
    using Go. This information focuses on using and understanding cryptography through
    the standard Go package. Go is one of the few languages that, instead of using
    a third-party library for encryption, uses a native implementation within the
    language. This makes the code easy to navigate, modify, and understand.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用 Go 实现的对称加密和非对称加密的基本概念。本文信息侧重于通过标准 Go 包使用和理解加密技术。Go 是少数几种不使用第三方加密库，而是采用语言内置加密实现的编程语言之一。这使得代码更易于浏览、修改和理解。
- en: We’ll explore the standard library by examining common use cases and creating
    tools. The chapter will show you how to perform hashing, message authentication,
    and encryption. Lastly, we’ll demonstrate how to brute-force decrypt an RC2-encrypted
    ciphertext.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过检查常见的使用案例和创建工具来探索标准库。本章将向你展示如何执行哈希、消息认证和加密操作。最后，我们将演示如何暴力破解 RC2 加密的密文。
- en: '[Chapter 12: Windows System Interaction and Analysis](ch12.xhtml)'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第12章：Windows 系统交互与分析](ch12.xhtml)'
- en: In our discussion on attacking Windows, we’ll demonstrate methods of interacting
    with the Windows native API, explore the `syscall` package in order to perform
    process injection, and learn how to build a Portable Executable (PE) binary parser.
    The chapter will conclude with a discussion of calling native C libraries through
    Go’s C interoperability mechanisms.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论攻击 Windows 时，我们将演示如何与 Windows 原生 API 交互，探索 `syscall` 包以执行进程注入，并学习如何构建一个便携式可执行文件
    (PE) 解析器。本章最后将讨论如何通过 Go 的 C 语言互操作机制调用本地 C 库。
- en: '[Chapter 13: Hiding Data with Steganography](ch13.xhtml)'
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第13章：利用隐写术隐藏数据](ch13.xhtml)'
- en: '*Steganography* is the concealment of a message or file within another file.
    This chapter introduces one variation of steganography: hiding arbitrary data
    within a PNG image file’s contents. These techniques can be useful for exfiltrating
    information, creating obfuscated C2 messages, and bypassing detective or preventative
    controls.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*隐写术*是将信息或文件隐藏在另一个文件中的技术。本章介绍了一种隐写术变体：将任意数据隐藏在 PNG 图像文件的内容中。这些技术可以用于信息外泄、创建模糊的
    C2 消息，以及绕过侦测或预防性控制。'
- en: '[Chapter 14: Building a Command-and-Control RAT](ch14.xhtml)'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '[第14章：构建命令与控制远控木马](ch14.xhtml)'
- en: The final chapter discusses practical implementations of command-and-control
    (C2) implants and servers in Go. We’ll leverage the wisdom and knowledge gained
    in previous chapters to build a C2 channel. The C2 client/server implementation
    will, by nature of being custom-made, avoid signature-based security controls
    and attempt to circumvent heuristics and network-based egress controls.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一章讨论了 Go 中命令与控制（C2）植入和服务器的实际实现。我们将利用之前章节中获得的智慧和知识来构建一个 C2 通道。由于 C2 客户端/服务器是定制化的，因此天然避免了基于签名的安全控制，并试图绕过启发式检测和基于网络的出口控制。
