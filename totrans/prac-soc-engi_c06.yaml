- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gathering OSINT About People
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: While previous chapters focused on gathering OSINT about businesses, this chapter
    focuses on gathering OSINT about people by using a range of tools. You’ll learn
    how to target a person by hunting for information such as their likes, dislikes,
    social connections, and password reset questions. We’ll also continue to use our
    target as leverage against a business by gathering OSINT from pictures that they’ve
    taken while at their workplace, resumes, complaints or grievances, their bragging
    about work, and travel, to name just a few.
  prefs: []
  type: TYPE_NORMAL
- en: Using OSINT Tools for Analyzing Email Addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, when you begin an attack, all you have is an email address. While that
    may be enough for phishing attacks, you might need to know more about your target
    to perform other tasks. In these cases, you can use the email address to gather
    more information about the target, such as usernames, photos, social media accounts,
    and physical locations. The following tools allow you to search for OSINT about
    a person by using nothing but their email addresses.
  prefs: []
  type: TYPE_NORMAL
- en: All of this information is passed through what I call the *OSINT Heartbeat*.
    The OSINT Heartbeat is the act of expanding and contracting the information you’ve
    collected—making it possible to focus on the target at a micro level, and to then
    expand outward, to the adjacent people, accounts, and associations at a macro
    level. The most vital aspect of the OSINT Heartbeat is discerning what information
    has an intelligence context and what does not. This process is important for avoiding
    the tunnel vision that comes from focusing too closely on a target, making you
    miss other important data points.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Out If a User Has Been Breached with Have I Been Pwned
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `hipb_breach` and `hibp_paste` modules in Recon-ng search Troy Hunt’s Have
    I Been Pwned (HIBP) website ([https://haveibeenpwned.com/](https://haveibeenpwned.com/))
    and associated databases to determine whether an email address entered has been
    involved in any data breaches.
  prefs: []
  type: TYPE_NORMAL
- en: I often use these modules to build a dossier on how employees of my target company
    use their work emails. This is a good indication of the maturity of the company’s
    security program. For example, some people, such as those who manage social media
    accounts, may need to have a Facebook or LinkedIn account associated with their
    work emails. However, the janitor or associate-level help desk technician probably
    does not.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use HIBP modules in Recon-ng, simply load the module, set the `SOURCE` field
    to the email address or list you want to search, and then enter the `run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also manually search for records on the main HIBP website. Some of the
    records that come up are private, meaning you can see them only if you can confirm
    you own the email via an automated email process, or confirm that you own the
    entire domain (or are an authorized system administrator of it). To check for
    every email within an entire domain, you must be able to demonstrate ownership,
    typically through a DNS TXT record. The hack of the dating website Ashley Madison
    is an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating Social Media Accounts with Sherlock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Sherlock* ([https://github.com/sherlock-project/sherlock/](https://github.com/sherlock-project/sherlock/))
    is a Python 3 tool written and maintained by the Sherlock Project. It scours various
    social media sites in search of usernames. The list of sites that Sherlock checks
    is shorter than other tools, but still useful.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install and use Sherlock, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Sherlock will provide results similar to WhatsMyName and Recon-ng. Use whichever
    tool you prefer, but always use multiple tools to increase the quality or fidelity
    of the data you collect.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating Website Accounts with WhatsMyName
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*WhatsMyName* ([https://github.com/WebBreacher/WhatsMyName/](https://github.com/WebBreacher/WhatsMyName/))
    is a tool written by Micah Hoffman that enumerates websites where a particular
    username exists. This is an effective way to check a user’s possible behavior
    and web activity. You can also enact WhatsMyName on Recon-ng as the `profiler`
    module. In addition, Chris Poulter at OSINT Combine collaborated with Hoffman
    to create a WhatsMyName web application ([https://whatsmyname.app/](https://whatsmyname.app/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of this writing, WhatsMyName checks over 250 sites. To restrict
    the number of sites checked or to add to the list, simply edit the *web_accounts_list.json*
    file with the proper JSON syntax, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you’d like to check a site that isn’t included in the JSON file, you can
    simply research how the site processes HTTP requests, including the parameters
    it uses and the HTTP response codes to expect. You then would simply copy the
    entry into the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run WhatsMyName by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you execute the script, a `[+]` should appear beside each site at which WhatsMyName
    detects an account.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Passwords with Pwdlogy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Pwdlogy* (pronounced *Password-ology*) is a tool written by tch1001 that allows
    hackers to build a word list for a given user based on terms that they frequently
    use and topics that are meaningful to them. You’ll do some manual analysis of
    your own and then populate a list. The tool then alters this list by adding characters
    to what you’ve input and alternating the characters to make a much longer word
    list. Attackers can then use that word list for password-guessing attacks and
    related activities.'
  prefs: []
  type: TYPE_NORMAL
- en: While on the surface this may not seem particularly useful for a social engineer,
    with a little ingenuity, it can be. For example, imagine you are phishing a particular
    user and have approval to use a password-reset pretext. In other words, you can
    poll the user for information, possibly by handing them a survey or while making
    small talk. Using this information, you can populate a list in Pwdlogy and use
    it for testing. If you have fewer than 10 users to phish, you could discover how
    they create new passwords by using this method. If you have hundreds or thousands,
    this might not work as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install and use Pwdlogy, enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands will clone the code from GitHub to your system, and then move
    you into the directory and execute it with Python. To create your list for Pwdlogy,
    use OSINT to collect the following information about each user:'
  prefs: []
  type: TYPE_NORMAL
- en: Spouse, sibling, parents, and children names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The names of pets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favorite words and numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Birthdays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a defender, you could then restrict users from using any variant of items
    from this list as passwords and require them to choose something different. This
    would allow you to reduce the probability of someone guessing user passwords,
    but it would do nothing for password reuse or password stuffing as a result of
    data breaches outside your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you could use the list in a conversation or phish to grab a target’s
    attention. For instance, ask how the victim’s spouse or child is doing, by name.
    A penetration tester may use this information for *password spraying* (an attack
    in which you try the same passwords with several usernames, as opposed to traditional
    *password cracking*, which involves trying several possible passwords for a single
    user) or other technical means to gain access to an account.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing a Target’s Images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the searches I showed throughout this chapter uncovered images, and
    analyzing those images further can give us important information about a target.
    I search for four things when looking at pictures for OSINT analysis.
  prefs: []
  type: TYPE_NORMAL
- en: First, I look at the *foreground*, or what the picture is actually meant to
    tell us, whether it be about a person, a scene, or anything else. Next, I look
    at the *background*. For instance, is there tacky hotel wallpaper that could tie
    this picture to a specific location or chain? I then look at what is *missing*
    in the picture. What should be here? I think of this as one of those comparing-two-pictures
    challenges. Has something been photoshopped out? Has something been moved out
    of frame?
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I look at the *Exchangeable Image File (EXIF)* data. The EXIF format
    is a standard for still images that defines the images, sounds, and other tags
    that digital cameras, smartphones, and other systems produce. Since all cameras
    and smartphones have the capability to produce such data, we can collect varying
    levels of OSINT about pictures and the people who took them.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, I’ll cover a few ways to analyze EXIF data.
  prefs: []
  type: TYPE_NORMAL
- en: Manually Analyzing EXIF Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s analyze the EXIF data for the picture shown in [Figure 6-1](#figure6-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<Bank of the River Darent in Eynsford, England. Shows a portion of the river
    with trees and tall grasses in the background.>>](image_fi/500983c06/f06001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-1: Image sent to me by a student for analysis'
  prefs: []
  type: TYPE_NORMAL
- en: To analyze the EXIF data, right-click the image and select **Get Info** on a
    Mac. On Windows and Linux, right-click the image and select **Properties**. This
    should open a window that has EXIF data viewable ([Figure 6-2](#figure6-2)).
  prefs: []
  type: TYPE_NORMAL
- en: Here, we see the image type and when I downloaded it. We get the dimensions,
    make, and model of the camera that took it—in this case, an iPhone X. At the bottom,
    we see the latitude and longitude of the location where the image was taken, which
    is information that smartphones typically include.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Images by Using ExifTool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*ExifTool* is a tool that can automatically analyze EXIF data and give you
    a lot more information than a manual analysis can. Some of this information could
    be particularly helpful if you’re profiling a company onsite, learning about company
    culture, or targeting a mobile device for exploitation. Another useful application
    is if you are competing in one of Trace Labs’ Search Party CTFs ([https://www.tracelabs.org/getinvolved/ctf/](https://www.tracelabs.org/getinvolved/ctf/)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![<<EXIF data for 6-1.jpg. Outlined in red are Image kind, size, file location,
    creation date, last modified date, device make and model, and latitude and longitude.>>](image_fi/500983c06/f06002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-2: Getting EXIF info on a MacBook'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install ExifTool in Kali, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To analyze a file, run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can use Jeffrey’s Image Metadata Viewer ([http://exif.regex.info/exif.cgi](http://exif.regex.info/exif.cgi)),
    an online version of ExifTool. This is helpful if you’re trying to avoid downloading
    a file or are explicitly working with only online images. You can provide the
    tool a file or a link, and it will post the results onscreen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start the analysis by looking at the MACB times*.* *MACB* is a forensic
    term for the times when a file was *modified*, *accessed, changed*, and *“born”*
    (created). In this case, it shows when I downloaded this file from my email:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, after the file type, you see the camera’s make and model, as well as
    the device’s orientation while taking the picture and that flash wasn’t used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The software field is also incredibly important, because in this case, it tells
    us the version of Apple iOS that the phone that took the picture is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you see the lens make and model. This should be similar to the camera
    make and model. In this case, you’re able to see that the back dual camera of
    the iPhone X was used and that it was in the Northern and Eastern hemispheres
    (basically, Europe or parts of Asia):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The *image direction* is the direction (between 0.000 and 359.99º) the photographer
    was pointing in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the final pieces of analysis, you’re able to see how long the phone has
    been off the charger, the elevation, and the latitude and longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This allows you to confirm the location where the picture was taken by using
    a mapping application. For example, if this was a picture of an unlocked Windows
    7 computer on a desk, you could use the coordinates to find out the address of
    the facility where the picture was taken, as well as a possible company whose
    office the picture was taken in.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try this now. Take the latitude and longitude, and then drop it in Google
    Maps, generating the image shown in [Figure 6-3](#figure6-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![<<Google Maps screenshot displays street view image of Riverside, Eynsford,
    England, at latitude and longitude scraped from EXIF data. Shows crowd of people
    picnicking on the grass.>>](image_fi/500983c06/f06003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6-3: Google Maps entry for the latitude and longitude taken from EXIF
    data'
  prefs: []
  type: TYPE_NORMAL
- en: This scene confirms that the picture was taken near the Plough Inn along the
    River Darent in Eynsford, England.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing Social Media Without Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, I’ll address the most useful aspects of common social media
    platforms for OSINT gathering. In general, you should focus on habits, culture,
    and connections. *Habits* include how often users post, the terms they use, and
    similar behavior. *Culture* includes the norms that the person or organization
    follows. *Connections*, or other users in a target’s network, are a tricky beast.
    I don’t advocate connecting with personal accounts as part of engagements, because
    these accounts aren’t owned by the company paying you.
  prefs: []
  type: TYPE_NORMAL
- en: LinkedIn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On LinkedIn, check whether the target is a *LinkedIn Open Networker (LION),*
    or someone who will accept all connection requests. Also, enumerate their colleagues.
    Look at their information, which will likely include some accomplishments. You
    may also find email addresses or links to their other social media websites.
  prefs: []
  type: TYPE_NORMAL
- en: Instagram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Instagram, you can see whom a target interacts with the most. You can also
    confirm what someone looks like apart from their headshots and build a dossier
    that will help you behave like the people they spend time with. People don’t like
    to admit it, but they usually associate with a type.
  prefs: []
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Facebook might let you learn more about a person than you ever wanted to, or
    conversely, it may be like trying to get blood from a turnip. Some people are
    extremely privacy conscientious, and Facebook offers the most granular privacy
    controls, with the typical settings Only Me, Specific Friends, Friends Only, Friends
    of Friends, and Public.
  prefs: []
  type: TYPE_NORMAL
- en: If a person shares publicly on Facebook, you can learn about relationships,
    travel, and political and religious affiliations. Even if someone has their privacy
    set to Friends or stricter, you can still see everything they post or comment
    on publicly (like the local news), unless they have you blocked.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In terms of privacy controls, Twitter has only three options: protected/locked,
    blocked, and default. *Protected/locked* allows the user to approve who can see
    their tweets. This is different than blocked; if a user *blocks* another user
    but lacks the protected/locked setting, the blocked user can still see the other
    user’s tweets from another account. If protected, then they will have to submit
    a request for approval. The *default* setting shows everything to everyone, unless
    they’re blocked or muted. Twitter is especially helpful for collecting information
    about public figures, technologists, early adopters of emerging technologies,
    political pundits, and sports fans.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Case Study: The Dinner That Gave All the Gold Away'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some time ago, I was having dinner at a local sit-down restaurant. I was seated
    near two women who, based on their conversation, sounded like old friends catching
    up. The first woman—let’s call her Wanda—was asking the most questions, while
    the other one—let’s call her Tammy—shared information without discretion.
  prefs: []
  type: TYPE_NORMAL
- en: Wanda asked Tammy where she was working, and Tammy replied with the company
    name, as well as how the name came about (it was a variation of the owner’s name).
    She said she’d worked there for five years, and then explained what she did for
    the company, revealing that it was a bakery. She went on to vent about her frustrations
    and talk about her triumphs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wanda asked Tammy if she was married yet. Tammy talked about her ex-boyfriend,
    Steven, and their shared custody of Leif. She also mentioned Steven’s mom, who
    lived in Tulsa, then told Wanda that Steven’s mom was kind of afraid of Leif.
    I wondered: what kind of grandmother was afraid of their grandchild? Wait, I thought.
    Maybe Leif wasn’t a human child. Sure enough, Wanda asked if Tammy wanted real
    kids and which breed Leif is. Tammy replied with a comment about her body image
    and some health issues, and then informed her friend that Leif was a year-old
    mutt.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Tammy talked about her new boyfriend, Dick, and his career as a comedian.
    Wanda asked how Dick felt about sharing custody of Leif, and Tammy replied with
    a story about Dick and Steven doing a couple of things together with Leif and
    going to concerts together.
  prefs: []
  type: TYPE_NORMAL
- en: 'This might seem innocuous enough, but using this conversation, here is what
    I found out, and how:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The bakery owner’s name**'
  prefs: []
  type: TYPE_NORMAL
- en: I searched for the bakery’s name, then looked at comments with replies and ratings
    on Facebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The name of the bakery owner’s daughter and employee**'
  prefs: []
  type: TYPE_NORMAL
- en: I looked through bakery photos, then found the owner’s public relationship statuses
    on Facebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The name of the owner’s son-in-law**'
  prefs: []
  type: TYPE_NORMAL
- en: Again, through the owner’s public relationship statuses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tammy’s name**'
  prefs: []
  type: TYPE_NORMAL
- en: I got creative and started reading Facebook reviews of the bakery. Knowing from
    the conversation that Tammy started working at the bakery five years ago, I looked
    for reviews in that time frame. I found a five-star review with no text or testimonial,
    and recognized the poster by her profile picture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The identity of Dick, the boyfriend**'
  prefs: []
  type: TYPE_NORMAL
- en: I checked Tammy’s photos and relationship status on Facebook, and then confirmed
    the finding by using the relationship status and profession listed on his Facebook
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The identity of Steven, the ex-boyfriend**'
  prefs: []
  type: TYPE_NORMAL
- en: Tammy had three Facebook friends named Steven, but only one of them had a mother
    living in Tulsa. I confirmed this finding by looking through pictures and cross-referencing
    Leif (a very ugly dog, by the way).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tammy and Dick’s home address, and pictures of the home**'
  prefs: []
  type: TYPE_NORMAL
- en: Along with clues on their Facebook pages, I checked Melissa Property Data Explorer
    property records and Google Street view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the wrong hands, this information could be fodder for identity theft, a home
    invasion, or worse. How could this have been mitigated or prevented?
  prefs: []
  type: TYPE_NORMAL
- en: I could have not listened. But once you get into OSINT and social engineering,
    it becomes kind of hard to turn off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tammy and Wanda could have been less descriptive or spoken more quietly. Tammy,
    Dick, Steven, and Wanda could have used better sharing settings and privacy controls
    on their social media. All parties could have been vaguer about what they said
    or posted or used disinformation to throw social engineers off their trail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The purpose of collecting people OSINT is to better understand the threats
    that employees introduce to their employer and to potentially build rapport with
    them in social engineering engagements. There are several sources of people OSINT,
    including pictures, friends, social media, and routine things like email addresses,
    usernames, and IP addresses. To use these tools ethically, treat them as a means
    to learn more about the company, not the individual person. Remember: stay away
    from interacting with personal accounts.'
  prefs: []
  type: TYPE_NORMAL
