- en: A
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A
- en: An SVG Primer
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 入门
- en: This appendix is a very high-level glance at the workings of SVG and its implementation
    in Inkscape. If you want the final, complete, and authoritative reference on SVG,
    refer to the W3C’s SVG specification at [https://w3.org/Graphics/SVG/](https://w3.org/Graphics/SVG/).
    As of this writing, SVG 2.0 is still a draft; Inkscape supports the latest released
    version of the standard, 1.1, that you can find at [https://w3.org/TR/SVG11/](https://w3.org/TR/SVG11/).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录是对 SVG 工作原理及其在 Inkscape 中实现的一个非常高层次的概览。如果你想要最终的、完整的、权威的 SVG 参考，请参阅 W3C 的
    SVG 规范，[https://w3.org/Graphics/SVG/](https://w3.org/Graphics/SVG/)。截至本文撰写时，SVG
    2.0 仍处于草案阶段；Inkscape 支持最新发布的标准版本 1.1，你可以在 [https://w3.org/TR/SVG11/](https://w3.org/TR/SVG11/)
    找到它。
- en: Knowledge of SVG and, more generally, XML (SVG is based on XML) is not strictly
    necessary for mastering Inkscape—but it helps. It will allow you to peek under
    the hood of Inkscape drawings, and it will often reveal the true reasons behind
    some of Inkscape's features (or lack thereof). Let's start with a quick intro
    to XML that you may find useful in many situations, even those that don't involve
    Inkscape or SVG.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于掌握 Inkscape，了解 SVG 和更广泛的 XML（SVG 基于 XML）知识并非严格必要——但它会有所帮助。它将使你能够深入了解 Inkscape
    绘图的内部结构，并且它通常能揭示一些 Inkscape 功能（或缺乏功能）的真正原因。让我们从一个简短的 XML 介绍开始，这对于许多场合都很有用，即便这些场合与
    Inkscape 或 SVG 无关。
- en: A.1 A Quick Introduction to XML
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.1 简短的 XML 介绍
- en: If you've ever looked at a web page’s source code, you already know what XML
    looks like, because XHTML, the markup language used on the web today, is one of
    the subspecies of XML—more precisely, an *XML vocabulary*. SVG is another such
    vocabulary.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经查看过网页的源代码，你已经知道 XML 看起来是什么样子，因为 XHTML，今天在网页上使用的标记语言，是 XML 的一种亚种——更准确地说，是*XML
    词汇*。SVG 也是这样的一个词汇。
- en: XML is a standardized way to record structured information in plaintext. It
    is easy for computers to parse and yet quite understandable for humans. Unlike
    most computer-related concepts that tend to be as complex as you think they are
    (or more), XML is almost unbelievably simple.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: XML 是一种标准化的方式，用于以纯文本记录结构化信息。它便于计算机解析，而且对人类来说也相当容易理解。与大多数计算机相关概念通常复杂得让你以为它们比你想象的更复杂不同，XML
    简单到几乎令人难以置信。
- en: 'The basic building block of an XML document is an *element*. Here is an example
    of an element containing some text:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: XML 文档的基本构建块是*元素*。下面是一个包含文本的元素示例：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The text inside the element is called its *content*, and that content is delimited
    by *tags*. Everything between the less-than sign (`<`) and the greater-than sign
    (`>`) is a tag. Here, the opening tag and the closing tag are almost identical,
    except the closing one has a forward slash (`/`) before the element name, which
    in this case is `example`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 元素内的文本称为其*内容*，这些内容由*标签*限定。所有位于小于号（`<`）和大于号（`>`）之间的部分都是标签。在这里，开始标签和结束标签几乎是相同的，唯一不同的是结束标签的元素名称前有一个斜杠（`/`），在这个例子中，元素名称是
    `example`。
- en: 'An element may have no content at all:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元素可能完全没有内容：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: or
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These two *empty elements* are equivalent; the second one, consisting of a single
    tag, is just a spelling variant of the first. Note the different position of the
    forward slash (`/`) in the single-tag empty element.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个*空元素*是等价的；第二个元素由一个单一标签组成，它只是第一个元素的一种拼写变体。注意在单标签空元素中斜杠（`/`）的位置不同。
- en: 'In addition to text, elements can also contain other elements, but those elements
    must lie *entirely* within the containing element. For example, this is wrong:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 除了文本外，元素还可以包含其他元素，但这些元素必须*完全*位于包含元素内。例如，下面这是错误的：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'because the element `b` starts inside `a` but ends outside it. If an element
    starts inside some other element, it must also end within that element. Here is
    an example of correct XML:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因为元素 `b` 从 `a` 内部开始，但在外部结束。如果一个元素从另一个元素内部开始，它也必须在该元素内结束。下面是正确的 XML 示例：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We say that `a` is the *parent element* of `b`,`c`, and `d`, while `d` is the
    parent of`e`. An element may have multiple children, but it has only one parent
    (except for the root element of the document, which has no parent at all). [Figure A-1](#figA-1)
    is a graphic representation of this XML fragment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说 `a` 是 `b`、`c` 和 `d` 的*父元素*，而 `d` 是 `e` 的父元素。一个元素可以有多个子元素，但它只有一个父元素（除了文档的根元素，它没有父元素）。[图
    A-1](#figA-1) 是这个 XML 片段的图示表示。
- en: '![](03/tree.svg.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](03/tree.svg.png)'
- en: 'Figure A-1: A tree representing the XML code'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A-1：表示 XML 代码的树形图
- en: 'Apart from child elements, XML elements may have *attributes*. Each attribute
    is a name with some associated value. Attributes are specified in the opening
    tag of an element:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了子元素，XML 元素还可以拥有 *属性*。每个属性都有一个名称及其关联的值。属性在元素的开始标签中指定：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note the equal sign (`=`) and the double-quotation marks around attribute values.
    Both are mandatory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意等号（`=`）和属性值周围的双引号。两者都是必需的。
- en: 'An entire XML document is just a single element (called the*root*), possibly
    with some text content and child elements—which, in turn, can have more content
    and more children, and so on. An XML document can thus be thought of as a tree
    growing from a single root. For example, the following is a complete and valid
    SVG document whose root element, `svg`, contains two elements representing a rectangle
    and a text string:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 XML 文档就是一个单一的元素（称为*根元素*），可能包含一些文本内容和子元素——这些子元素又可以包含更多的内容和更多的子元素，依此类推。因此，XML
    文档可以被看作是一棵从单一根元素生长出来的树。例如，以下是一个完整且有效的 SVG 文档，其根元素 `svg` 包含了两个元素，分别表示一个矩形和一段文本字符串：
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A.2 Vocabularies and Namespaces
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.2 词汇和命名空间
- en: XML itself is just a foundation—and you can erect a lot of different buildings
    on that foundation. You won't believe how many work hours were wasted, before
    the advent of XML, on inventing new data formats for each application, formulating
    their rules, writing and testing software to support them, and working around
    the inevitable bugs, exceptions, and version incompatibilities.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: XML 本身只是一个基础——你可以在这个基础上构建许多不同的应用。你无法想象在 XML 出现之前，有多少工作时间被浪费在为每个应用发明新数据格式、制定规则、编写和测试支持软件，以及处理不可避免的错误、异常和版本不兼容上。
- en: 'These days, if you need to record some data, you no longer need to go into
    the low-level details of which characters have special meanings and what the sizes
    of various fields are. By choosing XML (and you need serious reasons*not* to choose
    it), you can concentrate on what really matters: the structure of your data and
    how to name elements and attributes to best express that structure.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，如果你需要记录一些数据，你不再需要进入那些字符具有特殊含义以及各种字段大小的低级细节。通过选择 XML（你必须有非常充分的理由*不*选择它），你可以专注于真正重要的内容：数据的结构，以及如何命名元素和属性，以最佳方式表达该结构。
- en: Moreover, you may not even need to do that, because a common standardized XML
    *vocabulary* likely already exists for your kind of data. Each vocabulary defines
    a set of elements and attributes, detailing what they are supposed to mean, in
    what contexts they may be used, what is obligatory or optional, and so on. SVG
    is one such vocabulary; XHTML is another. Standardized XML vocabularies exist
    for many exotic things, from dog genealogies to star catalogs. Many of them reuse
    parts of other vocabularies.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你甚至可能不需要这样做，因为针对你的数据类型，可能已经存在一个通用的标准化 XML *词汇*。每个词汇定义了一组元素和属性，详细说明了它们的含义、使用的上下文、哪些是强制的、哪些是可选的，等等。SVG
    就是这样一个词汇，XHTML 是另一个。许多不同的标准化 XML 词汇存在，涉及从狗的家谱到星星目录等许多奇异事物。它们中的许多重用了其他词汇的部分内容。
- en: 'To be able to mix different vocabularies without confusion, XML uses*namespaces*.
    A namespace is a way to indicate where a specific element or attribute comes from.
    For example, here''s an `image` element from the SVG vocabulary, representing
    a linked bitmap image inside an SVG document:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够无混淆地混合不同的词汇，XML 使用*命名空间*。命名空间是一种指示特定元素或属性来源的方法。例如，下面是一个来自 SVG 词汇的 `image`
    元素，表示一个位图图像链接，嵌入在 SVG 文档中：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the element name and one of the attributes use a colon (`:`). The
    part of the name before the colon is called the *namespace prefix*. To find out
    which namespace corresponds to that prefix, look for a namespace declaration in
    the form of a special `xmlns`-prefixed attribute (`xmlns` is short for *XML NameSpace*),
    either on the same element or on any of its ancestor elements up the tree.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，元素名称和其中一个属性使用了冒号（`:`）。冒号前的部分称为*命名空间前缀*。要找出哪个命名空间对应于该前缀，请查找形式为特殊 `xmlns`
    前缀的命名空间声明属性（`xmlns` 是 *XML NameSpace* 的缩写），该声明位于同一元素或其任何祖先元素中。
- en: 'It is customary to place all namespace declaration attributes on the root element,
    so you will likely find the declarations for `svg` and`xlink` prefixes in the
    root `svg` element:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通常将所有命名空间声明属性放在根元素上，因此你很可能会在根 `svg` 元素中找到 `svg` 和 `xlink` 前缀的声明：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This means that the `svg` prefix is bound to the namespace of`http://www.w3.org/2000/svg`,
    and the `xlink` prefix corresponds to`http://www.w3.org/1999/xlink`. Here, the
    namespaces are URLs, but they don't need to be; the only requirement is that they
    are globally unique, and URLs are the easiest way to ensure that.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着`svg`前缀绑定到命名空间`http://www.w3.org/2000/svg`，而`xlink`前缀对应于`http://www.w3.org/1999/xlink`。在这里，命名空间是网址，但它们不一定需要是网址；唯一的要求是它们必须是全局唯一的，而网址是确保这一点的最简单方式。
- en: 'The namespace URL for SVG, `http://www.w3.org/2000/svg`, must look exactly
    as shown. If the namespace prefix of the elements in your SVG document does not
    resolve to `http://www.w3.org/2000/svg`, Inkscape (or any other SVG software)
    will not recognize the document as SVG. The namespace *prefix*, however, may be
    arbitrary, so long as it''s bound to the correct namespace. The prefix can even
    be empty if you declare it thus:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SVG的命名空间URL`http://www.w3.org/2000/svg`必须与显示的完全一致。如果您的SVG文档中元素的命名空间前缀无法解析为`http://www.w3.org/2000/svg`，Inkscape（或任何其他SVG软件）将无法将该文档识别为SVG。然而，命名空间*前缀*可以是任意的，只要它绑定到正确的命名空间。如果您这样声明，前缀甚至可以为空：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Inside the element with that declaration, any element name *without* a prefix
    is assumed to be in the SVG namespace. For example, the following will be recognized
    as a valid SVG `image` element that links an external image file in PNG format:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在带有该声明的元素内，任何*没有*前缀的元素名称都被假定为属于SVG命名空间。例如，以下将被识别为有效的SVG `image`元素，它链接到一个外部PNG格式的图像文件：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Namespace errors, such as no namespace declared for a prefix or a wrong namespace
    URL, are the most common when you edit SVG by hand—watch out for them!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间错误，比如没有为前缀声明命名空间或命名空间URL错误，是手动编辑SVG时最常见的问题——要小心这些错误！
- en: A.3 Root
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.3 根元素
- en: 'Here''s a typical root `svg` element of an Inkscape SVG document with a bunch
    of namespace declarations and other attributes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的Inkscape SVG文档的根`svg`元素，包含一堆命名空间声明和其他属性：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: SVG uses the SVG namespace (`http://www.w3.org/2000/svg`) for its own elements
    and the XLink namespace (`http://www.w3.org/1999/xlink`) for the linking attributes
    ([A.9](#sectionA.9)). On top of that, Inkscape adds elements and attributes in
    the namespaces belonging to Inkscape (`http://www.inkscape.org/namespaces/inkscape`)
    and its predecessor Sodipodi (`http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd`;
    see [1.6](c01.xhtml#section1.6) for a brief history of Inkscape). Other namespaces
    declared here are used for metadata elements (general information about the document)
    and license identifiers ([A.4](#sectionA.4)).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: SVG使用SVG命名空间（`http://www.w3.org/2000/svg`）来表示其自身的元素，使用XLink命名空间（`http://www.w3.org/1999/xlink`）来表示链接属性（[A.9](#sectionA.9)）。此外，Inkscape在属于Inkscape（`http://www.inkscape.org/namespaces/inkscape`）和其前身Sodipodi（`http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd`）的命名空间中添加了元素和属性（请参阅[1.6](c01.xhtml#section1.6)了解Inkscape的简短历史）。此处声明的其他命名空间用于元数据元素（有关文档的一般信息）和许可证标识符（[A.4](#sectionA.4)）。
- en: In this example root element, the only attributes defined in the SVG standard
    are`width` and `height` (defining the size of the canvas),`id`, and `version`.
    The rest are either namespace declarations or attributes in the Inkscape/Sodipodi
    namespaces.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例的根元素中，SVG标准中定义的唯一属性是`width`和`height`（定义画布的大小），`id`和`version`。其余的要么是命名空间声明，要么是Inkscape/Sodipodi命名空间中的属性。
- en: The `inkscape:version` specifies the version of Inkscape in which this document
    was created, in this case 1.0 (with a build number and date in parentheses). It
    also claims that the version of Sodipodi that this document will work with is
    0.32 (`sodipodi:version="0.32"`), because after that version Inkscape forked off
    Sodipodi. The non-namespaced `version` attribute refers to the version of the
    SVG specification this document implements, 1.1.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`inkscape:version`指定了创建此文档时Inkscape的版本，在本例中为1.0（括号中有构建号和日期）。它还声明该文档可以与Sodipodi的版本0.32一起使用（`sodipodi:version="0.32"`），因为从那个版本开始，Inkscape从Sodipodi中分支出来。没有命名空间的`version`属性指的是此文档所实现的SVG规范的版本，1.1。'
- en: When you save a document, you have a choice between Inkscape SVG and Plain SVG
    formats; the only difference is that Plain SVG strips away all the elements and
    attributes in the Inkscape and Sodipodi namespaces, leaving only the standard
    namespaces. Generally, no Inkscape-specific elements or attributes are allowed
    to alter how the document *looks*; they can affect only the way it*behaves* when
    edited in Inkscape (for example, an attribute on a `g` element may tell Inkscape
    to treat that element as a 3D box instead of a simple group; see [11.3](c11.xhtml#section11.3)).
    Thus, saving as a Plain SVG will make a file a little smaller but at the cost
    of losing some of its Inkscape editability. If you find a file that renders differently
    after being saved as Plain SVG, you've found a bug—please report it to the developers!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存文档时，可以选择 Inkscape SVG 格式或 Plain SVG 格式；它们的唯一区别在于 Plain SVG 会去除 Inkscape
    和 Sodipodi 命名空间中的所有元素和属性，仅保留标准命名空间。通常，Inkscape 特定的元素或属性不能改变文档的*外观*；它们只能影响文档在 Inkscape
    中编辑时的*行为*（例如，`g` 元素上的一个属性可能会告诉 Inkscape 将该元素视为 3D 方框，而不是简单的组；请参见[11.3](c11.xhtml#section11.3)）。因此，将文件保存为
    Plain SVG 会使文件稍微变小，但代价是失去了一些 Inkscape 可编辑性。如果你发现文件在保存为 Plain SVG 后呈现不同的效果，那说明你遇到了一个
    bug——请报告给开发者！
- en: A.4 Defs, View, and Metadata
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.4 Defs、视图和元数据
- en: Let's descend from the root element of a typical Inkscape SVG document to see
    what else is in there.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从典型 Inkscape SVG 文档的根元素开始，看看里面还包含了什么。
- en: 'First comes the `defs` element. A part of the SVG standard, `defs` is a storage
    bin for things that, by themselves, are not displayed on the canvas but may be
    referred to by other elements. This includes gradients, patterns, markers (arrowheads,[9.5](c09.xhtml#section9.5)),
    clipping paths, masks, filters, and so on, which are all stored as child elements
    of the`defs` element. The SVG specification allows you to place multiple `defs`
    elements almost anywhere in the document, but Inkscape always uses a single`defs`
    under the root `svg`. Here''s an example `defs` element containing a gradient:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是 `defs` 元素。`defs` 是 SVG 标准的一部分，它是一个存储区，用来存放那些本身不会显示在画布上的元素，但其他元素可以引用它们。这些包括渐变、图案、标记（箭头，[9.5](c09.xhtml#section9.5)）、剪切路径、蒙版、滤镜等等，它们都作为
    `defs` 元素的子元素存储。SVG 规范允许你将多个 `defs` 元素几乎放置在文档中的任何位置，但 Inkscape 总是使用一个位于根 `svg`
    元素下的单一 `defs` 元素。下面是一个包含渐变的 `defs` 元素示例：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Adding the `linearGradient` element to `defs`, by itself, does not change anything
    on the canvas. Now, however, any object can reference ([10.2.1](c10.xhtml#section10.2.1))
    this gradient for painting its fill or stroke.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `linearGradient` 元素添加到 `defs` 中本身并不会改变画布上的任何内容。不过，现在任何对象都可以引用（[10.2.1](c10.xhtml#section10.2.1)）这个渐变，用来填充或描边。
- en: Most of the stuff in `defs` is kept even if no visible element uses it. Exceptions
    are the elements with the `inkscape:collect="always"` attribute; such elements
    are automatically deleted when no longer used. Inkscape often uses this flag to
    mark various supplemental elements it creates on its own and can safely dispose
    of; it will never delete anything that you have created or explicitly added without
    your permission. This way, you can reuse things you once defined but then stopped
    using.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有任何可见元素使用，`defs` 中的大部分内容也会被保留。例外情况是具有 `inkscape:collect="always"` 属性的元素；这些元素在不再使用时会自动删除。Inkscape
    通常使用这个标志来标记它自己创建的各种辅助元素，并可以安全地删除它们；它绝不会删除你创建的或明确添加的任何内容，除非获得你的许可。通过这种方式，你可以重新使用曾经定义但后来不再使用的元素。
- en: Because of this, `defs` may grow larger and larger as you work on your document.
    To remove any unused definitions from `defs`, use the**File ▶ Clean Up Document**
    command. Sometimes, this command may fail to delete *all* unused stuff in `defs`
    on the first try; you may need to quit, reload the document, and clean it up again.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，随着你在文档中工作的进行，`defs` 可能会变得越来越大。要移除 `defs` 中任何未使用的定义，请使用**文件 ▶ 清理文档**命令。有时，这个命令可能在第一次尝试时无法删除`defs`中*所有*未使用的内容；你可能需要退出文档，重新加载后再次清理。
- en: 'The next element under the root of an Inkscape SVG document is`sodipodi:namedview`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Inkscape SVG 文档的根元素下，紧接着的元素是 `sodipodi:namedview`：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This Inkscape-specific element holds, in its attributes, all kinds of options
    specific to this document: the zoom level and scroll position that Inkscape will
    use upon loading the document, the rotation angle of the canvas, the colors and
    spacing of the grids, various snapping modes, the current layer, document units,
    and so on. From within Inkscape, you can set most of these options via the File ▶ Document
    Properties dialog ([3.1.2](c03.xhtml#section3.1.2)).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Inkscape 特定的元素在其属性中保存了所有与该文档相关的选项：Inkscape 在加载文档时将使用的缩放级别和滚动位置，画布的旋转角度，网格的颜色和间距，各种吸附模式，当前图层，文档单位等。在
    Inkscape 中，您可以通过文件 ▶ 文档属性对话框 ([3.1.2](c03.xhtml#section3.1.2)) 设置其中大多数选项。
- en: Finally, the `metadata` element appears right before the document’s content
    actually starts. It stores information about the document's author, its purpose,
    date, license, and so on, and it corresponds to the File ▶ Document Metadata dialog
    in Inkscape. The elements inside `metadata` use the RDF standard (see [https://w3.org/RDF/](https://w3.org/RDF/)),
    which may employ additional XML namespaces to describe different sorts of information.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`metadata` 元素出现在文档内容实际开始之前。它存储有关文档的作者、目的、日期、许可证等信息，并对应于 Inkscape 中的文件 ▶ 文档元数据对话框。`metadata`
    内的元素使用 RDF 标准（请参见 [https://w3.org/RDF/](https://w3.org/RDF/)），可能会使用额外的 XML 命名空间来描述不同种类的信息。
- en: A.5 Layers and Groups
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.5 图层和分组
- en: 'After the `metadata` element, the SVG document’s actual visible content begins.
    Naturally, each document *object* corresponds to an SVG *element*. Moreover, the
    order of the elements in the file corresponds to the order in which the objects
    are visually stacked on the canvas ([4.4](c04.xhtml#section4.4)): elements closer
    to the end of the file are painted on top of those at the beginning.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `metadata` 元素之后，SVG 文档的实际可视内容开始。自然地，每个文档的*对象*都对应一个 SVG *元素*。此外，文件中元素的顺序对应于对象在画布上视觉堆叠的顺序（[4.4](c04.xhtml#section4.4)）：文件末尾的元素绘制在文件开头的元素之上。
- en: 'When you group objects together ([4.8](c04.xhtml#section4.8)), they are placed
    inside a`g` element. For example, here''s a group that contains a rectangle and
    a text object:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将对象组合在一起时（[4.8](c04.xhtml#section4.8)），它们被放置在一个`g` 元素中。例如，这里有一个包含矩形和文本对象的分组：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Besides groups, another way to organize your objects is via layers ([4.9](c04.xhtml#section4.9)).
    SVG does not have a special element type for layers; instead, Inkscape uses an
    SVG `g` element, adding a custom attribute so it knows to treat the group as a
    layer when the file is edited.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了分组，另一种组织对象的方式是通过图层 ([4.9](c04.xhtml#section4.9))。SVG 没有专门用于图层的元素类型；相反，Inkscape
    使用一个 SVG `g` 元素，添加了一个自定义属性，使其在编辑文件时知道将该分组视为图层。
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since layers are thus a specific type of groups, it is easy to see how Inkscape
    can "enter a group," treating it temporarily as a layer ([4.9.1](c04.xhtml#section4.9.1)).
    This is also why,upon importing Inkscape''s SVG file into another vector editor
    (such as Adobe Illustrator), you usually lose layers but objects get additional
    layers of grouping: the other editor knows nothing about Inkscape''s convention
    of using some `g` elements as layers and treats all of them as regular groups.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图层因此是一种特定类型的分组，便于看到 Inkscape 如何“进入一个分组”，暂时将其视为图层（[4.9.1](c04.xhtml#section4.9.1)）。这也是为什么在将
    Inkscape 的 SVG 文件导入到其他矢量编辑器（如 Adobe Illustrator）时，通常会丢失图层，但对象会获得额外的分组层次：其他编辑器不知道
    Inkscape 使用某些 `g` 元素作为图层的约定，而将它们视为常规分组。
- en: Inside layers and groups, other SVG elements represent the actual objects of
    your drawing. See [https://w3.org/TR/SVG11/eltindex.html](https://w3.org/TR/SVG11/eltindex.html)
    for a complete list of elements in SVG 1.1, but note that Inkscape doesn’t support
    all of them yet.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在图层和分组内部，其他 SVG 元素表示绘图中的实际对象。有关 SVG 1.1 中元素的完整列表，请参见 [https://w3.org/TR/SVG11/eltindex.html](https://w3.org/TR/SVG11/eltindex.html)，但请注意，Inkscape
    尚不支持其中的所有元素。
- en: A.6 Coordinates and Units
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.6 坐标和单位
- en: 'You can use a number of units to express distances and coordinates in SVG drawings:
    centimeters (`cm`), millimeters (`mm`), inches (`in`), points (`pt`), and a few
    others. One unit, however, is special: the *SVG pixel* (abbreviated `px`) is sometimes
    called the *anonymous unit* because you can write it without any unit designation
    at all. For example, in this `rect` element, `x`, `y`,`width`, and `height` are
    expressed in SVG pixels:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用多种单位来表示SVG绘图中的距离和坐标：厘米（`cm`）、毫米（`mm`）、英寸（`in`）、点（`pt`）和其他一些单位。然而，有一个单位是特殊的：*SVG像素*（缩写为`px`），有时被称为*匿名单位*，因为你可以在不指定单位的情况下直接使用它。例如，在这个`rect`元素中，`x`、`y`、`width`和`height`都是以SVG像素表示的：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You could also specify these same lengths in millimeters:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以用毫米来指定这些相同的长度：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: and Inkscape would understand it correctly. However, if you change and resave
    this SVG file, Inkscape will convert all sizes back to SVG pixels.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 并且Inkscape能够正确理解它。然而，如果你更改并重新保存这个SVG文件，Inkscape会将所有尺寸转换回SVG像素。
- en: An SVG pixel is not the same as a *screen pixel*. When you zoom in, a distance
    of one SVG pixel becomes larger than one pixel on your screen; when you zoom out,
    it becomes smaller than one screen pixel. However, when your zoom level (displayed
    at the right end of the status bar of your Inkscape window; see [Figure 2-2](c02.xhtml#fig2-2))
    is 100 percent, one SVG pixel exactly corresponds to one screen pixel, which is
    convenient when creating graphics for screen viewing.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: SVG像素与*屏幕像素*不同。当你放大时，一个SVG像素的距离会比屏幕上的一个像素大；当你缩小时，它会比一个屏幕像素小。然而，当你的缩放级别（显示在Inkscape窗口状态栏的右端；参见[图2-2](c02.xhtml#fig2-2)）为100%时，一个SVG像素恰好对应一个屏幕像素，这在为屏幕显示创建图形时非常方便。
- en: In Inkscape, 96 SVG pixels are equal to one inch, so when you export your image
    at the resolution of 96 dpi (pixels per inch), it will show up exactly as displayed
    in Inkscape at 100 percent zoom. In most places where you can specify sizes or
    distances in Inkscape's UI, there's a way to specify the units, and the `px` unit
    (SVG pixel) is the default. You can choose a different default as the Display
    unit for your document in the Document Properties, Page tab.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Inkscape中，96个SVG像素等于一英寸，因此当你以96 dpi（每英寸像素）分辨率导出图像时，它将在Inkscape以100%缩放显示时精确地显示出来。在Inkscape的UI中，大多数地方都可以指定大小或距离的单位，而`px`（SVG像素）是默认单位。你可以在文档属性的页面选项卡中为文档选择不同的默认显示单位。
- en: SVG uses rectangular Cartesian coordinates for specifying objects' positions
    on canvas. The coordinate origin in SVG is in the top-left corner of the page,
    and the `y` coordinate grows downward. By default, Inkscape's UI uses the same
    convention, although you can switch the origin to the bottom-left corner with
    `y` growing upward (**Preferences ▶ Interface**, uncheck**Origin at upper left**
    that is checked by default). In older Inkscape versions, origin at bottom left
    was the only available option, even though it was always against the SVG convention.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: SVG使用矩形笛卡尔坐标来指定对象在画布上的位置。SVG中的坐标原点位于页面的左上角，`y`坐标向下增长。默认情况下，Inkscape的UI使用相同的约定，尽管你可以通过将`y`向上增长来将原点切换到左下角（**首选项 ▶ 界面**，取消勾选默认选中的**左上角为原点**）。在旧版本的Inkscape中，左下角为原点是唯一可用的选项，尽管它总是与SVG的约定相悖。
- en: A.7 Transformations
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.7 变换
- en: 'Every object in SVG has its own natural place on the canvas. For example, for
    a rectangle, the `rect` element''s `x` and `y` coordinates define this place:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SVG中的每个对象都有其在画布上的自然位置。例如，对于一个矩形，`rect`元素的`x`和`y`坐标定义了这个位置：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'However, one of SVG’s most interesting features is that this position can be
    affected by the `transform` attribute. Often, this attribute contains a sequence
    of six numbers inside a `matrix(...)`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，SVG最有趣的特点之一是，这个位置可以通过`transform`属性进行影响。通常，这个属性包含一个`matrix(...)`内的六个数字序列：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this form, the attribute represents an *affine transformation matrix*. A
    treatment of matrix algebra is outside the scope of this book, but here''s a list
    of transformations that are called affine:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种形式下，属性表示一个*仿射变换矩阵*。矩阵代数的处理超出了本书的范围，但这里列出了几种被称为仿射的变换：
- en: Any *moves*, also called *translations* ([Figure 6-1](c06.xhtml#fig6-1)).
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何*平移*，也叫*平移变换*（[图6-1](c06.xhtml#fig6-1)）。
- en: Any *scalings*, including both uniform and nonuniform; for example, scaling
    only width or only height ([Figure 6-2](c06.xhtml#fig6-2)).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何*缩放*，包括均匀缩放和非均匀缩放；例如，只缩放宽度或只缩放高度（[图6-2](c06.xhtml#fig6-2)）。
- en: Any *rotations* around any center ([Figure 6-6](c06.xhtml#fig6-6)).
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何*旋转*围绕任意中心进行（[图6-6](c06.xhtml#fig6-6)）。
- en: Any *skews*, sometimes called *shears* ([Figure 6-7](c06.xhtml#fig6-7)).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何*倾斜*，有时也称为*剪切*（[图 6-7](c06.xhtml#fig6-7)）。
- en: 'Not coincidentally, these transformations are exactly those that the Selector
    tool can perform ([Chapter 6](c06.xhtml#ch6)). For example, perspective transformations
    are *not* affine: they cannot be expressed by a `transform` attribute and cannot
    be performed by the Selector tool.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 并非巧合，这些变换正是选择工具可以执行的变换（[第 6 章](c06.xhtml#ch6)）。例如，透视变换*不是*仿射变换：它们不能通过`transform`属性表示，也不能通过选择工具执行。
- en: An element with a `transform` attribute tells Inkscape to draw this element
    at its natural position and size, and then move, scale, rotate, or skew it as
    specified in the `transform`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 带有`transform`属性的元素会告诉Inkscape在其自然位置和大小绘制此元素，然后按`transform`中指定的内容进行平移、缩放、旋转或倾斜。
- en: A `transform` value on an element's parent (for example, on the`g` element that
    contains this object) affects the object, too. All the transforms on the object
    and all its ancestors are *combined*. This is why, for example, when you move
    or scale a group, all objects belonging to the group are moved and scaled by the
    same amount, although it is only the parent `g` element whose`transform` attribute
    is modified.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的父级（例如，包含此对象的`g`元素）上的`transform`值也会影响该对象。对象及其所有祖先上的所有变换都会*合并*。这就是为什么，例如，当你移动或缩放一个组时，所有属于该组的对象都会按相同的量移动和缩放，尽管实际上只有父级`g`元素的`transform`属性被修改。
- en: On the Behavior ▶ Transforms page of the Preferences dialog ([3.1](c03.xhtml#section3.1)),
    there's a Store transformations choice with the values of Optimized andPreserved.
    This determines the strategy Inkscape uses when transforming objects. With Preserved,
    it will always record all transformations of all objects as`transform` attributes,
    leaving all other attributes intact. WithOptimized (default), Inkscape will try,
    whenever possible, to record the transformation into the object's other attributes
    and not `transform`. For example, when you move a rectangle, in the optimized
    mode, it will change the rectangle's `x` and`y` attributes instead of adding or
    changing its `transform`. Not all kinds of transformations and not all types of
    objects allow for such optimization, however, so even in the optimized mode, `transform`
    attributes will still be created. The only object type that can optimize any kinds
    of transformations and make do without the `transform` at all times is `path`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在首选项对话框的行为▶变换页面（[3.1](c03.xhtml#section3.1)），有一个存储变换选项，其值为“优化”和“保留”。这决定了Inkscape在变换对象时使用的策略。选择“保留”时，它将始终将所有对象的所有变换记录为`transform`属性，保持其他属性不变。选择“优化”（默认）时，Inkscape会尽可能将变换记录到对象的其他属性中，而不是`transform`。例如，当你移动一个矩形时，在优化模式下，它会改变矩形的`x`和`y`属性，而不是添加或更改它的`transform`。然而，并不是所有类型的变换和所有类型的对象都允许这种优化，因此即使在优化模式下，`transform`属性仍会被创建。唯一能够优化所有变换并始终不使用`transform`的对象类型是`path`。
- en: A.8 Style
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.8 样式
- en: 'Naturally, the style properties of an object can be represented as attributes
    of the corresponding element. Such attributes are called *presentation attributes*.
    For example, this rectangle has blue fill and black stroke 1 px wide:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，对象的样式属性可以表示为相应元素的属性。这些属性称为*展示属性*。例如，这个矩形具有蓝色填充和宽度为1像素的黑色描边：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This, however, is only one of the ways to record style properties in XML. Another
    way is to pack all the properties into a single attribute, called `style`, using
    semicolons (`;`) to separate properties and colons (`:`) to separate the name
    from the value in each property:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这只是记录样式属性的一种方式。另一种方式是将所有属性打包成一个单独的属性，称为`style`，使用分号（`;`）分隔属性，使用冒号（`:`）分隔每个属性的名称和值：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Inkscape understands both methods—but when writing properties to SVG, for historical
    reasons, it uses only the second one, with a single `style` attribute. When both
    are present, the properties in the `style` attribute take precedence over the
    same properties in presentation attributes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Inkscape理解这两种方法——但在写入SVG时，由于历史原因，它只使用第二种方法，即单一的`style`属性。当两者都存在时，`style`属性中的属性优先于展示属性中的相同属性。
- en: This appendix does not list all the style properties SVG uses (for a complete
    list, see[https://w3.org/TR/SVG11/propidx.html](https://w3.org/TR/SVG11/propidx.html)),
    but you should be able to recognize the most common ones.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录未列出SVG使用的所有样式属性（完整列表见[https://w3.org/TR/SVG11/propidx.html](https://w3.org/TR/SVG11/propidx.html)），但你应该能够识别最常见的那些。
- en: SVG prescribes that most (but not all) style properties can be inherited by
    children from their parents, provided a child does not specify its own value for
    that property. For example, if a rectangle has no `fill` property specified but
    its parent `g` has `fill="blue"`, the rectangle will be painted blue. In Inkscape,
    such inheritance rarely plays a role, because normally, objects have most of their
    properties explicitly set whether you changed them or not. However, for `fill`
    and `stroke` properties, there's a way to remove, or *unset*, these properties
    via the UI, making it possible to inherit these properties from the parent element
    ([8.2](c08.xhtml#section8.2)).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 规定，大多数（但不是所有）样式属性可以从父元素继承给子元素，前提是子元素没有为该属性指定自己的值。例如，如果矩形没有指定`fill`属性，但其父元素`g`有`fill="blue"`，那么矩形将被填充为蓝色。在
    Inkscape 中，这种继承通常不会发挥作用，因为通常对象的绝大多数属性会显式地设置，无论你是否更改了它们。然而，对于`fill`和`stroke`属性，存在通过
    UI 移除或*取消设置*这些属性的方法，使得子元素可以从父元素继承这些属性（[8.2](c08.xhtml#section8.2)）。
- en: A.9 Linking
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.9 链接
- en: Often, elements in SVG need to refer, or *link*, to one another. This is most
    common when visible elements on the canvas use some of the definitions in`defs`
    ([A.4](#sectionA.4)). For example, if you have a rectangle filled with a linear
    gradient, the`rect` element describes only the rectangle itself. A different element
    called `linearGradient` in the document’s `defs` describes its gradient, and the
    rectangle links to that gradient definition.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，SVG 中的元素需要彼此引用或*链接*。这在画布上的可见元素使用`defs`中的一些定义时最为常见（[A.4](#sectionA.4)）。例如，如果你有一个填充线性渐变的矩形，`rect`元素仅描述矩形本身。文档中名为`linearGradient`的另一个元素描述了其渐变，矩形通过链接该渐变定义来实现渐变效果。
- en: 'In order to be linkable, an element must have an `id` attribute whose value
    is unique inside this document. Inkscape provides unique `id`s for all elements
    automatically. The URL for linking to an element is simply its `id` preceded by
    a hash mark (`#`)—for example,`#linearGradient2128`. To use this URL from a `style`
    property, you need to enclose it in parentheses and prefix it with the string
    `url`. For example, here''s a `linearGradient` element and a rectangle linking
    to it from its `fill` property:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现可链接性，元素必须具有一个`id`属性，其值在文档中是唯一的。Inkscape 会自动为所有元素提供唯一的`id`。链接到元素的 URL 就是其`id`，前面加上井号（`#`）——例如，`#linearGradient2128`。要在`style`属性中使用此
    URL，您需要将其括在括号中，并在前面加上`url`字符串。例如，下面是一个`linearGradient`元素，以及一个通过其`fill`属性链接到该元素的矩形：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Linking is not always done by style properties; for example, the SVG standard
    says that gradients can link to one another in order to share color stops and
    other attributes. In such cases, SVG uses the `xlink:href` attribute (in other
    words, the `href` attribute in the XLink namespace; XLink is another W3C standard,
    separate from SVG, used in many XML vocabularies for linking). The`xlink:href`
    attribute uses the plain URL without the `url()` wrapper—for example, `xlink:href="#linearGradient2128"`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 链接并不总是通过样式属性进行的；例如，SVG 标准规定渐变可以相互链接，以共享颜色停靠点和其他属性。在这种情况下，SVG 使用`xlink:href`属性（换句话说，XLink
    命名空间中的`href`属性；XLink 是一个独立于 SVG 的 W3C 标准，用于在许多 XML 词汇中进行链接）。`xlink:href`属性使用不带`url()`包装的纯
    URL——例如，`xlink:href="#linearGradient2128"`。
- en: SVG allows you to link not only to other elements in the same document but also
    to other documents, accessible locally or on the internet, as well as to elements
    inside them. Inkscape does not yet support such cross-document linking to SVG
    documents—although it can link to external bitmap files inserted as bitmap objects
    in a document ([18.2.1](c18.xhtml#section18.2.1)).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SVG 允许你链接到同一文档中的其他元素，也可以链接到其他文档，无论是本地文档还是互联网上的文档，以及它们内部的元素。Inkscape 尚不支持跨文档链接到
    SVG 文档——虽然它可以链接到作为位图对象插入文档中的外部位图文件（[18.2.1](c18.xhtml#section18.2.1)）。
- en: A.10 Object Types
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.10 对象类型
- en: Inkscape can create various object types, each object remembering its type and
    providing controls and behaviors specific to that type ([Chapter 11](c11.xhtml#ch11)).
    SVG directly supports some of these object types; for example, `rect` elements
    from SVG represent Inkscape’s rectangles. But others are unique to Inkscape—for
    example, SVG has no special elements for spirals, stars, or 3D boxes. How can
    Inkscape use these object types while staying compatible with SVG?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Inkscape 可以创建多种对象类型，每个对象都记住其类型，并提供特定于该类型的控制和行为（[第11章](c11.xhtml#ch11)）。SVG 直接支持其中一些对象类型；例如，SVG
    中的 `rect` 元素代表 Inkscape 的矩形。但是其他一些对象是 Inkscape 独有的——例如，SVG 没有专门表示螺旋、星形或 3D 盒子的元素。那
    Inkscape 如何在保持与 SVG 兼容的同时使用这些对象类型呢？
- en: 'The solution is the `sodipodi:type` attribute. Inkscape saves a star as a universal
    `path` element that can represent any shape, but adds to it the `sodipodi:type`
    indicating it''s actually a star, as well as some other extension attributes storing
    various star-specific parameters. The `path`''s standard `d` attribute, meanwhile,
    provides an exact representation of the star''s shape:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案就是 `sodipodi:type` 属性。Inkscape 将星形保存为一个通用的 `path` 元素，能够表示任何形状，但在此基础上增加了
    `sodipodi:type`，表示它实际上是一个星形，同时还会添加一些其他扩展属性来存储与星形相关的各种参数。与此同时，`path` 的标准 `d` 属性提供了星形的精确表示：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When loading a document with such an element, Inkscape recognizes the`sodipodi:type`
    and, for editing, treats the object as a star rather than a path. When any other
    SVG software loads the same file, it ignores any Inkscape-specific attributes
    and interprets this element as a simple path—which, however, *looks* exactly the
    same as the star displayed in Inkscape. In other words, while only Inkscape can
    *edit* the star as a star, using the standard `path` as the base for this object
    type ensures that it remains compatible with any SVG software.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载包含此类元素的文档时，Inkscape 会识别 `sodipodi:type`，并在编辑时将该对象视为星形而不是路径。当其他 SVG 软件加载相同的文件时，它会忽略任何
    Inkscape 特有的属性，并将此元素解释为简单路径——但它的 *外观* 完全与 Inkscape 中显示的星形相同。换句话说，尽管只有 Inkscape
    能够将星形 *编辑* 为星形，使用标准的 `path` 作为该对象类型的基础，确保了它仍然与任何 SVG 软件兼容。
- en: A.11 Inkscape's SVG Extensions
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A.11 Inkscape 的 SVG 扩展
- en: To conclude this necessary but very superficial appendix, I give a list of the
    most important extension elements and attributes that you may see in Inkscape
    SVG files.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结这个必要但非常表面的附录，我列出了你可能会在 Inkscape SVG 文件中看到的最重要的扩展元素和属性。
- en: 'One point bears repeating: none of these additional elements and attributes
    make Inkscape documents invalid SVG. The X in "XML" stands for "eXtensible" for
    a reason: the ability to mix different vocabularies freely was one of XML''s goals
    from the very beginning. This means that any Inkscape SVG file must—and does—render
    absolutely the same in all compliant SVG renderers.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点需要重申：这些额外的元素和属性并不会使 Inkscape 文档变成无效的 SVG。"XML" 中的 "X" 代表 "eXtensible"（可扩展）的原因很简单：自由混合不同词汇表是
    XML 从一开始就设定的目标之一。这意味着任何 Inkscape SVG 文件必须——并且确实——在所有兼容的 SVG 渲染器中呈现完全相同的效果。
- en: The `inkscape:version` attribute on the root element identifies the version
    of Inkscape in which the file was last edited and saved.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根元素上的 `inkscape:version` 属性标识了最后编辑并保存该文件的 Inkscape 版本。
- en: The `inkscape:collect` attribute is added to those elements in`defs` that can
    be deleted automatically if no longer used ([A.4](#sectionA.4)).
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inkscape:collect` 属性被添加到 `defs` 中那些如果不再使用则可以自动删除的元素上（[A.4](#sectionA.4)）。'
- en: '[1.1]'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1.1]'
- en: The `inkscape:isstock` attribute is set on those elements in `defs` that are
    taken from Inkscape's stock markers, patterns, gradients, and so on, as opposed
    to those you created yourself. The `inkscape:stockid` attribute provides the `id`
    that this element had in its stock source.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`inkscape:isstock` 属性设置在 `defs` 中的元素上，这些元素来自 Inkscape 的库存标记、图案、渐变等，而不是你自己创建的元素。`inkscape:stockid`
    属性提供了该元素在库存源中的 `id`。'
- en: The `sodipodi:namedview` element and its attributes are where Inkscape stores
    per-document preferences ([A.4](#sectionA.4)).
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sodipodi:namedview` 元素及其属性是 Inkscape 存储每个文档偏好的地方（[A.4](#sectionA.4)）。'
- en: The `sodipodi:type` attribute is what Inkscape uses to mark objects of non-SVG
    types ([A.10](#sectionA.10)). An element with this attribute usually has a bunch
    of other Inkscape-specific attributes that store various parameters unique to
    this object type.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sodipodi:type` 属性是 Inkscape 用来标记非 SVG 类型对象的属性（[A.10](#sectionA.10)）。具有此属性的元素通常还会有一些其他
    Inkscape 特有的属性，用来存储与该对象类型相关的各种参数。'
- en: The `inkscape:transform-center-x` and`inkscape:transform-center-y` attributes
    are set on an object if you have moved its fixed point ([6.4](c06.xhtml#section6.4)).
    Inkscape remembers the position of this point for each object for which it was
    changed.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已移动对象的固定点，则 `inkscape:transform-center-x` 和 `inkscape:transform-center-y`
    属性会设置在该对象上 ([6.4](c06.xhtml#section6.4))。Inkscape 会记住每个对象的该点位置，任何更改都会被记录。
- en: The `sodipodi:nodetypes` attribute is where Inkscape stores the types of all
    nodes of a path that you edited with the Node tool. Classifying nodes as smooth,
    symmetric, and cusp ([12.5.5](c12.xhtml#section12.5.5)) is something Inkscape
    allows you to do, but SVG has no provisions for—hence the need for an extension
    attribute.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sodipodi:nodetypes` 属性是 Inkscape 存储您使用节点工具编辑的路径上所有节点类型的地方。将节点分类为平滑、对称和尖点 ([12.5.5](c12.xhtml#section12.5.5))
    是 Inkscape 允许您执行的操作，但 SVG 本身没有相关规定——因此需要扩展属性。'
- en: The `sodipodi:role` attribute with the value of `line` is set on those `tspan`
    elements inside a `text` element that represents a line ([15.2.1](c15.xhtml#section15.2.1)).
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sodipodi:role` 属性值为 `line` 时，设置在 `text` 元素内的 `tspan` 元素上，表示一行文本 ([15.2.1](c15.xhtml#section15.2.1))。'
- en: The `inkscape:groupmode` attribute on a `g` is what differentiates a group from
    a layer in Inkscape ([A.5](#sectionA.5)). For a layer, this attribute stores the
    value`layer`.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g` 上的 `inkscape:groupmode` 属性是区分 Inkscape 中组和图层的标志 ([A.5](#sectionA.5))。对于图层，此属性存储值
    `layer`。'
- en: The `inkscape:label` attribute can be set on any element to provide a human-readable
    label for the corresponding object (the`id` attribute is bad for this purpose
    because it cannot contain spaces and punctuation; `inkscape:label` is free from
    those limitations, [4.1](c04.xhtml#section4.1)). In this attribute, Inkscape stores
    the human-readable name of a layer.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inkscape:label` 属性可以设置在任何元素上，以提供对应对象的人类可读标签（`id` 属性不适用于此目的，因为它不能包含空格和标点符号；`inkscape:label`
    不受这些限制，[4.1](c04.xhtml#section4.1)）。此属性中，Inkscape 存储图层的人类可读名称。'
- en: The `inkscape:menu` and `inkscape:menu-tooltip` attributes appear on a `filter`
    element in `defs` when you apply one of the preset filters ([17.4](c17.xhtml#section17.4))
    to an object in your document. They store the submenu from which this filter came
    and its brief description (which Inkscape uses for a status bar tip when you browse
    the menus).
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inkscape:menu` 和 `inkscape:menu-tooltip` 属性出现在 `defs` 中的 `filter` 元素上，当您将预设滤镜之一
    ([17.4](c17.xhtml#section17.4)) 应用到文档中的对象时。它们存储该滤镜所在的子菜单及其简短描述（Inkscape 用于当您浏览菜单时，显示在状态栏上的提示）。'
- en: The `inkscape:perspective` element is stored in `defs` when you use the 3D Box
    tool ([11.3](c11.xhtml#section11.3)); it stores a shared perspective to which
    multiple 3D box objects may refer.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您使用 3D 盒子工具 ([11.3](c11.xhtml#section11.3)) 时，`inkscape:perspective` 元素会存储在
    `defs` 中；它存储一个共享视角，多个 3D 盒子对象可以引用该视角。
- en: A collection of `inkscape:tile-*` attributes appear on an object after you use
    the clone tiler on it ([16.6](c16.xhtml#section16.6)); they store the tile's saved
    size and position.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组 `inkscape:tile-*` 属性会出现在您使用克隆平铺器应用到对象后 ([16.6](c16.xhtml#section16.6))；它们存储瓷砖的已保存大小和位置。
- en: The `inkscape:export-filename` attribute, which you can set on any element (including
    root), stores the filename, including the path, into which this object (or, in
    case of root element, the entire document) was last exported as a bitmap. This
    value is automatically placed into the Filename field of the Export PNG Image
    dialog ([18.6.1.4](c18.xhtml#section18.6.1.4)), so you can quickly redo exporting
    to the same file. (This is why Inkscape claims that the document has changed and
    needs resaving after you do a bitmap export from it.) Similarly, the `inkscape:export-xdpi`
    and `inkscape:export-ydpi` attributes contain the horizontal and vertical resolution
    you last used for exporting this document.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`inkscape:export-filename` 属性可以在任何元素（包括根元素）上设置，它存储文件名（包括路径），即该对象（或根元素的情况下，整个文档）上次导出为位图的文件。此值会自动填入导出
    PNG 图像对话框中的文件名字段 ([18.6.1.4](c18.xhtml#section18.6.1.4))，因此您可以快速重新导出到相同的文件。（这也是为什么
    Inkscape 在您从文档中导出位图后，声明文档已更改并需要重新保存的原因。）类似地，`inkscape:export-xdpi` 和 `inkscape:export-ydpi`
    属性包含您上次导出该文档时使用的水平和垂直分辨率。'
