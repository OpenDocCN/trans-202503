- en: A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An SVG Primer
  prefs: []
  type: TYPE_NORMAL
- en: This appendix is a very high-level glance at the workings of SVG and its implementation
    in Inkscape. If you want the final, complete, and authoritative reference on SVG,
    refer to the W3C’s SVG specification at [https://w3.org/Graphics/SVG/](https://w3.org/Graphics/SVG/).
    As of this writing, SVG 2.0 is still a draft; Inkscape supports the latest released
    version of the standard, 1.1, that you can find at [https://w3.org/TR/SVG11/](https://w3.org/TR/SVG11/).
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge of SVG and, more generally, XML (SVG is based on XML) is not strictly
    necessary for mastering Inkscape—but it helps. It will allow you to peek under
    the hood of Inkscape drawings, and it will often reveal the true reasons behind
    some of Inkscape's features (or lack thereof). Let's start with a quick intro
    to XML that you may find useful in many situations, even those that don't involve
    Inkscape or SVG.
  prefs: []
  type: TYPE_NORMAL
- en: A.1 A Quick Introduction to XML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you've ever looked at a web page’s source code, you already know what XML
    looks like, because XHTML, the markup language used on the web today, is one of
    the subspecies of XML—more precisely, an *XML vocabulary*. SVG is another such
    vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: XML is a standardized way to record structured information in plaintext. It
    is easy for computers to parse and yet quite understandable for humans. Unlike
    most computer-related concepts that tend to be as complex as you think they are
    (or more), XML is almost unbelievably simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic building block of an XML document is an *element*. Here is an example
    of an element containing some text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The text inside the element is called its *content*, and that content is delimited
    by *tags*. Everything between the less-than sign (`<`) and the greater-than sign
    (`>`) is a tag. Here, the opening tag and the closing tag are almost identical,
    except the closing one has a forward slash (`/`) before the element name, which
    in this case is `example`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An element may have no content at all:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These two *empty elements* are equivalent; the second one, consisting of a single
    tag, is just a spelling variant of the first. Note the different position of the
    forward slash (`/`) in the single-tag empty element.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to text, elements can also contain other elements, but those elements
    must lie *entirely* within the containing element. For example, this is wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'because the element `b` starts inside `a` but ends outside it. If an element
    starts inside some other element, it must also end within that element. Here is
    an example of correct XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We say that `a` is the *parent element* of `b`,`c`, and `d`, while `d` is the
    parent of`e`. An element may have multiple children, but it has only one parent
    (except for the root element of the document, which has no parent at all). [Figure A-1](#figA-1)
    is a graphic representation of this XML fragment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](03/tree.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure A-1: A tree representing the XML code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from child elements, XML elements may have *attributes*. Each attribute
    is a name with some associated value. Attributes are specified in the opening
    tag of an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note the equal sign (`=`) and the double-quotation marks around attribute values.
    Both are mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'An entire XML document is just a single element (called the*root*), possibly
    with some text content and child elements—which, in turn, can have more content
    and more children, and so on. An XML document can thus be thought of as a tree
    growing from a single root. For example, the following is a complete and valid
    SVG document whose root element, `svg`, contains two elements representing a rectangle
    and a text string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A.2 Vocabularies and Namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: XML itself is just a foundation—and you can erect a lot of different buildings
    on that foundation. You won't believe how many work hours were wasted, before
    the advent of XML, on inventing new data formats for each application, formulating
    their rules, writing and testing software to support them, and working around
    the inevitable bugs, exceptions, and version incompatibilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'These days, if you need to record some data, you no longer need to go into
    the low-level details of which characters have special meanings and what the sizes
    of various fields are. By choosing XML (and you need serious reasons*not* to choose
    it), you can concentrate on what really matters: the structure of your data and
    how to name elements and attributes to best express that structure.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you may not even need to do that, because a common standardized XML
    *vocabulary* likely already exists for your kind of data. Each vocabulary defines
    a set of elements and attributes, detailing what they are supposed to mean, in
    what contexts they may be used, what is obligatory or optional, and so on. SVG
    is one such vocabulary; XHTML is another. Standardized XML vocabularies exist
    for many exotic things, from dog genealogies to star catalogs. Many of them reuse
    parts of other vocabularies.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to mix different vocabularies without confusion, XML uses*namespaces*.
    A namespace is a way to indicate where a specific element or attribute comes from.
    For example, here''s an `image` element from the SVG vocabulary, representing
    a linked bitmap image inside an SVG document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that the element name and one of the attributes use a colon (`:`). The
    part of the name before the colon is called the *namespace prefix*. To find out
    which namespace corresponds to that prefix, look for a namespace declaration in
    the form of a special `xmlns`-prefixed attribute (`xmlns` is short for *XML NameSpace*),
    either on the same element or on any of its ancestor elements up the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is customary to place all namespace declaration attributes on the root element,
    so you will likely find the declarations for `svg` and`xlink` prefixes in the
    root `svg` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This means that the `svg` prefix is bound to the namespace of`http://www.w3.org/2000/svg`,
    and the `xlink` prefix corresponds to`http://www.w3.org/1999/xlink`. Here, the
    namespaces are URLs, but they don't need to be; the only requirement is that they
    are globally unique, and URLs are the easiest way to ensure that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The namespace URL for SVG, `http://www.w3.org/2000/svg`, must look exactly
    as shown. If the namespace prefix of the elements in your SVG document does not
    resolve to `http://www.w3.org/2000/svg`, Inkscape (or any other SVG software)
    will not recognize the document as SVG. The namespace *prefix*, however, may be
    arbitrary, so long as it''s bound to the correct namespace. The prefix can even
    be empty if you declare it thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the element with that declaration, any element name *without* a prefix
    is assumed to be in the SVG namespace. For example, the following will be recognized
    as a valid SVG `image` element that links an external image file in PNG format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Namespace errors, such as no namespace declared for a prefix or a wrong namespace
    URL, are the most common when you edit SVG by hand—watch out for them!
  prefs: []
  type: TYPE_NORMAL
- en: A.3 Root
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s a typical root `svg` element of an Inkscape SVG document with a bunch
    of namespace declarations and other attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: SVG uses the SVG namespace (`http://www.w3.org/2000/svg`) for its own elements
    and the XLink namespace (`http://www.w3.org/1999/xlink`) for the linking attributes
    ([A.9](#sectionA.9)). On top of that, Inkscape adds elements and attributes in
    the namespaces belonging to Inkscape (`http://www.inkscape.org/namespaces/inkscape`)
    and its predecessor Sodipodi (`http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd`;
    see [1.6](c01.xhtml#section1.6) for a brief history of Inkscape). Other namespaces
    declared here are used for metadata elements (general information about the document)
    and license identifiers ([A.4](#sectionA.4)).
  prefs: []
  type: TYPE_NORMAL
- en: In this example root element, the only attributes defined in the SVG standard
    are`width` and `height` (defining the size of the canvas),`id`, and `version`.
    The rest are either namespace declarations or attributes in the Inkscape/Sodipodi
    namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: The `inkscape:version` specifies the version of Inkscape in which this document
    was created, in this case 1.0 (with a build number and date in parentheses). It
    also claims that the version of Sodipodi that this document will work with is
    0.32 (`sodipodi:version="0.32"`), because after that version Inkscape forked off
    Sodipodi. The non-namespaced `version` attribute refers to the version of the
    SVG specification this document implements, 1.1.
  prefs: []
  type: TYPE_NORMAL
- en: When you save a document, you have a choice between Inkscape SVG and Plain SVG
    formats; the only difference is that Plain SVG strips away all the elements and
    attributes in the Inkscape and Sodipodi namespaces, leaving only the standard
    namespaces. Generally, no Inkscape-specific elements or attributes are allowed
    to alter how the document *looks*; they can affect only the way it*behaves* when
    edited in Inkscape (for example, an attribute on a `g` element may tell Inkscape
    to treat that element as a 3D box instead of a simple group; see [11.3](c11.xhtml#section11.3)).
    Thus, saving as a Plain SVG will make a file a little smaller but at the cost
    of losing some of its Inkscape editability. If you find a file that renders differently
    after being saved as Plain SVG, you've found a bug—please report it to the developers!
  prefs: []
  type: TYPE_NORMAL
- en: A.4 Defs, View, and Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's descend from the root element of a typical Inkscape SVG document to see
    what else is in there.
  prefs: []
  type: TYPE_NORMAL
- en: 'First comes the `defs` element. A part of the SVG standard, `defs` is a storage
    bin for things that, by themselves, are not displayed on the canvas but may be
    referred to by other elements. This includes gradients, patterns, markers (arrowheads,[9.5](c09.xhtml#section9.5)),
    clipping paths, masks, filters, and so on, which are all stored as child elements
    of the`defs` element. The SVG specification allows you to place multiple `defs`
    elements almost anywhere in the document, but Inkscape always uses a single`defs`
    under the root `svg`. Here''s an example `defs` element containing a gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Adding the `linearGradient` element to `defs`, by itself, does not change anything
    on the canvas. Now, however, any object can reference ([10.2.1](c10.xhtml#section10.2.1))
    this gradient for painting its fill or stroke.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the stuff in `defs` is kept even if no visible element uses it. Exceptions
    are the elements with the `inkscape:collect="always"` attribute; such elements
    are automatically deleted when no longer used. Inkscape often uses this flag to
    mark various supplemental elements it creates on its own and can safely dispose
    of; it will never delete anything that you have created or explicitly added without
    your permission. This way, you can reuse things you once defined but then stopped
    using.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, `defs` may grow larger and larger as you work on your document.
    To remove any unused definitions from `defs`, use the**File ▶ Clean Up Document**
    command. Sometimes, this command may fail to delete *all* unused stuff in `defs`
    on the first try; you may need to quit, reload the document, and clean it up again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next element under the root of an Inkscape SVG document is`sodipodi:namedview`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This Inkscape-specific element holds, in its attributes, all kinds of options
    specific to this document: the zoom level and scroll position that Inkscape will
    use upon loading the document, the rotation angle of the canvas, the colors and
    spacing of the grids, various snapping modes, the current layer, document units,
    and so on. From within Inkscape, you can set most of these options via the File ▶ Document
    Properties dialog ([3.1.2](c03.xhtml#section3.1.2)).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `metadata` element appears right before the document’s content
    actually starts. It stores information about the document's author, its purpose,
    date, license, and so on, and it corresponds to the File ▶ Document Metadata dialog
    in Inkscape. The elements inside `metadata` use the RDF standard (see [https://w3.org/RDF/](https://w3.org/RDF/)),
    which may employ additional XML namespaces to describe different sorts of information.
  prefs: []
  type: TYPE_NORMAL
- en: A.5 Layers and Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the `metadata` element, the SVG document’s actual visible content begins.
    Naturally, each document *object* corresponds to an SVG *element*. Moreover, the
    order of the elements in the file corresponds to the order in which the objects
    are visually stacked on the canvas ([4.4](c04.xhtml#section4.4)): elements closer
    to the end of the file are painted on top of those at the beginning.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you group objects together ([4.8](c04.xhtml#section4.8)), they are placed
    inside a`g` element. For example, here''s a group that contains a rectangle and
    a text object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Besides groups, another way to organize your objects is via layers ([4.9](c04.xhtml#section4.9)).
    SVG does not have a special element type for layers; instead, Inkscape uses an
    SVG `g` element, adding a custom attribute so it knows to treat the group as a
    layer when the file is edited.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Since layers are thus a specific type of groups, it is easy to see how Inkscape
    can "enter a group," treating it temporarily as a layer ([4.9.1](c04.xhtml#section4.9.1)).
    This is also why,upon importing Inkscape''s SVG file into another vector editor
    (such as Adobe Illustrator), you usually lose layers but objects get additional
    layers of grouping: the other editor knows nothing about Inkscape''s convention
    of using some `g` elements as layers and treats all of them as regular groups.'
  prefs: []
  type: TYPE_NORMAL
- en: Inside layers and groups, other SVG elements represent the actual objects of
    your drawing. See [https://w3.org/TR/SVG11/eltindex.html](https://w3.org/TR/SVG11/eltindex.html)
    for a complete list of elements in SVG 1.1, but note that Inkscape doesn’t support
    all of them yet.
  prefs: []
  type: TYPE_NORMAL
- en: A.6 Coordinates and Units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use a number of units to express distances and coordinates in SVG drawings:
    centimeters (`cm`), millimeters (`mm`), inches (`in`), points (`pt`), and a few
    others. One unit, however, is special: the *SVG pixel* (abbreviated `px`) is sometimes
    called the *anonymous unit* because you can write it without any unit designation
    at all. For example, in this `rect` element, `x`, `y`,`width`, and `height` are
    expressed in SVG pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You could also specify these same lengths in millimeters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: and Inkscape would understand it correctly. However, if you change and resave
    this SVG file, Inkscape will convert all sizes back to SVG pixels.
  prefs: []
  type: TYPE_NORMAL
- en: An SVG pixel is not the same as a *screen pixel*. When you zoom in, a distance
    of one SVG pixel becomes larger than one pixel on your screen; when you zoom out,
    it becomes smaller than one screen pixel. However, when your zoom level (displayed
    at the right end of the status bar of your Inkscape window; see [Figure 2-2](c02.xhtml#fig2-2))
    is 100 percent, one SVG pixel exactly corresponds to one screen pixel, which is
    convenient when creating graphics for screen viewing.
  prefs: []
  type: TYPE_NORMAL
- en: In Inkscape, 96 SVG pixels are equal to one inch, so when you export your image
    at the resolution of 96 dpi (pixels per inch), it will show up exactly as displayed
    in Inkscape at 100 percent zoom. In most places where you can specify sizes or
    distances in Inkscape's UI, there's a way to specify the units, and the `px` unit
    (SVG pixel) is the default. You can choose a different default as the Display
    unit for your document in the Document Properties, Page tab.
  prefs: []
  type: TYPE_NORMAL
- en: SVG uses rectangular Cartesian coordinates for specifying objects' positions
    on canvas. The coordinate origin in SVG is in the top-left corner of the page,
    and the `y` coordinate grows downward. By default, Inkscape's UI uses the same
    convention, although you can switch the origin to the bottom-left corner with
    `y` growing upward (**Preferences ▶ Interface**, uncheck**Origin at upper left**
    that is checked by default). In older Inkscape versions, origin at bottom left
    was the only available option, even though it was always against the SVG convention.
  prefs: []
  type: TYPE_NORMAL
- en: A.7 Transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every object in SVG has its own natural place on the canvas. For example, for
    a rectangle, the `rect` element''s `x` and `y` coordinates define this place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'However, one of SVG’s most interesting features is that this position can be
    affected by the `transform` attribute. Often, this attribute contains a sequence
    of six numbers inside a `matrix(...)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In this form, the attribute represents an *affine transformation matrix*. A
    treatment of matrix algebra is outside the scope of this book, but here''s a list
    of transformations that are called affine:'
  prefs: []
  type: TYPE_NORMAL
- en: Any *moves*, also called *translations* ([Figure 6-1](c06.xhtml#fig6-1)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any *scalings*, including both uniform and nonuniform; for example, scaling
    only width or only height ([Figure 6-2](c06.xhtml#fig6-2)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any *rotations* around any center ([Figure 6-6](c06.xhtml#fig6-6)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any *skews*, sometimes called *shears* ([Figure 6-7](c06.xhtml#fig6-7)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not coincidentally, these transformations are exactly those that the Selector
    tool can perform ([Chapter 6](c06.xhtml#ch6)). For example, perspective transformations
    are *not* affine: they cannot be expressed by a `transform` attribute and cannot
    be performed by the Selector tool.'
  prefs: []
  type: TYPE_NORMAL
- en: An element with a `transform` attribute tells Inkscape to draw this element
    at its natural position and size, and then move, scale, rotate, or skew it as
    specified in the `transform`.
  prefs: []
  type: TYPE_NORMAL
- en: A `transform` value on an element's parent (for example, on the`g` element that
    contains this object) affects the object, too. All the transforms on the object
    and all its ancestors are *combined*. This is why, for example, when you move
    or scale a group, all objects belonging to the group are moved and scaled by the
    same amount, although it is only the parent `g` element whose`transform` attribute
    is modified.
  prefs: []
  type: TYPE_NORMAL
- en: On the Behavior ▶ Transforms page of the Preferences dialog ([3.1](c03.xhtml#section3.1)),
    there's a Store transformations choice with the values of Optimized andPreserved.
    This determines the strategy Inkscape uses when transforming objects. With Preserved,
    it will always record all transformations of all objects as`transform` attributes,
    leaving all other attributes intact. WithOptimized (default), Inkscape will try,
    whenever possible, to record the transformation into the object's other attributes
    and not `transform`. For example, when you move a rectangle, in the optimized
    mode, it will change the rectangle's `x` and`y` attributes instead of adding or
    changing its `transform`. Not all kinds of transformations and not all types of
    objects allow for such optimization, however, so even in the optimized mode, `transform`
    attributes will still be created. The only object type that can optimize any kinds
    of transformations and make do without the `transform` at all times is `path`.
  prefs: []
  type: TYPE_NORMAL
- en: A.8 Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Naturally, the style properties of an object can be represented as attributes
    of the corresponding element. Such attributes are called *presentation attributes*.
    For example, this rectangle has blue fill and black stroke 1 px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This, however, is only one of the ways to record style properties in XML. Another
    way is to pack all the properties into a single attribute, called `style`, using
    semicolons (`;`) to separate properties and colons (`:`) to separate the name
    from the value in each property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Inkscape understands both methods—but when writing properties to SVG, for historical
    reasons, it uses only the second one, with a single `style` attribute. When both
    are present, the properties in the `style` attribute take precedence over the
    same properties in presentation attributes.
  prefs: []
  type: TYPE_NORMAL
- en: This appendix does not list all the style properties SVG uses (for a complete
    list, see[https://w3.org/TR/SVG11/propidx.html](https://w3.org/TR/SVG11/propidx.html)),
    but you should be able to recognize the most common ones.
  prefs: []
  type: TYPE_NORMAL
- en: SVG prescribes that most (but not all) style properties can be inherited by
    children from their parents, provided a child does not specify its own value for
    that property. For example, if a rectangle has no `fill` property specified but
    its parent `g` has `fill="blue"`, the rectangle will be painted blue. In Inkscape,
    such inheritance rarely plays a role, because normally, objects have most of their
    properties explicitly set whether you changed them or not. However, for `fill`
    and `stroke` properties, there's a way to remove, or *unset*, these properties
    via the UI, making it possible to inherit these properties from the parent element
    ([8.2](c08.xhtml#section8.2)).
  prefs: []
  type: TYPE_NORMAL
- en: A.9 Linking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, elements in SVG need to refer, or *link*, to one another. This is most
    common when visible elements on the canvas use some of the definitions in`defs`
    ([A.4](#sectionA.4)). For example, if you have a rectangle filled with a linear
    gradient, the`rect` element describes only the rectangle itself. A different element
    called `linearGradient` in the document’s `defs` describes its gradient, and the
    rectangle links to that gradient definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be linkable, an element must have an `id` attribute whose value
    is unique inside this document. Inkscape provides unique `id`s for all elements
    automatically. The URL for linking to an element is simply its `id` preceded by
    a hash mark (`#`)—for example,`#linearGradient2128`. To use this URL from a `style`
    property, you need to enclose it in parentheses and prefix it with the string
    `url`. For example, here''s a `linearGradient` element and a rectangle linking
    to it from its `fill` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Linking is not always done by style properties; for example, the SVG standard
    says that gradients can link to one another in order to share color stops and
    other attributes. In such cases, SVG uses the `xlink:href` attribute (in other
    words, the `href` attribute in the XLink namespace; XLink is another W3C standard,
    separate from SVG, used in many XML vocabularies for linking). The`xlink:href`
    attribute uses the plain URL without the `url()` wrapper—for example, `xlink:href="#linearGradient2128"`.
  prefs: []
  type: TYPE_NORMAL
- en: SVG allows you to link not only to other elements in the same document but also
    to other documents, accessible locally or on the internet, as well as to elements
    inside them. Inkscape does not yet support such cross-document linking to SVG
    documents—although it can link to external bitmap files inserted as bitmap objects
    in a document ([18.2.1](c18.xhtml#section18.2.1)).
  prefs: []
  type: TYPE_NORMAL
- en: A.10 Object Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inkscape can create various object types, each object remembering its type and
    providing controls and behaviors specific to that type ([Chapter 11](c11.xhtml#ch11)).
    SVG directly supports some of these object types; for example, `rect` elements
    from SVG represent Inkscape’s rectangles. But others are unique to Inkscape—for
    example, SVG has no special elements for spirals, stars, or 3D boxes. How can
    Inkscape use these object types while staying compatible with SVG?
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution is the `sodipodi:type` attribute. Inkscape saves a star as a universal
    `path` element that can represent any shape, but adds to it the `sodipodi:type`
    indicating it''s actually a star, as well as some other extension attributes storing
    various star-specific parameters. The `path`''s standard `d` attribute, meanwhile,
    provides an exact representation of the star''s shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When loading a document with such an element, Inkscape recognizes the`sodipodi:type`
    and, for editing, treats the object as a star rather than a path. When any other
    SVG software loads the same file, it ignores any Inkscape-specific attributes
    and interprets this element as a simple path—which, however, *looks* exactly the
    same as the star displayed in Inkscape. In other words, while only Inkscape can
    *edit* the star as a star, using the standard `path` as the base for this object
    type ensures that it remains compatible with any SVG software.
  prefs: []
  type: TYPE_NORMAL
- en: A.11 Inkscape's SVG Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To conclude this necessary but very superficial appendix, I give a list of the
    most important extension elements and attributes that you may see in Inkscape
    SVG files.
  prefs: []
  type: TYPE_NORMAL
- en: 'One point bears repeating: none of these additional elements and attributes
    make Inkscape documents invalid SVG. The X in "XML" stands for "eXtensible" for
    a reason: the ability to mix different vocabularies freely was one of XML''s goals
    from the very beginning. This means that any Inkscape SVG file must—and does—render
    absolutely the same in all compliant SVG renderers.'
  prefs: []
  type: TYPE_NORMAL
- en: The `inkscape:version` attribute on the root element identifies the version
    of Inkscape in which the file was last edited and saved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:collect` attribute is added to those elements in`defs` that can
    be deleted automatically if no longer used ([A.4](#sectionA.4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[1.1]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:isstock` attribute is set on those elements in `defs` that are
    taken from Inkscape's stock markers, patterns, gradients, and so on, as opposed
    to those you created yourself. The `inkscape:stockid` attribute provides the `id`
    that this element had in its stock source.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `sodipodi:namedview` element and its attributes are where Inkscape stores
    per-document preferences ([A.4](#sectionA.4)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sodipodi:type` attribute is what Inkscape uses to mark objects of non-SVG
    types ([A.10](#sectionA.10)). An element with this attribute usually has a bunch
    of other Inkscape-specific attributes that store various parameters unique to
    this object type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:transform-center-x` and`inkscape:transform-center-y` attributes
    are set on an object if you have moved its fixed point ([6.4](c06.xhtml#section6.4)).
    Inkscape remembers the position of this point for each object for which it was
    changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sodipodi:nodetypes` attribute is where Inkscape stores the types of all
    nodes of a path that you edited with the Node tool. Classifying nodes as smooth,
    symmetric, and cusp ([12.5.5](c12.xhtml#section12.5.5)) is something Inkscape
    allows you to do, but SVG has no provisions for—hence the need for an extension
    attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `sodipodi:role` attribute with the value of `line` is set on those `tspan`
    elements inside a `text` element that represents a line ([15.2.1](c15.xhtml#section15.2.1)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:groupmode` attribute on a `g` is what differentiates a group from
    a layer in Inkscape ([A.5](#sectionA.5)). For a layer, this attribute stores the
    value`layer`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:label` attribute can be set on any element to provide a human-readable
    label for the corresponding object (the`id` attribute is bad for this purpose
    because it cannot contain spaces and punctuation; `inkscape:label` is free from
    those limitations, [4.1](c04.xhtml#section4.1)). In this attribute, Inkscape stores
    the human-readable name of a layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:menu` and `inkscape:menu-tooltip` attributes appear on a `filter`
    element in `defs` when you apply one of the preset filters ([17.4](c17.xhtml#section17.4))
    to an object in your document. They store the submenu from which this filter came
    and its brief description (which Inkscape uses for a status bar tip when you browse
    the menus).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:perspective` element is stored in `defs` when you use the 3D Box
    tool ([11.3](c11.xhtml#section11.3)); it stores a shared perspective to which
    multiple 3D box objects may refer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A collection of `inkscape:tile-*` attributes appear on an object after you use
    the clone tiler on it ([16.6](c16.xhtml#section16.6)); they store the tile's saved
    size and position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `inkscape:export-filename` attribute, which you can set on any element (including
    root), stores the filename, including the path, into which this object (or, in
    case of root element, the entire document) was last exported as a bitmap. This
    value is automatically placed into the Filename field of the Export PNG Image
    dialog ([18.6.1.4](c18.xhtml#section18.6.1.4)), so you can quickly redo exporting
    to the same file. (This is why Inkscape claims that the document has changed and
    needs resaving after you do a bitmap export from it.) Similarly, the `inkscape:export-xdpi`
    and `inkscape:export-ydpi` attributes contain the horizontal and vertical resolution
    you last used for exporting this document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
