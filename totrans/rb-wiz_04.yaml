- en: Chapter 5. Array of Sunshine and Hash on the Range
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五章  阳光与炉灶上的哈希
- en: Big Hank’s Hashery
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大汉克的哈舍里
- en: “Morning, Your Majesty!” boomed a voice from deep inside the Hashery.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: “早安，陛下！”哈舍里里深处传来了一个宏亮的声音。
- en: “Good morning, Big Hank!” said the King.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: “早上好，大汉克！”国王说道。
- en: “Big Hank?” asked Ruben. “Who’s Big Hank?”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: “大汉克？”鲁本问，“谁是大汉克？”
- en: An enormous man with a bald head and a curly black mustache emerged from the
    back of the restaurant. “I am!” he said.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一位庞大的男人，光头和卷曲的黑色胡须，从餐馆的后面走了出来。“我就是！”他说。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160001.png.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160001.png.jpg)'
- en: The King shook Hank’s hand vigorously. “Great to see you, Hank! We had a doodle
    of a time getting here—the Loop was acting up—but I can’t wait to sit down to
    a fine meal of your best hash.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 国王用力地摇了摇汉克的手。“很高兴见到你，汉克！我们一路过来可费了不少劲——环路出了点问题——但我迫不及待想坐下来好好享受一顿你做的最棒的哈希。”
- en: Big Hank frowned, and his mustache drooped noticeably. “The Loop’s gone loopy?”
    he asked. “I wish I could say I were surprised. Things have been going a little
    haywire here, too.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉克皱起了眉头，胡须也显得有些下垂。“环路出了问题？”他问，“真希望我能说我很惊讶。这里的事情也有点乱。”
- en: The King gasped. “You don’t mean—”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 国王倒吸了一口气。“你不会是——”
- en: 'Big Hank nodded. “Our range is on the fritz,” he said. “Until we fix it, I
    won’t be able to cook up anything: no eggs, no breakfast gravy, and certainly
    none of my famous hash.”'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉克点了点头。“我们的炉灶坏了，”他说，“在修好之前，我做不出任何东西：没有鸡蛋，没有早餐肉汁，当然也做不出我闻名的哈希。”
- en: The King slumped onto one of the many long oak benches filling the Hashery.
    “No hash! What could be worse?”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 国王瘫坐在哈舍里里一张长长的橡木长凳上。“没有哈希！还有什么比这更糟糕的？”
- en: “This hash must be really good,” Scarlet said.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: “这哈希一定非常好，”斯卡雷特说道。
- en: “It’s the best!” shouted the King, who was on the verge of tears. “But without
    a working range, there won’t be any. And we’ve come all this way!”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”国王喊道，眼看就要流泪了。“但是没有一个能用的炉灶，我们就做不成任何事。而我们已经走了这么远！”
- en: “Now, hang on,” said Big Hank. “This isn’t the first time Squeaky Jim and I
    have gotten into a pickle here at the Hashery, and it won’t be the last. We’ll
    get this figured out.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，”大汉克说，“这可不是我和吱吱叫的吉姆第一次在哈舍里出问题，也不会是最后一次。我们一定会弄明白的。”
- en: “Who’s Squeaky Jim?” asked Ruben.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “谁是吱吱叫的吉姆？”鲁本问。
- en: “He’s my fry cook,” Hank said. “He’s not what you’d call a whiz with the kitchen
    technology—it all runs on Ruby—but he’s a heck of a cook. Makes a great omelette,
    and he’s almost mastered my hash recipe.”
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “他是我的炸菜厨师，”汉克说道，“他可不算是厨房技术方面的天才——我们一切都靠红宝石（Ruby）来运行——不过他可是个了不起的厨师。做的煎蛋非常好，他几乎已经掌握了我的哈希食谱。”
- en: “Ruby!” Ruben and Scarlet shouted together.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “红宝石！”鲁本和斯卡雷特同时喊道。
- en: Big Hank raised a heavy black eyebrow. “Do you kids know anything about Ruby?”
    he asked. “That would be a huge help.”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉克抬起了浓黑的眉毛。“你们孩子懂不懂红宝石（Ruby）？”他问道，“如果懂的话，那会大有帮助。”
- en: “Absolutely!” said Scarlet. “Show us the kitchen, and we’ll take it from here.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”斯卡雷特说道，“带我们去厨房，我们接手。”
- en: “Hooray!” said the King. “These kids are as smart as a whip, Hank,” he added.
    “They’ll have your kitchen up and running in no time.”
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”国王说道，“这些孩子可聪明了，汉克，”他补充道，“他们会很快让你的厨房恢复运转。”
- en: Big Hank nodded. “Sounds good! I’ve actually got Squeaky Jim using the old griddle
    in the back, but I think he could use some Ruby help. I’ll take another crack
    at the range, but if you kids and Jim get the orders flowing before I get it fixed,
    give me a shout and we’ll put our heads together.”
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉克点了点头。“听起来不错！实际上，我让吱吱叫的吉姆在后面用旧煎锅，但我想他需要点红宝石（Ruby）方面的帮助。我会再试试炉灶，但如果你们孩子和吉姆在我修好之前就把订单做好了，告诉我，我们可以一起想办法。”
- en: “Sure thing,” Scarlet said. “Lead the way!”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题，”斯卡雷特说道，“你带路！”
- en: Big Hank motioned for them to follow him and lumbered through row after row
    of wooden benches toward the back of the Hashery. He stopped at a red metal door
    with a small window toward the top, tapped on it twice, and shouldered it open.
    “Jim!” he called. “The King and his friends are here!”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉克示意他们跟着他走，摇摇晃晃地穿过一排排木凳，向哈舍里的后方走去。他停在一扇顶部有小窗户的红色金属门前，轻轻敲了两下，肩膀顶着推开了门。“吉姆！”他喊道，“国王和他的朋友们来了！”
- en: They heard a brief scuffling sound in the corner of the kitchen, followed by
    the crashing of a dozen or so pots and pans.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 他们听到厨房角落里传来一阵短促的摩擦声，接着是一堆锅碗瓢盆撞击的声音。
- en: “It’s okay, it’s okay—I’ve got it!” Squeaky Jim called, his voice cracking twice.
    He stumbled out from behind a large pile of potato sacks, with a saucepan in each
    hand and one perched crookedly on his head.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “没事，没事——我明白了！” 吱吱吉姆喊道，声音颤抖了两次。他从一堆大土豆袋后面跌跌撞撞地走出来，手里拿着一个平底锅，另一个则歪歪斜斜地顶在头上。
- en: “I know why they call him Squeaky Jim,” Ruben whispered to Scarlet.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: “我知道为什么他们叫他吱吱吉姆了，”鲁本低声对斯卡利特说道。
- en: “Easy, Jim,” Big Hank said, taking the pans from Jim. “The King and his friends
    know a thing or two about Ruby, so I’m asking them to help you out while I tinker
    with the main range.”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “轻松点，吉姆，”大汉说着，从吉姆手中接过锅具。“国王和他的朋友们对 Ruby 有一些了解，所以我请他们帮你，而我则去调整主灶。”
- en: Squeaky Jim hastily bowed to the King. “Your Majesty,” he said.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 吱吱吉姆急忙向国王行了个礼。“陛下，”他说。
- en: “Squeaky Jim,” said the King.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “吱吱吉姆，”国王说道。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160003.png.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160003.png.jpg)'
- en: Big Hank gestured to the corner of the kitchen Squeaky Jim had just come from.
    “You’ll find the Computing Contraption over there,” he said. “I’ll be at the range,
    on the other side of the kitchen.” He turned and hefted a sack of potatoes under
    each arm. “Shout loud if you need me—kitchen’s big,” he called over his shoulder.
    And with that, he was gone.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大汉指了指吉姆刚刚从中走出来的厨房角落。“计算装置就在那边，”他说。“我在炉子那边，厨房的另一边。”他转过身，双臂各夹着一袋土豆。“如果需要我，大声喊我——厨房很大，”他头也不回地喊道。说完，他就走了。
- en: Squeaky Jim cleared his throat. “Big Hank probably told you I’m not a Ruby expert,”
    he squeaked, “but if you can get my griddle working again, I can whip up customer
    orders like nobody’s business.” He pulled a stack of orders from his apron pocket.
    “Most of them are orders for hash and today’s special, the Array of Sunshine,”
    he said. “Three sunny-side eggs in row! Best brunch in the kingdom.”
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 吱吱吉姆清了清嗓子。“大汉可能告诉过你，我不是 Ruby 专家，”他尖声说道，“但是如果你能帮我重新启动我的煎锅，我可以像无人能敌一样做好顾客的订单。”他从围裙口袋里拿出一叠订单。“大多数是土豆饼和今天的特别菜单——阳光数组，”他说。“三颗顺序排列的荷包蛋！是王国里最棒的早午餐。”
- en: “Okay,” said Ruben. “We actually just helped the King with the Loop, and we
    had to use arrays for that. This should be a piece of cake!”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，”鲁本说。“我们其实刚刚帮国王解决了循环问题，而且我们还得用了数组。这应该是小菜一碟！”
- en: “Eggs,” corrected Squeaky Jim.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “鸡蛋，” 吱吱吉姆纠正道。
- en: “Oh, yeah. A piece of . . . eggs,” Ruben said.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，是的，一块……鸡蛋，” 鲁本说。
- en: “Let’s get to work,” Scarlet said. “I’ve already got the Computing Contraption
    open!”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “我们开始工作吧，”斯卡利特说。“计算装置我已经打开了！”
- en: Arrays Within Arrays
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组中的数组
- en: “Great!” said Jim. “Since you guys know about arrays, could you create one for
    me now? The first order is for an Array of Sunshine; that’s just three `'sunny_side_up_egg'`s
    in a row.”
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”吉姆说。“既然你们了解数组，能帮我创建一个吗？第一个订单是一个阳光数组；就是三颗 `'sunny_side_up_egg'` 按顺序排列。”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160005.png.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160005.png.jpg)'
- en: '“Sure!” Scarlet said. “It should look something like this.” She started typing
    into the Computing Contraption:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”斯卡利特说。“它应该像这样。”她开始在计算装置上打字：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When Scarlet pressed ENTER, a small metal track over the griddle began to vibrate.
    One after another, three eggs rolled down the track, cracked against a small hammer,
    and dropped sunny-side-up onto the stove.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当斯卡利特按下回车键时，炉灶上的小金属轨道开始震动。一个接一个的三个鸡蛋沿轨道滚下来，撞上一个小锤子，摔开并落在炉灶上，做成了荷包蛋。
- en: “That’s perfect!” Jim said. “But it looks like a lot of typing, and we’re gonna
    have a lot of orders.” His voice cracked again. “Is there any way we could do
    the same thing with less typing?”
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “太完美了！”吉姆说。“不过看起来要打很多字，而且我们还会有很多订单。”他的声音再次颤抖。“有没有什么办法能用更少的输入做到一样的事？”
- en: '“Yep!” said Scarlet. “You can also create a new array like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题！”斯卡利特说。“你也可以这样创建一个新数组：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: “Here, we’re calling the `new` method on `Array`, which creates a list of items.
    The next part in the parentheses means that the array should have three items,”
    Scarlet explained, “and the last part means that each item should be a `'sunny_side_up_egg'`.
    It’s the same as typing all the stuff we did for `order_one`.”
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “这里，我们调用了 `Array` 的 `new` 方法，它创建了一个项目列表。括号里的下一个部分意味着数组应该包含三个项目，”斯卡利特解释道，“最后一个部分意味着每个项目应该是一个
    `'sunny_side_up_egg'`。这和我们为 `order_one` 所做的完全一样。”
- en: “I remember creating arrays on the Loop with square brackets,” Ruben said, “but
    I’ve never seen `Array.new`. What’s that do?”
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “我记得在循环中用方括号创建数组，”Ruben 说，“但我从没见过 `Array.new`。那是做什么的？”
- en: “Remember how Ruby has datatypes like `String`?” Scarlet asked. Well, `Array`
    is another datatype. You can create an array with *array literal* syntax, which
    is just assigning a variable name to a list in square brackets. You can also create
    an array by calling the `new` method on the `Array` *class*.”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: “记得 Ruby 有像 `String` 这样的数据类型吗？”Scarlet 问道。嗯，`Array` 是另一种数据类型。你可以使用 *数组字面量* 语法创建一个数组，方法就是将一个变量名赋值给一个用方括号括起来的列表。你也可以通过在
    `Array` *类* 上调用 `new` 方法来创建一个数组。”
- en: “What’s a Ruby class?” Squeaky Jim asked.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “什么是 Ruby 类？”Squeaky Jim 问道。
- en: “We’ll get to that in a little bit,” Scarlet said. “But the important thing
    is that classes are like groups of objects in Ruby, and calling the `new` method
    on the class name creates a new *instance*, or example, of that class.”
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “我们稍后会讲到，”Scarlet 说，“但重要的是，类就像 Ruby 中的对象组，调用类名上的 `new` 方法会创建该类的一个新的 *实例*，或者说是一个例子。”
- en: “Okay, that makes sense,” Ruben said. “And we can put variables in arrays, and
    we saw earlier that you can put strings in there. What else can go in arrays?”
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “好吧，这样说得通，”Ruben 说，“我们可以把变量放进数组里，之前我们也看到过你可以把字符串放进去。还有什么可以放进数组里？”
- en: “Anything!” Scarlet said. “And the items in the array don’t even have to be
    the same thing. Check it out!”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: “任何东西！”Scarlet 说，“而且数组里的项甚至可以是不同的东西。看看这个！”
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: “A number, a string, a variable, and a Boolean, all in the same array,” Ruben
    said. “Neat!”
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: “一个数字，一个字符串，一个变量，和一个布尔值，全部在同一个数组里，”Ruben 说，“真棒！”
- en: “That’s great,” Squeaky Jim said, “and the first Array of Sunshine is just about
    ready. But I have a feeling we’re gonna need to cook up a bunch of these—is there
    any way we can make an array with all of our orders in it? Sort of like a list
    of lists?”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “太好了，”Squeaky Jim 说，“第一份阳光数组就快好了。但我有种预感，我们可能要做很多这种东西——有没有什么方法可以让我们把所有的订单都放进一个数组里？就像一个列表中的列表？”
- en: '“Definitely,” Ruben said, and Scarlet stepped aside so he could type:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “绝对可以，”Ruben 说，Scarlet 让开了，他开始打字：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '“That’s awesome! `todays_orders` is an array that contains four other arrays:
    `order_one`, `order_two`, `order_three`, and `order_four`,” Squeaky Jim said.
    “We’ll be done in no time. If we’ve got our orders packed up in an array, though,
    how do we get them back out?”'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！`todays_orders` 是一个包含四个其他数组的数组：`order_one`、`order_two`、`order_three` 和
    `order_four`，”Squeaky Jim 说，“我们很快就能完成了。不过，如果我们的订单已经打包成一个数组了，怎么再取出来呢？”
- en: Even More Array Methods!
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多数组方法！
- en: '“There are a few things we can do,” Ruben said. “Arrays have lots of cool built-in
    methods we can use. For example, we can get the first *item* or *element* in an
    array with the `first` method, like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “我们可以做几件事，”Ruben 说，“数组有很多很酷的内建方法我们可以使用。比如说，我们可以用 `first` 方法获取数组中的第一个 *项* 或 *元素*，就像这样：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: “I see,” said Scarlet. “The `first` method gives us the first item in the array!
    And while we’re talking about `first`, we can get the last element in an array
    with `last`!”
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: “我明白了，”Scarlet 说，“`first` 方法给我们数组中的第一个元素！而且既然我们在谈 `first`，我们还可以用 `last` 获取数组中的最后一个元素！”
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: “That’s `order_four`,” Jim said. “Coming right up!”
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “那是 `order_four`，”Jim 说，“马上就来！”
- en: '“Hang on, though,” said Ruben, and he typed quickly into the Computing Contraption:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: “不过等等，”Ruben 说，他迅速在计算机装置上打字：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: “Whoa, what’s that?” Jim asked, pushing his paper fry-cook hat back and scratching
    his head. “I haven’t seen `empty?` or `length` before.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “哇，那是什么？”Jim 问道，把他的纸质煎炸厨师帽推回去，挠了挠头。“我以前没见过 `empty?` 或 `length`。”
- en: “We saw `length` on strings,” Scarlet said. “When we use that method on strings,
    it tells us how many characters the string contains. For arrays, does it tell
    us how many items are in the array?”
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “我们之前在字符串上看到过 `length`，”Scarlet 说，“当我们对字符串使用这个方法时，它会告诉我们字符串包含了多少个字符。那对数组来说，它会告诉我们数组里有多少项吗？”
- en: “Precisely,” said Ruben. “And we saw `empty?` on the Loop train stops, where
    it just returned a Boolean—`true` if the stop had no one waiting and `false` if
    there was at least one person. This `empty?` is for arrays, but it works the exact
    same way.”
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “没错，”Ruben 说，“我们在循环列车站看到过 `empty?`，它只是返回一个布尔值——如果站点没人等车就是 `true`，如果至少有一个人就是
    `false`。这个 `empty?` 适用于数组，但它的工作方式完全一样。”
- en: Then Ruben frowned. “But there are still four orders in the list! We can get
    some of them with `first` and `last`, but how do we get the rest? And how do we
    remove them from the list as we cook them up?”
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 Ruben 皱起了眉头。“但列表里还有四个订单！我们可以用 `first` 和 `last` 获取其中一些，但怎么获取剩下的呢？我们在做这些的时候怎么从列表中移除它们？”
- en: Shift! Pop! Insert!
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移位！弹出！插入！
- en: '“I think I can help with that,” Scarlet said. “We’ll need to use a couple of
    new array methods, though.” She reached across Ruben to the Computing Contraption
    and started typing:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: “我想我可以帮忙，”斯嘉丽说。“不过我们需要用到一些新的数组方法。”她越过鲁本，操作计算机装置，开始打字：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: “That’s perfect!” said Ruben. “How did you pull the very first order out of
    `todays_orders` and put it in the `current_order` variable?”
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: “太完美了！”鲁本说。“你是怎么把 `todays_orders` 中的第一个订单提取出来并放入 `current_order` 变量的？”
- en: '“With the `shift` method,” Scarlet said. “It does two things at once: it knocks
    the very first item off the array you call it on, and it *returns*, or spits out,
    that item!”'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “使用 `shift` 方法，”斯嘉丽说。“它同时做两件事：它从你调用它的数组中删除第一个元素，并且*返回*，或者说吐出那个元素！”
- en: “So if you set a new variable equal to calling `shift` on an array,” the King
    piped up, “you basically move the item from the array to your new variable!”
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，如果你把一个新变量设为调用 `shift` 方法后的结果，”国王插话说，“你基本上是把数组中的一个元素移到新的变量里了！”
- en: Ruben and Scarlet turned to the King, who had only just finished studying the
    many potato sacks littering the kitchen.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 鲁本和斯嘉丽转向国王，国王刚刚结束了对厨房里散乱的许多土豆袋的研究。
- en: “That’s . . . actually exactly right,” said Scarlet.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: “那…其实是完全正确的，”斯嘉丽说。
- en: “Wonderful!” said the King. “But what if I want to add things onto the front
    of the array? Or add things onto the back? Or even—dare I say it—take things off
    the back?”
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: “太棒了！”国王说。“但是如果我想把东西添加到数组的前面呢？或者添加到后面呢？甚至——敢我说——把东西从后面移除呢？”
- en: '“Then have we got the methods for you!” Scarlet said. “I don’t want to mess
    up the orders, so I’ll show you on my own array called `breakfast_items` that
    I’ll make up. Take a look!” And she typed the following into the Computing Contraption:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “那么我们有适合你的方法！”斯嘉丽说。“我不想弄乱订单，所以我会在我自己创建的名为 `breakfast_items` 的数组上给你展示。看一下！”她在计算机装置上输入了以下内容：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: “Gadzooks!” said the King. “That’s exactly what I wanted—`pop` removes and returns
    the last item in the array, and `shift` does the same thing to the first item!”
    He watched as Scarlet typed some more.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: “天哪！”国王说。“这正是我想要的——`pop` 删除并返回数组中的最后一个元素，而 `shift` 对第一个元素做了相同的操作！”他看着斯嘉丽继续输入。
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '“Aha! I see: `push` adds an item to the end of the array, and `unshift` adds
    an item to the beginning of the array,” the King continued.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: “啊哈！我明白了：`push` 会把一个元素添加到数组的末尾，而 `unshift` 会把一个元素添加到数组的开头，”国王继续说道。
- en: “Yup! Just make sure you read the array from left to right,” said Scarlet. “The
    first element is the one all the way on the left, and the last element is the
    one all the way on the right.”
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题！只要确保你从左到右读数组，”斯嘉丽说。“第一个元素是最左边的那个，最后一个元素是最右边的那个。”
- en: “What if I want to add something to the middle?” asked the King.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: “如果我想把东西添加到中间呢？”国王问。
- en: 'Scarlet didn’t say anything, but simply typed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 斯嘉丽什么也没说，只是继续输入：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “Amazing!” said Ruben. “But wait, why is `tea` the third item in the array?”
    he asked. “You called the `insert` method with the number 2, not the number 3!”
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: “太神奇了！”鲁本说。“但是等一下，为什么 `tea` 是数组中的第三个元素？”他问。“你调用 `insert` 方法时传入的是数字 2，而不是数字 3！”
- en: “This is one of the weird things about computers,” said Scarlet. “They don’t
    start counting at 1, like you or I do. They start at *zero*. If you start counting
    at 1, `tea` is in position 3, but if you start at zero, it’s one less than that.
    That’s why you have to tell Ruby to `insert` the `tea` element at position 2,
    not position 3, if you want it to be the third item.”
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “这是计算机的一大怪异之处，”斯嘉丽说。“它们不像你我那样从 1 开始计数。它们是从*零*开始的。如果你从 1 开始计数，`tea` 会是位置 3，但如果从零开始，它会比那个少一个位置。所以如果你希望它成为第三个元素，你必须告诉
    Ruby 在位置 2 调用 `insert`，而不是位置 3。”
- en: “I’m more confused than a bumblebee in a plastic flower factory,” the King said
    gloomily. “And just when I thought I was beginning to understand Ruby.”
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “我比塑料花厂里的大黄蜂还要迷惑，”国王沮丧地说。“就在我以为我开始理解 Ruby 的时候。”
- en: '“Hang on, I think I’ve got it,” said Squeaky Jim, his voice cracking only a
    little bit. “Is this right?” And he drew a diagram on the back of a hash-stained
    napkin:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，我想我明白了，”斯奎基·吉姆说，他的声音只轻微沙哑。“这样对吗？”他在一张沾着哈希酱的餐巾纸背面画了个图：
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160007.png.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](../Images/httpatomoreillycomsourcenostarchimages2160007.png.jpg)'
- en: “An array is like a row of boxes,” Jim said. “The first one is numbered zero,
    and the numbers get higher from there. You `shift` to take something off the front,
    `unshift` to add something to the front, `push` to add something to the back,
    and `pop` to take something off the back.” He looked uncertainly from Ruben to
    Scarlet. “Is that right?”
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “数组就像一排盒子，”吉姆说。“第一个编号是零，后面的编号依次增大。你可以用`shift`从前面取东西，用`unshift`往前面添加东西，用`push`往后面添加东西，用`pop`从后面取东西。”他从鲁本看向斯卡雷特，不确定地问：“这样对吗？”
- en: “That’s right!” said Ruben and Scarlet together.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”鲁本和斯卡雷特异口同声地说。
- en: “Nice work, my boy!” said the King. “You’re picking this up mighty quickly.”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: “做得好，我的孩子！”国王说。“你学得真快。”
- en: '“In fact,” Scarlet said, “arrays are so much like rows of boxes that you can
    even get an array element out by asking the array for the element by its box number!
    See?” She typed into the Computing Contraption:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: “事实上，”斯卡雷特说，“数组就像一排盒子，你甚至可以通过请求数组获取某个盒子编号的元素！看到了吗？”她在计算机装置上输入：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “It’s like you’re telling the array exactly what box number to grab,” Ruben
    explained. “By saying you want `breakfast_items[2]`, you’re telling Ruby you want
    the array element in slot 2, which is the third element.”
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “就像是你告诉数组要抓取哪个盒子的编号，”鲁本解释道。“通过说你想要`breakfast_items[2]`，你其实是在告诉Ruby，你想要数组中第2号位置的元素，也就是第三个元素。”
- en: Squeaky Jim smiled. “Great!” he said. “But I wonder . . .”
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 咯吱作响的吉姆微笑着说：“太好了！”他说。“不过我在想……”
- en: “Wonder what?” asked Ruben.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “奇怪什么？”鲁本问。
- en: “Well,” said Jim, flipping the last egg and putting it in a paper basket, “it’s
    fine to add and remove things from arrays, and I figure the kitchen’s software
    does that well enough. But what if I wanted to know something about *all* of the
    orders up front? Is there a way I could go over all of the orders and print them
    out one by one?”
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”吉姆一边翻着最后一个煎蛋，一边把它放进纸篮里，“从数组中添加和移除东西没问题，我觉得厨房的软件在这方面做得足够好。但如果我想先了解*所有*订单的信息呢？有没有办法可以遍历所有订单并逐个打印出来？”
- en: Iterating with Arrays
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历数组
- en: “Absolutely,” said the King. “We saw that on the Loop—what was it called again?”
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: “确实，”国王说。“我们在循环里见过这个——叫什么来着？”
- en: '“*Iterating*,” said Ruben. “It works like this!” He reached over to the Computing
    Contraption and began typing furiously:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “*迭代*，”鲁本说。“这样做！”他伸手操作计算机装置，开始快速打字：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: “Yes, that does look familiar!” said the King. “And that will print out each
    order in the `todays_orders` array?”
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，这看起来很熟悉！”国王说。“这会打印出`todays_orders`数组中的每一个订单吗？”
- en: '“You got it,” said Scarlet. “But remember, there’s a way of writing it with
    less code than the `do`/`end` block.” She quickly typed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “你答对了，”斯卡雷特说。“但是记住，有一种写法比`do`/`end`块更简洁。”她迅速输入：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: “That’s right!” said the King. “You can use the curly brackets instead of `do`/`end`
    when there’s just one line of code in the block.” He scratched his bushy white
    beard. “Though I’m still a little mystified by these *blocks*.”
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “没错！”国王说。“当块中只有一行代码时，你可以用大括号代替`do`/`end`。”他挠了挠浓密的白胡子。“不过这些*块*还是让我有点困惑。”
- en: “We’ll talk more about them soon!” said Scarlet. “For now, we should make sure
    we’re all set with arrays and customer orders here in the Hashery.”
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: “我们很快会再谈这些！”斯卡雷特说。“现在，我们应该确保在哈舍餐馆里，关于数组和顾客订单的部分都没问题。”
- en: Squeaky Jim nodded. “I think I get the hang of arrays okay, and we’re caught
    up on orders for the time being,” he said, tossing the last order ticket into
    the trash. “But all this talk about iterating has me wondering if there isn’t
    another problem we can solve.”
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 咯吱作响的吉姆点点头。“我想我已经掌握了数组的用法，我们现在对订单的处理也没问题了，”他说，扔掉最后一张订单票。“不过这些关于迭代的讨论让我在想，或许我们还能解决另一个问题。”
- en: “What’s that?” said Scarlet.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: “那是什么？”斯卡雷特问。
- en: “Well,” squeaked Jim, “Big Hank and I have been trying to figure out how best
    to print out the Hashery menu for our customers. Do you think iterating over an
    array might be a good way to do it?”
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”吉姆吱吱地说，“大汉克和我一直在想，怎样才能最好地把哈舍餐馆的菜单打印出来给顾客。你认为迭代数组可能是个好方法吗？”
- en: “What’s the menu made up of?” asked Ruben.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “菜单由什么组成？”鲁本问。
- en: “In Ruby terms, just strings and numbers,” Jim said. “Each string would be an
    item on the menu, and every item would have a number representing the price. I
    figure since we can mix strings and numbers in arrays, that might make sense.”
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “用Ruby术语来说，就是字符串和数字，”吉姆说。“每个字符串就是菜单上的一项，每一项都会有一个表示价格的数字。我想既然我们可以在数组中混合使用字符串和数字，那应该没问题。”
- en: “Hmm,” said Scarlet. “I don’t think so. How would you pair up the menu items
    and their prices? Even if you just alternated them, you might mess it up with
    all the pushing, popping, shifting, and unshifting you’d be doing whenever the
    menu changed.”
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，”Scarlet说。“我不这么认为。你怎么将菜单项和它们的价格配对呢？即使你只是交替列出它们，每当菜单更改时，你不断地进行推入、弹出、移动和移出操作，也许会搞乱它们。”
- en: “You have a point,” Jim admitted. “Well, maybe an array of arrays? Each array
    element could be its own little array, and every little array could just contain
    a menu item name and its price.”
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: “你说得对，”Jim承认道。“那么，也许是一个数组的数组？每个数组元素可以是它自己的一小段数组，每个小数组就可以包含一个菜单项的名称和它的价格。”
- en: “That’s a little better,” Ruben said. “At least then your menu names and prices
    would be together. What do you think, Scarlet?”
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “这稍微好点，”Ruben说。“至少这样你的菜单名称和价格会在一起。Scarlet，你觉得怎么样？”
- en: Scarlet thought for a moment. “No,” she finally said. “I think instead of an
    array, we want to use a *hash*.”
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Scarlet想了想，最后说道：“不，我想我们应该用*哈希*，而不是数组。”
- en: Hash in the Hashery
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希工坊中的哈希
- en: 'I’m sure you’re thinking to yourself right now: “Okay, we’re in the Hashery.
    Hash is served. Surely this idea that Ruby has a built-in thing called a *hash*
    is a big joke, right?”'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌你现在在想：“好吧，我们现在在哈希工坊。哈希已经上桌了。难道Ruby有一个内置的东西叫做*哈希*，这不是个大笑话吧？”
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160009.png.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160009.png.jpg)'
- en: Well, it’s not. It’s zero percent joke. Hashes are one of the coolest parts
    of Ruby, so while Scarlet, the King, Ruben, and Squeaky Jim sort out the differences
    between breakfast hash and Ruby hashes, I’ll take a second to explain them to
    you.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 其实不是。完全没有笑点。哈希是Ruby中最酷的部分之一，所以在Scarlet、国王、Ruben和Squeaky Jim弄清楚早餐哈希和Ruby哈希之间的区别时，我来花一点时间给你们解释它们。
- en: Arrays are like rows of boxes, right? Each element has its own numbered slot
    to live in, like items on a grocery list. This is great so long as all the stuff
    on each line of the list—that is, every element in the array—keeps to itself and
    does its own thing. But what if you want to show that two elements are somehow
    related?
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 数组就像是一排排的盒子，对吧？每个元素都有自己编号的槽位，就像购物清单上的物品。这很好，只要清单上每行的所有东西——也就是说，数组中的每个元素——各自独立，做自己的事。但如果你想显示两个元素之间有某种关系怎么办？
- en: 'Think of a dictionary: in a dictionary, you have a word and its definition.
    Unlike with a grocery list, you wouldn’t say that the words are all on their own
    lines and the definitions are all on their own lines, since that leaves out the
    biggest part of the dictionary: the connections between words and their meanings.
    Squeaky Jim’s orders are like a list, and no order really affects any other order,
    so an array makes sense. But for his menu, where he’s got to associate menu items
    with their prices, he needs something more like a dictionary. And for that, Ruby
    uses hashes.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 想想字典：在字典中，你有一个单词和它的定义。不同于购物清单，你不会说所有的单词都单独列在一行，所有的定义也单独列在另一行，因为那样会忽略字典中最重要的一部分：单词与其含义之间的关系。Squeaky
    Jim的订单就像一个列表，而一个订单并不真正影响任何其他订单，所以数组很适合。但对于他的菜单，他需要将菜单项与价格关联起来，因此他需要像字典一样的东西。而Ruby用哈希来实现这个功能。
- en: 'Hashes are easier to show than tell (isn’t everything?), so check out the following
    code. It pairs up our heroes (along with Squeaky Jim and Big Hank) with their
    descriptions. Go ahead and type it into IRB, and notice how we’re using curly
    brackets (`{}`) instead of square brackets (`[]`) as we did with arrays:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希比起解释更容易展示（难道不是所有东西都是这样吗？），所以看一下下面的代码。它将我们的英雄（以及Squeaky Jim和Big Hank）与他们的描述配对。快在IRB中输入它，并注意我们使用了花括号（`{}`）而不是数组中使用的方括号（`[]`）：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This code takes a variable, `our_heroes`, and stores a hash in it. Don’t be
    confused by the curly brackets—this isn’t a block! Hashes aren’t commands; they’re
    just a bunch of what we call *key-value pairs*. A word and its definition are
    a good example of a key-value pair: the word is the *key*, and the word’s definition
    is the *value*. Just as with a dictionary, you use a hash key to look up a hash
    value.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码接收一个变量`our_heroes`，并将一个哈希值存储在其中。不要被花括号搞混——这不是一个代码块！哈希值不是命令；它们只是我们所说的*键值对*。一个单词及其定义是键值对的好例子：单词是*键*，而单词的定义是*值*。就像在字典中一样，你使用哈希键来查找哈希值。
- en: 'Each key-value pair is separated from the next one by a comma, which makes
    them a bit like arrays. The similarities don’t end there! For example, if you
    had the preceding hash, you could type:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每一组键值对之间用逗号分隔，这让它们有点像数组。相似之处不止于此！例如，如果您有上面的哈希，您可以这样写：
- en: '[PRE15]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'and you’d get:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您会得到：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is a lot like looking up array values, only instead of providing the element
    number inside the square brackets, you write the hash key.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点像查找数组值，只不过您不需要在方括号中提供元素的编号，而是写上哈希键。
- en: Don’t worry that the hash keys look weird right now; those things that look
    like variables with colons in front of them are called *symbols*, and we’ll get
    to them in the next chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心哈希键现在看起来奇怪；那些看起来像变量、前面有冒号的东西叫做*符号*，我们将在下一章介绍它们。
- en: 'Just as with arrays, you can create a hash with *literal* syntax or with the
    `new` method. These two lines of code are “saying” the same thing:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 和数组一样，您可以使用*字面*语法或 `new` 方法创建哈希。这两行代码的意思是相同的：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Sometimes you’ll see an alternate way of writing hashes. Instead of using the
    little *hash rockets* (`=>`), some people put the colons after the symbol names,
    which would make the `our_heroes` hash look like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您会看到另一种写哈希的方式。不是使用小小的*哈希箭头*（`=>`），而是有些人在符号名称后加上冒号，这样 `our_heroes` 哈希看起来就像这样：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Both examples are totally correct Ruby, and you should pick whichever one is
    easier for you to remember. (I like the colons, since they’re faster to type.)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个例子都是完全正确的 Ruby 代码，您可以选择任何一个，哪个更容易记住就用哪个。（我喜欢冒号，因为它们打起来更快。）
- en: 'Finally, there are a few neat methods you can call on hashes to get the keys,
    values, or key-value combinations out of them. For instance, calling the `keys`
    method on your hash will give you an array of its keys:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以使用一些简洁的方法在哈希中提取键、值或键值对组合。例如，调用哈希的`keys`方法会返回一个包含键的数组：
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can also call the `values` method on a hash to get an array of its values:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在哈希上调用 `values` 方法，获取其值的数组：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'There are a few more hash methods worth knowing about. Just as `empty?` tells
    you if an array is empty, it also tells you if a hash has no key-value pairs:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些其他值得了解的哈希方法。就像 `empty?` 可以告诉您数组是否为空一样，`empty?` 也可以告诉您哈希是否没有键值对：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can also use `length` to find out how many sets of pairs are in your hash:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `length` 方法来查找哈希中有多少组键值对：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And last but not least, you can use some brand-new hash methods, `has_key?`
    and `has_value?`, to check whether a hash contains a certain key or value:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，您可以使用一些全新的哈希方法 `has_key?` 和 `has_value?` 来检查哈希是否包含某个键或值：
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'However, you’re probably demanding to know: “How can I get all the keys and
    values of my hash *together*?” Well, the best way to do that is to iterate over
    the hash. This looks a whole lot like iterating over an array—in fact, there’s
    only one tiny difference!'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可能想问：“我怎样才能*一起*获取哈希的所有键和值？”好吧，最好的方法就是遍历哈希。这个过程看起来和遍历数组非常相似——事实上，只有一个小小的不同！
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Go ahead and try it out. (Make sure you use double quotes for your `puts`—remember,
    you need that if you’re going to put variables in your string.) Did you spot that
    tiny difference I mentioned? You need both `hero` *and* `role` between the pipe
    characters (`||`) in your block. We had just one variable between the pipes for
    arrays, but hashes have keys *and* values, so we need to tell the Ruby block about
    both. If all goes well, you’ll get a list of all of your intrepid heroes and their
    stations in life:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试吧。（确保在 `puts` 中使用双引号——记得，如果您要在字符串中插入变量，需要使用双引号。）你看到了我提到的那个小差别吗？在管道符号（`||`）之间，您需要同时放入
    `hero` *和* `role`。在数组中，我们只需要一个变量放在管道符号之间，但哈希包含键*和*值，所以我们需要告诉 Ruby 块这两者。如果一切顺利，您将获得一个包含所有勇敢英雄及其人生站位的列表：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Speaking of our heroes, it sounds like Scarlet and Ruben have finished explaining
    hashes to the King and Squeaky Jim. (I have very acute hearing.) Let’s see if
    they’ve figured out how to use hashes to iterate over the Hashery menu.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 说到我们的英雄，听起来 Scarlett 和 Ruben 已经向国王和 Squeaky Jim 解释完了哈希。（我的听力非常敏锐。）让我们看看他们是否已经弄清楚如何使用哈希来遍历
    Hashery 菜单。
- en: Rollicking Ranges
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢快的范围
- en: “I’ve got just the idea for iterating over the Hashery menu,” said Squeaky Jim,
    and this time his voice didn’t crack at all. “All we need to do is—”
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: “我有一个完美的主意，适用于遍历 Hashery 菜单，” squeaky Jim 说道，这次他的声音一点也不破音。“我们只需要做的是——”
- en: At that very moment, Big Hank came lumbering over from the far side of the kitchen.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 就在那一刻，大汉 Hank 从厨房的远端笨重地走了过来。
- en: “I hate to interrupt,” he boomed, “but I’m having a heck of a time with the
    range. In fact, there’s only one little Ruby detail I need to get it working,
    but I’ll be a monkey’s tax attorney if I can figure it out. Mind giving me a hand?”
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: “我不想打断你，”他大声说，“但我在使用这个范围时遇到了麻烦。事实上，我只需要解决 Ruby 中一个小细节就能让它工作，但如果我能弄明白，我愿意做猴子的税务律师。你能帮帮我吗？”
- en: “Sure thing!” said Scarlet. “What’s the trouble?”
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题！”斯卡雷特说。“有什么问题？”
- en: “Follow me,” said Big Hank, and they crossed the enormous kitchen, past counters
    piled high with eggs, flour, potatoes, and other ingredients, past ovens and spatulas
    and those little forks with only three prongs, until they reached the gleaming
    new range on the far side of the kitchen.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: “跟我来，”大汉克说，他们穿过了那座巨大的厨房，经过堆满鸡蛋、面粉、土豆和其他食材的台面，经过烤箱、铲子和那些只有三根叉的叉子，直到他们来到厨房另一侧那台闪闪发光的新炉灶前。
- en: '“Ain’t she a beauty?” Big Hank asked. “Only wish I could figure her out. Here’s
    where I’m stuck.” He pointed to the glowing IRB `>>` prompt on the range’s console.
    It said:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: “她不是很美吗？”大汉克问。“真希望我能弄明白她的原理。这里是我卡住的地方。”他指着范围控制台上发光的 IRB `>>` 提示符。它显示了：
- en: '[PRE26]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: “I overheard what you were saying about arrays,” Hank said, “and the instruction
    manual for the range says it’ll go from 300 to 400 degrees. So I figured I could
    use the square brackets to get the temperature in position zero, which should
    be 300.”
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: “我听到你说的关于数组的事了，”汉克说，“而范围的使用手册说它会从 300 度加热到 400 度。所以我想我可以用方括号来获得零位置的温度，那应该是 300。”
- en: “Oh, I see the problem,” said Ruben. “This range doesn’t use an array for the
    temperature! It uses a *range*.”
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: “哦，我明白问题所在了，”鲁本说。“这个范围并没有使用数组来表示温度！它使用的是*范围*。”
- en: “A range?” Big Hank said.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: “范围？”大汉克问。
- en: '“That’s Ruby’s way of giving you a bunch of different values right next to
    each other,” Ruben said. “Ranges don’t do all of the things arrays can do, but
    we can make them into arrays pretty easily. Check it out!” He started typing:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: “这就是 Ruby 给你一堆不同的值紧挨着放在一起的方式，”鲁本说。“范围（ranges）并不像数组那样能做所有的事情，但我们可以很容易地把它们转成数组。看看这个！”他开始输入：
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: “I’ll be a Christmas goose!” Hank bellowed. “That’s amazing! But I’ve got a
    couple of questions. First, what’s that `to_a` bit do?”
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: “我简直要变成圣诞鹅了！”汉克大喊道。“太神奇了！不过我有几个问题。首先，那个 `to_a` 是做什么的？”
- en: “The `to_a` method turns ranges into arrays,” Scarlet said. “Since range values
    are all right next to each other, Ruby can figure out what the array should look
    like. See? It works on letters of the alphabet *and* numbers!”
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: “`to_a` 方法将范围转换为数组，”斯卡雷特说。“由于范围的值是紧挨着的，Ruby 能够推测出数组的样子。看到没？它对字母和数字都能工作！”
- en: “Not only that,” Ruben added, “but once the range is an array, you can iterate
    over it just like any array.”
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: “不仅如此，”鲁本补充道，“而且一旦范围变成了数组，你就可以像处理任何数组一样对它进行迭代。”
- en: '“I see,” Hank said, twirling his mustache. “But answer me this: why d’you get
    some ranges with two dots and some with three?”'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: “明白了，”汉克说，转动着他的胡子。“但告诉我这个：为什么有些范围用两个点，有些用三个？”
- en: “That’s just how you tell Ruby whether or not to include the last thing in the
    range,” Ruben said. “Two dots means ‘include the first thing, everything up to
    the last thing, *and* the last thing between the parentheses in the range,’ and
    three dots means ‘include the first thing and everything *up to*, but *not including*,
    the last thing between the parentheses in the range.’”
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: “那就是你告诉 Ruby 是否包含范围中的最后一个元素的方式，”鲁本说。“两个点意味着‘包含第一个元素，直到最后一个元素，并且范围内的最后一个元素’，而三个点意味着‘包含第一个元素，并且包含直到但不包括范围中的最后一个元素’。”
- en: “That sounds a bit confusing,” Jim squeaked.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: “听起来有点混乱，”吉姆尖叫道。
- en: “It can be,” Scarlet admitted. “That’s why I usually stick to the two-dot ranges.
    It makes more sense to have both numbers in the range.”
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: “有可能，”斯卡雷特承认道。“这就是为什么我通常只使用两个点的范围。把两个数都放在范围里更有意义。”
- en: “Got it,” Big Hank said. “Last question. If I want the first thing in the range,
    I can convert it to an array with `to_a` and just grab the first element with
    `[0]`. But can I also use this `first` method you just showed me?”
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “明白了，”大汉克说。“最后一个问题。如果我想要范围中的第一个元素，我可以用 `to_a` 将它转换成数组，然后用 `[0]` 抓取第一个元素。但我也可以用你刚刚给我展示的
    `first` 方法吗？”
- en: '“Of course!” Ruben said, and typed:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: “当然！”鲁本说，然后开始输入：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With a pleasant *beep*, the range quickly heated up to 300 degrees. The smell
    of fresh hash began to waft through the air.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 随着一声愉快的*哔*，范围迅速加热至 300 度。新鲜的香肠味开始弥漫在空气中。
- en: “You’ve done it! I can’t thank you kids enough.” Big Hank laughed, slinging
    hash across the range like a gleeful diner cowboy. “I can’t help but feel a little
    silly, though. It was such a small thing!”
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: “你们做到了！我真是无法感谢你们这些孩子。”大汉 Hank 笑着，像个欢快的餐厅牛仔一样把哈希菜肴甩到烤架上。“不过，我忍不住觉得有点傻。明明是那么小的事！”
- en: “It always feels like that with programming,” Scarlet said. “But the more you
    do it, the more you realize it’s *always* some small thing, and you get much better
    at fixing things quickly.”
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: “编程总是给人这种感觉，”Scarlet 说道。“但做得越多，你就越明白，*总*是一些小问题，而你会变得越来越擅长迅速解决问题。”
- en: “Speaking of quick,” Big Hank said, “the lunch rush’ll be here any minute.”
    He surveyed the kitchen, which was full of ungrated potatoes and unfried eggs.
    “What do you say—want to grab a quick bite, then maybe give me a hand?” He smiled,
    and his great black mustache bounced on his face. “Of course, food’s on the house.
    Anything for the King and his friends!”
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: “说到快速，”大汉 Hank 说道，“午餐高峰马上就要来了。”他环顾四周，厨房里堆满了未擦过的土豆和未煎的鸡蛋。“怎么样——要不要先吃点东西，顺便帮我一把？”他笑了笑，那副黑色的大胡子在脸上晃动。“当然，吃的全是免费的。国王和他的朋友们想吃什么就吃什么！”
- en: Ruben and Scarlet looked at each other, then at the King. The King nodded. “We’ve
    come all this way,” he said. “We might as well stick around a bit longer!”
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Ruben 和 Scarlet 互相看了看，然后看向国王。国王点了点头。“我们已经走了这么远，”他说。“不如再待一会儿！”
- en: Order Up!
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点餐时间！
- en: Now that the Hashery is back at 100 percent, Big Hank and Squeaky Jim (who,
    now that he’s more confident with Ruby, squeaks much less) need your help to get
    that menu ready for the customers. Jim didn’t get a chance to tell us his plan,
    but I’m pretty sure you’ve got this one. Easy as pie . . . uh, eggs, right?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 既然 Hashery 已经恢复到百分之百的状态，大汉 Hank 和吱吱 Jim（现在他对 Ruby 更有信心了，所以吱吱声少了许多）需要你的帮助来准备菜单给顾客。Jim
    没来得及告诉我们他的计划，但我敢肯定你能搞定这个。简单得像派……呃，鸡蛋，对吧？
- en: Let’s begin by making a new file called hashery_menu.rb. (Peek back to [Chapter 1](../Text/ch01.html
    "Chapter 1. What This Book’s About") if you don’t remember how to do this, or
    ask your local adult for help.) Then open your file and type the following code.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个名为 hashery_menu.rb 的新文件开始。（如果你不记得如何做，可以回去看看[第 1 章](../Text/ch01.html
    "Chapter 1. What This Book’s About")，或者请你身边的大人帮忙。）然后打开你的文件，输入以下代码。
- en: hashery_menu.rb
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: hashery_menu.rb
- en: '[PRE29]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is what you and Jim would have put together a little bit ago, so there’s
    nothing new or scary here!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你和 Jim 之前已经整理过的内容，所以这里没有什么新鲜的或令人害怕的东西！
- en: 'This is the output you’ll see when you run the code using the command **`ruby
    hashery_menu.rb`**:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你运行代码时会看到的输出，使用命令 **`ruby hashery_menu.rb`**：
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There *are* a couple of new combinations of ideas, though, so let’s step through
    them one by one and see how they work. Take a look:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，*确实*有几个新的想法组合，我们可以逐一查看它们是如何工作的。看看这里：
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, we’re just creating a hash called `hashery_menu`. It’s got keys like `:eggs`
    and `:hash`, and each key is paired with a value, like `2` for `:eggs` and `3`
    for `:hash`. This is how much we’ll charge for the item on our menu.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是创建了一个名为 `hashery_menu` 的哈希。它有像 `:eggs` 和 `:hash` 这样的键，每个键都有一个与之对应的值，比如
    `:eggs` 的值是 `2`，`:hash` 的值是 `3`。这是我们为菜单上的每个项目收取的价格。
- en: 'Next, we have this bit:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是这一部分：
- en: '[PRE32]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We’re using the `keys` method to get a list of all the keys in our hash, then
    giving that list (or *array*) to the `each` method. For each key, we’re printing
    out the string: `Today we''re serving: #{item}!` So, for example, when we get
    to the key `:eggs`, we’ll print out: `Today we''re serving: eggs!` The code loops
    over each item in our hash and then `puts` each menu item to the screen.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '我们使用 `keys` 方法来获取哈希中所有键的列表，然后将这个列表（或者说是 *数组*）传递给 `each` 方法。对于每个键，我们会打印出字符串：`Today
    we''re serving: #{item}!` 比如，当我们遍历到键 `:eggs` 时，我们会输出：`Today we''re serving: eggs!`
    代码会遍历哈希中的每个项目，然后 `puts` 每个菜单项到屏幕上。'
- en: '[PRE33]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Things are getting a bit trickier here. When we call the `each` method on the
    hash itself, we give the `do` block both the hash *key* (`item`) and the *value*
    of that key (`price`). For example, when we get to `:eggs` (which is paired with
    the value `2`), we’ll print out: `We''ve got eggs for $2\. What a deal!`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里事情有点变得复杂了。当我们在哈希上调用 `each` 方法时，我们将哈希的 *键*（`item`）和该键的 *值*（`price`）传递给 `do`
    块。例如，当我们遍历到 `:eggs`（其对应的值是 `2`）时，我们会输出：`We've got eggs for $2\. What a deal!`
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Finally, we’ll work a little Ruby magic with the `:biscuit` in our `hashery_menu`.
    First, we access its value with `hashery_menu[:biscuit]`. Then, since that value
    is a range, we can call the `to_a` method on it to make it an array, then use
    `each` just as we did before to go through all its items. We’ll print out our
    message saying what a biscuit will cost, and then the `do` block will print out
    the possible prices: `$1`, `$2`, and `$3`, each on its own line.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将用一点Ruby魔法操作一下我们的`hashery_menu`中的`:biscuit`。首先，我们用`hashery_menu[:biscuit]`来访问它的值。然后，由于这个值是一个范围，我们可以在它上面调用`to_a`方法，将它转换成数组，然后像之前一样使用`each`方法遍历它的所有项。我们将打印出我们的消息，告诉大家一个饼干的价格是多少，然后`do`块将打印出可能的价格：`$1`、`$2`和`$3`，每个价格占一行。
- en: You can test out your entire menu program by entering **`ruby hashery_menu.rb`**
    at the command line, and it should look like the output I showed you just a moment
    ago.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行输入**`ruby hashery_menu.rb`**来测试整个菜单程序，它应该显示出我刚才给你展示的输出结果。
- en: You’ve got a solid menu going here, but if you want to make Squeaky Jim and
    Big Hank absolutely weep with joy, try the following ideas on for size.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你这里有一个很棒的菜单，但如果你想让Squeaky Jim和Big Hank欣喜得泪流满面，可以尝试以下的创意。
- en: Your menu has a pretty sweet range in it, and you even convert it to an array!
    I don’t see any regular arrays in your menu, though, and you’re *completely* allowed
    to have arrays as hash values. Why not add a `:random_special` key (for the Special
    of the Day) with an array of prices as the value? If I told you that you could
    call the `sample` method on an array to get Ruby to spit out a random element
    from an array, how might you use it here?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你的菜单里有一个非常棒的范围，甚至还将它转换成了数组！不过我没有看到你菜单里有普通的数组，而你*完全*可以将数组作为哈希的值。为什么不添加一个`:random_special`键（即每日特别推荐），并将一个价格数组作为它的值呢？如果我告诉你可以在数组上调用`sample`方法，让Ruby从数组中随机挑选一个元素，你会怎么用它呢？
- en: You could get really fancy and `shift`, `unshift`, `push`, or `pop` values onto
    or off of your `:random_special` array. Looking at the code you’ve already got,
    how would you call these methods on the array value of your `:random_special`
    key?
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以非常花哨地使用`shift`、`unshift`、`push`或`pop`方法，将值添加到或从`:random_special`数组中删除。看看你已经写的代码，你会如何在`:random_special`键的数组值上调用这些方法呢？
- en: 'Speaking of the `push` method, there’s a cool shortcut for it in Ruby. It’s
    called the *shovel operator*, and it works like this. The line with the `<<` is
    exactly the same as `bagel_types.push(''cinnamon raisin'')`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 说到`push`方法，Ruby有一个很酷的快捷方式。它叫做*铲子操作符*，它的用法是这样的。包含`<<`的那一行和`bagel_types.push('cinnamon
    raisin')`完全相同：
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Try replacing your `push`es with `<<`s, and then read more about the shovel
    operator at *[http://www.ruby-doc.org/](http://www.ruby-doc.org/)*. Hint: How
    could it help you build strings in Ruby?'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试用`<<`替换你的`push`操作，然后去*`[http://www.ruby-doc.org/](http://www.ruby-doc.org/)*阅读更多关于铲子操作符的内容。提示：它如何帮助你在Ruby中构建字符串？
- en: You Know This!
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你已经知道了这个！
- en: You might feel like your brain is overflowing with all the new array, hash,
    and range magic we learned, but don’t worry—we’ll go over everything once more
    to make sure you’ve got it all.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得大脑里充满了我们所学的所有新的数组、哈希和范围的魔法，但不用担心——我们将再次过一遍所有内容，确保你都掌握了。
- en: 'Let’s start with *arrays*, which are just lists of information. You have two
    ways of creating arrays. You can use array literal syntax, using square brackets
    like this:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*数组*开始，数组只是信息的列表。你有两种创建数组的方式。你可以使用数组字面量语法，像这样使用方括号：
- en: '[PRE36]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Or you can use `Array.new` to do the same thing:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以使用`Array.new`来做相同的事情：
- en: '[PRE37]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: You found out that arrays can contain anything, including strings, numbers,
    variables, Booleans, and even other arrays.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你发现数组可以包含任何东西，包括字符串、数字、变量、布尔值，甚至其他数组。
- en: 'You learned a whole bunch of *array methods*, including:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你学到了一堆*数组方法*，包括：
- en: '`empty?`, which returns `true` if an array has no items and `false` if it has
    at least one item'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty?`，如果数组没有元素，则返回`true`，如果数组至少有一个元素，则返回`false`。'
- en: '`length` or `size`, which do the same thing—return the number of items in an
    array'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length`或`size`，它们做的是相同的事情——返回数组中的元素个数。'
- en: '`first`, which returns the first element in an array without removing it'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`first`，它返回数组中的第一个元素，而不将其移除。'
- en: '`last`, which returns the last element in an array without removing it'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last`，它返回数组中的最后一个元素而不移除它。'
- en: '`shift`, which returns the first element in an array *and* removes it from
    the array'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shift`，它返回数组中的第一个元素*并且*将其从数组中移除。'
- en: '`unshift`, which adds elements to the front of the array'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unshift`，它将元素添加到数组的开头。'
- en: '`push`, which adds elements to the back of the array'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push`，它将元素添加到数组的末尾。'
- en: '`pop`, which removes and returns the last element of the array'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop`，用于移除并返回数组的最后一个元素'
- en: '`insert`, which can add an element anywhere in the array'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert`，可以在数组的任何位置添加一个元素'
- en: Whew!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！
- en: 'Let’s practice a bit in IRB with some more examples to refresh your memory:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些更多的例子在IRB中做些练习，刷新一下记忆：
- en: '[PRE38]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We talked about how to access arrays using square brackets:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何使用方括号访问数组：
- en: '[PRE39]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Finally, we reviewed how to iterate over an array:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们回顾了如何遍历数组：
- en: '[PRE40]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'which is exactly the same as:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以下内容完全相同：
- en: '[PRE41]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next up: *hashes*. Hashes are different from arrays because they aren’t just
    lists. Instead, they associate *keys* with *values* (think: dictionary word with
    definition). Just like arrays, however, hashes can be created with *literal syntax*
    or the `new` method:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来：*哈希*。哈希与数组不同，因为它们不仅仅是列表。相反，它们将*键*与*值*关联起来（想象：字典中的单词与定义）。然而，和数组一样，哈希可以使用*字面量语法*或`new`方法来创建：
- en: '[PRE42]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And, just as with arrays, you can access hash values with square brackets:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，和数组一样，你可以使用方括号访问哈希值：
- en: '[PRE43]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: We saw a few *hash methods*, including `empty?` (which returns `true` if a hash
    has no key-value pairs and `false` if it has at least one pair), `length` (which
    returns the number of pairs in a hash), `keys` (which returns an array of the
    keys in the hash), `values` (which returns an array of the values in the hash),
    `has_key?` (which returns `true` if the hash includes a particular key and `false`
    otherwise), and `has_value?` (which returns `true` if the hash includes a particular
    value and `false` otherwise).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一些*哈希方法*，包括`empty?`（如果哈希没有键值对，则返回`true`，如果哈希至少有一个键值对，则返回`false`），`length`（返回哈希中键值对的数量），`keys`（返回哈希中键的数组），`values`（返回哈希中值的数组），`has_key?`（如果哈希包含某个特定的键，则返回`true`，否则返回`false`），以及`has_value?`（如果哈希包含某个特定的值，则返回`true`，否则返回`false`）。
- en: 'Here they are again in all their glory:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它们，尽显风采：
- en: '[PRE44]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We also learned that we could iterate over a hash just like we can iterate
    over an array, only we need to put variables for the key *and* the value between
    the pipes in our code block:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学到了，我们可以像遍历数组一样遍历哈希，只不过我们需要在代码块中的管道符号之间放入键*和*值的变量：
- en: '[PRE45]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Last (but not least), we covered *ranges*. Ranges are just a bunch of Ruby
    values that happen to be next to each other. We saw that two dots inside the parentheses
    included both ends of the range, while three dots included the first end but only
    up to (not including) the second one:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 最后（但同样重要），我们学习了*范围*。范围就是一堆相邻的Ruby值。我们看到，括号内的两个点包含范围的两个端点，而三个点包含第一个端点，但只到（不包括）第二个端点：
- en: '[PRE46]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We also learned a few *range methods*, including `to_a` (which turns a range
    into an array), `first` (which returns the first item in the range), and `last`
    (which returns the last item in the range):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了一些*范围方法*，包括`to_a`（将范围转换为数组）、`first`（返回范围中的第一个项）和`last`（返回范围中的最后一项）：
- en: '[PRE47]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: All right! We made it. Great work so far—but don’t get too cocky. That lunch
    rush is coming, and the next chapter’s gonna get a little crazy.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 好了！我们成功了。到目前为止做得很好——但不要太得意忘形。午餐高峰期快到了，下一章会有点疯狂。
