- en: '[14](nsp-boxall502581-0008.xhtml#rch14)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controlling Servos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](images/nsp-boxall502581-ct.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Various projects in [Chapter 8](nsp-boxall502581-0018.xhtml#ch08) used DC motors,
    which are ideal for rotating devices such as wheels for robots. However, for more
    precise motor control options, you can use a *servo* , short for *servomechanism*
    . Servos contain electric motors that you can rotate to a specific angular position
    using PWM signals.
  prefs: []
  type: TYPE_NORMAL
- en: Servos come in handy for a variety of applications. For example, you might use
    a servo to steer a remote-controlled car by connecting it to a *horn* , a small
    arm or bar that the servo rotates. You might also connect a physical pointer to
    a servo so it can indicate information such as temperature on a scale, or use
    a servo to raise or lower a rotary drill.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: • Learn how to connect the ATmega328P-PU microcontroller to a servo and use
    PWM to control it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Learn how to independently control two servos at once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Build an analog thermometer and an analog clock.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Setting Up Your Servo](nsp-boxall502581-0008.xhtml#rah1601)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a large variety of servos on the market, from tiny units used in
    portable devices such as digital cameras to large units used in robotic manufacturing
    assembly devices. When you’re selecting a servo, consider several parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: Speed The time it takes for the servo to rotate, usually measured in seconds
    per angular degree.
  prefs: []
  type: TYPE_NORMAL
- en: Rotational range The angular range through which the servo can rotate—for example,
    180 degrees (half of a full rotation) or 360 degrees (one complete rotation).
  prefs: []
  type: TYPE_NORMAL
- en: Current How much current the servo draws. When using a servo with an Arduino,
    you may need to use an external power supply for the servo.
  prefs: []
  type: TYPE_NORMAL
- en: Torque The amount of force the servo can exert when rotating. The greater the torque,
    the heavier the item the servo can control. The torque produced is generally proportional
    to the amount of current used.
  prefs: []
  type: TYPE_NORMAL
- en: For the examples in this chapter, we’ll be using an inexpensive and compact
    servo like the one in [Figure 14-1](nsp-boxall502581-0024.xhtml#f14001) , commonly
    known as an SG90-type servo. We’ll combine this servo with three types of horns,
    also shown in the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Photo of an SG90-type servo and three different kinds of horns](images/nsp-boxall502581-f14001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-1: Servo and various horns'
  prefs: []
  type: TYPE_NORMAL
- en: This servo can rotate up to 180 degrees, as shown in [Figure 14-2](nsp-boxall502581-0024.xhtml#f14002)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram showing the rotation range of a servo, from 0 to 180 degrees](images/nsp-boxall502581-f14002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-2: Example of servo rotation range'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the servo is a small DC motor connected to the horn spindle via *reduction
    gears* , which reduce the rotational speed of the DC motor to a much slower pace
    for the servo. The servo also contains a *feedback controller* , which measures
    the rotational position of the DC motor’s shaft in order to position it more exactly.
  prefs: []
  type: TYPE_NORMAL
- en: '[Connecting a Servo](nsp-boxall502581-0008.xhtml#rbh1601)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need just three wires to connect a servo to your microcontroller. If you’re
    using the SG90, the darkest wire connects to GND, the center wire connects to
    5 V, and the lightest wire (the *pulse* or *PWM* wire) connects to a digital pin
    with PWM capability. If you’re using a different servo, check its data sheet for
    the correct wiring. We’ll use the standard schematic symbol for servos shown in
    [Figure 14-3](nsp-boxall502581-0024.xhtml#f14003) .
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard schematic symbol for a servo](images/nsp-boxall502581-f14003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-3: Schematic symbol for a servo'
  prefs: []
  type: TYPE_NORMAL
- en: All the servos you will come across in the hobbyist and experimenting range
    of products use this same schematic symbol.
  prefs: []
  type: TYPE_NORMAL
- en: '[Controlling a Servo](nsp-boxall502581-0008.xhtml#rbh1602)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We set a servo’s rotational angle by changing the duty cycle of a PWM signal
    connected to the servo’s pulse wire. In general, servos require a PWM signal with
    a frequency of 50 Hz and a period of 20 ms. Setting the signal’s duty cycle to
    different values causes the servo’s internal controller to move the horn to an
    angle to which the duty cycle is inversely proportionate.
  prefs: []
  type: TYPE_NORMAL
- en: Using our SG90 servo as an example, if we set the duty cycle to 12 percent (or
    2.4 ms out of the total period of 20 ms), as shown in [Figure 14-4](nsp-boxall502581-0024.xhtml#f14004)
    , the horn will rotate to 0 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '![DSO display showing a PWM signal with a 12 percent duty cycle](images/nsp-boxall502581-f14004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-4: PWM signal for 0 degrees'
  prefs: []
  type: TYPE_NORMAL
- en: If we set the duty cycle to 3 percent, as shown in [Figure 14-5](nsp-boxall502581-0024.xhtml#f14005)
    , the horn will rotate to 180 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: '![DSO display showing a PWM signal with a 3 percent duty cycle](images/nsp-boxall502581-f14005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-5: PWM signal for 180 degrees'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll put the code required to enable the PWM output for our SG90 servo in
    a function called `initPWM()` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This function sets TIMER1 up for fast PWM. It sets the prescaler to 8 for a
    timer frequency of 2 MHz ❶, and sends the output to PB1 ❷. (To refresh your memory
    of how to generate PWM signals, refer to [Chapter 7](nsp-boxall502581-0017.xhtml#ch07)
    .) The timer will count from 0 to 39,999 then reset ❸, with each period being
    0.0000005 seconds in length ( *time* = 1/ *frequency* ). This gives a full pulse
    period of 20 ms.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll then use OCR1A to set the duty cycle and thus position the servo. We know
    that a 12 percent duty cycle results in a rotation to 0 degrees, so we can calculate
    the required OCR1A value by multiplying 40,000 (remember that the counter starts
    at 0 and counts to 39,999) by 0.12, which gives us 4,799\. For a full rotation
    to 180 degrees, we would set OCR1A to 1,199 (40,000 × 0.12).
  prefs: []
  type: TYPE_NORMAL
- en: If you’re using a servo other than the SG90, determine the duty cycle values
    required for 0 and 180 degree rotation, then use the calculations described in
    the previous paragraph to determine your required OCR1A values. You should be
    able to get the duty cycle information from the servo supplier or retailer.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s put what you’ve just learned into practice by rotating a servo in
    various ways.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 56: Experimenting with Servos](nsp-boxall502581-0008.xhtml#rpro56)'
  prefs: []
  type: TYPE_NORMAL
- en: With this project you’ll learn the basic of servo control, including the required
    circuitry and commands for servo movement.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1603)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build your circuit, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: • USBasp programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 5 V breadboard power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Two 22 pF ceramic capacitors (C1–C2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 470 μF 16 V electrolytic capacitor (C3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 16 MHz crystal oscillator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • SG90 servo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble your circuit as shown in [Figure 14-6](nsp-boxall502581-0024.xhtml#f14006)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic diagram for Project 56](images/nsp-boxall502581-f14006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-6: Schematic for [Project 56](nsp-boxall502581-0024.xhtml#pro56)'
  prefs: []
  type: TYPE_NORMAL
- en: Note the use of the large electrolytic capacitor over the 5 V and GND lines.
    When servos are operating, they can sometimes generate a varying voltage due to
    the motor turning on and off quickly, so we use the capacitor to smooth out the
    power to a more consistent 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1604)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a terminal window, navigate to the *Project 56* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. After a moment
    or two, the servo should quickly rotate across its full range from 0 to 180 degrees,
    then do so again at a slower speed, then return to 0 degrees at an even slower
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the code to see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by defining three functions: `initPWM()` ❶, which handles PWM initialization;
    `servoRange()` ❷, which for demonstrative purposes simply rotates the servo arm
    between 0 and 180 degrees by setting OCR1A with the duty cycle values for 0 degrees,
    then 180 degrees; and the useful custom function `servoAngle(uint8_t angle)` ❸,
    which accepts a number (the rotational angle for our desired servo position) and
    converts this into the required duty cycle value to be stored in OCR1A ❹. This
    simplifies the task of commanding the servo, automatically converting the angle
    we want into the correct duty cycle between 4,799 and 1,199 with the formula *angle*
    = ( *counter* – 239.95) / −0.05\. These values are generally used by most common
    small servos, but check with your supplier if you’re unsure.'
  prefs: []
  type: TYPE_NORMAL
- en: In the main section of the code, we first set the pin connected to the servo’s
    pulse wire to an output ❺, then call the `initPWM()` function to enable PWM. We
    call `servoRange()` ❻ to rotate the servo arm quickly from 0 to 180 degrees and
    back again, then this is repeated in a slower fashion using the `for` loops at
    ❼ and ❽, respectively. Each introduces a delay between movement of the servo arm
    one degree in either direction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note The formula for the `servoAngle()` function was created using linear algebra,
    based on two sets of points: (4799,0) and (1199,180). You can use an online tool
    such as GeoGebra ( [https://www.geogebra.org/m/UyfrABcN](https://www.geogebra.org/m/UyfrABcN)
    ) to determine the equation for your own formula if your servo requires different
    duty cycle values.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have the code framework to control a servo, let’s combine it with
    your prior knowledge about using the TMP36 temperature sensor to build an analog
    thermometer.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 57: Creating an Analog Thermometer](nsp-boxall502581-0008.xhtml#rpro57)'
  prefs: []
  type: TYPE_NORMAL
- en: You can use a servo to display a temperature reading by attaching an arrow to
    the servo horn and creating a backing sheet with the temperature range on it.
    This project will display temperatures between 0 and 30 degrees Celsius, but you
    can modify it to show different ranges.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1605)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build your circuit, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: • USBasp programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 5 V breadboard power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One TMP36 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Two 22 pF ceramic capacitors (C1–C2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 470 μF 16 V electrolytic capacitor (C3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 0.1 μF ceramic capacitor (C4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 16 MHz crystal oscillator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • SG90-compatible servo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble your circuit as shown in [Figure 14-7](nsp-boxall502581-0024.xhtml#f14007)
    . Don’t forget to connect the microcontroller’s AV [CC] pin to 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic diagram for Project 57](images/nsp-boxall502581-f14007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-7: Schematic for [Project 57](nsp-boxall502581-0024.xhtml#pro57)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 14-8](nsp-boxall502581-0024.xhtml#f14008) shows what the backing sheet
    representing the range of temperatures that the servo will display might look
    like, with a small arrow attached to the horn as a pointer.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of a finished Project 57, with the arrow fixed to the servo horn
    pointing to a value on the temperature backing sheet](images/nsp-boxall502581-f14008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-8: The backing sheet indicating the temperature'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1606)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a terminal window, navigate to the *Project 57* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. After a moment
    or two, the servo horn should swing to an angular position that represents the
    temperature in degrees Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the code to see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We start by performing the usual steps to set the required pins for the servo
    as an output ❶ and the TMP36 sensor as an input ❷, then declare the variables
    needed for storage and conversion of temperature data from the TMP36 sensor ❸.
    We then call the functions to start the ADC ❹ and initialize PWM ❺. Next, we determine
    the temperature in Celsius by first reading the ADC ❻ and storing its value into
    `ADCvalue` ❼, then doing the mathematical conversion to Celsius ❽. Finally, we
    convert the temperature to an angle for the servo by multiplying it by 6 (since
    the servo range is 0 to 180 degrees) ❾ and tell the servo to move to the appropriate
    angle.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you can use what you’ve learned in this book so far to make a
    variety of controllable analog displays with your servo—for example, a low-voltage
    meter or a countdown timer. But if anything’s better than one servo, it’s using
    two servos at once; you’ll see how to do that next.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 58: Controlling Two Servos](nsp-boxall502581-0008.xhtml#rpro58)'
  prefs: []
  type: TYPE_NORMAL
- en: Since there are multiple PWM-capable output pins on the ATmega328P-PU microcontroller,
    we can control two servos at once for more involved projects. This project will
    show you how.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1607)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build your circuit, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: • USBasp programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 5 V breadboard power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One TMP36 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Two 22 pF ceramic capacitors (C1–C2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 470 μF 16 V electrolytic capacitor (C3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 0.1 μF ceramic capacitor (C4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 16 MHz crystal oscillator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Two SG90-compatible servos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble your circuit as shown in [Figure 14-9](nsp-boxall502581-0024.xhtml#f14009)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic diagram for Project 58](images/nsp-boxall502581-f14009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-9: Schematic for [Project 58](nsp-boxall502581-0024.xhtml#pro58)'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1608)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a terminal window, navigate to the *Project 58* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. After a moment
    or two both servos should imitate the motion demonstrated in [Project 56](nsp-boxall502581-0024.xhtml#pro56)
    , quickly rotating across their full range from 0 to 180 degrees, then repeating
    this at a slower speed, and then returning to 0 degrees at an even slower speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the `initPWM()` function ❶, after activating PWM we turn on the COM1B1 bit
    in TCCR1A to enable PWM for the second servo connected to PB2 ❷. Two `servoAngle()`
    -type functions, one for servo A ❸ and one for servo B ❹, allow for control by
    accepting the required rotational angle. I’ve modified the function `servoRange()`
    ❺ to control the first servo and the second servo by assigning the required values
    to OCR1A and OCR1B, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: You could also experiment with the direction of both servos by altering the
    delays after the `servoAngleA/B()` functions or reversing the counting to go from
    higher values to lower values. Now that you can use two servos with ease, it’s
    time to put them to work in the form of an analog clock.
  prefs: []
  type: TYPE_NORMAL
- en: '[Project 59: Building an Analog Clock with Servo Hands](nsp-boxall502581-0008.xhtml#rpro59)'
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll use two servos to display the time in the form of a dual-display
    analog clock. One servo will display the hour, and the other will display minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1609)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To build your circuit, you’ll need the following hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: • USBasp programmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 5 V breadboard power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • ATmega328P-PU microcontroller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • One TMP36 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Two 22 pF ceramic capacitors (C1–C2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 470 μF 16 V electrolytic capacitor (C3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 0.1 μF ceramic capacitor (C4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • 16 MHz crystal oscillator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • DS3231 real-time clock module with backup battery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Two SG90-compatible servos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assemble your circuit as shown in [Figure 14-10](nsp-boxall502581-0024.xhtml#f14010)
    . Don’t forget to connect the DS3231 board to 5 V and GND as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Schematic diagram for Project 59](images/nsp-boxall502581-f14010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-10: Schematic for [Project 59](nsp-boxall502581-0024.xhtml#pro59)'
  prefs: []
  type: TYPE_NORMAL
- en: Before uploading the code, don’t forget to set the time in the same manner as
    you did in previous projects that used the DS3231, such as [Project 51](nsp-boxall502581-0022.xhtml#pro51)
    . You may also want to create a backing display like the one used in [Project
    57](nsp-boxall502581-0024.xhtml#pro57) , as shown in [Figure 14-11](nsp-boxall502581-0024.xhtml#f14011)
    —feel free to get creative. Note that servo M1 in the schematic is for hours,
    and M2 is for minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '![example of a finished Project 59, with the arrows fixed to the servo horn
    on each servo pointing to an hours and minutes value on the time backing sheets](images/nsp-boxall502581-f14011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14-11: Example clock faces for [Project 59](nsp-boxall502581-0024.xhtml#pro59)'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1610)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open a terminal window, navigate to the *Project 59* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. Once you’ve
    flashed the code, you should see the current time displayed by way of the position
    of the servo horns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After reviewing the code, you should recognize the parts dedicated to enabling
    the I ² C bus (as described in [Chapter 12](nsp-boxall502581-0022.xhtml#ch12)
    ), along with setting and retrieving the time from the DS3231 RTC module (as described
    in [Chapter 13](nsp-boxall502581-0023.xhtml#ch13) ) and controlling the servos
    via PWM (as discussed earlier in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: 'The new material in this project is in the `displayServoTime()` function ❶,
    which takes the values of the hours and minutes from the RTC and converts them
    into suitable angles to which the servos move. For the servo displaying hours,
    we divide the 180-degree servo range by 12 hours. That gives us 15, so we multiply
    the hours value by 15 to get the required servo angle ❷, then command the first
    servo to move to that position ❸. We use a similar process to convert minutes
    to angles: 180 divided by 60 is 3, so we multiply the minutes value by 3 ❹, then
    command the second servo to move to that position ❺.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a final challenge, try altering the code so the hours display starts at
    12 and finishes at 11 instead of going from 1 to 12, or making your own servo
    library. There are many ways you can expand on these clocks, and using servos
    in general: for example, you could try using two servos as the front arms of a
    crawling robot, or to control older mechanical light switches.'
  prefs: []
  type: TYPE_NORMAL
- en: So where do you go from here? This book is only the beginning of your AVR journey.
    Check out the following epilogue for some next steps.
  prefs: []
  type: TYPE_NORMAL
