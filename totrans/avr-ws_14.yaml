- en: '[14](nsp-boxall502581-0008.xhtml#rch14)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[14](nsp-boxall502581-0008.xhtml#rch14)'
- en: Controlling Servos
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制伺服电机
- en: '![](images/nsp-boxall502581-ct.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](images/nsp-boxall502581-ct.jpg)'
- en: Various projects in [Chapter 8](nsp-boxall502581-0018.xhtml#ch08) used DC motors,
    which are ideal for rotating devices such as wheels for robots. However, for more
    precise motor control options, you can use a *servo* , short for *servomechanism*
    . Servos contain electric motors that you can rotate to a specific angular position
    using PWM signals.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](nsp-boxall502581-0018.xhtml#ch08)中的多个项目使用了直流电机，适用于旋转设备，如机器人车轮。然而，对于更精确的电机控制选项，您可以使用*伺服电机*，即*伺服机构*的简称。伺服电机内部包含电动机，可以通过PWM信号旋转到特定的角度位置。'
- en: Servos come in handy for a variety of applications. For example, you might use
    a servo to steer a remote-controlled car by connecting it to a *horn* , a small
    arm or bar that the servo rotates. You might also connect a physical pointer to
    a servo so it can indicate information such as temperature on a scale, or use
    a servo to raise or lower a rotary drill.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机在许多应用中都非常有用。例如，您可能会将伺服电机连接到*舵角*，它是伺服电机旋转的小臂或杆，用来控制遥控汽车的转向。您还可以将一个物理指示器连接到伺服电机，让它显示诸如温度等信息，或者使用伺服电机来升降旋转钻。
- en: 'In this chapter, you will:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将：
- en: • Learn how to connect the ATmega328P-PU microcontroller to a servo and use
    PWM to control it.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 学习如何将ATmega328P-PU微控制器连接到伺服电机，并使用PWM控制它。
- en: • Learn how to independently control two servos at once.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 学习如何独立控制两个伺服电机。
- en: • Build an analog thermometer and an analog clock.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 构建一个模拟温度计和一个模拟时钟。
- en: '[Setting Up Your Servo](nsp-boxall502581-0008.xhtml#rah1601)'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[设置您的伺服电机](nsp-boxall502581-0008.xhtml#rah1601)'
- en: 'There are a large variety of servos on the market, from tiny units used in
    portable devices such as digital cameras to large units used in robotic manufacturing
    assembly devices. When you’re selecting a servo, consider several parameters:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有各种类型的伺服电机，从小型单位（如数字相机中的便携式设备）到大型单位（如用于机器人制造组装设备）。在选择伺服电机时，请考虑多个参数：
- en: Speed The time it takes for the servo to rotate, usually measured in seconds
    per angular degree.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 速度 伺服电机旋转所需的时间，通常以每个角度度数的秒数来衡量。
- en: Rotational range The angular range through which the servo can rotate—for example,
    180 degrees (half of a full rotation) or 360 degrees (one complete rotation).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转范围 伺服电机可以旋转的角度范围，例如180度（半个完整旋转）或360度（一个完整旋转）。
- en: Current How much current the servo draws. When using a servo with an Arduino,
    you may need to use an external power supply for the servo.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 电流 伺服电机的电流消耗。当您将伺服电机与Arduino一起使用时，可能需要为伺服电机提供外部电源。
- en: Torque The amount of force the servo can exert when rotating. The greater the torque,
    the heavier the item the servo can control. The torque produced is generally proportional
    to the amount of current used.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 转矩 伺服电机旋转时所能施加的力。转矩越大，伺服电机能够控制的物体就越重。产生的转矩通常与所用电流量成正比。
- en: For the examples in this chapter, we’ll be using an inexpensive and compact
    servo like the one in [Figure 14-1](nsp-boxall502581-0024.xhtml#f14001) , commonly
    known as an SG90-type servo. We’ll combine this servo with three types of horns,
    also shown in the figure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例将使用一种便宜且紧凑的伺服电机，如[图14-1](nsp-boxall502581-0024.xhtml#f14001)所示，通常被称为SG90型伺服电机。我们将把这种伺服电机与三种不同类型的舵角连接，图中也有显示。
- en: '![Photo of an SG90-type servo and three different kinds of horns](images/nsp-boxall502581-f14001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![SG90型伺服电机和三种不同舵角的照片](images/nsp-boxall502581-f14001.jpg)'
- en: 'Figure 14-1: Servo and various horns'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-1：伺服电机与各种舵角
- en: This servo can rotate up to 180 degrees, as shown in [Figure 14-2](nsp-boxall502581-0024.xhtml#f14002)
    .
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该伺服电机可旋转最多180度，如[图14-2](nsp-boxall502581-0024.xhtml#f14002)所示。
- en: '![Diagram showing the rotation range of a servo, from 0 to 180 degrees](images/nsp-boxall502581-f14002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图示显示伺服电机的旋转范围，从0到180度](images/nsp-boxall502581-f14002.jpg)'
- en: 'Figure 14-2: Example of servo rotation range'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-2：伺服电机旋转范围示例
- en: Inside the servo is a small DC motor connected to the horn spindle via *reduction
    gears* , which reduce the rotational speed of the DC motor to a much slower pace
    for the servo. The servo also contains a *feedback controller* , which measures
    the rotational position of the DC motor’s shaft in order to position it more exactly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机内部有一个小型直流电机，通过*减速齿轮*与舵角主轴连接，这些减速齿轮将直流电机的旋转速度降低到适合伺服电机的较慢速度。伺服电机还包含一个*反馈控制器*，它会测量直流电机轴的旋转位置，从而使伺服电机的位置更加精确。
- en: '[Connecting a Servo](nsp-boxall502581-0008.xhtml#rbh1601)'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[连接伺服电机](nsp-boxall502581-0008.xhtml#rbh1601)'
- en: You need just three wires to connect a servo to your microcontroller. If you’re
    using the SG90, the darkest wire connects to GND, the center wire connects to
    5 V, and the lightest wire (the *pulse* or *PWM* wire) connects to a digital pin
    with PWM capability. If you’re using a different servo, check its data sheet for
    the correct wiring. We’ll use the standard schematic symbol for servos shown in
    [Figure 14-3](nsp-boxall502581-0024.xhtml#f14003) .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要三根线就能将伺服电机连接到你的微控制器。如果你使用的是 SG90，最深色的线连接到 GND，中间的线连接到 5 V，最浅色的线（*脉冲* 或 *PWM*
    线）连接到一个具备 PWM 功能的数字引脚。如果你使用的是其他伺服电机，请查阅其数据手册以获得正确的接线方式。我们将使用 [图 14-3](nsp-boxall502581-0024.xhtml#f14003)
    中展示的标准伺服电机电路符号。
- en: '![Standard schematic symbol for a servo](images/nsp-boxall502581-f14003.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![伺服电机的标准电路符号](images/nsp-boxall502581-f14003.jpg)'
- en: 'Figure 14-3: Schematic symbol for a servo'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-3：伺服电机的电路符号
- en: All the servos you will come across in the hobbyist and experimenting range
    of products use this same schematic symbol.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有你会遇到的爱好者和实验产品中的伺服电机都使用相同的电路符号。
- en: '[Controlling a Servo](nsp-boxall502581-0008.xhtml#rbh1602)'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[控制伺服电机](nsp-boxall502581-0008.xhtml#rbh1602)'
- en: We set a servo’s rotational angle by changing the duty cycle of a PWM signal
    connected to the servo’s pulse wire. In general, servos require a PWM signal with
    a frequency of 50 Hz and a period of 20 ms. Setting the signal’s duty cycle to
    different values causes the servo’s internal controller to move the horn to an
    angle to which the duty cycle is inversely proportionate.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过改变连接到伺服电机脉冲线的 PWM 信号的占空比来设置伺服电机的旋转角度。一般来说，伺服电机需要一个频率为 50 Hz，周期为 20 毫秒的 PWM
    信号。将信号的占空比设置为不同的值会导致伺服电机的内部控制器将舵机移动到一个与占空比成反比例关系的角度。
- en: Using our SG90 servo as an example, if we set the duty cycle to 12 percent (or
    2.4 ms out of the total period of 20 ms), as shown in [Figure 14-4](nsp-boxall502581-0024.xhtml#f14004)
    , the horn will rotate to 0 degrees.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们的 SG90 伺服电机为例，如果我们将占空比设置为 12%（或 2.4 毫秒，占总周期 20 毫秒的 2.4 毫秒），如 [图 14-4](nsp-boxall502581-0024.xhtml#f14004)
    所示，舵机将旋转到 0 度。
- en: '![DSO display showing a PWM signal with a 12 percent duty cycle](images/nsp-boxall502581-f14004.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![DSO 显示器显示带有 12% 占空比的 PWM 信号](images/nsp-boxall502581-f14004.jpg)'
- en: 'Figure 14-4: PWM signal for 0 degrees'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-4：0 度的 PWM 信号
- en: If we set the duty cycle to 3 percent, as shown in [Figure 14-5](nsp-boxall502581-0024.xhtml#f14005)
    , the horn will rotate to 180 degrees.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将占空比设置为 3%，如 [图 14-5](nsp-boxall502581-0024.xhtml#f14005) 所示，舵机将旋转到 180
    度。
- en: '![DSO display showing a PWM signal with a 3 percent duty cycle](images/nsp-boxall502581-f14005.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![DSO 显示器显示带有 3% 占空比的 PWM 信号](images/nsp-boxall502581-f14005.jpg)'
- en: 'Figure 14-5: PWM signal for 180 degrees'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-5：180 度的 PWM 信号
- en: 'We’ll put the code required to enable the PWM output for our SG90 servo in
    a function called `initPWM()` :'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把启用 PWM 输出所需的代码放在一个名为 `initPWM()` 的函数中：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function sets TIMER1 up for fast PWM. It sets the prescaler to 8 for a
    timer frequency of 2 MHz ❶, and sends the output to PB1 ❷. (To refresh your memory
    of how to generate PWM signals, refer to [Chapter 7](nsp-boxall502581-0017.xhtml#ch07)
    .) The timer will count from 0 to 39,999 then reset ❸, with each period being
    0.0000005 seconds in length ( *time* = 1/ *frequency* ). This gives a full pulse
    period of 20 ms.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将 TIMER1 设置为快速 PWM 模式。它将预分频器设置为 8，以获得 2 MHz 的计时器频率 ❶，并将输出发送到 PB1 ❷。（如果你需要回顾如何生成
    PWM 信号，请参阅 [第 7 章](nsp-boxall502581-0017.xhtml#ch07)。）计时器将从 0 计数到 39,999，然后重置
    ❸，每个周期的长度为 0.0000005 秒（*时间* = 1/ *频率*）。这给出了一个完整的脉冲周期为 20 毫秒。
- en: We’ll then use OCR1A to set the duty cycle and thus position the servo. We know
    that a 12 percent duty cycle results in a rotation to 0 degrees, so we can calculate
    the required OCR1A value by multiplying 40,000 (remember that the counter starts
    at 0 and counts to 39,999) by 0.12, which gives us 4,799\. For a full rotation
    to 180 degrees, we would set OCR1A to 1,199 (40,000 × 0.12).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用 OCR1A 来设置占空比，从而控制伺服电机的位置。我们知道，12% 的占空比会使舵机旋转到 0 度，因此我们可以通过将 40,000（记住计数器从
    0 开始计数，到 39,999）乘以 0.12 来计算所需的 OCR1A 值，结果为 4,799。为了完成 180 度的旋转，我们需要将 OCR1A 设置为
    1,199（40,000 × 0.12）。
- en: If you’re using a servo other than the SG90, determine the duty cycle values
    required for 0 and 180 degree rotation, then use the calculations described in
    the previous paragraph to determine your required OCR1A values. You should be
    able to get the duty cycle information from the servo supplier or retailer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是非 SG90 的伺服电机，确定 0 度和 180 度旋转所需的占空比值，然后使用前述段落中的计算方法来确定所需的 OCR1A 值。你应该能够从伺服电机供应商或零售商那里获得占空比信息。
- en: Now, let’s put what you’ve just learned into practice by rotating a servo in
    various ways.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过以不同方式旋转伺服电机，将你刚刚学到的知识付诸实践。
- en: '[Project 56: Experimenting with Servos](nsp-boxall502581-0008.xhtml#rpro56)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 56：实验伺服电机](nsp-boxall502581-0008.xhtml#rpro56)'
- en: With this project you’ll learn the basic of servo control, including the required
    circuitry and commands for servo movement.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将学习伺服控制的基础知识，包括伺服运动所需的电路和指令。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1603)'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1603)'
- en: 'To build your circuit, you’ll need the following hardware:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建你的电路，你将需要以下硬件：
- en: • USBasp programmer
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • 5 V breadboard power supply
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5 V 面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • Two 22 pF ceramic capacitors (C1–C2)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个 22 pF 陶瓷电容器（C1–C2）
- en: • 470 μF 16 V electrolytic capacitor (C3)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 470 μF 16 V 电解电容器（C3）
- en: • 16 MHz crystal oscillator
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 16 MHz 晶体振荡器
- en: • SG90 servo
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • SG90 伺服电机
- en: • Jumper wires
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble your circuit as shown in [Figure 14-6](nsp-boxall502581-0024.xhtml#f14006)
    .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 14-6](nsp-boxall502581-0024.xhtml#f14006) 所示组装电路。
- en: '![Schematic diagram for Project 56](images/nsp-boxall502581-f14006.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![项目 56 原理图](images/nsp-boxall502581-f14006.jpg)'
- en: 'Figure 14-6: Schematic for [Project 56](nsp-boxall502581-0024.xhtml#pro56)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-6： [项目 56](nsp-boxall502581-0024.xhtml#pro56) 的原理图
- en: Note the use of the large electrolytic capacitor over the 5 V and GND lines.
    When servos are operating, they can sometimes generate a varying voltage due to
    the motor turning on and off quickly, so we use the capacitor to smooth out the
    power to a more consistent 5 V.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在 5 V 和 GND 线路上使用的大型电解电容器。当伺服电机工作时，由于电机的快速启停，可能会产生波动的电压，因此我们使用电容器来平滑电源，使其更加稳定，保持
    5 V 电压。
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1604)'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1604)'
- en: Open a terminal window, navigate to the *Project 56* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. After a moment
    or two, the servo should quickly rotate across its full range from 0 to 180 degrees,
    then do so again at a slower speed, then return to 0 degrees at an even slower
    speed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书 *第 14 章* 文件夹中的 *项目 56* 子文件夹，并像往常一样输入命令 `make flash`。片刻之后，伺服电机应该会快速旋转，从
    0 到 180 度，然后以更慢的速度再次旋转，最后再以更慢的速度回到 0 度。
- en: 'Let’s take a look at the code to see how this works:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下代码，了解它是如何工作的：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We start by defining three functions: `initPWM()` ❶, which handles PWM initialization;
    `servoRange()` ❷, which for demonstrative purposes simply rotates the servo arm
    between 0 and 180 degrees by setting OCR1A with the duty cycle values for 0 degrees,
    then 180 degrees; and the useful custom function `servoAngle(uint8_t angle)` ❸,
    which accepts a number (the rotational angle for our desired servo position) and
    converts this into the required duty cycle value to be stored in OCR1A ❹. This
    simplifies the task of commanding the servo, automatically converting the angle
    we want into the correct duty cycle between 4,799 and 1,199 with the formula *angle*
    = ( *counter* – 239.95) / −0.05\. These values are generally used by most common
    small servos, but check with your supplier if you’re unsure.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先定义了三个函数：`initPWM()` ❶，用于处理 PWM 初始化；`servoRange()` ❷，为了演示目的，它简单地通过设置 OCR1A
    和占空比值，将伺服臂在 0 到 180 度之间旋转；以及有用的自定义函数 `servoAngle(uint8_t angle)` ❸，它接受一个数字（我们期望的伺服位置的旋转角度），并将其转换为需要存储在
    OCR1A ❹ 中的占空比值。这简化了控制伺服的任务，自动将我们想要的角度转换为 4,799 到 1,199 之间的正确占空比，公式为 *angle* =
    ( *counter* – 239.95) / −0.05。这些值通常用于大多数常见的小型伺服电机，但如果不确定，最好向供应商咨询。
- en: In the main section of the code, we first set the pin connected to the servo’s
    pulse wire to an output ❺, then call the `initPWM()` function to enable PWM. We
    call `servoRange()` ❻ to rotate the servo arm quickly from 0 to 180 degrees and
    back again, then this is repeated in a slower fashion using the `for` loops at
    ❼ and ❽, respectively. Each introduces a delay between movement of the servo arm
    one degree in either direction.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的主部分，我们首先将连接到伺服脉冲线的引脚设置为输出 ❺，然后调用 `initPWM()` 函数启用 PWM。我们调用 `servoRange()`
    ❻ 来快速地将伺服臂从 0 到 180 度旋转，然后使用 `for` 循环 ❼ 和 ❽ 以较慢的速度重复这个过程。每次移动时，伺服臂会在两个方向上各移动一个角度，并引入延迟。
- en: 'Note The formula for the `servoAngle()` function was created using linear algebra,
    based on two sets of points: (4799,0) and (1199,180). You can use an online tool
    such as GeoGebra ( [https://www.geogebra.org/m/UyfrABcN](https://www.geogebra.org/m/UyfrABcN)
    ) to determine the equation for your own formula if your servo requires different
    duty cycle values.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注：`servoAngle()` 函数的公式是通过线性代数创建的，基于两组点：（4799,0）和（1199,180）。如果你的伺服电机需要不同的占空比值，你可以使用在线工具，如
    GeoGebra（[https://www.geogebra.org/m/UyfrABcN](https://www.geogebra.org/m/UyfrABcN)），来确定你自己的公式。
- en: Now that you have the code framework to control a servo, let’s combine it with
    your prior knowledge about using the TMP36 temperature sensor to build an analog
    thermometer.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了控制伺服电机的代码框架，我们将它与之前关于使用 TMP36 温度传感器的知识结合，来构建一个模拟温度计。
- en: '[Project 57: Creating an Analog Thermometer](nsp-boxall502581-0008.xhtml#rpro57)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目 57：创建一个模拟温度计](nsp-boxall502581-0008.xhtml#rpro57)'
- en: You can use a servo to display a temperature reading by attaching an arrow to
    the servo horn and creating a backing sheet with the temperature range on it.
    This project will display temperatures between 0 and 30 degrees Celsius, but you
    can modify it to show different ranges.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将一个箭头附加到伺服电机的舵轮上，并制作一个带有温度范围的背板来显示温度读数。这个项目会显示 0 到 30 摄氏度之间的温度，但你可以修改它以显示不同的温度范围。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1605)'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1605)'
- en: 'To build your circuit, you’ll need the following hardware:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建你的电路，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊接面包板
- en: • 5 V breadboard power supply
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5V 面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • One TMP36 temperature sensor
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一只 TMP36 温度传感器
- en: • Two 22 pF ceramic capacitors (C1–C2)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个 22 pF 陶瓷电容（C1–C2）
- en: • 470 μF 16 V electrolytic capacitor (C3)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 470 μF 16V 电解电容（C3）
- en: • 0.1 μF ceramic capacitor (C4)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF 陶瓷电容（C4）
- en: • 16 MHz crystal oscillator
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 16 MHz 晶体振荡器
- en: • SG90-compatible servo
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • SG90 兼容伺服电机
- en: • Jumper wires
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble your circuit as shown in [Figure 14-7](nsp-boxall502581-0024.xhtml#f14007)
    . Don’t forget to connect the microcontroller’s AV [CC] pin to 5 V.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 按照 [图 14-7](nsp-boxall502581-0024.xhtml#f14007) 中所示的方式组装你的电路。别忘了将微控制器的 AV [CC]
    引脚连接到 5V。
- en: '![Schematic diagram for Project 57](images/nsp-boxall502581-f14007.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![项目 57 原理图](images/nsp-boxall502581-f14007.jpg)'
- en: 'Figure 14-7: Schematic for [Project 57](nsp-boxall502581-0024.xhtml#pro57)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-7：[项目 57](nsp-boxall502581-0024.xhtml#pro57)的原理图
- en: '[Figure 14-8](nsp-boxall502581-0024.xhtml#f14008) shows what the backing sheet
    representing the range of temperatures that the servo will display might look
    like, with a small arrow attached to the horn as a pointer.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 14-8](nsp-boxall502581-0024.xhtml#f14008) 显示了伺服电机将要显示的温度范围背板的样子，背板上附有一个小箭头作为指示器。'
- en: '![Example of a finished Project 57, with the arrow fixed to the servo horn
    pointing to a value on the temperature backing sheet](images/nsp-boxall502581-f14008.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![完成的项目 57 示例，箭头固定在伺服舵轮上，指向温度背板上的一个值](images/nsp-boxall502581-f14008.jpg)'
- en: 'Figure 14-8: The backing sheet indicating the temperature'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14-8：显示温度的背板
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1606)'
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1606)'
- en: Open a terminal window, navigate to the *Project 57* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. After a moment
    or two, the servo horn should swing to an angular position that represents the
    temperature in degrees Celsius.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，进入本书 *第 14 章* 文件夹下的 *项目 57* 子文件夹，然后像往常一样输入命令 `make flash`。几秒钟后，伺服电机的舵轮应该会摆动到一个代表温度的角度位置，以摄氏度为单位。
- en: 'Let’s take a look at the code to see how this works:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下代码，看看它是如何工作的：
- en: '[PRE2]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We start by performing the usual steps to set the required pins for the servo
    as an output ❶ and the TMP36 sensor as an input ❷, then declare the variables
    needed for storage and conversion of temperature data from the TMP36 sensor ❸.
    We then call the functions to start the ADC ❹ and initialize PWM ❺. Next, we determine
    the temperature in Celsius by first reading the ADC ❻ and storing its value into
    `ADCvalue` ❼, then doing the mathematical conversion to Celsius ❽. Finally, we
    convert the temperature to an angle for the servo by multiplying it by 6 (since
    the servo range is 0 to 180 degrees) ❾ and tell the servo to move to the appropriate
    angle.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先按照常规步骤设置舵机所需的引脚为输出❶，并将TMP36传感器设置为输入❷，然后声明存储和转换TMP36传感器温度数据所需的变量❸。接着，我们调用函数启动ADC❹并初始化PWM❺。接下来，我们通过读取ADC❻并将其值存入`ADCvalue`❼，然后进行数学转换将温度转换为摄氏度❽。最后，我们将温度转换为舵机角度，通过将其乘以6（因为舵机的范围是0到180度）❾，然后让舵机移动到适当的角度。
- en: At this point, you can use what you’ve learned in this book so far to make a
    variety of controllable analog displays with your servo—for example, a low-voltage
    meter or a countdown timer. But if anything’s better than one servo, it’s using
    two servos at once; you’ll see how to do that next.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以利用本书中学到的知识，使用舵机制作各种可控的模拟显示器——例如，一个低电压表或倒计时器。但如果有比一个舵机更好的选择，那就是同时使用两个舵机；接下来你将看到如何做到这一点。
- en: '[Project 58: Controlling Two Servos](nsp-boxall502581-0008.xhtml#rpro58)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目58：控制两个舵机](nsp-boxall502581-0008.xhtml#rpro58)'
- en: Since there are multiple PWM-capable output pins on the ATmega328P-PU microcontroller,
    we can control two servos at once for more involved projects. This project will
    show you how.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于ATmega328P-PU微控制器上有多个支持PWM的输出引脚，我们可以同时控制两个舵机，适用于更复杂的项目。这个项目将展示如何实现这一点。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1607)'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1607)'
- en: 'To build your circuit, you’ll need the following hardware:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建你的电路，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp 编程器
- en: • Solderless breadboard
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • 5 V breadboard power supply
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5V 面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU 微控制器
- en: • One TMP36 temperature sensor
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个TMP36温度传感器
- en: • Two 22 pF ceramic capacitors (C1–C2)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个22 pF 陶瓷电容（C1–C2）
- en: • 470 μF 16 V electrolytic capacitor (C3)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 470 μF 16V 电解电容（C3）
- en: • 0.1 μF ceramic capacitor (C4)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF 陶瓷电容（C4）
- en: • 16 MHz crystal oscillator
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 16 MHz 晶体振荡器
- en: • Two SG90-compatible servos
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个SG90兼容舵机
- en: • Jumper wires
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble your circuit as shown in [Figure 14-9](nsp-boxall502581-0024.xhtml#f14009)
    .
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图14-9](nsp-boxall502581-0024.xhtml#f14009)所示组装电路。
- en: '![Schematic diagram for Project 58](images/nsp-boxall502581-f14009.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![项目58原理图](images/nsp-boxall502581-f14009.jpg)'
- en: 'Figure 14-9: Schematic for [Project 58](nsp-boxall502581-0024.xhtml#pro58)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-9：[项目58](nsp-boxall502581-0024.xhtml#pro58)的原理图
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1608)'
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1608)'
- en: Open a terminal window, navigate to the *Project 58* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. After a moment
    or two both servos should imitate the motion demonstrated in [Project 56](nsp-boxall502581-0024.xhtml#pro56)
    , quickly rotating across their full range from 0 to 180 degrees, then repeating
    this at a slower speed, and then returning to 0 degrees at an even slower speed.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到本书*第14章*文件夹下的*项目58*子文件夹，并像往常一样输入命令`make flash`。几秒钟后，两个舵机会模拟[项目56](nsp-boxall502581-0024.xhtml#pro56)中演示的动作，快速旋转整个范围从0到180度，然后以较慢的速度重复此动作，再以更慢的速度返回到0度。
- en: 'Let’s see how this works:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个是如何工作的：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `initPWM()` function ❶, after activating PWM we turn on the COM1B1 bit
    in TCCR1A to enable PWM for the second servo connected to PB2 ❷. Two `servoAngle()`
    -type functions, one for servo A ❸ and one for servo B ❹, allow for control by
    accepting the required rotational angle. I’ve modified the function `servoRange()`
    ❺ to control the first servo and the second servo by assigning the required values
    to OCR1A and OCR1B, respectively.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`initPWM()`函数❶中，激活PWM后，我们打开TCCR1A中的COM1B1位，以便为连接到PB2的第二个舵机启用PWM❷。有两个`servoAngle()`类型的函数，一个用于舵机A❸，一个用于舵机B❹，可以通过接收所需的旋转角度来控制舵机。我已修改`servoRange()`函数❺，通过分别将所需的值赋给OCR1A和OCR1B来控制第一个和第二个舵机。
- en: You could also experiment with the direction of both servos by altering the
    delays after the `servoAngleA/B()` functions or reversing the counting to go from
    higher values to lower values. Now that you can use two servos with ease, it’s
    time to put them to work in the form of an analog clock.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过改变`servoAngleA/B()`函数后的延时或将计数反向（从较高值到较低值）来实验两个舵机的方向。现在你已经可以轻松使用两个舵机了，接下来是将它们应用于模拟时钟。
- en: '[Project 59: Building an Analog Clock with Servo Hands](nsp-boxall502581-0008.xhtml#rpro59)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[项目59：用舵机指针构建模拟时钟](nsp-boxall502581-0008.xhtml#rpro59)'
- en: In this project you’ll use two servos to display the time in the form of a dual-display
    analog clock. One servo will display the hour, and the other will display minutes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将使用两个舵机通过双显示模拟时钟来显示时间。一个舵机显示小时，另一个显示分钟。
- en: '[The Hardware](nsp-boxall502581-0008.xhtml#rbh1609)'
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[硬件](nsp-boxall502581-0008.xhtml#rbh1609)'
- en: 'To build your circuit, you’ll need the following hardware:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建电路，你需要以下硬件：
- en: • USBasp programmer
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • USBasp编程器
- en: • Solderless breadboard
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 无焊面包板
- en: • 5 V breadboard power supply
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 5 V面包板电源
- en: • ATmega328P-PU microcontroller
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • ATmega328P-PU微控制器
- en: • One TMP36 temperature sensor
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 一个TMP36温度传感器
- en: • Two 22 pF ceramic capacitors (C1–C2)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个22 pF陶瓷电容（C1–C2）
- en: • 470 μF 16 V electrolytic capacitor (C3)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 470 μF 16 V电解电容（C3）
- en: • 0.1 μF ceramic capacitor (C4)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 0.1 μF陶瓷电容（C4）
- en: • 16 MHz crystal oscillator
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 16 MHz晶体振荡器
- en: • DS3231 real-time clock module with backup battery
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • DS3231实时时钟模块，带有备用电池
- en: • Two SG90-compatible servos
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 两个SG90兼容舵机
- en: • Jumper wires
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: • 跳线
- en: Assemble your circuit as shown in [Figure 14-10](nsp-boxall502581-0024.xhtml#f14010)
    . Don’t forget to connect the DS3231 board to 5 V and GND as well.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[图14-10](nsp-boxall502581-0024.xhtml#f14010)所示组装你的电路。别忘了将DS3231板连接到5 V和GND。
- en: '![Schematic diagram for Project 59](images/nsp-boxall502581-f14010.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![项目59的原理图](images/nsp-boxall502581-f14010.jpg)'
- en: 'Figure 14-10: Schematic for [Project 59](nsp-boxall502581-0024.xhtml#pro59)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-10：项目[59](nsp-boxall502581-0024.xhtml#pro59)原理图
- en: Before uploading the code, don’t forget to set the time in the same manner as
    you did in previous projects that used the DS3231, such as [Project 51](nsp-boxall502581-0022.xhtml#pro51)
    . You may also want to create a backing display like the one used in [Project
    57](nsp-boxall502581-0024.xhtml#pro57) , as shown in [Figure 14-11](nsp-boxall502581-0024.xhtml#f14011)
    —feel free to get creative. Note that servo M1 in the schematic is for hours,
    and M2 is for minutes.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传代码之前，别忘了像在之前使用DS3231的项目中一样设置时间，例如[项目51](nsp-boxall502581-0022.xhtml#pro51)。你还可以创建一个类似于[项目57](nsp-boxall502581-0024.xhtml#pro57)中使用的背景显示，如[图14-11](nsp-boxall502581-0024.xhtml#f14011)所示——尽情发挥创意。注意，原理图中的舵机M1用于显示小时，M2用于显示分钟。
- en: '![example of a finished Project 59, with the arrows fixed to the servo horn
    on each servo pointing to an hours and minutes value on the time backing sheets](images/nsp-boxall502581-f14011.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![项目59完成示例，箭头固定在每个舵机的舵盘上，指向时间背板上的小时和分钟值](images/nsp-boxall502581-f14011.jpg)'
- en: 'Figure 14-11: Example clock faces for [Project 59](nsp-boxall502581-0024.xhtml#pro59)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图14-11：项目[59](nsp-boxall502581-0024.xhtml#pro59)时钟面盘示例
- en: '[The Code](nsp-boxall502581-0008.xhtml#rbh1610)'
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '[代码](nsp-boxall502581-0008.xhtml#rbh1610)'
- en: Open a terminal window, navigate to the *Project 59* subfolder of this book’s
    *Chapter 14* folder, and enter the command `make flash` as usual. Once you’ve
    flashed the code, you should see the current time displayed by way of the position
    of the servo horns.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到本书*第14章*文件夹中的*Project 59*子文件夹，像往常一样输入命令`make flash`。一旦你烧录了代码，你应该能够通过舵机舵盘的位置看到当前时间。
- en: 'Let’s see how this works:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这是如何工作的：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After reviewing the code, you should recognize the parts dedicated to enabling
    the I ² C bus (as described in [Chapter 12](nsp-boxall502581-0022.xhtml#ch12)
    ), along with setting and retrieving the time from the DS3231 RTC module (as described
    in [Chapter 13](nsp-boxall502581-0023.xhtml#ch13) ) and controlling the servos
    via PWM (as discussed earlier in this chapter).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 审查代码后，你应该能识别出启用I²C总线的部分（如[第12章](nsp-boxall502581-0022.xhtml#ch12)中所述），以及从DS3231
    RTC模块获取和设置时间的部分（如[第13章](nsp-boxall502581-0023.xhtml#ch13)中所述），并通过PWM控制舵机（如本章前面讨论的）。
- en: 'The new material in this project is in the `displayServoTime()` function ❶,
    which takes the values of the hours and minutes from the RTC and converts them
    into suitable angles to which the servos move. For the servo displaying hours,
    we divide the 180-degree servo range by 12 hours. That gives us 15, so we multiply
    the hours value by 15 to get the required servo angle ❷, then command the first
    servo to move to that position ❸. We use a similar process to convert minutes
    to angles: 180 divided by 60 is 3, so we multiply the minutes value by 3 ❹, then
    command the second servo to move to that position ❺.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的新材料在`displayServoTime()`函数❶中，该函数从RTC获取小时和分钟的值，并将它们转换为舵机应该移动到的合适角度。对于显示小时的舵机，我们将180度的舵机范围除以12小时。这样得到15，所以我们将小时值乘以15，得到所需的舵机角度❷，然后命令第一个舵机移动到该位置❸。我们使用类似的过程将分钟转换为角度：180除以60得到3，因此我们将分钟值乘以3❹，然后命令第二个舵机移动到该位置❺。
- en: 'For a final challenge, try altering the code so the hours display starts at
    12 and finishes at 11 instead of going from 1 to 12, or making your own servo
    library. There are many ways you can expand on these clocks, and using servos
    in general: for example, you could try using two servos as the front arms of a
    crawling robot, or to control older mechanical light switches.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的挑战，尝试修改代码，使得小时显示从12开始，11结束，而不是从1到12，或者自己制作一个舵机库。你可以用许多方式来扩展这些时钟，并且在使用舵机方面也有很多可能性：例如，你可以尝试将两个舵机用作爬行机器人前臂，或者用来控制老式机械式电灯开关。
- en: So where do you go from here? This book is only the beginning of your AVR journey.
    Check out the following epilogue for some next steps.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 那么接下来你应该怎么做呢？本书仅仅是你AVR旅程的开始。请查看以下的后记，了解下一步该怎么走。
