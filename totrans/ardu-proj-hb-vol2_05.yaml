- en: '**LCDs**'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**13'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultrasonic Range Finder**
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll create a simple ultrasonic range finder with a screen
    that displays the distance of an object up to 5 meters from the sensor.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0106-01.jpg)![Image](../images/p0107-01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**HD44780 16x2 LCD screen**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**HC-SR04 ultrasonic sensor**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '**50k-ohm potentiometer**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARY REQUIRED**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**LiquidCrystal**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ultrasonic range finder sends out a burst of ultrasound and listens for
    the echo that bounces off an object. The Arduino sends out a short pulse on the
    trigger pin to send the ultrasonic burst, then listens for a pulse on the echo
    pin using the `pulseIn` function.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: This duration between sending and receiving the pulse is equal to the time taken
    by the ultrasound to travel to the object and back to the sensor. The Arduino
    converts this time to distance and displays it on the LCD screen. You can find
    an HC-SR04 unit ([Figure 13-1](ch13.xhtml#ch13fig1)) from one of the sources listed
    in the “[Retailer List](app02.xhtml#ch00lev1sec170)” on [page 249](app02.xhtml#page_249),
    or you can search online for *HC-SR04 ultrasonic module*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 13-1:** The HC-SR04 ultrasonic sensor'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f13-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: An LCD (liquid crystal display) screen is made of two sheets of polarizing material
    with a liquid crystal solution between them. Current passing through the solution
    makes the screen opaque, so by controlling which areas of the screen current passes
    through, the Arduino creates an image or, in this case, characters. You’ll need
    an LCD screen that’s compatible with the Hitachi HD44780 driver for it to work
    with the Arduino; there are lots of them out there and you can usually identify
    them by their 16-pin interface. We’ll use the LiquidCrystal library to send characters
    to the LCD screen (refer to the primer if you need a refresher on libraries).
    The LiquidCrystal library maps the characters and uses the `print` commands to
    send messages to the screen.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**PREPARING THE LCD SCREEN**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The LCD screen will probably require a bit of assembly. Your screen should have
    come with 16 holes, as shown in [Figure 13-2](ch13.xhtml#ch13fig2), and a separate
    strip of header pins. Break off a row of 16 pins from the strip. Insert the shorter
    side of the pins into the 16 LCD holes. You’ll need to solder these in place;
    the primer has a quick soldering guide if you need pointers. Solder the far-right
    and far-left pins first to hold the strip in place and wait a moment for them
    to set. Then solder each pin in turn. Holding the iron to the pins for too long
    will damage them, so solder them only for a couple of seconds.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 13-2:** A 16×2 LCD screen'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f13-02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Place your LCD screen in the breadboard, inserting the header pins into the
    breadboard holes. Also place the potentiometer in the breadboard, and use jumper
    wires to connect your LCD screen, Arduino, and potentiometer as shown in the following
    table. The pins of the LCD screen should be labeled or numbered, either on the
    back or the front. If not, they usually start at 1 from the left when the pins
    are along the top. There are a number of connections from the LCD screen to Arduino
    GND, so use the breadboard ground rail to make multiple connections to the Arduino
    GND pin.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将LCD屏幕放置在面包板上，将引脚插入面包板孔中。同时将电位器放入面包板，并使用跳线将LCD屏幕、Arduino和电位器连接，如下表所示。LCD屏幕的引脚应有标签或编号，无论是在背面还是正面。如果没有，通常从左侧开始编号，沿顶部排列时引脚从1开始。LCD屏幕与Arduino
    GND之间有多个连接，因此请使用面包板的地轨与Arduino的GND引脚进行多次连接。
- en: '|  **LCD SCREEN**  | **ARDUINO** |'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '|  **LCD屏幕**  | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 VSS | GND |'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 VSS | GND |'
- en: '| 2 VDD | +5V |'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 VDD | +5V |'
- en: '| 3 VO contrast | Potentiometer center pin |'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 3 VO 对比度 | 电位器中间引脚 |'
- en: '| 4 RS | Pin 11 |'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 4 RS | 引脚 11 |'
- en: '| 5 R/W | Pin 10 |'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 R/W | 引脚 10 |'
- en: '| 6 Enable | Pin 9 |'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 6 使能 | 引脚 9 |'
- en: '| 7 D0 | No connection |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 7 D0 | 无连接 |'
- en: '| 8 D1 | No connection |'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 8 D1 | 无连接 |'
- en: '| 9 D2 | No connection |'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 D2 | 无连接 |'
- en: '| 10 D3 | No connection |'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 D3 | 无连接 |'
- en: '| 11 D4 | Pin 7 |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 D4 | 引脚 7 |'
- en: '| 12 D5 | Pin 6 |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 D5 | 引脚 6 |'
- en: '| 13 D6 | Pin 5 |'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 D6 | 引脚 5 |'
- en: '| 14 D7 | Pin 4 |'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 D7 | 引脚 4 |'
- en: '| 15 A BcL+ | +5V |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 A BcL+ | +5V |'
- en: '| 16 K BcL– | GND |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 K BcL– | GND |'
- en: You should have already connected the center pin of the 50kohm potentiometer
    to LCD pin 3 (VO). Now connect one of the outer potentiometer pins to GND and
    the other to +5V. Twist the potentiometer to control the contrast of your LCD
    screen.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该已经将50kohm电位器的中间引脚连接到LCD的引脚3（VO）。现在将电位器的一个外部引脚连接到GND，另一个连接到+5V。旋转电位器来调节LCD屏幕的对比度。
- en: Backlit LCD screens will have resistors built in, but if you have a nonbacklit
    LCD screen, insert a 220-ohm resistor between LCD 15 and +5V. Check the data sheet
    for your screen if you’re unsure.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 背光LCD屏幕内置了电阻器，但如果你使用的是非背光LCD屏幕，请在LCD 15和+5V之间插入一个220欧姆的电阻。如果不确定，请查看屏幕的数据手册。
- en: Add the ultrasonic sensor module to your breadboard and connect VCC to +5V,
    Trig to Arduino pin 13, Echo to Arduino pin 12, and GND to GND, as shown in the
    following table.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将超声波传感器模块添加到面包板，将VCC连接到+5V，Trig连接到Arduino引脚13，Echo连接到Arduino引脚12，GND连接到GND，如下表所示。
- en: '| **ULTRASONIC SENSOR** | **ARDUINO** |'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **超声波传感器** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| VCC | +5V |'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| VCC | +5V |'
- en: '| Trig | Pin 13 |'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Trig | 引脚 13 |'
- en: '| Echo | Pin 12 |'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Echo | 引脚 12 |'
- en: '| GND | GND |'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| GND | GND |'
- en: Connect your breadboard rails to Arduino +5V and GND for power.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板的电源轨连接到Arduino的+5V和GND。
- en: Check that your setup matches the circuit diagram in [Figure 13-3](ch13.xhtml#ch13fig3),
    and upload the code in “[The Sketch](ch13.xhtml#ch00lev1sec54)” on [page 112](ch13.xhtml#page_112).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的设置是否与[图13-3](ch13.xhtml#ch13fig3)中的电路图一致，并上传“[草图](ch13.xhtml#ch00lev1sec54)”中的代码，该代码位于[112页](ch13.xhtml#page_112)。
- en: '**FIGURE 13-3:** The circuit diagram for the ultrasonic range finder'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图13-3：** 超声波测距仪的电路图'
- en: '![Image](../images/f13-03.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f13-03.jpg)'
- en: '**THE SKETCH**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first calls on the LiquidCrystal library and defines the LCD pins
    connected to the Arduino. Pin 13 on the Arduino, connected to the trigger pin
    of the sensor, sends an ultrasonic signal out, and Arduino pin 12, connected to
    the echo pin of the sensor, receives the returning signal. The Arduino converts
    the time between sending and receiving the signal into distance and displays the
    result on the LCD screen, in both inches and centimeters. This sketch can be found
    on the Arduino site, so I’ve copied it here exactly as it appears there.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先调用LiquidCrystal库，并定义连接到Arduino的LCD引脚。Arduino的引脚13连接到传感器的触发引脚，发送超声波信号，Arduino的引脚12连接到传感器的回波引脚，接收返回信号。Arduino将发送和接收信号之间的时间转换为距离，并将结果显示在LCD屏幕上，单位为英寸和厘米。此草图可以在Arduino网站上找到，因此我已按原样复制在这里。
- en: /*
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: /*
- en: Created 3 Nov 2008 by David A. Mellis;
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 2008年11月3日，由David A. Mellis创建；
- en: Modified 30 Aug 2011 by Tom Igoe
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 2011年8月30日，Tom Igoe修改
- en: This example code is in the public domain.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例代码属于公共领域。
- en: '*/'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*/'
- en: '#include <LiquidCrystal.h>'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <LiquidCrystal.h>'
- en: LiquidCrystal lcd(11, 10, 9, 7, 6, 5, 4);
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: LiquidCrystal lcd(11, 10, 9, 7, 6, 5, 4);
- en: int pingPin = 13;
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: int pingPin = 13;
- en: int inPin = 12;
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: int inPin = 12;
- en: void setup() {
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: lcd.begin(16, 2);
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: lcd.begin(16, 2);
- en: lcd.print("testing...");
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: lcd.print("testing...");
- en: '}'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Establish variables for duration of the ping,
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: // 为ping的持续时间建立变量，
- en: '// and the distance result in inches and centimeters:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: // long duration, inches, cm;
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: // The PING))) is triggered by a HIGH pulse of 2 ms or more
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '// Give a short LOW pulse beforehand to ensure a clean HIGH pulse:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(pingPin, OUTPUT);
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(pingPin, LOW);
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: delayMicroseconds(2);
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(pingPin, HIGH);
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: delayMicroseconds(10);
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(pingPin, LOW);
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '// The same pin is used to read the signal from the PING))):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: // a HIGH pulse whose duration is the time (in microseconds)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: // from the sending of the ping to the reception of its echo off
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: // of an object.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(inPin, INPUT);
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: duration = pulseIn(inPin, HIGH);
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: // Convert the time into a distance
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: inches = microsecondsToInches(duration);
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: cm = microsecondsToCentimeters(duration);
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0, 0);
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(inches);
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("in, ");
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(cm);
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("cm");
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: long microsecondsToInches(long microseconds) {
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: // According to Parallax's datasheet for the PING))),
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: // there are 73.746 ms/in (i.e. sound travels at 1130 fps).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: // This gives the distance traveled by the ping, outbound,
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: // and return, so divide by 2 to get the distance of the obstacle.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: return microseconds / 74 / 2;
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: long microsecondsToCentimeters(long microseconds) {
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: // The speed of sound is 340 m/s or 29 ms/cm.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: // The ping travels out and back, so to find the distance
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: // of the object, take half of the distance traveled.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: return microseconds / 29 / 2;
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *Nothing is displayed on the LCD screen.*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure you’ve connected power to the breadboard rails and the connections
    match the tables given earlier.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: • Turn the potentiometer to change the contrast of the screen until you see
    text.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: • If the screen has garbled messages on it, you have not wired it up correctly;
    recheck your wiring against [Figure 13-3](ch13.xhtml#ch13fig3).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '**14'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Digital Thermometer**
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: This project will add an LM35 temperature sensor to an LCD screen and Arduino
    to give you a digital thermometer.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0114-01.jpg)![Image](../images/p0115-01.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '**HD44780 16×2 LCD screen**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '**LM35 temperature sensor**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '**50k-ohm potentiometer**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARY REQUIRED**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '**LiquidCrystal**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Arduino takes the voltage reading from the same LM35 temperature sensor
    we used in Project 12 and converts that value to temperature in degrees Celsius.
    The sketch then changes this value to Fahrenheit by multiplying the value by 9,
    dividing the result by 5, and adding 32\. The LiquidCrystal library does all the
    hard work in displaying the temperature on the LCD screen using the `lcd.print`
    command. This project can easily be adapted with more sensors for an all-around
    weather center.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, prepare the LCD screen according to “[Preparing the LCD Screen](ch13.xhtml#ch00lev1sec52)”
    on [page 109](ch13.xhtml#page_109). Then follow these steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Insert your LCD screen and potentiometer into the breadboard; then use your
    breadboard and jumper wires to make the connections for the LCD screen as shown
    in the following table.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LCD 屏幕和电位器插入面包板，然后使用面包板和跳线按下表所示的方式连接 LCD 屏幕。
- en: '| **LCD SCREEN** | **ARDUINO** |'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LCD 屏幕** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| 1 VSS | GND |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 VSS | GND |'
- en: '| 2 VDD | +5V |'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 VDD | +5V |'
- en: '| 3 VO contrast | Potentiometer center pin |'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 3 VO 对比度 | 电位器中间引脚 |'
- en: '| 4 RS | Pin 12 |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 4 RS | 引脚 12 |'
- en: '| 5 R/W | GND |'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 R/W | GND |'
- en: '| 6 Enable | Pin 11 |'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 6 使能 | 引脚 11 |'
- en: '| 7 D0 | No connection |'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 7 D0 | 无连接 |'
- en: '| 8 D1 | No connection |'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 8 D1 | 无连接 |'
- en: '| 9 D2 | No connection |'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 D2 | 无连接 |'
- en: '| 10 D3 | No connection |'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 D3 | 无连接 |'
- en: '| 11 D4 | Pin 5 |'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 D4 | 引脚 5 |'
- en: '| 12 D5 | Pin 4 |'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 D5 | 引脚 4 |'
- en: '| 13 D6 | Pin 3 |'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 D6 | 引脚 3 |'
- en: '| 14 D7 | Pin 2 |'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 D7 | 引脚 2 |'
- en: '| 15 A BcL+ | +5V |'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 A BcL+ | +5V |'
- en: '| 16 K BcL– | GND |'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 K BcL– | GND |'
- en: Connect the GND and +5V rails to Arduino GND and +5V.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 GND 和 +5V 电源轨连接到 Arduino 的 GND 和 +5V。
- en: You should have already connected the center pin of the 50k-ohm potentiometer
    to LCD pin 3 (VO). Now connect one of the outer pins to GND and the other to +5V.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该已经将 50kΩ 电位器的中间引脚连接到 LCD 的引脚 3（VO）。现在将其中一个外部引脚连接到 GND，另一个连接到 +5V。
- en: Connect the center pin of the LM35 temperature sensor to Arduino A0, the left
    pin to the +5V rail, and the right pin to the GND rail, as shown in the following
    table.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 LM35 温度传感器的中间引脚连接到 Arduino 的 A0，引脚左侧连接到 +5V 电源轨，右侧连接到 GND 电源轨，如下表所示。
- en: '| **LM35 SENSOR** | **ARDUINO** |'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LM35 传感器** | **Arduino** |'
- en: '| --- | --- |'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Left | +5V |'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 左侧 | +5V |'
- en: '| Center | A0 |'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 中间 | A0 |'
- en: '| Right | GND |'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 右侧 | GND |'
- en: Make sure your setup matches the circuit diagram shown in Figure 14-2, and upload
    the code in “[The Sketch](ch14.xhtml#ch00lev1sec58)” on [page 118](ch14.xhtml#page_118).
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的设置与图 14-2 中显示的电路图匹配，并上传在 [第 118 页](ch14.xhtml#page_118) 的“[程序代码](ch14.xhtml#ch00lev1sec58)”。
- en: '**FIGURE 14-1:** The circuit diagram for the digital thermometer'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 14-1：** 数字温度计的电路图'
- en: '![Image](../images/f14-01.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/f14-01.jpg)'
- en: '**THE SKETCH**'
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序代码**'
- en: The sketch uses the LiquidCrystal library to display a value on the screen according
    to what the LM35 sensor detects. The LM35 sensor sends a reading to Arduino pin
    A0, which is read as voltage. The sketch converts the voltage reading to a temperature
    value in Celsius, and then it uses a couple of calculations to show the final
    reading in Fahrenheit. The sketch updates and displays the reading every second.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序使用 LiquidCrystal 库根据 LM35 传感器检测到的值在屏幕上显示结果。LM35 传感器向 Arduino 的 A0 引脚发送读取值，该值以电压形式读取。程序将电压值转换为摄氏温度，然后使用一系列计算将最终结果以华氏温标显示。程序每秒更新并显示温度值。
- en: '#include <LiquidCrystal.h> // Call the LCD library'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '#include <LiquidCrystal.h> // 调用 LCD 库'
- en: '#define sensor A0 // Pin connected to LM35 sensor (A0)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '#define sensor A0 // 连接到 LM35 传感器的引脚（A0）'
- en: int Vin; // Reads the value from the Arduino pin
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: int Vin; // 从 Arduino 引脚读取的值
- en: float Temperature; // Receives the voltage value converted to temp
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: float Temperature; // 接收转换后的温度电压值
- en: float TF; // Receives the converted value in °F
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: float TF; // 接收转换后的华氏温度值（°F）
- en: LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // Pins connected the LCD
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: LiquidCrystal lcd(12, 11, 5, 4, 3, 2); // LCD 连接引脚
- en: void setup() {
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: void setup() {
- en: lcd.begin(16, 2); // The display is 16x2
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: lcd.begin(16, 2); // 显示屏为 16x2
- en: 'lcd.print("Temperature: "); // Sends text to the LCD'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'lcd.print("Temperature: "); // 将文字发送到 LCD 屏幕'
- en: '}'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: void loop() {
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: void loop() {
- en: // Reads the A0 pin and stores the value in Vin
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: // 读取 A0 引脚并存储值到 Vin
- en: Vin = analogRead (sensor);
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Vin = analogRead (sensor);
- en: // Converts voltage value to temperature and
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: // 将电压值转换为温度，并
- en: // stores value in Temperature (in °C)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: // 存储温度值（单位：°C）
- en: Temperature = (500 * Vin) / 1023;
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Temperature = (500 * Vin) / 1023;
- en: TF = ((9 * Temperature) / 5) + 32; // Changes °C to °F
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: TF = ((9 * Temperature) / 5) + 32; // 将摄氏度转换为华氏度
- en: lcd.setCursor(0, 1); // Move cursor of LCD to next line
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: lcd.setCursor(0, 1); // 将光标移到 LCD 的下一行
- en: lcd.print(TF); // Display the temperature on the LCD screen
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: lcd.print(TF); // 在 LCD 屏幕上显示温度
- en: lcd.print(" F"); // Write F for the Fahrenheit scale
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: lcd.print(" F"); // 在显示器上写入 F，表示华氏温标
- en: delay(1000); // Wait for a second before reading the pin again
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: delay(1000); // 等待一秒钟再读取引脚
- en: '}'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '**TROUBLESHOOTING**'
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**故障排除**'
- en: '**Q.** *Nothing is displayed on the LCD screen.*'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**问：** *LCD 屏幕上没有显示任何内容。*'
- en: • Make sure you’ve connected power to the breadboard rails and that the connections
    match the tables given earlier.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: • 确保你已经将电源连接到面包板电源轨，并且连接符合前面给出的表格。
- en: • Turn the potentiometer to change the contrast of the screen until you see
    text.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: • 调整电位器以改变屏幕的对比度，直到显示出文字。
- en: • If the screen has garbled messages on it, you probably haven’t wired it up
    correctly; recheck your wiring against Figure 14-2.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: • If the value shown seems too high, make sure the LM35 sensor is firmly inserted
    in the breadboard and allow a moment for the reading to stabilize.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '**15'
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bomb Decoder Game**
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll build a code-breaking bomb-decoding game. We’ll use an
    LCD screen and a keypad to give the players instructions and take input.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0119-01.jpg)![Image](../images/p0120-01.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '**HD44780 16×2 LCD screen**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '**10k-ohm potentiometer**'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '**Piezo sounder**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '**3×4 membrane keypad**'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '**3 220-ohm resistors**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '**Red LED**'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '**Yellow LED**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '**Green LED**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '**LiquidCrystal**'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '**Keypad**'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '**Tone**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you power up the Arduino, one player enters a four-digit code to start
    the bomb timer. They give the timer to another player, who presses the * button
    to begin decoding the bomb—this player (the “defuser”) must crack the code entered
    by the first player to defuse the bomb in time. If the defuser presses a wrong
    key, they can press # to delete their input and start again. If they enter the
    wrong code or the timer reaches zero, the bomb detonates and they lose.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: During the game, the yellow LED flashes and the piezo sounder beeps in time
    to the countdown. The LCD screen displays the countdown and code input. When the
    bomb detonates, all the LEDs flash and the piezo sounds an explosion.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: A good way to take this game further would be to ask the defuser four questions,
    each giving the defuser one digit of the bomb code. The defuser has a set time
    to answer the questions and input the four-digit code. Answer incorrectly or too
    late, and the bomb explodes!
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If required, prepare the LCD screen by soldering the header pins as described
    in “[Preparing the LCD Screen](ch13.xhtml#ch00lev1sec52)” on [page 109](ch13.xhtml#page_109).
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place your LCD screen in the breadboard, inserting the header pins into the
    breadboard holes. Also place the potentiometer in the breadboard, and use the
    breadboard and jumper wires to connect your LCD screen, Arduino, and potentiometer
    as shown in the following table. There are multiple GND connections, so use the
    breadboard rail to make those connections to the Arduino GND pin.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LCD SCREEN** | **ARDUINO** |'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 VSS | GND |'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 VDD | +5V |'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 VO contrast | Potentiometer center pin |'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 RS | Pin 7 |'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 R/W | GND |'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 Enable | Pin 8 |'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 D0 | No connection |'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '|  8 D1  | No connection |'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 D2 | No connection |'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 D3 | No connection |'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 D4 | Pin 10 |'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 D5 | Pin 11 |'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 D6 | Pin 12 |'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 D7 | Pin 13 |'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 A BcL+ | +5V |'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 K BcL– | GND |'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: You should have already connected the center pin of the 10k-ohm potentiometer
    to LCD pin 3 (VO). Now connect one of the outer pins to GND and the other to +5V,
    as shown in [Figure 15-1](ch15.xhtml#ch15fig1). This controls the contrast of
    your LCD screen.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该已经将 10k 欧姆电位器的中间引脚连接到 LCD 引脚 3（VO）。现在将外侧的一个引脚连接到 GND，另一个引脚连接到 +5V，如[图 15-1](ch15.xhtml#ch15fig1)所示。这控制
    LCD 屏幕的对比度。
- en: '**FIGURE 15-1:** The potentiometer controls the contrast of your LCD screen.'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 15-1：** 电位器控制 LCD 屏幕的对比度。'
- en: '![Image](../images/f15-01.jpg)'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f15-01.jpg)'
- en: Looking at the keypad head-on, as in [Figure 15-2](ch15.xhtml#ch15fig2), the
    pins are numbered 1–7 from left to right. Connect the keypad pins as shown in
    the following table.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从正面看键盘，如[图 15-2](ch15.xhtml#ch15fig2)所示，按键引脚从左到右编号为 1–7。按照以下表格连接键盘引脚。
- en: '**FIGURE 15-2:** The 3×4 numeric keypad with seven pin connections'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 15-2：** 具有七个引脚连接的 3×4 数字键盘'
- en: '![Image](../images/f15-02.jpg)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f15-02.jpg)'
- en: '| **KEYPAD** | **ARDUINO** |'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **键盘** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Pin 1 | Pin 5 |'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 1 | 引脚 5 |'
- en: '| Pin 2 | Pin A5 |'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 2 | 引脚 A5 |'
- en: '| Pin 3 | Pin A4 |'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 3 | 引脚 A4 |'
- en: '| Pin 4 | Pin A2 |'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 4 | 引脚 A2 |'
- en: '| Pin 5 | Pin A1 |'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 5 | 引脚 A1 |'
- en: '| Pin 6 | Pin A0 |'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 6 | 引脚 A0 |'
- en: '| Pin 7 | Pin A3 |'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 7 | 引脚 A3 |'
- en: Connect the piezo sounder’s red wire directly to Arduino pin 9 and its black
    wire to Arduino GND.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将蜂鸣器的红色电线直接连接到 Arduino 引脚 9，黑色电线连接到 Arduino GND。
- en: '| **PIEZO SOUNDER** | **ARDUINO** |'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **蜂鸣器** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Red wire | Pin 9 |'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色电线 | 引脚 9 |'
- en: '| Black wire | GND |'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黑色电线 | GND |'
- en: Place the green LED in the breadboard, connecting the short, negative leg to
    the negative breadboard rail via a 220-ohm resistor. Connect the green LED’s long,
    positive leg to pin 2\. Do the same with the yellow LED to pin 3 and the red LED
    to pin 4, as shown in [Figure 15-3](ch15.xhtml#ch15fig3) and the table that follows.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将绿色 LED 放置在面包板上，短的负极腿通过220欧姆电阻连接到负电源轨。将绿色 LED 的长正极腿连接到引脚 2。同样，将黄色 LED 连接到引脚
    3，将红色 LED 连接到引脚 4，如[图 15-3](ch15.xhtml#ch15fig3)所示，以及下面的表格。
- en: '**FIGURE 15-3:** Connect the LEDs to the Arduino via a 220-ohm resistor.'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 15-3：** 通过220欧姆电阻将 LED 连接到 Arduino。'
- en: '![Image](../images/f15-03.jpg)'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f15-03.jpg)'
- en: '| **LEDS** | **ARDUINO** |'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED** | **ARDUINO** |'
- en: '| --- | --- |'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Negative legs | GND |'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 负极腿 | GND |'
- en: '| Green positive leg | Pin 2 via 220-ohm resistor |'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 绿色正极 | 通过220欧姆电阻连接至引脚 2 |'
- en: '| Yellow positive leg | Pin 3 via 220-ohm resistor |'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 黄色正极 | 通过220欧姆电阻连接至引脚 3 |'
- en: '| Red positive leg | Pin 4 via 220-ohm resistor |'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 红色正极 | 通过220欧姆电阻连接至引脚 4 |'
- en: Connect the positive and negative breadboard power rails to +5V and GND, respectively.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将面包板上的正负电源轨分别连接到 +5V 和 GND。
- en: Make sure your completed project circuit matches [Figure 15-4](ch15.xhtml#ch15fig4),
    remember to add the required libraries to your *Libraries* folder, and then upload
    the code in “[The Sketch](ch15.xhtml#ch00lev1sec63)” on [page 127](ch15.xhtml#page_127).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的完成项目电路与[图 15-4](ch15.xhtml#ch15fig4)相匹配，记得将所需的库添加到你的 *库* 文件夹中，然后上传“[草图](ch15.xhtml#ch00lev1sec63)”中的代码，代码位于[第127页](ch15.xhtml#page_127)。
- en: '**FIGURE 15-4:** The circuit diagram for the bomb decoder game'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 15-4：** 炸弹解码游戏的电路图'
- en: '![Image](../images/f15-04.jpg)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/f15-04.jpg)'
- en: '**PLAYING THE GAME**'
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**玩游戏**'
- en: '[Figure 15-5](ch15.xhtml#ch15fig5) shows the different stages of playing the
    game.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 15-5](ch15.xhtml#ch15fig5) 展示了游戏不同阶段的过程。'
- en: '**FIGURE 15-5:** Playing the game'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 15-5：** 玩游戏'
- en: '![Image](../images/f15-05.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f15-05.jpg)'
- en: Enter the code to set up the bomb.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入代码以设置炸弹。
- en: The bomb confirms the code entered.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 炸弹确认输入的代码。
- en: The timer starts the countdown sequence.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定时器开始倒计时。
- en: The yellow LED flashes in time to the countdown.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 黄色 LED 随着倒计时闪烁。
- en: Pass the keypad to another player (the defuser). They press the * button on
    the keypad, then enter the defuse code.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将键盘交给另一个玩家（解码员）。他们按下键盘上的 * 按钮，然后输入解除炸弹的代码。
- en: The screen does not show the numbers entered to defuse the bomb.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕不显示输入的数字来解除炸弹。
- en: If the correct code is entered, the bomb is defused . . .
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入正确的代码，炸弹解除 . . .
- en: . . . but if not . . . Boom!
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: . . . 但是如果没有 . . . 爆炸！
- en: '**NOTE**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*All libraries and code can be downloaded from* [https://www.nostarch.com/arduinohandbook2/](https://www.nostarch.com/arduinohandbook2/).'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有库和代码可以从* [https://www.nostarch.com/arduinohandbook2/](https://www.nostarch.com/arduinohandbook2/)
    *下载*。'
- en: '**THE SKETCH**'
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch calls on the Keypad, LiquidCrystal, and Tone libraries. LiquidCrystal
    is included in your IDE, but you’ll have to download Keypad and Tone from the
    book’s resources at *[https://www.nostarch.com/arduinohandbook2/](https://www.nostarch.com/arduinohandbook2/)*
    and save them in your *Libraries* folder for the Arduino (see the primer for details
    on how to do that if you’re unsure).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: First the sketch defines the timer duration, password length, LED pins, and
    keypad. It requests a code input from the first player by displaying “Enter Code:”
    and then stores that value as the bomb defusal code. When the second player (the
    defuser) presses *, the timer starts and waits for a code to be entered, and the
    yellow LED flashes in time to the countdown. If the code the defuser enters does
    not match the defusal code, the text “The Bomb Has Exploded!” displays on the
    screen and the LEDs and piezo indicate an explosion. If the defuser’s input is
    correct, the timer stops, the green LED lights, and the message “Bomb Defused”
    displays on the screen. The bomb will also explode if the timer reaches zero with
    no input. When the game ends, the code resets, ready for another game.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: // Original code by Joey Meyer and Chase Cooley
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: // and used with kind permission
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Keypad.h>'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '#include <LiquidCrystal.h>'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Tone.h>'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Tone tone1;
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: int Scount = 10; // Change this to the number of seconds to start from
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: int Mcount = 5;  // Change this to the number of minutes to start from
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: int Hcount = 0;  // Count hours
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: int DefuseTimer = 0; // Set timer to 0
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: long secMillis = 0; // Store last time for second add
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: long interval = 1000; // Interval for seconds
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: char password[4]; // Number of characters in password
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: int currentLength = 0; // Defines number currently writing
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: int i = 0;
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: char entered[4];
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: int ledPin = 4;  // Red LED
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: int ledPin2 = 3; // Yellow LED
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: int ledPin3 = 2; // Green LED
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: // The pins we use on the LCD
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: LiquidCrystal lcd(7, 8, 10, 11, 12, 13);
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: const byte ROWS = 4; // Four rows
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: const byte COLS = 3; // Three columns
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: char keys[ROWS][COLS] = {
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '{''1'', ''2'', ''3''},'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '{''4'', ''5'', ''6''},'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '{''7'', ''8'', ''9''},'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '{''*'', ''0'', ''#''}'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: byte rowPins[ROWS] = {5, A5, A4, A2}; // Connect to the row pinouts
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: // of the keypad
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: byte colPins[COLS] = {A1, A0, A3}; // Connect to the column pinouts
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: // of the keypad
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(ledPin, OUTPUT);  // Sets the digital pin as output
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(ledPin2, OUTPUT); // Sets the digital pin as output
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(ledPin3, OUTPUT); // Sets the digital pin as output
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: tone1.begin(9);
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: lcd.begin(16, 2);
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Serial.begin(9600);
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0,0);
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'lcd.print("Enter Code: ");'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: while (currentLength < 4) {
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(currentLength + 6, 1);
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: lcd.cursor();
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: char key = keypad.getKey();
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: key == NO_KEY;
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: if (key != NO_KEY) {
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: if ((key != '*')&&(key != '#')) {
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(key);
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: password[currentLength] = key;
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: currentLength++;
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_C6, 200);
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: if (currentLength == 4) {
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: delay(500);
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: lcd.noCursor();
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: lcd.home();
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: 'lcd.print("You''ve Entered: ");'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(6, 1);
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(password[0]);
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(password[1]);
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(password[2]);
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(password[3]);
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_E6, 200);
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: delay(3000);
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: currentLength = 0;
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: void loop() {
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: timer();
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: char key2 = keypad.getKey(); // Get the key
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: if (key2 == '*') {
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0, 0);
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: 'lcd.print("Code: ");'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: while (currentLength < 4) {
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: timer();
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: char key2 = keypad.getKey();
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: if (key2 == '#') {
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: currentLength = 0;
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0, 0);
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'lcd.print("Code: ");'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: else if (key2 != NO_KEY) {
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(currentLength + 7, 0);
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: lcd.cursor();
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(key2);
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: entered[currentLength] = key2;
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: currentLength++;
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_C6, 200);
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: lcd.noCursor();
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(currentLength + 6, 0);
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("*");
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(currentLength + 7, 0);
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: lcd.cursor();
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: if (currentLength == 4) {
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: if (entered[0] == password[0] && entered[1] == password[1] && entered[2] ==
    password[2] &&entered[3] == password[3]) {
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: lcd.noCursor();
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: lcd.home();
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Bomb Defused");
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: currentLength = 0;
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin3, HIGH);
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: delay(2500);
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0, 1);
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Reset the Bomb");
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: delay(1000000);
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: else {
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: lcd.noCursor();
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: lcd.home();
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Wrong Password!");
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: if (Hcount > 0) {
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Hcount = Hcount - 1;
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: if (Mcount > 0) {
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: Mcount = Mcount - 59;
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: if (Scount > 0) {
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Scount = Scount - 59;
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: delay(1500);
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: currentLength = 0;
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: void timer() {
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: Serial.print(Scount);
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println();
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: if (Hcount <= 0) { // If timer reaches 0, LCD displays explosion
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: if ( Mcount < 0 ) {
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: lcd.noCursor();
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: lcd.clear();
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: lcd.home();
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("The Bomb Has ");
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0, 1);
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Exploded!");
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: while (Mcount < 0) {
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin, HIGH); // Sets the LED on
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_A2, 90);
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin, LOW); // Sets the LED off
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_A2, 90);
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin2, HIGH); // Sets the LED on
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_A2, 90);
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin2, LOW); // Sets the LED off
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_A2, 90);
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin3, HIGH); // Sets the LED on
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_A2, 90);
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin3, LOW); // Sets the LED off
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_A2, 90);
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(0, 1); // Sets cursor to 2nd line
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Timer:");
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: if (Hcount >= 10) {
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(7, 1);
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(Hcount);
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: if (Hcount < 10) {
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(7, 1);
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: lcd.write("0");
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(8, 1);
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(Hcount);
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(":");
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: if (Mcount >= 10) {
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(10, 1);
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(Mcount);
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: if (Mcount < 10) {
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(10, 1);
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: lcd.write("0");
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(11, 1);
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(Mcount);
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print (":");
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: if (Scount >= 10) {
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(13, 1);
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(Scount);
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: if (Scount < 10) {
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(13, 1);
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: lcd.write("0");
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(14, 1);
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(Scount);
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: if (Hcount < 0) {
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: Hcount = 0;
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: if (Mcount < 0) {
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Hcount --;
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: Mcount = 59;
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: if (Scount < 1) { // If 60 do this operation
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Mcount --; // Add 1 to Mcount
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Scount = 59; // Reset Scount
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: if (Scount > 0) { // Do this operation 59 times
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: unsigned long currentMillis = millis();
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: if (currentMillis - secMillis > interval) {
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: tone1.play(NOTE_G5, 200);
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: secMillis = currentMillis;
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: Scount --; // Add 1 to Scount
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin2, HIGH); // Sets the LED on
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: delay(10); // Waits for a second
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledPin2, LOW); // Sets the LED off
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: delay(10); // Waits for a second
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  id: totrans-521
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *Nothing is displayed on the LCD screen.*'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure you’ve connected power to the breadboard rails and the connections
    match the tables in this chapter.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: • Turn the potentiometer to change the contrast of the screen until you see
    text.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: • If the screen has garbled messages on it, you haven’t wired it up correctly;
    recheck your wiring against the circuit diagram in [Figure 15-4](ch15.xhtml#ch15fig4).
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *The LEDs do not light when expected.*'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: • Check your wiring against the circuit diagram in [Figure 15-4](ch15.xhtml#ch15fig4)
    and ensure that the short leg of the LED is connected to the ground rail of the
    breadboard.
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: • It’s easy to forget to add power to the breadboard rails, so make sure you
    connect the ground and power rails on either side of the breadboard to the Arduino
    with a jumper wire.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: • Check that your LEDs and resistors are firmly inserted into the breadboard
    and they line up with one another.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: • If the wrong LED lights up, you’ve probably connected to the wrong pin numbers
    by mistake, so just change them around.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *The piezo sounder does not make a noise.*'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: • The positive red wire of the sounder should be connected to pin 9 and the
    black ground wire to GND. If the sounder does still not make a noise, try replacing
    it with another one.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *When the keypad is pressed, the numbers are incorrect or do not register.*'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure the connections of the keypad to the Arduino match the circuit diagram
    in [Figure 15-4](ch15.xhtml#ch15fig4) exactly.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: • The configuration is set up specifically for this project’s 3×4 numeric keypad,
    so if your keypad is different, check the data sheet to find out which pins you
    need to connect.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '**16'
  id: totrans-536
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Serial LCD Screen**
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll take a 16×2 character LCD screen and a serial module to
    create a serial LCD that’s controlled by only two wires.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0134-01.jpg)![Image](../images/p0135-01.jpg)'
  id: totrans-539
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '**Female-to-male jumper wires**'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: '**HD44780 16×2 LCD screen**'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '**Serial LCD screen module**'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '**Wire**'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '**LiquidCrystal_I2C**'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'LCD screens are very useful in projects, but they use up a lot of pins on the
    Arduino. This means that if you’re incorporating them into a more complex project,
    you might run out of pins. Thankfully there is a solution: use a *serial* LCD
    screen. Serial LCDs use the communication protocol *I2C*, which stands for *Inter-Integrated
    Circuit*, and differ from normal 16×2 LCD screens in that they can be controlled
    by your Arduino with only power and two pins.'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: Serial LCD screens usually come in kit form and require you to solder header
    pins, which I’ll cover later in the chapter. You’ll usually receive the 16×2 LCD
    screen and the serial module separately, as shown in [Figure 16-1](ch16.xhtml#ch16fig1).
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 16-1:** 16×2 LCD screen and serial module'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f16-01.jpg)'
  id: totrans-552
  prefs: []
  type: TYPE_IMG
- en: '**PREPARING THE SERIAL LCD SCREEN**'
  id: totrans-553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The serial module has a strip of 16 header pins already attached to one side.
    Turn the LCD screen over and you’ll see 16 corresponding holes, as shown in [Figure
    16-2](ch16.xhtml#ch16fig2).
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 16-2:** The reverse side of the LCD screen'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f16-02.jpg)'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Place the serial controller header pins into those holes, as shown in [Figure
    16-3](ch16.xhtml#ch16fig3).
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 16-3:** Insert the serial module into the LCD screen holes.'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f16-03.jpg)'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Carefully add a small amount of solder to each of the pins to make a connection
    and hold the serial monitor to the screen. Turn to the primer for a quick soldering
    guide.
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  id: totrans-561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your serial LCD screen has an assigned address that your Arduino needs in order
    to communicate with it. The addresses differ depending on the make, so you need
    to check the address of your specific screen, as you’ll need it for the sketch
    later. To check the address, connect the LCD screen to your Arduino and run a
    quick sketch to scan the module—or you could also refer to the data sheet for
    your screen.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: Connect your female-to-male jumper wires to the four pins on the controller
    for the LCD screen.
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wire up the serial LCD screen to the Arduino with GND to GND, VCC to +5V, SDA
    to Arduino pin A4, and SCL to Arduino pin A5, as shown in the following table
    and the circuit diagram in [Figure 16-4](ch16.xhtml#ch16fig4).
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERIAL LCD SCREEN** | **ARDUINO** |'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SDA | Pin A4 (SDA) |'
  id: totrans-569
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SCL | Pin A5 (SCL) |'
  id: totrans-570
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 16-4:** The circuit diagram for the serial LCD screen'
  id: totrans-571
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f16-04.jpg)'
  id: totrans-572
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Upload the following sketch to the Arduino. We’ll get the address in *hexadecimal*,
    a number system that uses letters and numbers in an abbreviated form to represent
    a much larger number.
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '#include <Wire.h>'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void setup() {
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Wire.begin();
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.begin(9600);
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.println("I2C Scanner");
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-579
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void loop() {
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: byte error, address;
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: int nDevices;
  id: totrans-582
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.println("Scanning...");
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nDevices = 0;
  id: totrans-584
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: for (address = 1; address < 127; address++)  {
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Wire.beginTransmission(address);
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: error = Wire.endTransmission();
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (error == 0) {
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.print("I2C device found at address 0x");
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (address < 16)
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.print("0");
  id: totrans-591
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.print(address, HEX);
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.println(" !");
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: nDevices++;
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else if (error == 4) {
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.print("Unknown error at address 0x");
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (address < 16)
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.print("0");
  id: totrans-599
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.println(address, HEX);
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-602
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if (nDevices == 0)
  id: totrans-603
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.println("No I2C devices found\n");
  id: totrans-604
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: else
  id: totrans-605
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Serial.println("done\n");
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: delay(5000); // Wait 5 seconds for next scan
  id: totrans-607
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-608
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The sketch scans for all addresses on the Arduino’s I2C bus and displays the
    output in the Serial Monitor, as shown in [Figure 16-5](ch16.xhtml#ch16fig5).
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 16-5:** The hexadecimal number of your module will be shown in the
    IDE Serial Monitor.'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f16-05.jpg)'
  id: totrans-611
  prefs: []
  type: TYPE_IMG
- en: The address is the number that comes after the 0x. In my case that is 27, so
    I need to make a note of 0x27\. You’ll use this address in the final sketch.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: '**THE SKETCH**'
  id: totrans-613
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This sketch calls on the Wire and LiquidCrystal_I2C libraries. The Wire library
    is included in the Arduino IDE, but you will need to install the LiquidCrystal_I2C
    library by downloading it from *[https://www.nostarch.com/arduinohandbook2/](https://www.nostarch.com/arduinohandbook2/)*.
    The libraries allow the Arduino to control the module using serial communication
    via just the SDA and SCL pins.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: Change the code at ➊ so that the `0x27` is replaced with the address you just
    noted from your scan in the test sketch.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Wire.h> // Call the wire library'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: '#include <LiquidCrystal_I2C.h> // Call the I2C library'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: LiquidCrystal_I2C lcd(0x27➊,16,2); // Set LCD address to 0x27 for a
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: // 16-character and 2-line display
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: lcd.begin(); // Initialize the lcd
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: lcd.backlight();
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print("Arduino Handbook"); // Print a message to the LCD
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: void loop() { // Loop around again
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: There is a potentiometer built into the module to control the contrast of the
    LCD screen, shown in [Figure 16-6](ch16.xhtml#ch16fig6). Turn this carefully with
    a small screwdriver until the contrast on the screen looks right.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 16-6:** The small blue box on the back of the module is a potentiometer
    to control the contrast.'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f16-06.jpg)'
  id: totrans-629
  prefs: []
  type: TYPE_IMG
- en: '**TROUBLESHOOTING**'
  id: totrans-630
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The code compiles, but nothing shows on the screen.*'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: • Double-check that the SDA and SCL pins are connected to the correct Arduino
    pins. If the LCD screen is lit but shows no characters, carefully turn the small
    potentiometer at the back of the module until the letters appear.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: • If the screen still shows nothing and all the connections are correct, it
    may be that the solder on the header pins is not making a clean connection or
    you have soldered more than one pin together. Heat the area again with your soldering
    iron to melt the solder, and then use a solder sucker to remove any excess and
    resolder the header pins.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: '**17'
  id: totrans-634
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultrasonic People Counter**
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: This project teaches you how to use the HC-SR04 ultrasonic sensor to sense when
    people pass and then show that count on a serial LCD screen.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0141-01.jpg)![Image](../images/p0142-01.jpg)'
  id: totrans-637
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '**Mini-breadboard**'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires, male-to-male and female-to-male**'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: '**LED**'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: '**Serial LCD screen module**'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '**220-ohm resistor**'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: '**HC-SR04 ultrasonic sensor**'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: '**NewPing**'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: '**Wire**'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: '**LiquidCrystal_I2C**'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-650
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: People counters are often used in shops or tourist attractions to count the
    number of visitors, but you could also use one to record the volume of traffic
    on a highway or in a parking lot, or to count how many times someone entered your
    room while you were out!
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: The ultrasonic sensor we’ll use is the HC-SR04, shown in [Figure 17-1](ch17.xhtml#ch17fig1),
    which you first saw in Project 13\. It uses an ultrasonic signal, or *ping*, to
    calculate the distance between the sensor and an object. In this project we’ll
    use this function to count every time someone or something passes in front of
    the sensor. An LED will flash when a count is registered, and the serial LCD screen
    will show the total number counted.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 17-1:** The HC-SR04 ultrasonic sensor uses a ping to calculate distances.'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f17-01.jpg)'
  id: totrans-654
  prefs: []
  type: TYPE_IMG
- en: '**THE BUILD**'
  id: totrans-655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the female-to-male jumper wires to connect the HC-SR04 ultrasonic sensor
    to the Arduino with the VCC pin to Arduino +5V, GND to GND, and Trig and Echo
    to pins 7 and 8 on the Arduino, respectively, as shown in the following table
    and in [Figure 17-2](ch17.xhtml#ch17fig2). Use the mini-breadboard for multiple
    connections.
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **ULTRASONIC SENSOR** | **ARDUINO** |'
  id: totrans-657
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-658
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Trig | Pin 7 |'
  id: totrans-660
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Echo | Pin 8 |'
  id: totrans-661
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  id: totrans-662
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 17-2:** The connections from the ultrasonic sensor'
  id: totrans-663
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f17-02.jpg)'
  id: totrans-664
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure to download the LiquidCrystal I2C and NewPing libraries and add them
    to the relevant folder on your computer (see the primer for guidance). The Wire
    library comes with the Arduino IDE, so you do not need to add it.
  id: totrans-665
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the serial LCD screen to the Arduino as follows, using the mini-breadboard
    to connect to +5V.
  id: totrans-666
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERIAL LCD SCREEN** | **ARDUINO** |'
  id: totrans-667
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-668
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  id: totrans-669
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  id: totrans-670
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SDA | Pin A4 (SDA) |'
  id: totrans-671
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SCL | Pin A5 (SCL) |'
  id: totrans-672
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the LED into the mini-breadboard so that the shorter, negative (GND)
    leg is to the left and the longer, positive (+5V) leg is to the right, as shown
    in the following table and in [Figure 17-3](ch17.xhtml#ch17fig3). Connect the
    220-ohm resistor to the positive leg of the LED, making sure the other leg of
    the resistor straddles the break in the breadboard. Connect this other resistor
    leg to pin 13 on the Arduino. Connect the shorter leg of the LED to GND on the
    Arduino.
  id: totrans-673
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LED** | **ARDUINO** |'
  id: totrans-674
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-675
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  id: totrans-676
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| +5V | Pin 13 via 220-ohm resistor |'
  id: totrans-677
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 17-3:** We use the mini-breadboard to hold the LED and for multiple
    connections to the Arduino +5V.'
  id: totrans-678
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f17-03.jpg)'
  id: totrans-679
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Make sure your final circuit looks like [Figure 17-4](ch17.xhtml#ch17fig4),
    and then upload the code in “[The Sketch](ch17.xhtml#ch00lev1sec72)” on [page
    146](ch17.xhtml#page_146) to the Arduino.
  id: totrans-680
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 17-4:** The circuit diagram for the ultrasonic people counter'
  id: totrans-681
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f17-04.jpg)'
  id: totrans-682
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  id: totrans-683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch begins by calling on the LiquidCrystal I2C, NewPing, and Wire libraries
    to control the serial LCD screen and ultrasonic sensor. Next it defines the ultrasonic
    sensor Trig and Echo pins as Arduino pins 7 and 8, respectively. We set the maximum
    distance for the sensor to read to 200 centimeters (any reading beyond 200 centimeters
    is ignored). Then we define pin 13 on the Arduino as the LED, which will be our
    counting indicator, and create variables to hold the distance and number of people.
    We create a `count` state so the Arduino can determine a valid record, and then
    we define the type of LCD screen. We initiate the LCD screen so that `People:`
    is printed to the screen, and set the LED pin as an output.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: The loop section sends a ping from the sensor and if the ping that’s returned
    is from a distance of more than 100 centimeters, the space in front of the sensor
    is considered empty and nothing is registered. If the distance recorded is less
    than 100 centimeters, it means something is within range in front of the sensor.
    In order for the `people:` variable to increment, someone has to move in front
    of the sensor, then out of the way. The sensor will keep counting every time a
    valid register is received, and the latest total is shown on the LCD screen.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: The sensor could be placed to one side of an entrance, facing across the threshold,
    so as someone enters the sensor picks it up and registers a count. If the sensor
    is pointing toward a wall that’s less than 100 centimeters away, you’ll need to
    change the following line of code to a distance less than the distance to the
    wall; otherwise, the sensor will record a count every time the wall is detected.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: if (distance < 100 && distance != 0 && !count)
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the full code:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: '#include <LiquidCrystal_I2C.h> // Call on the libraries'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: '#include <NewPing.h>'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Wire.h>'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '#define TRIGGER_PIN 7  // Ultrasonic sensor trig to Arduino pin 7'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '#define ECHO_PIN 8     // Ultrasonic sensor echo to Arduino pin 8'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: '#define MAX_DISTANCE 200'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE);
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: int LEDPin = 13; // Set LED to pin 13
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: int distance; // Variable for distance
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: int people = 0; // Variable for number of people
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: boolean count = false; // State for counting
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: LiquidCrystal_I2C lcd(0x27, 16, 2);
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: void setup() { // Run once to set up the LCD screen and LED
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: lcd.begin();
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: lcd.backlight();
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(LEDPin, OUTPUT); // Set the LED as an output
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: 'lcd.print("People:"); // Print People: to the LCD screen'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: void loop() { // This loops forever to check for number of people
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: delay(50);
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: distance = sonar.ping_cm(); // Ping every 50 milliseconds
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: // If more than 100 cm away, don't count
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: if (distance > 100 && count) {
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: count = false;
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(LEDPin, LOW);
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: // If less than 100 cm away, count 1
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: if (distance < 100 && distance != 0 && !count) {
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: count = true;
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: people ++; // Keep adding 1 per count
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(LEDPin, HIGH);
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: lcd.setCursor(10, 0);
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: lcd.print(people); // Print number of people to LCD screen
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  id: totrans-724
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The code compiles, but nothing shows on the screen.*'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: • Double-check that the SDA and SCL pins are connected to the correct Arduino
    pins.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: • If the LCD screen is lit up but nothing shows, carefully turn the small potentiometer
    at the back of the module to change the contrast until the letters appear.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *The sensor does not register a count or the LED does not light when
    expected.*'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure that the ultrasonic sensor trigger pin is connected to Arduino pin
    7 and the Echo pin to Arduino pin 8, and that power is connected to GND and +5V.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: • If a count is registered and the LED does not light, recheck that the short
    leg of the LED is connected to GND and the long leg to +5V. The resistor should
    straddle the break in the breadboard and be connected to the LED’s long leg on
    one side and Arduino pin 13 on the other.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: • Remember that the positioning of the sensor is important. If the distance
    to a fixed object (like a wall) is less than the distance in the sketch, the count
    will be incorrect.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '• Your device may have a different address than the one we’ve used here. To
    check the address of your device, use the I2C scanner sketch available on the
    Arduino website (*[http://playground.arduino.cc/Main/I2cScanner](http://playground.arduino.cc/Main/I2cScanner)*).
    Run the sketch with your device attached to the Arduino and open the IDE Serial
    Monitor, and you should see the address of your device. Update the following line
    in this sketch with the address shown:'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: LiquidCrystal_I2C lcd(0x27,16,2);
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: '**18'
  id: totrans-734
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nokia 5110 LCD Screen Pong Game**
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: This project shows you how to connect a Nokia 5110 LCD screen to your Arduino
    to recreate a *Pong*-style arcade game.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0149-01.jpg)![Image](../images/p0150-01.jpg)'
  id: totrans-737
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: '**Nokia 5110 LCD screen**'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: '**4 10k-ohm resistors**'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: '**2 1k-ohm resistors**'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: '**2 50k-ohm potentiometers**'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-746
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nokia 5110 LCD screens were used for all Nokia phones a few years back, so you
    should find plenty available online. We’ll wire one up to the Arduino and create
    a simple *Pong*-style game by adding some potentiometers as controllers.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: '*See Project 13 for instructions on soldering header pins, and see the primer
    for general soldering instructions if you haven’t soldered before.*'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: 'The screen is 84×48 pixels, which, with spaces between the characters so they
    aren’t touching, gives us a 12×6-character screen. The screen works in the same
    way as the LCD screen in Project 13: by sending current through the liquid crystal
    from the Arduino to make certain pixels opaque and form letters or images.'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: Most screens come with the header pins separate for ease of transport, so you
    may need to solder them in place if you want to plug the screen into a breadboard.
    You’ll need to solder a strip of eight header pins into the row of holes on one
    side of the screen, as you can see in [Figure 18-1](ch18.xhtml#ch18fig1).
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 18-1:** The reverse of the Nokia 5110 LCD screen showing the pin connections'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f18-01.jpg)'
  id: totrans-753
  prefs: []
  type: TYPE_IMG
- en: This project connects to +3.3V on the Arduino, rather than +5V.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  id: totrans-755
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the Nokia 5110 screen into the breadboard.
  id: totrans-756
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Nokia screen has eight pins. Insert a 10k-ohm resistor for Nokia pins 1,
    3, 4, and 5, making sure they straddle the center break. Insert a 1k-ohm resistor
    for Nokia pins 2 and 7, as shown in [Figure 18-2](ch18.xhtml#ch18fig2).
  id: totrans-757
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 18-2:** Insert the resistors for the Nokia LCD screen as shown here.'
  id: totrans-758
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f18-02.jpg)'
  id: totrans-759
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**WARNING**'
  id: totrans-760
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*It’s really important to use the +3.3V power from the Arduino for the Nokia
    5110 screen and not +5V for this project; otherwise, you will damage the screen.*'
  id: totrans-761
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use jumper wires to make the connections from the Nokia screen to Arduino pins
    3–7 and to the breadboard power rails. Make sure to add the right value resistor
    to the correct pin, as shown in the following table. Some breakout boards may
    have the pins in different locations, so match the pin names on the Nokia screen
    with the Arduino pin.
  id: totrans-762
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **NOKIA 5110 SCREEN** | **RESISTOR** | **ARDUINO** |'
  id: totrans-763
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-764
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 RESET | 10k-ohm | Pin 6 |'
  id: totrans-765
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 CE | 1k-ohm | Pin 7 |'
  id: totrans-766
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 DC | 10k-ohm | Pin 5 |'
  id: totrans-767
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 DIN | 10k-ohm | Pin 4 |'
  id: totrans-768
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 CLK | 10k-ohm | Pin 3 |'
  id: totrans-769
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 VCC | None | +3.3V |'
  id: totrans-770
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 Light | 1k-ohm | GND |'
  id: totrans-771
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 GND | None | GND |'
  id: totrans-772
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the potentiometers into the breadboard as shown in [Figure 18-3](ch18.xhtml#ch18fig3).
    Connect the center pin of one potentiometer to Arduino A0 and the center pin of
    the other potentiometer to Arduino A1\. Connect an outer pin of each potentiometer
    to the +5V rail of the breadboard and the other outer pins to the GND rail.
  id: totrans-773
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the power rails of the breadboard to +5V and GND on the Arduino (this
    is for the potentiometers only).
  id: totrans-774
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that your setup matches [Figure 18-3](ch18.xhtml#ch18fig3), and upload
    the code in “[The Sketch](ch18.xhtml#ch00lev1sec76)” below.
  id: totrans-775
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 18-3:** The circuit diagram for the Nokia 5110 LCD Screen *Pong* Game'
  id: totrans-776
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f18-03.jpg)'
  id: totrans-777
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  id: totrans-778
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The game starts with two bars on opposite sides of the screen and a ball bouncing
    between them. The object of the game is to use the potentiometers to move the
    bars like paddles, hitting the ball back and forth to stop it from going out of
    the play (beyond the screen perimeter). The ball bounces off the bars and gradually
    gets faster and faster. The game is over when the ball goes beyond the screen
    limit, at which point the display will invert and the game will start over again.
    Note that the ball can appear quite faint the faster it moves, due to the limitation
    of the screen graphics.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the sketch defines the pins connected to the Nokia 5110 LCD
    screen. It then defines the size of the screen, which is the area of our game
    that counts as in-play, and the size and starting positions of the bars and ball.
    The potentiometers read the analog signal from Arduino pins A0 and A1 and move
    their corresponding bars onscreen depending on how they’re twisted. The calculations
    that follow determine whether the ball and the bar have met at certain coordinates.
    If they have, the ball bounces back; if they haven’t, it means the bar has missed
    the ball, so the screen inverts and flashes to indicate the game is over.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: // Arduino Pong by Onur Avun and reproduced with kind permission
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: '#define PIN_SCE   7'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: '#define PIN_RESET 6'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: '#define PIN_DC    5'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: '#define PIN_SDIN  4'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: '#define PIN_SCLK  3'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: '#define LCD_C     LOW'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: '#define LCD_D     HIGH'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: '#define LCD_X     84'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: '#define LCD_Y     6'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: int barWidth = 16;
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: int barHeight = 4;
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: int ballPerimeter = 4;
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int bar1X = 0;
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int bar1Y = 0;
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int bar2X = 0;
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: unsigned int bar2Y = LCD_Y * 8 - barHeight;
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: int ballX = 0;
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: int ballY = 0;
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: boolean isBallUp = false;
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: boolean isBallRight = true;
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: byte pixels[LCD_X][LCD_Y];
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: unsigned long lastRefreshTime;
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: const int refreshInterval = 150;
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: byte gameState = 1;
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: byte ballSpeed = 2;
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: byte player1WinCount = 0;
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: byte player2WinCount = 0;
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: byte hitCount = 0;
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: LcdInitialise();
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: restartGame();
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: void loop() {
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: unsigned long now = millis();
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: if (now - lastRefreshTime > refreshInterval) {
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: update();
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: refreshScreen();
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: lastRefreshTime = now;
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: void restartGame() {
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: ballSpeed = 1;
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: gameState = 1;
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: ballX = random(0, 60);
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: ballY = 20;
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: isBallUp = false;
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = true;
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: hitCount = 0;
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: void refreshScreen() {
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: if (gameState == 1) {
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: for (int y = 0; y < LCD_Y; y++) {
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: for (int x = 0; x < LCD_X; x++) {
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: byte pixel = 0x00;
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: int realY = y * 8;
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: // Draw ball if in frame
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: if (x >= ballX && x <= ballX + ballPerimeter -1 && ballY +
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: ballPerimeter > realY && ballY < realY + 8 ) {
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: byte ballMask = 0x00;
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: for (int i = 0; i < realY + 8 - ballY; i++) {
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: ballMask = ballMask >> 1;
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: if (i < ballPerimeter)
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: ballMask = 0x80 | ballMask;
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: pixel = pixel | ballMask;
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: // Draw bars if in frame
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: if (x >= bar1X && x <= bar1X + barWidth -1 && bar1Y +
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: barHeight > realY && bar1Y < realY + 8 ) {
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: byte barMask = 0x00;
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: for (int i = 0; i < realY + 8 - bar1Y; i++) {
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: barMask = barMask >> 1;
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: if (i < barHeight)
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: barMask = 0x80 | barMask;
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: pixel = pixel | barMask;
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: if (x >= bar2X && x <= bar2X + barWidth -1 && bar2Y +
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: barHeight > realY && bar2Y < realY + 8 ) {
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: byte barMask = 0x00;
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: for (int i = 0; i < realY + 8 - bar2Y; i++) {
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: barMask = barMask >> 1;
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: if (i < barHeight)
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: barMask = 0x80 | barMask;
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: pixel = pixel | barMask;
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_D, pixel);
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (gameState == 2) {'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: void update() {
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: if (gameState == 1) {
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: int barMargin = LCD_X - barWidth;
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: int pot1 = analogRead(A0); // Read pots and set bar positions
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: int pot2 = analogRead(A1);
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: bar1X = pot1 / 2 * LCD_X / 512;
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: bar2X = pot2 / 2 * LCD_X / 512;
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: if (bar1X > barMargin) bar1X = barMargin;
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: if (bar2X > barMargin) bar2X = barMargin;
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: // Move the ball now
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
- en: if (isBallUp)
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: ballY -= ballSpeed;
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: ballY += ballSpeed;
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: if (isBallRight)
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: ballX += ballSpeed;
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: ballX -= ballSpeed;
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: // Check collisions
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: if (ballX < 1) {
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = true;
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: ballX = 0;
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: else if (ballX > LCD_X - ballPerimeter - 1) {
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = false;
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: ballX = LCD_X - ballPerimeter;
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: if (ballY < barHeight) {
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: if (ballX + ballPerimeter >= bar1X && ballX <= bar1X + barWidth) {
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
- en: // Ball bounces from bar1
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: isBallUp = false;
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: if (ballX + ballPerimeter / 2 < bar1X + barWidth / 2)
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = false;
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = true;
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: ballY = barHeight;
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: if (++hitCount % 10 == 0 && ballSpeed < 5)
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: ballSpeed++;
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '} else { // Player 2 wins'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: gameState = 2;
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: player2WinCount++;
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: if (ballY + ballPerimeter > LCD_Y * 8 - barHeight) {
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: if (ballX + ballPerimeter >= bar2X && ballX <= bar2X + barWidth) {
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: // Ball bounces from bar2
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
- en: isBallUp = true;
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: if (ballX + ballPerimeter / 2 < bar2X + barWidth / 2)
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = false;
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: isBallRight = true;
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: ballY = LCD_Y * 8 - barHeight - ballPerimeter;
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: if (++hitCount % 10 == 0 && ballSpeed < 5)
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
- en: ballSpeed++;
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: '} else { // Player 1 wins'
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
- en: gameState = 2;
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: player1WinCount++;
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (gameState == 2) {'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: for (int i =0; i < 4; i++) {
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x0D); // LCD in inverse mode.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: delay(300);
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x0C); // LCD in inverse mode.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: delay(300);
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: restartGame();
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: void LcdInitialise(void) {
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(PIN_SCE, OUTPUT);
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(PIN_RESET, OUTPUT);
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(PIN_DC, OUTPUT);
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(PIN_SDIN, OUTPUT);
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(PIN_SCLK, OUTPUT);
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: delay(200);
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(PIN_RESET, LOW);
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: delay(500);
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(PIN_RESET, HIGH);
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x21 );  // LCD Extended Commands
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0xB1 );  // Set LCD Vop (Contrast)
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x04 );  // Set Temp coefficent. //0x04
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x14 );  // LCD bias mode 1:48\. //0x13
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x0C );  // LCD in normal mode.
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x20 );
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x80 );  // Select X Address 0 of the LCD ram
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x40 );  // Select Y Address 0 of the LCD ram
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: LcdWrite(LCD_C, 0x0C );
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: void LcdWrite(byte dc, byte data) {
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(PIN_DC, dc);
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(PIN_SCE, LOW);
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: shiftOut(PIN_SDIN, PIN_SCLK, MSBFIRST, data);
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(PIN_SCE, HIGH);
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  id: totrans-970
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *Nothing is displayed on the LCD screen.*'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure you’ve connected power to the LCD screen direct to the Arduino +3.3V
    power pin and the connections match the tables in this chapter.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure your resistors line up with the correct LCD pins, as well as the
    wires to the Arduino pins.
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: • If the backlight of the LCD screen is lit but there is no image, you may have
    some wires mixed up; they need to match the circuit in [Figure 18-3](ch18.xhtml#ch18fig3)
    exactly.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *When the player turns the potentiometer, one or both of the bars do
    not move.*'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure the potentiometers are connected firmly in the breadboard and that
    the wires connecting to the power rails and Arduino line up with the potentiometer
    pins.
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: • Remember that the potentiometers require +5V power and GND from the Arduino.
    These pins should be hooked up to the breadboard power rails via jumper wires.
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure you also use jumper wires to connect the corresponding power rails
    on either side of the breadboard to each other.
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: '**19'
  id: totrans-979
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OLED Breathalyzer**
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll use the MQ3 alcohol sensor and an OLED LCD screen to make
    a mini-breathalyzer.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0159-01.jpg)![Image](../images/p0160-01.jpg)'
  id: totrans-982
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '**Female-to-male jumper wires**'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: '**Keyes MQ3 alcohol sensor module**'
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: '**OLED monochrome screen (128×64)**'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: '**SPI**'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: '**Wire**'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: '**Adafruit_GFX**'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: '**Adafruit_SSD1306**'
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  id: totrans-993
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MQ3 is part of a family of gas sensors that also includes the MQ2, sensitive
    to methane, butane, and smoke; the MQ4, sensitive to compressed natural gas; the
    MQ6, sensitive to butane and LPG gas; and the MQ7, sensitive to carbon monoxide.
    The MQ3 is sensitive to alcohol and ethanol, so it’s the one we’ll use in our
    breathalyzer.
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: '**DISCLAIMER**'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: '*This project is for amusement only and should not be used to accurately determine
    anyone’s alcohol intake.*'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
- en: The Keyes MQ3 module ([Figure 19-1](ch19.xhtml#ch19fig1)) has the wiring we
    need for this project, including a built-in potentiometer and resistor. The three
    pin connections on the module are OUT, VCC, and GND.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 19-1:** The Keyes MQ3 alcohol sensor module. As with most MQ sensors,
    the module has a small heater inside with an electrochemical sensor used to measure
    the gas level. The value of the reading is sent to the OUT pin, which is then
    read by an analog pin on our Arduino.'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f19-01.jpg)'
  id: totrans-999
  prefs: []
  type: TYPE_IMG
- en: To display the sensor readings, we’ll use an OLED screen ([Figure 19-2](ch19.xhtml#ch19fig2)).
    OLED, which stands for *organic light-emitting diode*, is a light-emitting technology
    composed of a thin, multilayered organic film placed between an anode and cathode.
    When voltage is applied, an image is created through *electroluminescence*, which
    means the screen does not require a backlight. Our OLED screen is an I2C 128×64
    monochrome version, meaning we can control it using only two pins to the Arduino
    and it measures 128 pixels by 64 pixels. This screen uses the same communication
    protocol as our serial LCD in Project 16 and is explained further there.
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 19-2:** 128×64 OLED monochrome screen. When the MQ3 reads the value,
    the Arduino sends a message to the OLED screen indicating whether or not alcohol
    has been detected.'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f19-02.jpg)'
  id: totrans-1002
  prefs: []
  type: TYPE_IMG
- en: '**WARNING**'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: '*As mentioned earlier, the MQ3 uses an internal heater as part of the sensor
    process. This heater can reach 120–140 degrees when powered, so take care when
    handling it when it’s in use.*'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  id: totrans-1005
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you use the sensor for the first time, you need to “burn it in.” This
    process, which simply involves powering it up for a few hours to heat the mechanism
    inside, improves the sensor’s accuracy. To do this, connect the VCC and GND pins
    of the sensor to +5V and GND on your Arduino, respectively, using female-to-male
    jumper wires. When you power the Arduino, it will send the correct voltage to
    the MQ3\. Leave it powered for two to three hours—you may notice a burning smell
    and the sensor will get hot, but this is normal.
  id: totrans-1006
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the sensor is burned in, disconnect the power to the Arduino and connect
    the sensor to the Arduino using the female-to-male jumper wires, with the MQ3’s
    OUT pin connected to Arduino pin A0, and the power and GND still connected as
    before (see the following table).
  id: totrans-1007
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **MQ3 ALCOHOL SENSOR** | **ARDUINO** |'
  id: totrans-1008
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1009
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| OUT | Pin A0 |'
  id: totrans-1010
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  id: totrans-1011
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  id: totrans-1012
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Next, connect the OLED screen to the Arduino as shown in the following table,
    with SCL connected to pin A5, SDA to pin A4, VCC to +3.3V, and GND to GND.
  id: totrans-1013
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **OLED SCREEN** | **ARDUINO** |'
  id: totrans-1014
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-1015
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SCL | Pin A5 |'
  id: totrans-1016
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| SDA | Pin A4 |'
  id: totrans-1017
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +3.3V |'
  id: totrans-1018
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  id: totrans-1019
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: This project requires a number of libraries to work correctly; the SPI and Wire
    libraries are built into the Arduino IDE, but we also need the Adafruit_GFX and
    Adafruit_SSD1306 libraries to control the OLED screen. Both are available from
    *[https://www.nostarch.com/arduinohandbook2/](https://www.nostarch.com/arduinohandbook2/)*.
    Refer to the primer if you need a reminder on how to add libraries to the IDE.
  id: totrans-1020
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check that your setup matches the circuit diagram in [Figure 19-3](ch19.xhtml#ch19fig3),
    and upload the code in “[The Sketch](ch19.xhtml#ch00lev1sec80)” below.
  id: totrans-1021
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 19-3:** The circuit diagram for the OLED breathalyzer'
  id: totrans-1022
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f19-03.jpg)'
  id: totrans-1023
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The heater inside the MQ3 sensor needs to heat up for about 4 minutes before
    it can operate accurately. The sketch has a timer so that when you power it up
    for the first time, the values won’t appear onscreen until the required time has
    passed. The “Warming up” text will display with a small countdown bar until the
    sensor is ready.
  id: totrans-1024
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**THE SKETCH**'
  id: totrans-1025
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch starts by calling on the SPI, Wire, Adafruit_GFX, and Adafruit_SSD1306
    libraries to control communication and the OLED screen. We assign a time for the
    warm-up session (4 minutes) and set the analog pin as Arduino A0.
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: Next we set up the OLED screen. The Arduino sends different messages to the
    screen depending on the value read from the analog pin. For instance, if the sensor
    reading is above 200, the Arduino will ask you if you’ve had a beer. If the reading
    is below this value, the Arduino will say you’re sober. The minimum level of alcohol
    the MQ3 will read is about 180\. For anything over 450, the breathalyzer will
    let you know you’re drunk!
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: The sketch loops every second to read the analog sensor. To use the breathalyzer,
    wait for the sensor to heat up for 4 minutes, then gently breathe onto the sensor.
    Try not to get the sensor wet or expose it to a smoky environment, as this will
    affect the reading.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: // Re-created with kind permission from Nick Koumaris educ8s.tv
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: // Call the SPI, Wire, Adafruit_GFX, and Adafruit_SDD1306 libraries
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
- en: '#include <SPI.h>'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Wire.h>'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Adafruit_GFX.h>'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Adafruit_SSD1306.h>'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: '#define OLED_RESET 4 // Define the OLED screen'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: int TIME_UNTIL_WARMUP = 4; // Time for the warm-up delay in minutes
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: unsigned long time;
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: int analogPin = 0; // Set analog pin as A0
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
- en: int val = 0; // Set a value to read from the analog pin
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_SSD1306 display(OLED_RESET);
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: void setup() { // Set up the OLED screen
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
- en: display.clearDisplay();
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: void loop() { // Take the reading and show it onscreen
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
- en: delay(100);
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: val = readAlcohol();
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: printTitle();
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: printWarming();
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: time = millis() / 1000;
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: time /= 60;
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: if (time <= TIME_UNTIL_WARMUP) { // If warm-up is less than 4 mins
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: time = map(time, 0, TIME_UNTIL_WARMUP, 0, 100); // Show countdown
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: display.drawRect(10, 50, 110, 10, WHITE); // Empty bar
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: display.fillRect(10, 50, time, 10, WHITE);
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: '} else { // When warm-up time has passed'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
- en: // the value and message are printed on the screen
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: printTitle();
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: printAlcohol(val);
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: printAlcoholLevel(val);
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: display.display();
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: void printTitle() { // Position and text of title on the screen
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: display.clearDisplay();
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextSize(1);
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextColor(WHITE);
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: display.setCursor(22, 0);
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: display.println("Breath Analyzer");
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: void printWarming() { // Warm-up message
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextSize(1);
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextColor(WHITE);
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: display.setCursor(30, 24);
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: display.println("Warming up");
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: void printAlcohol(int value) { // Print alcohol value to screen
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextSize(2);
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextColor(WHITE);
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
- en: display.setCursor(50, 10);
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: display.println(val);
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
- en: void printAlcoholLevel(int value) { // Print message to screen
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextSize(1);
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
- en: display.setTextColor(WHITE);
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: display.setCursor(20, 25);
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
- en: if (value < 200) { // If value read is less than 200, you are sober
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
- en: display.println("You are sober...");
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: if (value >= 200 && value < 280) {
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: display.println("You had a beer?");
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: if (value >= 280 && value < 350) {
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: display.println("Two or more beers.");
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: if (value >= 350 && value < 450) {
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
- en: display.println("I smell VODKA!");
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
- en: if (value > 450) {
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: display.println("You are drunk!");
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
- en: // Finds average by summing three readings and
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
- en: // dividing by 3 for better accuracy
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: int readAlcohol() {
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: int val = 0;
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
- en: int val1;
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: int val2;
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
- en: int val3;
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: display.clearDisplay();
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
- en: val1 = analogRead(analogPin);
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: delay(10);
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
- en: val2 = analogRead(analogPin);
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
- en: delay(10);
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
- en: val3 = analogRead(analogPin);
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
- en: val = (val1 + val2 + val3) / 3;
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: return val;
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  id: totrans-1119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The display is not showing readings correctly.*'
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
- en: • Recheck that your wiring matches the diagram in [Figure 19-3](ch19.xhtml#ch19fig3).
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
- en: • If all your wiring is in the correct place, make sure you’ve carried out the
    earlier step to burn the sensor in by leaving it powered for a few hours.
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
- en: • To check whether your components are faulty, temporarily swap a potentiometer
    in for the sensor. Connect the center pin of the potentiometer to A0 and add power
    to either side. If the potentiometer is working okay, it means your sensor is
    probably faulty, so replace your sensor—they are very inexpensive.
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
