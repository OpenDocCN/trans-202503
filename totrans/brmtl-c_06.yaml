- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Decision and Control Statements
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 决策和控制语句
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: A computer is a powerful instrument because it can make decisions based on the
    data it receives. For example, a computer can turn on an LED if a button is being
    pressed and turn off the LED if it isn’t. In this chapter we will see how C’s
    various decision and control statements operate. Then we’ll apply them to embedded
    programming by making our device respond to button presses.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机是一种强大的工具，因为它可以根据接收到的数据做出决策。例如，计算机可以在按钮被按下时打开LED，并在按钮没有被按下时关闭LED。在这一章中，我们将了解C语言中的各种决策和控制语句如何工作。然后，我们将它们应用到嵌入式编程中，使我们的设备对按钮按下做出响应。
- en: The if Statement
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: if语句
- en: 'We use the `if` statement to execute some code only if some condition is true.
    Here is the general form of this statement:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`if`语句来仅在某个条件为真时执行某段代码。以下是该语句的一般形式：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To conditionally execute more than one statement, enclose the set of statements
    affected by the condition inside curly brackets (`{}`), as shown next. C will
    treat the set of statements as a single block:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要有条件地执行多个语句，可以将受条件影响的语句块放在大括号（`{}`）中，如下所示。C会将这些语句视为一个整体：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: C considers anything nonzero as true and zero as false. Therefore, if the condition
    is nonzero, the statements will execute. If the condition is zero, they will not.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: C语言认为任何非零值为真，零值为假。因此，如果条件为非零值，语句将被执行；如果条件为零值，语句将不会执行。
- en: '[Table 5-1](#table5-1) lists the other comparison operators.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[表5-1](#table5-1)列出了其他比较运算符。'
- en: 'Table 5-1: The Comparison Operators'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表5-1：比较运算符
- en: '| **Operator** | **Description** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **运算符** | **描述** |'
- en: '| --- | --- |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `==` | Equals |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 等于 |'
- en: '| `<` | Less than |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 小于 |'
- en: '| `<=` | Less than or equal |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于 |'
- en: '| `!=` | Not equals |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 不等于 |'
- en: '| `>` | Greater than |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 大于 |'
- en: '| `>=` | Greater than or equal |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于 |'
- en: 'For example, if you wanted some code to execute only if a variable had a value
    of 5, you could use the equals (`==`) operator, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你希望某段代码仅在一个变量的值为5时才执行，你可以使用等于（`==`）运算符，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A word of warning: C allows assignment inside conditionals. For example, the
    following code, which assigns a variable a value of 7 within the `if` statement,
    is legal:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 提个警告：C语言允许在条件语句中进行赋值。例如，下面的代码，在`if`语句中给变量赋值为7，是合法的：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is the equivalent of the following code, which tests whether the variable
    is equal to zero after the assignment:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这等同于以下代码，它在赋值后测试变量是否等于零：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is *not* the same as the following condition, which tests whether a variable
    is equal to 7:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它与下面的条件不同，后者测试一个变量是否等于7：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This problem was a nasty one in the early days of C when compiler technology
    was not what it is today. You’d make a mistake by accidentally writing something
    like the following code, only much more complicated:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题在C语言的早期很麻烦，当时编译器技术还不像今天这么先进。你可能会犯错误，偶然写出像以下这样的代码，虽然代码会更复杂：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The code within the `if` statement would be executed, as the variable would
    be reassigned a value of 7, which as a nonzero value would immediately make the
    condition true, even though you intended `aNumber` to be 5, not 7\. With the modern
    GCC compiler, assignment in a condition generates a warning:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句中的代码会被执行，因为变量会被重新赋值为7，这个非零值会立即使条件为真，尽管你本意是让`aNumber`等于5，而不是7。使用现代的GCC编译器时，在条件中进行赋值会产生警告：'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, GCC is telling you that if you want to suppress the warning because you
    really want to combine an assignment statement and an `if` statement, you should
    write the code as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，GCC正在告诉你，如果你想抑制警告，因为你确实希望将赋值语句和`if`语句合并，你应该按照如下方式编写代码：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I’ve added the comment because I consider it poor programming practice to combine
    statements. Make one statement do one thing. For example, when you need to do
    an assignment and a test, do the assignment and then do the test.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了这个注释，因为我认为将语句合并在一起是一种不好的编程习惯。让每个语句做一件事。例如，当你需要做赋值和测试时，先进行赋值，然后再做测试。
- en: The if/else Statement
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: if/else语句
- en: 'We use the `if`/`else` statement when we want to make some statements execute
    if the condition is true and other statements execute when it is false. For example,
    consider the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要根据条件判断是否执行某些语句时，使用`if`/`else`语句。例如，考虑以下代码：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If the value of the `number` variable has a remainder of 0 when divided by 2,
    this code will print a message noting that the number is even; otherwise, it will
    print a message noting that the number is odd.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `number` 变量的值在除以 2 后余数为 0，则这段代码会打印一条信息，说明该数字是偶数；否则，它会打印一条信息，说明该数字是奇数。
- en: 'Now we come to another of C’s darker little corners: you don’t have to put
    curly brackets (`{}`) around a single statement after an `if` or an `else`. Consider
    the following code, deliberately indented incorrectly:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看 C 语言中的另一个不太明显的地方：在 `if` 或 `else` 后面，如果只有一个语句，你不需要使用大括号（`{}`）。请考虑下面的代码，故意将缩进写得不正确：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Which `if` does the `else` go with, the first `if` or the second `if`?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`else` 应该和哪个 `if` 语句配对，第一个 `if` 还是第二个 `if`？'
- en: 'a. The first `if`: `if (a == 1)`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: a. 第一个 `if`：`if (a == 1)`
- en: 'b. The second `if`: `if (b == 2)`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: b. 第二个 `if`：`if (b == 2)`
- en: c. If you don’t write code like this, you don’t have to worry about such silly
    questions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: c. 如果你不写这样的代码，就不必担心这些愚蠢的问题。
- en: Let’s use answer C and rewrite the code. Which `if` does the `else` go with
    in the following code?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择答案 C 并重写代码。在以下代码中，`else` 应该与哪个 `if` 配对？
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, you can tell it goes with the second `if`. That’s the “official” answer
    to the previous question too, but by writing your code clearly, you can come up
    with the answer without having to go through the C language standard with a fine-tooth
    comb.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以判断它与第二个 `if` 配对。这也是前一个问题的“官方”答案，但通过清晰地编写代码，你可以得出答案，而无需仔细研读 C 语言标准。
- en: It should be noted that some style guides require that you always put the body
    of the `if` inside curly brackets; however, this is a decision best left up to
    the programmer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，一些编码风格指南要求你在 `if` 语句的主体部分始终使用大括号包裹；然而，这一决定最好由程序员自己做出。
- en: Looping Statements
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环语句
- en: 'A *loop* is a programming feature that repeats some code as long as a condition
    is met. C has three looping statements: `while`, `for`, and `do/while`. We’ll
    start with `while`, since it’s the simplest, followed by `for`. We won’t get into
    `do/while` because it’s rarely used.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*循环* 是一种编程特性，只要满足某个条件，就会重复执行某段代码。C 语言有三种循环语句：`while`、`for` 和 `do/while`。我们将从
    `while` 循环开始，因为它是最简单的，然后再讲解 `for` 循环。由于 `do/while` 很少使用，我们不会讨论它。'
- en: The while Loop
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`while` 循环'
- en: 'The general form of the `while` statement is as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`while` 语句的一般形式如下：'
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Remember that `statement` can be a single C statement or a series of statements
    enclosed in `{}`. To see how a `while` loop can be useful, let’s write a program
    that tests the numbers from 1 to 10 to see which ones are even and which ones
    are odd, as shown in [Listing 5-1](#listing5-1).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`statement` 可以是一个单独的 C 语句，也可以是由 `{}` 括起来的一系列语句。为了展示 `while` 循环的实用性，让我们编写一个程序，测试从
    1 到 10 的数字，看看哪些是偶数，哪些是奇数，如 [列表 5-1](#listing5-1) 所示。
- en: '***odd.c***'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '***odd.c***'
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 5-1: Testing for oddness'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-1：测试奇偶性
- en: In the `main` function, we declare a variable, `aNumber`, to hold the value
    we’ll test in our `while` loop. Then we set that variable to `1`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main` 函数中，我们声明一个变量 `aNumber`，用于存储在 `while` 循环中要测试的值。然后我们将该变量设置为 `1`。
- en: Next, we set the `while` loop to run as long as `aNumber` is less than or equal
    to 10\. Inside the loop (that is, inside the brackets) we use the `if`/`else`
    statement introduced in the previous section of this chapter to check the remainder
    of dividing `aNumber` by 2\. This lets us know whether it’s even or odd.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置 `while` 循环，使其在 `aNumber` 小于或等于 10 时运行。在循环内部（即在大括号内），我们使用前面章节中介绍的 `if`/`else`
    语句，检查 `aNumber` 除以 2 的余数。这样我们就能知道它是偶数还是奇数。
- en: Before we finish the loop, we add 1 to `aNumber` with `++aNumber;`. Thus, the
    next time the loop runs, `aNumber` will have a value of 2, and so on. Eventually,
    when `aNumber`’s value reaches 11, the loop ends and the program exits with the
    return value `0`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环结束之前，我们通过 `++aNumber;` 将 `aNumber` 增加 1。因此，下次循环时，`aNumber` 的值将变为 2，依此类推。当
    `aNumber` 的值达到 11 时，循环结束，程序以返回值 `0` 退出。
- en: 'When this program runs, the output looks like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个程序运行时，输出结果如下所示：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The for Loop
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for` 循环'
- en: 'Our `while` loop had three main components: an initialization statement (`aNumber
    = 1`), a test statement (checking whether `aNumber` is greater or equal to 10),
    and a statement to increment the variable after the loop was executed (`++aNumber`).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `while` 循环有三个主要部分：初始化语句（`aNumber = 1`），测试语句（检查 `aNumber` 是否大于或等于 10），以及在循环执行后递增变量的语句（`++aNumber`）。
- en: 'This design pattern (initialization, condition, and increment) is so common
    it has its own statement: the `for` statement. We write this statement as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计模式（初始化、条件和递增）非常常见，以至于它有了自己的语句：`for` 语句。我们这样写这个语句：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To see how it works, let’s convert our `while` loop into a `for` loop. The
    following code shows the same odd-or-even program using a `for` statement:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看它如何工作，我们将把我们的 `while` 循环转换为 `for` 循环。以下代码展示了使用 `for` 语句的相同奇偶程序：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice that the `for` clause includes our three statements, separated by semicolons.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 `for` 子句包括我们的三个语句，它们由分号分隔。
- en: 'Any one of the statements may be left out of the `for` loop. For example, we
    could have written our program by initializing `aNumber` before entering the loop:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环中的任意一条语句都可以被省略。例如，我们本可以通过在进入循环之前初始化 `aNumber` 来编写程序：'
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Alternatively, we could increment the variable’s value within the loop’s body,
    rather than in the `for` clause:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们可以在循环体内递增变量的值，而不是在 `for` 子句中：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If the condition is left out, however, the loop will never terminate. This
    is why the following statement loops forever:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果条件被省略，循环将永远不会终止。这就是为什么以下语句会永远循环的原因：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We use this “for-ever” loop in our embedded programs, because the programs should
    never exit.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在嵌入式程序中使用这种“永远循环”的方式，因为程序应该永远不会退出。
- en: Using the Button
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用按钮
- en: 'Now that we know how to make decisions, we’ll write a program that makes a
    decision based on the one input source our development board has by default: a
    blue button. Our program will make use of the one output we know how to control:
    the LED. Let’s turn our development board into a tiny computerized lamp.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何做决策，我们将编写一个程序，基于我们开发板默认的唯一输入源——蓝色按钮来做决策。我们的程序将利用我们知道如何控制的唯一输出：LED。让我们把开发板变成一个小型的计算机灯。
- en: 'Start System Workbench for STM32 and begin a new embedded project. The *main.c*
    file should look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 STM32 的系统工作台并开始一个新的嵌入式项目。*main.c* 文件应该如下所示：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Let’s go over this code in detail.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解析这段代码。
- en: Initialization
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化
- en: To begin our program, we’ll make use of a lot of code that is defined by the
    hardware abstraction layer (HAL). In the next few chapters, you’ll learn about
    every one of these pieces.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始我们的程序，我们将使用硬件抽象层（HAL）定义的大量代码。在接下来的几章中，你将了解这些部分的每一个。
- en: 'First, we define a new variable named `GPIO_LedInit` of type `GPIO_InitTypeDef`
    1. The `GPIO_InitTypeDef` type is not a standard C type: it’s defined by the HAL
    include files brought in at the top of the program. At this point, the details
    of this type don’t matter. We need the variable to define how the LED pin is going
    to be configured. (You’ll learn about defining variable types in later chapters.)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们定义一个名为 `GPIO_LedInit` 的新变量，其类型为 `GPIO_InitTypeDef` 1。`GPIO_InitTypeDef`
    类型不是标准的 C 类型：它是由在程序顶部引入的 HAL 包含文件定义的。此时，这个类型的细节不重要。我们需要这个变量来定义 LED 引脚的配置方式。（你将在后面的章节中了解如何定义变量类型。）
- en: Similarly, we define another variable, `GPIO_ButtonInit`, to define how the
    button GPIO pin is going to be configured, and a variable to hold the state of
    the button pin (`GPIO_PinState`).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们定义了另一个变量 `GPIO_ButtonInit`，用于定义按钮 GPIO 引脚的配置方式，并定义一个变量来保存按钮引脚的状态（`GPIO_PinState`）。
- en: Inside the `main` procedure, the first thing we do is call `HAL_Init` to set
    up the hardware, as we did in the blink program from Chapter 3. You need to call
    `HAL_Init` at the top of every STM32 program.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `main` 函数内，我们首先调用 `HAL_Init` 来设置硬件，就像我们在第 3 章的闪烁程序中所做的那样。你需要在每个 STM32 程序的顶部调用
    `HAL_Init`。
- en: Next, we turn on the clock for `LED2` (the user LED) 2. The *clock* controls
    how the data we write to the GPIO pin gets to the actual pin. Without this line,
    writing to the LED doesn’t work. Although it looks like a procedure call to a
    function named `LED2_GPIO_CLK_ENABLE`, it’s actually a preprocessor macro, which
    we will study later.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为 `LED2`（用户 LED）打开时钟 2。*时钟* 控制我们写入 GPIO 引脚的数据如何到达实际的引脚。如果没有这一行，写入 LED
    将不起作用。虽然它看起来像是一个调用名为 `LED2_GPIO_CLK_ENABLE` 的函数，实际上它是一个预处理器宏，我们稍后会学习。
- en: Now we come to the part where we assign values to the `GPIO_LedInit` variable
    3, which is a structure type that has a bunch of pieces we need to assign individually.
    Later, you will learn the details of what’s going on here.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到了为 `GPIO_LedInit` 变量 3 赋值的部分，它是一个结构类型，包含我们需要单独赋值的一些元素。稍后你会了解这里发生的详细情况。
- en: Similar code initializes the pin used for the button, except that the pin mode
    is set to `GPIO_MODE_INPUT` because we’ll be reading the pin to get the state
    of the button, not writing it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 类似的代码初始化用于按钮的引脚，唯一不同的是引脚模式设置为 `GPIO_MODE_INPUT`，因为我们要读取引脚的状态来获取按钮的状态，而不是写入它。
- en: Choosing a Pulldown Circuit
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择下拉电路
- en: Notice that we set the `Pull` field to `GPIO_PULLDOWN` 4, not `GPIO_PULLUP`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将 `Pull` 字段设置为 `GPIO_PULLDOWN` 4，而不是 `GPIO_PULLUP`。
- en: 'The `Pull` field tells the CPU what type of pullup/pulldown circuity to use.
    An input pin can have one of three states: floating, pullup, and pulldown. [Figure
    5-1](#figure5-1) shows the circuit for a *floating* input.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pull` 字段告诉 CPU 使用哪种上拉/下拉电路。一个输入引脚可以有三种状态：浮空、上拉和下拉。[图 5-1](#figure5-1) 显示了一个
    *浮空* 输入电路。'
- en: '![f05001](image_fi/501621c05/f05001.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![f05001](image_fi/501621c05/f05001.png)'
- en: 'Figure 5-1: A floating circuit'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-1：一个浮空电路
- en: When the switch SW1 is open, no voltage is applied to the `User_Button_Pin`.
    As such, it could be high (about 3 volts or more) or low (less than about 3 volts)
    or somewhere in between. It could be set by whatever stray electrical noise is
    floating around near it. The key here is that there is no way to know the value
    of this signal unless it’s actually shorted to ground or power.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当开关 SW1 打开时，`User_Button_Pin` 上没有电压。因此，它的电压可能是高电平（大约 3 伏特或更高）、低电平（低于大约 3 伏特）或介于两者之间。它可能会被周围的任何杂散电噪声所影响。关键是，除非该信号实际接地或接电源，否则无法确定这个信号的值。
- en: Now let’s take a look at an input with a *pullup* circuit (see [Figure 5-2](#figure5-2)).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一个带有 *上拉* 电路的输入（参见 [图 5-2](#figure5-2)）。
- en: '![f05002](image_fi/501621c05/f05002.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![f05002](image_fi/501621c05/f05002.png)'
- en: 'Figure 5-2: A pullup circuit'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-2：上拉电路
- en: When SW1 is open, voltage flows though the resistor R1, raising (or *pulling
    up*) the `User_Button_Pin` to VCC, or a positive level. When SW1 is closed, the
    pin is shorted to ground (Gnd). R1 is a very big resistor, so the current flowing
    through it is negligible and the voltage on the pin goes to zero.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当 SW1 打开时，电压通过电阻 R1 流动，将 `User_Button_Pin` 提升（或 *拉高*）到 VCC 或正电平。当 SW1 关闭时，引脚被短接到地（Gnd）。由于
    R1 是一个非常大的电阻，因此流过它的电流可以忽略不计，且引脚的电压为零。
- en: A *pulldown* circuit is similar, except R1 is connected to ground, and SW1 to
    VCC, so the `User_Button_Pin` goes to ground (that is, it’s pulled down to zero)
    if SW1 is open (see [Figure 5-3](#figure5-3)).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*下拉* 电路类似，只不过 R1 连接到地，SW1 连接到 VCC，因此当 SW1 打开时，`User_Button_Pin` 被拉到地（即拉低到零），参见
    [图 5-3](#figure5-3)。'
- en: '![f05003](image_fi/501621c05/f05003.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![f05003](image_fi/501621c05/f05003.png)'
- en: 'Figure 5-3: A pulldown circuit'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-3：下拉电路
- en: On the STM32 chip, circuits are cheap and pins are expensive. Therefore, the
    chip’s creators wanted to get as much out of each pin as possible. For every GPIO
    pin, there is a pullup resistor, a pulldown resistor, and the transistors to connect
    these resistors, depending on how the pin may be configured. This makes things
    easy, as we don’t have to put these resistors on the board ourselves. It also
    makes things difficult, however, because we have to program them. [Figure 5-4](#figure5-4)
    shows the internal wiring of a single GPIO pin on the STM32\. (Even this is a
    simplified version.) The key thing to note is that there are pullup (R[PU]) and
    pulldown (R[PD]) internal resistors that can be turned on and off.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 STM32 芯片上，电路便宜，而引脚昂贵。因此，芯片的设计者希望最大限度地利用每个引脚。对于每个 GPIO 引脚，都有上拉电阻、下拉电阻以及连接这些电阻的晶体管，这取决于引脚的配置方式。这使得事情变得简单，因为我们不需要自己在板上放置这些电阻。然而，这也使得事情变得复杂，因为我们需要编程来控制它们。[图
    5-4](#figure5-4) 显示了 STM32 上单个 GPIO 引脚的内部接线。（这甚至是一个简化版。）需要注意的是，有上拉（R[PU]）和下拉（R[PD]）的内部电阻，可以打开或关闭。
- en: '![f05004](image_fi/501621c05/f05004.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![f05004](image_fi/501621c05/f05004.png)'
- en: 'Figure 5-4: STM32 internal wiring for a GPIO pin'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5-4：STM32 GPIO 引脚的内部接线
- en: We chose to use a pulldown circuit because the other side of the button is connected
    to +5 V, so when the button is not pressed and the switch is open, our pulldown
    resistor kicks in and the GPIO pin has a value of 0\. When the button is pressed,
    the 5 V coming from the button cause the GPIO pin to have a value of 1\. (A little
    current will also flow through the resistor, but that amount of current is negligible.)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择使用下拉电路，因为按钮的另一端连接到 +5 V，所以当按钮未按下且开关打开时，下拉电阻会生效，GPIO 引脚的值为 0。当按钮被按下时，按钮提供的
    5 V 使得 GPIO 引脚的值为 1。（一些电流会通过电阻流动，但这个电流量可以忽略不计。）
- en: Getting the State of the Button
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取按钮的状态
- en: Next, we reach our main loop. The `for` statement loops forever, or until we
    reset the machine. Inside the loop, the first statement initializes a variable
    called `result` of type `GPIO_PinState` (a nonstandard type defined by the HAL
    include files) with the result of a call to the function `HAL_GPIO_ReadPin`. `HAL_GPIO_ReadPin`
    reads the GPIO pin connected to the button. More specifically, it reads the 32-bit
    GPIO port `USER_BUTTON_GPIO_PORT` and then tests the value of the `USER_BUTTON_PIN`.
    (A lot of the bit manipulation we covered in the previous chapter goes on inside
    the `HAL_GPIO_ReadPin` function.)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们进入主循环。`for`语句会无限循环，或者直到我们重置机器。在循环内，第一条语句初始化了一个名为`result`的变量，类型为`GPIO_PinState`（由HAL头文件定义的非标准类型），并赋值为调用`HAL_GPIO_ReadPin`函数的结果。`HAL_GPIO_ReadPin`读取连接到按钮的GPIO引脚。更具体地说，它读取32位的GPIO端口`USER_BUTTON_GPIO_PORT`，然后测试`USER_BUTTON_PIN`的值。（我们在上一章中涉及的许多位操作都在`HAL_GPIO_ReadPin`函数内部进行。）
- en: Now we test to see if the pin is set by comparing `result` to the symbol `GPIO_PIN_SET`
    (a constant defined by the HAL code), and then we turn on the LED pin if the button
    pin is set. Otherwise, we turn off the LED pin. (The code to do this was covered
    in Chapter 3.)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过将`result`与符号`GPIO_PIN_SET`（由HAL代码定义的常量）进行比较来测试引脚是否已设置，然后如果按钮引脚已设置，我们打开LED引脚。否则，我们关闭LED引脚。（实现这一点的代码在第3章中已涵盖。）
- en: Running the Program
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行程序
- en: When we run the program, the LED turns on. Press the user button and the LED
    turns off. Release the button and the LED will come back on, and so on. Although
    a simple operation, it took a lot of learning to get us here.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行程序时，LED灯会亮。按下用户按钮，LED灯熄灭。松开按钮，LED灯会重新亮起，如此循环。虽然这是一个简单的操作，但我们花了很多时间学习才做到这一点。
- en: Unfortunately, we’ve made a very complex flashlight with a button that turns
    the light off instead of on. The good news is that it’s computer-controlled, so
    we can fix it in software. I’m going to leave that for you to figure out.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们做了一个非常复杂的手电筒，它的按钮会把灯关掉，而不是打开。好消息是，它是计算机控制的，所以我们可以通过软件来修复它。我会把这个问题留给你去解决。
- en: Loop Control
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环控制
- en: Our programming example made basic use of looping statements, but C gives you
    several ways of adding extra control to your loops. The two major statements that
    modify the loop control are `break` and `continue`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的编程示例使用了基本的循环语句，但C语言提供了几种方法来为你的循环增加额外的控制。两种主要的控制语句是`break`和`continue`。
- en: The break Statement
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: break语句
- en: 'The `break` statement allows you to exit a loop early (that is, break out of
    the loop). For example, consider the following short program, which looks through
    an array for a key number. If the number is there, the program prints it:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`语句允许你提前退出循环（也就是说，跳出循环）。例如，考虑以下简短程序，它在一个数组中查找一个关键数字。如果找到了这个数字，程序会打印它：'
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This program searches an array for a key value. Once we find the key value,
    we’re done. We don’t want to go through the entire rest of the loop, so to exit,
    we use the `break` statement 1.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序在一个数组中查找一个关键值。一旦我们找到了这个关键值，任务就完成了。我们不想继续执行整个循环的其余部分，因此我们使用`break`语句1来退出。
- en: The continue Statement
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: continue语句
- en: 'The other loop control statement, `continue`, starts execution at the top of
    the loop. The following program prints a list of commands, skipping those that
    start with a dot. When we encounter one of these, we jump to the top of the loop
    with the `continue` command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个循环控制语句`continue`会从循环的顶部开始执行。以下程序打印一个命令列表，跳过以点开头的命令。当我们遇到这些命令时，使用`continue`命令跳到循环顶部：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The key to this program is the test to see if we have a dot command 1 and then
    `continue` 2 to start over (thus skipping the rest of the loop and the `printf`).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的关键是测试是否有点命令1，然后`continue` 2来重新开始（从而跳过循环的其余部分和`printf`）。
- en: Anti-patterns
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反模式
- en: While you’re learning how to use loops, you should also learn how *not* to use
    loops. Several programming patterns have crept into the programming industry that
    do more to confuse things than promote good programming, which is why they’re
    called *anti-patterns*. I’m going to warn you about two.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何使用循环时，你还应该学会如何*不*使用循环。一些编程模式已经渗透到编程行业，这些模式不仅没有促进良好的编程，反而让事情变得更复杂，因此它们被称为*反模式*。我要警告你两种。
- en: The Empty while Loop
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空的while循环
- en: 'The first anti-pattern is the empty `while` loop. Consider the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个反模式是空的`while`循环。考虑以下代码：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You probably gather that this code repeats some action as long as the user
    button is pressed. But it doesn’t. The reason it doesn’t is that the `while` loop
    affects a single statement only. You might assume that the statement within the
    `while` loop is the one enclosed in curly brackets, but there is a statement before
    the brackets too. It’s a very short statement and very easy to miss, because it’s
    an empty statement. We can tell it’s there because there is a semicolon after
    the statement:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为这段代码会在用户按下按钮时重复某个动作。但事实并非如此。原因在于`while`循环只影响一个语句。你可能会认为`while`循环中的语句是被大括号括起来的那个，但在大括号前还有一个语句。这个语句非常简短，非常容易忽视，因为它是一个空语句。我们可以通过语句后的分号来知道它的存在：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The semicolon is easy to overlook. That’s why I had to set it in boldface. It’s
    also why this type of coding is considered bad. Very bad.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 分号很容易被忽视。这就是为什么我必须将其加粗的原因。这也是为什么这种编码方式被认为是糟糕的，十分糟糕。
- en: 'The `continue` statement comes to our rescue. We can rewrite this `while` loop
    as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue`语句帮助我们解决了问题。我们可以将这个`while`循环重写如下：'
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now we can see that the `while` loop controls the `continue` statement and nothing
    else. The indentation and the big obvious statement tell us that.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到，`while`循环仅控制`continue`语句，别无他物。缩进和明显的大语句告诉我们这一点。
- en: Assignment in while
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在while中赋值
- en: 'The second anti-pattern is assignment in the `while` loop:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个反模式是`while`循环中的赋值操作：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This statement does two things at once. First, it calls `ReadPin` and assigns
    the result to `result`. Second, it tests `result` to see if it is set.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句同时做了两件事。首先，它调用`ReadPin`并将结果赋值给`result`。其次，它测试`result`是否已设置。
- en: 'Programs are much easier to understand and maintain if they do small, simple
    things one at a time. This shortcut saves typing a couple of newlines at the cost
    of program clarity. It could just as easily have been written like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序一次只做小而简单的事情，它们会更容易理解和维护。这个快捷方式节省了几行新代码，但却以程序的可读性为代价。它本可以像这样写：
- en: '[PRE27]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Our goal should be to make our programs as simple and easy to read as possible,
    not as compact and clever as possible.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标应该是让程序尽可能简单且易于阅读，而不是尽可能简洁和巧妙。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'We now have two key aspects of computing under our belt: numbers and how to
    make decisions based on those numbers. Single decisions can be made with the `if`
    statement, while the `while` and `for` statements let us make repeating decisions.
    The `break` and `continue` keywords give us more control over those decisions.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了计算中的两个关键方面：数字和如何基于这些数字做出决策。单一的决策可以通过`if`语句做出，而`while`和`for`语句则让我们能够做出重复性的决策。`break`和`continue`关键字则赋予我们更多的控制权。
- en: Decision statements gave us the ability to write a small program that flashes
    the LED at the touch of a button. Although the program is simple, we took input,
    processed it, and produced output, which is the basis for a huge number of embedded
    programs. In the next few chapters, you’ll learn how to deal with more complex
    data and more complex ways of processing it, all of which builds on the basics
    you learned here.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 决策语句让我们能够编写一个在按下按钮时闪烁LED的小程序。尽管程序很简单，但我们接受了输入，处理了它，并产生了输出，这构成了大量嵌入式程序的基础。在接下来的几章中，你将学习如何处理更复杂的数据和更复杂的处理方式，这一切都建立在你在这里学到的基础上。
- en: Programming Problems
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程问题
- en: Write a program to produce a multiplication table for the numbers from 0 × 0
    to 9 × 9.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，生成从0 × 0到9 × 9的乘法表。
- en: Write a program to count the number of bits that are set in a `uint32_t` integer.
    For example, the number 0x0000A0 has two bits set in it.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，统计`uint32_t`整数中被设置的比特位数。例如，数字0x0000A0中有两个比特位被设置。
- en: Write a program that flashes a pattern on the LED. Use one array of integers
    to control the delay for LED on and LED off. Repeat the pattern.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，在LED上闪烁一个图案。使用一个整数数组来控制LED点亮和熄灭的延时。重复该图案。
- en: Write a program that blinks the letter “H” in Morse code using the LED. When
    the button is pressed, it blinks “E.” If you keep pressing the button, you’ll
    get all of “HELLO WORLD” in Morse code.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，使用LED灯以摩尔斯电码闪烁字母“H”。按下按钮时，它会闪烁字母“E”。如果继续按下按钮，将会显示“HELLO WORLD”全部的摩尔斯电码。
- en: Write a program to compute the first 10 primes.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，计算前10个质数。
- en: Write a program to find the largest and smallest elements in a set.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，找到集合中最大的和最小的元素。
- en: Create a program that goes through a string and prints only the vowels.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，遍历字符串并仅打印元音字母。
