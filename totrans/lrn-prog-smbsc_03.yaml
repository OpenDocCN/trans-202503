- en: '**3**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**DRAWING BASICS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/common01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With Small Basic you can become a masterful artist. Instead of a paintbrush,
    you’ve got the power of code. Let’s jump in so you can start creating your very
    own masterpiece! We showed you the `TextWindow` object, but in this chapter, you’ll
    explore the `GraphicsWindow` object, which includes methods that draw lines, triangles,
    rectangles, ellipses, and even fancy text.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Graphics Coordinate System**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Think of the graphics window as a rectangular grid. Every point on this grid
    is described with two numbers, called *coordinates*. The x-coordinate tells you
    a point’s horizontal position, and the y-coordinate tells you a point’s vertical
    position. You specify the point’s location using parentheses, like this: (*x*,
    *y*).'
  prefs: []
  type: TYPE_NORMAL
- en: In the system you use at school, point (0, 0) is in the middle of the graph,
    but things are a little different in the graphics window. [Figure 3-1](ch03.html#ch3fig1)
    shows you that point (0, 0) is in the upper-left corner of the graphics window,
    which means you can only see the points that have positive x- and y- values.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-1: The coordinate system of the graphics window*'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the graphics window’s coordinate system works, let’s play
    around with it. The next sections take you on a tour of some methods you can use
    to draw simple pictures. Throughout the chapter, we’ll show you drawings to create
    with Small Basic, and we’ll include the gridlines to help you visualize the coordinates
    involved in each shape.
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawing Lines**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To draw a line, you can use the `DrawLine()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The arguments `x1`, `y1` and `x2`, `y2` are for the x- and y-coordinates of
    the two end points of the line. To put this method into action, run the program
    in [Listing 3-1](ch03.html#ch3ex1), which draws two parallel lines.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-1: Drawing parallel lines*'
  prefs: []
  type: TYPE_NORMAL
- en: In line 3, Small Basic starts at the upper-left corner and then jumps to the
    right 40 and down 50\. From there, it draws the line to the right, to the (100,
    50) end point. Then, in line 4, it hops down to (40, 70) and draws a second line
    to the right, at the (100, 70) end point. Each pair of end points uses the same
    x-coordinates; the different y-coordinates draw the second line below the first
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Great job! But lines by themselves aren’t very exciting (unless they’re short
    lines at Disneyland). Let’s use several different lines to draw a sailboat like
    the one in [Figure 3-2](ch03.html#ch3fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-2: A sailboat drawn entirely with line segments*'
  prefs: []
  type: TYPE_NORMAL
- en: This shape’s made up of seven line segments, and your program includes seven
    `DrawLine()` statements. The code for this program is in [Listing 3-2](ch03.html#ch3ex2),
    and you can see its output in [Figure 3-3](ch03.html#ch3fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-2: Drawing a boat with seven lines*'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you’ve just drawn your first picture in Small Basic. You’re
    well on your way to becoming a great artist.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-3: The output of* SailBoat.sb'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawing Shapes**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can draw lots of cool pictures using lines, but that can be super slow.
    You can simplify your code by drawing geometric shapes with built-in methods,
    which also saves you a lot of time!
  prefs: []
  type: TYPE_NORMAL
- en: '***Triangles***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Use the `DrawTriangle()` and `FillTriangle()` methods to draw triangles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These methods take the x- and y-coordinates of the three corners of the triangle.
  prefs: []
  type: TYPE_NORMAL
- en: The `DrawTriangle()` method draws the triangle’s outline, and the `FillTriangle()`
    method fills the inside of the triangle with whatever color you set the `BrushColor`
    property to.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: '*For a complete list of colors you can use in the graphics window, please see*
    [http://tiny.cc/hexcolors/](http://tiny.cc/hexcolors/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to fill a triangle with blue, use these two statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to see the border, then add a call to `DrawTriangle()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Experiment with these methods to draw all kinds of triangles. Check your understanding
    with [Try It Out 3-1](ch03.html#ch03sb01).
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 3-1**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a program that draws the shape in [Figure 3-4](ch03.html#ch3fig4). (Hint:
    start by drawing the four blue triangles, and then draw the four yellow triangles.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-4: A fancy pinwheel*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Rectangles and Squares***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Using the `DrawRectangle()` and `FillRectangle()` methods, you can draw rectangles
    or squares of different sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In both methods, the first two arguments (`x` and `y`) are the coordinates of
    the upper-left corner of the rectangle. The third argument sets the width, and
    the fourth argument sets the height. Use the same number for the third and fourth
    arguments to draw a square.
  prefs: []
  type: TYPE_NORMAL
- en: To try out these methods, let’s write a program that draws the house shown in
    [Figure 3-5](ch03.html#ch3fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-5: Drawing a house*'
  prefs: []
  type: TYPE_NORMAL
- en: The complete program is shown in [Listing 3-3](ch03.html#ch3ex3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-3: Building the house of your dreams*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-6](ch03.html#ch3fig6) shows what the output looks like. The front
    side is a rectangle with its upper-left corner at (30, 50), a width of 80, and
    a height of 40 (line 3). The door is a filled rectangle with its upper-left corner
    at (40, 60), a width of 20, and a height of 30 (line 6).'
  prefs: []
  type: TYPE_NORMAL
- en: The window is a filled square with its upper-left corner at (80, 60) and a side
    length of 20 (line 10). The roof is a filled triangle whose three corner points
    are at (30, 50), (70, 10), and (110, 50).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-6: The output of* House.sb'
  prefs: []
  type: TYPE_NORMAL
- en: The chimney is also a rectangle with its upper-left corner at (100, 20). Its
    width is 10 and height is 30 (line 13). However, part of this rectangle is covered
    by the roof, so you need to draw the chimney first, and then draw the roof on
    top of it to cover the bottom of the chimney.
  prefs: []
  type: TYPE_NORMAL
- en: Now you have the house of your dreams!
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 3-2**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you can draw lines, triangles, rectangles, and squares, write a program
    that draws the fox shown in [Figure 3-7](ch03.html#ch3fig7). Add some colors.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-7: Drawing and coloring the fox*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Ellipses and Circles***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`GraphicsWindow` also has methods for drawing ellipses (ovals) and circles.
    Here are two ellipse methods that use four arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 3-8](ch03.html#ch3fig8) explains these four arguments. The first two
    arguments, `x` and `y`, set the upper-left coordinate of the ellipse. The third
    argument, `width`, sets the width of the ellipse, and the fourth argument, `height`,
    sets the height of the ellipse. To draw a circle, just set the width and the height
    of the ellipse to the same value.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-8: The four arguments for the ellipse-drawing methods*'
  prefs: []
  type: TYPE_NORMAL
- en: To use these drawing methods, let’s write a program that draws the face shown
    in [Figure 3-9](ch03.html#ch3fig9).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-9: Drawing a face*'
  prefs: []
  type: TYPE_NORMAL
- en: To draw the face, you just have to draw a circle and some different ellipses
    using the right parameters. The full program is shown in [Listing 3-4](ch03.html#ch3ex4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-4: Drawing the most awesome ellipse face ever*'
  prefs: []
  type: TYPE_NORMAL
- en: The output of this program is shown in [Figure 3-10](ch03.html#ch3fig10). All
    of the ellipses in this picture use the same pen size and color, but you can add
    even more detail to your Small Basic drawings by changing those properties. Let’s
    see how.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-10: The output of* Face.sb'
  prefs: []
  type: TYPE_NORMAL
- en: '***Pen Size and Color***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To change the pen size and color, you can set the following properties before
    you draw a line or a shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to mix things up, you can change your pen color every time you
    run your program by using the `GetRandomColor()` method of the `GraphicsWindow`
    object. Check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This method doesn’t have any arguments, which is why there’s nothing in the
    `GetRandomColor()` method’s parentheses; it returns a randomly selected color.
    Go ahead and try it out!
  prefs: []
  type: TYPE_NORMAL
- en: '***Pen Width and Shape Size***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When drawing triangles, rectangles, and ellipses, the width of the pen you use
    in the drawing affects the size of the shape. [Listing 3-5](ch03.html#ch3ex5)
    shows you what we mean.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-5: Using pen width to change the size of the shape*'
  prefs: []
  type: TYPE_NORMAL
- en: This program uses a pen with a width of 20 to draw the border of the circle.
    [Figure 3-11](ch03.html#ch3fig11) shows that the border extends 10 pixels out
    from the perimeter of the square, even though the circle and the square have the
    same dimensions. When measured across the outside edges, the diameter of the output
    circle is 120 pixels instead of the specified value of 100.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-11: The output of* PenWidthDemo.sb'
  prefs: []
  type: TYPE_NORMAL
- en: '**TRY IT OUT 3-3**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a program that draws a bike like the one shown in [Figure 3-12](ch03.html#ch3fig12).
    (Hint: use the given grid lines to figure out the coordinates of the different
    shapes to make them easier to code.)'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-12: Drawing a bike*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawing Text**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A picture might be worth a thousand words, but you can also draw text in the
    graphics window, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`DrawText()` takes three arguments. The first two arguments set the x- and
    y-coordinates of the upper-left corner of the text, and the third argument takes
    a string of the text (or numbers) you want to draw. Remember to put the string
    in quotes.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change how the text appears, use the `GraphicsWindow` object
    properties in [Table 3-1](ch03.html#ch3table1).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 3-1:** `GraphicsWindow` Properties for the Font Name, Size, Style,
    and Color'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Default** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `FontName` | `"Tahoma"` | The name of the font |'
  prefs: []
  type: TYPE_TB
- en: '| `FontSize` | `12` | The size of the font |'
  prefs: []
  type: TYPE_TB
- en: '| `FontBold` | `"True"` | Whether or not the font’s bold |'
  prefs: []
  type: TYPE_TB
- en: '| `FontItalic` | `"False"` | Whether or not the font’s italic |'
  prefs: []
  type: TYPE_TB
- en: '| `BrushColor` | `"SlateBlue"` | The color of the brush that draws the text
    |'
  prefs: []
  type: TYPE_TB
- en: If you don’t change any of these properties, Small Basic uses the default values
    listed in [Table 3-1](ch03.html#ch3table1). The program in [Listing 3-6](ch03.html#ch3ex6)
    changes these properties to draw some fancy text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-6: Trying out some fonts*'
  prefs: []
  type: TYPE_NORMAL
- en: In line 3, the `BackgroundColor` property changes the background color of the
    graphics window. Lines 4–6 set the name, size, and italics properties of the font
    you use in any calls to `DrawText()`. Line 8 sets the color of the font using
    the `BrushColor` property, and line 9 draws the string `"Hello!"` starting at
    point (5, 5). This line draws the background shadow you see in [Figure 3-13](ch03.html#ch3fig13).
    In line 11, the program changes the `BrushColor` property, and then line 12 draws
    the same string in a slightly different position. This creates the appearance
    of text with a background shadow, as shown in [Figure 3-13](ch03.html#ch3fig13).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-13: The output of* Fonts.sb'
  prefs: []
  type: TYPE_NORMAL
- en: By layering text on top of other text like this, you can create some cool effects.
    Try playing with this code to see what you can come up with!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also draw text to fit a certain width by using the `DrawBoundText()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters `x`, `y`, and `"text`" mean the same as they do in the `DrawText()`
    method: `x` and `y` are where you start to draw, and `"text`" is the string of
    text or numbers to draw. The third argument, `width`, tells Small Basic the maximum
    available width for the text in the output. If the text doesn’t fit in the given
    width, then it continues on a new line. Even though the rectangle that the text
    appears in has a fixed width, the text keeps going, so the rectangle text area
    stretches vertically for as long as it needs to. But if one word’s too long to
    fit in your *bound* rectangle (which happens, especially if the font’s too big),
    then it gets clipped! The program in [Listing 3-7](ch03.html#ch3ex7) and its output
    in [Figure 3-14](ch03.html#ch3fig14) show you what we mean.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-7: Boundaries that contain the text*'
  prefs: []
  type: TYPE_NORMAL
- en: The text in the invisible rectangle on the left automatically wraps to make
    sure it doesn’t go beyond the width you specified. In the *bound* rectangle on
    the right, the text gets clipped because it’s too long to fit. Small Basic displays
    three dots, called an *ellipsis*, indicating that text has been clipped.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-14: The output of* BoundTextDemo.sb'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inserting Images**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some images might be too complicated to draw with basic shapes, or they might
    just take too long to code. Instead, you can draw those images ahead of time with
    a paint program and then use them in your application. `GraphicsWindow` provides
    two methods to insert images. Although these methods start with *Draw*, they actually
    insert an existing image in the graphics window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Both methods take the image pathname and the x- and y-coordinates to determine
    the image’s location in the graphics window. `DrawResizedImage()` takes two additional
    arguments (`width` and `height`) so you can resize the input image.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 3-8](ch03.html#ch3ex8) shows the `DrawImage()` method with an example
    image.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 3-8: Inserting your first image*'
  prefs: []
  type: TYPE_NORMAL
- en: The program starts by setting the width and height of `GraphicsWindow` to 320
    and 240 pixels, respectively, to match the size of the image. Line 5 calls `DrawImage()`
    and passes in the pathname where the image is saved. In lines 7–9, the program
    draws the white text `Hello Moon!` on top of the background image. When you run
    this program on your computer, make sure you set the path in line 5 to the correct
    location of the *BkGnd.bmp* file on your computer. [Figure 3-15](ch03.html#ch3fig15)
    shows the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f03-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3-15: The output of* ImageDemo.sb'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Small Basic can also draw images from the Web. Here’s an example:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Programming Challenges**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a program that connects the following six points with line segments:
    (20, 110), (110, 50), (10, 50), (100, 110), (60, 20), (20, 110). What shape do
    you get?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What’s the output of the following program?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What’s the output of the following program?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What’s the strangest thing in your house? Draw it using the `DrawLine()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following problems show a grid to make it easier for you to draw the shapes.
    You can use any size you like for the grid. We recommend 20 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that draws this star.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0039-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws this bank, using any colors you’d like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0040-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws this truck. For extra credit, add front wheels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0040-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws a traffic light like this one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0040-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws a train like this one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0040-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws the following shape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0041-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws this person.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0041-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Write a program that draws a soccer field similar to this one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](graphics/f0041-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
