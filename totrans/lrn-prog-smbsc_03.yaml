- en: '**3**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3**'
- en: '**DRAWING BASICS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**绘图基础**'
- en: '![image](graphics/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/common01.jpg)'
- en: With Small Basic you can become a masterful artist. Instead of a paintbrush,
    you’ve got the power of code. Let’s jump in so you can start creating your very
    own masterpiece! We showed you the `TextWindow` object, but in this chapter, you’ll
    explore the `GraphicsWindow` object, which includes methods that draw lines, triangles,
    rectangles, ellipses, and even fancy text.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Small Basic，你可以成为一位技艺精湛的艺术家。你拥有的不是画笔，而是代码的力量。让我们开始吧，让你可以开始创作属于自己的杰作！我们已经向你展示了`TextWindow`对象，但在本章中，你将探索`GraphicsWindow`对象，它包含绘制线条、三角形、矩形、椭圆甚至花式文本的方法。
- en: '**The Graphics Coordinate System**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**图形坐标系统**'
- en: 'Think of the graphics window as a rectangular grid. Every point on this grid
    is described with two numbers, called *coordinates*. The x-coordinate tells you
    a point’s horizontal position, and the y-coordinate tells you a point’s vertical
    position. You specify the point’s location using parentheses, like this: (*x*,
    *y*).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将图形窗口看作一个矩形网格。网格上的每个点都用两个数字来描述，这两个数字叫做*坐标*。x坐标告诉你点的水平位置，y坐标告诉你点的垂直位置。你可以使用括号指定点的位置，像这样：（*x*，*y*）。
- en: In the system you use at school, point (0, 0) is in the middle of the graph,
    but things are a little different in the graphics window. [Figure 3-1](ch03.html#ch3fig1)
    shows you that point (0, 0) is in the upper-left corner of the graphics window,
    which means you can only see the points that have positive x- and y- values.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在你在学校使用的坐标系统中，点（0，0）位于图表的中心，但在图形窗口中情况有所不同。[图3-1](ch03.html#ch3fig1)向你展示了点（0，0）位于图形窗口的左上角，这意味着你只能看到具有正x和y值的点。
- en: '![image](graphics/f03-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-01.jpg)'
- en: '*Figure 3-1: The coordinate system of the graphics window*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-1：图形窗口的坐标系统*'
- en: Now that you know how the graphics window’s coordinate system works, let’s play
    around with it. The next sections take you on a tour of some methods you can use
    to draw simple pictures. Throughout the chapter, we’ll show you drawings to create
    with Small Basic, and we’ll include the gridlines to help you visualize the coordinates
    involved in each shape.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了图形窗口的坐标系统是如何工作的，让我们来玩一玩它。接下来的部分将带你游览一些你可以用来绘制简单图形的方法。在本章中，我们将展示如何用Small
    Basic创建图形，并且我们会加入网格线帮助你可视化每个形状中涉及的坐标。
- en: '**Drawing Lines**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绘制线条**'
- en: 'To draw a line, you can use the `DrawLine()` method:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制一条线，你可以使用`DrawLine()`方法：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The arguments `x1`, `y1` and `x2`, `y2` are for the x- and y-coordinates of
    the two end points of the line. To put this method into action, run the program
    in [Listing 3-1](ch03.html#ch3ex1), which draws two parallel lines.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 参数`x1`、`y1`和`x2`、`y2`是表示线条两个端点的x和y坐标。要使这个方法发挥作用，运行[示例3-1](ch03.html#ch3ex1)中的程序，它绘制了两条平行线。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 3-1: Drawing parallel lines*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-1：绘制平行线*'
- en: In line 3, Small Basic starts at the upper-left corner and then jumps to the
    right 40 and down 50\. From there, it draws the line to the right, to the (100,
    50) end point. Then, in line 4, it hops down to (40, 70) and draws a second line
    to the right, at the (100, 70) end point. Each pair of end points uses the same
    x-coordinates; the different y-coordinates draw the second line below the first
    line.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3行，Small Basic从左上角开始，然后向右移动40，再向下50。接着，它绘制一条到达（100，50）终点的线。然后，在第4行，它跳到（40，70），并绘制第二条线到达（100，70）终点。每对终点使用相同的x坐标；不同的y坐标则将第二条线绘制在第一条线的下方。
- en: Great job! But lines by themselves aren’t very exciting (unless they’re short
    lines at Disneyland). Let’s use several different lines to draw a sailboat like
    the one in [Figure 3-2](ch03.html#ch3fig2).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 做得很好！但是单独的线条并不太引人注目（除非它们是在迪士尼乐园的短线）。让我们使用几条不同的线条，像[图3-2](ch03.html#ch3fig2)中那样画一艘帆船。
- en: '![image](graphics/f03-02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-02.jpg)'
- en: '*Figure 3-2: A sailboat drawn entirely with line segments*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-2：完全由线段绘制的帆船*'
- en: This shape’s made up of seven line segments, and your program includes seven
    `DrawLine()` statements. The code for this program is in [Listing 3-2](ch03.html#ch3ex2),
    and you can see its output in [Figure 3-3](ch03.html#ch3fig3).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个形状由七个线段组成，你的程序包括七个`DrawLine()`语句。该程序的代码见[示例3-2](ch03.html#ch3ex2)，你可以在[图3-3](ch03.html#ch3fig3)中看到它的输出。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 3-2: Drawing a boat with seven lines*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 3-2：用七条线绘制一艘船*'
- en: Congratulations, you’ve just drawn your first picture in Small Basic. You’re
    well on your way to becoming a great artist.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你刚刚在Small Basic中绘制了你的第一幅画。你已经在成为一位伟大艺术家的路上了。
- en: '![image](graphics/f03-03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-03.jpg)'
- en: '*Figure 3-3: The output of* SailBoat.sb'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-3：* SailBoat.sb的输出'
- en: '**Drawing Shapes**'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绘制形状**'
- en: You can draw lots of cool pictures using lines, but that can be super slow.
    You can simplify your code by drawing geometric shapes with built-in methods,
    which also saves you a lot of time!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用线条绘制许多酷炫的图形，但那会非常慢。通过使用内置的方法绘制几何图形，你可以简化代码，这也能节省你大量的时间！
- en: '***Triangles***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***三角形***'
- en: 'Use the `DrawTriangle()` and `FillTriangle()` methods to draw triangles:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DrawTriangle()`和`FillTriangle()`方法绘制三角形：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These methods take the x- and y-coordinates of the three corners of the triangle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法接受三角形三个角的x和y坐标。
- en: The `DrawTriangle()` method draws the triangle’s outline, and the `FillTriangle()`
    method fills the inside of the triangle with whatever color you set the `BrushColor`
    property to.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`DrawTriangle()`方法绘制三角形的轮廓，而`FillTriangle()`方法则使用你为`BrushColor`属性设置的颜色填充三角形的内部。'
- en: '**TIP**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: '*For a complete list of colors you can use in the graphics window, please see*
    [http://tiny.cc/hexcolors/](http://tiny.cc/hexcolors/).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关你可以在图形窗口中使用的完整颜色列表，请参见* [http://tiny.cc/hexcolors/](http://tiny.cc/hexcolors/)。'
- en: 'For example, to fill a triangle with blue, use these two statements:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要用蓝色填充一个三角形，使用以下两个语句：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you want to see the border, then add a call to `DrawTriangle()`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到边框，可以添加对`DrawTriangle()`的调用：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Experiment with these methods to draw all kinds of triangles. Check your understanding
    with [Try It Out 3-1](ch03.html#ch03sb01).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试这些方法来绘制各种三角形。通过[实验 3-1](ch03.html#ch03sb01)检查你的理解。
- en: '**TRY IT OUT 3-1**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**实验 3-1**'
- en: 'Write a program that draws the shape in [Figure 3-4](ch03.html#ch3fig4). (Hint:
    start by drawing the four blue triangles, and then draw the four yellow triangles.)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制[图 3-4](ch03.html#ch3fig4)中显示的形状。（提示：先绘制四个蓝色三角形，再绘制四个黄色三角形。）
- en: '![image](graphics/f03-04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-04.jpg)'
- en: '*Figure 3-4: A fancy pinwheel*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-4：一个花式风车*'
- en: '***Rectangles and Squares***'
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***矩形和正方形***'
- en: 'Using the `DrawRectangle()` and `FillRectangle()` methods, you can draw rectangles
    or squares of different sizes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DrawRectangle()`和`FillRectangle()`方法，你可以绘制不同大小的矩形或正方形：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In both methods, the first two arguments (`x` and `y`) are the coordinates of
    the upper-left corner of the rectangle. The third argument sets the width, and
    the fourth argument sets the height. Use the same number for the third and fourth
    arguments to draw a square.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种方法中，前两个参数（`x`和`y`）是矩形左上角的坐标。第三个参数设置宽度，第四个参数设置高度。使用相同的数字作为第三和第四个参数来绘制正方形。
- en: To try out these methods, let’s write a program that draws the house shown in
    [Figure 3-5](ch03.html#ch3fig5).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了试验这些方法，让我们编写一个程序，绘制[图 3-5](ch03.html#ch3fig5)中显示的房子。
- en: '![image](graphics/f03-05.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-05.jpg)'
- en: '*Figure 3-5: Drawing a house*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-5：绘制房子*'
- en: The complete program is shown in [Listing 3-3](ch03.html#ch3ex3).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的程序显示在[列表 3-3](ch03.html#ch3ex3)中。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 3-3: Building the house of your dreams*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-3：建造你梦想中的房子*'
- en: '[Figure 3-6](ch03.html#ch3fig6) shows what the output looks like. The front
    side is a rectangle with its upper-left corner at (30, 50), a width of 80, and
    a height of 40 (line 3). The door is a filled rectangle with its upper-left corner
    at (40, 60), a width of 20, and a height of 30 (line 6).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-6](ch03.html#ch3fig6)显示了输出的效果。前面是一个矩形，其左上角位于(30, 50)，宽度为80，高度为40（第3行）。门是一个填充的矩形，其左上角位于(40,
    60)，宽度为20，高度为30（第6行）。'
- en: The window is a filled square with its upper-left corner at (80, 60) and a side
    length of 20 (line 10). The roof is a filled triangle whose three corner points
    are at (30, 50), (70, 10), and (110, 50).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 窗户是一个填充的正方形，其左上角位于(80, 60)，边长为20（第10行）。屋顶是一个填充的三角形，其三个角点分别位于(30, 50)、(70, 10)和(110,
    50)。
- en: '![image](graphics/f03-06.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-06.jpg)'
- en: '*Figure 3-6: The output of* House.sb'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-6：* House.sb的输出'
- en: The chimney is also a rectangle with its upper-left corner at (100, 20). Its
    width is 10 and height is 30 (line 13). However, part of this rectangle is covered
    by the roof, so you need to draw the chimney first, and then draw the roof on
    top of it to cover the bottom of the chimney.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 烟囱也是一个矩形，其左上角位于(100, 20)。宽度为10，高度为30（第13行）。然而，这个矩形的一部分被屋顶覆盖，因此你需要先绘制烟囱，然后再在其上方绘制屋顶，遮住烟囱的底部。
- en: Now you have the house of your dreams!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你拥有了你梦想中的房子！
- en: '**TRY IT OUT 3-2**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**实验 3-2**'
- en: Now that you can draw lines, triangles, rectangles, and squares, write a program
    that draws the fox shown in [Figure 3-7](ch03.html#ch3fig7). Add some colors.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以绘制线条、三角形、矩形和正方形，写一个程序绘制出 [图 3-7](ch03.html#ch3fig7) 中的狐狸。并为其添加一些颜色。
- en: '![image](graphics/f03-07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-07.jpg)'
- en: '*Figure 3-7: Drawing and coloring the fox*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-7：绘制并上色狐狸*'
- en: '***Ellipses and Circles***'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***椭圆和圆形***'
- en: '`GraphicsWindow` also has methods for drawing ellipses (ovals) and circles.
    Here are two ellipse methods that use four arguments:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`GraphicsWindow` 还具有绘制椭圆（椭圆形）和圆形的方法。这里有两个使用四个参数的椭圆方法：'
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[Figure 3-8](ch03.html#ch3fig8) explains these four arguments. The first two
    arguments, `x` and `y`, set the upper-left coordinate of the ellipse. The third
    argument, `width`, sets the width of the ellipse, and the fourth argument, `height`,
    sets the height of the ellipse. To draw a circle, just set the width and the height
    of the ellipse to the same value.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-8](ch03.html#ch3fig8) 解释了这四个参数。前两个参数 `x` 和 `y` 设置椭圆的左上坐标。第三个参数 `width`
    设置椭圆的宽度，第四个参数 `height` 设置椭圆的高度。要绘制一个圆形，只需将椭圆的宽度和高度设置为相同的值。'
- en: '![image](graphics/f03-08.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-08.jpg)'
- en: '*Figure 3-8: The four arguments for the ellipse-drawing methods*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-8：椭圆绘制方法的四个参数*'
- en: To use these drawing methods, let’s write a program that draws the face shown
    in [Figure 3-9](ch03.html#ch3fig9).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这些绘图方法，让我们编写一个程序，绘制出 [图 3-9](ch03.html#ch3fig9) 中的面孔。
- en: '![image](graphics/f03-09.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-09.jpg)'
- en: '*Figure 3-9: Drawing a face*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-9：绘制面孔*'
- en: To draw the face, you just have to draw a circle and some different ellipses
    using the right parameters. The full program is shown in [Listing 3-4](ch03.html#ch3ex4).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制面孔，你只需要绘制一个圆形和一些不同的椭圆，使用正确的参数。完整的程序请参见 [列表 3-4](ch03.html#ch3ex4)。
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Listing 3-4: Drawing the most awesome ellipse face ever*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-4：绘制史上最酷的椭圆面孔*'
- en: The output of this program is shown in [Figure 3-10](ch03.html#ch3fig10). All
    of the ellipses in this picture use the same pen size and color, but you can add
    even more detail to your Small Basic drawings by changing those properties. Let’s
    see how.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序的输出如 [图 3-10](ch03.html#ch3fig10) 所示。图中的所有椭圆都使用相同的笔宽和颜色，但你可以通过改变这些属性，给你的
    Small Basic 绘图添加更多细节。让我们看看怎么做。
- en: '![image](graphics/f03-10.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-10.jpg)'
- en: '*Figure 3-10: The output of* Face.sb'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-10：* Face.sb 的输出'
- en: '***Pen Size and Color***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***笔的大小和颜色***'
- en: 'To change the pen size and color, you can set the following properties before
    you draw a line or a shape:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变笔的大小和颜色，可以在绘制线条或形状之前设置以下属性：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to mix things up, you can change your pen color every time you
    run your program by using the `GetRandomColor()` method of the `GraphicsWindow`
    object. Check it out:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让程序每次运行时都有不同的效果，可以通过使用 `GraphicsWindow` 对象的 `GetRandomColor()` 方法每次改变笔的颜色。看看这个：
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This method doesn’t have any arguments, which is why there’s nothing in the
    `GetRandomColor()` method’s parentheses; it returns a randomly selected color.
    Go ahead and try it out!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法没有任何参数，这就是为什么 `GetRandomColor()` 方法的括号里什么也没有；它返回一个随机选定的颜色。试试看吧！
- en: '***Pen Width and Shape Size***'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***笔宽和形状大小***'
- en: When drawing triangles, rectangles, and ellipses, the width of the pen you use
    in the drawing affects the size of the shape. [Listing 3-5](ch03.html#ch3ex5)
    shows you what we mean.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制三角形、矩形和椭圆时，你使用的笔宽会影响形状的大小。[列表 3-5](ch03.html#ch3ex5) 显示了我们的意思。
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 3-5: Using pen width to change the size of the shape*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-5：使用笔宽改变形状的大小*'
- en: This program uses a pen with a width of 20 to draw the border of the circle.
    [Figure 3-11](ch03.html#ch3fig11) shows that the border extends 10 pixels out
    from the perimeter of the square, even though the circle and the square have the
    same dimensions. When measured across the outside edges, the diameter of the output
    circle is 120 pixels instead of the specified value of 100.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序使用宽度为 20 的笔绘制圆形的边框。[图 3-11](ch03.html#ch3fig11) 显示了边框从正方形的周围延伸出 10 像素，尽管圆形和正方形具有相同的尺寸。当测量外部边缘时，输出圆形的直径为
    120 像素，而不是指定的 100 像素。
- en: '![image](graphics/f03-11.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-11.jpg)'
- en: '*Figure 3-11: The output of* PenWidthDemo.sb'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-11：* PenWidthDemo.sb 的输出'
- en: '**TRY IT OUT 3-3**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**试一试 3-3**'
- en: 'Write a program that draws a bike like the one shown in [Figure 3-12](ch03.html#ch3fig12).
    (Hint: use the given grid lines to figure out the coordinates of the different
    shapes to make them easier to code.)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制如[图3-12](ch03.html#ch3fig12)所示的自行车。（提示：使用给定的网格线来确定不同形状的坐标，以便更容易编写代码。）
- en: '![image](graphics/f03-12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-12.jpg)'
- en: '*Figure 3-12: Drawing a bike*'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-12：绘制一辆自行车*'
- en: '**Drawing Text**'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**绘制文本**'
- en: 'A picture might be worth a thousand words, but you can also draw text in the
    graphics window, like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一张图片可能胜过千言万语，但你也可以像这样在图形窗口中绘制文本：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`DrawText()` takes three arguments. The first two arguments set the x- and
    y-coordinates of the upper-left corner of the text, and the third argument takes
    a string of the text (or numbers) you want to draw. Remember to put the string
    in quotes.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`DrawText()`接受三个参数。前两个参数设置文本左上角的x和y坐标，第三个参数接受你要绘制的文本（或数字）字符串。记得将字符串放在引号内。'
- en: If you want to change how the text appears, use the `GraphicsWindow` object
    properties in [Table 3-1](ch03.html#ch3table1).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想更改文本的显示方式，请使用[表3-1](ch03.html#ch3table1)中`GraphicsWindow`对象的属性。
- en: '**Table 3-1:** `GraphicsWindow` Properties for the Font Name, Size, Style,
    and Color'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**表3-1：** 字体名称、大小、样式和颜色的`GraphicsWindow`属性'
- en: '| **Property** | **Default** | **Description** |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **默认值** | **描述** |'
- en: '| --- | --- | --- |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `FontName` | `"Tahoma"` | The name of the font |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `FontName` | `"Tahoma"` | 字体名称 |'
- en: '| `FontSize` | `12` | The size of the font |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `FontSize` | `12` | 字体大小 |'
- en: '| `FontBold` | `"True"` | Whether or not the font’s bold |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `FontBold` | `"True"` | 字体是否加粗 |'
- en: '| `FontItalic` | `"False"` | Whether or not the font’s italic |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `FontItalic` | `"False"` | 字体是否斜体 |'
- en: '| `BrushColor` | `"SlateBlue"` | The color of the brush that draws the text
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `BrushColor` | `"SlateBlue"` | 绘制文本的画笔颜色 |'
- en: If you don’t change any of these properties, Small Basic uses the default values
    listed in [Table 3-1](ch03.html#ch3table1). The program in [Listing 3-6](ch03.html#ch3ex6)
    changes these properties to draw some fancy text.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有更改这些属性，Small Basic将使用[表3-1](ch03.html#ch3table1)中列出的默认值。[列表3-6](ch03.html#ch3ex6)中的程序更改了这些属性来绘制一些华丽的文本。
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Listing 3-6: Trying out some fonts*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-6：尝试一些字体*'
- en: In line 3, the `BackgroundColor` property changes the background color of the
    graphics window. Lines 4–6 set the name, size, and italics properties of the font
    you use in any calls to `DrawText()`. Line 8 sets the color of the font using
    the `BrushColor` property, and line 9 draws the string `"Hello!"` starting at
    point (5, 5). This line draws the background shadow you see in [Figure 3-13](ch03.html#ch3fig13).
    In line 11, the program changes the `BrushColor` property, and then line 12 draws
    the same string in a slightly different position. This creates the appearance
    of text with a background shadow, as shown in [Figure 3-13](ch03.html#ch3fig13).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3行，`BackgroundColor`属性更改图形窗口的背景颜色。第4到6行设置在任何调用`DrawText()`时使用的字体的名称、大小和斜体属性。第8行使用`BrushColor`属性设置字体颜色，第9行从点(5,
    5)开始绘制字符串`"Hello!"`。这一行绘制了你在[图3-13](ch03.html#ch3fig13)中看到的背景阴影。在第11行，程序更改了`BrushColor`属性，然后第12行在略微不同的位置绘制了相同的字符串。这创建了带有背景阴影的文本效果，如[图3-13](ch03.html#ch3fig13)所示。
- en: '![image](graphics/f03-13.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-13.jpg)'
- en: '*Figure 3-13: The output of* Fonts.sb'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*图3-13：* Fonts.sb的输出'
- en: By layering text on top of other text like this, you can create some cool effects.
    Try playing with this code to see what you can come up with!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将文本层叠在其他文本上方，你可以创造一些很酷的效果。试着玩玩这段代码，看看你能做出什么！
- en: 'You can also draw text to fit a certain width by using the `DrawBoundText()`
    method:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用`DrawBoundText()`方法将文本绘制为适应特定宽度：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The parameters `x`, `y`, and `"text`" mean the same as they do in the `DrawText()`
    method: `x` and `y` are where you start to draw, and `"text`" is the string of
    text or numbers to draw. The third argument, `width`, tells Small Basic the maximum
    available width for the text in the output. If the text doesn’t fit in the given
    width, then it continues on a new line. Even though the rectangle that the text
    appears in has a fixed width, the text keeps going, so the rectangle text area
    stretches vertically for as long as it needs to. But if one word’s too long to
    fit in your *bound* rectangle (which happens, especially if the font’s too big),
    then it gets clipped! The program in [Listing 3-7](ch03.html#ch3ex7) and its output
    in [Figure 3-14](ch03.html#ch3fig14) show you what we mean.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `x`、`y` 和 `"text"` 的含义与 `DrawText()` 方法中的相同：`x` 和 `y` 是你开始绘制的位置，而 `"text"`
    是要绘制的文本或数字字符串。第三个参数 `width` 告诉 Small Basic 输出中文本的最大可用宽度。如果文本超出了给定的宽度，它将继续换行。尽管文本所显示的矩形区域宽度是固定的，但文本会继续显示，因此矩形文本区域会根据需要垂直扩展。但是，如果一个单词太长，无法适应你定义的*边界*矩形（尤其是在字体过大的情况下），那么它会被截断！[列表
    3-7](ch03.html#ch3ex7) 中的程序和 [图 3-14](ch03.html#ch3fig14) 中的输出会向你展示我们所说的意思。
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Listing 3-7: Boundaries that contain the text*'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-7：包含文本的边界*'
- en: The text in the invisible rectangle on the left automatically wraps to make
    sure it doesn’t go beyond the width you specified. In the *bound* rectangle on
    the right, the text gets clipped because it’s too long to fit. Small Basic displays
    three dots, called an *ellipsis*, indicating that text has been clipped.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧不可见矩形中的文本会自动换行，以确保文本不会超出你指定的宽度。在右侧的*边界*矩形中，文本被截断，因为它太长无法适应。Small Basic 会显示三个点，即*省略号*，表示文本已经被截断。
- en: '![image](graphics/f03-14.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-14.jpg)'
- en: '*Figure 3-14: The output of* BoundTextDemo.sb'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-14：*BoundTextDemo.sb* 的输出*'
- en: '**Inserting Images**'
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**插入图像**'
- en: 'Some images might be too complicated to draw with basic shapes, or they might
    just take too long to code. Instead, you can draw those images ahead of time with
    a paint program and then use them in your application. `GraphicsWindow` provides
    two methods to insert images. Although these methods start with *Draw*, they actually
    insert an existing image in the graphics window:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 有些图像可能太复杂，无法用基本形状绘制，或者它们可能需要花费太长时间来编码。相反，你可以提前用画图程序绘制这些图像，然后在你的应用程序中使用它们。`GraphicsWindow`
    提供了两种方法来插入图像。尽管这些方法的名称以*Draw*开头，但它们实际上是在图形窗口中插入一个已有的图像：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Both methods take the image pathname and the x- and y-coordinates to determine
    the image’s location in the graphics window. `DrawResizedImage()` takes two additional
    arguments (`width` and `height`) so you can resize the input image.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都需要图像路径名以及 x 和 y 坐标来确定图像在图形窗口中的位置。`DrawResizedImage()` 方法额外接受两个参数（`width`
    和 `height`），让你能够调整输入图像的大小。
- en: '[Listing 3-8](ch03.html#ch3ex8) shows the `DrawImage()` method with an example
    image.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 3-8](ch03.html#ch3ex8)展示了带有示例图像的 `DrawImage()` 方法。'
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Listing 3-8: Inserting your first image*'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 3-8：插入你的第一张图像*'
- en: The program starts by setting the width and height of `GraphicsWindow` to 320
    and 240 pixels, respectively, to match the size of the image. Line 5 calls `DrawImage()`
    and passes in the pathname where the image is saved. In lines 7–9, the program
    draws the white text `Hello Moon!` on top of the background image. When you run
    this program on your computer, make sure you set the path in line 5 to the correct
    location of the *BkGnd.bmp* file on your computer. [Figure 3-15](ch03.html#ch3fig15)
    shows the output.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 程序开始时设置了 `GraphicsWindow` 的宽度和高度，分别为 320 和 240 像素，以匹配图像的大小。第 5 行调用了 `DrawImage()`
    并传入了图像保存的路径名。在第 7 到第 9 行，程序在背景图像上绘制了白色文本 `Hello Moon!`。当你在电脑上运行这个程序时，确保将第 5 行中的路径设置为你电脑上
    *BkGnd.bmp* 文件的正确位置。[图 3-15](ch03.html#ch3fig15) 显示了输出结果。
- en: '![image](graphics/f03-15.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![image](graphics/f03-15.jpg)'
- en: '*Figure 3-15: The output of* ImageDemo.sb'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-15：*ImageDemo.sb* 的输出*'
- en: '**NOTE**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Small Basic can also draw images from the Web. Here’s an example:*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '*Small Basic 还可以从网络上绘制图像。以下是一个示例：*'
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Programming Challenges**'
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程挑战**'
- en: If you get stuck, check out *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    for the solutions and for more resources and review questions for teachers and
    students.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到困难，可以访问 *[http://nostarch.com/smallbasic/](http://nostarch.com/smallbasic/)*
    查找解决方案，并获取更多的资源和针对教师和学生的复习题目。
- en: 'Write a program that connects the following six points with line segments:
    (20, 110), (110, 50), (10, 50), (100, 110), (60, 20), (20, 110). What shape do
    you get?'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，用线段连接以下六个点：（20, 110），（110, 50），（10, 50），（100, 110），（60, 20），（20, 110）。你得到的是什么形状？
- en: What’s the output of the following program?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下程序的输出是什么？
- en: '[PRE20]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What’s the output of the following program?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下程序的输出是什么？
- en: '[PRE21]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: What’s the strangest thing in your house? Draw it using the `DrawLine()` method.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你家里最奇怪的东西是什么？用`DrawLine()`方法画出来。
- en: The following problems show a grid to make it easier for you to draw the shapes.
    You can use any size you like for the grid. We recommend 20 pixels.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题显示了一个网格，以便你更容易绘制形状。你可以选择任何大小的网格。我们推荐使用20像素。
- en: Write a program that draws this star.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制这颗星星。
- en: '![image](graphics/f0039-01.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0039-01.jpg)'
- en: Write a program that draws this bank, using any colors you’d like.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制这座银行，使用你喜欢的任何颜色。
- en: '![image](graphics/f0040-01.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0040-01.jpg)'
- en: Write a program that draws this truck. For extra credit, add front wheels.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制这辆卡车。额外加分，添加前轮。
- en: '![image](graphics/f0040-02.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0040-02.jpg)'
- en: Write a program that draws a traffic light like this one.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制像这样的交通信号灯。
- en: '![image](graphics/f0040-03.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0040-03.jpg)'
- en: Write a program that draws a train like this one.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制像这样的火车。
- en: '![image](graphics/f0040-04.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0040-04.jpg)'
- en: Write a program that draws the following shape.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制以下形状。
- en: '![image](graphics/f0041-01.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0041-01.jpg)'
- en: Write a program that draws this person.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制这个人。
- en: '![image](graphics/f0041-02.jpg)'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0041-02.jpg)'
- en: Write a program that draws a soccer field similar to this one.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，绘制一个类似这样的足球场。
- en: '![image](graphics/f0041-03.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](graphics/f0041-03.jpg)'
