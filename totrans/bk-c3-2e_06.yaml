- en: '**6**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**TEXT EFFECTS AND TYPOGRAPHIC STYLES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Text content has been the backbone of the Web since its creation, yet for years
    we’ve had to make do with a limited set of tools. CSS3 hugely expands its typographic
    toolset by introducing a range of new and updated features in the Text Module.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Chief among these new features is the ability to add shadows to text. Although
    this addition doesn’t sound particularly revolutionary—print typographers have
    been using shadows for a long time—the new syntax is flexible enough to allow
    for some very nice effects. A similar feature is textoutlining (or text-stroking),
    which, although not widely implemented, does increase the variety of options available
    when creating decorative headlines. In addition to these are some less flashy
    effects but ones that can do wonders for your text’s readability.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: The CSS Text Level 3 Module (*[http://www.w3.org/TR/css3-text/](http://www.w3.org/TR/css3-text/)*)
    currently has Last Call Working Draft status; however, some elements are well
    implemented and ready for you to use straightaway.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Before I introduce the first new property in this module, I’ll briefly introduce
    the concepts of coordinates and axes. If you’re already familiar with these, feel
    free to skip this section; otherwise, read on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding Axes and Coordinates**'
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One syntax concept that’s new to CSS3 is that of the *axis* (or *axes* when
    you have more than one). You may know all about axes if you remember your math
    lessons, but if you’re reading this section, I assume you need a refresher.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS uses the *Cartesian coordinate system*, which consists of two lines, one
    horizontal and one vertical, that cross each other at a right angle. Each of these
    lines is an axis: The horizontal line is known as the *x-axis*, and the vertical
    line is known as the *y-axis*. The point where the two lines meet is called the
    *origin*. You can see this illustrated in [Figure 6-1](ch06.html#ch06fig1).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](graphics/f06-01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6-1: The x-* *and* y*-axes and the point of origin*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: For onscreen items, you measure the lengths of these axes in pixels. In [Figure
    6-1](ch06.html#ch06fig1), you can see the axes and origin are overlaid on a grid.
    Imagine that each square corresponds to a single pixel. You’ll also notice positive
    (+) and negative (−) labels at either end of each axis; these tell you that the
    distance away from the origin will be measured either positively or negatively
    in this direction.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand this concept, you can find the coordinates of any point
    relative to the origin. The *coordinates* are a pair of values—one for each axis—that
    indicate the distance from the origin. The origin has coordinates (0, 0). For
    example, given the coordinates (3, 4), you would find the point by moving 3 pixels
    along the *x*-axis, and 4 pixels along the *y*-axis (remember the first line on
    each axis is 0 and is not counted). Likewise, the coordinates (−3, −1) indicate
    a point 3 pixels in a negative direction away from the origin along the *x*-axis
    and 1 pixel away from the origin in a negative direction along the *y*-axis. You
    can see both of these values plotted on the chart in [Figure 6-2](ch06.html#ch06fig2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你理解了这个概念，你可以找到任何点相对于原点的坐标。*坐标*是一对数值——每个轴一个——表示从原点的距离。原点的坐标是 (0, 0)。例如，给定坐标
    (3, 4)，你可以通过在 *x* 轴上移动 3 像素，在 *y* 轴上移动 4 像素来找到这个点（记住，每个轴上的第一条线是 0，不计算在内）。同样，坐标
    (−3, −1) 表示一个点在 *x* 轴上远离原点 3 像素，且在 *y* 轴上远离原点 1 像素。你可以在[图 6-2](ch06.html#ch06fig2)的图表上看到这两个值。
- en: '![Image](graphics/f06-02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f06-02.jpg)'
- en: '*Figure 6-2: Two sets of coordinates*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-2：两组坐标*'
- en: If this all sounds terribly complicated, don’t worry—you’ve been using the Cartesian
    coordinate system already with properties like `background-position`; you just
    didn’t realize it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些听起来非常复杂，不用担心——你已经在使用笛卡尔坐标系了，比如`background-position`这样的属性；只是你没有意识到而已。
- en: In CSS, all elements have a height and a width, each of which is a stated number
    of pixels in length (even when using other length units such as em or a percentage).
    The height and width together create a *pixel grid*; for example, an element that
    is 10px by 10px in size has a pixel grid of 100px. If you consider that the origin
    of the element is at the top-left corner, then the two positional values for properties
    like `background-position` correspond exactly to the *x*- and *y*-coordinates.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS 中，所有元素都有高度和宽度，每个都表示为一个像素的数值（即使使用其他长度单位如 em 或百分比）。高度和宽度一起创建了一个*像素网格*；例如，一个大小为
    10px × 10px 的元素，其像素网格为 100px。如果你认为元素的原点位于左上角，那么像`background-position`这样的属性的两个位置值就完全对应于
    *x* 和 *y* 坐标。
- en: '**NOTE**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In CSS, the default origin is the top-left corner of an element, but that
    isn’t always fixed; some CSS properties allow you to change the origin’s position.
    For instance, you could set the origin at the dead center of an element or at
    the bottom-right corner or anywhere you wish. We’ll see this later in this book,
    for example when dealing with 2D Transformations in [Chapter 12](ch12.html#ch12).*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 CSS 中，默认的原点是元素的左上角，但这并不是固定不变的；某些 CSS 属性允许你更改原点的位置。例如，你可以将原点设置在元素的正中心、右下角或任何你希望的位置。我们将在本书后面看到这一点，例如在[第
    12 章](ch12.html#ch12)处理 2D 转换时。*'
- en: '**Applying Dimensional Effects: text-shadow**'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**应用维度效果：text-shadow**'
- en: The ability to apply drop shadows to text using the `text-shadow` property has
    been around for a long time; Safari first implemented it in version 1.1, which
    was released in 2005\. So you might be wondering why I am discussing it in a book
    on CSS3\. As with the font properties in [Chapter 5](ch05.html#ch05), `text-shadow`
    was dropped from CSS2.1 owing to lack of implementation, but this property has
    been reinstated in the CSS3 spec and is well implemented in browsers today.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `text-shadow` 属性为文本添加阴影的功能已经存在很长时间了；Safari 首次在 1.1 版本中实现了该功能，并在 2005 年发布。所以你可能会好奇，为什么我在一本关于
    CSS3 的书中讨论它。和[第 5 章](ch05.html#ch05)中的字体属性一样，`text-shadow` 在 CSS2.1 中由于缺乏实现而被删除，但这个属性已经在
    CSS3 规范中重新加入，并且如今在浏览器中得到了良好的实现。
- en: 'The position of the shadow is set using the *x*- and *y*-coordinates that I
    just introduced. The simplest form of the syntax accepts two values: *x* to set
    the horizontal distance from the text (known as the *x-offset*) and *y* to set
    the vertical distance (the *y-offset*):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影的位置是通过我刚才介绍的 *x* 和 *y* 坐标来设置的。最简单的语法形式接受两个值：*x* 用于设置文本的水平距离（称为 *x-offset*），*y*
    用于设置垂直距离（即 *y-offset*）：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By default, the shadow will be the color that it inherited from its parent
    (usually black), so if you want to specify a different color, you need to provide
    a value for that, such as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，阴影将继承自父元素的颜色（通常是黑色），因此如果你想指定不同的颜色，你需要为其提供一个值，例如：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here’s an example of a gray (hex code #BBB) drop shadow located 3px to the
    right and 3px down from the original text:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '这是一个示例，展示了一个灰色（十六进制代码 #BBB）阴影，位于原始文本的右侧 3px 和下方 3px：'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can see the output of this code in [Figure 6-3](ch06.html#ch06fig3).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 6-3](ch06.html#ch06fig3)中看到此代码的输出。
- en: '![Image](graphics/f06-03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f06-03.jpg)'
- en: '*Figure 6-3: Simple* `*text-shadow*`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：简单的`*text-shadow*`*'
- en: 'You aren’t limited to positive integers as offset values; you can use both
    0 (zero) and negative numbers to get different effects. Here are a few examples:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 偏移值不仅限于正整数；你还可以使用 0（零）和负数来获得不同的效果。以下是一些示例：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see the output of these examples in [Figure 6-4](ch06.html#ch06fig4).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 6-4](ch06.html#ch06fig4)中看到这些示例的输出。
- en: '![Image](graphics/f06-04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f06-04.jpg)'
- en: '*Figure 6-4: Different axis offset values for* `*text-shadow*`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-4：`*text-shadow*` 的不同轴偏移值*'
- en: The first example (➊) uses negative values for both axes, so the shadow is rendered
    above and to the left of the text. The next (➋) uses a negative value for the
    *x*-axis and a positive value for the *y*-axis, so the shadow renders below and
    to the left. The final example (➌) has a negative value for the *x*-axis and a
    value of 0 for *y*-axis, so the shadow renders to the left and on the same baseline.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例（➊）使用了两个轴的负值，因此阴影渲染在文本的上方和左侧。下一个示例（➋）对 *x* 轴使用负值，对 *y* 轴使用正值，因此阴影渲染在文本的下方和左侧。最后一个示例（➌）对
    *x* 轴使用负值，对 *y* 轴使用 0 值，因此阴影渲染在文本的左侧，并且位于同一基线。
- en: 'The `text-shadow` property also has a fourth option: `*blur-radius*`. This
    option sets the extent of a blur effect on the shadow and must be used after the
    offset values:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-shadow` 属性还具有第四个选项：`*blur-radius*`。此选项设置阴影模糊效果的范围，必须在偏移值之后使用：'
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The blur radius value is, like the two offset values, also an integer with
    a length unit; the higher the value, the wider (and lighter) the blur. If no value
    is supplied (as in the examples shown in [Figure 6-4](ch06.html#ch06fig4)), the
    blur radius is assumed to be 0\. Here are a couple of examples:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊半径值与两个偏移值一样，也是带有长度单位的整数；值越大，模糊效果越宽（且越浅）。如果没有提供值（如[图 6-4](ch06.html#ch06fig4)中所示的示例），则默认模糊半径为
    0。以下是几个示例：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can see the output of these examples in [Figure 6-5](ch06.html#ch06fig5).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 6-5](ch06.html#ch06fig5)中看到这些示例的输出。
- en: '![Image](graphics/f06-05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f06-05.jpg)'
- en: '*Figure 6-5: Different blur values for* `*text-shadow*`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-5：`*text-shadow*` 的不同模糊值*'
- en: In the first example, I set the same offset values as in [Figure 6-4](ch06.html#ch06fig4),
    but with a blur radius of 3px. The result is a much softer, more “natural” shadow.
    In the second example, I’ve set 0 values for the offsets and a 3px blur radius,
    matching the text to the background and creating the illusion that the text is
    raised.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我设置了与[图 6-4](ch06.html#ch06fig4)中相同的偏移值，但模糊半径为 3px。结果是一个更柔和、更“自然”的阴影。在第二个示例中，我设置了偏移值为
    0，模糊半径为 3px，使文本与背景匹配，产生文本被提升的错觉。
- en: '***Multiple Shadows***'
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***多个阴影***'
- en: 'You don’t have to limit yourself to a single shadow—`text-shadow`’s syntax
    supports adding multiple shadows to a text node. Just supply extra values to the
    property, using commas to separate them, like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必局限于单一阴影——`text-shadow` 的语法支持为文本节点添加多个阴影。只需为属性提供额外的值，并使用逗号分隔它们，如下所示：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The shadows are applied in the order you supply the values. [Figure 6-6](ch06.html#ch06fig6)
    shows two examples of multiple shadows in action.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 阴影按照你提供的值顺序应用。[图 6-6](ch06.html#ch06fig6)展示了多个阴影效果的两个示例。
- en: '![Image](graphics/f06-06.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f06-06.jpg)'
- en: '*Figure 6-6: Using multiple values with* `*text-shadow*`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-6：使用多个值的`*text-shadow*`*'
- en: The CSS for these examples is shown here. The first example has a class of `one`,
    and the second has a class of `two`. Note that I’ve indented them for clarity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例的 CSS 如下所示。第一个示例有一个类 `one`，第二个示例有一个类 `two`。请注意，我已将它们缩进以便于理解。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the first example, I’ve kept the x-offset at 0 while increasing the y-offset’s
    negative value from −2px to −8px. The blur radius increases from 3px to 9px, and
    the color gets gradually darker, creating a ghostly pale outline behind the characters,
    which becomes a darker shadow as it gets farther from the characters.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，我将 x 偏移保持为 0，同时将 y 偏移的负值从 −2px 增加到 −8px。模糊半径从 3px 增加到 9px，颜色逐渐变暗，形成文本后面幽灵般的淡轮廓，随着远离文本，阴影变得更暗。
- en: In the second example, the x-offset also remains consistent, but this time the
    y-offset increases its value positively. Because the `*blur-radius*` value isn’t
    specified, it stays at 0\. Here, I’ve used the `rgba()` color function (which
    I explain in [Chapter 10](ch10.html#ch10)), so the color stays the same but is
    partially transparent, creating an overlapping effect. Although the value changes
    are fairly small, the visual difference between the two elements is quite profound.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，x 偏移量仍然保持一致，但这次 y 偏移量的值增加了。由于没有指定 `*blur-radius*` 值，它保持为 0。在这里，我使用了
    `rgba()` 颜色函数（在 [第 10 章](ch10.html#ch10) 中有解释），所以颜色保持不变但部分透明，创建了重叠效果。尽管值的变化相对较小，但这两个元素之间的视觉差异非常显著。
- en: As I said earlier, `text-shadow` is well implemented in browsers, with support
    in IE10+ and all other major browsers, including mobile.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前所说，`text-shadow` 在浏览器中实现得很好，IE10+ 和所有其他主流浏览器，包括移动端，都支持该功能。
- en: '**Restricting Overflow**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**限制溢出**'
- en: Under certain circumstances—perhaps on mobile devices where screen space is
    limited—you may want to restrict text to a single line and a fixed width, perhaps
    when displaying a list of links to other pages, where you don’t want the link
    text to wrap onto multiple lines. In these circumstances, your text being wider
    than its container and getting clipped mid-character can be quite frustrating.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下——例如在屏幕空间有限的移动设备上——你可能希望将文本限制为单行且固定宽度，尤其是在展示链接列表时，这样你不希望链接文本换行。如果文本超出其容器并被中断，可能会非常令人沮丧。
- en: 'A new property called `text-overflow` is available in CSS3 for just those circumstances.
    Here’s its syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CSS3 中，为了应对这种情况，新增了一个名为 `text-overflow` 的属性。它的语法如下：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The permitted keyword values are `clip` and `ellipsis`. The default value is
    `clip`, which acts in the way I just described: Your text is clipped at the point
    where it flows out of the container element. But the new value that’s really interesting
    is `ellipsis`, which replaces the last whole or partial character before the overflow
    with an ellipsis character—the one that looks like three dots (…).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 允许的关键字值是 `clip` 和 `ellipsis`。默认值是 `clip`，它的作用如我之前所描述的：文本在溢出容器元素的地方被截断。但新的值——`ellipsis`——非常有趣，它会在溢出之前的最后一个完整或部分字符处用一个省略号字符（…）代替。
- en: 'Let’s walk through an example using the following CSS:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下 CSS 示例来演示：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On this `p` element, I set the value of `overflow` to `hidden` to prevent the
    content showing outside of the border, the value of the `white-space` property
    to `nowrap` to prevent the text from wrapping over multiple lines, and a value
    of `ellipsis` on the `text-overflow` property. You can see the result, compared
    with the default behavior, in [Figure 6-7](ch06.html#ch06fig7).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `p` 元素中，我将 `overflow` 的值设置为 `hidden`，以防止内容显示在边框外，`white-space` 属性的值设置为 `nowrap`，以防止文本换行，并且将
    `text-overflow` 属性的值设置为 `ellipsis`。你可以在 [图 6-7](ch06.html#ch06fig7) 中查看与默认行为相比的效果。
- en: '![Image](graphics/f06-07.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f06-07.jpg)'
- en: '*Figure 6-7: The* `*text-overflow*` *property with a value of* `*ellipsis*`
    *(bottom)*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-7：带有 `*text-overflow*` 属性值为 `*ellipsis*` 的效果（底部）*'
- en: The last word in the sentence has been truncated and an ellipsis used in place
    of the removed characters, signifying that the line has been truncated.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 句子中的最后一个词被截断，并且用省略号代替了被移除的字符，表示该行已经被截断。
- en: The `text-overflow` property was originally specified in the Text Module, but
    has since been moved to the Basic User Interface Module (*[http://www.w3.org/TR/css3-ui/](http://www.w3.org/TR/css3-ui/)*).
    This property is implemented in all major browsers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-overflow` 属性最初是在文本模块中定义的，但后来被移到了基本用户界面模块中（* [http://www.w3.org/TR/css3-ui/](http://www.w3.org/TR/css3-ui/)*）。该属性已在所有主流浏览器中实现。'
- en: 'The specification also extends the basic syntax in two ways. First, you can
    provide two values to the property—a first for overflow at the end of a line and
    a second for overflow at the start. For example, if you negatively indented text
    that also overflowed its container, you could put ellipses on both ends:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该规范还以两种方式扩展了基本语法。首先，你可以为该属性提供两个值——一个是行尾的溢出值，另一个是行首的溢出值。例如，如果你给文本设置了负缩进并且文本超出了容器，你可以在两端加上省略号：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The second extension offers a third possible keyword value, which is a string
    of characters to be used instead of the ellipsis, like in this example where I
    use a tilde to show the overflow:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个扩展提供了一个第三个可能的关键字值，这个值是一个字符串，可以替代省略号，就像这个示例中我用波浪号来展示溢出效果：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These extensions are currently implemented only in Firefox and are marked in
    the spec as being at risk of being removed at a later date.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些扩展目前仅在Firefox中实现，并在规范中标记为可能在以后被移除。
- en: '**Aligning Text**'
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**文本对齐**'
- en: 'The `text-align` property has been around for a long time, but CSS3 adds two
    new values to it: `start` and `end`. For people who read left-to-right, they are
    equivalent to the values `left` and `right` (respectively). Their real usefulness
    is on internationalized sites that may also use right-to-left text, however. You
    can use these new values in most modern browsers, with the exception of Internet
    Explorer.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`text-align`属性已经存在很长时间，但CSS3为它新增了两个值：`start`和`end`。对于从左到右阅读的人来说，它们分别等同于`left`和`right`。然而，它们的真正用途是在国际化网站中，特别是那些可能使用从右到左的文本的站点。你可以在大多数现代浏览器中使用这些新值，但Internet
    Explorer除外。'
- en: 'New to CSS3 is the `text-align-last` property, which lets you set the alignment
    of the last (or only) line of text in a justified block. This property accepts
    the same values as `text-align`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3新增了`text-align-last`属性，允许你设置对齐方式，以便对齐文本块中的最后一行（或唯一一行）文本。此属性接受与`text-align`相同的值：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: So if you want to justify a block of text but also align the last line to the
    right, you would use
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想让一块文本对齐，但也希望最后一行对齐到右边，你可以使用：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: At the time of writing, this extension is implemented in Internet Explorer (although,
    again, without the `start` and `end` keyword values), Firefox with the `-moz-`
    prefix, and Chrome.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 截至写作时，这个扩展已在Internet Explorer中实现（不过，仍没有`start`和`end`关键字值），在Firefox中以`-moz-`前缀实现，并且在Chrome中也有实现。
- en: '**Controlling Line Wrapping**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**控制行换行**'
- en: An issue that’s frequently encountered when working with dynamic text is line
    wrapping in inappropriate places. For example, if you’re providing details about
    an event, you want the start time and end time to appear next to each other on
    the same line, but with a dynamic line break, the end time may be pushed to the
    subsequent line. CSS3 gives you more control over these kinds of issues with a
    pair of properties that lets you define more clearly how you want your content
    to wrap.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理动态文本时，常常遇到的一个问题是行在不合适的位置换行。例如，当你提供一个事件的详细信息时，你希望开始时间和结束时间显示在同一行，但如果出现动态换行，结束时间可能会被推到下一行。CSS3通过一对属性，让你能更清晰地定义如何让内容换行，从而让你对这些问题有更多的控制权。
- en: '***Breaking Words***'
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***拆分单词***'
- en: 'The first property is `word-wrap`, which specifies whether the browser can
    break long words to make them fit into the parent element. The syntax for it is
    simple:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性是`word-wrap`，它指定浏览器是否可以拆分长单词以使其适应父元素。它的语法非常简单：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This property allows the keyword values `normal` or `break-word`. The former
    allows lines to break only between words (unless otherwise specified in the markup),
    and the latter allows a word to be broken if required to prevent overflow of the
    parent element.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性允许使用`normal`或`break-word`的关键字值。前者只允许在单词之间换行（除非在标记中另有指定），后者则允许单词在必要时被拆分，以防止父元素溢出。
- en: 'So, for example, if I want to allow long words to be wrapped instead of overflowing
    their containing element, I might use:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，举个例子，如果我想允许长单词换行，而不是让它们溢出其包含元素，我可以使用：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[Figure 6-8](ch06.html#ch06fig8) shows this effect. The left block doesn’t
    use word wrapping, and the right block does.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-8](ch06.html#ch06fig8)展示了这个效果。左边的块没有使用单词换行，而右边的块则使用了。'
- en: '![Image](graphics/f06-08.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图像](graphics/f06-08.jpg)'
- en: '*Figure 6-8: Example of text with (left) and without (right) a* `*break-word*`
    *value for* `*word-wrap*`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-8：带有（左）和不带（右）`*break-word*`值的`*word-wrap*`的文本示例*'
- en: The `word-wrap` property is widely implemented across all major browsers, including
    Internet Explorer. Recent versions of the Text Module have renamed `word-wrap`
    to `overflow-wrap`, however, and some browsers—Chrome and Safari, for example—have
    implemented the new name, although the old name will also be supported for legacy
    reasons.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`word-wrap`属性在所有主流浏览器中得到广泛支持，包括Internet Explorer。最近的文本模块版本已将`word-wrap`重命名为`overflow-wrap`，不过一些浏览器——例如Chrome和Safari——已经实现了新的名称，尽管出于兼容性原因，旧名称也将继续得到支持。'
- en: '***Hyphenating Words***'
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***单词连字符***'
- en: If you’d prefer an extra option for breaking words over multiple lines, you
    can use hyphenation. Long a standard of print, hyphens indicate where the break
    in a word occurs. You can hyphenate your text already in HTML, using the soft-hyphenation
    symbol entity, `&shy;`—although this requires that you mark up all of your content,
    which is not always an option.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢有一个额外的选项来将单词分隔到多行，可以使用连字符。连字符在印刷中长期作为标准，指示单词断开的位置。你可以在 HTML 中使用软连字符符号实体
    `&shy;` 来对文本进行连字符——尽管这要求你标记所有内容，这在某些情况下并不可行。
- en: 'CSS3 makes this somewhat easier through the `hyphens` property:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 通过 `hyphens` 属性使这一点变得稍微简单一些：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`hyphens` has three possible keyword values: `manual` hyphenates words only
    where a hyphenation suggestion exists in the markup—that is, using the soft-hyphenation
    symbol mentioned in the previous paragraph; `auto` hyphenates words at an appropriate
    point even if no hyphenation suggestions are present; and `none` never hyphenates
    words, even if suggestions are present.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`hyphens` 有三个可能的关键字值：`manual` 仅在标记中存在连字符建议时进行单词断开——也就是使用上一段中提到的软连字符符号；`auto`
    即使没有连字符建议，也会在适当的位置断开单词；而 `none` 永远不会断开单词，即使存在建议。'
- en: '**WARNING**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: '*Automatic hyphenation only occurs when the language of a document has been
    specified, and the browser has access to a hyphenation dictionary of that language.*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*自动连字符仅在指定文档语言且浏览器能够访问该语言的连字符词典时才会发生。*'
- en: You can see an example of hyphenation in [Figure 6-9](ch06.html#ch06fig9). The
    paragraph on the left has no hyphenation applied, whereas the paragraph on the
    right has a value of `auto`; the word “conversations” (highlighted) has been hyphenated
    and broken over two lines by the browser.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [图 6-9](ch06.html#ch06fig9) 中看到连字符的例子。左侧的段落没有应用连字符，而右侧的段落则应用了 `auto` 值；单词“conversations”（高亮显示）已被浏览器进行连字符，并分断到两行。
- en: '![Image](graphics/f06-09.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f06-09.jpg)'
- en: '*Figure 6-9: The paragraph on the right has automatic hyphenation enabled*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-9：右侧的段落启用了自动连字符*'
- en: 'The `hyphens` property currently has a rather piecemeal implementation: it’s
    in IE10+, Firefox, and Safari, with the relevant vendor prefix for each, but has
    recently been pulled from Chrome (where automatic hyphenation was not supported
    anyway). It’s also in Safari for iOS.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`hyphens` 属性目前的实现比较零散：它在 IE10+、Firefox 和 Safari 中都有实现，并且每个浏览器都有相应的厂商前缀，但最近已从
    Chrome 中移除（因为 Chrome 本来就不支持自动连字符）。它也出现在 iOS 的 Safari 中。'
- en: '**Resizing Elements**'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**调整元素大小**'
- en: Another new property that’s useful for elements whose contents are wider than
    their container is the `resize` property. This property lets you control an element’s
    dimensions by providing a handle with which you can drag the element out to a
    different size.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个对于内容宽度大于其容器的元素非常有用的新属性是 `resize` 属性。这个属性允许你通过提供一个控制柄来控制元素的尺寸，使你可以拖动元素调整到不同的大小。
- en: 'The property has the following syntax:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性的语法如下：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The keyword value states in which direction the element can be dragged: `horizontal`
    or `vertical`, `both`, or `none`. In the following example, I’ll show a `p` element
    with the value of `both` on the `resize` property, using this code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字值指定了元素可以被拖动的方向：`horizontal`（水平）、`vertical`（垂直）、`both`（两者）或 `none`（无）。在以下示例中，我将展示一个
    `p` 元素，`resize` 属性的值为 `both`，使用以下代码：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[Figure 6-10](ch06.html#ch06fig10) shows how a resizable element is displayed
    in Firefox on the Mac.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-10](ch06.html#ch06fig10)展示了在 Mac 上 Firefox 中如何显示可调整大小的元素。'
- en: '![Image](graphics/f06-10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f06-10.jpg)'
- en: '*Figure 6-10: A resizable text box has a striped handle in the lower-right
    corner*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-10：一个可调整大小的文本框在右下角有一个条纹状的控制柄*'
- en: The `resize` property is supported in Chrome, Firefox, and Safari—although the
    implementation can be somewhat shaky in mobile browsers, which have coarser input
    controls. Also be aware that resizing elements may not be keyboard-accessible,
    so don’t make resizing a required activity.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`resize` 属性在 Chrome、Firefox 和 Safari 中得到支持——尽管在移动浏览器中实现可能不太稳定，因为它们的输入控制较为粗糙。还需注意，调整元素大小可能无法通过键盘进行，因此不要把调整大小设为必须的操作。'
- en: '**Summary**'
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: The last few years have seen a noticeable upturn in the quality of typography
    on the Web, although the limited range of CSS text properties hasn’t made that
    easy. But I believe that browser makers have noticed the push for better implementation
    and, slowly but surely, more typographic control is being placed in our hands.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年，网页排版质量有了显著提升，尽管有限的 CSS 文本属性使得这一点并不容易。但我相信浏览器厂商已经注意到对更好实现的需求，并且，尽管缓慢，但排版控制正逐步掌握在我们手中。
- en: In [Chapter 5](ch05.html#ch05), I looked at ways to increase the range and variety
    of fonts, and in this chapter, I’ve discussed methods to make those fonts more
    decorative, flexible, and—most importantly—readable. [Chapter 7](ch07.html#ch07)
    will complete the trio of chapters on fonts and typography by introducing a whole
    new way to lay out text content. Well, new to the Web, that is; printers have
    been doing it for centuries.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](ch05.html#ch05)中，我探讨了如何增加字体的种类和范围，而在本章中，我讨论了如何让这些字体更具装饰性、灵活性，并且——最重要的是——易于阅读。[第7章](ch07.html#ch07)将通过介绍一种全新的文本布局方式，完成关于字体和排版的三章内容。嗯，对网页来说是新的；不过印刷商已经使用这种方式好几个世纪了。
- en: '**Text Effects and Typographic Styles: Browser Support**'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**文本效果和排版样式：浏览器支持情况**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| `text-shadow` | Yes | Yes | Yes | IE10 |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `text-shadow` | 支持 | 支持 | 支持 | IE10 |'
- en: '| `text-overflow` | Yes | Yes | Yes | Yes |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `text-overflow` | 支持 | 支持 | 支持 | 支持 |'
- en: '| `text-align` (new values) | Yes | Yes | Yes | No |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `text-align` (新值) | 支持 | 支持 | 支持 | 不支持 |'
- en: '| `text-align-last` | Yes | Yes^([*](ch06.html#footnote22a)) | No | Yes^([†](ch06.html#footnote23a))
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `text-align-last` | 支持 | 支持^([*](ch06.html#footnote22a)) | 不支持 | 支持^([†](ch06.html#footnote23a))
    |'
- en: '| `overflow-wrap` | Yes | Yes^([‡](ch06.html#footnote24a)) | Yes | Yes^‡ |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `overflow-wrap` | 支持 | 支持^([‡](ch06.html#footnote24a)) | 支持 | 支持^‡ |'
- en: '| `hyphens` | No | Yes* | Yes* | IE10* |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| `hyphens` | 不支持 | 支持* | 支持* | IE10* |'
- en: '| `resize` | Yes^([§](ch06.html#footnote25a)) | Yes | Yes^§ | No |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| `resize` | 支持^([§](ch06.html#footnote25a)) | 支持 | 支持^§ | 不支持 |'
- en: '[*](ch06.html#footnote_22a) With vendor prefix'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch06.html#footnote_22a) 带有厂商前缀'
- en: '[†](ch06.html#footnote_23a) Without the start and end values'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[†](ch06.html#footnote_23a) 没有起始和结束值'
- en: '[‡](ch06.html#footnote_24a) As word-wrap'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[‡](ch06.html#footnote_24a) 类似于 word-wrap'
- en: '[§](ch06.html#footnote_25a) Not in mobile browsers'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[§](ch06.html#footnote_25a) 不支持移动浏览器'
