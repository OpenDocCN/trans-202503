- en: Chapter 1. Introduction to Perl One-Liners
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1章：Perl单行命令入门
- en: 'Perl one-liners are small and awesome Perl programs that fit in a single line
    of code. They do one thing really well—like changing line spacing, numbering lines,
    performing calculations, converting and substituting text, deleting and printing
    specific lines, parsing logs, editing files in-place, calculating statistics,
    carrying out system administration tasks, or updating a bunch of files at once.
    Perl one-liners will make you a shell warrior: what took you minutes (or even
    hours) to solve will now take you only seconds!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Perl单行命令是小巧而强大的Perl程序，能够在一行代码中完成一个任务。它们可以做得非常好——比如更改行间距、给行编号、执行计算、转换和替换文本、删除和打印特定行、解析日志、就地编辑文件、计算统计数据、执行系统管理任务或一次更新多个文件。Perl单行命令将使你成为一个Shell战士：曾经需要几分钟（甚至几小时）才能解决的问题，现在只需几秒钟！
- en: In this introductory chapter, I’ll show you what one-liners look like and give
    you a taste of what’s in the rest of the book. This book requires some Perl knowledge,
    but most of the one-liners can be tweaked and modified without knowing the language
    in depth.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我将向你展示单行命令的样子，并让你尝尝本书其余部分的内容。本书需要一定的Perl知识，但大多数单行命令都可以在不深入了解语言的情况下进行调整和修改。
- en: 'Let’s look at some examples. Here’s one:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一些例子。这里是一个例子：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This one-liner replaces all occurrences of the text `you` with `me` in the file
    `file`. Very useful if you ask me. Imagine you’re on a remote server and you need
    to replace text in a file. You can either open the file in a text editor and execute
    find-replace or simply perform the replacement through the command line and, bam,
    be done with it.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令会将文件`file`中所有的`you`替换为`me`。如果你问我，这非常有用。想象一下，你在一台远程服务器上，需要替换文件中的文本。你可以打开文本编辑器执行查找替换，或者直接通过命令行进行替换，一下子就完成了。
- en: This one-liner and others in this book work well in UNIX. I’m using Perl 5.8
    to run them, but they also work in newer Perl versions, such as Perl 5.10 and
    later. If you’re on a Windows computer, you’ll need to change them a little. To
    make this one-liner work on Windows, swap the single quotes for double quotes.
    To learn more about using Perl one-liners on Windows, see [Appendix B](apb.html
    "Appendix B. Using Perl One-Liners On Windows").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令和本书中的其他命令在UNIX系统上运行良好。我使用的是Perl 5.8来运行它们，但它们也适用于更新版的Perl，例如Perl 5.10及更高版本。如果你在Windows计算机上，你需要稍微修改它们。为了让这个单行命令在Windows上工作，可以将单引号换成双引号。有关在Windows上使用Perl单行命令的更多信息，请参见[附录B](apb.html
    "附录B：在Windows上使用Perl单行命令")。
- en: 'I’ll be using Perl’s `-e` command-line argument throughout the book. It allows
    you to use the command line to specify the Perl code to be executed. In the previous
    one-liner, the code says “do the substitution (`s/you/me/g` command) and replace
    `you` with `me` globally (`/g` flag).” The `-p` argument ensures that the code
    is executed on every line of input and that the line is printed after execution.
    The `-i` argument ensures that `file` is edited in-place. Editing *in-place* means
    that Perl performs all the substitutions right in the file, overwriting the content
    you want to replace. I recommend that you always make a backup of the file you’re
    working with by specifying the backup extension to the `-i` argument, like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将使用Perl的`-e`命令行参数。它允许你使用命令行来指定要执行的Perl代码。在前面的单行命令中，代码的意思是“执行替换（`s/you/me/g`命令）并将`you`替换为`me`，全局替换（`/g`标志）。”`-p`参数确保代码在每一行输入上都执行，并且执行后打印该行。`-i`参数确保`file`文件就地编辑。就地编辑（*in-place*）意味着Perl会直接在文件中进行所有替换，覆盖你想要替换的内容。我建议你通过在`-i`参数中指定备份扩展名来始终备份你正在编辑的文件，例如：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now Perl creates a `file.bak` backup file first and only then changes the contents
    of `file`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Perl首先创建一个`file.bak`备份文件，然后才修改`file`的内容。
- en: 'How about doing this same replacement in multiple files? Just specify the files
    on the command line:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何在多个文件中进行相同的替换呢？只需在命令行中指定文件：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, Perl first replaces `you` with `me` in `file1` and then does the same
    in `file2` and `file3`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，Perl首先在`file1`中将`you`替换为`me`，然后在`file2`和`file3`中执行相同的操作。
- en: 'You can also perform the same replacement only on lines that match `we`, as
    simply as this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以像这样，只对匹配`we`的行进行相同的替换：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, you use the conditional `if /we/` to ensure that `s/you/me/g` is executed
    only on lines that match the regular expression `/we/`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你使用条件`if /we/`来确保` s/you/me/g`只在匹配正则表达式`/we/`的行上执行。
- en: 'The regular expression can be anything. Say you want to execute the substitution
    only on lines with digits in them. You could use the `/\d/` regular expression
    to match numbers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式可以是任何内容。比如你想只对包含数字的行执行替换。你可以使用`/\d/`正则表达式来匹配数字：
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How about finding all lines in a file that appear more than once?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如何查找文件中出现超过一次的所有行？
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This one-liner records the lines you’ve seen so far in the `%a` hash and counts
    the number of times it sees the lines. If it has already seen the line, the condition
    `$a{$_}++` is true, so it prints the line. Otherwise it “automagically” creates
    an element that contains the current line in the `%a` hash and increments its
    value. The `$_` special variable contains the current line. This one-liner also
    uses the `-n` command-line argument to loop over the input, but unlike `-p`, it
    doesn’t print the lines automatically. (Don’t worry about all the command-line
    arguments right now; you’ll learn about them as you work through this book!)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单行命令记录你迄今为止遇到的行，并在`%a`哈希中计数它看到这些行的次数。如果已经见过该行，条件`$a{$_}++`为真，因此它会打印该行。否则，它会“自动”在`%a`哈希中创建一个包含当前行的元素并增加其值。`$_`特殊变量包含当前行。这个单行命令还使用了`-n`命令行参数来遍历输入，但与`-p`不同，它不会自动打印行。
    （现在不要担心所有的命令行参数；你会随着本书的学习逐步了解它们！）
- en: 'How about numbering lines? Super simple! Perl’s `$.` special variable maintains
    the current line number. Just print it together with the line:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如何给行编号？超级简单！Perl的`$.`特殊变量保持当前行号。只需将其与行一起打印出来：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can do the same thing by using the `-p` argument and modifying the `$_`
    variable:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用`-p`参数并修改`$_`变量来实现同样的功能：
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, each line is replaced by the string `"$. $_"`, which is equal to the current
    line number followed by the line itself. (See one-liner 3.1 on page 17 for a full
    explanation.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每一行都被替换为字符串`"$. $_"`，这等于当前行号后跟该行的内容。（请参阅第17页的单行命令3.1以获取完整解释。）
- en: If you omit the filename at the end of the one-liner, Perl reads data from standard
    input. From now on, I’ll assume the data comes from the standard input and drop
    the filename at the end. You can always put it back if you want to run one-liners
    on whole files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你省略了单行命令末尾的文件名，Perl将从标准输入读取数据。从现在开始，我将假设数据来自标准输入，并省略文件名。如果你想在整个文件上运行单行命令，随时可以加回文件名。
- en: 'You can also combine the previous two one-liners to create one that numbers
    only the repeated lines:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将前面两个单行命令结合起来，创建一个只对重复行编号的命令：
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Another thing you can do is sum the numbers in each line using the `sum` function
    from the `List::Util` CPAN module. CPAN (Comprehensive Perl Archive Network; *[http://www.cpan.org/](http://www.cpan.org/)*)
    is an archive of over 100,000 reusable Perl modules. `List::Util` is one of the
    modules on CPAN, and it contains various list utility functions. You don’t need
    to install this module because it comes with Perl. (It’s in Perl core.)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用`List::Util` CPAN模块中的`sum`函数对每一行的数字进行求和。CPAN（Comprehensive Perl Archive
    Network；* [http://www.cpan.org/](http://www.cpan.org/) *）是一个包含超过100,000个可重用Perl模块的档案。`List::Util`是CPAN上的一个模块，包含各种列表工具函数。你不需要安装这个模块，因为它已经随Perl一起提供（它是Perl核心的一部分）。
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `-MList::Util` command-line argument imports the `List::Util` module. The
    `=sum` part of this one-liner imports the `sum` function from the `List::Util`
    module so that the program can use the function. Next, `-a` enables the automatic
    splitting of the current line into fields in the `@F` array. The splitting happens
    on the whitespace character by default. The `-l` argument ensures that `print`
    outputs a newline at the end of each line. Finally, `sum @F` sums all the elements
    in the `@F` list, and `print` prints the result followed by a newline (which I
    added with the `-l` argument). (See one-liner 4.2 on page 30 for a more detailed
    explanation.)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`-MList::Util`命令行参数导入了`List::Util`模块。这个单行命令中的`=sum`部分导入了`List::Util`模块中的`sum`函数，使得程序能够使用这个函数。接下来，`-a`启用了当前行自动分割成`@F`数组的字段。默认情况下，分割是在空白字符上进行的。`-l`参数确保`print`在每行结束时输出一个换行符。最后，`sum
    @F`计算`@F`列表中所有元素的总和，`print`打印结果并跟随一个换行符（这是我用`-l`参数添加的）。(请参阅第30页的单行命令4.2了解更详细的解释。)'
- en: 'How about finding the date 1299 days ago? Try this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如何查找1299天前的日期？试试这个：
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I explain this example in detail in one-liner 4.19 (page 41), but basically
    you modify the fourth element of the structure returned by `localtime`, which
    happens to be days. You simply subtract 1299 days from the current day and then
    reassemble the result into a new time with `localtime mktime @t` and print the
    result in the scalar context to display human-readable time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我在一行代码 4.19（第 41 页）中详细解释了这个例子，但基本上，你修改了 `localtime` 返回的结构的第四个元素，这正好是天数。你只需从当前日期减去
    1299 天，然后通过 `localtime mktime @t` 重新组合结果成新的时间，并以标量上下文打印结果，显示人类可读的时间。
- en: 'How about generating an eight-letter password? Here you go:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如何生成一个八个字母的密码呢？给你一个：
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `"a".."z"` generates a list of letters from *a* to *z* (for a total of 26
    letters). Then you randomly choose a letter eight times! (This example is explained
    in detail in one-liner 5.4 on page 51.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`"a".."z"` 生成从 *a* 到 *z* 的字母列表（总共 26 个字母）。然后你随机选择一个字母八次！（这个例子在第 51 页的一行代码 5.4
    中有详细解释。）'
- en: 'Or suppose you want to find the decimal number that corresponds to an IP address.
    You can use `unpack` to find it really quickly:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，假设你想找到与某个 IP 地址对应的十进制数。你可以使用 `unpack` 很快地找到它：
- en: '[PRE12]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This one-liner uses a *v-string*, which is a version literal. V-strings offer
    a way to compose a string with the specified ordinals. The IP address `127.0.0.1`
    is treated as a v-string, meaning the numbers `127`, `0`, `0`, `1` are concatenated
    together into a string of four characters, where the first character has ordinal
    value 127, the second and third characters have ordinal values 0, and the last
    character has ordinal value 1\. Next, `unpack` unpacks them to a single decimal
    number in “network” (big-endian) order. (See one-liner 4.27 on page 45 for more.)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个一行代码使用了 *v-字符串*，即版本字面量。V-字符串提供了一种方法，通过指定的序号来组合字符串。IP 地址 `127.0.0.1` 被视为 v-字符串，这意味着数字
    `127`、`0`、`0`、`1` 被连接成一个由四个字符组成的字符串，其中第一个字符的序号值为 127，第二和第三个字符的序号值为 0，最后一个字符的序号值为
    1。接下来，`unpack` 将它们解包成一个单一的十进制数字，按照“网络”（大端）顺序进行排列。（更多内容请参见第 45 页的一行代码 4.27）
- en: 'What about calculations? Let’s find the sum of the numbers in the first column
    in a table:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么计算呢？让我们找出表格中第一列数字的总和：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The lines are automatically split into fields with the `-a` argument, which
    can be accessed through the `@F` array. The first element of the array, `$F[0]`,
    is the first column, so you simply sum all the columns with `$sum += $F[0]`. When
    the Perl program finishes, it executes any code in the `END` block, which, in
    this case, prints the total sum. Easy!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 行会使用 `-a` 参数自动分割成字段，可以通过 `@F` 数组访问。数组的第一个元素 `$F[0]` 就是第一列，所以你只需用 `$sum += $F[0]`
    将所有列的值相加。当 Perl 程序完成时，它会执行 `END` 块中的任何代码，在这个例子中就是打印出总和。简单！
- en: 'Now let’s find out how many packets have passed through `iptables` rules:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们找出有多少数据包通过了 `iptables` 规则：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `iptables` program outputs the packets in the first column. All you have
    to do to find out how many packets have passed through the firewall rules is sum
    the numbers in the first column. Although `iptables` will output table headers
    as well, you can safely ignore these because Perl converts them to zero for the
    `+=` operation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`iptables` 程序在第一列输出数据包。你只需要将第一列中的数字相加，就能知道通过防火墙规则的包的数量。虽然 `iptables` 也会输出表头，但你可以安全地忽略这些，因为
    Perl 会将它们转换为零，以便进行 `+=` 操作。'
- en: How about getting a list of all users on the system?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如何获取系统中所有用户的列表？
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Combining `-a` with the `-F` argument lets you specify the character where lines
    should be split, which, by default, is whitespace. Here, you split lines on the
    colon character, the record separator of `/etc/passwd`. Next, you print the fifth
    field, `$F[4]`, which contains the user’s real name.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `-a` 和 `-F` 参数结合使用，让你可以指定分割行的字符，默认情况下是空格。在这里，你可以使用冒号字符作为分隔符，正好是 `/etc/passwd`
    的记录分隔符。接下来，你打印第五个字段 `$F[4]`，它包含用户的真实姓名。
- en: If you ever get lost with command-line arguments, remember that Perl comes with
    a fantastic documentation system called *perldoc*. Type `perldoc perlrun` at the
    command line. This will display the documentation about how to run Perl and all
    the command-line arguments. It’s very useful when you suddenly forget which command-line
    argument does what and need to look it up quickly. You may also want to read *perldoc
    perlvar*, which explains variables; *perldoc perlop*, which explains operators;
    and *perldoc perlfunc*, which explains functions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在命令行参数上迷路了，记住 Perl 配备了一个很棒的文档系统，叫做 *perldoc*。在命令行输入 `perldoc perlrun`，这将显示如何运行
    Perl 以及所有命令行参数的文档。当你突然忘记哪个命令行参数做什么，需要快速查找时，这个非常有用。你也可以阅读 *perldoc perlvar*，它解释了变量；*perldoc
    perlop*，它解释了操作符；以及 *perldoc perlfunc*，它解释了函数。
- en: Perl one-liners let you accomplish many tasks quickly. You’ll find over 130
    one-liners in this book. Read them, try them, and soon enough you’ll be the local
    shell wizard. (Just don’t tell your friends—unless you want competition.)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Perl 一行命令让你能够快速完成许多任务。你将在本书中找到超过 130 个一行命令。阅读它们，尝试它们，没多久你就会成为本地的 Shell 大师。（只是不要告诉你的朋友——除非你想要竞争。）
- en: Enjoy!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 享受吧！
