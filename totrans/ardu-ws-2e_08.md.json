["```\n// Listing 9-1\n#include <LiquidCrystal.h>\nLiquidCrystal lcd(4, 5, 6, 7, 8, 9);  // pins for RS, E, DB4, DB5, DB6, DB7\nvoid setup()\n{ lcd.begin(16, 2); lcd.clear();\n}\nvoid loop(){ lcd.setCursor(0, 5); lcd.print(\"Hello\"); lcd.setCursor(1, 6); lcd.print(\"world!\"); delay(10000);\n}\n```", "```\n#include <LiquidCrystal.h>\nLiquidCrystal lcd(4, 5, 6, 7, 8, 9);  // pins for RS, E, DB4, DB5, DB6, DB7\n```", "```\n lcd.begin(16, 2);\n```", "```\n lcd.clear(); \n```", "```\n lcd.setCursor(`x`, `y`);\n```", "```\n lcd.print(\"text\");\n```", "```\n lcd.print(`variable`);\n```", "```\n float pi = 3.141592654; lcd.print(\"pi: \"); lcd.print(pi, 3); \n```", "```\n// Listing 9-2 int zz = 170; lcd.setCursor(0, 0); lcd.print(\"Binary: \");       lcd.print(zz, BIN);    // display 170 in binary lcd.setCursor(0, 1); lcd.print(\"Hexadecimal: \"); lcd.print(zz, HX);     // display 170 in hexadecimal\n```", "```\nbyte a[8] = {  B00000,  B01010, B01010,  B00000,  B00100,  B10001,  B01110,  B00000  };\n```", "```\n lcd.createChar(0, a); // assign the array a[8] to custom character slot 0\n```", "```\n lcd.write(byte(0)); \n```", "```\n// Project 28 - Defining Custom Characters\n#include <LiquidCrystal.h>\nLiquidCrystal lcd(4, 5, 6, 7, 8, 9);  // pins for RS, E, DB4, DB5, DB6, DB7\nbyte a[8] = {  B00000,  B01010, B01010,  B00000,  B00100,  B10001,  B01110,  B00000  };\nvoid setup()\n{ lcd.begin(16, 2); lcd.createChar(0, a);\n}\nvoid loop()\n{ lcd.write(byte(0));  // write the custom character 0 to the next cursor  // position\n}\n```", "```\n#include <TFT.h>               // include the graphics LCD library\n#include <SPI.h>               // include the library for the SPI data bus\nTFT TFTscreen = TFT(10, 9, 8); // allocate pins to LCD\n#include <SPI.h>               // library for SPI data bus\n```", "```\n TFTscreen.begin();             // activate LCD   TFTscreen.background(0, 0, 0); // clear the LCD screen\n```", "```\n TFTscreen.background(b, g, r); // set background color\n```", "```\nTFTscreen.setTextSize(`x`);\n```", "```\nTFTscreen.stroke(`B`, `G`, `R`);\n```", "```\nTFTscreen.text(\"Hello, world!\", `x`, `y`);\n```", "```\nchar analogZero[4];\n```", "```\nString sensorVal = String(analogRead(A0));\n```", "```\nsensorVal.toCharArray(analogZero, 4);\n```", "```\nTFTscreen.text(`analogZero`, `x`, `y`);\n```", "```\n// Project 29 - Seeing the Text Functions in Action\n#include <TFT.h>  // Arduino TFT LCD library\n#include <SPI.h>  // SPI bus library\nTFT TFTscreen = TFT(10, 9, 8);     // allocate digital pins to LCD\nchar analogZero[4];\nvoid setup()\n{ TFTscreen.begin();               // activate LCD TFTscreen.background(0, 0, 0);   // set display to black\n}\nvoid loop()\n{ TFTscreen.stroke(255, 255, 255); // white text TFTscreen.setTextSize(1); TFTscreen.text(\"Size One\", 0, 0); TFTscreen.setTextSize(2); TFTscreen.text(\"Size Two\", 0, 10); TFTscreen.setTextSize(3); TFTscreen.text(\"Size 3\", 0, 30); TFTscreen.setTextSize(4); TFTscreen.text(\"Size 4\", 0, 55); delay(2000); TFTscreen.background(0, 0, 0);   // set display to black TFTscreen.setTextSize(5); TFTscreen.text(\"Five\", 0, 0); delay(2000); TFTscreen.background(0, 0, 0);   // set display to black TFTscreen.stroke(255, 255, 255); // white text TFTscreen.setTextSize(1); TFTscreen.text(\"Sensor Value :\\n \", 0, 0); TFTscreen.setTextSize(3); String sensorVal = String(analogRead(A0)); // convert the reading to a char array sensorVal.toCharArray(analogZero, 4); TFTscreen.text(analogZero, 0, 20); delay(2000); TFTscreen.background(0, 0, 0);   // set display to black\n}\n```", "```\nTFTscreen.stroke(`B`, `G`, `R`);\n```", "```\nTFTscreen.point(`X`, `Y`);\n```", "```\nTFTscreen.line(`X1`, `Y1`, `X2`, `Y2`);\n```", "```\nTFTscreen.circle(`X`, `Y`, `R`);\n```", "```\nTFTscreen.fill(`B`, `G`, `R`);\n```", "```\nTFTscreen.noFill();\n```", "```\nTFTscreen.rect(`X1`, `Y1`, `X2`, `Y2`);\n```", "```\n// Project 30 - Seeing the Graphic Functions in Action\n#include <TFT.h>                 // Arduino TFT LCD library\n#include <SPI.h>                 // SPI bus library\nTFT TFTscreen = TFT(10, 9, 8);   // allocate digital pins to LCD\nint a;\nvoid setup()\n{ TFTscreen.begin(); // activate LCD TFTscreen.background(0, 0, 0); // set display to black randomSeed(analogRead(0));     // for random numbers\n}\nvoid loop()\n{ // random dots for (a = 0; a < 100; a++) { TFTscreen.stroke(random(256), random(256), random(256)); TFTscreen.point(random(160), random(120)); delay(10); } delay(1000); TFTscreen.background(0, 0, 0); // set display to black // random lines for (a = 0; a < 100; a++) { TFTscreen.stroke(random(256), random(256), random(256)); TFTscreen.line(random(160), random(120), random(160), random(120)); delay(10); } delay(1000); TFTscreen.background(0, 0, 0); // set display to black // random circles for (a = 0; a < 50; a++) { TFTscreen.stroke(random(256), random(256), random(256)); TFTscreen.circle(random(160), random(120), random(50)); delay(10); } delay(1000); TFTscreen.background(0, 0, 0); // set display to black // random filled circles for (a = 0; a < 50; a++) { TFTscreen.fill(random(256), random(256), random(256)); TFTscreen.stroke(random(256), random(256), random(256)); TFTscreen.circle(random(160), random(120), random(50)); delay(10); } delay(1000); TFTscreen.background(0, 0, 0); // set display to black // random rectangles TFTscreen.noFill(); for (a = 0; a < 50; a++) { TFTscreen.stroke(random(256), random(256), random(256)); TFTscreen.rect(random(160), random(120), random(160), random(120)); delay(10); } delay(1000); TFTscreen.background(0, 0, 0); // set display to black // random filled rectangles TFTscreen.noFill(); for (a = 0; a < 50; a++) { TFTscreen.fill(random(256), random(256), random(256)); TFTscreen.stroke(random(256), random(256), random(256)); TFTscreen.rect(random(160), random(120), random(160), random(120)); delay(10); } delay(1000); TFTscreen.background(0, 0, 0); // set display to black\n}\n```", "```\n// Project 31 - Creating a Temperature History Monitor\n#include <TFT.h>  // Arduino TFT LCD library\n#include <SPI.h>  // SPI bus library\nTFT TFTscreen = TFT(10, 9, 8); \n// allocate digital pins to LCD\nint tcurrent = 0;\nint tempArray[120];\nchar currentString[3];\nvoid getTemp() // function to read temperature from TMP36\n{ float sum = 0; float voltage = 0; float sensor = 0; float celsius; // read the temperature sensor and convert the result to degrees C sensor   = analogRead(5); voltage  = (sensor * 5000) / 1024; voltage  = voltage - 500; celsius  = voltage / 10; tcurrent = int(celsius); // insert the new temperature at the start of the array of past temperatures for (int a = 119 ; a >= 0 ; --a ) { tempArray[a] = tempArray[a - 1]; } tempArray[0] = tcurrent;\n}\nvoid drawScreen() // generate TFT LCD display effects{ int q; // display current temperature TFTscreen.background(0, 0, 0);   // clear screen to black TFTscreen.stroke(255, 255, 255); // white text TFTscreen.setTextSize(2); TFTscreen.text(\"Current:\", 20, 0); String tempString = String(tcurrent); tempString.toCharArray(currentString, 3); TFTscreen.text(currentString, 115, 0); // draw scale for graph TFTscreen.setTextSize(1); TFTscreen.text(\"50\", 0, 20); TFTscreen.text(\"45\", 0, 30); TFTscreen.text(\"40\", 0, 40); TFTscreen.text(\"35\", 0, 50); TFTscreen.text(\"30\", 0, 60); TFTscreen.text(\"25\", 0, 70); TFTscreen.text(\"20\", 0, 80); TFTscreen.text(\"15\", 0, 90); TFTscreen.text(\"10\", 0, 100); TFTscreen.text(\" 5\", 0, 110); TFTscreen.text(\" 0\", 0, 120); TFTscreen.line(20, 20, 20, 127); // plot temperature data points for (int a = 25 ; a < 145 ; a++) { // convert the temperature value to a suitable y-axis position on the LCD q = (123 - (tempArray[a - 25] * 2)); TFTscreen.point(a, q); }\n}\nvoid setup()\n{ TFTscreen.begin();             // activate LCD TFTscreen.background(0, 0, 0); // set display to black\n}\nvoid loop()\n{ getTemp(); drawScreen(); for (int a = 0 ; a < 20 ; a++) // wait 20 minutes until the next reading { delay(60000);                // wait 1 minute }\n}\n```"]