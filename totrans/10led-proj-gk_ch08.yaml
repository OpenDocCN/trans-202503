- en: '8'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Optical Screwdriver by John Baichtal
  prefs: []
  type: TYPE_NORMAL
- en: This project is a light-based beatbox in wand form, used with a light-sensor-equipped
    synth to create cool audio effects.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0147-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this project, you’ll make an optical screwdriver that flashes an LED at a
    light sensor, which then tells the synth what beats to play depending on the input
    it receives. You can modify the rate and length of beats, creating complicated
    synthesized music.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll show you how to make three different variants of the screwdriver, ranging
    from simple to advanced. You don’t have to make all three; just choose the level
    of awesomeness you’re prepared to handle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first version is a super-basic Arduino project easy enough for anyone to
    build. You’ll also need to assemble a test rig—an elementary synth consisting
    of an Arduino, a speaker, and a light sensor—to make sure it works. After that
    I’ll show you how to level up your screwdriver with a couple of improvements:
    a simplified microcontroller and a wand-shaped printed circuit board (PCB).'
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILD THE BASIC SCREWDRIVER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s begin with the easiest possible configuration for the optical screwdriver:
    a plain-jane Arduino with an LED and three potentiometers, as shown in [Figure
    8-1](ch08.xhtml#ch08fig1). While not particularly wand-like, it gives you an unsexy
    equivalent that works identically—it makes optical LED flashes that interact with
    a sensor-equipped synthesizer. The three pots will be used to control the speed,
    duration, and pauses of the flashing LED.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0148-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-1:** A basic version of the screwdriver'
  prefs: []
  type: TYPE_NORMAL
- en: '**Get the Parts**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll need just a few parts to complete the first stage of this project. I’m
    also including the parts for the test rig you’ll need to build in order to hear
    anything. The test rig is simply a light sensor, Arduino, and speaker.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*See “[Getting Started with the Arduino and the Arduino IDE](intro.xhtml#lev17)”
    on [page 15](intro.xhtml#page_15) for setup instructions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Two Arduino Uno boards or similar (Adafruit P/N 50)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Half-sized breadboard (Adafruit P/N 64)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper assortment (Adafruit P/N 153)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wall wart or 9 V battery clip (Adafruit P/N 63 or Adafruit P/N 80)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Super-bright LED (for example, SparkFun P/N 531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 10 kΩ potentiometers (I used SparkFun P/N 9939, but P/N 9288 also works;
    I used slim knobs from Adafruit, P/N 2057)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light sensor (Adafruit P/N 161)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8 Ω speaker (for example, Adafruit P/N 1313; you’ll need to solder on your own
    wires)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 220 Ω and 10 kΩ resistors (SparkFun P/N 10969 is a good multipack)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assemble the Circuit**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The bare-bones screwdriver probably won’t challenge you, but never fear—this
    project levels up quick! Let’s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plug in the LED.** Connect the long lead of the LED to pin 9 with a 220 Ω
    resistor in between, then connect the short lead to GND right next to it. [Figure
    8-2](ch08.xhtml#ch08fig2) shows how it should look.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0149-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-2:** Adding the LED and resistor to the breadboard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Wire up the potentiometers.** Add the three pots. For each pot, connect the
    leftmost lead to GND and the rightmost to 5V. The center lead is the data connection,
    as shown in [Figure 8-3](ch08.xhtml#ch08fig3). It doesn’t matter which lead is
    GND and which is 5V, as long as the center lead goes to data. Connect one of each
    wire to pins A0, A1, and A2, shown as purple wires in [Figure 8-3](ch08.xhtml#ch08fig3).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0150-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-3:** Connecting the pots to the appropriate analog pins'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add power.** Connect the Arduino to power by plugging it into either a wall
    wart or a 9 V battery. You’ll also need to power the prototyping board, so connect
    the 5V and GND pins on the Arduino to the power and ground buses on both sides
    of the board. These new wires are shown in red (power) and black (ground) in [Figure
    8-4](ch08.xhtml#ch08fig4).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0150-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-4:** Connecting the breadboard to the Arduino’s 5V and GND pins'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Code It**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The sketch is essentially the Blink example sketch, to which I’ve added potentiometers
    to modify the beat. You can download it along with the other project files for
    this book at *[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go through the code part by part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember to change all instances of pin 9 to pin 0 if you employ the ATtiny85
    microcontroller—more on this later!*'
  prefs: []
  type: TYPE_NORMAL
- en: The `void setup()` function runs once when the Arduino is powered on or reset.
    In this case the setup is telling the Arduino which pins will be for input and
    which for output.
  prefs: []
  type: TYPE_NORMAL
- en: Next is the loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first part of `void loop()` declares a series of variables corresponding
    with the three pots—speed, duration, and skip. For the sake of writing code, I’ve
    labeled time between beats as *speed*, the length of each beat as *duration*,
    and the brightness level of the LED in the “off” state as *skip*. This gives us
    the option of “bright to dim” rather than “on or off,” for a smoother flow.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the code maps out the readings from the three pots and changes their
    values to something we can use—data comes in from the pots at a range of 0–1023,
    so the code translates that value into seconds. Feel free to change these values
    to make the screwdriver work better for you!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The final part of the code governs the actual work of the sketch: turning on
    and off an LED. The LED turns on for a number of microseconds equal to the value
    of `currentDuration`, or between 100 and 800\. When the synth’s light sensor detects
    those beats, it responds with sound. Holding the screwdriver closer makes louder
    beats, while pulling it back yields more subtle sounds.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build the Test Rig**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unless you have a light-detecting synth handy, you’ll have to build one. This
    rig emits a beat that is modified by data sent via the light sensor, so it can
    interact with the screwdriver. You’ll need the extra Arduino from the parts list,
    as well as the speaker. You can see the ultra-simple test rig I built in [Figure
    8-5](ch08.xhtml#ch08fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0152-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-5:** The test rig helps you ensure the screwdriver works.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wire up the speaker.** Plug the speaker’s positive lead into pin 9 of the
    second Arduino, and the negative lead into GND. [Figure 8-6](ch08.xhtml#ch08fig6)
    shows how it connects.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0152-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-6:** Connecting the speaker to the Arduino'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Attach the light sensor and resistor.** Connect one lead of the light sensor
    to pin A0 and the other to 5V. Slide a 10 kΩ resistor into the same A0 pin, or
    wrap the light sensor lead and resistor together. Connect the other lead of the
    resistor to GND, as shown in [Figure 8-7](ch08.xhtml#ch08fig7).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0153-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-7:** Attaching the light sensor and resistor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Code it.** The test rig’s code is a variant of the `tonePitchFollower` example
    sketch, which changes a tone based on the level detected by the light sensor.
    I’ve added a bit more pizzazz by tying the beat length and pause length to the
    same light sensor, allowing the optical screwdriver to simultaneously modify the
    beat’s tone, its length, and the time between beats via the light sensor.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Test it.** The test rig creates a looping series of tones, 100 per second,
    with a frequency equal to the light sensor reading, and determines the duration
    of tone by remapping the sensor reading. Even without the screwdriver, you can
    play with the test rig by putting your finger over the light sensor and changing
    its reading.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you add the screwdriver’s weirdly flashing light into the mix, even more
    complicated patterns emerge as the fluctuations in light create complex sonic
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILD THE WAND VERSION WITH AN ATTINY85**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next I’ll show you how to swap in an ATtiny85, a smaller microcontroller than
    the ATmega328p featured in the Arduino. This is a simpler chip, without the extra
    bells and whistles of the Arduino board, but it’s also more compact, which allows
    you to move the screwdriver circuit off the prototyping board and onto a more
    portable wand.
  prefs: []
  type: TYPE_NORMAL
- en: '**Get the Parts**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Grab the following parts to build a soldered version of the basic screwdriver
    using the ATtiny85\. If you want to, reuse the parts from the earlier prototype
    build.
  prefs: []
  type: TYPE_NORMAL
- en: '**Components**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Arduino Uno (reuse the one from “[Build the Test Rig](ch08.xhtml#lev103)” on
    [page 152](ch08.xhtml#page_152))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ATtiny85 microcontroller (for example, SparkFun P/N 9378)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Super-bright LED (for example, SparkFun P/N 531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two 220 Ω resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 μF capacitor (SparkFun P/N 523)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perma-Proto board (Adafruit P/N 571; these boards require you to solder the
    components)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8-pin IC socket (Adafruit P/N 2202)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three potentiometers (I suggest SparkFun P/N 9288 because they can be soldered
    in place)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5 V power supply (for example, SparkFun P/N 12889)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barrel jack for the power supply (Adafruit P/N 373 or SparkFun P/N 10811)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*You shouldn’t use a 9 V battery because the ATtiny85 lacks the power management
    features of the Uno, which allows input voltage to be converted to 5 V. If you
    use a 9 V battery, your chip will overload.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tools**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Soldering iron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*See the appendix for soldering instructions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at the technical details of the ATtiny85\. It has eight pins,
    consisting of power, ground, and a variety of analog and digital data pins. [Figure
    8-8](ch08.xhtml#ch08fig8) breaks down the pin layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0155-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-8:** The ATtiny85’s eight pins control a surprising amount of computing
    power.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flashing the ATtiny85**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One downside to using the ATtiny85 is that we lose some of that ease of programming
    we have with the Arduino. The Arduino has a lovely USB-based bootloader, but its
    smaller cousin does not, so you’ll have to use a separate Arduino to program the
    ATtiny85\. Since the pins of the chip are needed to program it, we can’t assemble
    the project before programming it. With this version of the optical screwdriver,
    you won’t be able to reflash the chip once it’s installed on the circuit board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wire up the ATtiny85.** Use the Arduino from “[Build the Test Rig](ch08.xhtml#lev103)”
    on [page 152](ch08.xhtml#page_152) as shown in [Figure 8-9](ch08.xhtml#ch08fig9).
    The pinout shown in [Figure 8-8](ch08.xhtml#ch08fig8) becomes important in this
    step as you wire it up. Connect pin 1 to digital pin 10, shown as a blue wire
    in [Figure 8-9](ch08.xhtml#ch08fig9). Connect pin 4 to GND via a black wire. Plug
    a red wire from pin 5 into a power bus. Plug pins 6, 7, and 8 into 13, 12, and
    11 on the Arduino, shown as yellow, white, and green wires, respectively.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Connect the LED and capacitor.** You’ll also need to connect an LED, with
    a 220 Ω resistor protecting it, to pin 8 on the ATtiny85; this LED will flash
    to show that it’s working. Next, you’ll need to connect the short pin of a 10
    µF capacitor to the Arduino’s Reset pin (shown as a burgundy wire) and the long
    pin to GND.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Connect the power and ground.** Finally, connect the breadboard’s power and
    GND buses to their respective Arduino pins.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Install the ArduinoISP sketch on the Uno.** Find this in the Tools menu of
    the Arduino program, then set the Uno’s programmer to “ArduinoISP” by choosing
    **ArduinoISP** from the list of programmers. Go to **Tools** ▸ **Board** and choose
    the correct ATtiny model. Then upload the sketch!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also buy products that allow you to program your ATtiny85 without needing
    a second Arduino—for example, the Tiny AVR Programmer from SparkFun (P/N 11801)
    and the ISP Shield from Evil Mad Scientist (*[http://emsl.us/253](http://emsl.us/253)*).
  prefs: []
  type: TYPE_NORMAL
- en: This is a necessarily stripped-down description of the process. For a more thorough
    guide to programming an ATtiny, go to MIT’s High-Low Tech page at *[http://highlowtech.org/](http://highlowtech.org/)*,
    click **Tutorials**, then click the link for **Programming an ATtiny w/ Arduino
    1.6 (or 1.0)**. David Caminati also has a good tutorial at *[http://fritzing.org/projects/programmer-for-attiny85-with-arduino-uno-as-interf/](http://fritzing.org/projects/programmer-for-attiny85-with-arduino-uno-as-interf/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0156-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-9:** Programming the ATtiny85 with another Arduino'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build the ATtiny85 Screwdriver**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next challenge involves turning that loose jumble of wires into something
    a little more solid. You’ll use a credit card–sized prototyping board from Adafruit
    and design it so that, besides a power supply wire, you can hold the entire screwdriver
    in one hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solder in the pots.** Solder the three potentiometers to the prototyping
    board, as shown in [Figure 8-10](ch08.xhtml#ch08fig10). Connect the outer two
    leads of each pot to power and ground.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0156-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-10:** Attaching the potentiometers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Attach the IC socket.** Next, solder in the IC socket as shown in [Figure
    8-11](ch08.xhtml#ch08fig11). The top of the ATtiny85 has a notch that should be
    pointed toward the star, as shown in the figure. Connect pins 2, 3, and 7 to the
    center leads of each pot, from right to left, respectively, and connect pin 8
    to power and pin 4 to ground (refer back to [Figure 8-8](ch08.xhtml#ch08fig8)
    for the ATtiny85 pinout). If you get these in the wrong order, you might get unexpected
    results, so make sure to take note of which pot is connected to which pin.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0157-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-11:** Soldering in the IC socket'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Wire up the LED.** Connect the long lead of the LED to pin 5 of the ATtiny85
    via a 220 Ω resistor, and connect the short lead of the LED to ground. [Figure
    8-12](ch08.xhtml#ch08fig12) shows how it should look.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0157-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-12:** Adding the LED and resistor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add power.** Solder in the barrel jack (shown in [Figure 8-13](ch08.xhtml#ch08fig13)),
    connecting the center lead to power and either of the two side leads to ground.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As long as you’ve already flashed the ATtiny85 with the sketch, you should be
    able to plug it in right away.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f0158-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-13:** Soldering in the power jack'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That’s your circuit all soldered!
  prefs: []
  type: TYPE_NORMAL
- en: '**Code It**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The code from the initial build works with this version too! You do, however,
    have to make one critical change. There is no pin 9 on an ATtiny85, so you have
    to change that to a `0`. Remember this line from the original code?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You need to change that `9` and the following `9`s to `0`s.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When you’ve made the changes, upload the sketch using the programming rig mentioned
    earlier in the chapter—that is, by wiring the ATtiny85 to the Arduino and then
    loading the code to the Arduino. Once the ATtiny85 is programmed, it can be placed
    in the socket and you’ll be ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAKE A PCB WAND**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Without the need for a full-sized Arduino, you can make the optical screwdriver
    much smaller and, well, sexier. In fact, you can make it small enough to fit on
    a wand-shaped printed circuit board (PCB), shown in [Figure 8-14](ch08.xhtml#ch08fig14).
    The previous version of the screwdriver was for folks who didn’t want to buy or
    mill their own circuit boards. If you’re up to that challenge, however, this variant
    of the project is for you!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0159-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-14:** This wand-shaped PCB accommodates the screwdriver’s components.'
  prefs: []
  type: TYPE_NORMAL
- en: '**ABOUT FRITZING**'
  prefs: []
  type: TYPE_NORMAL
- en: Fritzing is a simple circuit design program that allows you to build circuits
    either through traditional schematic symbols, breadboarded components, or PCB
    design. To create a design, you simply drag components out of a palette and draw
    traces between them. I use the program all the time, and you’ll probably find
    it useful as well. Download it at *[http://www.fritzing.org/](http://www.fritzing.org/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0159-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Get the Parts**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most of these parts are the same as the components we used in the previous version
    of the project. You’ll need the following to complete this version.
  prefs: []
  type: TYPE_NORMAL
- en: '**Components**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Super-bright LED (for example, SparkFun P/N 531)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ATtiny85 (SparkFun P/N 9378)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8-pin IC socket (Adafruit P/N 2202)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three 10 kΩ potentiometers (SparkFun P/N 9939 or P/N 9288)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mini power switch (SparkFun P/N 102)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Battery clips (SparkFun P/N 7949)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surface-mount LED (SparkFun P/N 12619)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two surface-mount resistors (Jameco P/N 2008882)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two AA batteries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Soldering iron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*See the appendix for soldering instructions.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build It**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Follow these steps to build your optical screwdriver wand, shown in [Figure
    8-15](ch08.xhtml#ch08fig15).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0160-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 8-15:** The completed optical screwdriver in use'
  prefs: []
  type: TYPE_NORMAL
- en: '**Design the PCB outline.** I used Inkscape (*[https://inkscape.org/](https://inkscape.org/)*)
    to draw a vector shape corresponding with the shape I wanted the PCB to be. [Figure
    8-16](ch08.xhtml#ch08fig16) shows what I came up with: a pencil shape about 8
    inches long and 3/4 inches wide. The Inkscape file is available with all the other
    resources for this book (*[https://nostarch.com/LEDHandbook/](https://nostarch.com/LEDHandbook/)*).
    You can make your circuit board any shape you want. In the Inkscape file, the
    PCB can be any color, but this won’t affect how it looks in the end; what the
    program looks for are the vectors. Fritzing offers a tutorial on how to make a
    shape that will work with the program at *[http://fritzing.org/pcb-custom-shape/](http://fritzing.org/pcb-custom-shape/)*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0161-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-16:** I designed a pencil shape in Inkscape for the wand.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Make the circuit in Fritzing.** Add the circuit to the board shape, as shown
    in [Figure 8-17](ch08.xhtml#ch08fig17). Don’t worry—I’ll describe how to do each
    substep!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0161-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-17:** The optical screwdriver added to the circuit board design'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add the PCB outline.** To add the circuit board outline you made in Inkscape,
    click once on the default PCB, then click the **Load Image File** button in the
    Inspector to replace it with your own. [Figure 8-18](ch08.xhtml#ch08fig18) shows
    the PCB outline, ready to be loaded with components. Remember that the blue color
    doesn’t mean anything; it’s just a placeholder. The real decision on color is
    made when you pay for the PCB to be milled.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0161-03.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-18:** The PCB file has been loaded.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add batteries.** Drag battery clips out of the parts palette and add them
    to the circuit board. Connect the two batteries in series as you see in [Figure
    8-19](ch08.xhtml#ch08fig19). The black lines in the figure represent screen printing
    that will appear on the PCB, while the circles represent holes drilled in the
    PCB, with green representing populated terminals and red signifying unpopulated
    terminals.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0161-04.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-19:** Adding the battery clips'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add the switch.** The switch has three mounting holes (see [Figure 8-20](ch08.xhtml#ch08fig20));
    you should connect the battery to the middle one.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0162-01.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-20:** Adding the switch'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add the surface-mount LED and resistor.** You can see from [Figure 8-21](ch08.xhtml#ch08fig21)
    that the LED and resistor don’t have mounting holes, but rather mounting pads.
    That means these components are surface-mount rather than through-hole. Connect
    the top lead of the switch to the first pad of the LED, connect the LED and resistor
    in series, and then ground the resistor to the negative terminal of the battery
    assembly. This resistor serves as a power indicator, so no matter what happens
    with the screwdriver you’ll know if the batteries are working!'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0162-02.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-21:** Adding the LED and resistor'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add the three pots.** Drag the three pots from the palette and add them as
    shown in [Figure 8-22](ch08.xhtml#ch08fig22). The left-hand pin connects to power
    via the switch, and the right-hand pin connects to GND. The center (data) pins
    remain unpopulated for now.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0162-03.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-22:** Connecting the three pots'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add the ATtiny85.** Add the ATtiny85 socket by connecting the pins as you
    did in the previous project: pins 2, 6, and 7 connect to the pots, while pin 4
    connects to ground and pin 8 to power. [Figure 8-23](ch08.xhtml#ch08fig23) shows
    how it should be wired up.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0162-04.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-23:** Adding the ATtiny85 socket'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Add the resistor and super-bright LED.** The final piece involves the LED
    and the resistor that protects it. Add the components in series, with the resistor
    attached to pin 5 of the ATtiny85 and the negative lead of the LED connecting
    to ground. [Figure 8-24](ch08.xhtml#ch08fig24) shows the completed PCB.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0163-01.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-24:** The PCB is complete.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Output the Gerbers.** Export the Gerbers, the design files used by the fabrication
    staff to mill the boards. Go to **File** ▸ **Export** ▸ **For Production** and
    select **Extended Gerbers**. You will be asked to save the files to a folder.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the Gerber files are output, check them on a Gerber checker like MCN ([Figure
    8-25](ch08.xhtml#ch08fig25)), available from *[http://mcn-audio.com/](http://mcn-audio.com/)*.
    This tool lets you inspect the traces visible on the PCB to ensure they are wired
    as expected. I’ve had many PCBs ruined by foolishly trusting that the software
    got it right, so I definitely recommend it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f0163-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-25:** Check your Gerbers with MCN or a similar application.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Get the PCB milled.** Chose one of a thousand PCB milling services. I use
    OSHPark (*[http://www.oshpark.com/](http://www.oshpark.com/)*) because they’re
    easy and inexpensive. [Figure 8-26](ch08.xhtml#ch08fig26) shows my milled circuit
    boards, back from the service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0164-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-26:** The circuit boards are done. Now to add components!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Solder in the components.** Solder in the components as you would expect.
    Of particular importance is the ATtiny85, which is susceptible to damage. Rather
    than soldering the IC directly into the circuit board, solder in the socket and
    place the IC in the socket. This also allows you to refresh the ATtiny85 at a
    future date.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Code it.** Upload the optical screwdriver sketch to the ATtiny85 as described
    earlier in the chapter. It should work the same! Your completed project should
    look like [Figure 8-27](ch08.xhtml#ch08fig27).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0164-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 8-27:** The completed screwdriver flashing out a beat with the help
    of a home-built synth'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**SUMMARY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Considered by many to be the simplest form of electronics project, a blinking
    LED nevertheless can offer some cool challenges and opportunities. This project
    shows how combining digital and analog makes for an intriguing tool that you can
    make yourself.
  prefs: []
  type: TYPE_NORMAL
