["```\n#include <cstdio> ➊\n\nint main➋(){\n  printf(\"Hello, world!\"); ➌\n  return 0; ➍\n}\n--------------------------------------------------------------------------\nHello, world! ➌\n```", "```\n    $ sudo apt update && sudo apt upgrade\n    ```", "```\n    $ sudo apt install g++-8 clang-6.0\n    ```", "```\n    $ g++-8 --version\n    g++-8 (Ubuntu 8-20180414-1ubuntu2) 8.0.1 20180414 (experimental) [trunk revision 259383]\n    Copyright (C) 2018 Free Software Foundation, Inc.\n    This is free software; see the source for copying conditions.There is NO\n    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR\n    PURPOSE.\n    $ clang++-6.0 --version\n    clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\n    Target: x86_64-pc-linux-gnu\n    Thread model: posix\n    InstalledDir: /usr/bin\n    ```", "```\n    $ sudo apt update && sudo apt upgrade\n    ```", "```\n    $ gpg --keyserver keyserver.ubuntu.com --recv C3C45C06\n    gpg: requesting key C3C45C06 from hkp server keyserver.ubuntu.com\n    gpg: key C3C45C06: public key \"Jakub Jelinek <jakub@redhat.com>\" imported\n    gpg: key C3C45C06: public key \"Jakub Jelinek <jakub@redhat.com>\" imported\n    gpg: no ultimately trusted keys found\n    gpg: Total number processed: 2\n    gpg:               imported: 2  (RSA: 1)\n    ```", "```\n    $ gpg --verify gcc-8.1.0.tar.gz.sig gcc-8.1.0.tar.gz\n    gpg: Signature made Wed 02 May 2018 06:41:51 AM DST using DSA key ID C3C45C06\n    gpg: Good signature from \"Jakub Jelinek <jakub@redhat.com>\"\n    gpg: WARNING: This key is not certified with a trusted signature!\n    gpg:          There is no indication that the signature belongs to the\n    owner.\n    Primary key fingerprint: 33C2 35A3 4C46 AA3F FB29  3709 A328 C3A2 C3C4\n    5C06\n    ```", "```\n    $ tar xzf gcc-8.1.0.tar.gz\n    ```", "```\n    $ cd gcc-8.1.0\n    ```", "```\n    $ ./contrib/download_prerequisites\n    --snip--\n    gmp-6.1.0.tar.bz2: OK\n    mpfr-3.1.4.tar.bz2: OK\n    mpc-1.0.3.tar.gz: OK\n    isl-0.18.tar.bz2: OK\n    All prerequisites downloaded successfully.\n    ```", "```\n    $ mkdir objdir\n    $ cd objdir\n    $ ../configure --disable-multilib\n    checking build system type... x86_64-pc-linux-gnu\n    checking host system type... x86_64-pc-linux-gnu\n    --snip--\n    configure: creating ./config.status\n    config.status: creating Makefile\n    ```", "```\n    $ make\n    ```", "```\n    $ make -k check\n    ```", "```\n    $ make install\n    ```", "```\n    $ x86_64-pc-linux-gnu-gcc-8.1.0 --version\n    ```", "```\n    $ sudo ln -s /usr/local/bin/x86_64-pc-linux-gnu-gcc-8.1.0 /usr/local/bin/g++8\n    ```", "```\n    $ x86_64-pc-linux-gnu-gcc-8.1.0 main.cpp -o hello\n    ```", "```\nint➊ the_answer➋;\n```", "```\nint the_answer = 42;\n```", "```\nint lucky_number = the_answer / 6;\n```", "```\nint main() {\n  int x = 0;\n  42  == x;  // Equality\n  42  != x;  // Inequality\n  100 >  x;  // Greater than\n  123 >= x;  // Greater than or equal to\n  -10 <  x;  // Less than\n  -99 <= x;  // Less than or equal to\n}\n```", "```\nif (➊boolean-expression) ➋statement\n```", "```\nif (➊boolean-expression) { ➋\n  statement1;\n  statement2;\n  --snip--\n}\n```", "```\n➊ if (boolean-expression-1) statement-1\n➋ else if (boolean-expression-2) statement-2\n➌ else statement-3\n```", "```\n#include <cstdio>\n\nint main() {\n  int x = 0; ➊\n  if (x > 0) printf(\"Positive.\");\n  else if (x < 0) printf(\"Negative.\");\n  else printf(\"Zero.\");\n}\n-----------------------------------------------------------------------\nZero.\n```", "```\nreturn-type➊ function_name➋(par-type1 par_name1➌, par-type2 par_name2➍) {\n  --snip--\n  return➎ return-value;\n}\n```", "```\nint step_function(int ➊x) {\n  int result = 0; ➋\n  if (x < 0) {\n    result = -1; ➌\n  } else if (x > 0) {\n    result = 1; ➍\n  }\n  return result; ➎\n}\n```", "```\nint step_function(int x) {\n  --snip--\n}\n\nint main() {\n  int value1 = step_function(100); // value1 is  1\n  int value2 = step_function(0);   // value2 is  0\n  int value3 = step_function(-10); // value3 is -1\n}\n```", "```\nprintf(\"Ten %d➊, Twenty %d➋, Thirty %d➌\", 10➍, 20➎, 30➏);\n```", "```\n#include <cstdio> ➊\n\nint step_function(int x) { ➋\n  --snip--\n}\n\nint main() { ➌\n    int num1 = 42; ➍\n    int result1 = step_function(num1); ➎\n\n    int num2 = 0;\n    int result2 = step_function(num2);\n\n    int num3 = -32767;\n    int result3 = step_function(num3);\n\n    printf(\"Num1: %d, Step: %d\\n\", num1, result1); ➏\n    printf(\"Num2: %d, Step: %d\\n\", num2, result2);\n    printf(\"Num3: %d, Step: %d\\n\", num3, result3);\n\n    return 0;\n}\n--------------------------------------------------------------------------\nNum1: 42, Step: 1 ➏\nNum2: 0, Step: 0\nNum3: -32767, Step: -1\n```", "```\n// This comment is on its own line\nint the_answer = 42; // This is an in-line comment\n```", "```\n/*\n *  This is a comment\n *  That lives on multiple lines\n *  Don’t forget to close\n */\n```", "```\n$ sudo apt install gdb\n```", "```\n    $ g++-8 main.cpp -o stepfun -g\n    ```", "```\n    $ gdb stepfun\n    GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1\n    Copyright (C) 2014 Free Software Foundation, Inc.\n    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.\n    html>\n    This is free software: you are free to change and redistribute it.\n    There is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\n    and \"show warranty\" for details.\n    This GDB was configured as \"x86_64-linux-gnu\".\n    Type \"show configuration\" for configuration details.\n    For bug reporting instructions, please see:\n    <http://www.gnu.org/software/gdb/bugs/>.\n    Find the GDB manual and other documentation resources online at:\n    <http://www.gnu.org/software/gdb/documentation/>.\n    For help, type \"help\".\n    Type \"apropos word\" to search for commands related to \"word\"...\n    Reading symbols from stepfun...done.\n    (gdb)\n    ```", "```\n    (gdb) break main.cpp:5\n    ```", "```\n    (gdb) break main\n    ```", "```\n    (gdb) run\n    Starting program: /home/josh/stepfun\n    Breakpoint 1, main () at main.cpp:5\n    5         int num1 = 42;\n    (gdb)\n    ```", "```\n    (gdb) step\n    6         int result1 = step_function(num1);\n    ```", "```\n    (gdb)\n    step_function (x=42) at step_function.cpp:4\n    ```", "```\n    (gdb) finish\n    Run till exit from #0  step_function (x=42) at step_function.cpp:7\n    0x0000000000400546 in main () at main.cpp:6\n    6         int result1 = step_function(num1);\n    Value returned is $1 = 1\n    ```", "```\n    (gdb) next\n    8         int num2 = 0;\n    ```", "```\n    (gdb) info locals\n    num2 = -648029488\n    result2 = 32767\n    num1 = 42\n    result1 = 1\n    num3 = 0\n    result3 = 0\n    ```", "```\n    (gdb) continue\n    Continuing.\n    Num1: 42, Step: 1\n    Num2: 0, Step: 0\n    Num3: -32768, Step: -1\n    [Inferior 1 (process 1322) exited normally]\n    ```", "```\n#include <cstdio>\n\nint absolute_value(int x) {\n  // Your code here\n}\n\nint main() {\n  int my_num = -10;\n  printf(\"The absolute value of %d is %d.\\n\", my_num,\n         absolute_value(my_num));\n}\n```"]