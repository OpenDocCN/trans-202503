- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Application Logic Errors and Broken Access Control
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 应用逻辑错误和访问控制失效
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'Application logic errors and broken access control vulnerabilities are quite
    different from those we’ve discussed so far. Most of the vulnerabilities covered
    in previous chapters are caused by faulty input validation: they happen when polluted
    user input is processed without proper sanitization. These malicious inputs are
    syntactically different from normal user input and are designed to manipulate
    application logic and cause damage to the application or its users.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应用逻辑错误和访问控制失效漏洞与我们之前讨论的漏洞有很大不同。前几章中讨论的大多数漏洞是由输入验证错误引起的：当污染的用户输入没有经过适当的清理处理时，就会发生这种情况。这些恶意输入在语法上不同于正常的用户输入，旨在操控应用程序的逻辑并对应用程序或其用户造成损害。
- en: On the other hand, application logic errors and broken access control issues
    are often triggered by perfectly valid HTTP requests containing no illegal or
    malformed character sequences. Still, these requests are crafted intentionally
    to misuse the application’s logic for malicious purposes or circumvent the application’s
    access control.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，应用逻辑错误和访问控制失效问题通常是由完全合法的 HTTP 请求触发的，这些请求中没有非法或格式错误的字符序列。然而，这些请求是故意设计的，目的是恶意滥用应用程序的逻辑或绕过应用程序的访问控制。
- en: Application logic errors are logic flaws in an application. Sometimes attackers
    can exploit them to cause harm to the organization, the application, or its users.
    Broken access control occurs when sensitive resources or functionality are not
    properly protected. To find these vulnerabilities, you cannot simply rely on your
    technical knowledge. Instead, you need to use your creativity and intuition to
    bypass restrictions set by the developers. This chapter explains these vulnerabilities,
    how they manifest in applications, and how you can test for them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 应用逻辑错误是应用程序中的逻辑缺陷。有时攻击者可以利用这些缺陷对组织、应用程序或其用户造成伤害。访问控制失效发生在敏感资源或功能没有得到适当保护时。要发现这些漏洞，不能仅仅依赖于你的技术知识。相反，你需要运用你的创造力和直觉来绕过开发人员设置的限制。本章将解释这些漏洞，它们如何在应用程序中表现出来，以及如何进行测试。
- en: Application Logic Errors
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用逻辑错误
- en: '*Application logic errors*, or *business logic vulnerabilities*, are ways of
    using the legitimate logic flow of an application that result in a negative consequence
    to the organization. Sound a bit abstract? The best way to understand them is
    to look at a few examples.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用逻辑错误*，或称*业务逻辑漏洞*，是指通过使用应用程序的合法逻辑流程，导致对组织产生负面后果的方式。听起来有点抽象？理解它们的最佳方式是看几个例子。'
- en: A common application logic error I’ve seen in the websites I’ve targeted is
    a flaw in the site’s multifactor authentication functionality. *Multifactor authentication*,
    or *MFA*, is the practice of requiring users to prove their identities in more
    than one way. MFA protects users in the event of password compromise by requiring
    them to authenticate with both a password and another proof of identity—typically
    a phone number or an email account, but sometimes via an authentication app, a
    physical key, or even fingerprints. Most MFA implementations prompt the user to
    authenticate using both a password and an authorization code delivered via email
    or text message.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我在攻击过的网站中看到的一个常见应用逻辑错误是网站多因素认证功能的缺陷。*多因素认证*（*MFA*）是要求用户以多种方式证明其身份的做法。当密码泄露时，MFA通过要求用户使用密码和另一种身份验证方式（通常是手机号码或电子邮件账户，但有时也可能通过认证应用程序、物理密钥或甚至指纹）来保护用户。大多数MFA实现会提示用户使用密码和通过电子邮件或短信发送的授权码进行身份验证。
- en: 'But MFA implementations are often compromised by a logic error I call the *skippable
    authentication step*, which allows users to forgo a step in the authentication
    process. For example, let’s say an application implements a three-step login process.
    First, the application checks the user’s password. Then, it sends an MFA code
    to the user and verifies it. Finally, the application asks a security question
    before logging in the user:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但MFA的实现常常会被我称为*可跳过的认证步骤*的逻辑错误所破坏，从而允许用户跳过认证过程中的某一步。例如，假设某应用实现了三步登录过程。首先，应用程序检查用户的密码。然后，它向用户发送一个MFA验证码并进行验证。最后，应用程序会询问一个安全问题，然后再登录用户：
- en: Step 1 (Password Check) ▶ Step 2 (MFA) ▶ Step 3 (Security Questions)
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 步骤 1（密码检查） ▶ 步骤 2（MFA） ▶ 步骤 3（安全问题）
- en: 'A normal authentication flow would look like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个正常的认证流程通常如下：
- en: The user visits *https://example.com/login/*. The application prompts the user
    for their password, and the user enters it.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问*https://example.com/login/*，应用程序提示用户输入密码，用户输入密码。
- en: If the password is correctly entered, the application sends an MFA code to the
    user’s email address and redirects the user to *https://example.com/mfa/*. Here,
    the user enters the MFA code.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果密码正确输入，应用程序将向用户的电子邮件地址发送 MFA 代码，并将用户重定向到*https://example.com/mfa/*。在这里，用户输入
    MFA 代码。
- en: The application checks the MFA code, and if it is correct, redirects the user
    to *https://example.com/security_questions/*. There, the application asks the
    user several security questions and logs in the user if the answers they provided
    are correct.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序检查 MFA 代码，如果正确，则将用户重定向到*https://example.com/security_questions/*。在该页面，应用程序向用户询问多个安全问题，如果用户提供的答案正确，则会登录用户。
- en: Sometimes, though, users can reach step 3 in the authentication process without
    clearing steps 1 and 2\. While the vulnerable application redirects users to step
    3 after the completion of step 2, it doesn’t verify that step 2 is completed before
    users are allowed to advance to step 3\. In this case, all the attacker has to
    do is to manipulate the site’s URL and directly request the page of a later stage.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时候，用户可以在未完成第 1 步和第 2 步的情况下，直接进入身份验证过程的第 3 步。尽管漏洞应用程序在第 2 步完成后将用户重定向到第 3
    步，但它没有验证用户是否完成第 2 步就允许用户继续到第 3 步。在这种情况下，攻击者只需操控网站的 URL，直接请求后续阶段的页面。
- en: If attackers can directly access *https://example.com/security_questions/*,
    they could bypass the multifactor authentication entirely. They might be able
    to log in with someone’s password and answers to their security questions alone,
    without needing their MFA device.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果攻击者能够直接访问*https://example.com/security_questions/*，他们可能完全绕过多因素认证。只需要用户的密码和他们的安全问题答案，就能登录，而不需要
    MFA 设备。
- en: Another time application logic errors tend to manifest is during multistep checkout
    processes. Let’s say an online shop allows users to pay via a saved payment method.
    When users save a new payment method, the site will verify whether the credit
    card is valid and current. That way, when the user submits an order via a saved
    payment method, the application won’t have to verify it again.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个应用程序逻辑错误常见的场景是多步骤结账流程中。假设一家在线商店允许用户使用已保存的支付方式进行支付。当用户保存新的支付方式时，网站会验证信用卡是否有效且当前。这样，当用户通过已保存的支付方式提交订单时，应用程序就不需要再次验证。
- en: 'Say that the POST request to submit the order with a saved payment method looks
    like this, where the `payment_id` parameter refers to the ID of the user’s saved
    credit card:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设提交使用已保存支付方式的订单的 POST 请求如下所示，其中 `payment_id` 参数指的是用户已保存信用卡的 ID：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Users can also pay with a new credit card for each order. If users pay with
    a new credit card, the card will be verified at the time of checkout. Say the
    POST request to submit the order with a new payment method looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 用户也可以为每个订单使用新的信用卡支付。如果用户使用新信用卡支付，系统将在结账时验证该卡。假设提交新支付方式订单的 POST 请求如下所示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To reiterate, the application will verify the credit card number only if the
    customer is using a new payment method. But the application also determines whether
    the payment method is new by the existence of the `saved_card` parameter in the
    HTTP request. So a malicious user can submit a request with a `saved_card` parameter
    and a fake credit card number. Because of this error in payment verification,
    they could order unlimited items for free with the unverified card:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 再强调一下，应用程序只会在客户使用新支付方式时验证信用卡号码。但是，应用程序还会通过 HTTP 请求中的 `saved_card` 参数来确定支付方式是否为新方式。因此，恶意用户可以提交带有
    `saved_card` 参数和虚假信用卡号码的请求。由于支付验证中的这个错误，他们可能使用未验证的卡免费无限制下单：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Application logic errors like these are prevalent because these flaws cannot
    be scanned for automatically. They can manifest in too many ways, and most current
    vulnerability scanners don’t have the intelligence to understand application logic
    or business requirements.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的应用程序逻辑错误很常见，因为这些缺陷不能自动扫描。它们可能以多种方式表现出来，而目前的大多数漏洞扫描器没有足够的智能来理解应用程序逻辑或业务需求。
- en: Broken Access Control
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问控制漏洞
- en: Our credit card processing example could also be classified as a broken access
    control issue. *Broken access control* occurs when access control in an application
    is improperly implemented and can be bypassed by an attacker. For example, the
    IDOR vulnerabilities discussed in Chapter 10 are a common broken access control
    issue that applications face.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的信用卡处理示例也可以归类为一个破坏性访问控制问题。*破坏性访问控制*是指应用程序中的访问控制未正确实现，攻击者可以绕过这些控制。例如，第10章讨论的IDOR漏洞就是应用程序常见的破坏性访问控制问题。
- en: But there are many other broken access control issues common in web applications
    that you should learn about if you hope to become an effective hacker. Let’s look
    at a few of them.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Web应用程序中还有许多其他常见的破坏性访问控制问题，如果你希望成为一个有效的黑客，应该学习这些问题。我们来看看其中的一些。
- en: Exposed Admin Panels
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 曝露的管理员面板
- en: Applications sometimes neglect or forget to lock up sensitive functionalities
    such as the admin panels used to monitor the application. Developers may mistakenly
    assume that users can’t access these functionalities because they aren’t linked
    from the main application, or because they’re hidden behind an obscure URL or
    port. But attackers can often access these admin panels without authentication,
    if they can locate them. For example, even if the application *example.com* hides
    its admin panel behind an obscure URL such as *https://example.com/YWRtaW4/admin.php*,
    an attacker might still be able to find it via Google dorks or URL brute-forcing.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时应用程序会忽略或忘记锁定敏感功能，比如用于监控应用程序的管理员面板。开发人员可能错误地认为用户无法访问这些功能，因为它们没有从主应用程序中链接，或者因为它们隐藏在一个晦涩的URL或端口后面。但是，如果攻击者能够找到这些面板，他们通常可以在没有身份验证的情况下访问。例如，即使应用程序*example.com*将其管理员面板隐藏在一个晦涩的URL，如*https://example.com/YWRtaW4/admin.php*，攻击者仍然可能通过Google
    dork或URL暴力破解找到它。
- en: Sometimes applications don’t implement the same access control mechanisms for
    each of the various ways of accessing their sensitive functionalities. Say the
    admin panel is properly secured so that only those with valid admin credentials
    can access it. But if the request is coming from an internal IP address that the
    machine trusts, the admin panel won’t ask the user to authenticate. In this case,
    if an attacker can find an SSRF vulnerability that allows them to send internal
    requests, they can access the admin panel without authentication.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有时应用程序没有为访问其敏感功能的不同方式实施相同的访问控制机制。假设管理员面板得到了适当的保护，只有拥有有效管理员凭证的人才能访问。但如果请求来自机器信任的内部IP地址，管理员面板就不会要求用户进行身份验证。在这种情况下，如果攻击者能找到一个SSRF漏洞，允许他们发送内部请求，他们就能绕过身份验证，访问管理员面板。
- en: Attackers might also be able to bypass access control by tampering with cookies
    or request headers if they’re predictable. Let’s say the admin panel doesn’t ask
    for credentials as long as the user requesting access presents the cookie `admin=1`
    in their HTTP request. All the attacker has to do to bypass this control is to
    add the cookie `admin=1` to their requests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还可能通过篡改cookies或请求头来绕过访问控制，前提是这些cookies或请求头是可预测的。假设管理员面板只要用户请求访问时在HTTP请求中提供cookie
    `admin=1`，就不再要求凭证。在这种情况下，攻击者要做的就是将cookie `admin=1`添加到他们的请求中，从而绕过该控制。
- en: Finally, another common access control issue occurs when users can force their
    browsing past the access control points. To understand what this means, let’s
    say the usual way of accessing *example.com*’s admin panel is via the URL *https://example.com/YWRtaW4/admin.php*.
    If you browse to that URL, you’ll be prompted to log in with your credentials.
    After that, you’ll be redirected to *https://example.com/YWRtaW4/dashboard.php*,
    which is where the admin panel resides. Users might be able to browse to *https://example.com/YWRtaW4/dashboard.php*
    and directly access the admin panel, without providing credentials, if the application
    doesn’t implement access control at the dashboard page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一个常见的访问控制问题发生在用户能够强制跳过访问控制点。为了理解这意味着什么，假设访问*example.com*的管理员面板通常是通过URL *https://example.com/YWRtaW4/admin.php*进行的。如果你访问这个URL，你会被提示使用凭证登录。之后，你会被重定向到*https://example.com/YWRtaW4/dashboard.php*，这是管理员面板所在的地方。如果应用程序没有在仪表板页面实施访问控制，用户可能会直接访问*https://example.com/YWRtaW4/dashboard.php*，绕过凭证验证，直接进入管理员面板。
- en: Directory Traversal Vulnerabilities
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录遍历漏洞
- en: '*Directory traversal vulnerabilities* are another type of broken access control.
    They happen when attackers can view, modify, or execute files they shouldn’t have
    access to by manipulating filepaths in user-input fields.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*目录遍历漏洞*是另一种破损的访问控制类型。当攻击者通过操纵用户输入字段中的文件路径，能够查看、修改或执行他们不该访问的文件时，就会发生这种漏洞。'
- en: Let’s say *example.com* has a functionality that lets users access their uploaded
    files. Browsing to the URL *http://example.com/uploads?file=example.jpeg* will
    cause the application to display the file named *example.jpeg* in the user’s uploads
    folder located at */var/www/html/uploads/USERNAME/*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设 *example.com* 有一个功能，允许用户访问他们上传的文件。浏览到 URL *http://example.com/uploads?file=example.jpeg*
    将导致应用程序显示用户上传文件夹中名为 *example.jpeg* 的文件，该文件位于 */var/www/html/uploads/USERNAME/*。
- en: 'If the application doesn’t implement input sanitization on the file parameter,
    a malicious user could use the sequence `../` to escape out of the uploads folder
    and read arbitrary files on the system. The `../` sequence refers to the parent
    directory of the current directory on Unix systems. For instance, an attacker
    could use this request to access the */etc/shadow* file on the system:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序没有对文件参数进行输入净化，则恶意用户可以使用 `../` 序列跳出上传文件夹，读取系统上的任意文件。`../` 序列指的是 Unix 系统中当前目录的父目录。例如，攻击者可以通过此请求访问系统上的*/etc/shadow*文件：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The page would navigate to */var/www/html/uploads/USERNAME/../../../../../etc/shadow*,
    which points to the */etc/shadow* file at the system root! In Linux systems, the
    */etc/shadow* file contains the hashed passwords of system users. If the user
    running the web server has the permissions to view this file, the attacker could
    now view it too. They could then crack the passwords found in this file to gain
    access to privileged users’ accounts on the system. Attackers might also gain
    access to sensitive files like configuration files, log files, and source code.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面将导航到 */var/www/html/uploads/USERNAME/../../../../../etc/shadow*，这指向系统根目录下的*/etc/shadow*文件！在
    Linux 系统中，*/etc/shadow* 文件包含系统用户的哈希密码。如果运行 Web 服务器的用户有权限查看该文件，那么攻击者也可以查看。然后，攻击者可以破解该文件中的密码，从而获取系统中具有特权的用户帐户的访问权限。攻击者还可能访问敏感文件，如配置文件、日志文件和源代码。
- en: Prevention
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: You can prevent application logic errors by performing tests to verify that
    the application’s logic is working as intended. This is best done by someone who
    understands both the business requirements of the organization and the development
    process of the application. You’ll need a detailed understanding of how your application
    works, how users interact with each other, how functionalities are carried out,
    and how complex processes work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行测试来验证应用程序逻辑是否按预期工作，你可以预防应用程序逻辑错误。最好由了解组织业务需求和应用程序开发过程的人来完成此项工作。你需要详细了解应用程序如何工作，用户如何互动，功能如何执行以及复杂过程如何进行。
- en: Carefully review each process for any logical flaws that might lead to a security
    issue. Conduct rigorous and routine testing against each functionality that is
    critical to the application’s security.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细审查每个过程，找出可能导致安全问题的逻辑缺陷。对每个对应用程序安全性至关重要的功能进行严格的常规测试。
- en: Next, prevent broken access control issues with a variety of countermeasures.
    First, implement granular access control policies on all files and actions on
    a system. The code that implements the access control policies should also be
    audited for potential bypasses. You can conduct a penetration test to try to find
    holes in the access policy or its implementation. Make sure that access control
    policies are accurate. Also, make sure that the multiple ways of accessing a service
    have consistent access control mechanisms. For example, it shouldn’t matter whether
    the application is accessed via a mobile device, desktop device, or API endpoint.
    The same authentication requirements, such as MFA, should apply for every individual
    access point.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过多种对策来防止破损的访问控制问题。首先，在系统中的所有文件和操作上实施细粒度的访问控制策略。实现访问控制策略的代码也应进行审计，以防止潜在的绕过。你可以进行渗透测试，试图找到访问控制策略或其实现中的漏洞。确保访问控制策略准确无误。同时，确保访问服务的多种方式具有一致的访问控制机制。例如，应用程序是否通过移动设备、桌面设备或
    API 端点访问，应该没有区别。每个访问点都应该适用相同的身份验证要求，如 MFA（多因素认证）。
- en: Hunting for Application Logic Errors and Broken Access Control
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找应用程序逻辑错误和破损的访问控制
- en: Application logic errors and access control issues are some of the easiest bugs
    for beginners to find. Hunting for these vulnerabilities doesn’t involve tampering
    with code or crafting malicious inputs; instead, it requires creative thinking
    and a willingness to experiment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序逻辑错误和访问控制问题是初学者最容易发现的错误之一。寻找这些漏洞不涉及篡改代码或构造恶意输入；相反，它需要创造性思维和愿意进行实验的态度。
- en: 'Step 1: Learn About Your Target'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步：了解你的目标
- en: Start by learning about your target application. Browse the application as a
    regular user to uncover functionalities and interesting features. You can also
    read the application’s engineering blogs and documentation. The more you understand
    about the architecture, development process, and business needs of that application,
    the better you will be at spotting these vulnerabilities.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从了解你的目标应用程序开始。作为普通用户浏览应用程序，发现功能和有趣的特性。你还可以阅读应用程序的工程博客和文档。你对该应用程序的架构、开发过程和业务需求了解得越多，就越能有效地发现这些漏洞。
- en: For example, if you find out that the application just added a new payment option
    for its online store, you can test that payment option first since new features
    are often the least tested by other hackers. And if you find out that the application
    uses WordPress, you should try to access */wp-admin/admin.php*, the default path
    for WordPress admin portals.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你发现应用程序刚刚为其在线商店添加了新的支付选项，你可以首先测试该支付选项，因为新功能通常是其他黑客测试最少的功能。如果你发现应用程序使用的是WordPress，你应该尝试访问*/wp-admin/admin.php*，这是WordPress管理员门户的默认路径。
- en: 'Step 2: Intercept Requests While Browsing'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步：浏览时拦截请求
- en: Intercept requests while browsing the site and pay attention to sensitive functionalities.
    Keep track of every request sent during these actions. Take note of how sensitive
    functionalities and access control are implemented, and how they interact with
    client requests. For the new payment option you found, what are the requests needed
    to complete the payment? Do any request parameters indicate the payment type or
    how much will be charged? When accessing the admin portal at */wp-admin/admin.php*,
    are any special HTTP headers or parameters sent?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览网站时拦截请求，并关注敏感功能。跟踪在这些操作过程中发送的每一个请求。注意敏感功能和访问控制的实现方式，以及它们如何与客户端请求互动。对于你发现的新支付选项，完成支付需要哪些请求？是否有任何请求参数指示支付类型或收费金额？访问*/wp-admin/admin.php*的管理员门户时，是否发送了任何特殊的HTTP头或参数？
- en: 'Step 3: Think Outside the Box'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三步：跳出框架思考
- en: Finally, use your creativity to think of ways to bypass access control or otherwise
    interfere with application logic. Play with the requests that you have intercepted
    and craft requests that should not be granted. If you modify the amount to be
    charged in a request parameter, will the application still process the transaction
    while charging you a lower amount? Can you switch the payment type to a gift card
    even though you don’t have one? Can you access the admin page by adding a special
    cookie, such as `admin=1`?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，发挥你的创造力，思考绕过访问控制或干扰应用程序逻辑的方法。玩弄你拦截的请求，构造不应被授予的请求。如果你在请求参数中修改了要收费的金额，应用程序是否仍然会处理交易并收取较低的金额？即使你没有礼品卡，你能否将支付类型更改为礼品卡？通过添加一个特殊的cookie（如`admin=1`），你能否访问管理员页面？
- en: Escalating the Attack
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级攻击
- en: Escalating application logic errors and broken access control depends entirely
    on the nature of the flaw you find. But a general rule of thumb is that you can
    try to combine the application logic error or broken access control with other
    vulnerabilities to increase their impact.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 升级应用程序逻辑错误和破损的访问控制完全取决于你发现的缺陷的性质。但一般的经验法则是，你可以尝试将应用程序逻辑错误或破损的访问控制与其他漏洞结合，以增加它们的影响。
- en: For example, a broken access control that gives you access to the admin panel
    with a console or application deployment capabilities can lead to remote code
    execution. If you can find the configuration files of a web application, you can
    search for CVEs that pertain to the software versions in use to further compromise
    the application. You might also find credentials in a file that can be used to
    access different machines on the network.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个破损的访问控制漏洞，能够让你通过控制台或应用部署功能访问管理员面板，可能会导致远程代码执行。如果你能找到一个Web应用程序的配置文件，你可以搜索与正在使用的软件版本相关的CVE，从而进一步破坏应用程序。你还可能在文件中找到凭证，用于访问网络上其他机器。
- en: While the impact of a vulnerability like SQL injection or stored XSS is often
    clear, it isn’t always apparent what attackers can achieve with application logic
    errors and broken access control vulnerabilities. Think of ways malicious users
    can exploit these vulnerabilities to the fullest extent, and communicate their
    impact in detail in your report.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然像 SQL 注入或存储型 XSS 这样的漏洞影响通常很明显，但攻击者能通过应用程序逻辑错误和破坏性访问控制漏洞实现的效果并不总是显而易见。想一想恶意用户如何最大程度地利用这些漏洞，并在报告中详细传达其影响。
- en: Finding Your First Application Logic Error or Broken Access Control!
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找到你的第一个应用程序逻辑错误或破坏性访问控制漏洞！
- en: 'Find your very first application logic error or broken access control vulnerability
    by using the tips you learned in this chapter:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用你在本章中学到的技巧，找到你的第一个应用程序逻辑错误或破坏性访问控制漏洞：
- en: Learn about your target application. The more you understand about the architecture
    and development process of the web application, the better you’ll be at spotting
    these vulnerabilities.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 了解你的目标应用程序。你对 web 应用程序架构和开发过程的了解越多，你就越能发现这些漏洞。
- en: Intercept requests while browsing the site and pay attention to sensitive functionalities.
    Keep track of every request sent during these actions.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览网站时拦截请求，并关注敏感功能。记录这些操作过程中发送的每一个请求。
- en: Use your creativity to think of ways to bypass access control or otherwise interfere
    with application logic.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发挥你的创造力，思考如何绕过访问控制或以其他方式干扰应用程序逻辑。
- en: Think of ways to combine the vulnerability you’ve found with other vulnerabilities
    to maximize the potential impact of the flaw.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 思考如何将你发现的漏洞与其他漏洞结合起来，以最大化漏洞的潜在影响。
- en: Draft your report! Be sure to communicate to the receiver of the report how
    the issue could be exploited by malicious users.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 草拟你的报告！确保向报告的接收者传达该问题可能如何被恶意用户利用。
