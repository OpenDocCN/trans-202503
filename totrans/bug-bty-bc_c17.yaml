- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application Logic Errors and Broken Access Control
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Application logic errors and broken access control vulnerabilities are quite
    different from those we’ve discussed so far. Most of the vulnerabilities covered
    in previous chapters are caused by faulty input validation: they happen when polluted
    user input is processed without proper sanitization. These malicious inputs are
    syntactically different from normal user input and are designed to manipulate
    application logic and cause damage to the application or its users.'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, application logic errors and broken access control issues
    are often triggered by perfectly valid HTTP requests containing no illegal or
    malformed character sequences. Still, these requests are crafted intentionally
    to misuse the application’s logic for malicious purposes or circumvent the application’s
    access control.
  prefs: []
  type: TYPE_NORMAL
- en: Application logic errors are logic flaws in an application. Sometimes attackers
    can exploit them to cause harm to the organization, the application, or its users.
    Broken access control occurs when sensitive resources or functionality are not
    properly protected. To find these vulnerabilities, you cannot simply rely on your
    technical knowledge. Instead, you need to use your creativity and intuition to
    bypass restrictions set by the developers. This chapter explains these vulnerabilities,
    how they manifest in applications, and how you can test for them.
  prefs: []
  type: TYPE_NORMAL
- en: Application Logic Errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Application logic errors*, or *business logic vulnerabilities*, are ways of
    using the legitimate logic flow of an application that result in a negative consequence
    to the organization. Sound a bit abstract? The best way to understand them is
    to look at a few examples.'
  prefs: []
  type: TYPE_NORMAL
- en: A common application logic error I’ve seen in the websites I’ve targeted is
    a flaw in the site’s multifactor authentication functionality. *Multifactor authentication*,
    or *MFA*, is the practice of requiring users to prove their identities in more
    than one way. MFA protects users in the event of password compromise by requiring
    them to authenticate with both a password and another proof of identity—typically
    a phone number or an email account, but sometimes via an authentication app, a
    physical key, or even fingerprints. Most MFA implementations prompt the user to
    authenticate using both a password and an authorization code delivered via email
    or text message.
  prefs: []
  type: TYPE_NORMAL
- en: 'But MFA implementations are often compromised by a logic error I call the *skippable
    authentication step*, which allows users to forgo a step in the authentication
    process. For example, let’s say an application implements a three-step login process.
    First, the application checks the user’s password. Then, it sends an MFA code
    to the user and verifies it. Finally, the application asks a security question
    before logging in the user:'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 (Password Check) ▶ Step 2 (MFA) ▶ Step 3 (Security Questions)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'A normal authentication flow would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The user visits *https://example.com/login/*. The application prompts the user
    for their password, and the user enters it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the password is correctly entered, the application sends an MFA code to the
    user’s email address and redirects the user to *https://example.com/mfa/*. Here,
    the user enters the MFA code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application checks the MFA code, and if it is correct, redirects the user
    to *https://example.com/security_questions/*. There, the application asks the
    user several security questions and logs in the user if the answers they provided
    are correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sometimes, though, users can reach step 3 in the authentication process without
    clearing steps 1 and 2\. While the vulnerable application redirects users to step
    3 after the completion of step 2, it doesn’t verify that step 2 is completed before
    users are allowed to advance to step 3\. In this case, all the attacker has to
    do is to manipulate the site’s URL and directly request the page of a later stage.
  prefs: []
  type: TYPE_NORMAL
- en: If attackers can directly access *https://example.com/security_questions/*,
    they could bypass the multifactor authentication entirely. They might be able
    to log in with someone’s password and answers to their security questions alone,
    without needing their MFA device.
  prefs: []
  type: TYPE_NORMAL
- en: Another time application logic errors tend to manifest is during multistep checkout
    processes. Let’s say an online shop allows users to pay via a saved payment method.
    When users save a new payment method, the site will verify whether the credit
    card is valid and current. That way, when the user submits an order via a saved
    payment method, the application won’t have to verify it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say that the POST request to submit the order with a saved payment method looks
    like this, where the `payment_id` parameter refers to the ID of the user’s saved
    credit card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Users can also pay with a new credit card for each order. If users pay with
    a new credit card, the card will be verified at the time of checkout. Say the
    POST request to submit the order with a new payment method looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To reiterate, the application will verify the credit card number only if the
    customer is using a new payment method. But the application also determines whether
    the payment method is new by the existence of the `saved_card` parameter in the
    HTTP request. So a malicious user can submit a request with a `saved_card` parameter
    and a fake credit card number. Because of this error in payment verification,
    they could order unlimited items for free with the unverified card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Application logic errors like these are prevalent because these flaws cannot
    be scanned for automatically. They can manifest in too many ways, and most current
    vulnerability scanners don’t have the intelligence to understand application logic
    or business requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Broken Access Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our credit card processing example could also be classified as a broken access
    control issue. *Broken access control* occurs when access control in an application
    is improperly implemented and can be bypassed by an attacker. For example, the
    IDOR vulnerabilities discussed in Chapter 10 are a common broken access control
    issue that applications face.
  prefs: []
  type: TYPE_NORMAL
- en: But there are many other broken access control issues common in web applications
    that you should learn about if you hope to become an effective hacker. Let’s look
    at a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: Exposed Admin Panels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Applications sometimes neglect or forget to lock up sensitive functionalities
    such as the admin panels used to monitor the application. Developers may mistakenly
    assume that users can’t access these functionalities because they aren’t linked
    from the main application, or because they’re hidden behind an obscure URL or
    port. But attackers can often access these admin panels without authentication,
    if they can locate them. For example, even if the application *example.com* hides
    its admin panel behind an obscure URL such as *https://example.com/YWRtaW4/admin.php*,
    an attacker might still be able to find it via Google dorks or URL brute-forcing.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes applications don’t implement the same access control mechanisms for
    each of the various ways of accessing their sensitive functionalities. Say the
    admin panel is properly secured so that only those with valid admin credentials
    can access it. But if the request is coming from an internal IP address that the
    machine trusts, the admin panel won’t ask the user to authenticate. In this case,
    if an attacker can find an SSRF vulnerability that allows them to send internal
    requests, they can access the admin panel without authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Attackers might also be able to bypass access control by tampering with cookies
    or request headers if they’re predictable. Let’s say the admin panel doesn’t ask
    for credentials as long as the user requesting access presents the cookie `admin=1`
    in their HTTP request. All the attacker has to do to bypass this control is to
    add the cookie `admin=1` to their requests.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, another common access control issue occurs when users can force their
    browsing past the access control points. To understand what this means, let’s
    say the usual way of accessing *example.com*’s admin panel is via the URL *https://example.com/YWRtaW4/admin.php*.
    If you browse to that URL, you’ll be prompted to log in with your credentials.
    After that, you’ll be redirected to *https://example.com/YWRtaW4/dashboard.php*,
    which is where the admin panel resides. Users might be able to browse to *https://example.com/YWRtaW4/dashboard.php*
    and directly access the admin panel, without providing credentials, if the application
    doesn’t implement access control at the dashboard page.
  prefs: []
  type: TYPE_NORMAL
- en: Directory Traversal Vulnerabilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Directory traversal vulnerabilities* are another type of broken access control.
    They happen when attackers can view, modify, or execute files they shouldn’t have
    access to by manipulating filepaths in user-input fields.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say *example.com* has a functionality that lets users access their uploaded
    files. Browsing to the URL *http://example.com/uploads?file=example.jpeg* will
    cause the application to display the file named *example.jpeg* in the user’s uploads
    folder located at */var/www/html/uploads/USERNAME/*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the application doesn’t implement input sanitization on the file parameter,
    a malicious user could use the sequence `../` to escape out of the uploads folder
    and read arbitrary files on the system. The `../` sequence refers to the parent
    directory of the current directory on Unix systems. For instance, an attacker
    could use this request to access the */etc/shadow* file on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The page would navigate to */var/www/html/uploads/USERNAME/../../../../../etc/shadow*,
    which points to the */etc/shadow* file at the system root! In Linux systems, the
    */etc/shadow* file contains the hashed passwords of system users. If the user
    running the web server has the permissions to view this file, the attacker could
    now view it too. They could then crack the passwords found in this file to gain
    access to privileged users’ accounts on the system. Attackers might also gain
    access to sensitive files like configuration files, log files, and source code.
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can prevent application logic errors by performing tests to verify that
    the application’s logic is working as intended. This is best done by someone who
    understands both the business requirements of the organization and the development
    process of the application. You’ll need a detailed understanding of how your application
    works, how users interact with each other, how functionalities are carried out,
    and how complex processes work.
  prefs: []
  type: TYPE_NORMAL
- en: Carefully review each process for any logical flaws that might lead to a security
    issue. Conduct rigorous and routine testing against each functionality that is
    critical to the application’s security.
  prefs: []
  type: TYPE_NORMAL
- en: Next, prevent broken access control issues with a variety of countermeasures.
    First, implement granular access control policies on all files and actions on
    a system. The code that implements the access control policies should also be
    audited for potential bypasses. You can conduct a penetration test to try to find
    holes in the access policy or its implementation. Make sure that access control
    policies are accurate. Also, make sure that the multiple ways of accessing a service
    have consistent access control mechanisms. For example, it shouldn’t matter whether
    the application is accessed via a mobile device, desktop device, or API endpoint.
    The same authentication requirements, such as MFA, should apply for every individual
    access point.
  prefs: []
  type: TYPE_NORMAL
- en: Hunting for Application Logic Errors and Broken Access Control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Application logic errors and access control issues are some of the easiest bugs
    for beginners to find. Hunting for these vulnerabilities doesn’t involve tampering
    with code or crafting malicious inputs; instead, it requires creative thinking
    and a willingness to experiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Learn About Your Target'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start by learning about your target application. Browse the application as a
    regular user to uncover functionalities and interesting features. You can also
    read the application’s engineering blogs and documentation. The more you understand
    about the architecture, development process, and business needs of that application,
    the better you will be at spotting these vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you find out that the application just added a new payment option
    for its online store, you can test that payment option first since new features
    are often the least tested by other hackers. And if you find out that the application
    uses WordPress, you should try to access */wp-admin/admin.php*, the default path
    for WordPress admin portals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Intercept Requests While Browsing'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Intercept requests while browsing the site and pay attention to sensitive functionalities.
    Keep track of every request sent during these actions. Take note of how sensitive
    functionalities and access control are implemented, and how they interact with
    client requests. For the new payment option you found, what are the requests needed
    to complete the payment? Do any request parameters indicate the payment type or
    how much will be charged? When accessing the admin portal at */wp-admin/admin.php*,
    are any special HTTP headers or parameters sent?
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Think Outside the Box'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, use your creativity to think of ways to bypass access control or otherwise
    interfere with application logic. Play with the requests that you have intercepted
    and craft requests that should not be granted. If you modify the amount to be
    charged in a request parameter, will the application still process the transaction
    while charging you a lower amount? Can you switch the payment type to a gift card
    even though you don’t have one? Can you access the admin page by adding a special
    cookie, such as `admin=1`?
  prefs: []
  type: TYPE_NORMAL
- en: Escalating the Attack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Escalating application logic errors and broken access control depends entirely
    on the nature of the flaw you find. But a general rule of thumb is that you can
    try to combine the application logic error or broken access control with other
    vulnerabilities to increase their impact.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a broken access control that gives you access to the admin panel
    with a console or application deployment capabilities can lead to remote code
    execution. If you can find the configuration files of a web application, you can
    search for CVEs that pertain to the software versions in use to further compromise
    the application. You might also find credentials in a file that can be used to
    access different machines on the network.
  prefs: []
  type: TYPE_NORMAL
- en: While the impact of a vulnerability like SQL injection or stored XSS is often
    clear, it isn’t always apparent what attackers can achieve with application logic
    errors and broken access control vulnerabilities. Think of ways malicious users
    can exploit these vulnerabilities to the fullest extent, and communicate their
    impact in detail in your report.
  prefs: []
  type: TYPE_NORMAL
- en: Finding Your First Application Logic Error or Broken Access Control!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Find your very first application logic error or broken access control vulnerability
    by using the tips you learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about your target application. The more you understand about the architecture
    and development process of the web application, the better you’ll be at spotting
    these vulnerabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Intercept requests while browsing the site and pay attention to sensitive functionalities.
    Keep track of every request sent during these actions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your creativity to think of ways to bypass access control or otherwise interfere
    with application logic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Think of ways to combine the vulnerability you’ve found with other vulnerabilities
    to maximize the potential impact of the flaw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draft your report! Be sure to communicate to the receiver of the report how
    the issue could be exploited by malicious users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
