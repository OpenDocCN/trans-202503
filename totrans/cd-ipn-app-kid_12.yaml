- en: '**10**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ADDING A BIRTHDAY CLASS AND HANDLING USER INPUT**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](Image00001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING A BIRTHDAY CLASS AND HANDLING USER INPUT**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](Image00001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A NEW FILE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Image00222.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-1: Creating a new file in Xcode*'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00223.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00224.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-3: The* Birthday.swift *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE BIRTHDAY CLASS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00225.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Birthday.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROGRAMMING USER INPUT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00226.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'to the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE687]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE688]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE689]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE690]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE691]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE692]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE693]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE694]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE695]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE696]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE697]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE698]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE699]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE700]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE701]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE702]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE703]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE704]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE705]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE706]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE707]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE708]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE709]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE710]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE711]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE712]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE713]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE714]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE715]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE716]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE717]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE718]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE719]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE720]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE721]'
  prefs: []
  type: TYPE_PRE
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE722]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE723]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE724]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE725]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE726]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE727]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE728]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE729]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE730]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE731]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE732]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE733]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE734]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE735]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE736]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE737]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE738]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE739]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00227.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE740]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE741]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE742]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE743]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE744]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE745]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE746]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE747]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE748]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE749]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE750]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE751]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE752]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE753]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE754]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE755]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE756]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE757]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE758]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE759]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE760]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE761]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE762]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE763]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE764]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE765]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE766]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE767]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE768]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE769]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE770]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE771]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE772]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE773]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE774]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE775]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE776]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE777]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE778]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE779]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE780]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE781]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE782]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE783]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE784]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE785]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE786]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE787]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE788]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE789]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE790]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE791]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE792]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE793]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00228.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE794]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE795]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE796]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE797]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE798]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE799]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE800]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE801]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE802]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE803]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE804]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE805]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE806]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE807]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE808]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE809]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE810]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE811]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE812]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE813]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE814]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE815]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE816]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE817]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE818]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE819]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE820]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE821]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE822]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE823]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE824]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE825]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE826]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE827]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE828]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE829]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00229.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE830]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE831]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE832]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE833]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE834]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE835]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE836]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE837]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE838]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE839]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE840]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE841]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE842]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE843]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE844]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE845]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE846]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE847]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE848]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE849]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE850]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE851]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE852]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE853]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE854]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE855]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE856]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE857]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE858]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE859]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE860]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE861]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE862]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE863]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE864]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE865]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE866]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE867]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE868]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE869]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE870]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE871]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE872]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE873]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE874]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE875]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE876]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE877]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE878]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE879]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE880]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE881]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE882]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE883]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE884]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE885]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE886]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE887]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE888]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE889]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE890]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE891]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE892]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE893]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE894]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE895]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE896]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE897]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE898]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE899]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE900]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE901]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE902]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE903]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE904]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE905]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE906]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE907]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE908]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE909]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE910]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE911]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE912]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE913]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE914]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE915]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE916]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE917]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE918]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE919]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE920]'
  prefs: []
  type: TYPE_PRE
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE921]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE922]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE923]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE924]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE925]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE926]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE927]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE928]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE929]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE930]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE931]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE932]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE933]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE934]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE935]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE936]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE937]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE938]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE939]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE940]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE941]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE942]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE943]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE944]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE945]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE946]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE947]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE948]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE949]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE950]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE951]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE952]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**SAVING A BIRTHDAY**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE953]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE954]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE955]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE956]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE957]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE958]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE959]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE960]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE961]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE962]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE963]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE964]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE965]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE966]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE967]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE968]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOOKING UP THE SAVE BUTTON**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE969]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE970]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE971]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE972]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE973]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE974]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE975]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE976]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE977]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE978]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE979]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE980]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE981]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE982]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE983]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE984]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE985]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE986]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE987]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE988]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE989]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE990]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE991]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE992]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE993]'
  prefs: []
  type: TYPE_PRE
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE994]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE995]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE996]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE997]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE998]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE999]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1000]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1001]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1002]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1003]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1004]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1005]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1006]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1007]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1008]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1009]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1010]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1011]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1012]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1013]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1014]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1015]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1016]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1017]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1018]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1019]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1020]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1021]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1022]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1023]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1024]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1025]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1026]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1027]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1028]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1029]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1030]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1031]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1032]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1033]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1034]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1035]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1036]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1037]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1038]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1039]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1040]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1041]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1042]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**READING TEXT FROM A TEXT FIELD**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1043]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1044]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1045]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1046]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1047]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1048]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1049]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1050]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1051]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1052]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1053]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1054]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1055]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1056]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1057]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1058]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1059]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1060]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1061]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1062]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1063]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1064]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1065]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1066]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1067]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1068]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1069]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1070]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1071]'
  prefs: []
  type: TYPE_PRE
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1072]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1073]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1074]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1075]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1076]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1077]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1078]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1079]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1080]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1081]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1082]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1083]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1084]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1085]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1086]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1087]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1088]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1089]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1090]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1091]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1092]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1093]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1094]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1095]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1096]'
  prefs: []
  type: TYPE_PRE
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1097]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1098]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1099]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1100]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1101]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1102]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1103]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1104]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1105]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1106]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**GETTING A DATE FROM A DATE PICKER**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1107]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1108]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1109]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1110]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1111]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1112]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1113]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1114]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1115]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1116]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines to your saveTapped(_:) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1117]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1118]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1119]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1120]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1121]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1122]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1123]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1124]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1125]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1126]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1127]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1128]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1129]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1130]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1131]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1132]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1133]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1134]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1135]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1136]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1137]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1138]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1139]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1140]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1141]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1142]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**CREATING A BIRTHDAY**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1143]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1144]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1145]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1146]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1147]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1148]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1149]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1150]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1151]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1152]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1153]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1154]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1155]'
  prefs: []
  type: TYPE_PRE
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1156]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1157]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1158]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1159]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1160]'
  prefs: []
  type: TYPE_PRE
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1161]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1162]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**ADDING THE CANCEL BUTTON**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1163]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1164]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '*AddBirthdayViewController.swift*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1165]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1166]'
  prefs: []
  type: TYPE_PRE
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU LEARNED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  prefs: []
  type: TYPE_NORMAL
