- en: '**10**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**10**'
- en: '**ADDING A BIRTHDAY CLASS AND HANDLING USER INPUT**'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**添加生日类并处理用户输入**'
- en: '![](Image00001.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00001.jpg)'
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 9 章](text00020.html#ch09)中，你通过创建视图控制器、用于在它们之间导航的按钮和用于接受用户输入的屏幕，设置了应用的视觉界面。现在是时候深入编程了！在本章中，我们将向你展示如何编写应用程序的代码，并将其与故事板连接起来。你将编写
    Birthday 和 AddBirthdayViewController 类，以便使用在前一章中创建的输入控件添加生日。
- en: '**THE BIRTHDAY CLASS**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**生日类**'
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将编写一个临时的 Birthday 类，用于存储你的生日信息，但不会在设备上永久保存生日数据。我们稍后会用更好的解决方案替换它，但这个方法可以让我们测试输入控件。
- en: '![](Image00221.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时，当你编程时，你需要编写包含多个部分的应用程序，这些部分将一起工作。你可能首先编写应用的一部分，就像我们之前创建输入控件一样，但为了测试这部分，你可能需要一些尚未编写的其他代码。当这种情况发生时，你可以快速编写一些临时的*
    测试代码 *，在完成应用程序的其他部分后再进行重构。这就是我们在 Birthday 类中所做的——我们将在[第 12 章](text00023.html#ch12)中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在 Xcode 中打开你的 BirthdayTracker 应用程序。确保可以看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写 Birthday 类。在 Xcode 中，文件就像任何其他计算机文件一样——它是一种文档类型。当你用 Swift 编写应用程序时，你将在
    Swift 文件中编写类和函数。就像 Word 文件有 *.doc* 或 *.docx* 扩展名，PDF 文件以 *.pdf* 结尾一样，Swift 文件在文件名后也有
    *.swift* 扩展名。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向应用程序添加一个新类，创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写多个类，但为了更好地组织项目，建议将每个类放在单独的文件中，并且文件名与类名相匹配。在项目导航器中**按住
    Control 键**点击*BirthdayTracker* 文件夹，并从菜单中选择**新建文件…**选项，如[图 10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，类似于[图 10-2](text00021.html#ch10fig2)。在这里，你需要选择要创建的文件类型，即一个通用的空 Swift
    文件。在对话框顶部选择**iOS**，然后选择**Swift 文件**，点击**下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday*，然后点击 **Create**。您应该会在 Project navigator 的 *BirthdayTracker*
    文件夹中看到 *Birthday.swift*。点击它，您应该会看到一个空的 *Birthday.swift* 文件，如 [图 10-3](text00021.html#ch10fig3)
    所示。
- en: '![](Image00224.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件顶部，Xcode 已自动写入了一些版权信息作为代码注释。紧跟在“Created by”后面的名字来自您计算机的联系人应用中的联系人卡。版权年份之后，您应该看到在
    [第 1 章](text00011.html#ch01) 创建第一个 Xcode 项目时使用的组织名称。每次在 Xcode 中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了 *Birthday.swift* 文件，可以创建 Birthday 类来存储您的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 Birthday 类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Birthday 类将具有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 属性应该是
    String 类型，而 birthdate 将是一个内建于 Swift 中的特殊类，名为 Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户关于生日的信息。在
    *Birthday.swift* 中的 import Foundation 语句下方输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，您为 Birthday 类添加了一个初始化器，该初始化器将 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们设置为类的属性 ➌ 。这样，您就可以将名字和日期传递给 Birthday 类，以存储生日。
- en: '**NOTE**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步一步地构建每个项目代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经有了一个可以保存朋友姓名和出生日期的 Birthday 类，并且在 [第 9 章](text00020.html#ch09) 中设置了输入字段。但是，Birthday
    类和输入字段之间没有连接，因此用户的输入不会被存储为一个生日。现在是时候编写代码，使界面能够添加生日了。为此，您将创建一个新的 AddBirthdayViewController
    类来管理 storyboard 中“添加生日”场景的输入字段。（记住，视图由视图控制器控制，这正是您接下来要创建的内容。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，它用代码表示并控制一个视图。storyboard 中的视图控制器是由这个 ViewController 类管理的，我们将重命名它为 AddBirthdayViewController，以便类名能更好地描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift* ，请选中它并点击项目导航器中的文件名，这样它就会被高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过更改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 文件名'
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'to the line:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下行：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内建的 didReceiveMemoryWarning() 方法，所以可以通过删除这个方法来清理你的代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建方法的类，用于管理在你运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的一个 *子类*，它允许我们通过实现一些 UIViewController 内建方法的自定义版本来控制 storyboard
    中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法在视图控制器创建并出现在屏幕上或从屏幕消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后，但在视图显示到屏幕之前调用。这是执行任何你只需要做一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图显示到屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不同的是它在视图控制器的视图显示到屏幕后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何继承
    UIViewController 的子类都使用这个方法，因此当你创建 UIViewController 的子类时，它会自动为 viewDidLoad() 方法添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并没有为其他三个方法提供占位符代码。如果你决定使用其中一个，你可以开始输入它，自动补全会填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()仅在视图控制器第一次创建时被调用一次，但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上并随后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经加载并位于另一个屏幕后面。如果你希望每次视图出现时刷新新的信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)一节中，[第149页](text00021.html#page_149)将重写AddBirthdayViewController中的viewDidLoad()。不过现在，我们可以先不管这些方法，将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器包含一个“名”文本字段、一个“姓”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给连接到屏幕元素的输入控件（使用IBOutlets）。将以下三个属性添加到AddBirthdayViewController类的顶部，位于viewDidLoad()方法之前（灰色的线条表示一些现有代码，以确定位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB代表*界面构建器*，这是Xcode中我们处理故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距中会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。如果圆圈未填充，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* 带有IBOutlet属性的AddBirthdayViewController *用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController以及输入控件的属性，是时候连接“名”和“姓”文本字段以及“出生日期”日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 storyboard 中 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，接着在左侧大纲视图中选择 **Add a Birthday Scene**，然后在右侧面板中打开身份检查器。你应该能在顶部看到一个
    Custom Class 部分，将类更改为 AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本字段和日期选择器。在左侧大纲视图中点击
    Add a Birthday Scene 旁边的三角形展开该场景的项目菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**，即黄色视图控制器图标旁边的项，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框的 Outlets 部分，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象被高亮为蓝色时，可以松开鼠标（参见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *插座*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中并与“birthdatePicker”相邻，且连接圆圈已填充（参见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将“birthdatePicker”插座连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，将不会发生任何反应。Xcode
    知道 “birthdatePicker” 必须连接到 UIDatePicker 类，因为在我们创建该属性时，已在 AddBirthdayViewController
    中为其指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *插座已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈到 First Name 标签下方的文本字段来连接 firstNameTextField。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了 storyboard 部分。接下来，让我们返回到 *AddBirthdayViewController.swift* 文件中，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期出现在未来是没有意义的，所以我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”
    一节中讨论过 viewDidLoad() 方法（见[第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此找到
    AddBirthdayViewController 中的该方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad() 。请注意，保留方法中的 super.viewDidLoad() 行是很重要的。当你创建一个子类（例如 AddBirthdayViewController
    ）并重写原始超类的方法时，确保你也调用超类的方法。Apple 可能在 UIViewController 的 viewDidLoad() 方法中运行一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()
    。Date() 方法创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在[第9章](text00020.html#ch09)中制作的按钮，在这个视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个每次用户点击保存按钮时都会调用的 saveTapped(_:) 方法开始。在 AddBirthdayViewController 中，紧接在
    viewDidLoad() 方法后面添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE6]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素进行操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时它将被执行。编写
    IBAction 方法时，你应该始终包括一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，并且参数名是 sender ➋ ，但你可以根据需要自定义参数名。在这里，我们希望每次用户点击保存时都调用
    saveTapped(_:) 方法，保存按钮是 UIBarButtonItem 。因此，我们指定 sender 的类型为 UIBarButtonItem ➌
    。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件中。按住 CONTROL 键并单击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为“已接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从
    saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框的底部列出了 IBActions，在“已接收的操作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用程序。当你点击保存按钮时，消息 "The save button was tapped." 应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入后从 firstNameTextField 和 lastNameTextField 中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的字符串属性叫做 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以用它在 saveTapped(_:)
    方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果它存在的话，也就是用户输入了值）或空字符串
    ""。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并操作符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对 lastName 做相同的操作。在你获取了 firstName 和 lastName 的值后，将它们打印到控制台，这样你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。在不输入任何内容的情况下尝试点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似如下的输出：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字，看看计算机如何在调试控制台中输出它。接下来，让我们专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个名为 date 的属性，表示当前选择器中显示的日期。对于 birthdatePicker，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了 firstName、lastName 和 birthdate——这三项数据是创建生日所需的！你会注意到，调试控制台中显示的日期格式有点奇怪，还包括时间和+0000的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用打印测试 newBirthday 实例的语句来替代它们。然后在 saveTapped(_:)
    方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点语法将它的属性输出到调试控制台。打印的输出与之前的 print 语句相同，但这次你得到的是 newBirthday
    实例中的值。运行应用程序，输入一个生日并点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个 Birthday。你将在 [第11章](text00022.html#ch11) 学到如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日屏幕应该消失。我们通过向类中添加 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于给关闭屏幕添加动画效果。传入 true，用户可以看到“添加生日”屏幕从屏幕上滑下来。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是可以传递到函数中的一段代码。如果你有任何代码需要在视图控制器被关闭后执行，可以使用 completion 闭包。因为这里不需要执行任何操作，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样操作。打开 *Main.storyboard*
    并弹出 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用程序，点击 **+** 进入添加生日屏幕，然后点击 **取消**。你应该会看到添加生日屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个生日表视图控制器中显示你的生日列表。
- en: '**ADDING A BIRTHDAY CLASS AND HANDLING USER INPUT**'
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**添加生日类并处理用户输入**'
- en: '![](Image00001.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00001.jpg)'
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](text00020.html#ch09)中，你通过创建视图控制器、按钮来进行页面之间的导航，并设置了接收用户输入的屏幕，从而搭建了应用的视觉界面。现在是时候深入编程了！在这一章中，我们将展示如何编写代码并将它连接到你的故事板。你将编写Birthday和AddBirthdayViewController类，以便使用在上一章中创建的输入控件添加生日。
- en: '**THE BIRTHDAY CLASS**'
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**生日类**'
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将编写一个临时的Birthday类，用来存储生日数据，但不会将这些数据永久保存到设备上。我们稍后会用更好的解决方案替换它，但这种方法让我们可以测试输入控件。
- en: '![](Image00221.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时候，当你编程时，你需要编写包含多个部分并且会协同工作的应用。你可能会先写应用的某一部分，就像我们之前编写的输入控件那样，但要测试这一部分，你可能还需要其他一些尚未编写的代码。遇到这种情况时，你可以快速编写一些临时的*测试代码*，待你完成其余部分后再进行修改。我们现在做的就是这样，Birthday类将在[第12章](text00023.html#ch12)中被替换。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在Xcode中打开你的BirthdayTracker应用。确保你能看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个文件，在其中编写Birthday类。在Xcode中，文件就像任何其他计算机文件一样——它是一种文档。当你用Swift编写应用时，所有的类和函数都将在Swift文件中编写。就像Word文件有*.doc*或*.docx*扩展名，PDF文件以*.pdf*结尾一样，Swift文件的扩展名是*.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为应用添加一个新类，可以创建一个新的Swift文件来编写该类。你可以在同一个文件中编写任意数量的类，但如果将类保持在单独的文件中，并且文件名与每个类的名称匹配，项目会更容易组织。按住CONTROL键点击项目导航器中的*BirthdayTracker*文件夹，并从菜单中选择**新建文件...**选项，如[图10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在Xcode中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，如[图 10-2](text00021.html#ch10fig2)所示。在此对话框中，你需要选择要创建的文件类型，这是一个通用的空
    Swift 文件。选择对话框顶部的 **iOS**，选择 **Swift 文件**，然后点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**创建**。你应该能在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*，点击它，你应该会看到一个空的*Birthday.swift*文件，如[图
    10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode 会自动在代码注释中写入一些版权信息。紧随“Created by”后的名字来自你电脑联系人应用中的联系人卡片。在版权年份之后，你应该能看到你在[第1章](text00011.html#ch01)创建第一个
    Xcode 项目时使用的组织名称。每次你在 Xcode 中创建新文件时，这段注释头部会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，可以创建 Birthday 类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-154
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，而 birthdate 将是一个内置于 Swift 中的特殊类，名为 Date，专门用来处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。将以下内容输入到
    *Birthday.swift* 文件中，在 import Foundation 语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 处看到新的 Date 数据类型。Date 的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，你将它们设置为类的属性 ➌ 。这将允许你将姓名和日期传递给 Birthday 类，以存储一个生日。
- en: '**NOTE**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个代码文件用于项目，最终版本可在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *找到。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个可以保存朋友姓名和生日的 Birthday 类，并且在故事板中设置了输入字段，这些字段是你在[第9章](text00020.html#ch09)中设置的。但是，Birthday
    类和输入字段之间没有连接，因此用户输入的内容不会被存储为 Birthday。现在是时候编写代码，使界面能够添加生日了。为此，你将创建一个新的 AddBirthdayViewController
    类，用来管理故事板中的“添加生日”场景中的输入字段。（记住，一个视图由视图控制器控制，接下来你将创建视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，里面包含了一个 ViewController
    类，用来通过代码表示和控制一个视图。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能更好地描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，选择该文件并点击其名称使其高亮（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件内通过更改以下这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名* ViewController.swift'
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'to the line:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE16]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你将不再需要内建的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来清理你的代码。现在，你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE17]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个自带方法的类，用于管理在你运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的 *子类*，它让我们通过实现一些 UIViewController 的内建方法来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，它们会在视图控制器创建后以及视图显示或消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建完成后、视图显示在屏幕上之前调用。这是进行视图初始化设置的一个好地方，适合只执行一次的操作。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后、每次视图控制器的视图显示在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 类似，只不过它是在视图控制器的视图显示在屏幕后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写任何这些方法。第一个方法，viewDidLoad()，非常有用。Swift 要求所有子类化 UIViewController
    的类都使用此方法，因此当你子类化 UIViewController 时，它会自动为 viewDidLoad() 方法提供一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，自动补全会填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只在视图控制器第一次创建时调用一次，但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经存在并被加载在另一个屏幕后面。如果你希望每次视图出现时刷新新的信息，可以覆盖viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”的[149页](text00021.html#page_149)中，我们将覆盖AddBirthdayViewController中的viewDidLoad()方法。但是，暂时我们可以先忽略这些方法，直接将我们的代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器有一个“名字”文本字段、一个“姓氏”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过将变量分配给与屏幕元素连接的IBOutlets来实现。请在AddBirthdayViewController类的viewDidLoad()方法之前添加以下三个属性（灰色的线条表示现有的代码，作为位置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE18]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们编辑故事板的部分。当你在属性前加上@IBOutlet关键字时，属性旁边的边距上会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。如果圆圈没有被填充，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* 带有输入控件IBOutlet属性的AddBirthdayViewController'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型是UITextField! ➋，这是一个隐式展开的可选类型，因为在视图控制器第一次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets就会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController以及输入控件的属性，是时候将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，改变故事板中“添加生日”视图控制器的类为 AddBirthdayViewController，这样你就可以使用这个类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*，然后在左侧大纲视图中选择 **添加生日场景**，在右侧面板中打开 Identity Inspector。你应该会看到顶部的
    Custom Class 部分，将类更改为 AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中点击
    Add a Birthday Scene 旁的三角形，展开该场景的项目菜单。然后，按住 CONTROL 键并点击**添加生日**，在黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，选择 Outlets，可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *控件*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到连接框中列出了 Birthdate Picker，并且连接圆圈已经填充（见[图 10-8](text00021.html#ch10fig8)），那就说明连接成功。你只能将
    birthdatePicker 控件连接到日期选择器。如果尝试将它连接到标签或其他类型的视图，则不会发生任何操作。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建该属性时，已经指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *控件已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈将 firstNameTextField 连接到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。接下来，让我们回到 *AddBirthdayViewController.swift* 中，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有未来的出生日期显然是不合理的，所以让我们编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这样的设置。在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”一节中，我们讲过
    viewDidLoad() 方法，位于[第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以在 AddBirthdayViewController
    中找到这个方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE19]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，如下所示：override
    func viewDidLoad()。请注意，必须保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类，比如 AddBirthdayViewController，并重写原父类的方法时，你需要确保也调用父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中包含一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需要在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个表示当前日期和时间的新日期。现在试着运行应用程序，应该不再能选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便你可以使用你在 [第9章](text00020.html#ch09) 中创建的按钮，从这个视图控制器中保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-218
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从编写一个每次用户点击保存按钮时都会被调用的 saveTapped(_:) 方法开始。在 viewDidLoad() 方法之后，立即将以下代码添加到
    AddBirthdayViewController 中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE20]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应运行的代码。在这种情况下，我们将添加一个函数，该函数将在用户点击保存按钮时运行。当你编写
    IBAction 方法时，应该始终包含一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋，但你可以根据需要命名此参数。在这种情况下，我们希望每当用户点击保存时调用
    saveTapped(_:) 方法，保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法有助于我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL -点击 “Add a Birthday” 这一行以打开连接对话框。在连接对话框的底部，有一个名为 "Received Actions"
    的部分，如 [图10-9](text00021.html#ch10fig9) 所示。在该部分，从 saveTapped: 旁边的圆圈点击并拖动到 Add a
    Birthday 视图控制器中的保存按钮，以完成连接。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions 列在连接对话框底部的 "Received Actions" 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，应该会在调试控制台显示消息：“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来为`saveTapped(_:)`方法添加代码，用来获取用户输入的firstNameTextField和lastNameTextField中的名字。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性text。这个text属性的值是用户在文本框中输入的内容，因此你可以使用它来获取用户在`saveTapped(_:)`中输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE21]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的空合并操作符(??)。我们这里使用常量而不是变量，因为用户输入的名字在之后不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。获取到firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中什么都不输入就点击保存按钮，然后再输入名字和姓氏后点击保存按钮。你应该看到类似以下的输出：
- en: '[PRE22]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入名字，并在调试控制台看到计算机的输出了。接下来，让我们集中精力输出一个日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker中获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个`date`属性，它表示当前选择的日期。对于birthdatePicker来说，就是`birthdatePicker.date`。当用户更改UIDatePicker时，`date`属性也会更新，因此你可以使用`birthdayPicker.date`来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`saveTapped(_:)`方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE23]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看发生了什么。你应该会看到类似以下的输出：
- en: '[PRE24]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经得到了firstName、lastName和birthdate——这三项数据就是我们创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，它还包括时间和+0000的时区偏移。现在不需要过多担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用新的print语句来测试newBirthday实例。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE25]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday实例后，在➋处，你使用点语法将其属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你得到的是来自newBirthday实例的值。运行应用程序，输入生日，并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE26]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，点击保存按钮仅会创建一个生日实例。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法正如它所说的那样——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE27]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制关闭屏幕时的动画效果。传入true，这样用户就能看到添加生日界面从屏幕上滑下，效果就像一个专业的应用程序一样！第二个参数是一个可选的闭包，称为completion。*闭包*是可以传递给函数的代码块。completion闭包可以用于你希望在视图控制器被关闭后执行的任何代码。由于你这里不需要执行任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接起来。你可以按照与saveTapped(_:)方法连接保存按钮的方式来做这件事。前往*Main.storyboard*，并打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法的列表项到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，再点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含firstName、lastName和birthdate属性的生日对象。现在你可以保存生日数据，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你保存的生日列表。
- en: '![](Image00001.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00001.jpg)'
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](text00020.html#ch09)中，你通过创建视图控制器、用于在它们之间导航的按钮和接受用户输入的屏幕，设置了你的应用程序的视觉界面。现在是时候深入编程了！在本章中，我们将向你展示如何编写应用代码并将其与故事板连接。你将编写Birthday和AddBirthdayViewController类，这样你就可以使用上一章创建的输入控件来添加生日。
- en: '**THE BIRTHDAY CLASS**'
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**生日类**'
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你将编写一个临时的生日类来存储你的生日，但它不会将生日数据永久保存到设备上。我们稍后将用更好的解决方案替换它，但这种方法可以让我们测试输入控件。
- en: '![](Image00221.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时候，在编程时，你需要编写包含多个部分并协同工作的应用程序。你可能会先写应用的一部分，像我们之前写的输入控件那样，但要测试这一部分，你可能需要一些其他你还没有写的代码。当这种情况发生时，你可以快速写一些临时的*测试代码*，在完成其余部分之后再重新修改它。这就是我们在处理生日类时的做法——我们将在[第12章](text00023.html#ch12)中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，打开你的BirthdayTracker应用程序并在Xcode中查看。确保你可以看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-271
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个文件，在其中编写生日类。Xcode中的文件就像其他计算机文件一样——它是一种文档类型。当你用Swift编写应用程序时，你将把类和函数写入Swift文件中。就像Word文件有*.doc*或*.docx*扩展名，PDF文件以*.pdf*结尾一样，Swift文件的扩展名是*.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向应用程序中添加一个新类，可以创建一个新的Swift文件来编写该类。你可以在同一个文件中写多个类，但如果你将类保存在不同的文件中，并且文件名与类名匹配，组织项目会更加方便。在项目导航器中，*控制*单击BirthdayTracker文件夹，并从菜单中选择**新建文件…**选项，如[图10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在Xcode中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，类似于 [图 10-2](text00021.html#ch10fig2) 中的对话框。在这里，你需要选择要创建的文件类型，这将是一个通用的空白
    Swift 文件。在对话框顶部选择 **iOS**，然后选择 **Swift 文件**，接着点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday* 并点击 **创建**。你应该能在项目导航器的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*
    文件。点击它，你应该能看到一个空的 *Birthday.swift* 文件，如 [图 10-3](text00021.html#ch10fig3) 所示。
- en: '![](Image00224.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件顶部，Xcode 已经自动写入了一些版权信息作为代码注释。“Created by” 后面的名字是从你计算机上的联系人应用程序中的联系人卡片获取的。版权年份后，你应该看到你在
    [第 1 章](text00011.html#ch01) 中创建第一个 Xcode 项目时使用的组织名称。每次你在 Xcode 中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，可以创建生日类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 你的生日类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是字符串（String）类型，而
    birthdate 将是 Swift 内建的一个特殊类 Date，用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。将以下内容输入到 *Birthday.swift*
    文件的 import Foundation 语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE28]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 处看到新的 Date 数据类型。Date 的声明方式和任何其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们赋值给类的属性 ➌。这将让你将名字和日期传递给 Birthday 类来存储生日信息。
- en: '**NOTE**'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步一步地构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经有了一个可以存储朋友姓名和生日的生日类，并且在 [第 9 章](text00020.html#ch09) 中设置了输入字段。然而，生日类和输入字段并未连接，因此用户的输入不会作为一个生日存储。是时候编写代码来让界面添加生日了。为此，你将创建一个新的
    AddBirthdayViewController 类来管理 storyboard 中“添加生日场景”的输入字段。（记住，视图是由视图控制器控制的，而你接下来就是要创建这个控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择一个单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，里面包含一个 ViewController
    类，该类通过代码表示并控制一个视图。故事板中的视图控制器是通过这个 ViewController 类进行管理的，我们将其重命名为 AddBirthdayViewController，以便类名能更好地描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选中该文件并在项目导航器中单击其名称，使其高亮显示（参见 [图10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中更改这一行来完成此操作：
- en: '![](Image00226.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名的* ViewController.swift'
- en: '[PRE29]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'to the line:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 到此行：
- en: '[PRE30]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 你将不再需要内置方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE31]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内置类，提供了管理在应用程序运行时出现在屏幕上的视图的方法。AddBirthdayViewController
    是 UIViewController 的一个*子类*，它允许我们通过实现 UIViewController 一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，它们会在视图控制器创建并且视图出现或从屏幕消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建完成后，但在其视图出现在屏幕之前调用。这里是进行视图初始设置的好地方，适合做只需要执行一次的设置。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后以及每次视图控制器的视图出现在屏幕之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 相似，不同之处在于它在视图控制器的视图出现在屏幕上之后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写任何这些方法。其中第一个，viewDidLoad()，非常有用。Swift 期望所有继承自 UIViewController
    的类都使用此方法，因此当你创建 UIViewController 的子类时，它会自动在模板中添加一个 viewDidLoad() 的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并不会为其他三个方法提供占位代码。如果你决定使用其中的一个，可以开始输入，自动完成将填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()方法只在视图控制器首次创建时调用一次，但viewWillAppear(_:)方法在每次视图控制器的视图即将显示到屏幕上时都会被调用。因此，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)将会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕背后加载。如果你希望每次视图出现时都能用新信息刷新视图，可以重写viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)一节中的[第149页](text00021.html#page_149)，我们将重写AddBirthdayViewController中的viewDidLoad()方法。不过现在，我们可以先不管这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入项。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名”文本框，一个“姓”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过为这些输入控件分配变量来实现，这些控件通过IBOutlets与屏幕上的元素相连接。在AddBirthdayViewController类的viewDidLoad()方法之前，添加以下三个属性（灰色线条表示一些现有的代码，标明位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE32]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们工作于故事板的部分。当你在属性前加上@IBOutlet关键字时，属性旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* 带有IBOutlet属性的AddBirthdayViewController *用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的类型是UITextField! ➋，这是一个隐式解包可选类型，因为当视图控制器第一次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets会被赋予它们在故事板中连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-325
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和输入控件的属性，接下来是将“名”和“姓”文本框以及“出生日期”日期选择器连接起来的时候了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，并在右侧面板中打开身份检查器。你应该会看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击黄色视图控制器图标旁边的 **添加生日**，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过查看连接框中 birthdatePicker 旁边是否列出了 Birthdate Picker，且连接圆圈已填充，来确认连接是否成功（见 [图
    10-8](text00021.html#ch10fig8)）。你只能将 birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为在 AddBirthdayViewController 中创建该属性时，我们为其指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，通过点击并拖动其圆圈到“First Name”标签下方的文本字段。最后，将 lastNameTextField
    连接到“Last Name”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人的出生日期来说，选择未来的日期没有意义，因此我们需要写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这一点。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论了
    viewDidLoad() 方法，见 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以在 AddBirthdayViewController
    中找到该方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE33]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，所以我们需要使用override关键字来重写它，如：override func
    viewDidLoad()。注意，必须保留方法中的super.viewDidLoad()这一行。当你创建一个子类（如AddBirthdayViewController）并重写原父类的方法时，要确保你也调用父类的方法。苹果可能在UIViewController的viewDidLoad()方法中有一些我们不清楚的特殊代码，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前日期和时间的新日期。现在尝试运行应用，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在[第9章](text00020.html#ch09)中制作的按钮，保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-348
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个saveTapped(_:)方法开始，该方法在每次用户点击保存按钮时被调用。将以下代码添加到AddBirthdayViewController中，紧接着viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE34]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时该函数将被执行。当你编写一个IBAction方法时，应该始终包括一个表示触发该方法的UI元素的参数。通常使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以根据需要命名该参数。在这种情况下，我们希望每当用户点击保存时，调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。print(_:)方法在➍处帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet与Storyboard元素连接一样。返回到你的*Main.storyboard*文件。CONTROL-点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为“已接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动从saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，完成连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框的底部，位于已接收的操作下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台中应该显示“保存按钮已被点击”的信息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-357
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，以便在用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取这些信息。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选 String 属性。这个 text 属性的值是用户输入的内容，因此你可以使用它在 saveTapped(_:)
    方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE35]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了某个值），否则设置为一个空字符串
    ""。你可以使用在[第5章](text00015.html#ch05)中学到的 nil 合并操作符 (??) 来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同操作。在获取 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似如下的输出：
- en: '[PRE36]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并看到计算机在调试控制台中输出它。接下来，我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-367
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个名为 date 的属性，它表示当前日期选择器显示的日期。对于 birthdatePicker，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE37]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE38]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这是我们创建生日所需的三项数据！你会注意到，调试控制台中显示的日期格式很奇怪，包含了时间和
    +0000 的时区偏移。现在不需要过于担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在不显示时间的情况下展示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入了，你可以使用这些信息通过 Birthday 类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替代它们。然后在
    saveTapped(_:) 方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE39]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建完 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，不过这次你是从 newBirthday
    实例获取值。运行应用，输入生日信息，点击保存，看看会发生什么。你应该能在调试控制台看到类似如下的输出：
- en: '[PRE40]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学到如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该关闭。让我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，它将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法做的就是它说的那样——关闭当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE41]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 有两个参数。animated 参数用于动画关闭屏幕。传入 true，这样用户就能看到“添加生日”屏幕从屏幕上滑动下去。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是一段可以传递给函数的代码块。completion 闭包可以在你希望视图控制器关闭后执行一些代码时使用。因为在这里你不需要任何操作，所以可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以像将 saveTapped(_:) 方法连接到保存按钮一样操作。进入 *Main.storyboard*，调出添加生日视图控制器的连接对话框。点击并拖动
    cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，运行应用，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该能看到“添加生日”屏幕从上滑下去并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个
    Birthdays 表视图控制器中显示你的生日列表。
- en: In [Chapter 9](text00020.html#ch09) , you set up the visual interface for your
    app by creating view controllers, buttons to navigate between them, and the screen
    that takes user input. Now it’s time to dig into the programming! In this chapter,
    we’ll show you how to code your app and connect it to your storyboard. You’ll
    write Birthday and AddBirthdayViewController classes so you can add birthdays
    using the input controls that you created in the previous chapter.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](text00020.html#ch09)中，你通过创建视图控制器、用于在它们之间导航的按钮以及获取用户输入的屏幕，为应用设置了视觉界面。现在是时候深入编程了！在本章中，我们将展示如何编写应用代码并将其连接到故事板。你将编写
    Birthday 和 AddBirthdayViewController 类，以便使用上一章中创建的输入控件添加生日信息。
- en: '**THE BIRTHDAY CLASS**'
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**生日类**'
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将编写一个临时的 Birthday 类，用于存储你的生日信息，但不会在设备上永久保存生日数据。我们稍后会用更好的解决方案来替换它，但这种方法能让我们测试输入控件。
- en: '![](Image00221.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时，当你编写程序时，你需要编写包含多个部分的应用程序，这些部分需要协同工作。你可能会先编写应用的某个部分，比如我们做的输入控件，但为了测试这部分功能，你可能需要一些尚未编写的其他代码。发生这种情况时，你可以快速编写一些临时的*
    测试代码 *，在你完成应用的其他部分之后再进行修改。这就是我们正在做的 Birthday 类——我们将在[第12章](text00023.html#ch12)中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开，打开 Xcode 中的 BirthdayTracker 应用。确保你能看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-400
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写 Birthday 类。在 Xcode 中，文件就像任何其他计算机文件一样——它是一种文档。当你用 Swift 编写应用时，你将在
    Swift 文件中编写类和函数。就像 Word 文件有*.doc*或*.docx*的扩展名，PDF 文件以*.pdf*结尾一样，Swift 文件的扩展名是*.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向应用中添加一个新类，请创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写多个类，但如果将每个类保存在与类名匹配的独立文件中，组织项目会更加方便。在项目导航器中，**控制**-点击
    *BirthdayTracker* 文件夹，然后从菜单中选择**新建文件…**选项，如[图10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个对话框，如[图10-2](text00021.html#ch10fig2)所示。在这里，您需要选择要创建的文件类型，这是一个通用的空白Swift文件。选择对话框顶部的**iOS**，然后选择**Swift
    文件**，接着点击**下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**创建**。您应该能在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*文件。点击它，您将看到一个空的*Birthday.swift*文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件顶部，Xcode已经自动在代码注释中写入了一些版权信息。 "Created by"后面的名字是从您计算机中的通讯录应用程序的联系卡中提取的。在版权年份后，您应该看到在[第1章](text00011.html#ch01)中创建第一个Xcode项目时使用的组织名称。每次在Xcode中创建新文件时，都会自动包含这个注释头部。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经有了*Birthday.swift*文件，可以创建Birthday类来存储您的生日。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，但birthdate将是一个内置于Swift中的特殊类，名为Date，专门用于处理日期和时间。我们将使用Date类的功能来提醒用户生日。请在*Birthday.swift*文件中的import
    Foundation语句下方输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE42]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在➊处看到新的Date数据类型。Date声明方式和其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，您将向生日类添加一个初始化器，该初始化器接受firstName、lastName和birthdate作为输入参数。然后，使用self属性，将它们设置为类属性➌。这将允许您将姓名和日期传递给生日类，以便存储生日信息。
- en: '**NOTE**'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步一步地为项目构建每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您已经有了一个可以保存朋友姓名和出生日期的Birthday类，并且您已经在[第9章](text00020.html#ch09)中设置了故事板中的输入字段。但目前生日类和输入字段并未连接，因此用户输入的内容不会作为生日被保存。现在是时候编写代码，让界面可以添加生日了。为此，您将创建一个新的AddBirthdayViewController类，用于管理故事板中“添加生日”场景中的输入字段。（请记住，一个视图由视图控制器控制，这正是您接下来要做的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-424
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单视图应用模板开始时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个代表和控制视图的
    ViewController 类。故事板中的视图控制器由这个 ViewController 类管理，我们将重命名为 AddBirthdayViewController，以便类的名称能够描述它将要执行的操作。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift* ，请选择它并在项目导航器中单击其名称，使其高亮显示（见 [图 10-4](text00021.html#ch10fig4)
    ）。然后键入新文件名 *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过修改文件中的这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名* ViewController.swift'
- en: '[PRE43]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'to the line:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE44]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内建方法 didReceiveMemoryWarning() ，所以你可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE45]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内建方法的类，用于管理在你运行应用时出现在屏幕上的视图。AddBirthdayViewController
    是 UIViewController 的 *子类*，它允许我们通过实现 UIViewController 的一些内建方法来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，当视图控制器被创建并且出现在屏幕上或从屏幕上消失时，这些回调方法会被调用。它们是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后，但在其视图出现在屏幕上之前被调用。这里是进行视图初始化设置的好地方，通常这些设置只需要执行一次。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后以及每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，不同之处在于它是在视图控制器的视图出现在屏幕上之后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何子类化
    UIViewController 的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入它，自动补全会填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只会被调用一次——即视图控制器首次创建时——但是viewWillAppear(_:)每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都能刷新新信息，可以重写viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，位于[第149页](text00021.html#page_149)，我们将重写AddBirthdayViewController中的viewDidLoad()。不过现在，我们可以先不动这些方法，将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件上。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含一个名字文本框、一个姓氏文本框和一个出生日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量赋给与屏幕元素通过IBOutlets连接的输入控件来实现这一点。在AddBirthdayViewController类的viewDidLoad()方法之前，添加以下三个属性（灰色的行表示一些现有代码，供参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE46]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*接口构建器*，这是Xcode中我们处理故事板的部分。当你将@IBOutlet关键字放在一个属性前面时，属性旁边会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈未填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-451
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* AddBirthdayViewController *具有用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型为UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets就会被赋予它们在故事板中所连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-454
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你已经创建了AddBirthdayViewController和输入控件的属性，是时候将名字和姓氏文本框以及出生日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，这样您就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，然后在右侧窗格中打开身份检查器。您应该会看到顶部有一个自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日”场景中的文本字段和日期选择器。点击左侧大纲视图中Add
    a Birthday Scene旁边的三角形，以展开该场景中项目的菜单。然后，按住CONTROL键并点击**添加生日**，这将在黄色视图控制器图标旁边打开一个连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以在"出口"下看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被高亮显示为蓝色时，您可以放开鼠标（参见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-461
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到birthdatePicker旁边的连接框中列出了Birthdate Picker，并且连接圆圈已填充，那么就表示连接成功（参见[图10-8](text00021.html#ch10fig8)）。您只能将birthdatePicker出口连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为这是我们在AddBirthdayViewController中创建属性时为其指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动它的圆圈，将firstNameTextField连接到First Name标签下方的文本字段。最后，将lastNameTextField连接到Last
    Name标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您已经完成了故事板的工作。让我们返回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-468
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期在未来，那就没有意义了，所以让我们写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在"[创建添加生日视图控制器](text00021.html#ch10lev2sec3)"一节中讨论了viewDidLoad()方法，见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到该方法，并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE47]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，保持方法中的 super.viewDidLoad() 这一行是很重要的。当您创建一个子类，例如 AddBirthdayViewController，并重写原始超类的方法时，您需要确保也调用超类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此如果不调用该超类方法，可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，您只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个表示当前日期和时间的新日期。现在试着运行应用程序，它应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便通过您在[第9章](text00020.html#ch09)中制作的按钮，在此视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用程序应根据输入的信息创建一个生日，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-477
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**绑定保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，每当用户点击保存按钮时都会调用该方法。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE48]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的 @IBAction 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时执行。当编写
    IBAction 方法时，应该始终包括一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，并且参数名称是 sender ➋，但您可以根据需要为该参数命名。在此示例中，我们希望每当用户点击保存时调用
    saveTapped(_:) 方法，而保存按钮是 UIBarButtonItem。所以我们指定 sender 的类型是 UIBarButtonItem ➌。在
    ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 绑定到保存按钮，就像将 IBOutlet 绑定到故事板元素一样。返回到您的*Main.storyboard*文件。按住
    CONTROL 键并点击“添加生日”行，打开连接对话框。连接对话框的底部有一个名为“接收的操作”（Received Actions）部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从
    saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-483
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的“接收的操作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击“保存”按钮时，消息“The save button was tapped.”应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框中读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法添加代码，在用户输入名字和姓氏后，从firstNameTextField和lastNameTextField中提取出这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个名为text的可选String属性。这个text属性的值是文本框中输入的内容，因此你可以用它来获取用户在saveTapped(_:)中输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE49]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，也就是如果用户输入了值）或空字符串""。你可以使用nil合并运算符(??)，这是你在[第5章](text00015.html#ch05)中学到的。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的操作。在获取firstName和lastName的值后，将它们打印到控制台，这样你在运行应用程序时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中不输入任何内容就点击“保存”按钮，然后在输入名字和姓氏后再试一次。你应该看到类似以下的输出：
- en: '[PRE50]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以将名字输入到应用程序中，并在调试控制台中看到计算机输出它。接下来让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-496
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 向你的saveTapped(_:)方法添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE51]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE52]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需要的！你会注意到调试控制台中显示的日期格式有点奇怪，还包括时间和+0000的时区偏移。现在不必太担心这个，我们将在[第11章](text00022.html#ch11)讨论日期格式和如何只显示日期而不显示时间。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-504
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码已经能够访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息，通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用打印newBirthday实例的print语句来替换它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE53]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量值。创建完newBirthday后，在➋处，你通过点语法将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你获得的是newBirthday实例中的值。运行应用，输入生日信息并点击“保存”以查看发生了什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE54]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内置的UIViewController方法，叫做dismiss(animated:completion:)。这个方法正如其名所示——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE55]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于控制关闭界面的动画效果。传入true，这样用户就能看到添加生日界面从屏幕上滑下来，效果就像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果在视图控制器关闭后你希望执行某些代码，可以使用completion闭包。由于这里不需要任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-517
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与“取消”按钮关联起来。你可以像将saveTapped(_:)方法与“保存”按钮关联一样操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到“取消”按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-520
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的可视界面连接起来。你还学会了如何使用输入文本框和日期选择器，创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '**THE BIRTHDAY CLASS**'
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**生日类**'
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将编写一个临时的 Birthday 类，它将存储你的生日信息，但不会在设备上永久保存生日数据。我们稍后将用更好的解决方案替换它，但这种方法可以让我们测试输入控件。
- en: '![](Image00221.jpg)'
  id: totrans-524
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时候，在编程时，你需要编写包含多个部分的应用，这些部分将会一起工作。你可能会先编写应用的某一部分，比如我们做的输入控件，但为了测试这一部分，你可能需要一些你还没写的代码。当这种情况发生时，你可以快速编写一些临时的*
    测试代码 *，在你完成应用的其他部分后，再重新修改这些代码。这就是我们正在做的 Birthday 类——我们将在[第12章](text00023.html#ch12)中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在 Xcode 中打开你的 BirthdayTracker 应用。确保你可以看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-528
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写 Birthday 类。Xcode 中的文件就像任何其他计算机文件一样——它是一种文档类型。当你用 Swift 编写应用时，你会将类和函数写入
    Swift 文件中。就像 Word 文件的扩展名是 *.doc* 或 *.docx*，PDF 文件以 *.pdf* 结尾一样，Swift 文件的扩展名是 *.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在应用中添加一个新类，请创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写任意数量的类，但如果你将类保存在单独的文件中，并确保文件名与类名匹配，这样更有利于组织项目。在项目导航器中，*Control*
    -点击 *BirthdayTracker* 文件夹，然后从菜单中选择**新建文件…**选项，如[图10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个对话框，类似于[图10-2](text00021.html#ch10fig2)中的对话框。在这里，你被要求选择你想要创建的文件类型，这是一个通用的空
    Swift 文件。在对话框顶部选择**iOS**，选择**Swift 文件**，然后点击**下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-534
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday*，然后点击**创建**。你应该会在项目导航器的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*，点击它，你应该会看到一个空的
    *Birthday.swift* 文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-537
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode 已自动写入一些版权信息作为代码注释。紧跟在“Created by”后面的名字来自你计算机的通讯录应用中的联系人卡片。版权年份之后，应该能看到你在[第
    1 章](text00011.html#ch01)中创建第一个 Xcode 项目时使用的组织名称。每次你在 Xcode 中创建一个新文件时，都会自动包含这个注释头部。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-541
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将包含三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 的类型应该是
    String，而 birthdate 将是 Swift 中内置的一个特殊类——Date，用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日信息。在
    *Birthday.swift* 文件中，紧接在 import Foundation 语句之后输入以下代码。
- en: '![](Image00225.jpg)'
  id: totrans-543
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE56]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式与其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你向 Birthday 类添加了一个初始化方法，该方法接收 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将这些值赋给类的属性 ➌ 。这样，你就可以将名字和日期传递给 Birthday 类来存储生日。
- en: '**NOTE**'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将按步骤构建每个代码文件，最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *下载。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-550
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编写用户输入处理代码**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经有了一个能够存储朋友名字和生日的 Birthday 类，同时你也在故事板中设置了输入字段，这些字段在[第 9 章](text00020.html#ch09)中已经创建。但此时，Birthday
    类和输入字段尚未连接，因此用户的输入不会被存储为一个 Birthday 对象。现在是时候编写代码，使得界面能够添加生日信息了。为此，你需要创建一个新的 AddBirthdayViewController
    类来管理故事板中“添加生日”场景中的输入字段。（记住，视图是由视图控制器管理的，接下来你将创建这个控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-552
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，表示并控制一个视图的代码。故事板中的视图控制器由这个 ViewController 类来管理，我们将把它重命名为 AddBirthdayViewController，以便类的名称能准确描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择该文件并点击其名称，使其被高亮显示（见 [图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中通过更改这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-556
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE57]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'to the line:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE58]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE59]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个包含内建方法的类，用于管理在运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的 *子类*，它允许我们通过实现自己的版本来控制故事板中的视图控制器，修改一些 UIViewController 的内建方法。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法会在视图控制器创建并且视图出现在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建完成后、视图显示在屏幕之前被调用。这是进行任何一次性初始化设置的绝佳时机。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后和每次视图控制器的视图即将出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 类似，只不过它是在视图控制器的视图出现在屏幕后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何继承自
    UIViewController 的类使用此方法，因此当你继承 UIViewController 时，它会自动在模板中为 viewDidLoad() 添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个，可以开始输入，自动补全将填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会被调用一次——即视图控制器首次创建时——viewWillAppear(_:) 每次视图控制器的视图即将出现在屏幕上时都会被调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，以至于视图控制器的屏幕重新显示，viewWillAppear(_:)
    会再次被调用，而 viewDidLoad() 则不会被调用，因为视图控制器已经在另一个屏幕后加载了。如果你希望每次视图出现时都用新信息刷新视图，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)（第149页）中，我们将在AddBirthdayViewController中重写viewDidLoad()。不过，目前，我们可以暂时不管这些方法，而是将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-574
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含了一个名字文本框、一个姓氏文本框和一个出生日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是通过将变量分配给与屏幕元素通过IBOutlet连接的输入控件。在AddBirthdayViewController类的viewDidLoad()方法之前，向类顶部添加以下三个属性（灰色行表示一些现有代码，用于显示位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE60]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于在属性前面标记可以在故事板中连接的属性。IB代表*界面构建器*，这是Xcode中用于设计故事板的部分。当你在一个属性前面加上@IBOutlet关键字时，旁边的边距中会出现一个小圆圈，如[图
    10-5](text00021.html#ch10fig5)所示。这表示您可以将该属性连接到故事板中的元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-579
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *具有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式展开的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet会被赋值为它们在故事板中连接的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-582
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了AddBirthdayViewController和输入控件的属性，是时候将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，以便可以使用该类来管理视图控制器。选择项目导航器中的*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧窗格中打开身份检查器。您应该会看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-585
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday 场景中的文本字段和日期选择器。在左侧大纲视图中，点击
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键点击 **Add a Birthday**，位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-589
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到 birthdatePicker outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你会看到出生日期选择器（Birthdate Picker）列在连接框中的 birthdatePicker 旁边，并且连接圆圈已填充（参见
    [图 10-8](text00021.html#ch10fig8)）。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建该属性时指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-592
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：出生日期选择器（birthdatePicker）已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，点击并拖动从其圆圈到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的设置。现在让我们回到 *AddBirthdayViewController.swift* 中，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-596
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 让人拥有未来的出生日期是没有意义的，所以我们来编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这种设置。在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”
    章节中我们讨论过 viewDidLoad() 方法（见 [第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，所以找到
    AddBirthdayViewController 中的这个方法，并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE61]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，像这样：override
    func viewDidLoad()。请注意，重要的是保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类，比如 AddBirthdayViewController，并且重写了原始父类的方法时，你需要确保也调用父类的方法。因为
    Apple 可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个新的日期对象，表示当前的日期和时间。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够保存生日并取消从这个视图控制器中添加生日，使用你在 [第9章](text00020.html#ch09) 中创建的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击“保存”时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-605
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写一个 saveTapped(_:) 方法开始，每次用户点击“保存”时都会调用这个方法。在 viewDidLoad() 方法后，向 AddBirthdayViewController
    添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE62]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”时运行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋，但是你可以根据需要为这个参数命名。在这个例子中，我们希望在用户点击“保存”时调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem ➌。在
    ➍ 处的 print(_:) 方法帮助我们查看在测试代码时，保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 方法连接到保存按钮，就像将 IBOutlet 连接到故事板元素一样。返回到 *Main.storyboard* 文件。按住
    CONTROL 键并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部有一个叫做“接收的操作”部分，如 [图10-9](text00021.html#ch10fig9)
    所示。在该部分，点击并拖动从 saveTapped: 旁边的圆圈到“添加生日”视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-611
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction 会列在连接对话框底部的“接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行应用。点击保存按钮时，调试控制台应该会显示“保存按钮被点击了。”的信息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-614
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法中添加代码，在用户输入firstName和lastName后，从firstNameTextField和lastNameTextField中获取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，名为text。这个text属性的值是用户在文本框中输入的内容，因此你可以用它来获取用户在saveTapped(_:)方法中输入的信息，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE63]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了某个值）或者空字符串""。你可以使用nil合并操作符(??)，这是你在[第5章](text00015.html#ch05)中学到的。我们这里使用常量而不是变量，因为我们不会更改用户输入的firstName和lastName的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了firstName和lastName后再次尝试。你应该会看到类似以下的输出：
- en: '[PRE64]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出的结果。接下来，让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-624
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的saveTapped(_:)方法中添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE65]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似于以下的输出：
- en: '[PRE66]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需的！你会注意到，调试控制台中显示的日期格式很奇怪，它还包括了时间和+0000的时区偏移。现在不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-632
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类的初始化方法来创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除打印语句，因为我们将用测试newBirthday实例的打印语句替换它们。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE67]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用生日类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点表示法将其属性输出到调试控制台。打印输出将与之前的打印语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该会在调试控制台看到类似以下内容的输出：
- en: '[PRE68]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日记录。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日记录。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日屏幕应该消失。让我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法将调用一个名为dismiss(animated:completion:)的内置UIViewController方法。该方法的作用正如其名——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE69]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于动画化关闭屏幕，传入true，用户将看到“添加生日”屏幕滑动消失，效果就像专业应用一样！第二个参数是一个可选闭包，名为completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器关闭后执行某些代码，可以使用completion闭包。但由于你不需要在这里执行任何操作，因此可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-645
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样进行操作。进入*Main.storyboard*，并调出添加生日视图控制器的连接对话框。从cancelTapped(_:)方法的列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用程序，点击**+**进入添加生日屏幕，然后点击**取消**。你应该会看到“添加生日”滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-648
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的生日对象。目前你可以保存生日信息，但保存后无法查看它们。在 [第11章](text00022.html#ch11) 中，我们将展示如何在一个生日列表视图控制器中显示你的生日列表。
- en: In this section, you’ll write a temporary Birthday class that will store your
    birthdays but won’t permanently save the birthday data on the device. We’ll replace
    it later with a better solution, but this approach will let us test our input
    controls.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将编写一个临时的生日类，该类将存储你的生日数据，但不会将生日数据永久保存到设备上。我们稍后会用更好的解决方案替换它，但这个方法将帮助我们测试输入控件。
- en: '![](Image00221.jpg)'
  id: totrans-651
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时在编程时，你需要编写一个包含多个部分并且这些部分需要协同工作的应用程序。你可能会先编写应用的一部分，就像我们做的输入控件那样，但为了测试这一部分，你可能需要一些你还没写的其他代码。遇到这种情况时，你可以快速编写一些临时的*
    测试代码 *，等到你完成应用的其他部分之后再进行重构。这就是我们在使用生日类时的做法——我们将在 [第12章](text00023.html#ch12) 中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在 Xcode 中打开你的 BirthdayTracker 应用。确保你可以看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-655
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写生日类。Xcode 中的文件就像任何其他计算机文件一样——它是一种文档。当你使用 Swift 编写应用程序时，你将在
    Swift 文件中编写类和函数。就像 Word 文件扩展名为 *.doc* 或 *.docx*，PDF 文件以 *.pdf* 结尾一样，Swift 文件的扩展名是
    *.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为你的应用添加一个新类，请创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写任意多个类，但如果你将每个类保存在单独的文件中，并且文件名与类名匹配，组织项目会更容易。在项目导航器中
    CONTROL -点击 *BirthdayTracker* 文件夹，然后从菜单中选择 **新建文件…** 选项，如 [图 10-1](text00021.html#ch10fig1)
    所示。
- en: '![image](Image00222.jpg)'
  id: totrans-658
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，如 [图 10-2](text00021.html#ch10fig2) 所示。在这里，你需要选择你想要创建的文件类型，也就是一个通用的空
    Swift 文件。选择对话框顶部的 **iOS**，选择 **Swift 文件**，然后点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-661
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，命名文件为 *Birthday* 并点击 **创建**。你应该能在项目导航器的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*。点击它，你应该能看到一个空的
    *Birthday.swift* 文件，如 [图 10-3](text00021.html#ch10fig3) 所示。
- en: '![](Image00224.jpg)'
  id: totrans-664
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode 会自动写入一些版权信息的代码注释。紧跟在“Created by”后的名字是从你计算机的联系人应用中的个人资料卡拉取的。在版权年份后，你应该看到你在[第
    1 章](text00011.html#ch01)中创建第一个 Xcode 项目时使用的组织名称。每次在 Xcode 中创建新文件时，都会自动包含这个注释头。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-668
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，但 birthdate 会是一个内置于 Swift 中的特殊类，名为 Date，它专门用于处理日期和时间。我们将利用 Date 类的功能来提醒用户生日。将以下内容输入到
    *Birthday.swift* 文件中的 import Foundation 语句下。
- en: '![](Image00225.jpg)'
  id: totrans-670
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE70]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们赋值给类的属性 ➌ 。这样，你就可以将名字和日期传递给 Birthday 类来存储生日。
- en: '**NOTE**'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步构建每个项目的代码文件。最终版本可从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *下载。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-677
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以存储朋友名字和生日的 Birthday 类，并且你在故事板中设置了输入字段，如在[第 9 章](text00020.html#ch09)中所述。但是，Birthday
    类和输入字段没有连接，因此用户输入的内容不会存储为 Birthday。现在是时候编写代码来让界面能够添加生日了。为此，你需要创建一个新的 AddBirthdayViewController
    类，用来管理故事板中“添加生日”场景中的输入字段。（记住，一个视图由视图控制器控制，这就是你接下来要创建的内容。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-679
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，用于通过代码表示和控制视图。故事板中的视图控制器由这个 ViewController 类管理，我们将把它重命名为 AddBirthdayViewController，以便类名能够描述它将要执行的操作。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件 *ViewController.swift* 的名称，选中它并在项目导航器中点击文件名，使其高亮显示（见[图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 `ViewController` 类的名称更改为 `AddBirthdayViewController`。你可以通过修改文件中的这一行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-683
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：修改 ViewController.swift 的文件名*'
- en: '[PRE71]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'to the line:'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 将这一行修改为：
- en: '[PRE72]'
  id: totrans-687
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置的 `didReceiveMemoryWarning()` 方法，因此你可以通过删除该方法来清理你的代码。现在，你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE73]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 是一个带有内置方法的类，用于管理在你运行应用时出现在屏幕上的视图。`AddBirthdayViewController`
    是 `UIViewController` 的一个*子类*，它允许我们通过实现 `UIViewController` 中一些内置方法的自定义版本，来控制故事板中的视图控制器。'
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 类有四个有用的内置回调方法，当视图控制器被创建并出现在屏幕上或从屏幕消失时，这些回调方法会被调用。这些回调方法包括：'
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`：当视图控制器创建完成，但视图尚未出现在屏幕上时，会调用此方法。这是进行任何视图初始化设置的好地方，适合只执行一次的操作。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)`：此方法在 `viewDidLoad()` 之后、每次视图控制器的视图即将出现在屏幕上时被调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)`：此方法与 `viewWillAppear(_:)` 类似，只不过它是在视图控制器的视图出现在屏幕之后被调用。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)`：当视图控制器的视图即将离开屏幕时，调用此方法。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 `UIViewController` 中重写这些方法中的任何一个。其中，第一个方法 `viewDidLoad()` 非常有用。Swift
    期望所有继承 `UIViewController` 的子类都使用此方法，因此当你创建 `UIViewController` 的子类时，它会自动在模板中添加
    `viewDidLoad()` 的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为另外三个方法提供占位符代码。如果你决定使用其中的一个，可以开始输入方法名，自动补全会填写完整的细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 `viewDidLoad()` 只会被调用一次——即视图控制器首次创建时——`viewWillAppear(_:)` 会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上，随后又移除，视图控制器的屏幕重新显示时，`viewWillAppear(_:)`
    会再次被调用，而 `viewDidLoad()` 不会被调用，因为视图控制器已经在另一个屏幕后面加载。如果你希望每次视图出现时都刷新显示新的信息，可以重写
    `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[“设置最大生日日期”](text00021.html#ch10lev2sec6)中，参见[第149页](text00021.html#page_149)，我们将在AddBirthdayViewController中重写viewDidLoad()方法。然而，现在，我们可以先忽略这些方法，并将我们的代码连接到[第9章](text00020.html#ch09)中设置的输入项。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-701
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框、一个“姓氏”文本框和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过将变量分配给与IBOutlets连接的屏幕元素来实现。将以下三个属性添加到AddBirthdayViewController类的顶部，在viewDidLoad()方法之前（灰色行表示一些现有代码的放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE74]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB代表*界面构建器*，它是Xcode中我们进行故事板工作的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距中会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-706
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：AddBirthdayViewController* *具有用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型是UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet会被赋予它们在故事板中连接到的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-709
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和输入控件的属性，是时候将“名字”和“姓氏”文本框以及“生日”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧窗格中打开身份检查器。你应该能在顶部看到一个自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-712
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 “添加生日” 场景中的文本框和日期选择器。在左侧大纲视图中，点击
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。接着，按住 CONTROL 并点击 **Add a Birthday**，在黄色的视图控制器图标旁，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，找到 Outlets 部分，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器来连接它。当日期选择器对象被高亮显示为蓝色时，你可以放开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-716
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 在连接框中与 birthdatePicker 旁边列出，并且连接圆圈已经填充，你就知道连接成功了（见 [图
    10-8](text00021.html#ch10fig8)）。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，将不会发生任何事情。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-719
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个 firstNameTextField 的圆圈，连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时已经完成了故事板的设计。接下来，让我们回到 *AddBirthdayViewController.swift* 文件中，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-723
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: 让人出生在未来显然不合逻辑，因此我们编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行此类设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中提到过
    viewDidLoad() 方法，它位于 [第 145 页](text00021.html#page_145)。这个方法会自动添加到我们的视图控制器中，因此找到
    AddBirthdayViewController 中的该方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE75]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的方法，因此我们需要使用`override`关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，保持`super.viewDidLoad()`这一行在方法中非常重要。当你创建一个子类，比如`AddBirthdayViewController`，并重写原始超类的方法时，确保你也调用超类的方法。苹果可能在`UIViewController`的`viewDidLoad()`中运行了一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的maximumDate，你只需要在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法创建一个表示当前日期和时间的新日期。现在尝试运行这个应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你可以使用你在[第9章](text00020.html#ch09)中创建的按钮来保存生日并取消从此视图控制器添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击“保存”时，应用应该从输入的信息中创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-732
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个`saveTapped(_:)`方法，每次用户点击“保存”按钮时都会调用该方法。将以下代码添加到`AddBirthdayViewController`的`viewDidLoad()`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE76]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的`@IBAction`是一个关键字，它将一个函数直接与视图控制器中的元素连接，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个在用户点击“保存”时运行的函数。编写`IBAction`方法时，应该始终包括一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为`sender`
    ➋，但你可以根据需要为该参数命名。在这种情况下，我们希望在用户点击“保存”时调用`saveTapped(_:)`方法，这时“保存”是一个`UIBarButtonItem`。因此，我们指定`sender`的类型为`UIBarButtonItem`
    ➌。`print(_:)`方法在➍处帮助我们在测试代码时看到“保存”按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 将`saveTapped(_:)`连接到“保存”按钮就像将`IBOutlet`连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”这一行，打开连接对话框。在连接对话框的底部有一个名为“Received
    Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从`saveTapped:`旁边的圆圈点击并拖动到“保存”按钮，连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-738
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：`IBActions`在连接对话框底部的“Received Actions”部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台中应该显示"保存按钮被点击"的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-741
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入姓名后，从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性叫做text。这个text属性的值是输入框中用户输入的内容，因此你可以通过以下代码在saveTapped(_:)中获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE77]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的处理。在获取了firstName和lastName的值之后，将它们打印到控制台，这样在运行应用程序时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再次尝试。你应该会看到类似下面的输出：
- en: '[PRE78]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出它。接下来我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-751
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前显示的日期。对于birthdatePicker来说，它的值是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，所以你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE79]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE80]'
  id: totrans-757
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所必需的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和+0000时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-759
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息，通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE81]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用生日类的初始化方法创建了一个新的Birthday实例，并传入了firstName、lastName和birthdate的常量。创建了newBirthday之后，在
    ➋ 处，你使用点符号将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日并点击保存，查看发生了什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE82]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅仅创建了一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-767
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法正如它所描述的那样——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE83]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 有两个参数。animated参数用于控制关闭界面的动画效果。传入true，用户就可以看到添加生日界面从屏幕上滑下来。这看起来就像是一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的代码块。如果在视图控制器被关闭后需要运行某些代码，可以使用completion闭包。因为这里不需要做任何事情，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-772
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法连接到取消按钮。你可以按照将saveTapped(_:)方法连接到保存按钮的相同方式进行操作。进入*Main.storyboard*，打开Add
    Birthday视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-775
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表视图控制器中显示你的生日列表。
- en: '![](Image00221.jpg)'
  id: totrans-777
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00221.jpg)'
- en: '**NOTE**'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时在编程时，你需要编写具有多个部分、能够协同工作的应用程序。你可能会先编写应用程序的一部分，例如我们为输入控件所做的，但为了测试这一部分，你可能需要一些其他代码，而这些代码你还没有编写。遇到这种情况时，你可以快速编写一些临时的*测试代码*，这些代码会在完成其他部分的开发后进行重构。这就是我们处理
    Birthday 类的方式——我们将在[第12章](text00023.html#ch12)中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在 Xcode 中打开你的 BirthdayTracker 应用程序。确保你能看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-781
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个文件，在其中编写 `Birthday` 类。在 Xcode 中，文件就像任何其他计算机文件一样——它是一种文档类型。当你用 Swift
    编写应用程序时，你将在 Swift 文件中编写类和函数。就像 Word 文件的扩展名是 *.doc* 或 *.docx*，PDF 文件以 *.pdf* 结尾一样，Swift
    文件的扩展名是 *.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向应用程序中添加一个新类，可以创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写任意多个类，但如果将类保存在独立的文件中，并确保文件名与类名匹配，将会更容易组织你的项目。在项目导航器中按
    **CONTROL** 键点击 *BirthdayTracker* 文件夹，然后从菜单中选择 **新建文件...** 选项，如[图 10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-784
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-1：在 Xcode 中创建一个新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，类似于[图 10-2](text00021.html#ch10fig2)中的界面。在这里，你需要选择要创建的文件类型，即一个通用的空
    Swift 文件。选择对话框顶部的 **iOS**，然后选择 **Swift 文件**，接着点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-787
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，给文件命名为 *Birthday* 并点击 **创建**。你应该会看到 *Birthday.swift* 显示在项目导航器中的 *BirthdayTracker*
    文件夹中。点击它，你应该会看到一个空的 *Birthday.swift* 文件，如[图 10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-790
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode 已经自动写入了一些版权信息作为代码注释。注释中的“Created by”后面的名字是从你计算机的联系人应用中提取的。在版权年份之后，你应该能看到你在
    [第1章](text00011.html#ch01) 中创建第一个 Xcode 项目时使用的组织名称。每次你在 Xcode 中创建一个新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，可以创建 Birthday 类来存储生日。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-794
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，而 birthdate 将是一个特殊的类，内置于 Swift 中，名为 Date，专门用来处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。将以下内容输入到
    *Birthday.swift* 文件中，在 import Foundation 语句下。
- en: '![](Image00225.jpg)'
  id: totrans-796
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE84]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式和其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性将它们设置为类的属性 ➌ 。这将允许你将姓名和日期传递给 Birthday 类以存储生日。
- en: '**NOTE**'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步构建项目中的每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-803
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经有了一个可以存储朋友姓名和出生日期的生日类，并且在 [第9章](text00020.html#ch09) 中设置了故事板中的输入字段。但是，生日类和输入字段尚未连接，因此用户的输入不会被存储为一个生日对象。现在是时候编写代码来使界面能够添加生日了。为此，你将创建一个新的
    AddBirthdayViewController 类来管理故事板中“添加生日”场景中的输入字段。（记住，一个视图由视图控制器管理，而这就是你接下来要做的事情。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-805
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择“单视图应用”模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，用于通过代码表示和控制视图。故事板中的视图控制器由这个 ViewController 类管理，我们将把它重命名为 AddBirthdayViewController，这样类名就能描述它将要执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，选择它并点击项目导航器中该文件名，使其高亮显示（见 [图10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过修改文件中的以下一行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-809
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE85]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'to the line:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: 到以下一行：
- en: '[PRE86]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法 didReceiveMemoryWarning()，因此你可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE87]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个自带内建方法的类，用于管理当你运行应用时出现在屏幕上的视图。AddBirthdayViewController
    是 UIViewController 的一个*子类*，它让我们通过实现自己的版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法会在视图控制器创建并显示在屏幕上或从屏幕上消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后立即被调用，但在视图出现在屏幕上之前。这是进行视图初始设置的好地方，尤其是你只希望设置一次的内容。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后和每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，只是它是在视图控制器的视图出现在屏幕后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法会在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何继承自
    UIViewController 的类都使用这个方法，所以当你创建 UIViewController 的子类时，它会自动在模板中添加一个 viewDidLoad()
    的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，自动补全会填充其详细内容。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会被调用一次——即视图控制器第一次创建时——viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕覆盖了视图控制器的屏幕并随后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后加载。如果你希望每次视图出现时都刷新新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”一节的[第149页](text00021.html#page_149)，我们会在
    AddBirthdayViewController 中重写 viewDidLoad() 方法。不过，目前我们可以先不管这些方法，直接将代码与[第9章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-827
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器包含一个 First Name 文本框、一个 Last Name 文本框和一个 Birthdate
    日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过为输入控件分配变量并将它们与界面元素通过 IBOutlets 连接来实现。将以下三个属性添加到
    AddBirthdayViewController 类的顶部，放在 viewDidLoad() 方法之前（灰色的行表示一些现有代码，用于位置标示）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE88]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于标识可以在故事板中连接的属性。IB 代表 *interface builder*，即 Xcode 中用于编辑故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，属性旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-832
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *具有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式展开的可选值，因为在视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 会被赋予它们在故事板中连接的界面元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-835
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*，然后在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧面板中打开身份检查器。你应该能在顶部看到一个
    Custom Class 部分，将类更改为 AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-838
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday 场景中的文本字段和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**，这是黄色视图控制器图标旁边的项，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。在 birthdatePicker
    旁边点击空圆圈并拖动到 storyboard 中的日期选择器对象。当日期选择器对象被高亮显示为蓝色时，您可以松开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-842
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已被填充，那么您就知道连接成功了（见 [图
    10-8](text00021.html#ch10fig8)）。您只能将 birthdatePicker outlet 连接到一个日期选择器。如果尝试将它连接到标签或其他类型的视图，则不会发生任何事情。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时为它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-845
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 旁的圆圈到 First Name 标签下方的文本字段，连接 firstNameTextField。最后，将
    lastNameTextField 连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您已经完成了 storyboard 的设置。接下来，让我们返回 *AddBirthdayViewController.swift* 代码文件中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-849
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期是未来的日期，那是没有意义的，所以我们要编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这个设置。我们在 “[创建 Add Birthday View Controller](text00021.html#ch10lev2sec3)”（第
    145 页）中讨论过 viewDidLoad() 方法。它会自动添加到我们的视图控制器中，所以在 AddBirthdayViewController 中找到这个方法，并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE89]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 `UIViewController` 类的一个方法，所以我们需要使用 `override` 关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，重要的是要保留方法中的 `super.viewDidLoad()` 这一行。当你创建一个子类（例如 `AddBirthdayViewController`）并重写原始父类的方法时，确保也调用父类的方法是非常重要的。Apple
    可能在 `UIViewController` 的 `viewDidLoad()` 中有一些我们不知道的特殊代码，所以如果不调用这个父类方法，可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 `birthdatePicker` 的 `maximumDate`，你只需要在 ➊ 处输入 `birthdatePicker.maximumDate
    = Date()`。`Date()` 方法创建了一个当前的日期和时间。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过在 [第9章](text00020.html#ch09) 中创建的按钮，能够保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-856
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击“保存”时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-858
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 `saveTapped(_:)` 方法开始，每当用户点击保存按钮时，该方法都会被调用。将以下代码添加到 `AddBirthdayViewController`
    中，紧接在 `viewDidLoad()` 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE90]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的`@IBAction`是一个关键字，它将一个函数与视图控制器中的元素直接关联，并允许我们指定当用户在该元素上执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”时它会运行。编写
    `IBAction` 方法时，应该始终包括一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，并且参数名称是 `sender` ➋，但你可以根据需要为此参数取任何名称。在这种情况下，我们希望每当用户点击“保存”时调用
    `saveTapped(_:)` 方法，这时 `Save` 是一个 `UIBarButtonItem`。所以我们指定 `sender` 的类型为 `UIBarButtonItem`
    ➌。在 ➍ 处的 `print(_:)` 方法帮助我们在测试代码时查看何时点击了保存按钮。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到保存按钮就像将 `IBOutlet` 连接到故事板元素一样。返回到 *Main.storyboard* 文件。按住
    CONTROL 键并点击 “Add a Birthday” 行以打开连接对话框。在连接对话框的底部有一个名为 "Received Actions" 的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 `saveTapped:` 旁边的圆圈点击并拖动到 Add a Birthday
    视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-864
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的 "Received Actions" 部分列出了 IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行你的应用程序。当你点击保存按钮时，"The save button was tapped." 这条信息应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-867
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，从 firstNameTextField 和 lastNameTextField 获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，名为 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用以下代码获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE91]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），如果没有输入，则设置为空字符串
    ""。你可以使用你在[第5章](text00015.html#ch05)中学到的 nil 合并运算符（??）来做到这一点。我们使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的事情。获取 firstName 和 lastName 的值后，打印它们到控制台，以便你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后尝试一次。你应该会看到类似以下的输出：
- en: '[PRE92]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-877
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前由选择器显示的日期。对于 birthdatePicker，这个属性就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE93]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE94]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了 firstName、lastName 和 birthdate ——这三项数据是创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，还包括了时间和
    +0000 的时区偏移。暂时不用太担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-885
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入信息，你可以使用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE95]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。在你创建newBirthday之后，
    在 ➋ 处，你通过点符号将其属性输出到调试控制台。输出的内容将与之前的print语句相同，但这次你获取的是来自newBirthday实例的值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会看到类似下面的调试控制台输出：
- en: '[PRE96]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-893
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法正如它所说的那样——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE97]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:)函数 ➊ 有两个参数。animated参数用于动画化关闭屏幕的效果。传入true，这样用户就能看到添加生日界面从屏幕上滑下，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果在关闭视图控制器后有任何代码需要执行，你可以使用这个闭包。由于你不需要执行任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-898
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接起来。你可以通过与将saveTapped(_:)方法连接到保存按钮的方式来完成这项工作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-901
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: '**NOTE**'
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Sometimes when you’re programming, you’ll need to write apps with many parts
    that will work together. You may write one part of the app first, like we did
    with the input controls, but to test that part, you might need some other code
    you haven’t written yet. When that happens, you can quickly write some temporary*
    test code *that you’ll rework after you’ve finished making the rest of your app
    work. That’s what we’re doing with the Birthday class—we’ll replace it in [Chapter
    12](text00023.html#ch12) .*'
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时候，在编程时，你需要编写包含多个部分的应用程序，这些部分需要协同工作。你可能会先编写应用程序的一部分，例如我们编写的输入控件，但为了测试该部分，你可能需要一些尚未编写的其他代码。当这种情况发生时，你可以快速编写一些临时的*测试代码*，等到其他部分的代码完成后，再进行重构。这就是我们在编写
    Birthday 类时所做的——我们将在[第 12 章](text00023.html#ch12)中替换它。*'
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在 Xcode 中打开你的 BirthdayTracker 应用程序。确保你能看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-906
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要创建一个文件，在其中编写Birthday类。在 Xcode 中，文件就像任何其他计算机文件一样——它是一种文档。当你用 Swift 编写应用程序时，你将把类和函数写入
    Swift 文件中。就像 Word 文件的扩展名是*.doc*或*.docx*，PDF 文件的扩展名是*.pdf*，Swift 文件的扩展名是*.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向你的应用程序中添加一个新类，请创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写任意多个类，但如果将类保存在单独的文件中，并且文件名与每个类的名称匹配，那么组织你的项目会更加方便。在项目导航器中，CONTROL
    -点击*BirthdayTracker*文件夹，然后从菜单中选择**新建文件…**选项，如[图 10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-909
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，类似于[图 10-2](text00021.html#ch10fig2)。在这里，你需要选择你要创建的文件类型，这是一个通用的空白
    Swift 文件。选择对话框顶部的**iOS**，选择**Swift 文件**，然后点击**下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-912
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**创建**。你应该能在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*。点击它，你应该会看到一个空的*Birthday.swift*文件，如[图
    10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-915
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：Birthday.swift 文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件的顶部，Xcode自动写入了一些版权信息，作为代码注释。“Created by”后面的名字是从你电脑的联系人应用中的联系人卡片提取的。在版权年份之后，你应该能看到你在[第1章](text00011.html#ch01)中创建第一个Xcode项目时使用的组织名称。每次你在Xcode中创建新文件时，这个注释头部都会自动包含在内。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了你的*Birthday.swift*文件，你可以创建Birthday类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-919
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写BIRTHDAY类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName的类型应该是String，而birthdate将是一个特别的类——Swift内建的Date类，它专门用于处理日期和时间。我们将使用Date类的功能来提醒用户生日信息。请在*Birthday.swift*文件中的import
    Foundation语句下输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-921
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE98]'
  id: totrans-923
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊看到新的Date数据类型。Date的声明方式与其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你为Birthday类添加了一个初始化器，该初始化器接受firstName、lastName和birthdate作为输入参数。然后，使用self属性，将这些值设置为类的属性➌。这样，你就可以将名字和日期传递给Birthday类，以便存储一个生日信息。
- en: '**NOTE**'
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步构建每个项目的代码文件。最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *查看。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-928
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个能够存储朋友姓名和生日的Birthday类，并且在故事板中设置了输入字段（你在[第9章](text00020.html#ch09)中完成的）。但是，Birthday类和输入字段之间还没有连接，因此用户输入的内容不能作为一个Birthday对象存储。是时候编写代码，让界面能够添加生日信息了。为此，你需要创建一个新的AddBirthdayViewController类，用于管理故事板中“添加生日”场景的输入字段。（记住，一个视图是由视图控制器控制的，而你接下来将要做的正是创建视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-930
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单视图应用模板开始时，Xcode会自动创建一个名为*ViewController.swift*的文件，其中包含一个表示和控制视图的ViewController类。故事板中的视图控制器是由这个ViewController类管理的，我们将把它重命名为AddBirthdayViewController，以便类的名称能够描述它将要执行的任务。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
  zh: 若要更改文件*ViewController.swift*的名称，请选择它并点击项目导航器中的文件名，使其高亮显示（见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 `ViewController` 类的名称更改为 `AddBirthdayViewController`。你可以通过更改文件中的以下一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-934
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名为* `ViewController.swift`'
- en: '[PRE99]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'to the line:'
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE100]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法 `didReceiveMemoryWarning()`，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE101]'
  id: totrans-941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 是一个内建类，用于管理在你运行应用时出现在屏幕上的视图。`AddBirthdayViewController`
    是 `UIViewController` 的 *子类*，它让我们通过实现 `UIViewController` 内建方法的自定义版本来控制故事板中的视图控制器。'
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 类有四个有用的内建回调方法，当视图控制器被创建并且出现在屏幕上或从屏幕上消失时，这些回调方法会被调用。它们分别是：'
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 该方法会在视图控制器创建后立即调用，但在其视图显示到屏幕之前。这是一个进行任何只需做一次的视图初始化设置的好地方。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)` 该方法会在 `viewDidLoad()` 之后以及每次视图控制器的视图即将出现在屏幕上时调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)` 该方法与 `viewWillAppear(_:)` 相似，区别在于它是在视图控制器的视图显示在屏幕上之后调用的。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 该方法会在视图控制器的视图即将离开屏幕时调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 `UIViewController` 中重写这些方法中的任何一个。第一个方法 `viewDidLoad()` 非常有用。Swift 期望任何继承自
    `UIViewController` 的类都使用此方法，因此当你继承 `UIViewController` 时，它会自动为 `viewDidLoad()`
    提供一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入，自动补全功能会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 `viewDidLoad()` 只会在视图控制器首次创建时调用一次，`viewWillAppear(_:)` 每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上并随后被移除，导致视图控制器的屏幕重新显示，`viewWillAppear(_:)`
    会再次被调用，而 `viewDidLoad()` 则不会被调用，因为视图控制器已经在另一个屏幕后面加载了。如果你希望每次视图出现时都能刷新新信息，你可以重写
    `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[第149页](text00021.html#page_149)的“[设置最大生日日期](text00021.html#ch10lev2sec6)”中，我们将重写AddBirthdayViewController中的viewDidLoad()。不过，目前我们可以先不管这些方法，直接将代码与我们在[第9章](text00020.html#ch09)中设置的输入项连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-952
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含一个名字文本字段、一个姓氏文本字段和一个生日日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是通过将变量分配给与屏幕元素连接的IBOutlet来实现。将以下三个属性添加到AddBirthdayViewController类的顶部，放在viewDidLoad()方法之前（灰色的行表示一些现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE102]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，它放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们操作故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有被填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-957
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *包含输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型是UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载完成，IBOutlet就会被赋值为它们在故事板中所连接的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-960
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和输入控件的属性，接下来就是将“名字”和“姓氏”文本字段以及“生日”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧窗格中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-963
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday 场景中的文本框和日期选择器。点击左侧大纲视图中“Add
    a Birthday Scene”旁边的三角形，展开该场景中项目的菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**（黄色视图控制器图标旁边）打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Outlets 下可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击其旁边的空圆圈并将其拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-967
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”在连接框中显示在 birthdatePicker 旁边，并且连接圆圈已填充，说明连接成功（见[图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中为它指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-970
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：*出生日期选择器* outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并将 circle 拖动到 First Name 标签下的文本框，来连接 firstNameTextField。最后，将 lastNameTextField
    连接到 Last Name 标签下的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的部分。接下来，回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-974
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期是未来的日期显然不合理，所以我们需要编写代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”一文中讨论过
    viewDidLoad() 方法，详见[第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController
    中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE103]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是UIViewController类的一个方法，因此我们需要使用`override`关键字来重写它，代码如下：`override
    func viewDidLoad()`。请注意，在方法中保留`super.viewDidLoad()`这一行非常重要。当你创建一个子类（如AddBirthdayViewController）并重写原始超类的方法时，你要确保调用超类的方法。Apple可能在UIViewController的`viewDidLoad()`中运行一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需在➊处输入`birthdatePicker.maximumDate = Date()`。Date()方法创建一个新的日期，表示当前的日期和时间。现在试着运行一下应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便可以保存生日信息，并使用[第9章](text00020.html#ch09)中创建的按钮取消添加生日信息。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-981
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日信息**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-983
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个`saveTapped(_:)`方法开始，每次用户点击保存按钮时都会调用该方法。将以下代码添加到AddBirthdayViewController的`viewDidLoad()`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE104]'
  id: totrans-986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时就会运行。编写IBAction方法时，应该始终包含一个参数，用于指示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为`sender`
    ➋，但你可以根据需要为这个参数起任何名字。在这个例子中，我们希望每次用户点击保存时，调用`saveTapped(_:)`方法，而保存按钮是一个UIBarButtonItem。所以我们指定`sender`的类型是UIBarButtonItem
    ➌。在➍处的`print(_:)`方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
  zh: 将`saveTapped(_:)`连接到保存按钮，就像将IBOutlet连接到storyboard元素一样。回到你的*Main.storyboard*文件，按住CONTROL键点击“Add
    a Birthday”这一行以打开连接对话框。在连接对话框的底部有一个名为Received Actions的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，点击并拖动saveTapped:旁边的圆圈到Add
    a Birthday视图控制器中的保存按钮，以完成连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-989
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列出了连接对话框底部的接收操作。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
  zh: 试着再次运行你的应用。当你点击保存按钮时，调试控制台中应该显示“保存按钮被点击了。”的信息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-992
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入姓名后，从firstNameTextField和lastNameTextField中获取firstName和lastName的值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性保存了用户在文本框中输入的内容，因此你可以使用它来获取用户在saveTapped(_:)方法中输入的数据，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE105]'
  id: totrans-996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在，即用户输入了值）或者空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的空合并操作符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的firstName和lastName的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的操作。在你获取到firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了firstName和lastName之后再试一次。你应该会看到类似以下的输出：
- en: '[PRE106]'
  id: totrans-1000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在你的应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1002
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker中获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，这个属性表示当前显示在选择器中的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE107]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE108]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——这三个数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式有些奇怪，还包括了时间和+0000的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何只显示日期而不显示时间。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1010
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入了，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替代它们。然后将以下代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE109]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建完 newBirthday 后，在 ➋ 处，你使用点语法将其属性输出到调试控制台。打印的输出与之前的 print 语句相同，不过这次你是从 newBirthday
    实例中获取值。运行应用，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE110]'
  id: totrans-1016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday 实例。你将在 [第11章](text00022.html#ch11) 中学习如何在 Birthdays
    视图控制器中显示这个 Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1018
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日的屏幕应该消失。我们通过在类中添加 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法的作用正如其名称所示——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE111]'
  id: totrans-1021
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制屏幕关闭时的动画效果。传入 true，用户就能看到“添加生日”屏幕从上滑下消失，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包*是可以传递给函数的一段代码。如果在视图控制器被关闭后需要执行某些代码，可以使用这个 completion 闭包。因为这里不需要做任何事情，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-1023
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮关联。你可以像将 saveTapped(_:) 方法与保存按钮关联一样操作。前往 *Main.storyboard*，打开“添加生日”视图控制器的连接对话框。点击并拖动
    cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日屏幕，再点击 **取消**。你应该能看到添加生日的界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1026
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: If you don’t already have it open, open your BirthdayTracker app in Xcode. Make
    sure you can see the Project navigator (⌘ -0).
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有打开它，请在 Xcode 中打开你的 BirthdayTracker 应用。确保你能看到项目导航器（⌘ -0）。
- en: '**CREATING A NEW FILE**'
  id: totrans-1029
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写 Birthday 类。在 Xcode 中，文件就像任何其他计算机文件一样——它是一种文档。当你用 Swift 编写应用时，你将在
    Swift 文件中编写类和函数。就像 Word 文件有扩展名 *.doc* 或 *.docx*，PDF 文件以 *.pdf* 结尾，Swift 文件的扩展名是
    *.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想向应用中添加一个新类，可以创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写任意数量的类，但如果你将每个类放在单独的文件中，并且文件名与类名匹配，组织项目会更容易。在项目导航器中，按住
    CONTROL 键并点击 *BirthdayTracker* 文件夹，然后从菜单中选择 **新建文件...** 选项，如[图 10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-1032
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个对话框，如[图 10-2](text00021.html#ch10fig2)所示。此处将要求你选择要创建的文件类型，即一个通用的空 Swift
    文件。在对话框的顶部选择 **iOS**，选择 **Swift 文件**，然后点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-1035
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday* 并点击 **创建**。你应该会在项目导航器中的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*，点击它，你应该会看到一个空的
    *Birthday.swift* 文件，如[图 10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1038
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode 自动写入了一些版权信息，格式是代码注释。 “Created by” 后面的名字是从你计算机的通讯录应用中的联系卡提取的。版权年份后，你应该看到你在[第1章](text00011.html#ch01)中创建第一个
    Xcode 项目时使用的组织名称。每次在 Xcode 中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1042
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 Birthday 类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，而birthdate将是Swift中内建的一个特殊类Date，用于处理日期和时间。我们将利用Date类的功能来提醒用户关于生日的事项。在*Birthday.swift*中import
    Foundation语句下方输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-1044
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE112]'
  id: totrans-1046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在➊看到新的Date数据类型。Date的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，您向Birthday类添加了一个初始化器，它接收firstName、lastName和birthdate作为输入参数。然后，使用self属性，将它们设置为类的属性➌。这样，您就可以传递姓名和日期到Birthday类中，以存储一个生日。
- en: '**NOTE**'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1051
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已经有了一个可以保存朋友姓名和生日的Birthday类，并且在[第9章](text00020.html#ch09)中设置了输入字段。然而，Birthday类和输入字段并未连接，因此用户的输入不会作为Birthday进行存储。现在是时候编写代码以使界面能够添加生日了。为此，您将创建一个新的AddBirthdayViewController类来管理故事板中“添加生日”场景的输入字段。（记住，视图由视图控制器管理，而您接下来要做的就是创建这样的视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1053
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个应用程序并选择单视图应用程序模板时，Xcode会自动创建一个名为*ViewController.swift*的文件，其中包含一个表示并通过代码控制视图的ViewController类。故事板中的视图控制器由此ViewController类管理，我们将把它重命名为AddBirthdayViewController，以便类名能够描述它将要执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名*ViewController.swift*，请选择该文件并点击项目导航器中其名称，这样它就会被高亮显示（参见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将ViewController类的名称更改为AddBirthdayViewController。您可以在文件中通过修改以下这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-1057
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改ViewController.swift的文件名*'
- en: '[PRE113]'
  id: totrans-1059
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'to the line:'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE114]'
  id: totrans-1061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要使用内建方法didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在，您的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE115]'
  id: totrans-1064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 是一个内建的类，用于管理运行应用时在屏幕上出现的视图。`AddBirthdayViewController` 是
    `UIViewController` 的*子类*，它允许我们通过实现 `UIViewController` 的一些内建方法来控制故事板中的视图控制器。'
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 类有四个有用的内建回调方法，这些方法将在视图控制器创建后以及视图控制器的视图出现在屏幕上或从屏幕消失时被调用。这些回调方法是：'
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 这个方法在视图控制器被创建后立即调用，但在视图出现在屏幕上之前调用。这是做任何视图初始设置的好地方，适合只需要做一次的设置。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)` 这个方法在 `viewDidLoad()` 之后被调用，并且在每次视图控制器的视图出现在屏幕上之前被调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)` 这个方法与 `viewWillAppear(_:)` 类似，区别在于它是在视图控制器的视图出现在屏幕上之后调用。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 这个方法在视图控制器的视图即将离开屏幕时被调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 `UIViewController` 中重写这些方法中的任何一个。第一个方法 `viewDidLoad()` 非常有用。Swift 要求所有继承自
    `UIViewController` 的类都使用这个方法，所以当你创建 `UIViewController` 的子类时，Swift 会自动在模板中为 `viewDidLoad()`
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中的一个，你可以开始输入它，自动补全会填写细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 `viewDidLoad()` 只会被调用一次——即视图控制器首次创建时——`viewWillAppear(_:)` 每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕被放置在视图控制器的屏幕上方并随后被移除，使得视图控制器的屏幕重新出现，`viewWillAppear(_:)`
    会再次被调用，但 `viewDidLoad()` 不会，因为视图控制器已经在另一个屏幕后加载并存在。如果你希望每次视图出现时刷新其中的信息，可以重写 `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 `viewWillAppear(_:)` 方法来刷新我们的生日列表。此外，在 “[设置最大生日](text00021.html#ch10lev2sec6)”
    章节的[第149页](text00021.html#page_149)，我们将在 `AddBirthdayViewController` 中重写 `viewDidLoad()`。不过目前，我们可以先不管这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件上。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1075
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接代码到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含了一个“名字”文本框，一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这通过将变量分配给与屏幕元素连接的输入控件来完成，这些控件通过
    IBOutlets 连接。请将以下三个属性添加到 `AddBirthdayViewController` 类的顶部，在 `viewDidLoad()` 方法之前（灰色线条表示一些现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE116]'
  id: totrans-1078
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，它是 Xcode 中我们进行故事板设计的部分。当你在属性前加上
    @IBOutlet 关键字时，旁边的边缘会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1080
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* 带有 IBOutlet 属性的 AddBirthdayViewController *用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
  zh: '`firstNameTextField` 属性的数据类型 `UITextField!` ➋ 是一个隐式解包的可选值，因为当视图控制器第一次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 会被赋予它们在故事板中连接的元素的值。'
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1083
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 `AddBirthdayViewController` 和输入控件的属性，是时候将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 `AddBirthdayViewController`，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **添加生日场景**，并在右侧面板中打开“身份检查器”。你应该会看到顶部的自定义类部分，将类更改为
    `AddBirthdayViewController`，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-1086
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 `AddBirthdayViewController` 的 IBOutlet 属性连接到“添加生日场景”中的文本框和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形展开该场景中的项目菜单。然后，CONTROL
    -点击 **添加生日**，它位于黄色视图控制器图标旁边，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到 `birthdatePicker`、`firstNameTextField` 和 `lastNameTextField`。通过点击旁边的空圆圈并拖动到故事板中的日期选择器，来连接
    `birthdatePicker`。当日期选择器对象被蓝色高亮时，你可以松开（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1090
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 列在连接框中的 birthdatePicker 旁边，并且连接圆圈已被填充，那么你就知道连接成功了（参见
    [图10-8](text00021.html#ch10fig8)）。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时就指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1093
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 firstNameTextField 从其圆圈连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的部分工作。让我们回到 *AddBirthdayViewController.swift* 中，编写代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1097
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
  zh: 人的出生日期不可能是未来的日期，因此我们来编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这种设置。我们在 “[创建 Add Birthday View Controller](text00021.html#ch10lev2sec3)”
    一节中讨论过 viewDidLoad() 方法，位于 [第 145 页](text00021.html#page_145)。这个方法会自动添加到我们的视图控制器中，所以在
    AddBirthdayViewController 中找到这个方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE117]'
  id: totrans-1100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，代码如下：override
    func viewDidLoad()。注意，重要的是要在方法中保留 super.viewDidLoad() 这一行。当你创建一个子类，例如 AddBirthdayViewController，并重写原始父类的方法时，你要确保调用父类中的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中有我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个当前日期和时间的日期。现在试着运行应用程序，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在 [第 9 章](text00020.html#ch09) 中创建的按钮，从这个视图控制器中保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存时，应用应该根据输入的信息创建一个生日记录，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从创建一个 `saveTapped(_:)` 方法开始，该方法会在用户每次点击保存按钮时调用。将以下代码添加到 AddBirthdayViewController
    中，紧接着 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE118]'
  id: totrans-1109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将函数直接与视图控制器中的一个元素连接，并允许我们指定当用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时该函数将被触发。当你编写
    IBAction 方法时，应始终包括一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以根据需要给这个参数命名。在此情况下，我们希望在用户点击保存按钮时调用
    `saveTapped(_:)` 方法，保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌。在 ➍ 处的 `print(_:)` 方法帮助我们在调试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
  zh: '将 `saveTapped(_:)` 与保存按钮连接就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件，按住
    CONTROL 并点击 “Add a Birthday” 行，打开连接对话框。在连接对话框的底部，有一个名为 Received Actions 的区域，如[图
    10-9](text00021.html#ch10fig9)所示。在该区域中，从 saveTapped: 旁边的圆圈点击并拖动到 Add a Birthday
    视图控制器中的保存按钮，将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1112
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部列出，在 Received Actions 下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，调试控制台应该显示信息：“The save button was tapped.”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向 `saveTapped(_:)` 方法添加代码，当用户输入完毕后，获取 firstNameTextField 和 lastNameTextField
    中的名字。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，名为 text。这个 text 属性保存了用户在文本框中输入的内容，因此你可以在 `saveTapped(_:)`
    方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE119]'
  id: totrans-1119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在，即用户输入了值）或空字符串
    ""。你可以使用 nil 合并运算符（??）来完成此操作，这在[第 5 章](text00015.html#ch05)中有介绍。我们在这里使用常量而非变量，因为我们不会改变用户输入的
    firstName 和 lastName 的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做相同的操作。在获取 firstName 和 lastName 的值之后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中不输入任何内容点击保存按钮，然后再输入一个名字和姓氏后再次尝试。你应该能看到类似这样的输出：
- en: '[PRE120]'
  id: totrans-1123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入一个名字，并在调试控制台中看到计算机输出它。接下来，让我们集中精力获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，它就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE121]'
  id: totrans-1129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该能看到类似于以下输出：
- en: '[PRE122]'
  id: totrans-1131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需的！你会注意到调试控制台中显示的日期格式很奇怪，还包括时间和+0000的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用print语句来测试新的newBirthday实例。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE123]'
  id: totrans-1137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用Birthday类的初始化器创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在
    ➋ 处，你通过点符号输出它的属性到调试控制台。打印输出将与之前的print语句相同，但这次你从newBirthday实例中获取值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该能在调试控制台中看到类似于以下的输出：
- en: '[PRE124]'
  id: totrans-1139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，这意味着他们不再想添加生日，添加生日的页面应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法，叫做 dismiss(animated:completion:)。该方法的作用正如其名称所示——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE125]'
  id: totrans-1144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) 函数 ➊ 有两个参数。animated 参数用于动画效果来关闭屏幕。传入 true 以便用户能够看到“添加生日”页面滑出屏幕的效果。它将看起来像一个专业的应用程序！第二个参数是一个可选闭包，名为
    completion。*闭包* 是一段可以传递给函数的代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。因为你在这里不需要任何操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-1146
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样进行操作。前往 *Main.storyboard*
    并打开 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该会看到“添加生日”页面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存生日，但保存后你无法看到它们。在 [第 11 章](text00022.html#ch11)
    中，我们将展示如何在 Birthdays 表视图控制器中显示你的生日列表。
- en: '**CREATING A NEW FILE**'
  id: totrans-1151
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建新文件**'
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写 Birthday 类。在 Xcode 中，文件就像计算机中的任何其他文件一样——它是一种文档。当你使用 Swift
    编写应用时，你会在 Swift 文件中编写类和函数。就像 Word 文件的扩展名是 *.doc* 或 *.docx*，PDF 文件的扩展名是 *.pdf*，Swift
    文件的扩展名是 *.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在应用中添加一个新的类，创建一个新的 Swift 文件来编写该类。你可以在同一个文件中编写任意数量的类，但为了更方便地组织项目，最好将每个类放在不同的文件中，并使文件名与类名一致。在项目导航器中，按住
    CONTROL 键点击 *BirthdayTracker* 文件夹，并从菜单中选择 **新建文件…** 选项，如 [图 10-1](text00021.html#ch10fig1)
    所示。
- en: '![image](Image00222.jpg)'
  id: totrans-1154
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在Xcode中创建一个新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个对话框，如[图10-2](text00021.html#ch10fig2)所示。在这里，您需要选择要创建的文件类型，这是一个通用的空Swift文件。在对话框顶部选择**iOS**，选择**Swift文件**，然后点击**下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-1157
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2：选择***Swift文件***作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**创建**。您应该会在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*。点击它，您应该会看到一个空的*Birthday.swift*文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1160
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode已经自动写入了一些版权信息作为代码注释。在“Created by”后面的名字是从您计算机的联系人应用程序中的联系人卡片获取的。在版权年份之后，您应该会看到您在[第1章](text00011.html#ch01)中创建第一个Xcode项目时使用的组织名称。每次在Xcode中创建新文件时，这个注释头部都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了*Birthday.swift*文件，您可以创建Birthday类来存储您的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写BIRTHDAY类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，而birthdate将是一个内置于Swift中的特殊类，名为Date，它专门用于处理日期和时间。我们将使用Date类的功能来提醒用户生日。将以下内容输入到*Birthday.swift*文件中，位于import
    Foundation语句下面。
- en: '![](Image00225.jpg)'
  id: totrans-1166
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE126]'
  id: totrans-1168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在➊处看到新的Date数据类型。Date的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，您为Birthday类添加了一个初始化方法，该方法接受firstName、lastName和birthdate作为输入参数。然后，使用self属性将它们设置为类的属性➌。这样，您就可以传递姓名和日期给Birthday类来存储生日。
- en: '**NOTE**'
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步为项目构建每个代码文件。最终版本可以从[https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)获得。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已经有了一个可以保存朋友姓名和生日的Birthday类，并且您在[第9章](text00020.html#ch09)中设置了Storyboard中的输入字段。但是，Birthday类和输入字段尚未连接，因此用户的输入不会被存储为Birthday对象。现在是时候编写代码，让界面可以添加生日了。为此，您需要创建一个新的AddBirthdayViewController类来管理Storyboard中“添加生日”场景中的输入字段。（记住，视图是由视图控制器控制的，接下来您将创建的正是视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个代表并通过代码控制视图的
    ViewController 类。故事板中的视图控制器是通过这个 ViewController 类进行管理的，我们将把它重命名为 AddBirthdayViewController，这样类的名称就能描述它将要执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift* ，选择它并点击项目导航器中的文件名，使其高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中通过更改以下行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-1179
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名为* ViewController.swift'
- en: '[PRE127]'
  id: totrans-1181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'to the line:'
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
  zh: 到以下行：
- en: '[PRE128]'
  id: totrans-1183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内建的 didReceiveMemoryWarning() 方法，因此可以通过删除这个方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE129]'
  id: totrans-1186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建的类，提供了管理当你运行应用时显示在屏幕上的视图的内建方法。AddBirthdayViewController
    是 UIViewController 的一个*子类*，它让我们通过实现 UIViewController 的一些内建方法的自定义版本，来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，当视图控制器被创建并出现在屏幕上或从屏幕上消失时，它们会被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建完成后但视图尚未出现在屏幕上时调用。这里是进行任何初步视图设置的好地方，你可能只希望做一次设置。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 UIViewController 中重写任何这些方法。第一个方法 viewDidLoad() 非常有用。Swift 希望任何继承自 UIViewController
    的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动在模板中添加一个 viewDidLoad() 的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入它，自动补全会填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然`viewDidLoad()`只会在视图控制器首次创建时被调用一次，**viewWillAppear(_:)**却会在每次视图控制器的视图即将显示在屏幕上时被调用。所以，如果另一个屏幕被叠加到视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新出现，**viewWillAppear(_:)**会再次被调用，但`viewDidLoad()`不会，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新新的信息，可以重写**viewWillAppear(_:)**。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用**viewWillAppear(_:)**方法来刷新我们的生日列表。此外，在“[设置最大生日](text00021.html#ch10lev2sec6)”一节中的[第149页](text00021.html#page_149)，我们将重写`viewDidLoad()`方法，位于`AddBirthdayViewController`中。然而，现在我们可以暂时不管这些方法，先将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1197
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名”文本框、一个“姓”文本框和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是通过将变量赋给连接到屏幕元素的`IBOutlets`来实现。将以下三个属性添加到`AddBirthdayViewController`类的顶部，在`viewDidLoad()`方法之前（灰色的行表示一些现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE130]'
  id: totrans-1200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
  zh: '`@IBOutlet` ➊ 是一个特殊的关键字，用于放在可以在故事板中连接的属性前面。`IB`代表*接口构建器*，这是Xcode中用于操作故事板的部分。当你在属性前加上`@IBOutlet`关键字时，旁边的边距上会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1202
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* 带有输入控件`IBOutlet`属性的`AddBirthdayViewController`'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
  zh: '`firstNameTextField`属性的数据类型是`UITextField!` ➋，它是一个隐式解包可选类型，因为当视图控制器首次创建时，`IBOutlets`的值为`nil`。然而，一旦视图加载，`IBOutlets`就会被赋予它们在故事板中连接的元素的值。'
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了`AddBirthdayViewController`和输入控件的属性，是时候将“名”和“姓”文本框以及“生日”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用这个类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，然后在左侧大纲视图中选择 **Add a Birthday Scene**，在右侧窗格中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-1208
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键点击 **Add a Birthday**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击 birthdatePicker
    旁边的空圆圈并拖动到故事板中的日期选择器来连接它。当日期选择器对象被蓝色高亮时，可以放开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1212
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 在连接框中与 birthdatePicker 并列，并且连接圆圈已经填充，说明连接成功（参见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到一个日期选择器。如果尝试将它连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1215
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 的圆圈，将其连接到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的操作。接下来，让我们回到 *AddBirthdayViewController.swift* 文件中，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
  zh: 让人拥有一个未来的出生日期显然没有意义，因此让我们编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这种设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 章节中已经讨论过
    viewDidLoad() 方法（参见 [第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此请在
    AddBirthdayViewController 中找到这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE131]'
  id: totrans-1222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的一个方法，所以我们需要使用`override`关键字来重写它，像这样：`override
    func viewDidLoad()`。请注意，方法中一定要保留`super.viewDidLoad()`这一行。当你创建一个子类，如`AddBirthdayViewController`，并重写原始父类的方法时，你需要确保调用父类的方法。因为Apple可能在`UIViewController`的`viewDidLoad()`方法中有一些我们不了解的特殊代码，所以不调用这个父类方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的`maximumDate`，你只需在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法创建一个新的日期，代表当前的日期和时间。现在试着运行应用程序，它应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够通过你在[第9章](text00020.html#ch09)中制作的按钮，在此视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个`saveTapped(_:)`方法，该方法会在每次用户点击保存按钮时调用。将以下代码添加到`AddBirthdayViewController`中，紧接着`viewDidLoad()`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE132]'
  id: totrans-1231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的`@IBAction`是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上进行操作时应该运行的代码。在这里，我们将添加一个函数，当用户点击保存时运行。当你编写一个`IBAction`方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常会使用下划线来隐藏参数标签，参数名称为`sender`
    ➋，但你可以根据需要将这个参数命名为其他任何名字。在这种情况下，我们希望在用户点击保存按钮时调用`saveTapped(_:)`方法，保存按钮是一个`UIBarButtonItem`。因此，我们指定`sender`的类型为`UIBarButtonItem`
    ➌。`print(_:)`方法在➍处帮助我们在测试代码时看到保存按钮何时被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
  zh: 将`saveTapped(_:)`连接到保存按钮，就像将`IBOutlet`连接到故事板元素一样。回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动从`saveTapped:`旁边的圆圈到“添加生日”视图控制器中的保存按钮，以便将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1234
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions在连接对话框底部的“接收的动作”下列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。点击保存按钮时，调试控制台应该显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，获取用户输入的 firstName 和 lastName，分别来自 firstNameTextField
    和 lastNameTextField。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选 String 属性。这个 text 属性的值就是输入框中用户输入的内容，所以你可以在 saveTapped(_:)
    方法中使用以下代码获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE133]'
  id: totrans-1241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），否则设置为空字符串
    ""。你可以使用在[第5章](text00015.html#ch05)中学到的空值合并运算符 (??) 来实现这一点。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 ➋ 处的 lastName 做相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE134]'
  id: totrans-1245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入名字，并看到计算机在调试控制台中输出它。接下来我们将重点关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1247
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前由选择器显示的日期。对于 birthdatePicker，它的值是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
  zh: 向 saveTapped(_:) 方法中添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE135]'
  id: totrans-1251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE136]'
  id: totrans-1253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这三个数据是创建生日所必需的！你会注意到，调试控制台中显示的日期格式有些奇怪，其中还包括了时间和
    +0000 的时区偏移。暂时不用太担心这个。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不带时间地显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1255
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以利用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用打印语句来测试新的`newBirthday`实例。然后在`saveTapped(_:)`方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE137]'
  id: totrans-1259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用`Birthday`类的初始化方法创建了一个`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`的常量值。创建了`newBirthday`之后，在➋，你通过点表示法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你获取的是来自`newBirthday`实例的值。运行应用，输入生日信息，点击保存，看看会发生什么。你应该能在调试控制台中看到类似以下内容的输出：
- en: '[PRE138]'
  id: totrans-1261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个`Birthday`实例。你将在[第11章](text00022.html#ch11)学到如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法会调用一个内置的UIViewController方法，叫做`dismiss(animated:completion:)`。这个方法的作用正如它的名字所示——它会关闭当前显示的视图控制器。在你的`AddBirthdayViewController`类中，紧跟在`saveTapped(_:)`方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE139]'
  id: totrans-1266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` ➊ 方法接受两个参数。`animated`参数用于控制屏幕关闭时是否有动画效果。传入`true`，让用户看到“添加生日”界面滑下屏幕。这样看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做`completion`。一个*闭包*是一个可以传递给函数的代码块。如果你希望在视图控制器关闭后运行某些代码，可以使用`completion`闭包。因为在这里你不需要任何后续操作，所以可以直接传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-1268
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`方法连接到取消按钮。你可以像连接`saveTapped(_:)`方法到保存按钮那样做。打开*Main.storyboard*，并调出添加生日视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击**+**进入添加生日屏幕，再点击**取消**。你应该能看到“添加生日”界面从屏幕上滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。现在你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)，我们将向你展示如何在一个生日列表视图控制器中显示你的生日。
- en: First, you’ll create a file where you’ll write the Birthday class. A file in
    Xcode is just like any other computer file—it’s a type of document. When you write
    an app in Swift, you’ll write your classes and functions in Swift files. Just
    like how Word files have the extension *.doc* or *.docx* and PDF files end with
    *.pdf* , a Swift file has the extension *.swift* after its name.
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将创建一个文件，在其中编写Birthday类。Xcode中的文件就像其他计算机文件一样，它是一种文档类型。当你用Swift编写应用程序时，你将在Swift文件中编写类和函数。就像Word文件的扩展名是*.doc*或*.docx*，PDF文件以*.pdf*结尾，Swift文件的扩展名是*.swift*。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为你的应用程序添加一个新的类，可以创建一个新的Swift文件来编写该类。你可以在同一个文件中编写多个类，但如果将每个类放在单独的文件中，并且文件名与类名匹配，会更容易组织项目。在项目导航器中，*右键单击*
    *BirthdayTracker* 文件夹，选择菜单中的 **新建文件...** 选项，如[图10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-1275
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在Xcode中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个对话框，如[图10-2](text00021.html#ch10fig2)所示。在这里，你被要求选择你要创建的文件类型，这是一个通用的空Swift文件。在对话框顶部选择
    **iOS**，选择 **Swift 文件**，然后点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-1278
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2：选择* ***Swift文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday* 并点击 **创建**。你应该会看到 *Birthday.swift* 文件列在项目导航器中的 *BirthdayTracker*
    文件夹中。点击它，你应该会看到一个空的 *Birthday.swift* 文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1281
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode已经自动写入了一些版权信息，格式是代码注释。紧跟着“Created by”后面的名字是从你电脑上的联系人应用程序的联系人卡片中提取的。版权年份之后，你应该会看到你在[第1章](text00011.html#ch01)创建第一个Xcode项目时使用的组织名称。每次在Xcode中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了*Birthday.swift*文件，你可以创建Birthday类来存储你的生日。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写Birthday类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，但birthdate将是一个特别的类，Swift内建的Date类，它专门用于处理日期和时间。我们将利用Date类的功能来提醒用户生日。将以下内容输入到*Birthday.swift*文件中的import
    Foundation语句下。
- en: '![](Image00225.jpg)'
  id: totrans-1287
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE140]'
  id: totrans-1289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊处看到新的Date数据类型。Date的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你为Birthday类添加了一个初始化器，该初始化器接受firstName、lastName和birthdate作为输入参数。然后，使用self属性，将它们设置为类的属性➌。这样，你就可以将名字和日期传递给Birthday类来存储生日信息。
- en: '**NOTE**'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步一步地构建每个项目的代码文件，最终版本可以从*[https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以存储朋友姓名和生日的Birthday类，并且在[第9章](text00020.html#ch09)的故事板中设置了输入字段。但是Birthday类和输入字段没有连接，因此用户输入的内容无法作为Birthday对象存储。现在是时候编写代码，让界面能够添加生日了。为此，你将创建一个新的AddBirthdayViewController类，用于管理故事板中“添加生日”场景的输入字段。（记住，视图是由视图控制器管理的，这就是你接下来要做的事情。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1296
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用程序并从单视图应用程序模板开始时，Xcode会自动创建一个名为*ViewController.swift*的文件，其中包含一个ViewController类，该类通过代码表示和控制视图。故事板中的视图控制器由这个ViewController类管理，我们将其重命名为AddBirthdayViewController，以便类名能够描述其功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名*ViewController.swift*，选择它并点击项目导航器中的名称，使其被高亮显示（见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以在文件中通过修改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-1300
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名为* ViewController.swift*'
- en: '[PRE141]'
  id: totrans-1302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: 'to the line:'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE142]'
  id: totrans-1304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
  zh: 你不再需要内建方法didReceiveMemoryWarning()，因此可以通过删除该方法来简化代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE143]'
  id: totrans-1307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内建方法的类，用于管理在你运行应用程序时出现在屏幕上的视图。AddBirthdayViewController
    是 UIViewController 的一个*子类*，它让我们通过实现一些 UIViewController 内建方法的自定义版本，来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法会在视图控制器创建并出现在屏幕上或从屏幕上消失时被调用。以下是这些回调方法：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后，但在其视图出现在屏幕上之前被调用。这里是做任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法会在 viewDidLoad() 调用后，且每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，不同的是，它是在视图控制器的视图出现在屏幕后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 UIViewController 中重写这些方法中的任何一个。第一个方法 viewDidLoad() 非常有用。Swift 期望任何子类化
    UIViewController 的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动为 viewDidLoad() 提供一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入，自动补全会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会在视图控制器首次创建时调用一次，但 viewWillAppear(_:) 会在视图控制器的视图即将出现在屏幕上时每次都被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，从而让视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会，因为视图控制器已经在另一个屏幕后面加载了。如果你希望每次视图出现时都刷新新信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”（见[第149页](text00021.html#page_149)）中，我们将在
    AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以暂时不管这些方法，将我们的代码与[第9章](text00020.html#ch09)中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1318
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器有一个名为“First Name”的文本字段、一个名为“Last Name”的文本字段和一个名为“Birthdate”的日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过为连接到屏幕元素的IBOutlets分配变量来实现。在AddBirthdayViewController类的viewDidLoad()方法之前，添加以下三个属性（灰色行表示现有代码，供参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE144]'
  id: totrans-1321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们用来操作故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1323
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* AddBirthdayViewController *与输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型为UITextField! ➋，它是一个隐式解包可选值，因为当视图控制器首次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets就会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1326
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了AddBirthdayViewController以及输入控件的属性，是时候连接“First Name”和“Last Name”文本字段以及“Birthdate”日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“Add a Birthday”视图控制器的类更改为AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**Add
    a Birthday Scene**，并在右侧窗格中打开身份检查器。你应该能看到顶部的Custom Class部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-1329
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“Add a Birthday Scene”中的文本字段和日期选择器。点击左侧大纲视图中“Add
    a Birthday Scene”旁的三角形以展开该场景中的项目菜单。然后，按住CONTROL并点击**Add a Birthday**，该选项位于黄色视图控制器图标旁边，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器上来连接birthdatePicker。当日期选择器对象变为蓝色高亮时，你可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1333
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中的birthdatePicker旁边，并且连接圆圈已填充，说明连接成功（参见[图 10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker
    outlet连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，则不会发生任何事情。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在创建属性时在AddBirthdayViewController中为其指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1336
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动圆圈从firstNameTextField连接到First Name标签下方的文本字段。最后，将lastNameTextField连接到Last
    Name标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。接下来，我们回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期在未来，那就没有意义了，因此我们编写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行此设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论过viewDidLoad()方法，见[第145页](text00021.html#page_145)。它已自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到此方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE145]'
  id: totrans-1343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，因此我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad()。请注意，保留方法中的super.viewDidLoad()行很重要。当你创建一个子类，如AddBirthdayViewController，并重写来自原始父类的方法时，你要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()中有我们不知道的特殊代码，因此不调用此父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法创建一个新的日期，表示当前的日期和时间。现在试着运行应用程序。应该不可能选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用在[第9章](text00020.html#ch09)中创建的按钮，在此视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个 saveTapped(_:) 方法开始，这个方法会在用户每次点击保存按钮时被调用。在 viewDidLoad() 方法之后，向 AddBirthdayViewController
    中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE146]'
  id: totrans-1352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，用于将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应执行的代码。在本例中，我们将添加一个函数，它会在用户点击保存时执行。当你编写一个
    IBAction 方法时，你应该始终包括一个参数，表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但是你可以根据需要为这个参数命名。在这个例子中，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem 。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮，就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件。按住
    CONTROL 键点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个叫做“接收的操作”区域，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该区域，点击并拖动从 saveTapped: 旁边的圆圈到“添加生日”视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1355
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部列出，位于接收的操作下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的应用程序。当你点击保存按钮时，调试控制台应该显示“已点击保存按钮”信息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1358
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 saveTapped(_:) 方法添加代码，获取用户输入的 firstNameTextField 和 lastNameTextField 中的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性 text 。这个 text 属性的值是用户输入到文本字段中的内容，因此你可以在 saveTapped(_:)
    方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE147]'
  id: totrans-1362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了一个值），或者设置为空字符串
    "" 。你可以使用 nil 合并运算符 (??) 来实现这一点，正如你在 [第 5 章](text00015.html#ch05) 中学到的那样。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 ➋ 处的 lastName 做同样的操作。在你获取 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本字段中不输入任何内容后点击保存按钮，然后再输入名字和姓氏后再次尝试。你应该会看到类似下面的输出：
- en: '[PRE148]'
  id: totrans-1366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字并看到计算机在调试控制台输出它。接下来，让我们关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1368
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前picker显示的日期。对于birthdatePicker来说，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE149]'
  id: totrans-1372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下内容的输出：
- en: '[PRE150]'
  id: totrans-1374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据足以创建一个Birthday！你会注意到，调试控制台中显示的日期格式有些奇怪，包含了时间以及+0000作为时区偏移。暂时不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1376
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息使用Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后，将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE151]'
  id: totrans-1380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，使用Birthday类的初始化器创建一个新的Birthday实例，并传入常量firstName、lastName和birthdate。在创建newBirthday后，在➋处，使用点符号将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你获取的是newBirthday实例中的值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下内容的输出：
- en: '[PRE152]'
  id: totrans-1382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday对象。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再希望添加生日，添加生日的界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用UIViewController的内置方法dismiss(animated:completion:)。这个方法的作用正如其名称所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE153]'
  id: totrans-1387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于动画显示关闭屏幕。传入true，这样用户就能看到添加生日界面从屏幕上滑下。它看起来就像一个专业应用！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你想在视图控制器被关闭后执行任何代码，可以使用completion闭包。因为这里不需要执行任何代码，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-1389
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样来操作。进入*Main.storyboard*，并打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击**+**进入添加生日界面，然后点击**Cancel**。你应该会看到添加生日的界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的生日对象。目前，你可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表视图控制器中显示你的生日列表。
- en: If you want to add a new class to your application, create a new Swift file
    to write that class. You can write as many classes as you want in the same file,
    but it’s easier to organize your project if you keep classes in separate files
    with filenames that match each class’s name. CONTROL -click the *BirthdayTracker*
    folder in the Project navigator and choose the **New File…** option from the menu,
    as shown in [Figure 10-1](text00021.html#ch10fig1) .
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在应用中添加一个新类，创建一个新的Swift文件来编写这个类。你可以在同一个文件中编写任意数量的类，但如果将类分开放在不同的文件中，并使文件名与类名匹配，会更容易组织你的项目。在项目导航器中，按住CONTROL键点击*BirthdayTracker*文件夹，并从菜单中选择**New
    File…**选项，如[图10-1](text00021.html#ch10fig1)所示。
- en: '![image](Image00222.jpg)'
  id: totrans-1395
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1: 在Xcode中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，类似于[图10-2](text00021.html#ch10fig2)所示。在这里，你被要求选择你想创建的文件类型，即一个通用的空Swift文件。在对话框的顶部选择**iOS**，选择**Swift
    File**，然后点击**Next**。
- en: '![](Image00223.jpg)'
  id: totrans-1398
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2: 选择* ***Swift File*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday* 并点击 **Create**。你应该会在项目导航器的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*
    文件。点击它，你应该会看到一个空的 *Birthday.swift* 文件，如[图 10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1401
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3: *Birthday.swift* 文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件的顶部，Xcode 已经自动写入了一些版权信息作为代码注释。紧随其后的“Created by”中的名字是从你计算机的联系人应用程序中的联系人卡片中提取的。在版权年份之后，你应该能看到在[第
    1 章](text00011.html#ch01)中创建第一个 Xcode 项目时使用的组织名称。每次你在 Xcode 中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1405
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 Birthday 类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。属性 firstName 和 lastName
    应该是 String 类型，而 birthdate 将是 Swift 中内置的特殊类 Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户关于生日的事项。请在
    *Birthday.swift* 文件中 import Foundation 语句下输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-1407
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE154]'
  id: totrans-1409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 处看到新的 Date 数据类型。Date 的声明方式和任何其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们设置为类的属性 ➌ 。这将允许你将姓名和日期传递给 Birthday 类以存储生日。
- en: '**NOTE**'
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1414
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以保存朋友姓名和生日的 Birthday 类，并且在[第 9 章](text00020.html#ch09)中设置了界面中的输入字段。但是，Birthday
    类和输入字段尚未连接，因此用户输入的数据不会作为 Birthday 存储。现在是时候编写代码使界面能够添加生日了。为此，你将创建一个新的 AddBirthdayViewController
    类来管理故事板中“添加生日”场景中的输入字段。（记住，一个视图是由视图控制器管理的，这就是你接下来要创建的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1416
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用程序并选择一个单视图应用程序模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，该文件包含一个表示并用代码控制视图的
    ViewController 类。故事板中的视图控制器由这个 ViewController 类管理，我们将它重命名为 AddBirthdayViewController，以便类名能描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择该文件并在项目导航器中点击文件名使其高亮（见 [图10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中通过更改以下这一行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-1420
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改* ViewController.swift的文件名'
- en: '[PRE155]'
  id: totrans-1422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: 'to the line:'
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE156]'
  id: totrans-1424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置方法 didReceiveMemoryWarning()，所以可以通过删除该方法来清理代码。现在你的类应该像这样：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE157]'
  id: totrans-1427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个自带管理视图的内置方法的类，当你运行应用程序时，视图会显示在屏幕上。AddBirthdayViewController
    是 UIViewController 的 *子类*，它允许我们通过实现 UIViewController 一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，这些方法会在视图控制器创建并出现在屏幕上或从屏幕消失时调用。以下是这些回调方法：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建完成但视图尚未出现在屏幕上时被调用。这个方法是进行任何仅需要执行一次的视图初始化设置的理想位置。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后以及每次视图控制器的视图将要出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 UIViewController 的子类中重写这些方法中的任何一个。第一个方法 viewDidLoad() 非常有用。Swift 期望所有继承自
    UIViewController 的类都使用这个方法，所以当你创建 UIViewController 的子类时，它会自动为 viewDidLoad() 提供一个占位符代码。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个，可以开始输入，它会自动补全细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会被调用一次——即当视图控制器首次创建时——viewWillAppear(_:) 会在每次视图控制器的视图即将显示在屏幕上时调用。因此，如果一个屏幕被放到视图控制器的屏幕上方，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载了。如果你希望每次视图出现时刷新视图以显示新信息，你可以重写
    viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)（第
    149 页）（[page 149](text00021.html#page_149)）中，我们将在 AddBirthdayViewController 中重写
    viewDidLoad()。不过现在，我们可以先不处理这些方法，先将我们的代码与在[第 9 章](text00020.html#ch09)中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1438
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
  zh: 在 storyboard 中，我们的“添加生日”视图控制器有一个名为 First Name 的文本字段，一个 Last Name 的文本字段和一个 Birthdate
    的日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量分配给连接到屏幕元素的 IBOutlets 来实现。在 AddBirthdayViewController
    类的 viewDidLoad() 方法之前添加以下三个属性（灰色线条表示一些现有的代码，作为位置指示）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE158]'
  id: totrans-1441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1442
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在 storyboard 中连接的属性前面。IB 代表 *接口构建器*，这是 Xcode 中我们操作
    storyboard 的部分。当你在一个属性前面加上 @IBOutlet 关键字时，它旁边的边缘会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到
    storyboard 中的某个元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1443
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* 带有 IBOutlet 属性的 AddBirthdayViewController *，用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载完成，IBOutlets 就会被赋值为它们在 storyboard 中连接到的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 storyboard 中 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧窗格中打开 Identity Inspector。您应该在顶部看到一个
    Custom Class 部分。将类更改为 AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-1449
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday 场景中的文本字段和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键并点击黄色视图控制器图标旁边的**Add a
    Birthday**，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。在它们旁边点击空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象被蓝色高亮时，您可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1453
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到 Birthdate Picker 列在连接框中的 birthdatePicker 旁边，并且连接圆圈已填充，那么说明连接成功（见[图 10-8](text00021.html#ch10fig8)）。您只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在创建 AddBirthdayViewController 的属性时我们为其指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1456
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 的圆圈到 First Name 标签下方的文本字段来连接 firstNameTextField。最后，将
    lastNameTextField 连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经完成了 storyboard 的部分工作。现在我们回到 *AddBirthdayViewController.swift* 文件中，编写代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1460
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些代码，防止用户在未来选择出生日期，因为让一个人选择未来的出生日期没有意义。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这样的设置。在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”
    一节中我们讨论了 viewDidLoad() 方法（见[第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此在
    AddBirthdayViewController 中找到该方法，并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE159]'
  id: totrans-1463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，写作：override
    func viewDidLoad()。请注意，在该方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类（如 AddBirthdayViewController）并重写原始超类中的方法时，确保也调用超类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中运行了一些我们不知道的特殊代码，因此不调用该超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的最大日期，您只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个新的日期对象，该对象表示当前的日期和时间。现在试着运行一下应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便能够通过您在 [第9章](text00020.html#ch09) 中制作的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1467
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮！当用户点击“保存”时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1469
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接“保存”按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，每次用户点击“保存”按钮时该方法都会被调用。将以下代码添加到 AddBirthdayViewController
    中，紧接着 viewDidLoad() 方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE160]'
  id: totrans-1472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个在用户点击“保存”时执行的函数。当你编写一个IBAction方法时，应该始终包括一个表示触发该方法的UI元素的参数。通常，会使用下划线来隐藏参数标签，参数名称为
    sender ➋，但你可以根据需要命名此参数。在此案例中，我们希望每次用户点击“保存”时都会调用 saveTapped(_:) 方法，该方法对应的是一个 UIBarButtonItem。所以我们指定
    sender 的类型为 UIBarButtonItem ➌。在 ➍ 处的 print(_:) 方法可以帮助我们在测试代码时查看是否点击了“保存”按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到“保存”按钮的过程就像将 IBOutlet 连接到 storyboard 元素一样。返回到 *Main.storyboard*
    文件。按住 CONTROL 键并单击“添加生日”这一行，打开连接对话框。在连接对话框的底部有一个名为“已接收操作”的部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，点击并拖动从 saveTapped: 旁边的圆圈到“添加生日”视图控制器中的“保存”按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1475
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框底部的“已接收操作”部分列出了 IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，调试控制台应该会显示消息：“保存按钮被点击了。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1478
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，以便在用户输入后，从 firstNameTextField 和 lastNameTextField
    获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性叫做 text 。这个 text 属性的值是输入框中输入的内容，因此你可以用它在 saveTapped(_:)
    方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE161]'
  id: totrans-1482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，也就是用户输入了值），如果为空则设置为""。你可以使用在[第5章](text00015.html#ch05)中学到的空合并操作符（??）来完成这项工作。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对 lastName 做同样的处理。当你获取了 firstName 和 lastName 的值后，打印它们到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在文本框中什么都不输入就点击保存按钮，然后再输入名字和姓氏后点击保存。你应该能看到类似以下的输出：
- en: '[PRE162]'
  id: totrans-1486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用中输入名字并在调试控制台中看到电脑输出的结果了。接下来，让我们聚焦于如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1488
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前显示的日期。对于 birthdatePicker ，就是 birthdatePicker.date 。当用户更改 UIDatePicker
    时，date 属性也会发生变化，因此你可以通过 birthdayPicker.date 获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
  zh: 在 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE163]'
  id: totrans-1492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE164]'
  id: totrans-1494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了一个 firstName 、一个 lastName 和一个出生日期——这三项数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括了时间和时区偏移（+0000）。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不显示时间来展示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1496
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码可以访问用户提供的 firstName 、 lastName 和 birthdate 输入数据，你可以使用这些信息通过 Birthday 类的初始化器来创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE165]'
  id: totrans-1500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建了newBirthday之后，在➋处，你通过点语法输出它的属性到调试控制台。打印输出与之前的print语句类似，但这次你获取的是newBirthday实例的值。运行应用程序，输入生日，点击保存查看会发生什么。你应该能在调试控制台中看到类似以下的输出：
- en: '[PRE166]'
  id: totrans-1502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1505
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。让我们通过向我们的类中添加一个cancelTapped(_:)方法来实现这个行为，这个方法会调用一个内置的UIViewController方法——dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE167]'
  id: totrans-1507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1508
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于动画效果，关闭时会动画展示。传入true，这样用户就能看到添加生日界面从屏幕上滑动消失。看起来就像一个专业的应用程序！第二个参数是一个可选闭包，叫做completion。*闭包*是一段可以传递给函数的代码块。如果有任何需要在视图控制器消失后执行的代码，可以在此使用completion闭包。因为你这里不需要执行任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-1509
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以按照与保存按钮相同的方式将saveTapped(_:)方法连接到保存按钮。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该看到“添加生日”界面滑出屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前你可以保存 Birthday，但保存后无法看到它们。在 [第 11 章](text00022.html#ch11)
    中，我们将向你展示如何在生日表视图控制器中显示生日列表。
- en: '![image](Image00222.jpg)'
  id: totrans-1514
  prefs: []
  type: TYPE_IMG
  zh: '![image](Image00222.jpg)'
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-1：在 Xcode 中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
  zh: 这会弹出一个对话框，类似于 [图 10-2](text00021.html#ch10fig2) 中的那种。这里会要求你选择想要创建的文件类型，这是一个通用的空白
    Swift 文件。在对话框顶部选择 **iOS**，选择 **Swift 文件**，然后点击 **下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-1517
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday* 并点击 **创建**。你应该会在项目导航器的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*。点击它，你应该会看到一个空的
    *Birthday.swift* 文件，如 [图 10-3](text00021.html#ch10fig3) 所示。
- en: '![](Image00224.jpg)'
  id: totrans-1520
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode 已经自动写入了一些版权信息，作为代码注释。“Created by” 后面的名字是从你计算机的联系人应用中提取的。在版权年份后，你应该能看到你在
    [第 1 章](text00011.html#ch01) 中创建第一个 Xcode 项目时使用的组织名称。每次你在 Xcode 中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1524
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
  zh: 你的生日类将有三个常量属性：firstName、lastName 和 birthdate。属性 firstName 和 lastName 应该是 String
    类型，而 birthdate 将是 Swift 中一个特殊的类，称为 Date，它专门用来处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。请在
    *Birthday.swift* 文件中的 import Foundation 语句下输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-1526
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE168]'
  id: totrans-1528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 处看到新的 Date 数据类型。Date 的声明与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化器，它接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们赋值给类的属性 ➌ 。这将允许你将姓名和日期传递给 Birthday 类，以存储一个生日。
- en: '**NOTE**'
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *上获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个可以保存朋友姓名和出生日期的 Birthday 类，并且在故事板中已经设置了输入字段（这些字段在[第9章](text00020.html#ch09)中设置）。但是，Birthday
    类和输入字段之间没有连接，因此用户输入的内容没有作为 Birthday 存储。现在是时候编写代码来使界面能够添加生日了。为此，你将创建一个新的 AddBirthdayViewController
    类来管理故事板中“添加生日”场景的输入字段。（记住，视图由视图控制器控制，这正是你接下来要做的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1535
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个表示和控制视图的
    ViewController 类。故事板中的视图控制器通过这个 ViewController 类进行管理，我们将其重命名为 AddBirthdayViewController，以便类名能够描述它将要执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择该文件并点击项目导航器中的文件名，使其高亮显示（见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中通过修改以下代码行来完成此操作：
- en: '![](Image00226.jpg)'
  id: totrans-1539
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改* ViewController.swift 的文件名'
- en: '[PRE169]'
  id: totrans-1541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: 'to the line:'
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止：
- en: '[PRE170]'
  id: totrans-1543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该看起来是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE171]'
  id: totrans-1546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建的类，提供了管理应用运行时在屏幕上显示的视图的方法。AddBirthdayViewController 是
    UIViewController 的*子类*，它允许我们通过实现 UIViewController 的一些内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法将在视图控制器创建后、视图出现在屏幕上或从屏幕上消失时被调用。以下是这些回调方法：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后立即调用，但在其视图出现在屏幕上之前调用。这是进行任何只需执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不同的是它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将从屏幕上消失时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中覆盖任何这些方法。第一个方法viewDidLoad()非常有用。Swift期望所有子类UIViewController的人都使用此方法，因此当你子类化UIViewController时，它会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为另外三个方法提供占位符代码。如果你决定使用其中一个，你可以开始输入，自动完成功能会填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()仅在视图控制器首次创建时调用一次，但viewWillAppear(_:)会在视图控制器的视图即将显示到屏幕上时每次被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上并且被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)将会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新显示新的信息，你可以覆盖viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，[第
    149 页](text00021.html#page_149)将会覆盖AddBirthdayViewController中的viewDidLoad()方法。然而，目前我们可以暂时不动这些方法，而将代码连接到我们在[第
    9 章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1557
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1558
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器有一个名为“First Name”的文本字段，一个名为“Last Name”的文本字段，以及一个出生日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这通过将变量分配给连接到屏幕元素的输入控件来实现。将以下三个属性添加到AddBirthdayViewController类的viewDidLoad()方法之前（灰色的线表示一些现有代码，用于放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1559
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE172]'
  id: totrans-1560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1561
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB代表*界面构建器*，这是Xcode中我们进行故事板工作的部分。当你在属性前添加@IBOutlet关键字时，会在旁边的边缘显示一个小圆圈，如[图
    10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1562
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1563
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *包含输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1564
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋ ，它是一个隐式解包可选类型，因为当视图控制器第一次创建时，IBOutlets
    的值是 nil。但是，一旦视图加载，IBOutlets 就会被赋予与它们在故事板中连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1565
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1566
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是连接 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1567
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用这个类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene**，然后在右侧面板中打开 Identity
    Inspector。你应该能看到顶部的 Custom Class 部分。将类更改为 AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6)
    所示。
- en: '![](Image00228.jpg)'
  id: totrans-1568
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1569
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1570
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本框和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，CONTROL-点击**Add a Birthday**旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1571
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮时，你可以松开（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1572
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1573
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1574
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 出现在连接框中的 birthdatePicker 旁边，且连接圆圈已填充，那么说明连接成功（参见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中为它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1575
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1576
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1577
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，从 firstNameTextField 的圆圈到 First Name 标签下的文本框来连接它。最后，将 lastNameTextField
    连接到 Last Name 标签下的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1578
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，你已经完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1579
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1580
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的生日是在未来日期上是不合适的，因此我们编写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行此设置。在[第145页](text00021.html#page_145)的“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中，我们讨论过viewDidLoad()方法。它会自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到此方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1581
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE173]'
  id: totrans-1582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1583
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字来重写它，如下所示：override
    func viewDidLoad()。请注意，必须在方法中保留super.viewDidLoad()这一行。当你创建一个子类，例如AddBirthdayViewController，并重写来自原始超类的方法时，你需要确保也调用超类的方法。苹果可能在UIViewController的viewDidLoad()方法中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1584
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前日期和时间的新日期。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1585
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便可以保存生日并使用你在[第9章](text00020.html#ch09)中创建的按钮从此视图控制器取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1586
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1587
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1588
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1589
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，每次用户点击保存按钮时都会调用这个方法。在viewDidLoad()方法之后，向AddBirthdayViewController中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1590
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE174]'
  id: totrans-1591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1592
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时运行。当你编写IBAction方法时，应始终包含一个参数，用于指定触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋ ，但你可以随意命名这个参数。在这里，我们希望每当用户点击保存时，调用saveTapped(_:)方法，它是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem
    ➌ 。在➍处的print(_:)方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1593
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet与Storyboard元素连接一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”这一行，以打开连接对话框。在连接对话框的底部，有一个叫做“接收的动作”部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以建立连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1594
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1595
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的“接收的动作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1596
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台中应显示“保存按钮已被点击”消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1597
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1598
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入名字和姓氏后，能够从firstNameTextField和lastNameTextField中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1599
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性的值就是输入框中所输入的内容，因此你可以在saveTapped(_:)中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1600
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE175]'
  id: totrans-1601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1602
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你首先创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来完成此操作。这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1603
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1604
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再次尝试。你应该看到类似如下的输出：
- en: '[PRE176]'
  id: totrans-1605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1606
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出的结果。接下来，我们来集中处理日期输出的问题。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1607
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1608
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期与从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前选择的日期。对于birthdatePicker来说，这是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1609
  prefs: []
  type: TYPE_NORMAL
  zh: 向saveTapped(_:)方法添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1610
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE177]'
  id: totrans-1611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1612
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE178]'
  id: totrans-1613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1614
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经拥有了firstName、lastName和birthdate——这三项数据是创建生日所需的！你会注意到调试控制台中显示的日期格式很奇怪，还包含了时间和+0000的时区偏移。现在不必太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1615
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1616
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1617
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后将以下几行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1618
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE179]'
  id: totrans-1619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1620
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate常量。创建newBirthday之后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你获取的是newBirthday实例的值。运行应用程序，输入生日，点击保存，查看会发生什么。你应该能在调试控制台中看到类似以下的输出：
- en: '[PRE180]'
  id: totrans-1621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1622
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮仅仅是创建了一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1623
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1624
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，“添加生日”屏幕应该关闭。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法叫做dismiss(animated:completion:)。这个方法就是它所描述的——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1625
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE181]'
  id: totrans-1626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1627
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画显示关闭屏幕。传入true，用户就能看到“添加生日”屏幕从屏幕上滑动消失。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的一段代码块。如果你想在视图控制器被关闭后运行某些代码，可以使用completion闭包。因为此处不需要做任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-1628
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1629
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样操作。打开*Main.storyboard*，调出添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1630
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，运行应用，点击**+**进入添加生日页面，然后点击**取消**。你应该能看到“添加生日”从屏幕上滑动并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1631
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1632
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '*Figure 10-1: Creating a new file in Xcode*'
  id: totrans-1633
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-1：在Xcode中创建新文件*'
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1634
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，如[图10-2](text00021.html#ch10fig2)所示。在这里，你需要选择要创建的文件类型，这将是一个通用的空Swift文件。在对话框的顶部选择**iOS**，然后选择**Swift文件**，接着点击**下一步**。
- en: '![](Image00223.jpg)'
  id: totrans-1635
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1636
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2：选择* ***Swift文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1637
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*，然后点击**创建**。你应该能在项目导航器中的*BirthdayTracker*文件夹中看到*Birthday.swift*。点击它，你应该会看到一个空的*Birthday.swift*文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1638
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1639
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1640
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode已经自动写入了一些版权信息注释。紧随“Created by”后的名字来自你计算机中的通讯录应用中的联系人卡片。在版权年份之后，你应该看到你在[第1章](text00011.html#ch01)创建第一个Xcode项目时使用的组织名称。每次在Xcode中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1641
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了*Birthday.swift*文件，可以创建Birthday类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1642
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1643
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，而birthdate将是一个内置于Swift中的特殊类，名为Date，专门用来处理日期和时间。我们将使用Date类的功能来提醒用户生日。将以下内容输入到*Birthday.swift*中的import
    Foundation语句下。
- en: '![](Image00225.jpg)'
  id: totrans-1644
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1645
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE182]'
  id: totrans-1646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1647
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊看到新的日期数据类型。日期的声明方式与其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1648
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你向Birthday类添加了一个初始化器，它接受firstName、lastName和birthdate作为输入参数。然后，使用self属性，将它们设置为类的属性➌。这将允许你将姓名和日期传递给Birthday类，以存储生日。
- en: '**NOTE**'
  id: totrans-1649
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1650
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1651
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1652
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个Birthday类，用来保存朋友的姓名和生日，并且你在[第9章](text00020.html#ch09)的故事板中设置了输入字段。但Birthday类和输入字段尚未连接，因此用户的输入不会作为生日存储。现在是时候编写代码让界面能够添加生日了。为此，你将创建一个新的AddBirthdayViewController类，用来管理故事板中“添加生日”场景中的输入字段。（记住，一个视图由视图控制器管理，这就是你接下来要做的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1654
  prefs: []
  type: TYPE_NORMAL
  zh: 当你制作一个应用并选择一个单视图应用模板时，Xcode会自动创建一个名为*ViewController.swift*的文件，其中包含一个ViewController类，负责用代码表示和控制一个视图。故事板中的视图控制器由这个ViewController类管理，我们将其重命名为AddBirthdayViewController，以便类名更好地描述它将要执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1655
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件*ViewController.swift*的名称，选择它并点击项目导航器中的文件名，以便高亮显示（参见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1656
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以通过修改文件中的这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-1657
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1658
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名为* ViewController.swift'
- en: '[PRE183]'
  id: totrans-1659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: 'to the line:'
  id: totrans-1660
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE184]'
  id: totrans-1661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1662
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法didReceiveMemoryWarning()，所以你可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1663
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE185]'
  id: totrans-1664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1665
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个内建的类，带有用于管理当你运行应用时在屏幕上显示的视图的内建方法。AddBirthdayViewController是UIViewController的一个*子类*，它让我们通过实现UIViewController的一些内建方法来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1666
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个有用的内建回调方法，当视图控制器创建并显示在屏幕上或从屏幕上消失时会被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1667
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后立即被调用，但在其视图显示在屏幕上之前调用。这是进行视图初始设置的一个好地方，你只需要做一次设置。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1668
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在viewDidLoad()之后、视图控制器的视图每次出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1669
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法类似于viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1670
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1671
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift期望任何继承自UIViewController的类都使用这个方法，所以当你创建UIViewController的子类时，它会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1672
  prefs: []
  type: TYPE_NORMAL
  zh: Swift没有为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入，自动完成功能会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1673
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只在视图控制器首次创建时调用一次，但viewWillAppear(_:)每次视图控制器的视图即将显示在屏幕上时都会被调用。因此，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载了。如果你希望每次视图出现时都刷新新的信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1674
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大生日](text00021.html#ch10lev2sec6)”（[第149页](text00021.html#page_149)）中，我们将在AddBirthdayViewController中重写viewDidLoad()方法。然而，现在我们可以先不管这些方法，直接将我们的代码连接到在[第9章](text00020.html#ch09)中设置的输入项。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1675
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1676
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含一个“名字”文本框、一个“姓氏”文本框和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量分配给与界面元素通过IBOutlets连接的输入控件来实现。请将以下三个属性添加到AddBirthdayViewController类的viewDidLoad()方法之前（灰色的代码行表示一些现有的代码，帮助你放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1677
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE186]'
  id: totrans-1678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1679
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于在属性前面，这样这些属性就能在故事板中连接起来。IB代表*界面构建器*，它是Xcode中我们进行故事板操作的部分。当你在属性前加上@IBOutlet关键字时，旁边的边距中会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈未填充时，表示该属性还没有连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1680
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1681
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：具有 IBOutlet 属性的 AddBirthdayViewController 用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1682
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋，它是一个隐式解包的可选值，因为在视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载，IBOutlet 会被赋予它们在 storyboard 中连接到的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1683
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1684
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1685
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 storyboard 中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **添加生日场景**，然后在右侧面板中打开身份检查器。你应该能看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-1686
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1687
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1688
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本框和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，CONTROL-点击 **添加生日**，位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1689
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以松开（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1690
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1691
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1692
  prefs: []
  type: TYPE_NORMAL
  zh: 你会知道连接是否成功，如果你看到 Birthdate Picker 列在 birthdatePicker 旁边的连接框中，并且连接圆圈已填充（参见 [图
    10-8](text00021.html#ch10fig8)）。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建该属性时为它指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1693
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1694
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1695
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 的圆圈到 First Name 标签下方的文本框来连接 firstNameTextField。最后，将
    lastNameTextField 连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1696
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，你已经完成了 storyboard 的工作。现在让我们回到 *AddBirthdayViewController.swift* 中，用代码设置一个最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1697
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1698
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期不可能是未来的日期，所以让我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这项设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论过
    viewDidLoad() 方法，位于 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以找到 AddBirthdayViewController
    中的这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1699
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE187]'
  id: totrans-1700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1701
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，所以我们需要使用 override 关键字来重写它，代码如下：override
    func viewDidLoad()。请注意，保留方法中的 super.viewDidLoad() 这一行非常重要。当你创建一个子类，如 AddBirthdayViewController，并重写原始父类的方法时，你需要确保调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1702
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个表示当前日期和时间的新日期。现在试着运行应用，应该无法选择任何未来的日期了！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1703
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，你需要写一些代码，以便能够通过你在 [第 9 章](text00020.html#ch09) 中创建的按钮，保存生日并取消添加生日。 '
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1704
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1705
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，然后保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1706
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1707
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来创建一个 saveTapped(_:) 方法，每当用户点击保存按钮时，它就会被调用。在 AddBirthdayViewController
    的 viewDidLoad() 方法后面添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1708
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE188]'
  id: totrans-1709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1710
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时会运行。当你编写IBAction方法时，应该始终包括一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以根据需要命名该参数。在这个例子中，我们希望在用户点击保存时调用saveTapped(_:)方法，这时save是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem
    ➌。在➍处的print(_:)方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1711
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击"Add
    a Birthday"行以打开连接对话框。在连接对话框的底部，有一个名为“接收到的动作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到"Add
    a Birthday"视图控制器中的保存按钮，以建立连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1712
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1713
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框的底部，位于接收到的动作下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1714
  prefs: []
  type: TYPE_NORMAL
  zh: 试着再次运行你的应用。当你点击保存按钮时，消息"The save button was tapped."应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1715
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1716
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为saveTapped(_:)方法添加代码，以便在用户输入姓名后，从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1717
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个名为text的可选String属性。这个text属性的值是用户输入的内容，所以你可以使用它在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1718
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE189]'
  id: totrans-1719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1720
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值），或者为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并操作符(??)。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1721
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName执行相同的操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1722
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再次尝试。你应该会看到类似这样的输出：
- en: '[PRE190]'
  id: totrans-1723
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1724
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在你的应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1725
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1726
  prefs: []
  type: TYPE_NORMAL
  zh: 从`birthdatePicker`获取日期和从`firstNameTextField`或`lastNameTextField`中获取文本一样简单。`UIDatePicker`类有一个`date`属性，它表示当前显示在选择器中的日期。对于`birthdatePicker`来说，这就是`birthdatePicker.date`。当用户更改`UIDatePicker`时，`date`属性也会改变，所以你可以使用`birthdayPicker.date`来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1727
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的`saveTapped(_:)`方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1728
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE191]'
  id: totrans-1729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1730
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE192]'
  id: totrans-1731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1732
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了`firstName`、`lastName`和`birthdate`——这三项数据是创建`Birthday`所需要的！你会注意到调试控制台中显示的日期格式很奇怪，其中还包括时间和+0000的时区偏移。暂时不必太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不带时间显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1733
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1734
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入，你可以使用这些信息通过`Birthday`类的初始化方法来创建一个`Birthday`实例。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1735
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用测试`newBirthday`实例的打印语句来替换它们。然后，将以下几行代码添加到`saveTapped(_:)`方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1736
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE193]'
  id: totrans-1737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1738
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用`Birthday`类的初始化方法创建了一个`newBirthday`实例，并传入了`firstName`、`lastName`和`birthdate`的常量。创建了`newBirthday`之后，在➋处，你通过点语法将它的属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从`newBirthday`实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE194]'
  id: totrans-1739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1740
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个`Birthday`。你将在[第11章](text00022.html#ch11)中学习如何在`Birthdays`视图控制器中显示这个`Birthday`。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1742
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加一个`Birthday`，因此“添加生日”屏幕应该消失。让我们通过向类中添加一个`cancelTapped(_:)`方法来实现这一行为，这个方法将调用一个内置的`UIViewController`方法，名为`dismiss(animated:completion:)`。这个方法正如其名所示——它会关闭当前显示的视图控制器。将以下方法添加到你的`AddBirthdayViewController`类中的`saveTapped(_:)`方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1743
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE195]'
  id: totrans-1744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1745
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画显示关闭的屏幕。传入 true 以便用户看到“添加生日”界面从屏幕上滑下来。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是可以传递给函数的代码块。如果你希望在视图控制器消失后运行某些代码，可以使用 completion 闭包。因为你在这里不需要任何操作，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-1746
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1747
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样，按相同的方式进行操作。打开
    *Main.storyboard*，然后调出添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1748
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日页面，然后点击 **Cancel** 。你应该能看到“添加生日”界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1749
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1750
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将书写的代码连接到应用程序的视觉界面。你还学习了如何使用输入文本框和日期选择器来创建包含 firstName、lastName 和
    birthdate 属性的 Birthday 对象。现在你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: This brings up a dialog like the one in [Figure 10-2](text00021.html#ch10fig2)
    . Here you’re asked to select the kind of file you want to create, which is a
    generic, empty Swift file. Select **iOS** at the top of the dialog, select **Swift
    File** , and then click **Next** .
  id: totrans-1751
  prefs: []
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，类似于[图10-2](text00021.html#ch10fig2)所示。在此对话框中，你需要选择你要创建的文件类型，这是一个通用的空
    Swift 文件。在对话框顶部选择 **iOS**，然后选择 **Swift File**，最后点击 **Next**。
- en: '![](Image00223.jpg)'
  id: totrans-1752
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1753
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2：选择* ***Swift File*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1754
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为 *Birthday* 并点击 **Create** 。你应该能在项目导航器的 *BirthdayTracker* 文件夹中看到 *Birthday.swift*
    文件。点击它，你应该能看到一个空的 *Birthday.swift* 文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1755
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1756
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1757
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode 已经自动写入了一些版权信息，作为代码注释。紧跟在“Created by”之后的名字是从你电脑的联系人应用中获取的。如果是版权年份，你应该能看到你在[第1章](text00011.html#ch01)创建第一个
    Xcode 项目时所使用的组织名称。每次你在 Xcode 中创建新文件时，都会自动包含这个注释头。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1758
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1759
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 Birthday 类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1760
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将包含三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 的类型应为
    String，但 birthdate 将是一个内建于 Swift 中的特殊类，名为 Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户关于生日的事项。将以下内容输入到
    *Birthday.swift* 文件中，在 import Foundation 语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-1761
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1762
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE196]'
  id: totrans-1763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1764
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式与其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1765
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化器，它接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性将这些值设置为类的属性 ➌ 。这样你就可以将姓名和日期传递给 Birthday 类，以便存储生日。
- en: '**NOTE**'
  id: totrans-1766
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1767
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步构建每个项目的代码文件。最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**程序用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1769
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个可以保存朋友姓名和生日的 Birthday 类，并且你已经在 [第9章](text00020.html#ch09) 中设置了故事板中的输入字段。但
    Birthday 类和输入字段尚未连接，因此用户的输入并未以 Birthday 形式存储。现在是时候编写代码，使界面能够添加生日了。为此，你需要创建一个新的
    AddBirthdayViewController 类来管理故事板中的 Add a Birthday 场景中的输入字段。（记住，一个视图由视图控制器控制，这正是你接下来要创建的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1770
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1771
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，该类用代码表示并控制视图。故事板中的视图控制器由此 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能准确描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1772
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改 *ViewController.swift* 文件的名称，选择它并点击项目导航器中的文件名使其高亮（参见 [图10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1773
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过更改文件中的以下行来完成此操作：
- en: '![](Image00226.jpg)'
  id: totrans-1774
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1775
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改* ViewController.swift *文件名*'
- en: '[PRE197]'
  id: totrans-1776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'to the line:'
  id: totrans-1777
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE198]'
  id: totrans-1778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1779
  prefs: []
  type: TYPE_NORMAL
  zh: 你不再需要内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1780
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE199]'
  id: totrans-1781
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1782
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内置方法的类，用于管理当你运行应用时在屏幕上出现的视图。AddBirthdayViewController 是
    UIViewController 的一个*子类*，它让我们通过实现自己的版本来控制 storyboard 中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1783
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，这些方法会在视图控制器创建并出现在屏幕上或从屏幕上消失时调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1784
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建完成后但视图未显示在屏幕上时调用。这里是进行视图初始设置的好地方，适合只需要执行一次的操作。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1785
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且每次视图控制器的视图即将出现在屏幕上时都会调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1786
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1787
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1788
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写任何这些方法。第一个方法 viewDidLoad() 非常有用。Swift 希望任何继承 UIViewController
    的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动在模板中添加 viewDidLoad() 的占位符代码。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1789
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中之一，可以开始输入，自动补全会填写详细内容。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1790
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会调用一次——当视图控制器第一次创建时——viewWillAppear(_:) 每次视图控制器的视图即将出现在屏幕上时都会调用。所以，如果在视图控制器的屏幕上放置另一个屏幕并将其移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，而 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新新的信息，可以重写 viewWillAppear(_:)
    方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1791
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12) 中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在 “[设置最大生日](text00021.html#ch10lev2sec6)”
    的[第149页](text00021.html#page_149)，我们将重写 AddBirthdayViewController 中的 viewDidLoad()
    方法。但现在，我们可以暂时保持这些方法不变，并将我们的代码连接到[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1792
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1793
  prefs: []
  type: TYPE_NORMAL
  zh: 在 storyboard 中，我们的“添加生日”视图控制器有一个“名字”文本框、一个“姓氏”文本框和一个“生日”日期选择器。要使用这些输入控件，我们需要在代码中引用它们，方法是为这些与屏幕元素连接的控件分配变量。将以下三个属性添加到
    AddBirthdayViewController 类的顶部，在 viewDidLoad() 方法之前（灰色行表示一些现有的代码，用于定位）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1794
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE200]'
  id: totrans-1795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1796
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在 storyboard 中连接的属性前面。IB代表*界面构建器*，它是 Xcode 中我们处理
    storyboard 的部分。当你在属性前加上 @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到
    storyboard 中的元素。当圆圈未填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1797
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1798
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1799
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋ ，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载，IBOutlet 就会赋值为它们在 storyboard 中所连接的内容。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1800
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1801
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了 AddBirthdayViewController 及其输入控件的属性，是时候连接“名字”和“姓氏”文本框以及“生日”日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1802
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 storyboard 中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*，接着在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该会看到顶部有一个“自定义类”部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-1803
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1804
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1805
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本框和日期选择器。在左侧大纲视图中，点击“添加生日场景”旁边的三角形，展开该场景中项目的菜单。然后，CONTROL
    -点击**添加生日**，在黄色视图控制器图标旁边打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1806
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象被蓝色高亮时，你可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1807
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1808
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *插槽*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1809
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充（见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将
    birthdatePicker 插槽连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时已经指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1810
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1811
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *插槽已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1812
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，将其从圆圈拖动到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1813
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。接下来，让我们回到 *AddBirthdayViewController.swift* 中的代码，设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1814
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1815
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期是在未来，那显然是不合理的，所以我们要写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 `viewDidLoad()` 方法来完成这种设置。在[《创建添加生日视图控制器》](text00021.html#ch10lev2sec3) 中我们已经讲过了
    `viewDidLoad()` 方法（见[第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，所以找到
    AddBirthdayViewController 中的这个方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1816
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE201]'
  id: totrans-1817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1818
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：`override
    func viewDidLoad()`。请注意，重要的是在方法中保留 `super.viewDidLoad()` 这一行。当你创建一个子类，例如 AddBirthdayViewController，并重写原始父类的方法时，你需要确保也调用父类中的该方法。Apple
    可能在 UIViewController 的 `viewDidLoad()` 中有一些我们不知道的特殊代码，因此不调用该父类方法可能会导致意外错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1819
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的最大日期，只需在 ➊ 位置输入 `birthdatePicker.maximumDate = Date()`。Date()
    方法会创建一个新的日期，表示当前的日期和时间。现在试着运行一下应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1820
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第 9 章](text00020.html#ch09)中创建的按钮，从此视图控制器中保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1821
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1822
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1823
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1824
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从创建一个saveTapped(_:)方法开始，每当用户点击保存按钮时，这个方法都会被调用。在viewDidLoad()方法之后，向AddBirthdayViewController中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1825
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE202]'
  id: totrans-1826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1827
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应该运行的代码。在这里，我们将添加一个函数，它会在用户点击保存按钮时运行。编写IBAction方法时，通常应该包括一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你可以根据需要为此参数起任何名字。在这里，我们希望每当用户点击保存按钮时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem
    ➌。在➍处的print(_:)方法有助于我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1828
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件中。按住CONTROL键并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“接收到的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动从saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1829
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1830
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的接收到的操作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1831
  prefs: []
  type: TYPE_NORMAL
  zh: 试着再次运行你的应用程序。当你点击保存按钮时，调试控制台应显示消息“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1832
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1833
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法中添加代码，当用户输入姓名后，可以从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1834
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，名为text。这个text属性的值是用户输入到文本框中的内容，因此你可以使用它在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1835
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE203]'
  id: totrans-1836
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1837
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在，即用户输入了值），否则设置为空字符串""。你可以使用nil合并运算符(??)，如你在[第5章](text00015.html#ch05)中学到的那样。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1838
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同操作。在获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1839
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入一个名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE204]'
  id: totrans-1840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1841
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以将名字输入到应用中，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1842
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1843
  prefs: []
  type: TYPE_NORMAL
  zh: 从`birthdatePicker`获取日期和从`firstNameTextField`或`lastNameTextField`获取文本一样简单。UIDatePicker类有一个`date`属性，表示当前由选择器显示的日期。对于`birthdatePicker`来说，这就是`birthdatePicker.date`。当用户更改UIDatePicker时，`date`属性也会发生变化，因此你可以使用`birthdayPicker.date`来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1844
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到`saveTapped(_:)`方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1845
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE205]'
  id: totrans-1846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1847
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE206]'
  id: totrans-1848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1849
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了`firstName`、`lastName`和`birthdate` —— 这三项数据是我们创建生日所需的！你会注意到在调试控制台中显示的日期格式有点奇怪，包含了时间和+0000作为时区偏移。现在先不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不带时间显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1850
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1851
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入，你可以利用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1852
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从`saveTapped(_:)`方法中删除打印语句，因为我们将用测试`newBirthday`实例的打印语句来替代它们。然后将以下几行代码添加到`saveTapped(_:)`方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1853
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE207]'
  id: totrans-1854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1855
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个新的`newBirthday`实例，并传入了`firstName`、`lastName`和`birthdate`的常量。创建了`newBirthday`后，在➋处，你使用点符号将它的属性输出到调试控制台。打印的输出将和之前的打印语句一样，不过这次你获取的是`newBirthday`实例的值。运行应用，输入一个生日，然后点击保存，看看会发生什么。你应该会看到类似以下的调试输出：
- en: '[PRE208]'
  id: totrans-1856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1857
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1858
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1859
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加cancelTapped(_:)方法来实现这一行为，该方法会调用一个内置的UIViewController方法，名为dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1860
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE209]'
  id: totrans-1861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1862
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于为关闭界面添加动画效果。传入true，用户将看到添加生日界面从屏幕上滑下，效果就像一个专业应用一样！第二个参数是一个可选闭包，名为completion。*闭包*是可以传递给函数的一段代码块。如果你想在视图控制器被关闭后执行某些操作，可以使用completion闭包。由于此处不需要任何操作，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-1863
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1864
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以像将saveTapped(_:)方法连接到保存按钮一样操作。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1865
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击**+**进入添加生日界面，再点击**取消**。你应该会看到添加生日界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1867
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName 和
    birthdate 属性的生日对象。目前你可以保存生日数据，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表格视图控制器中显示你的生日列表。
- en: '![](Image00223.jpg)'
  id: totrans-1868
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00223.jpg)'
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1869
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-2: 选择* ***Swift 文件*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1870
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**创建**。你应该会在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*文件。点击它，你应该会看到一个空的*Birthday.swift*文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1871
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1872
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3: * Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1873
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode自动在代码注释中写入了一些版权信息。“Created by”后的名字来自你计算机联系人应用中的联系人卡片。在版权年份之后，你应该看到你在[第1章](text00011.html#ch01)创建第一个Xcode项目时使用的组织名称。每次你在Xcode中创建新文件时，都会自动包含这个注释头。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1874
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，可以创建 Birthday 类来存储你的生日数据。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1875
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写 BIRTHDAY 类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1876
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，而 birthdate 将是一个内建于 Swift 中的特殊类，叫做 Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。请在
    import Foundation 语句下输入以下内容到 *Birthday.swift* 文件中。
- en: '![](Image00225.jpg)'
  id: totrans-1877
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1878
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE210]'
  id: totrans-1879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1880
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 处看到新的 Date 数据类型。Date 的声明方式与其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1881
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化器，它接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们设置为类的属性 ➌。这将允许你将姓名和日期传递给 Birthday 类，以存储生日数据。
- en: '**NOTE**'
  id: totrans-1882
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1883
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将按步骤逐步构建每个项目的代码文件。最终版本可从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *下载。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1884
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-1885
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以存储朋友姓名和生日日期的 Birthday 类，并且在 [第 9 章](text00020.html#ch09) 中设置了输入字段。然而，Birthday
    类和输入字段尚未连接，因此用户输入的内容没有作为生日信息存储。现在是时候编写代码，让界面可以添加生日了。为此，你将创建一个新的 AddBirthdayViewController
    类来管理故事板中“添加生日”场景中的输入字段。（记住，视图由视图控制器管理，这就是你接下来要做的事情。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-1886
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-1887
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择“单视图应用程序”模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个表示和控制视图的
    ViewController 类。故事板中的视图由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能够描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-1888
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件 *ViewController.swift* 的名称，请选择它并点击项目导航器中其名称部分，使其高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-1889
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过更改文件中的以下行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-1890
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-1891
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改 *ViewController.swift* 文件名*'
- en: '[PRE211]'
  id: totrans-1892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: 'to the line:'
  id: totrans-1893
  prefs: []
  type: TYPE_NORMAL
  zh: 到这行：
- en: '[PRE212]'
  id: totrans-1894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-1895
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内建的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1896
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE213]'
  id: totrans-1897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-1898
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建类，提供了用于管理应用程序运行时出现在屏幕上的视图的方法。AddBirthdayViewController
    是UIViewController的*子类*，它通过实现UIViewController的一些内建方法的自定义版本，让我们能够在故事板中控制视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-1899
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个非常有用的内建回调方法，当视图控制器被创建并出现在屏幕上或从屏幕上消失时，会调用这些回调方法。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-1900
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后但在其视图出现在屏幕上之前被调用。这是进行任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-1901
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 此方法在viewDidLoad()之后、每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-1902
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 此方法类似于viewWillAppear(_:)，但它在视图控制器的视图出现在屏幕上后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-1903
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 当视图控制器的视图即将离开屏幕时，系统会调用此方法。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-1904
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的UIViewController子类中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift期望所有子类化UIViewController的类都使用此方法，因此它会在你子类化UIViewController时，自动为viewDidLoad()方法添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-1905
  prefs: []
  type: TYPE_NORMAL
  zh: Swift没有为其他三个方法提供占位符代码。如果你决定使用其中的某个方法，你可以开始输入，它会自动完成并填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-1906
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只会被调用一次——即视图控制器第一次创建时——但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕并随后移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)将再次被调用，但viewDidLoad()不会被调用，因为视图控制器已经存在且被其他屏幕覆盖。如果你希望每次视图出现时都能刷新新信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-1907
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”（位于[第149页](text00021.html#page_149)）中，我们将重写AddBirthdayViewController中的viewDidLoad()方法。然而，目前我们可以先不管这些方法，而是将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-1908
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-1909
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本字段，一个“姓氏”文本字段，以及一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为与屏幕元素连接的控件分配变量，使用IBOutlet连接。将以下三个属性添加到AddBirthdayViewController类的viewDidLoad()方法之前（灰色的行表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1910
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE214]'
  id: totrans-1911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-1912
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB代表*界面构建器*，它是Xcode中我们编辑故事板的部分。当你在一个属性前放上@IBOutlet关键字时，属性旁边的边缘会出现一个小圆圈，如[图
    10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-1913
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-1914
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *具有用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-1915
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet将被赋值为它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-1916
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-1917
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及其输入控件的属性，是时候将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-1918
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，以便可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。您应该会看到顶部的“自定义类”部分。将类更改为AddBirthdayViewController，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-1919
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-1920
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-1921
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，CONTROL-点击**添加生日**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-1922
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到birthdatePicker、firstNameTextField和lastNameTextField。在birthdatePicker旁边点击空圆圈并拖动到故事板中的日期选择器。日期选择器对象变蓝时，您可以放开鼠标（请参见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-1923
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-1924
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-1925
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到birthdatePicker旁边列出了Birthdate Picker，并且连接圆圈已填充（见[图 10-8](text00021.html#ch10fig8)），那么你就知道连接成功了。你只能将birthdatePicker
    outlet连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController时，给它分配了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-1926
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-1927
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-1928
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将firstNameTextField连接到First Name标签下方的文本字段。最后，将lastNameTextField连接到Last
    Name标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-1929
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时已经完成了故事板的工作。现在让我们回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-1930
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-1931
  prefs: []
  type: TYPE_NORMAL
  zh: 人的出生日期不可能是在未来，所以让我们写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来完成这种设置。我们在[《创建添加生日视图控制器》](text00021.html#ch10lev2sec3)（第145页）中讨论过viewDidLoad()方法。它会自动添加到我们的视图控制器中，所以在AddBirthdayViewController中找到这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1932
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE215]'
  id: totrans-1933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-1934
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字覆盖它，代码如下：override
    func viewDidLoad()。请注意，保持方法中的super.viewDidLoad()这一行非常重要。当你创建一个子类，比如AddBirthdayViewController，并且覆盖原始父类的方法时，你需要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()中有一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-1935
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需要在➊位置输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，即当前的日期和时间。现在尝试运行应用，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-1936
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便在这个视图控制器中使用你在[第9章](text00020.html#ch09)中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-1937
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-1938
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-1939
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-1940
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先编写一个 saveTapped(_:) 方法，每次用户点击保存按钮时都会调用。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1941
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE216]'
  id: totrans-1942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-1943
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应运行的代码。在本例中，我们将添加一个函数，当用户点击保存按钮时该函数会运行。当你编写一个
    IBAction 方法时，应始终包含一个参数，该参数表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但你可以随意命名这个参数。在本例中，我们希望在用户点击保存按钮时调用
    saveTapped(_:) 方法，该按钮是一个 UIBarButtonItem 。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-1944
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。回到你的 *Main.storyboard*
    文件中。CONTROL-点击“添加生日”行，打开连接对话框。在连接对话框的底部有一个叫做“接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并从
    saveTapped: 旁边的圆圈拖动到 Add a Birthday 视图控制器中的保存按钮以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-1945
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-1946
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的“接收的操作”区域。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-1947
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，"The save button was tapped." 这条消息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-1948
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-1949
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，当用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-1950
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，叫做 text 。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用以下代码来获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1951
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE217]'
  id: totrans-1952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-1953
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果它存在，也就是用户输入了一个值），如果没有输入则设置为空字符串
    "" 。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并操作符（??）来实现这一点。这里我们使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-1954
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 lastName 在➋处做同样的操作。在获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-1955
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序查看会发生什么。尝试在不输入任何文本的情况下点击保存按钮，然后输入名字和姓氏后再试一次。你应该看到类似于以下的输出：
- en: '[PRE218]'
  id: totrans-1956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-1957
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用程序中输入名字，并看到计算机将其输出到调试控制台。接下来，让我们关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-1958
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-1959
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前选择的日期。对于 birthdatePicker，这是 birthdatePicker.date。当用户更改 UIDatePicker
    时，date 属性也会改变，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-1960
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1961
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE219]'
  id: totrans-1962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-1963
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE220]'
  id: totrans-1964
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1965
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了 firstName、lastName 和 birthdate ——创建 Birthday 所需的三项数据！你会注意到，在调试控制台中显示的日期格式很奇怪，还包括了时间和
    +0000 的时区偏移。目前不用太担心这个，我们将在[第 11 章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-1966
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-1967
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-1968
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后将以下几行代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1969
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE221]'
  id: totrans-1970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-1971
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个新的 Birthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出将与早前的 print 语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入生日信息并点击保存，查看会发生什么。你应该在调试控制台中看到类似如下的输出：
- en: '[PRE222]'
  id: totrans-1972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-1973
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday。你将在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-1974
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-1975
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，“添加生日”界面应该消失。我们通过为类添加一个cancelTapped(_:)方法来实现这个行为，该方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法正如它所说的那样，关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-1976
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE223]'
  id: totrans-1977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-1978
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于动画化关闭界面。传入true，用户就可以看到“添加生日”界面从屏幕上滑下来，效果看起来就像一个专业应用一样！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的一段代码。如果你想在视图控制器被关闭后运行某些代码，可以使用这个completion闭包。因为这里不需要任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-1979
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-1980
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到“取消”按钮。你可以像将saveTapped(_:)方法连接到“保存”按钮一样进行操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-1981
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击**+**进入添加生日界面，然后点击**Cancel**。你应该看到“添加生日”界面滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-1982
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-1983
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将书写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '*Figure 10-2: Choose* ***Swift File*** *for the template.*'
  id: totrans-1984
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-2：选择* ***Swift File*** *作为模板。*'
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-1985
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**Create**。你应该可以在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*，点击它，你将看到一个空的*Birthday.swift*文件，如[图
    10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-1986
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-1987
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-1988
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件顶部，Xcode自动写入了一些版权信息，作为代码注释。紧跟在“Created by”之后的名字来自你电脑联系人应用中的联系卡。在版权年份之后，你应该能看到你在[第1章](text00011.html#ch01)中创建第一个Xcode项目时使用的组织名称。每次你在Xcode中创建新文件时，这个注释头都会自动包含进去。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-1989
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-1990
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-1991
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，而 birthdate 将是 Swift 内建的一个特殊类 Date，专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。将以下内容输入到
    *Birthday.swift* 中，放在 import Foundation 语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-1992
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-1993
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE224]'
  id: totrans-1994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-1995
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式和其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-1996
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将这些值赋给类的属性 ➌。这样，你就可以将名字和日期传递给 Birthday 类，存储一个生日。
- en: '**NOTE**'
  id: totrans-1997
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-1998
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *下载。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-1999
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2000
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你有了一个可以存储朋友名字和生日的 Birthday 类，并且在 [第 9 章](text00020.html#ch09) 中设置了输入字段。但是，Birthday
    类和输入字段尚未连接，因此用户的输入没有被存储为生日。是时候编写代码，使界面能够添加生日了。为此，你将创建一个新的 AddBirthdayViewController
    类来管理 storyboard 中“添加生日”场景中的输入字段。（记住，视图由视图控制器控制，这就是你接下来要做的事情。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2001
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2002
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择 Single View Application 模板时，Xcode 会自动创建一个名为 *ViewController.swift*
    的文件，其中包含一个 ViewController 类，用于通过代码表示和控制视图。storyboard 中的视图由这个 ViewController 类进行管理，我们将其重命名为
    AddBirthdayViewController，以便类名能描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2003
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择它并在项目导航器中点击其名称，直到它被高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2004
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过更改文件中的这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-2005
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2006
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名为* ViewController.swift'
- en: '[PRE225]'
  id: totrans-2007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: 'to the line:'
  id: totrans-2008
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE226]'
  id: totrans-2009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2010
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该像这样：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2011
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE227]'
  id: totrans-2012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2013
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个自带方法的类，用于管理在运行应用程序时显示在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的一个*子类*，它让我们通过实现 UIViewController 一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2014
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，当视图控制器创建并显示在屏幕上或从屏幕上消失时，它们会被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2015
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建之后，但在视图显示到屏幕上之前调用。这是进行任何初始设置的好地方，通常这些设置只需要做一次。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2016
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2017
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，唯一的区别是它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2018
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2019
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何子类化
    UIViewController 的人都使用这个方法，因此当你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2020
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并没有为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，它会自动完成细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2021
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会调用一次——当视图控制器首次创建时——但是 viewWillAppear(_:) 每次视图控制器的视图即将出现在屏幕上时都会被调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，视图控制器的屏幕重新出现时，viewWillAppear(_:)
    会再次被调用，而 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新视图中的信息，你可以重写
    viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2022
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”中，[第149页](text00021.html#page_149)我们将会在
    AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以先不理会这些方法，直接将我们的代码连接到在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2023
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接代码到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2024
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器包含了 First Name 文本框、Last Name 文本框和 Birthdate 日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为连接到屏幕元素的输入控件分配变量，这些控件通过
    IBOutlets 与元素连接。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前，添加以下三个属性（灰色线条表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2025
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE228]'
  id: totrans-2026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2027
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，这是 Xcode 中我们处理故事板的部分。当你将
    @IBOutlet 关键字放在属性前面时，属性旁边会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈没有被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2028
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2029
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2030
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包的可选值，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2031
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2032
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2033
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧面板中打开身份检查器。你应该能看到顶部的
    Custom Class 部分。将类更改为 AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6)
    所示。
- en: '![](Image00228.jpg)'
  id: totrans-2034
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2035
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2036
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本框和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，CONTROL -点击 **Add a Birthday** 旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2037
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Outlets 下你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击旁边的空圆圈并拖动到故事板中的日期选择器，来连接
    birthdatePicker。当日期选择器对象被高亮显示为蓝色时，可以松开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2038
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2039
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *接口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2040
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到连接框中birthdatePicker旁边列出了Birthdate Picker，并且连接圆圈已填充（参见[图10-8](text00021.html#ch10fig8)），那么就知道连接成功了。你只能将birthdatePicker接口连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController时，给它设置的就是这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2041
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2042
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *接口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2043
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动firstNameTextField的圆圈，将其连接到First Name标签下方的文本框。最后，将lastNameTextField连接到Last
    Name标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2044
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的部分。现在回到*AddBirthdayViewController.swift*中，通过代码设置一个最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2045
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2046
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有未来的出生日期显然没有意义，所以我们写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论了viewDidLoad()方法，在[第145页](text00021.html#page_145)中提到过。它会自动添加到我们的视图控制器中，因此请在AddBirthdayViewController中找到这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2047
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE229]'
  id: totrans-2048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2049
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，因此我们需要使用override关键字重写它，如：`override func
    viewDidLoad()`。注意，方法中保留`super.viewDidLoad()`这一行非常重要。当你创建一个子类（如AddBirthdayViewController）并重写父类的方法时，你需要确保调用父类的方法。Apple可能在UIViewController的viewDidLoad()方法中运行了一些我们不知道的特殊代码，因此如果不调用这个父类方法，可能会导致不可预料的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2050
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入`birthdatePicker.maximumDate = Date()`。Date()方法会创建一个当前的日期和时间。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2051
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你能够从这个视图控制器保存生日并取消添加生日，使用的是你在[第9章](text00020.html#ch09)中制作的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2052
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2053
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2054
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2055
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 saveTapped(_:) 方法，每当用户点击保存按钮时都会调用。将以下代码添加到 AddBirthdayViewController
    中，紧接着 viewDidLoad() 方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2056
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE230]'
  id: totrans-2057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2058
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 @IBAction 是一个关键字，将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应执行的代码。在这个例子中，我们将添加一个在用户点击保存时执行的函数。当你编写一个
    IBAction 方法时，应该始终包括一个参数，用来表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋ ，但是你可以根据需要更改这个参数的名称。在这种情况下，我们希望每当用户点击保存按钮时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。 ➍ 处的 print(_:) 方法可以帮助我们在测试代码时看到保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2059
  prefs: []
  type: TYPE_NORMAL
  zh: 将 saveTapped(_:) 与保存按钮连接起来，就像将 IBOutlet 连接到故事板元素一样。回到你的 *Main.storyboard* 文件，CONTROL
    -点击“Add a Birthday”行以打开连接对话框。在连接对话框的底部，有一个名为 Received Actions 的区域，如[图 10-9](text00021.html#ch10fig9)所示。在这个区域，点击并拖动
    saveTapped:旁边的圆圈到 Add a Birthday 视图控制器中的保存按钮，将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2060
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2061
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框底部列出了 IBActions，位于 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2062
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，"The save button was tapped." 消息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2063
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2064
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入名字后，从 firstNameTextField 和 lastNameTextField
    获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2065
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，名为 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以通过它获取用户在
    saveTapped(_:) 方法中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2066
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE231]'
  id: totrans-2067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2068
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串
    ""。你可以使用 nil 合并运算符 (??) 来完成这一操作，这一点你可以在[第 5 章](text00015.html#ch05)中学到。我们使用常量而非变量，是因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2069
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。在你获取 firstName 和 lastName 的值之后，将它们打印到控制台，这样在运行你的应用时就可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2070
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了姓名后再试一次。你应该会看到类似以下的输出：
- en: '[PRE232]'
  id: totrans-2071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2072
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出的结果。接下来，让我们专注于如何获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2073
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2074
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前日期选择器显示的日期。对于 birthdatePicker 来说，它的值是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2075
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2076
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE233]'
  id: totrans-2077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2078
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE234]'
  id: totrans-2079
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2080
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，我们有了 firstName、lastName 和 birthdate ——这三项数据是我们创建一个 Birthday 所需要的！你会注意到，在调试控制台中显示的日期格式很奇怪，还包括了时间和时区偏移（+0000）。目前不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2081
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2082
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入信息，你可以使用这些信息通过 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2083
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后，将以下代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2084
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE235]'
  id: totrans-2085
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2086
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    常量。创建了 newBirthday 之后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出与之前的 print 语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE236]'
  id: totrans-2087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2088
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅仅会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2089
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2090
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，表示他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个名为cancelTapped(_:)的方法来实现这一行为，它将调用一个内置的UIViewController方法——dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2091
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE237]'
  id: totrans-2092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2093
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于动画化关闭界面。传入true，用户将看到“添加生日”界面滑出屏幕，像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为completion。*闭包*是一段可以传递给函数的代码块。如果你想在视图控制器关闭后执行某些代码，可以使用completion闭包。由于你在这里不需要任何操作，可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-2094
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2095
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以通过与连接saveTapped(_:)方法到保存按钮的方式一样来实现这一点。前往*Main.storyboard*并打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2096
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到“添加生日”界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2097
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2098
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在你可以保存生日，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: Finally, name the file *Birthday* and click **Create** . You should see *Birthday.swift*
    listed in the *BirthdayTracker* folder of the Project navigator. Click it and
    you should see an empty *Birthday.swift* file, as shown in [Figure 10-3](text00021.html#ch10fig3)
    .
  id: totrans-2099
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件命名为*Birthday*并点击**创建**。你应该在项目导航器的*BirthdayTracker*文件夹中看到*Birthday.swift*。点击它，你应该能看到一个空的*Birthday.swift*文件，如[图10-3](text00021.html#ch10fig3)所示。
- en: '![](Image00224.jpg)'
  id: totrans-2100
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-2101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：*Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-2102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件顶部，Xcode已经自动写入了一些版权信息的代码注释。紧随“Created by”之后的名字是从你计算机的通讯录应用中的联系人卡片中提取的。在版权年份之后，你应该能看到你在[第1章](text00011.html#ch01)创建第一个Xcode项目时使用的组织名称。每次你在Xcode中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-2103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有了 *Birthday.swift* 文件，您可以创建 Birthday 类来存储您的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-2104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2105
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，但 birthdate 将是一个 Swift 中内建的特殊类 Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。将以下内容输入到
    *Birthday.swift* 文件中，位于 import Foundation 语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-2106
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2107
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE238]'
  id: totrans-2108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 ➊ 处看到新的 Date 数据类型。Date 就像其他任何变量一样被声明。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，您向 Birthday 类添加了一个初始化器，该初始化器接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性将它们设置为类属性 ➌ 。这将允许您将姓名和日期传递给 Birthday 类，以便存储生日信息。
- en: '**NOTE**'
  id: totrans-2111
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2112
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步地为项目构建每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经有了一个可以保存朋友姓名和出生日期的 Birthday 类，并且在故事板中已经设置好了输入字段，您可以在[第9章](text00020.html#ch09)中查看设置内容。但是，Birthday
    类和输入字段并未连接，因此用户的输入不会作为生日信息保存。现在是时候编写代码，使界面能够添加生日信息了。为此，您将创建一个新的 AddBirthdayViewController
    类，用于管理故事板中“添加生日”场景中的输入字段。（记住，视图由视图控制器控制，这正是您接下来要创建的内容。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2116
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个应用并选择单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，用于通过代码表示和控制视图。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能够描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2117
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选中它并在项目导航器中点击其名称以使其高亮（参见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将 ViewController 类的名称更改为 AddBirthdayViewController。您可以在文件中通过更改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-2119
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2120
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名为* ViewController.swift'
- en: '[PRE239]'
  id: totrans-2121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: 'to the line:'
  id: totrans-2122
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下行：
- en: '[PRE240]'
  id: totrans-2123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2124
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要内置的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来简化代码。现在，您的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2125
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE241]'
  id: totrans-2126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2127
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 是一个带有内建方法的类，用于管理在你运行应用时显示在屏幕上的视图。`AddBirthdayViewController`
    是 `UIViewController` 的*子类*，它允许我们通过实现一些 `UIViewController` 内建方法的自定义版本，来控制故事板中的视图控制器。'
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2128
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 类有四个有用的内建回调方法，当视图控制器被创建并且其视图出现在屏幕上或从屏幕消失时会被调用。这些回调方法是：'
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2129
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 这个方法在视图控制器创建完成后、视图显示在屏幕之前被调用。这是一个非常好的地方，可以进行一些只需要执行一次的视图初始化设置。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2130
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)` 这个方法在 `viewDidLoad()` 之后、每次视图控制器的视图出现在屏幕上之前被调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2131
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)` 这个方法与 `viewWillAppear(_:)` 类似，唯一的区别是它在视图控制器的视图显示在屏幕之后被调用。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2132
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 这个方法在视图控制器的视图即将离开屏幕时被调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2133
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 `UIViewController` 中重写这些方法中的任何一个。其中第一个方法，`viewDidLoad()`，非常有用。Swift 期望所有子类化
    `UIViewController` 的类都使用这个方法，因此当你子类化 `UIViewController` 时，它会自动在模板中添加 `viewDidLoad()`
    的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2134
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入，自动完成功能会帮你填写细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2135
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 `viewDidLoad()` 只会被调用一次——当视图控制器首次创建时——`viewWillAppear(_:)` 会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果一个屏幕覆盖在视图控制器的屏幕上，然后移除以使视图控制器的屏幕重新出现，`viewWillAppear(_:)`
    会再次被调用，但 `viewDidLoad()` 不会被再次调用，因为视图控制器已经加载并在另一个屏幕后面。如果你希望视图每次出现时都能刷新新信息，你可以重写
    `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2136
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 `viewWillAppear(_:)` 方法来刷新我们的生日列表。此外，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)一节中，[第149页](text00021.html#page_149)将会在
    `AddBirthdayViewController` 中重写 `viewDidLoad()`。然而现在，我们可以先不处理这些方法，而是将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件上。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2138
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含一个“名”文本框、一个“姓”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过将变量赋给与屏幕元素连接的IBOutlet控件来实现。在`viewDidLoad()`方法之前，在AddBirthdayViewController类的顶部添加以下三个属性（灰色的代码行表示部分现有代码，供参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2139
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE242]'
  id: totrans-2140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2141
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，它放在可以在故事板中连接的属性前面。IB代表*界面构建器*，它是Xcode中我们处理故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2142
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2143
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：带有IBOutlet属性的AddBirthdayViewController，用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2144
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋是一个隐式解包的可选值，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet就会被赋值为它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码与故事板连接起来**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了AddBirthdayViewController及其输入控件的属性，接下来就是将“名”和“姓”文本框以及“出生日期”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该会看到顶部有一个“自定义类”部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-2148
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2149
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本框和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中项目的菜单。然后，CONTROL-点击**添加生日**旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2151
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以松开（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2152
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2153
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充，那么说明连接成功（见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2155
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2156
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 的圆圈到“名字”标签下方的文本框来连接它。最后，将 lastNameTextField 连接到“姓氏”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2158
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2159
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2160
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期设定为未来的日期是不合理的，因此让我们编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这种设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中已经讨论过
    viewDidLoad() 方法，见 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以在 AddBirthdayViewController
    中找到此方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2161
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE243]'
  id: totrans-2162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2163
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字来重写它，像这样：override
    func viewDidLoad()。注意，重要的是要保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类（如 AddBirthdayViewController）并重写原始父类的方法时，你需要确保调用父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中运行了一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2164
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，你只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个表示当前日期和时间的新日期。现在尝试运行应用程序，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使得你可以从这个视图控制器中保存生日并取消添加生日，使用你在 [第 9 章](text00020.html#ch09) 中创建的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，每次用户点击“保存”按钮时都会调用。将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2170
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE244]'
  id: totrans-2171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2172
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上进行操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”时执行。编写IBAction方法时，你应始终为触发该方法的UI元素包含一个参数。通常，使用下划线来隐藏参数标签，参数名为sender
    ➋，但你可以根据需要为该参数命名。在此情况下，我们希望在用户点击保存时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem
    ➌。➊处的print(_:)方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2173
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与“保存”按钮连接就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL点击“添加生日”这一行以打开连接对话框。在连接对话框的底部有一个名为“接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的“保存”按钮以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2174
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2175
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions在连接对话框的底部的“接收的操作”部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2176
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击“保存”按钮时，调试控制台应显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2177
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，从firstNameTextField和lastNameTextField获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2179
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性的值是用户在文本框中输入的内容，因此你可以用它来在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2180
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE245]'
  id: totrans-2181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2182
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，也就是如果用户输入了值），或者设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)学到的nil合并运算符(??)来做到这一点。这里我们使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对➋处的lastName执行相同的操作。在你获取到firstName和lastName的值之后，将它们打印到控制台，以便在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2184
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，再输入名字和姓氏后再尝试一次。你应该会看到类似如下的输出：
- en: '[PRE246]'
  id: totrans-2185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2186
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入名字并看到计算机在调试控制台输出它。接下来我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2188
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前显示在选择器上的日期。对于birthdatePicker来说，这个属性就是birthdatePicker.date。当用户改变UIDatePicker时，date属性也会变化，所以你可以通过birthdayPicker.date访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2189
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2190
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE247]'
  id: totrans-2191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE248]'
  id: totrans-2193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2194
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——创建生日所需的三条数据！你会注意到调试控制台显示的日期格式很奇怪，里面还包含时间和+0000时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息，你可以使用这些信息通过Birthday类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句替代它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2198
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE249]'
  id: totrans-2199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2200
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点符号输出它的属性到调试控制台。打印的输出将与之前的print语句相同，不过这次你是从newBirthday实例中获取值。运行应用，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE250]'
  id: totrans-2201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2202
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2204
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。让我们通过向我们的类中添加 cancelTapped(_:) 方法来实现这一行为，它将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法的作用正如其名——它会关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中，在 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2205
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE251]'
  id: totrans-2206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2207
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于设置关闭屏幕时的动画效果。传入 true，用户可以看到“添加生日”屏幕滑下并消失，看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是可以传递给函数的一段代码。如果你希望在视图控制器消失后执行某些代码，可以使用 completion 闭包。由于你不需要任何操作，因此可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-2208
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样操作。在 *Main.storyboard*
    中，打开添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2210
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击 **+** 进入添加生日屏幕，再点击 **取消**。你应该看到“添加生日”屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表格视图控制器中显示你的生日列表。
- en: '![](Image00224.jpg)'
  id: totrans-2213
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00224.jpg)'
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-2214
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-3: The* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-2215
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在文件顶部，Xcode 自动写入了一些版权信息在代码注释中。紧跟在“Created by”之后的名字是从你电脑的联系人应用中的联系人卡片中提取的。在版权年份之后，你应该看到你在[第1章](text00011.html#ch01)创建第一个
    Xcode 项目时使用的组织名称。每次在 Xcode 中创建新文件时，这段注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-2216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，可以创建 Birthday 类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-2217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2218
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，而birthdate将是一个内置的特殊类——Swift中的Date类，它专门用来处理日期和时间。我们将使用Date类的功能来提醒用户生日。请在*Birthday.swift*文件中的import
    Foundation语句下输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-2219
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2220
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE252]'
  id: totrans-2221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊处看到新的Date数据类型。Date的声明与其他变量类似。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2223
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你为Birthday类添加了一个初始化器，该初始化器接受firstName、lastName和birthdate作为输入参数。然后，使用self属性将它们设置为类的属性➌。这将允许你将姓名和日期传递给Birthday类以存储生日信息。
- en: '**NOTE**'
  id: totrans-2224
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2225
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件，最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *找到。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2227
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以存储朋友姓名和生日的Birthday类，同时在Storyboard中有你在[第9章](text00020.html#ch09)中设置的输入字段。但Birthday类和输入字段尚未连接，因此用户的输入没有存储为Birthday。现在是时候编写代码，让界面能够添加生日了。为此，你将创建一个新的AddBirthdayViewController类来管理Storyboard中“添加生日”场景中的输入字段。（记住，视图由视图控制器控制，而你接下来要做的就是创建这个视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2229
  prefs: []
  type: TYPE_NORMAL
  zh: 当你制作一个应用并选择一个单视图应用模板时，Xcode会自动创建一个名为*ViewController.swift*的文件，其中包含一个ViewController类，该类用代码表示并控制一个视图。Storyboard中的视图控制器由此ViewController类管理，我们将其重命名为AddBirthdayViewController，以便类名更好地描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2230
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名*ViewController.swift*，请选择它并在项目导航器中单击文件名，使其高亮显示（参见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2231
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以通过修改文件中的这一行来完成此操作：
- en: '![](Image00226.jpg)'
  id: totrans-2232
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2233
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名* ViewController.swift'
- en: '[PRE253]'
  id: totrans-2234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'to the line:'
  id: totrans-2235
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE254]'
  id: totrans-2236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2237
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内建方法didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2238
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE255]'
  id: totrans-2239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2240
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 是一个内置类，用于管理在运行应用时出现在屏幕上的视图。`AddBirthdayViewController` 是
    `UIViewController` 的一个*子类*，它允许我们通过实现自己版本的某些 `UIViewController` 内置方法来控制故事板中的视图控制器。'
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2241
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController` 类有四个有用的内置回调方法，当视图控制器被创建并出现在屏幕上或从屏幕上消失时，这些回调方法将被调用。这些回调方法是：'
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2242
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 这个方法在视图控制器创建后，但在其视图显示在屏幕上之前被调用。这是进行视图初始化设置的好地方，通常你只需要执行一次。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2243
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)` 这个方法在 `viewDidLoad()` 之后，每次视图控制器的视图即将显示在屏幕上时被调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2244
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)` 这个方法类似于 `viewWillAppear(_:)`，不过它是在视图控制器的视图显示在屏幕后被调用。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2245
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 这个方法在视图控制器的视图即将离开屏幕时被调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 `UIViewController` 中重写这些方法中的任何一个。其中，第一个方法 `viewDidLoad()` 非常有用。Swift
    期望任何子类化 `UIViewController` 的类都使用这个方法，因此当你子类化 `UIViewController` 时，它会自动为 `viewDidLoad()`
    方法在模板中添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2247
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并不会为其他三个方法提供占位符代码。如果你决定使用其中的一个，你可以开始输入它，自动完成功能会填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2248
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 `viewDidLoad()` 只会在视图控制器首次创建时被调用一次，但 `viewWillAppear(_:)` 会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，从而让视图控制器的屏幕重新出现，`viewWillAppear(_:)`
    会再次被调用，但 `viewDidLoad()` 不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新为新信息，可以重写
    `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2249
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 `viewWillAppear(_:)` 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    [第149页](text00021.html#page_149) 中，我们将重写 `AddBirthdayViewController` 中的 `viewDidLoad()`。但是现在，我们可以先不管这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2251
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器有一个 First Name 文本框、一个 Last Name 文本框和一个 Birthdate
    日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是将变量赋给与屏幕元素连接的 IBOutlet 输入控件。将以下三个属性添加到 AddBirthdayViewController
    类的顶部，放在 viewDidLoad() 方法之前（灰色线条表示现有代码的部分，用于位置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2252
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE256]'
  id: totrans-2253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2254
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB 代表 *界面构建器*，它是 Xcode 中用于操作故事板的部分。当你在属性前面加上
    @IBOutlet 关键字时，旁边会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2255
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2256
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：AddBirthdayViewController *带有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2257
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋ ，它是一个隐式解包可选类型，因为当视图控制器首次创建时，IBOutlet
    的初始值为 nil。然而，一旦视图加载，IBOutlet 就会被赋予它们在故事板中所连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2259
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是时候将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2260
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **Add a Birthday Scene**，然后在右侧窗格中打开 Identity Inspector。你应该能在顶部看到一个
    Custom Class 部分，将类名更改为 AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-2261
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2262
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本框和日期选择器。在左侧大纲视图中点击
    Add a Birthday Scene 旁的三角形展开该场景中的项目菜单。然后，按住 CONTROL 并点击 **Add a Birthday**，这是黄色视图控制器图标旁边的文字，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2264
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Under Outlets，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器，来连接
    birthdatePicker。当日期选择器对象被高亮为蓝色时，你可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2265
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2266
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：连接日期选择器到* birthdatePicker 插座'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你会看到在连接框中，birthdatePicker 旁边会列出 Birthdate Picker，并且连接圆圈已经被填充（见[图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker 插座连接到日期选择器。如果尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在 AddBirthdayViewController 中创建属性时，我们已经为它指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2268
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2269
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *连接已成功。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2270
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个名字文本框，从其圆圈拖到“First Name”标签下方的文本框。最后，将 lastNameTextField 连接到“Last
    Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2271
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了 storyboard 的工作。接下来，让我们回到 *AddBirthdayViewController.swift* 文件，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2273
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期设为未来的日期显然没有意义，因此我们可以编写代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一章的
    [第145页](text00021.html#page_145) 中讨论了 viewDidLoad() 方法。它会自动添加到我们的视图控制器中，因此请在 AddBirthdayViewController
    中找到此方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2274
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE257]'
  id: totrans-2275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2276
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，所以我们需要使用 override 关键字来重写它，如下所示：override
    func viewDidLoad()。请注意，必须保留方法中的 super.viewDidLoad() 这一行。当你创建子类（如 AddBirthdayViewController）并重写父类的方法时，要确保调用父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2277
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的最大日期，你只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个当前日期和时间的日期对象。现在尝试运行应用。应该无法选择未来的日期了！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2278
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，这样就可以通过你在 [第9章](text00020.html#ch09) 中创建的按钮，从此视图控制器保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，然后保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个名为saveTapped(_:)的方法开始，该方法在用户点击保存按钮时被调用。将以下代码添加到AddBirthdayViewController中，位置紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2283
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE258]'
  id: totrans-2284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2285
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction位于➊处，是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定用户在该元素上执行操作时应运行的代码。在这个例子中，我们将添加一个函数，当用户点击保存时会执行。当你编写IBAction方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你可以根据需要命名该参数。在这个例子中，我们希望每当用户点击保存时，调用saveTapped(_:)方法，而保存是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。➔4处的print(_:)方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2286
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到Storyboard元素一样。返回到你的*Main.storyboard*文件中。按住CONTROL并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为Received
    Actions的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2287
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2288
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions列在连接对话框底部的Received Actions下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2289
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，应该在调试控制台中看到消息“保存按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2290
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法添加代码，在用户输入名字后从firstNameTextField和lastNameTextField中获取firstName和lastName。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2292
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性包含了用户在文本字段中输入的内容，因此你可以使用它来获取用户输入的内容，在saveTapped(_:)中使用以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2293
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE259]'
  id: totrans-2294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2295
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），否则设置为空字符串""。你可以使用nil合并运算符（??）来实现这一点，这个运算符你在[第5章](text00015.html#ch05)中已经学习过了。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。在获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2297
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本字段中不输入任何内容就点击保存按钮，然后再次尝试输入名字和姓氏后再点击保存。你应该会看到类似以下的输出：
- en: '[PRE260]'
  id: totrans-2298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2299
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以将一个名字输入到你的应用中，并在调试控制台中看到计算机输出它。接下来，让我们集中精力获取一个日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2301
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前选择器显示的日期。对于 birthdatePicker 来说，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会随之变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2302
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2303
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE261]'
  id: totrans-2304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE262]'
  id: totrans-2306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2307
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 firstName、lastName 和 birthdate ——这三项数据正是我们创建生日所需的！你会注意到调试控制台中显示的日期格式有点奇怪，里面还包括时间和
    +0000 时区偏移。现在不用太担心这个，我们将在[第 11 章](text00022.html#ch11)讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2308
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2310
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替换它们。然后将以下代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2311
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE263]'
  id: totrans-2312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2313
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊，你使用 Birthday 类的初始化器创建一个新的 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量值。创建 newBirthday 后，在 ➋，你通过点表示法将它的属性输出到调试控制台。打印的输出将与之前的 print 语句相同，只不过这次你是从
    newBirthday 实例中获取的值。运行应用，输入生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE264]'
  id: totrans-2314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2315
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2317
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用UIViewController的一个内建方法，叫做dismiss(animated:completion:)。这个方法的作用就是它的名字——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2318
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE265]'
  id: totrans-2319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2320
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于动画显示关闭界面。传入true，用户可以看到“添加生日”界面滑动退出屏幕，效果看起来就像一个专业的应用程序！第二个参数是一个可选闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后运行某些代码，可以使用completion闭包。因为你不需要在这里执行任何操作，可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-2321
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2322
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与“取消”按钮连接。你可以用与将saveTapped(_:)方法连接到“保存”按钮完全相同的方式进行操作。进入*Main.storyboard*，打开“添加生日”视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2323
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用程序，点击**+**进入“添加生日”界面，然后点击**取消**。你应该看到“添加生日”界面从屏幕上滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2325
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。现在，你可以保存Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '*Figure 10-3: The* Birthday.swift *file*'
  id: totrans-2326
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-3：* Birthday.swift *文件*'
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-2327
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode自动为你写入了一些版权信息注释。紧跟在“Created by”之后的名字是从你电脑的联系人应用中提取的。版权年份之后，你应该看到在[第1章](text00011.html#ch01)中创建第一个Xcode项目时使用的组织名称。每次你在Xcode中创建新文件时，这个注释头都会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-2328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了*Birthday.swift*文件，你可以创建Birthday类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-2329
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2330
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，而birthdate将是一个特殊的类，Swift中内置的Date类，它专门用于处理日期和时间。我们将使用Date类的功能来提醒用户生日信息。将以下内容输入到*Birthday.swift*中，放在import
    Foundation语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-2331
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2332
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE266]'
  id: totrans-2333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2334
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊位置看到新的Date数据类型。Date的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2335
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋位置，你为Birthday类添加了一个初始化器，接受firstName、lastName和birthdate作为输入参数。然后，使用self属性将它们设置为类的属性➌。这将使你能够将名字和日期传递给Birthday类以存储生日。
- en: '**NOTE**'
  id: totrans-2336
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2337
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步构建项目的每个代码文件，最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2338
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2339
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以保存朋友名字和生日的Birthday类，并且在故事板中有输入字段（你在[第9章](text00020.html#ch09)中设置的）。但Birthday类和输入字段之间还没有连接，因此用户输入的内容无法作为Birthday存储。现在是时候编写代码来实现添加生日的功能了。为此，你将创建一个新的AddBirthdayViewController类来管理故事板中“添加生日场景”的输入字段。（记住，一个视图由视图控制器管理，而这就是你接下来要做的事情。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2340
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2341
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单视图应用模板开始时，Xcode 会自动创建一个名为*ViewController.swift*的文件，其中包含一个ViewController类，代表并通过代码控制一个视图。故事板中的视图控制器由这个ViewController类管理，我们将它重命名为AddBirthdayViewController，以便让类名更好地描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2342
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件*ViewController.swift*的名称，选择它并点击项目导航器中的名称，使其高亮显示（见[图10-4](text00021.html#ch10fig4)）。然后输入新文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2343
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以在文件内部通过更改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-2344
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2345
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名为* ViewController.swift'
- en: '[PRE267]'
  id: totrans-2346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: 'to the line:'
  id: totrans-2347
  prefs: []
  type: TYPE_NORMAL
  zh: 改为以下行：
- en: '[PRE268]'
  id: totrans-2348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2349
  prefs: []
  type: TYPE_NORMAL
  zh: 你不再需要内置的didReceiveMemoryWarning()方法，因此可以通过删除该方法来清理代码。现在，你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2350
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE269]'
  id: totrans-2351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2352
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建类，提供了用于管理在运行应用时出现在屏幕上的视图的方法。AddBirthdayViewController
    是 UIViewController 的一个*子类*，通过实现我们自己版本的一些 UIViewController 内建方法，它让我们可以在故事板中控制视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2353
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，当视图控制器创建并显示或从屏幕上消失时会被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2354
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后但在其视图出现在屏幕上之前被调用。这是做任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2355
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后并且在每次视图控制器的视图出现在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2356
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不过它是在视图控制器的视图出现在屏幕上之后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2357
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2358
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何子类化
    UIViewController 的人都使用这个方法，所以当你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2359
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个，可以开始输入它，自动补全会填写细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2360
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会被调用一次——即视图控制器首次创建时——viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果一个新的屏幕被放到视图控制器的屏幕上方，然后再移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会，因为视图控制器已经在另一个屏幕后加载过了。如果你希望每次视图出现时都刷新它并显示新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2361
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](text00023.html#ch12)，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    的 [第 149 页](text00021.html#page_149) 中，我们将在 AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以先不管这些方法，直接将我们的代码连接到在
    [第 9 章](text00020.html#ch09) 中设置的输入控件上。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2362
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2363
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器有一个“名字”文本框，一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是通过分配变量给这些已连接到屏幕元素的输入控件（通过
    IBOutlet）。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前，添加以下三个属性（灰色行表示已有代码，指示放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2364
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE270]'
  id: totrans-2365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2366
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB 代表 *interface builder*，它是 Xcode 中我们处理故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，旁边的边距上会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有被填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2367
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2368
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *，具有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2369
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型，UITextField! ➋，是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    属性的值为 nil。然而，一旦视图加载，IBOutlet 属性就会被赋予它们在故事板中连接到的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2370
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2371
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 类以及输入控件的属性，接下来是将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2372
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene** 并在右侧窗格中打开身份检查器。你应该会看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-2373
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2374
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2375
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday 场景中的文本框和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键点击 **Add a Birthday**，旁边是黄色的视图控制器图标，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2376
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器来连接它。当日期选择器对象被蓝色高亮时，你可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2377
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2378
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *outlet*  '
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2379
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”列在连接框中的birthdatePicker旁边，且连接圆圈已填充（请参见[图10-8](text00021.html#ch10fig8)），则说明连接成功。你只能将birthdatePicker
    outlet连接到日期选择器。如果你试图将它连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在AddBirthdayViewController中创建属性时给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2380
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2381
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2382
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动它的圆圈，将firstNameTextField连接到First Name标签下方的文本框。最后，将lastNameTextField连接到Last
    Name标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2383
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时完成了故事板的部分。现在让我们回到*AddBirthdayViewController.swift*中，通过代码来设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2385
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有一个未来的出生日期是不合逻辑的，所以我们来写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来实现这种设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一章的[第145页](text00021.html#page_145)讨论过viewDidLoad()方法。它会自动添加到我们的视图控制器中，所以找到AddBirthdayViewController中的这个方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2386
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE271]'
  id: totrans-2387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2388
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字覆盖它，如下所示：override
    func viewDidLoad()。请注意，方法中必须保留super.viewDidLoad()这一行。当你创建一个子类（如AddBirthdayViewController）并覆盖原始父类的方法时，你要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()方法中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2389
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，您只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，它是当前的日期和时间。现在试着运行一下应用程序，应该不可能选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2390
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便能够保存一个生日并取消从此视图控制器添加生日，使用您在[第9章](text00020.html#ch09)中创建的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2392
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用程序应该从输入的信息中创建一个生日，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2393
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2394
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用这个方法。在 viewDidLoad() 方法后面，向 AddBirthdayViewController
    中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2395
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE272]'
  id: totrans-2396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2397
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，@IBAction 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应运行的代码。在本例中，我们将添加一个函数，该函数将在用户点击保存时运行。当你编写一个
    IBAction 方法时，应该始终包含一个用于触发该方法的 UI 元素的参数。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但你可以将这个参数命名为任何你喜欢的名称。在这个例子中，我们希望每当用户点击保存按钮时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem。所以我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2398
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 绑定到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”（Received Actions）的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2399
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2400
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框底部的“接收的动作”部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2401
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的应用程序。当你点击保存按钮时，调试控制台应该会显示消息 "保存按钮已被点击"。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2402
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2403
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 saveTapped(_:) 方法中添加代码，在用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2404
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性叫做 text。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以用它来在
    saveTapped(_:) 方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2405
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE273]'
  id: totrans-2406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2407
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你首先创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果它存在的话，即用户输入了一个值）或者设置为一个空字符串
    ""。你可以使用你在 [第 5 章](text00015.html#ch05) 中学到的空合并操作符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2408
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，以便你在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2409
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后点击保存。你应该能看到类似这样的输出：
- en: '[PRE274]'
  id: totrans-2410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2411
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出它。接下来，让我们集中精力获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2412
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2413
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前由选择器显示的日期。对于 birthdatePicker，这就是 birthdatePicker.date。当用户更改 UIDatePicker
    时，date 属性也会变化，所以你可以使用 birthdayPicker.date 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2414
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2415
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE275]'
  id: totrans-2416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2417
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE276]'
  id: totrans-2418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2419
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这三项数据是创建一个生日所需要的！你会注意到调试控制台中显示的日期格式有些奇怪，其中还包含了时间和
    +0000 的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2420
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2421
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以利用这些信息通过 Birthday 类的初始化器来创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2422
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用一些新的 print 语句来测试 newBirthday 实例。接下来，将以下代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2423
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE277]'
  id: totrans-2424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2425
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你通过 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。创建完 newBirthday 后，在 ➋ 处，你使用点表示法将其属性输出到调试控制台。输出结果将与之前的 print 语句相同，不过这次你是从 newBirthday
    实例获取的值。运行应用，输入一个生日，并点击保存，看看会发生什么。你应该能在调试控制台看到类似下面的输出：
- en: '[PRE278]'
  id: totrans-2426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2427
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅仅是创建了一个生日。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2429
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。让我们通过在类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2430
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE279]'
  id: totrans-2431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2432
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 有两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就能看到“添加生日”屏幕滑下消失。看起来就像一个专业的应用！第二个参数是一个可选闭包，名为
    completion。*闭包* 是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行某些代码，可以使用这个 completion 闭包。因为在这里你不需要任何操作，可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-2433
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2434
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样来操作。打开 *Main.storyboard*，并显示“添加生日”视图控制器的连接对话框。从
    cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2435
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **取消**。你应该看到“添加生日”屏幕从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2436
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2437
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将向你展示如何在生日列表视图控制器中显示你的生日。
- en: Notice that at the top of the file, Xcode has automatically written some copyright
    information in code comments. The name that comes after “Created by” is pulled
    from your Contact Card in your computer’s Contacts application. After the copyright
    year, you should see the Organization Name that you used in [Chapter 1](text00011.html#ch01)
    when you created your first Xcode project. Every time you create a new file in
    Xcode, this commented header is automatically included.
  id: totrans-2438
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在文件的顶部，Xcode 已经自动写入了一些版权信息，作为代码注释。紧跟“Created by”后面的名字来自你计算机联系人应用中的联系人卡片。在版权年份之后，你应该能看到你在[第
    1 章](text00011.html#ch01)中创建第一个 Xcode 项目时使用的组织名称。每当你在 Xcode 中创建一个新文件时，这个注释头部会自动包含。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-2439
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，可以创建 Birthday 类来存储你的生日。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-2440
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2441
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 的类型应该是
    String，而 birthdate 将是一个内建于 Swift 中的特殊类，名为 Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日。请在
    *Birthday.swift* 中的 import Foundation 语句下输入以下内容。
- en: '![](Image00225.jpg)'
  id: totrans-2442
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2443
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE280]'
  id: totrans-2444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2445
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 ➊ 处看到新的 Date 数据类型。Date 的声明方式与其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2446
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，您为 Birthday 类添加了一个初始化方法，该方法接收 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将这些参数设置为类的属性 ➌。这样，您就可以将姓名和日期传递给 Birthday 类，以存储一个生日。
- en: '**NOTE**'
  id: totrans-2447
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2448
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步一步地构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2450
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您已经有了一个可以保存朋友姓名和出生日期的 Birthday 类，同时在故事板中也有您在 [第 9 章](text00020.html#ch09)
    中设置的输入字段。但 Birthday 类和输入字段之间并没有连接，因此用户输入的内容并没有作为 Birthday 被存储。现在是时候编写代码来使界面可以添加生日了。为此，您需要创建一个新的
    AddBirthdayViewController 类来管理故事板中“添加生日”场景中的输入字段。（记住，视图由视图控制器控制，而这就是您接下来要创建的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2451
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2452
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个应用并选择使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个表示和控制视图的
    ViewController 类。故事板中的视图控制器由此 ViewController 类管理，我们将重命名为 AddBirthdayViewController，以便类的名称能准确描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2453
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件 *ViewController.swift* 的名称，请选择它，并点击项目导航器中的名称，直到其被高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2454
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将 ViewController 类的名称更改为 AddBirthdayViewController。您可以在文件内通过更改以下这一行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-2455
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2456
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改 ViewController.swift 的文件名*'
- en: '[PRE281]'
  id: totrans-2457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'to the line:'
  id: totrans-2458
  prefs: []
  type: TYPE_NORMAL
  zh: 到以下这一行：
- en: '[PRE282]'
  id: totrans-2459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2460
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要使用内建的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来清理代码。现在您的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2461
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE283]'
  id: totrans-2462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2463
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内置方法的类，用于管理运行应用时在屏幕上出现的视图。AddBirthdayViewController 是
    UIViewController 的一个 *子类*，通过实现 UIViewController 的某些内置方法的自定义版本，我们可以在故事板中控制视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2464
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，这些方法会在视图控制器被创建并出现在屏幕上或从屏幕上消失时被调用。以下是这些回调方法：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2465
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后、其视图出现在屏幕上之前调用。这里是进行任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2466
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后，并且在每次视图控制器的视图将要出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2467
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2468
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2469
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 UIViewController 中重写这些方法中的任何一个。第一个方法 viewDidLoad() 非常有用。Swift 期望所有继承
    UIViewController 的子类都使用这个方法，因此当你继承 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2470
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为另外三个方法提供占位符代码。如果你决定使用其中一个方法，可以开始输入它，自动完成功能将填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2471
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会调用一次——即视图控制器第一次创建时——但 viewWillAppear(_:) 每次视图控制器的视图即将出现在屏幕上时都会被调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，而 viewDidLoad() 不会，因为视图控制器已经在另一个屏幕下加载并存在。如果你希望每次视图出现时都能刷新新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2472
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第12章](text00023.html#ch12) 中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    的 [149页](text00021.html#page_149) 中，我们将在 AddBirthdayViewController 中重写 viewDidLoad()。然而，现在，我们可以先不触动这些方法，先将代码与我们在
    [第9章](text00020.html#ch09) 中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2473
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接代码与输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2474
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 "添加生日" 视图控制器包含了 First Name 文本字段、Last Name 文本字段和 Birthdate 日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为与屏幕元素连接的输入控件分配变量，通过
    IBOutlet 连接。将以下三个属性添加到 AddBirthdayViewController 类的顶部，放置在 viewDidLoad() 方法之前（灰色的行表示一些已有的代码，表示位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2475
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE284]'
  id: totrans-2476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2477
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB 代表 *interface builder*，这是 Xcode 中用于处理故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如 [图10-5](text00021.html#ch10fig5) 所示。这表示该属性可以与故事板中的元素连接。当圆圈未被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2478
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2479
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* 带有 IBOutlet 属性的 AddBirthdayViewController *，用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2480
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 firstNameTextField 属性的类型是 UITextField! ➋ ，它是一个隐式解包的可选类型，因为在视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 会被赋值为它们在故事板中连接的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2481
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2482
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 以及输入控件的属性，接下来需要将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2483
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，修改故事板中 "添加生日" 视图控制器的类为 AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **添加生日场景**，然后在右侧面板中打开身份检查器。你应该会看到顶部的自定义类部分。将类改为
    AddBirthdayViewController，如 [图10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-2484
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2485
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2486
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 "添加生日" 场景中的文本字段和日期选择器。在左侧大纲视图中点击
    "添加生日" 场景旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键并点击 **添加生日**，在黄色的视图控制器图标旁打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2487
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以放开鼠标（参见 [图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2488
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2489
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2490
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充（见[图 10-8](text00021.html#ch10fig8)），那么就说明连接成功。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在创建 AddBirthdayViewController 时，我们在该属性中指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2491
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2492
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2493
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将 firstNameTextField 连接到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2494
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的部分。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2495
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2496
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的生日是在未来，那是没有意义的，因此我们需要编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在[第145页](text00021.html#page_145)的“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论了
    viewDidLoad() 方法。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController 中的这个方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2497
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE285]'
  id: totrans-2498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2499
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。注意，重要的是在该方法中保留 super.viewDidLoad() 这一行。当你创建子类（例如 AddBirthdayViewController）并重写原始超类的方法时，你需要确保调用超类中的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2500
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，你只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个当前日期和时间的日期。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2501
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中创建的按钮，在此视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2502
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2503
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2504
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2505
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先来创建一个saveTapped(_:)方法，每次用户点击保存按钮时都会调用该方法。将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2506
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE286]'
  id: totrans-2507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2508
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素进行操作时应该运行的代码。在这种情况下，我们将添加一个函数，该函数将在用户点击保存时运行。当您编写IBAction方法时，应该始终包括一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为sender
    ➋，但您可以根据需要为此参数起任何名字。在这种情况下，我们希望在用户点击保存时调用saveTapped(_:)方法，保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌。在➔处的print(_:)方法可以帮助我们在测试代码时看到Save按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2509
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接，就像将IBOutlet与Storyboard元素连接一样。返回到您的*Main.storyboard*文件。按住CONTROL键并点击"Add
    a Birthday"一行，打开连接对话框。在连接对话框的底部，有一个名为Received Actions的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到"Add
    a Birthday"视图控制器中的保存按钮，将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2510
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2511
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框的底部列出了IBActions，位于Received Actions下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2512
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行您的应用程序。当您点击保存按钮时，调试控制台应该显示消息"Save按钮已被点击"。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2513
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2514
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在saveTapped(_:)方法中添加代码，用于在用户输入后从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2515
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个名为text的可选String属性。这个text属性的值就是用户在文本框中输入的内容，因此您可以在saveTapped(_:)方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2516
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE287]'
  id: totrans-2517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2518
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，您创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，也就是用户输入了值），或者设置为空字符串""。您可以使用您在[第5章](text00015.html#ch05)中学到的空合并运算符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2519
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对lastName做同样的操作在➋处。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2520
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本字段中不输入任何内容然后点击保存按钮，再输入名字和姓氏后再次点击保存。你应该会看到类似以下的输出：
- en: '[PRE288]'
  id: totrans-2521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2522
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以将名字输入到应用程序中，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2523
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2524
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker，它就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2525
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2526
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE289]'
  id: totrans-2527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2528
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE290]'
  id: totrans-2529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2530
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据正是我们创建Birthday所需的！你会注意到，调试控制台中显示的日期格式很奇怪，其中还包含了时间和+0000的时区偏移。现在不用太担心这个问题，我们会在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2531
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2532
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息来通过Birthday类初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2533
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用测试newBirthday实例的打印语句来替换它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2534
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE291]'
  id: totrans-2535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2536
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。在创建newBirthday后，在
    ➋ 处，你通过点符号将它的属性输出到调试控制台。打印的输出与之前的打印语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE292]'
  id: totrans-2537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2538
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2539
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2540
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 Cancel 时，表示他们不再想添加生日，添加生日的界面应该消失。让我们通过向类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法正如其名——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2541
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE293]'
  id: totrans-2542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2543
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭界面添加动画效果。传入 true，让用户看到“添加生日”界面从屏幕上滑下。这看起来就像一个专业应用！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是可以传递到函数中的代码块。completion 闭包可以在视图控制器被消失后执行一些代码。因为这里你不需要任何额外的操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-2544
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2545
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法与 Cancel 按钮连接。你可以像将 saveTapped(_:) 方法连接到 Save 按钮一样操作。在
    *Main.storyboard* 中打开添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到 Cancel 按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2546
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日界面，再点击 **Cancel**。你应该看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2547
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2548
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学习了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday 对象，但保存后你看不见它们。在[第 11 章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表视图控制器中显示你的生日列表。
- en: Now that you have your *Birthday.swift* file, you can create the Birthday class
    to store your birthdays.
  id: totrans-2549
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了 *Birthday.swift* 文件，你可以创建 Birthday 类来存储你的生日信息。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-2550
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2551
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 应该是
    String 类型，而 birthdate 将是 Swift 中内置的一个特殊类——Date，它专门用于处理日期和时间。我们将使用 Date 类的功能来提醒用户生日信息。将以下内容输入到
    *Birthday.swift* 文件中，位于 import Foundation 语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-2552
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2553
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE294]'
  id: totrans-2554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2555
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到新的 Date 数据类型位于 ➊ 处。Date 就像其他变量一样声明。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2556
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性将它们设置为类属性 ➌。这将允许你将名字和日期传递给 Birthday 类以存储生日。
- en: '**NOTE**'
  id: totrans-2557
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2558
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获得。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2559
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2560
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，你已经有了一个可以存储朋友姓名和生日的 Birthday 类，并且在故事板中设置了输入字段，如[第9章](text00020.html#ch09)所示。但
    Birthday 类和输入字段之间没有连接，所以用户的输入并没有作为 Birthday 存储。现在是时候编写代码，让界面能够添加生日了。为此，你将创建一个新的
    AddBirthdayViewController 类来管理故事板中“添加生日”场景中的输入字段。（记住，视图是由视图控制器控制的，而视图控制器就是你接下来要创建的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2561
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2562
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单视图应用模板开始时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，用于表示和控制视图的代码。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，使类的名称能够描述其功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2563
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，在项目导航器中选择该文件，并点击其名称使其高亮显示（见 [图10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2564
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中通过更改以下这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-2565
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2566
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改* ViewController.swift 的文件名'
- en: '[PRE295]'
  id: totrans-2567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: 'to the line:'
  id: totrans-2568
  prefs: []
  type: TYPE_NORMAL
  zh: 改为这一行：
- en: '[PRE296]'
  id: totrans-2569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2570
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2571
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE297]'
  id: totrans-2572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2573
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内置方法的类，用于管理在运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的 *子类*，它允许我们通过实现 UIViewController 一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2574
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，这些方法会在视图控制器被创建并出现在屏幕上或从屏幕消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2575
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法会在视图控制器创建完成后但视图还未显示在屏幕上时被调用。这是执行任何初始化设置的好地方，适合只执行一次的视图初始化。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2576
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后被调用，并且在每次视图控制器的视图出现在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2577
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 类似，唯一不同的是它在视图控制器的视图出现在屏幕后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2578
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2579
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何子类化
    UIViewController 的类都使用该方法，因此当你子类化 UIViewController 时，它会自动在模板中添加 viewDidLoad()
    的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2580
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位代码。如果你决定使用其中一个，你可以开始输入，自动完成将填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2581
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只在视图控制器首次创建时调用一次，但 viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕被放置在视图控制器的屏幕上方，并且移除后视图控制器的屏幕重新出现，viewWillAppear(_:)
    将再次被调用，但 viewDidLoad() 不会，因为视图控制器已经加载在另一个屏幕后面。如果你希望每次视图出现时都刷新新信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2582
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第12章](text00023.html#ch12) 中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    中的 [第149页](text00021.html#page_149)，我们将重写 AddBirthdayViewController 中的 viewDidLoad()
    方法。现在，我们可以暂时忽略这些方法，直接将我们的代码连接到在 [第9章](text00020.html#ch09) 中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2583
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2584
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器包含一个名为 First Name 的文本字段、一个 Last Name 的文本字段和一个 Birthdate 的日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是将变量分配给通过
    IBOutlets 与屏幕元素连接的输入控件。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前添加以下三个属性（灰色的行表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2585
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE298]'
  id: totrans-2586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2587
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于属性前，以便在故事板中进行连接。IB 代表 *界面构建器*，它是 Xcode 中我们操作故事板的部分。当你在一个属性前加上
    @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2588
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2589
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *，具有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2590
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋ ，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    的初始值为 nil。然而，一旦视图加载，IBOutlet 会被赋值为它们在故事板中连接的内容。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2591
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2592
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 及其输入控件的属性，是时候连接 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2593
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene**，然后在右侧窗格中打开身份检查器。你应该看到顶部有一个自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-2594
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2595
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2596
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中
    **Add a Birthday Scene** 旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**（黄色视图控制器图标旁边）打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2597
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Outlets 部分，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以放开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2598
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2599
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2600
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你会看到 Birthdate Picker 出现在连接框中，birthdatePicker 的旁边有一个填充的连接圆圈（见 [图 10-8](text00021.html#ch10fig8)
    ）。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道
    birthdatePicker 必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中创建属性时为它指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2601
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2602
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2603
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈到 First Name 标签下方的文本框，连接 firstNameTextField。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2604
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到*AddBirthdayViewController.swift*，用代码设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2605
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2606
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的生日是在未来，这显然是没有意义的。所以我们来写一些代码，防止`birthdatePicker`选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的`viewDidLoad()`方法来完成这一设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》第[145页](text00021.html#page_145)中讨论过`viewDidLoad()`方法。它会自动添加到我们的视图控制器中，因此在`AddBirthdayViewController`中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2607
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE299]'
  id: totrans-2608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2609
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的方法，因此我们需要使用`override`关键字来重写它，代码如下：`override
    func viewDidLoad()`。注意，重要的是要保留方法中的`super.viewDidLoad()`这一行。当你创建一个子类（例如`AddBirthdayViewController`）并重写原类的某个方法时，你要确保也调用父类的方法。因为苹果可能在`UIViewController`的`viewDidLoad()`方法中运行了一些我们不知道的特殊代码，所以不调用父类方法可能会导致意外错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2610
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的最大日期，您只需要在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个新的日期对象，它代表当前的日期和时间。现在试着运行一下应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2611
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将写一些代码，这样你就可以在这个视图控制器中通过你在[第9章](text00020.html#ch09)中创建的按钮来保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2612
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2613
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据用户输入的信息创建一个生日对象，并保存这些信息。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2614
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2615
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从创建一个`saveTapped(_:)`方法开始，每当用户点击保存按钮时，这个方法会被调用。在`AddBirthdayViewController`中，紧接着`viewDidLoad()`方法添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2616
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE300]'
  id: totrans-2617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2618
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 位于 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素执行操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时执行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，用来表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，并且参数名称是 sender ➋ ，但你可以将此参数命名为任何你喜欢的名称。在这种情况下，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem。所以我们指定 sender 的类型是 UIBarButtonItem ➌ 。print(_:)
    方法位于 ➍ ，它帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2619
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 与保存按钮连接起来，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL - 点击“添加生日”行以打开连接对话框。在连接对话框的底部有一个名为“已接收的操作”的部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，点击并拖动从 saveTapped: 旁边的圆圈到“添加生日”视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2620
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2621
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部列出，位于已接收的操作下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2622
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，消息"The save button was tapped."应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2623
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2624
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，从 firstNameTextField 和 lastNameTextField 中获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2625
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，叫做 text。这个 text 属性的值是输入框中输入的内容，所以你可以在 saveTapped(_:)
    中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2626
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE301]'
  id: totrans-2627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2628
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你首先创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或者设置为空字符串
    "" 。你可以使用 nil 合并操作符 (??) 来实现这一点，这在 [第 5 章](text00015.html#ch05) 中你已经学过了。这里我们使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2629
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。在你获取了 firstName 和 lastName 的值之后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2630
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在文本框中什么也不输入就点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE302]'
  id: totrans-2631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2632
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入一个名字，并在调试控制台看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2633
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2634
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `birthdatePicker` 获取日期就像从 `firstNameTextField` 或 `lastNameTextField` 获取文本一样简单。`UIDatePicker`
    类有一个 `date` 属性，它是当前显示在选择器中的日期。对于 `birthdatePicker`，这个属性就是 `birthdatePicker.date`。当用户更改
    `UIDatePicker` 时，`date` 属性也会随之改变，因此你可以使用 `birthdayPicker.date` 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2635
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的 `saveTapped(_:)` 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2636
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE303]'
  id: totrans-2637
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2638
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下内容的输出：
- en: '[PRE304]'
  id: totrans-2639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2640
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经有了 `firstName`、`lastName` 和 `birthdate` ——这三项数据足以创建一个生日！你会注意到在调试控制台中显示的日期格式有点奇怪，还包括时间和
    `+0000` 的时区偏移。暂时不必太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2641
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2642
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户输入的 `firstName`、`lastName` 和 `birthdate` 数据，你可以使用这些信息来通过 `Birthday`
    类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2643
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `saveTapped(_:)` 方法中的 `print` 语句，因为我们将用测试 `newBirthday` 实例的 `print` 语句来替代它们。然后将以下代码添加到
    `saveTapped(_:)` 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2644
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE305]'
  id: totrans-2645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2646
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 `Birthday` 类的初始化方法创建了一个 `newBirthday` 实例，并传入了 `firstName`、`lastName`
    和 `birthdate` 的常量。在创建 `newBirthday` 后，➋ 你使用点语法将它的属性输出到调试控制台。打印输出将与之前的 `print`
    语句相同，但这次你得到的是来自 `newBirthday` 实例的值。运行应用程序，输入一个生日并点击保存，查看发生了什么。你应该能在调试控制台中看到类似以下内容的输出：
- en: '[PRE306]'
  id: totrans-2647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2648
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2649
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2650
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，"添加生日"界面应该消失。我们可以通过在类中添加一个 `cancelTapped(_:)` 方法来实现这一行为，该方法将调用一个内建的
    `UIViewController` 方法，叫做 `dismiss(animated:completion:)`。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。在
    `AddBirthdayViewController` 类中的 `saveTapped(_:)` 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2651
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE307]'
  id: totrans-2652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2653
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:)➊接受两个参数。animated参数用于动画效果地关闭屏幕。传入true，这样用户就可以看到“添加生日”屏幕滑动消失，效果就像一个专业应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是一段可以传入函数的代码块。completion闭包可以在视图控制器被关闭后执行你希望运行的代码。由于这里不需要做任何事情，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-2654
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2655
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)连接到Cancel按钮。你可以像将saveTapped(_:)方法连接到Save按钮一样操作。转到*Main.storyboard*并调出Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到Cancel按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2656
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击**+**进入添加生日屏幕，然后点击**Cancel**。你应该会看到添加生日屏幕滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2657
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2658
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存Birthday对象，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '**WRITING THE BIRTHDAY CLASS**'
  id: totrans-2659
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写生日类**'
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2660
  prefs: []
  type: TYPE_NORMAL
  zh: 你的Birthday类将有三个常量属性：firstName、lastName和birthdate。firstName和lastName应该是String类型，而birthdate将是一个内建于Swift中的特殊类，叫做Date，它专门用于处理日期和时间。我们将使用Date类的功能来提醒用户生日。将以下内容输入到*Birthday.swift*文件中，在import
    Foundation语句下方。
- en: '![](Image00225.jpg)'
  id: totrans-2661
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2662
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE308]'
  id: totrans-2663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2664
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊处看到新的Date数据类型。Date的声明方式和其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2665
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，向Birthday类添加一个初始化器，接受firstName、lastName和birthdate作为输入参数。然后，使用self属性将它们设置为类的属性➌。这样，你就可以将姓名和日期传递给Birthday类以存储生日。
- en: '**NOTE**'
  id: totrans-2666
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2667
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步步构建每个代码文件。最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2668
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2669
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以保存朋友姓名和生日的 Birthday 类，并且你在[第 9 章](text00020.html#ch09)中设置了故事板中的输入字段。但是，Birthday
    类和输入字段还没有连接起来，因此用户输入的内容不会作为一个 Birthday 被存储。现在是时候编写代码来使界面能够添加生日了。为此，你将创建一个新的 AddBirthdayViewController
    类来管理故事板中的“添加生日”场景中的输入字段。（记住，视图是由视图控制器控制的，而这正是你接下来要做的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2670
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2671
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单一视图应用模板开始时，Xcode 会自动创建一个名为*ViewController.swift*的文件，其中包含一个 ViewController
    类，用于通过代码表示和控制视图。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2672
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择该文件并点击项目导航器中的文件名，直到它被高亮显示（见[图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2673
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件中通过修改以下行来实现这一点：
- en: '![](Image00226.jpg)'
  id: totrans-2674
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2675
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改 ViewController.swift 的文件名*'
- en: '[PRE309]'
  id: totrans-2676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'to the line:'
  id: totrans-2677
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止：
- en: '[PRE310]'
  id: totrans-2678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2679
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内建的 didReceiveMemoryWarning() 方法，因此你可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2680
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE311]'
  id: totrans-2681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2682
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建的类，提供了管理在应用运行时出现在屏幕上的视图的方法。AddBirthdayViewController 是
    UIViewController 的一个*子类*，这使我们可以通过实现 UIViewController 一些内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2683
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法会在视图控制器创建并出现在屏幕上或从屏幕消失时调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2684
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器被创建后立即调用，但在视图出现在屏幕上之前调用。这是执行任何仅需执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2685
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后调用，并在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2686
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法类似于 viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2687
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2688
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift期望任何继承自UIViewController的子类都能使用这个方法，因此当你创建UIViewController的子类时，它会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2689
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中之一，你可以开始输入，自动补全会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2690
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只会被调用一次——即视图控制器首次创建时——viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上并且被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，而viewDidLoad()则不会被调用，因为视图控制器已经加载并处于另一个屏幕后面。如果你希望每次视图出现时都能用新的信息刷新视图，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2691
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[“设置最大生日日期”](text00021.html#ch10lev2sec6)中，位于[第149页](text00021.html#page_149)，我们将在AddBirthdayViewController中重写viewDidLoad()。不过现在，我们可以先不处理这些方法，直接将我们的代码与在[第9章](text00020.html#ch09)中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2692
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2693
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框，一个“姓氏”文本框和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为这些输入控件分配变量，并通过IBOutlet将它们与屏幕元素连接。将以下三个属性添加到AddBirthdayViewController类的viewDidLoad()方法之前（灰色的线表示现有代码，用于定位）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2694
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE312]'
  id: totrans-2695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2696
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中用于设计故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这个圆圈表示你可以将该属性与故事板中的元素连接起来。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2697
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2698
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *带有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2699
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据显示类型是 UITextField! ➋ ，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋予它们在故事板中连接到的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2700
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2701
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 以及输入控件的属性，接下来是连接名字、姓氏文本字段和出生日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2702
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧轮廓视图中选择 **添加生日场景**，并在右侧窗格中打开身份检查器。你应该在顶部看到一个自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-2703
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2704
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2705
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧轮廓视图中“添加生日场景”旁的三角形，展开该场景中的项菜单。然后，按住
    CONTROL 并点击 **添加生日**，该操作位于黄色视图控制器图标旁，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2706
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。在“输出口”下，点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器。当日期选择器对象高亮显示为蓝色时，你可以松开（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2707
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2708
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker 输出口'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2709
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到出生日期选择器列在连接框中的 birthdatePicker 旁，并且连接圆圈已填充（见 [图 10-8](text00021.html#ch10fig8)），那么连接就成功了。你只能将
    birthdatePicker 输出口连接到日期选择器。如果你试图将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在 AddBirthdayViewController 中创建该属性时，我们为它指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2710
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2711
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：birthdatePicker 输出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2712
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并从其圆圈拖动到“名字”标签下方的文本字段来连接 firstNameTextField。最后，将 lastNameTextField 连接到“姓氏”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2713
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift* 中，编写代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2714
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2715
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期设定在未来是没有意义的，因此我们来编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论了viewDidLoad()方法，见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以找到AddBirthdayViewController中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2716
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE313]'
  id: totrans-2717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2718
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字来重写它，像这样：override
    func viewDidLoad()。请注意，方法中的super.viewDidLoad()这一行非常重要。创建子类时，比如AddBirthdayViewController，并重写原始父类的方法时，你需要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()方法中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2719
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需要在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，该日期为当前的日期和时间。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2720
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在[第9章](text00020.html#ch09)中制作的按钮，在这个视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2721
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2722
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击“保存”时，应用程序应该根据输入的信息创建一个Birthday对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2723
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2724
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，每当用户点击“保存”按钮时都会调用这个方法。在viewDidLoad()方法之后，向AddBirthdayViewController添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2725
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE314]'
  id: totrans-2726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2727
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素采取操作时应该运行的代码。在这种情况下，我们将添加一个函数，在用户点击“保存”时运行。当你编写一个IBAction方法时，应该始终包含一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你可以根据需要为此参数命名。在这种情况下，我们希望在用户点击“保存”时调用saveTapped(_:)方法，它是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌。print(_:)方法在➍处帮助我们查看保存按钮是否被点击，以便在测试代码时进行调试。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2728
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接就像将IBOutlet连接到storyboard元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“Add
    a Birthday”这一行，打开连接对话框。在连接对话框的底部有一个叫做Received Actions的区域，如[图10-9](text00021.html#ch10fig9)所示。在该区域，点击并拖动saveTapped:旁边的圆圈到“Add
    a Birthday”视图控制器中的保存按钮进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2729
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2730
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions在连接对话框的Received Actions部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2731
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再试着运行一下你的应用。当你点击保存按钮时，调试控制台应该会显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2732
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2733
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入名字后，能够从firstNameTextField和lastNameTextField中获取到名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2734
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是输入框中被输入的内容，因此你可以使用它来获取用户在saveTapped(_:)方法中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2735
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE315]'
  id: totrans-2736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2737
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），如果没有则设为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现这一点。我们在这里使用常量而非变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2738
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName做同样的操作。在你获取到firstName和lastName的值后，将它们打印到控制台，这样你在运行应用时就可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2739
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后尝试一次。你应该会看到类似于下面的输出：
- en: '[PRE316]'
  id: totrans-2740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2741
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入一个名字，并看到计算机在调试控制台输出它。接下来，我们将专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2742
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2743
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个名为date的属性，它表示选择器当前显示的日期。对于birthdatePicker来说，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2744
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2745
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE317]'
  id: totrans-2746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2747
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用看看会发生什么。你应该会看到类似于以下的输出：
- en: '[PRE318]'
  id: totrans-2748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2749
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所需的！你会注意到调试控制台中显示的日期格式很奇怪，它还包含时间和+0000的时区偏移。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2750
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2751
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码已经能够访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2752
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替代它们。然后将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2753
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE319]'
  id: totrans-2754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2755
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你通过Birthday类的初始化器创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建newBirthday之后，在➋，你使用点表示法将它的属性输出到调试控制台。输出的结果与之前的print语句相同，但这次你得到的是newBirthday实例中的值。运行应用，输入生日并点击保存，看看会发生什么。你应该能在调试控制台中看到类似以下的输出：
- en: '[PRE320]'
  id: totrans-2756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2757
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2758
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2759
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，因此添加生日的界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，这个方法会调用一个内置的UIViewController方法dismiss(animated:completion:)。该方法正如其名，它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2760
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE321]'
  id: totrans-2761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2762
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于动画关闭屏幕。传入true，这样用户可以看到“添加生日”界面从屏幕上滑下来，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码块。如果你希望在视图控制器关闭后执行某些代码，可以使用completion闭包。由于这里不需要做任何事，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-2763
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2764
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样进行操作。进入 *Main.storyboard*，调出添加生日视图控制器的连接对话框。从
    cancelTapped(_:) 方法列表拖动并连接到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2765
  prefs: []
  type: TYPE_NORMAL
  zh: 完成之后，运行应用，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到“添加生日”界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2766
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2767
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的可视化界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前你可以保存 Birthday 对象，但保存后无法查看它们。在 [第11章](text00022.html#ch11)
    中，我们将展示如何在生日表格视图控制器中显示你的生日列表。
- en: 'Your Birthday class will have three constant properties: firstName , lastName
    , and birthdate . The properties firstName and lastName should be of type String
    , but birthdate will be a special class built into Swift called Date , which is
    specifically made to handle dates and times. We’ll use the Date class’s functionality
    to alert the user about birthdays. Enter the following into *Birthday.swift* under
    the import Foundation statement.'
  id: totrans-2768
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Birthday 类将有三个常量属性：firstName、lastName 和 birthdate。firstName 和 lastName 的类型应为
    String，而 birthdate 将是 Swift 中内建的一个特殊类 Date，用于处理日期和时间。我们将使用 Date 类的功能来提醒用户关于生日的信息。将以下内容输入到
    *Birthday.swift* 文件中的 import Foundation 语句下。
- en: '![](Image00225.jpg)'
  id: totrans-2769
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2770
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE322]'
  id: totrans-2771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2772
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 处看到新的 Date 数据类型。Date 的声明方式与其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2773
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化器，该初始化器接收 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性将它们赋值给类的属性 ➌ 。这将允许你将姓名和日期传递给 Birthday 类，从而存储一个生日。
- en: '**NOTE**'
  id: totrans-2774
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2775
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将一步一步地构建每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2777
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了一个可以保存朋友姓名和生日的 Birthday 类，并且在 storyboard 中设置了输入字段，这些字段是你在 [第9章](text00020.html#ch09)
    中设置的。但 Birthday 类和输入字段并未连接，因此用户的输入没有以 Birthday 对象的形式存储。现在是时候编写代码，让界面能够添加生日了。为此，你将创建一个新的
    AddBirthdayViewController 类来管理 storyboard 中“添加生日”场景中的输入字段。（记住，视图由视图控制器控制，而你接下来将要做的正是这个视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2778
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2779
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单视图应用模板开始时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，文件中包含一个表示并通过代码控制视图的
    ViewController 类。故事板中的视图控制器是通过这个 ViewController 类进行管理的，我们将其重命名为 AddBirthdayViewController，这样类名就能更好地描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2780
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请在项目导航器中选择它，然后单击其名称使其高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2781
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过修改文件中的以下行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-2782
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2783
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE323]'
  id: totrans-2784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: 'to the line:'
  id: totrans-2785
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE324]'
  id: totrans-2786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2787
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来清理你的代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2788
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE325]'
  id: totrans-2789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2790
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个包含管理视图的内置方法的类，这些视图会在你运行应用时显示在屏幕上。AddBirthdayViewController
    是 UIViewController 的一个 *子类*，它允许我们通过实现 UIViewController 的一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2791
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，它们会在视图控制器创建并显示或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2792
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后立即调用，但在视图显示到屏幕上之前调用。这里是进行任何你只想做一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2793
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2794
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，唯一的区别是它在视图控制器的视图显示在屏幕上之后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2795
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2796
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何继承自
    UIViewController 的类都使用这个方法，因此当你继承 UIViewController 时，它会自动在模板中为 viewDidLoad() 添加占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2797
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个，你可以开始输入，它会自动填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2798
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管`viewDidLoad()`只会被调用一次——即视图控制器首次创建时——但`viewWillAppear(_:)`每次视图控制器的视图即将出现在屏幕上时都会被调用。所以，如果一个屏幕覆盖在视图控制器的屏幕上，然后被移除，导致视图控制器的屏幕重新出现，`viewWillAppear(_:)`将再次被调用，但`viewDidLoad()`不会，因为视图控制器已经在另一个屏幕下加载好了。如果你希望每次视图出现时都刷新新的信息，你可以重写`viewWillAppear(_:)`方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2799
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用`viewWillAppear(_:)`方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”一节中，参见[第149页](text00021.html#page_149)，我们将重写`AddBirthdayViewController`中的`viewDidLoad()`方法。但现在，我们可以先不管这些方法，直接将代码连接到[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2800
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2801
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框、一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过为连接到屏幕元素的输入控件分配变量来完成。请在`AddBirthdayViewController`类的`viewDidLoad()`方法之前，添加以下三个属性（灰色线条表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2802
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE326]'
  id: totrans-2803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2804
  prefs: []
  type: TYPE_NORMAL
  zh: '`@IBOutlet ➊`是一个特殊的关键字，用于放置在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们编辑故事板的部分。当你在属性前加上`@IBOutlet`关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2805
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2806
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* 具有`IBOutlet`属性的`AddBirthdayViewController` *与输入控件连接*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2807
  prefs: []
  type: TYPE_NORMAL
  zh: '`firstNameTextField`属性的数据类型是`UITextField! ➋`，它是一个隐式解包的可选值，因为当视图控制器首次创建时，`IBOutlet`的值为`nil`。然而，一旦视图加载，`IBOutlet`就会被赋予它们在故事板中连接的元素的值。'
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2808
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2809
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了`AddBirthdayViewController`和输入控件的属性，是时候将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2810
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 `AddBirthdayViewController`，这样您就可以使用该类来管理视图控制器了。在项目导航器中选择
    *Main.Storyboard*，接着在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧面板中打开身份检查器。您应该会看到顶部的自定义类部分，将类更改为
    `AddBirthdayViewController`，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-2811
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2812
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* `AddBirthdayViewController` *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2813
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 `AddBirthdayViewController` 的 `IBOutlet` 属性连接到“添加生日”场景中的文本框和日期选择器。在左侧大纲视图中点击“添加生日”场景旁的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击 **Add a Birthday**，这会打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2814
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 `birthdatePicker`、`firstNameTextField` 和 `lastNameTextField`。通过点击它旁边的空圆圈并将其拖动到故事板中的日期选择器来连接
    `birthdatePicker`。当日期选择器对象被高亮显示为蓝色时，您可以松开鼠标（参见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2815
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2816
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* `birthdatePicker` *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2817
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到连接框中列出了 `birthdatePicker`，并且连接圆圈已填充，那么就说明连接成功（参见[图 10-8](text00021.html#ch10fig8)）。您只能将
    `birthdatePicker` outlet 连接到日期选择器。如果您尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 `birthdatePicker`
    必须连接到 `UIDatePicker` 类，因为我们在 `AddBirthdayViewController` 中创建该属性时已经指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2818
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2819
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：`birthdatePicker` outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2820
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个 `firstNameTextField` 的圆圈到“First Name”标签下方的文本框来连接它。最后，将 `lastNameTextField`
    连接到“Last Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2821
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您已经完成了故事板的设置。接下来，让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2822
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2823
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有未来的出生日期是没有意义的，因此我们需要写一些代码，防止 `birthdatePicker` 选择未来的日期。我们可以通过修改 `AddBirthdayViewController`
    中的 `viewDidLoad()` 方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”的[第
    145 页](text00021.html#page_145)中讨论过 `viewDidLoad()` 方法。它会自动添加到我们的视图控制器中，所以在 `AddBirthdayViewController`
    中找到这个方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2824
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE327]'
  id: totrans-2825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2826
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类中的一个方法，因此我们需要使用override关键字来重写它，像这样：override
    func viewDidLoad()。注意，保持方法中的super.viewDidLoad()这一行非常重要。当你创建一个子类（如AddBirthdayViewController）并重写原始超类的方法时，必须确保你也调用超类的方法。Apple可能在UIViewController的viewDidLoad()方法中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2827
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法创建一个新的日期，它是当前的日期和时间。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2828
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中创建的按钮，能够从这个视图控制器中保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2830
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现Save按钮！当用户点击Save时，应用程序应该从输入的信息中创建一个生日，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2831
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接Save按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2832
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，这个方法将在用户每次点击Save按钮时被调用。在viewDidLoad()方法之后，将以下代码添加到AddBirthdayViewController中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2833
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE328]'
  id: totrans-2834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2835
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击Save时它会运行。当你编写一个IBAction方法时，应该始终为触发方法的UI元素包含一个参数。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋，但是你可以根据需要命名这个参数。在这个例子中，我们希望在用户点击Save（它是一个UIBarButtonItem）时调用saveTapped(_:)方法。因此，我们指定sender的类型是UIBarButtonItem
    ➌。在➋处的print(_:)方法帮助我们查看在测试代码时Save按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2836
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与Save按钮连接起来，就像将IBOutlet连接到storyboard元素一样。返回到你的*Main.storyboard*文件。CONTROL
    -点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“Received Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动saveTapped:旁边的圆圈到“添加生日”视图控制器中的Save按钮，将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2837
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2838
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框底部的Received Actions部分列出了IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2839
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的应用。当你点击保存按钮时，消息“The save button was tapped.”应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2840
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2841
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，用来获取用户输入的firstName和lastName，分别从firstNameTextField和lastNameTextField中提取。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2842
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性的值是文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2843
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE329]'
  id: totrans-2844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2845
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或者为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的nil合并操作符(??)来完成这一步。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2846
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对➋处的lastName做同样的操作。在获取firstName和lastName的值后，将它们打印到控制台，这样你在运行应用时就可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2847
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看发生了什么。尝试在文本框中不输入任何内容就点击保存按钮，然后再输入名字和姓氏后尝试一次。你应该会看到类似这样的输出：
- en: '[PRE330]'
  id: totrans-2848
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2849
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入名字，并在调试控制台看到计算机输出了这个名字。接下来让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2850
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2851
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，表示当前选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，所以你可以通过birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2852
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的saveTapped(_:)方法中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2853
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE331]'
  id: totrans-2854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2855
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE332]'
  id: totrans-2856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2857
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们有了firstName、lastName和birthdate——这三项数据是创建生日所需要的！你会注意到调试控制台中显示的日期格式很奇怪，其中还包括时间和+0000的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2858
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2859
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入了，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2860
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用测试新`Birthday`实例的打印语句替代它们。然后，向`saveTapped(_:)`方法添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2861
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE333]'
  id: totrans-2862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2863
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用`Birthday`类的初始化器创建一个`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`的常量。创建完`newBirthday`后，在
    ➋ 处，你使用点表示法将它的属性输出到调试控制台。打印输出将与之前的打印语句相同，但这次你从`newBirthday`实例中获取值。运行应用，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE334]'
  id: totrans-2864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2865
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个`Birthday`。你将在[第11章](text00022.html#ch11)中学习如何在`Birthdays`视图控制器中显示这个`Birthday`。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2866
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2867
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，应该关闭“添加生日”屏幕。我们通过向类中添加一个`cancelTapped(_:)`方法来实现这个行为，这个方法会调用一个内置的UIViewController方法`dismiss(animated:completion:)`。这个方法做的就是它所说的——它会解除当前显示的视图控制器。将以下方法添加到`AddBirthdayViewController`类中的`saveTapped(_:)`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2868
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE335]'
  id: totrans-2869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2870
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数 ➊ 有两个参数。`animated`参数用于设置关闭屏幕时的动画效果。传入true，这样用户就可以看到“添加生日”屏幕从屏幕上滑动下去。它看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做`completion`。*闭包*是可以传递到函数中的一段代码。如果在视图控制器被解除显示后你需要执行某些代码，可以使用`completion`闭包。因为在这里你不需要做任何事情，所以可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-2871
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2872
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`与取消按钮连接。你可以按照与将`saveTapped(_:)`方法连接到保存按钮相同的方式来做这件事。转到*Main.storyboard*并打开Add
    Birthday视图控制器的连接对话框。从`cancelTapped(_:)`方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2873
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击**+**进入“添加生日”屏幕，点击**取消**。你应该会看到“添加生日”从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2874
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2875
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在，你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个Birthdays表视图控制器中显示你的生日列表。
- en: '![](Image00225.jpg)'
  id: totrans-2876
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00225.jpg)'
- en: '*Birthday.swift*'
  id: totrans-2877
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE336]'
  id: totrans-2878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2879
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在➊处看到新的Date数据类型。Date的声明方式与其他变量类似。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2880
  prefs: []
  type: TYPE_NORMAL
  zh: 在➋处，你为Birthday类添加了一个初始化函数，该函数接收firstName、lastName和birthdate作为输入参数。然后，使用self属性将这些值设置为类的属性➌。这样，你就可以将姓名和日期传递给Birthday类，以存储生日信息。
- en: '**NOTE**'
  id: totrans-2881
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2882
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建项目的每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2883
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2884
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以保存朋友姓名和出生日期的Birthday类，并且在故事板中设置了输入字段，这些字段是在[第9章](text00020.html#ch09)中配置的。但Birthday类和输入字段并没有连接，所以用户输入的内容不能作为Birthday存储。现在是时候编写代码来使界面能够添加生日了。为此，你将创建一个新的AddBirthdayViewController类，用来管理故事板中“添加生日”场景的输入字段。（记住，视图是由视图控制器控制的，这就是你接下来要做的事。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2885
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2886
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用程序并选择单视图应用程序模板时，Xcode会自动创建一个名为*ViewController.swift*的文件，该文件包含一个表示和控制视图的ViewController类。故事板中的视图控制器由这个ViewController类管理，我们将它重命名为AddBirthdayViewController，以便类名能准确描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2887
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名*ViewController.swift*，请选择该文件，并在项目导航器中单击其名称，使其高亮显示（参见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2888
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以在文件中通过更改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-2889
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2890
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名为* ViewController.swift'
- en: '[PRE337]'
  id: totrans-2891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: 'to the line:'
  id: totrans-2892
  prefs: []
  type: TYPE_NORMAL
  zh: 到以下行：
- en: '[PRE338]'
  id: totrans-2893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-2894
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置方法didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在，你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2895
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE339]'
  id: totrans-2896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-2897
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个类，它带有用于管理在应用程序运行时出现在屏幕上的视图的内建方法。AddBirthdayViewController是UIViewController的*子类*，它让我们可以通过实现UIViewController的一些内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-2898
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个非常有用的内建回调方法，这些方法会在视图控制器被创建并且出现在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-2899
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后立即被调用，但在其视图出现在屏幕上之前。这是进行任何你只希望执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-2900
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在viewDidLoad()之后并且在每次视图控制器的视图出现在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-2901
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕后被调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-2902
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-2903
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。其中第一个，viewDidLoad()，非常有用。Swift期望任何子类化UIViewController的人都使用这个方法，因此当你子类化UIViewController时，它会自动为viewDidLoad()添加占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-2904
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位代码。如果你决定使用其中一个，你可以开始输入它，自动补全会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-2905
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只会被调用一次——即当视图控制器首次创建时——但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载并存在。如果你希望每次视图出现时都用新的信息来刷新它，你可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-2906
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。另见 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    在[第149页](text00021.html#page_149)中，我们将在AddBirthdayViewController中重写viewDidLoad()。不过，现在我们可以先忽略这些方法，并将我们的代码连接到[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-2907
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-2908
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本字段，一个“姓氏”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这通过为这些输入控件分配变量，并通过
    IBOutlet 将它们与屏幕元素连接来实现。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前（灰色的行表示一些现有代码），添加以下三个属性：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2909
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE340]'
  id: totrans-2910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-2911
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，它是 Xcode 中我们进行故事板工作的部分。当你在属性前加上
    @IBOutlet 关键字时，属性旁边的边距上会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈没有被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-2912
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-2913
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-2914
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包可选类型，因为当视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载，IBOutlet 就会赋值为它们在故事板中连接的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-2915
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-2916
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是连接“名字”和“姓氏”文本字段以及“出生日期”日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-2917
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，然后在右侧窗格中打开身份检查器。你应该会看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-2918
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-2919
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-2920
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键点击 **添加生日**，接近黄色的视图控制器图标，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-2921
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。在空圆圈旁边点击
    birthdatePicker，然后拖动到故事板中的日期选择器。当日期选择器对象被高亮显示为蓝色时，松开鼠标（参见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-2922
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-2923
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-2924
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 列在连接框中的 birthdatePicker 旁边，并且连接圆圈已填充（见[图10-8](text00021.html#ch10fig8)），那么你就知道连接成功了。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-2925
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-2926
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-2927
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，通过点击并拖动它的圆圈到“First Name”标签下方的文本框。最后，将 lastNameTextField
    连接到“Last Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-2928
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift* 中，编写代码来设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-2929
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-2930
  prefs: []
  type: TYPE_NORMAL
  zh: 让人有出生日期在未来的情况是没有意义的，所以让我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行此类设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论了
    viewDidLoad() 方法，见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController
    中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2931
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE341]'
  id: totrans-2932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-2933
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。注意，重要的是要保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类（如 AddBirthdayViewController）并重写原始超类的方法时，你要确保也调用超类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-2934
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器（birthdatePicker）的最大日期，只需在➊处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-2935
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便可以保存生日并通过你在[第9章](text00020.html#ch09)中创建的按钮取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-2936
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-2937
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-2938
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-2939
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 `saveTapped(_:)` 方法开始，每次用户点击保存按钮时都会调用它。将以下代码添加到 `AddBirthdayViewController`
    中，紧接在 `viewDidLoad()` 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2940
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE342]'
  id: totrans-2941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-2942
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处的 `@IBAction` 是一个关键字，它将一个函数直接与视图控制器中的元素连接起来，并允许我们指定用户对该元素采取某个操作时应该执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时就会执行。当你编写一个
    IBAction 方法时，应该始终包括一个参数，用来表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称是 `sender` ➋，但是你也可以随意命名这个参数。在这个例子中，我们希望每次用户点击保存按钮时调用
    `saveTapped(_:)` 方法，而保存按钮是一个 `UIBarButtonItem`。所以我们指定 `sender` 的类型是 `UIBarButtonItem`
    ➌。在 ➍ 处的 `print(_:)` 方法帮助我们看到保存按钮被点击时的情况，以便我们测试代码。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-2943
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 与保存按钮连接起来，类似于将 `IBOutlet` 连接到一个 storyboard 元素。返回你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击 "Add a Birthday" 行，打开连接对话框。在连接对话框的底部有一个名为 Received Actions
    的部分，如 [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 `saveTapped:` 旁边的圆圈拖动到 "Add
    a Birthday" 视图控制器中的保存按钮进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-2944
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-2945
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的底部，列出了接收的动作。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-2946
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的应用。当你点击保存按钮时，调试控制台应该会显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-2947
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-2948
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，在用户输入名字后，从 `firstNameTextField` 和 `lastNameTextField`
    获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-2949
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField` 类有一个可选的字符串属性，叫做 text。这个 text 属性的值是用户输入的文本内容，所以你可以在 `saveTapped(_:)`
    方法中通过以下代码获取用户的输入：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2950
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE343]'
  id: totrans-2951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-2952
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 `firstNameTextField.text`（如果存在的话，即用户输入了一个值），否则设置为空字符串
    `""`。你可以使用在[第五章](text00015.html#ch05)中学习的 nil 合并运算符（??）来实现这一点。我们在这里使用常量而非变量，因为用户输入的名字和姓氏值不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-2953
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，在 ➋ 处对 `lastName` 做同样的处理。在获取到 `firstName` 和 `lastName` 的值后，将它们打印到控制台，以便在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-2954
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似下面的输出：
- en: '[PRE344]'
  id: totrans-2955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-2956
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用程序中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-2957
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-2958
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前由选择器显示的日期。对于 birthdatePicker ，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-2959
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 saveTapped(_:) 方法中添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2960
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE345]'
  id: totrans-2961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-2962
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE346]'
  id: totrans-2963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2964
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经有了 firstName、lastName 和 birthdate——这三项数据是我们创建生日所需的！你会注意到，调试控制台中显示的日期格式有些奇怪，还包含了时间和
    +0000 的时区偏移。现在不用太担心这些格式问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-2965
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-2966
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-2967
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除打印语句，因为我们将用打印语句来测试 newBirthday 实例。然后，向 saveTapped(_:)
    方法中添加以下几行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2968
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE347]'
  id: totrans-2969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-2970
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ ，你使用 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ ，你通过点表示法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从 newBirthday
    实例获取值。运行应用程序，输入生日信息，点击保存，看看会发生什么。你应该会在调试控制台中看到类似下面的输出：
- en: '[PRE348]'
  id: totrans-2971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-2972
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮仅仅是创建了一个 Birthday 。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-2973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-2974
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 Cancel 时，表示他们不再希望添加生日，Add a Birthday 屏幕应该消失。我们通过向类中添加一个 cancelTapped(_:)
    方法来实现这一行为，该方法会调用一个内置的 UIViewController 方法，名为 dismiss(animated:completion:)。该方法正如其名所示——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中，在 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-2975
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE349]'
  id: totrans-2976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-2977
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制是否动画化关闭屏幕。传入 true 以便用户看到
    Add a Birthday 屏幕从屏幕上滑下。这样看起来就像一个专业的应用程序！第二个参数是一个可选闭包，名为 completion。*闭包* 是一块可以传递给函数的代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用
    completion 闭包。因为你这里不需要执行任何操作，所以可以传入 nil。
- en: '![](Image00233.jpg)'
  id: totrans-2978
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-2979
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到 Cancel 按钮。你可以按照将 saveTapped(_:) 方法连接到 Save 按钮的相同步骤操作。前往
    *Main.storyboard*，打开 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到 Cancel
    按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-2980
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入 Add a Birthday 屏幕，然后点击 **Cancel**。你应该能看到 Add a Birthday
    屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-2981
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-2982
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将书面代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后无法看到它们。在 [第 11 章](text00022.html#ch11)
    中，我们将展示如何在 Birthdays 表视图控制器中显示你的生日列表。
- en: '*Birthday.swift*'
  id: totrans-2983
  prefs: []
  type: TYPE_NORMAL
  zh: '*Birthday.swift*'
- en: '[PRE350]'
  id: totrans-2984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-2985
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式和其他变量一样。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-2986
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你向 Birthday 类添加了一个初始化方法，该方法接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们设置为类的属性 ➌。这将允许你将名字和日期传递给 Birthday 类，以存储一个生日。
- en: '**NOTE**'
  id: totrans-2987
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-2988
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-2989
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-2990
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经创建了一个可以保存朋友姓名和出生日期的 Birthday 类，并且在 [第9章](text00020.html#ch09) 的故事板中设置了输入字段。但
    Birthday 类和输入字段尚未连接，因此用户的输入不会被作为 Birthday 存储。现在是时候编写代码，使界面能够添加生日了。为此，你将创建一个新的
    AddBirthdayViewController 类，用于管理故事板中“添加生日”场景的输入字段。（记住，视图由视图控制器管理，这也是你接下来要做的事情。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-2991
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-2992
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，代表并通过代码控制视图。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能描述它将要执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-2993
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件 *ViewController.swift* 的名称，请选择该文件并点击项目导航器中的文件名，使其高亮显示（参见 [图10-4](text00021.html#ch10fig4)）。然后键入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-2994
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过更改文件中的以下行来完成这一操作：
- en: '![](Image00226.jpg)'
  id: totrans-2995
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-2996
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名的* ViewController.swift'
- en: '[PRE351]'
  id: totrans-2997
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: 'to the line:'
  id: totrans-2998
  prefs: []
  type: TYPE_NORMAL
  zh: 到这行：
- en: '[PRE352]'
  id: totrans-2999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3000
  prefs: []
  type: TYPE_NORMAL
  zh: 你将不再需要内置方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3001
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE353]'
  id: totrans-3002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3003
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内置类，包含管理应用程序运行时在屏幕上显示的视图的内置方法。AddBirthdayViewController
    是 UIViewController 的 *子类*，它使我们能够通过实现 UIViewController 的一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3004
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，当视图控制器创建并出现在屏幕上或从屏幕消失时，会调用这些回调方法。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3005
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后立即调用，但在视图显示在屏幕上之前调用。这是进行任何仅需执行一次的初始设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3006
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后和每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3007
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 类似，不同的是它是在视图控制器的视图出现在屏幕上后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3008
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3009
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift期望任何子类化UIViewController的人都使用这个方法，因此它会在你子类化UIViewController时，自动在模板中添加viewDidLoad()的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3010
  prefs: []
  type: TYPE_NORMAL
  zh: Swift没有为其他三个方法提供占位符代码。如果你决定使用其中一个，你可以开始输入，它会自动完成剩余部分。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3011
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只在视图控制器首次创建时调用一次，但viewWillAppear(_:)在每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕被覆盖在视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，而viewDidLoad()不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新新信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3012
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，[第149页](text00021.html#page_149)我们将在AddBirthdayViewController中重写viewDidLoad()。不过现在，我们可以先不管这些方法，先将我们的代码连接到在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3013
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3014
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本字段，一个“姓氏”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为这些输入控件分配变量，这些控件通过IBOutlets与屏幕元素连接。在AddBirthdayViewController类的viewDidLoad()方法之前，添加以下三个属性（灰色的线条表示现有的代码，用于放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3015
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE354]'
  id: totrans-3016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3017
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，即Xcode中我们工作在故事板上的部分。当你将@IBOutlet关键字放在属性前面时，如[图10-5](text00021.html#ch10fig5)所示，属性旁边的边距中会出现一个小圆圈。这表示你可以将该属性连接到故事板中的某个元素。当圆圈没有被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3018
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3019
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* 带有IBOutlet属性的AddBirthdayViewController *用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3020
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为在视图控制器首次创建时，IBOutlet的值是nil。然而，一旦视图加载，IBOutlet将被赋予它们在故事板中所连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3021
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3022
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和输入控件的属性，是时候将First Name和Last Name文本框以及Birthdate日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3023
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，然后在右侧窗格中打开身份检查器。你应该会看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3024
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3025
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3026
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，连接AddBirthdayViewController的IBOutlet属性到“添加生日场景”中的文本框和日期选择器。在左侧大纲视图中点击Add
    a Birthday Scene旁边的三角形，展开该场景中的项目菜单。然后，CONTROL-点击**添加生日**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3027
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Under Outlets，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器，来连接birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以松开（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3028
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3029
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3030
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你会在连接框中看到birthdatePicker旁边列出了Birthdate Picker，并且连接圆圈已填充（见[图10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker
    outlet连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在AddBirthdayViewController中创建该属性时为其指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3031
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3032
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet已经成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3033
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动firstNameTextField的圆圈到First Name标签下方的文本框，来连接firstNameTextField。最后，将lastNameTextField连接到Last
    Name标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3034
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的设置。现在让我们回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3035
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3036
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期设置为未来的日期没有意义，所以我们要写一些代码来防止出生日期选择器（birthdatePicker）选择未来的日期。我们可以通过修改
    AddBirthdayViewController 中的 viewDidLoad() 方法来进行这样的设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”
    中讨论过 viewDidLoad() 方法，[第 145 页](text00021.html#page_145) 上也有相关内容。它会自动添加到我们的视图控制器中，所以请在
    AddBirthdayViewController 中找到这个方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3037
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE355]'
  id: totrans-3038
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3039
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法了，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。注意，保持方法中的 super.viewDidLoad() 这一行非常重要。当你创建一个子类，比如 AddBirthdayViewController，并重写了来自原始父类的方法时，务必确保也调用父类的方法。因为
    Apple 可能在 UIViewController 的 viewDidLoad() 中有一些我们不了解的特殊代码，所以不调用父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3040
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，你只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3041
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够保存生日并使用你在 [第 9 章](text00020.html#ch09) 中创建的按钮取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3042
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3043
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3044
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3045
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，这个方法会在用户每次点击保存按钮时被调用。在 viewDidLoad() 方法之后，将以下代码添加到
    AddBirthdayViewController：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3046
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE356]'
  id: totrans-3047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3048
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 @IBAction 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时就会执行。当你编写
    IBAction 方法时，应该始终包括一个参数，用于表示触发该方法的 UI 元素。通常情况下，会使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以根据需要命名这个参数。在本例中，我们希望每当用户点击保存时，都调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem。所以我们指定 sender 的类型为 UIBarButtonItem
    ➌ 。 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3049
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 与保存按钮连接起来，就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击 "Add a Birthday" 这一行，打开连接对话框。在连接对话框的底部，有一个名为 "Received Actions"
    的部分，如 [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到 "Add
    a Birthday" 视图控制器中的保存按钮上，连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3050
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3051
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部 "Received Actions" 部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3052
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，"The save button was tapped." 这条信息应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3053
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3054
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，获取用户输入的 firstName 和 lastName。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3055
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的字符串属性叫做 text。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以使用它在 saveTapped(_:)
    中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3056
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE357]'
  id: totrans-3057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3058
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你首先创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），或者为空字符串
    ""。你可以使用你在 [第 5 章](text00015.html#ch05) 中学到的空值合并运算符 (??) 来做到这一点。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3059
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。在获取了 firstName 和 lastName 的值之后，将它们打印到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3060
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在文本框中没有输入任何内容的情况下点击保存按钮，然后再在输入了名字和姓氏后尝试一次。你应该看到类似下面的输出：
- en: '[PRE358]'
  id: totrans-3061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3062
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3063
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3064
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由日期选择器显示的日期。对于 birthdatePicker，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3065
  prefs: []
  type: TYPE_NORMAL
  zh: 向你的 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3066
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE359]'
  id: totrans-3067
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3068
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用并看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE360]'
  id: totrans-3069
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3070
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们有了firstName、lastName和birthdate——创建Birthday所需的三项数据！你会注意到调试控制台中显示的日期格式很奇怪，还包括时间和+0000的时区偏移。现在不必过于担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3071
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3072
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化函数来创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3073
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用测试newBirthday实例的打印语句来替代它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3074
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE361]'
  id: totrans-3075
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3076
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，使用Birthday类的初始化函数创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。在创建了newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印输出将与之前的打印语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE362]'
  id: totrans-3077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3078
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3079
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3080
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的页面应该关闭。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法，名为dismiss(animated:completion:)。这个方法正如其名所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3081
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE363]'
  id: totrans-3082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3083
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于控制关闭屏幕时的动画效果。传入true，以便用户看到添加生日页面滑出屏幕的动画效果。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是一段可以传递给函数的代码。如果你希望在视图控制器关闭后执行一些代码，可以使用这个completion闭包。因为你这里不需要做任何事情，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-3084
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3085
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以像之前将 saveTapped(_:) 方法与保存按钮连接一样进行操作。进入
    *Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3086
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击 **+** 进入添加生日屏幕，再点击 **Cancel**。你应该会看到“添加生日”从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3087
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3088
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日信息，但保存后无法查看它们。在 [第11章](text00022.html#ch11)
    中，我们将教你如何在生日列表视图控制器中显示你的所有生日。
- en: '[PRE364]'
  id: totrans-3089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-3090
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式与其他变量类似。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-3091
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你向 Birthday 类添加了一个初始化方法，接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性将它们设置为类的属性 ➌。这将允许你将姓名和日期传递给 Birthday 类，从而存储生日信息。
- en: '**NOTE**'
  id: totrans-3092
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-3093
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步构建每个项目的代码文件。最终版本可以在* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *下载。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-3094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-3095
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个可以保存朋友姓名和出生日期的 Birthday 类，并且在 [第9章](text00020.html#ch09) 的故事板中设置了输入字段。但
    Birthday 类和输入字段之间并没有连接，所以用户输入的内容不会被保存为一个 Birthday 对象。现在是时候编写代码，使界面能够添加生日了。为此，你将创建一个新的
    AddBirthdayViewController 类，用来管理故事板中“添加生日”场景的输入字段。（记住，视图由视图控制器控制，而你接下来要做的就是创建视图控制器。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3096
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3097
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并选择一个单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个表示并通过代码控制视图的
    ViewController 类。故事板中的视图控制器由这个 ViewController 类管理，我们将把它重命名为 AddBirthdayViewController，以便类名能描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3098
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件 *ViewController.swift* 的名称，选择该文件并点击项目导航器中的文件名，使其高亮显示（见 [图10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3099
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件内部通过更改以下行来完成此操作：
- en: '![](Image00226.jpg)'
  id: totrans-3100
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3101
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE365]'
  id: totrans-3102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: 'to the line:'
  id: totrans-3103
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下行：
- en: '[PRE366]'
  id: totrans-3104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3105
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置方法 didReceiveMemoryWarning()，所以你可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3106
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE367]'
  id: totrans-3107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3108
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内置方法的类，用于管理在运行应用程序时出现在屏幕上的视图。AddBirthdayViewController
    是 UIViewController 的 *子类*，它允许我们通过实现自己的版本来控制故事板中的视图控制器，这些版本覆盖了 UIViewController
    的一些内置方法。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3109
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，这些方法会在视图控制器创建并显示或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3110
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器被创建后立即调用，但在其视图显示在屏幕上之前。这是进行任何仅需执行一次的视图初始设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3111
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图显示在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3112
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，只是它是在视图控制器的视图显示在屏幕上之后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3113
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何子类化
    UIViewController 的类都使用这个方法，所以当你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3115
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，自动补全会填充详细内容。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3116
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会调用一次——当视图控制器第一次创建时——viewWillAppear(_:) 每次视图控制器的视图即将显示在屏幕上时都会被调用。因此，如果一个新屏幕覆盖在视图控制器的屏幕上，然后被移除，视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图显示时都刷新显示新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 12 章](text00023.html#ch12) 中，我们将使用 `viewWillAppear(_:)` 方法来刷新我们的生日列表。另外，在
    “[设置最大出生日期](text00021.html#ch10lev2sec6)” （[第 149 页](text00021.html#page_149)）中，我们将在
    AddBirthdayViewController 中重写 `viewDidLoad()` 方法。然而，现在我们可以先不管这些方法，而是将我们的代码连接到我们在
    [第 9 章](text00020.html#ch09) 中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3119
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器有一个 First Name 文本框、一个 Last Name 文本框和一个 Birthdate
    日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为这些输入控件分配变量，并通过 IBOutlets 将它们连接到屏幕上的元素。请在 AddBirthdayViewController
    类的 `viewDidLoad()` 方法之前（灰色行表示现有代码位置）添加以下三个属性：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3120
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE368]'
  id: totrans-3121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3122
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，它是 Xcode 中我们处理故事板的部分。当你在属性前添加
    @IBOutlet 关键字时，旁边的边距上会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3123
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3124
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：AddBirthdayViewController *具有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3125
  prefs: []
  type: TYPE_NORMAL
  zh: '`firstNameTextField` 属性的数据类型是 `UITextField!` ➋ ，这是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlets
    的初始值是 nil。然而，一旦视图被加载，IBOutlets 就会被赋予它们在故事板中所连接的元素的值。'
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 并为输入控件创建了属性，是时候将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧轮廓视图中选择 **Add a Birthday Scene**，并在右侧面板中打开身份检查器。你应该能在顶部看到一个自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-3129
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3130
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中“添加生日”场景旁的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击黄色视图控制器图标旁边的 **Add a Birthday**，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3132
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，选择“Outlets”下的 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象高亮显示为蓝色时，可以松开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3133
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3134
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet。*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”列在连接框中的 birthdatePicker 旁，并且连接圆圈已填充，那么你就知道连接成功了（见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在我们创建 AddBirthdayViewController 的属性时，我们给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3136
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 的圆圈，将其连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3139
  prefs: []
  type: TYPE_NORMAL
  zh: 目前 storyboard 部分已经完成。接下来，让我们回到 *AddBirthdayViewController.swift* 文件中，编写代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3141
  prefs: []
  type: TYPE_NORMAL
  zh: 让人有未来出生日期显然不合理，因此我们需要编写代码防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这个设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论过
    viewDidLoad() 方法，在 [第 145 页](text00021.html#page_145) 中也有提到。该方法会自动添加到我们的视图控制器中，因此在
    AddBirthdayViewController 中找到此方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3142
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE369]'
  id: totrans-3143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3144
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，所以我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad()。请注意，重要的是要保留方法中的super.viewDidLoad()这一行。当你创建一个子类，比如AddBirthdayViewController，并重写来自原始父类的方法时，你需要确保调用父类的方法。苹果可能在UIViewController的viewDidLoad()中有一些特殊的代码我们不知道，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3145
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个表示当前日期和时间的新日期。现在试着运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，它会在每次用户点击保存按钮时被调用。将以下代码添加到AddBirthdayViewController中，紧跟在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3151
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE370]'
  id: totrans-3152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3153
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在➊处是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时该函数将运行。编写IBAction方法时，应始终包括一个参数，用于指定触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名是sender
    ➋ ，但你可以根据需要为该参数命名。在这个例子中，我们希望每当用户点击保存时调用saveTapped(_:)方法，而保存是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem
    ➌ 。在➍处的print(_:)方法帮助我们在测试代码时看到保存按钮何时被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3154
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”（Received
    Actions）的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3155
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3156
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框底部的“接收的动作”部分列出了IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3157
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台应该会显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法添加代码，在用户输入firstName和lastName后，从firstNameTextField和lastNameTextField中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3160
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值就是用户在文本框中输入的内容，所以你可以在saveTapped(_:)方法中使用以下代码来获取用户输入的内容：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3161
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE371]'
  id: totrans-3162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3163
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你首先创建一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在，即用户输入了值）或为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空值合并操作符（??）来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName做相同的操作。当你获取到firstName和lastName的值后，将它们打印到控制台，这样你就可以在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3165
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在文本框中什么也不输入然后点击保存按钮，再试着输入名字和姓氏后再点击保存按钮。你应该会看到类似这样的输出：
- en: '[PRE372]'
  id: totrans-3166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3167
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在你的应用中输入名字，并看到计算机在调试控制台中输出它了。接下来，让我们集中精力让应用输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3169
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前选择器中显示的日期。对于birthdatePicker来说，这就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3170
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3171
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE373]'
  id: totrans-3172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行你的应用程序，看看会发生什么。你应该会看到类似于以下输出的内容：
- en: '[PRE374]'
  id: totrans-3174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3175
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建Birthday所需的！你会注意到调试控制台中显示的日期格式很奇怪，其中还包括时间和+0000的时区偏移。现在不必过于担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3176
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息了，你可以利用这些信息使用Birthday类的初始化方法来创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3178
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `saveTapped(_:)` 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替换它们。然后将以下几行添加到
    `saveTapped(_:)` 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3179
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE375]'
  id: totrans-3180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。在你创建 newBirthday 后，在 ➋ 处，你使用点表示法将其属性输出到调试控制台。打印的输出与之前的 print 语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入一个生日，点击保存，看看发生了什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE376]'
  id: totrans-3182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3183
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在 [第11章](text00022.html#ch11) 学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3185
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日界面应该消失。让我们通过在类中添加一个 `cancelTapped(_:)` 方法来实现这个行为，它将调用一个内置的
    UIViewController 方法，叫做 `dismiss(animated:completion:)`。这个方法做的就是它所说的事情——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 `saveTapped(_:)` 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3186
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE377]'
  id: totrans-3187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3188
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` 函数 ➊ 有两个参数。`animated` 参数用于设置关闭屏幕时的动画效果。传入 true，这样用户就可以看到添加生日界面从屏幕上滑下来，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做
    `completion`。*闭包* 是可以传递到函数中的一段代码。如果你想在视图控制器被关闭后执行某些代码，可以使用 `completion` 闭包。因为你这里不需要做任何事情，所以可以直接传入
    nil。'
- en: '![](Image00233.jpg)'
  id: totrans-3189
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 `cancelTapped(_:)` 方法连接到取消按钮。你可以像将 `saveTapped(_:)` 方法连接到保存按钮一样进行操作。打开
    *Main.storyboard*，然后弹出 Add Birthday 视图控制器的连接对话框。点击并拖动 `cancelTapped(_:)` 方法到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3191
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将编写的代码与应用程序的视觉界面连接起来。您还学习了如何使用输入文本字段和日期选择器来创建具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，您可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向您展示如何在
    Birthdays 表视图控制器中显示您的生日列表。
- en: You can see the new Date data type at ➊ . A Date is declared just like any other
    variable.
  id: totrans-3194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 ➊ 看到新的 Date 数据类型。Date 的声明方式与任何其他变量相同。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-3195
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋，您为 Birthday 类添加了一个初始化函数，该函数接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将这些值设置为类的属性 ➌。这样，您就可以将姓名和日期传递给 Birthday 类，以存储生日信息。
- en: '**NOTE**'
  id: totrans-3196
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-3197
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步为项目构建每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-3198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-3199
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已经有了一个可以保存朋友姓名和出生日期的 Birthday 类，并且在故事板中已经设置了输入字段（这些是在[第9章](text00020.html#ch09)中设置的）。但是，Birthday
    类和输入字段并没有连接起来，因此用户输入的内容不会被存储为 Birthday 对象。现在是时候编写代码，让界面能够添加生日了。为此，您将创建一个新的 AddBirthdayViewController
    类，来管理故事板中“添加生日场景”的输入字段。（请记住，视图是由视图控制器控制的，这正是您接下来要创建的。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3201
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个应用程序并从单视图应用程序模板开始时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，用于表示和控制视图。故事板中的视图控制器由此 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类的名称能更好地描述其功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3202
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件 *ViewController.swift* 的名称，请在项目导航器中选择该文件，然后单击其名称，使其高亮显示（参见[图10-4](text00021.html#ch10fig4)）。接着输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3203
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将 ViewController 类的名称更改为 AddBirthdayViewController。您可以通过修改文件中的这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-3204
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改* ViewController.swift 的文件名'
- en: '[PRE378]'
  id: totrans-3206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'to the line:'
  id: totrans-3207
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE379]'
  id: totrans-3208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3209
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要使用内置方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在，您的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3210
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE380]'
  id: totrans-3211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3212
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个带有内置方法的类，用于管理运行应用程序时出现在屏幕上的视图。AddBirthdayViewController是UIViewController的一个*子类*，它让我们通过实现UIViewController的某些内置方法来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3213
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个有用的内置回调方法，这些方法会在视图控制器创建并出现在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3214
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后，但在视图出现在屏幕之前被调用。这是进行任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3215
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在viewDidLoad()之后，每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3216
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与viewWillAppear(_:)类似，不同之处在于它是在视图控制器的视图出现在屏幕上后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3217
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3218
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的UIViewController子类中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift要求任何继承UIViewController的类都使用这个方法，因此当你继承UIViewController时，Swift会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3219
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，可以开始输入它，自动补全会填写细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3220
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只会被调用一次——当视图控制器第一次创建时——但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕被覆盖在视图控制器的屏幕上，然后移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载。如果你希望每次视图出现时都能刷新显示新的信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3221
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”一节的[第149页](text00021.html#page_149)中，我们将在AddBirthdayViewController中重写viewDidLoad()。不过现在，我们可以先不管这些方法，直接将代码与我们在[第9章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3223
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含一个名为“First Name”的文本字段，一个名为“Last Name”的文本字段和一个“Birthdate”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过将变量分配给与屏幕元素通过IBOutlet连接的输入控件来实现。请在AddBirthdayViewController类的viewDidLoad()方法之前添加以下三个属性（灰色行表示一些现有的代码，方便放置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3224
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE381]'
  id: totrans-3225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3226
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们进行故事板工作的部分。当你在属性前加上@IBOutlet关键字时，属性旁边的边距中会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将属性连接到故事板中的一个元素。当圆圈没有被填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3227
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3228
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *，具有用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3229
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets会被赋予它们在故事板中所连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和输入控件的属性，是时候将“First Name”和“Last Name”文本字段以及“Birthdate”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3232
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，然后在右侧面板中打开身份检查器。你应该在顶部看到一个自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3233
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3234
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中点击“添加生日场景”旁边的三角形，展开该场景中项的菜单。然后，CONTROL-点击**添加生日**，在黄色视图控制器图标旁边，打开一个连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3236
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被蓝色高亮显示时，您可以松开鼠标（请参见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3237
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3238
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* `birthdatePicker` *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 `birthdatePicker` 在连接框中列在 `birthdatePicker` 旁边，并且连接圆圈已填充（见 [图 10-8](text00021.html#ch10fig8)
    ），那么说明连接成功。你只能将 `birthdatePicker` outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，将不会发生任何事情。Xcode
    知道 `birthdatePicker` 必须连接到 UIDatePicker 类，因为在我们创建属性时，在 `AddBirthdayViewController`
    中指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3240
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3241
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* `birthdatePicker` *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3242
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 `firstNameTextField` 从圆圈连接到“First Name”标签下方的文本框。最后，将 `lastNameTextField`
    连接到“Last Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3243
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了 storyboard 的部分。让我们回到 *AddBirthdayViewController.swift* 文件中，在代码中设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3245
  prefs: []
  type: TYPE_NORMAL
  zh: 让人们选择未来的生日日期是不合常理的，所以我们来写一些代码，防止 `birthdatePicker` 选择未来的日期。我们可以通过修改 `AddBirthdayViewController`
    中的 `viewDidLoad()` 方法来进行这种设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”
    中讨论过 `viewDidLoad()` 方法，见 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此请在
    `AddBirthdayViewController` 中找到此方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3246
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE382]'
  id: totrans-3247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3248
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 `UIViewController` 类的一个方法，所以我们需要使用 `override` 关键字重写它，如下所示：`override
    func viewDidLoad()`。请注意，在该方法中保留 `super.viewDidLoad()` 这一行非常重要。当你创建一个子类（如 `AddBirthdayViewController`）并重写原始超类的方法时，你需要确保调用超类的方法。苹果可能在
    `UIViewController` 的 `viewDidLoad()` 方法中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3249
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 `birthdatePicker` 的最大日期，你只需要在 ➊ 处输入 `birthdatePicker.maximumDate = Date()`。`Date()`
    方法创建一个表示当前日期和时间的新日期。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3250
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在 [第 9 章](text00020.html#ch09) 中创建的按钮，保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日记录，并保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3253
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个每次用户点击保存按钮时都会调用的saveTapped(_:)方法开始。将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3255
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE383]'
  id: totrans-3256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3257
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在➊处是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应该运行的代码。在这个例子中，我们将添加一个函数，该函数将在用户点击保存时运行。当你编写IBAction方法时，应该始终包括一个参数，用于表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称是sender
    ➋ ，但你可以根据需要命名此参数。在这个例子中，我们希望每当用户点击保存时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌ 。在➊处的print(_:)方法可以帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3258
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)方法连接到保存按钮，就像将IBOutlet连接到Storyboard元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”这一行，打开连接对话框。在连接对话框底部，有一个名为“已接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到添加生日视图控制器中的保存按钮，进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3259
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3260
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的“已接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3261
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用程序。当你点击保存按钮时，调试控制台应该显示消息“保存按钮被点击了。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3262
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向saveTapped(_:)方法中添加代码，以便在用户输入名字和姓氏后，从firstNameTextField和lastNameTextField中获取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3264
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，名为text。这个text属性的值是输入框中输入的内容，因此你可以使用它来在saveTapped(_:)方法中获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3265
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE384]'
  id: totrans-3266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3267
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或设置为空字符串""。你可以使用nil合并操作符（??）来实现这一点，正如你在[第5章](text00015.html#ch05)中学到的那样。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3268
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对lastName也做相同的操作，在➋处。获取firstName和lastName的值后，将它们打印到控制台，这样你在运行应用程序时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3269
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用，看看会发生什么。尝试在文本框中什么都不输入就点击保存按钮，然后再输入名字和姓氏后再次尝试。您应该会看到类似于以下的输出：
- en: '[PRE385]'
  id: totrans-3270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3271
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在您可以在应用中输入名字，并看到计算机将其输出到调试控制台。接下来，让我们集中精力输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3273
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker，日期就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，因此您可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3274
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3275
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE386]'
  id: totrans-3276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3277
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。您应该会看到类似于以下的输出：
- en: '[PRE387]'
  id: totrans-3278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3279
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们有了 firstName、lastName 和 birthdate ——这三个数据是我们创建一个生日所需的！您会注意到在调试控制台中显示的日期格式很奇怪，里面还包括时间和时区偏移的
    +0000。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不显示时间来显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3280
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，您可以使用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3282
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的打印语句，因为我们将用测试 newBirthday 实例的打印语句替代它们。然后，将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3283
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE388]'
  id: totrans-3284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3285
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    常量。在创建 newBirthday 后，在 ➋ 处，您使用点符号将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次您获取的是来自 newBirthday
    实例的值。运行应用，输入一个生日，并点击保存按钮，看看会发生什么。您应该会在调试控制台中看到类似于以下的输出：
- en: '[PRE389]'
  id: totrans-3286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3287
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。您将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3289
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日屏幕应该关闭。让我们通过向我们的类添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法做的就是它名字所说的——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中，在 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3290
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE390]'
  id: totrans-3291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3292
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 有两个参数。animated 参数用于为关闭屏幕添加动画效果。传入 true 以便用户可以看到添加生日屏幕从屏幕上滑下去，看起来就像是一个专业的应用！第二个参数是一个可选的闭包，名为
    completion。*闭包*是可以传入函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。由于你不需要这里执行任何操作，所以可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-3293
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3294
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样进行操作。进入 *Main.storyboard*
    并调出添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3295
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **取消**。你应该能看到添加生日屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你所学的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: At ➋ , you add an initializer to the Birthday class that takes a firstName ,
    lastName , and birthdate as input parameters. Then, using the self property, you
    set them to the class properties ➌ . This will let you pass names and dates to
    the Birthday class to store a birthday.
  id: totrans-3298
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➋ 处，你为 Birthday 类添加了一个初始化器，该初始化器接受 firstName、lastName 和 birthdate 作为输入参数。然后，使用
    self 属性，将它们赋值给类属性 ➌ 。这样你就可以将姓名和日期传递给 Birthday 类，以存储一个生日。
- en: '**NOTE**'
  id: totrans-3299
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-3300
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步为每个项目构建代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-3301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-3302
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你已经有了一个可以保存朋友姓名和生日日期的Birthday类，并且在[第9章](text00020.html#ch09)的故事板中设置了输入字段。但是，Birthday类和输入字段尚未连接，因此用户的输入不会作为Birthday存储。现在是时候编写代码来使界面能够添加生日了。为此，你将创建一个新的AddBirthdayViewController类来管理故事板中“添加生日”场景的输入字段。（记住，视图由视图控制器管理，这就是你接下来要做的事。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3304
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用程序并从单一视图应用程序模板开始时，Xcode会自动创建一个名为*ViewController.swift*的文件，其中包含一个表示并控制视图的ViewController类。故事板中的视图控制器由这个ViewController类管理，我们将重新命名它为AddBirthdayViewController，这样类名就可以描述它将要执行的任务。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3305
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件*ViewController.swift*的名称，请选择该文件并点击其名称，使其在项目导航器中被高亮显示（见[图10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3306
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以通过在文件中更改以下这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-3307
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3308
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改ViewController.swift文件名*'
- en: '[PRE391]'
  id: totrans-3309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: 'to the line:'
  id: totrans-3310
  prefs: []
  type: TYPE_NORMAL
  zh: 更改到这一行：
- en: '[PRE392]'
  id: totrans-3311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3312
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置的didReceiveMemoryWarning()方法，因此可以通过删除该方法来清理你的代码。现在你的类应该看起来像这样：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3313
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE393]'
  id: totrans-3314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3315
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个内置类，提供了用于管理在运行应用程序时显示在屏幕上的视图的方法。AddBirthdayViewController是UIViewController的*子类*，它允许我们通过实现UIViewController的一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3316
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个有用的内置回调方法，这些方法将在视图控制器创建后以及视图控制器的视图出现在屏幕上或从屏幕消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3317
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后立即调用，但在其视图出现在屏幕上之前调用。这是做任何你只想做一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3318
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在viewDidLoad()之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3319
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与viewWillAppear(_:)类似，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3320
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3321
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类`UIViewController`中重写这些方法。其中第一个方法`viewDidLoad()`非常有用。Swift期望任何继承自`UIViewController`的子类都使用这个方法，所以当你子类化`UIViewController`时，Swift会自动在模板中为`viewDidLoad()`添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3322
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中一个，你可以开始输入，自动完成功能会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3323
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管`viewDidLoad()`只会在视图控制器首次创建时调用一次，`viewWillAppear(_:)`会在视图控制器的视图即将出现在屏幕上时每次被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕，然后移除该屏幕，导致视图控制器的屏幕重新出现，`viewWillAppear(_:)`会再次被调用，但`viewDidLoad()`不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都刷新其内容，可以重写`viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3324
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用`viewWillAppear(_:)`方法来刷新我们的生日列表。此外，在“[设置最大生日](text00021.html#ch10lev2sec6)”部分中，[第149页](text00021.html#page_149)我们将重写`viewDidLoad()`方法来处理`AddBirthdayViewController`。然而，现在，我们可以暂时不处理这些方法，直接将我们的代码与[第9章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3325
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3326
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含了一个“名字”文本框、一个“姓氏”文本框和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量赋给连接到屏幕元素的`IBOutlet`输入控件来完成。将以下三个属性添加到`AddBirthdayViewController`类的`viewDidLoad()`方法之前（灰色的行表示已有代码，位置如下）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3327
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE394]'
  id: totrans-3328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3329
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们进行故事板操作的部分。当你在一个属性前加上@IBOutlet关键字时，属性旁边会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将这个属性连接到故事板中的一个元素。当圆圈没有被填充时，意味着该属性还没有连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3330
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3331
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *具有用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3332
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋，它是一个隐式解包的可选值，因为当视图控制器首次创建时，IBOutlets
    的值是 nil。然而，一旦视图加载，IBOutlets 会被赋予它们在故事板中连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3334
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来就是将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3335
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*，然后在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧窗格中打开 Identity Inspector。你应该能看到顶部的
    Custom Class 部分。将类更改为 AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3336
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3337
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本框和日期选择器。点击左侧大纲视图中
    **Add a Birthday Scene** 旁边的三角形，展开该场景中项的菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**，打开一个连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3339
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Outlets 部分可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器，来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3340
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3341
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充，那么你就知道连接成功了（见[图
    10-8](text00021.html#ch10fig8)）。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为在我们创建属性时，在 AddBirthdayViewController
    中给它指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3343
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3344
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3345
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动它的圆圈，将 firstNameTextField 连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3346
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的部分工作。接下来，返回到 *AddBirthdayViewController.swift* 文件，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3348
  prefs: []
  type: TYPE_NORMAL
  zh: 人的出生日期不可能是未来的日期，因此让我们编写一些代码，防止 `birthdatePicker` 选择未来的日期。我们可以通过修改 `AddBirthdayViewController`
    中的 `viewDidLoad()` 方法来完成这个设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”
    第 [145 页](text00021.html#page_145) 中讨论过 `viewDidLoad()` 方法。它会自动添加到我们的视图控制器中，所以找到
    `AddBirthdayViewController` 中的这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3349
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE395]'
  id: totrans-3350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3351
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 `UIViewController` 类的一个方法，所以我们需要使用 `override` 关键字来重写它，像这样：`override
    func viewDidLoad()`。请注意，方法中必须保留 `super.viewDidLoad()` 这一行。当你创建一个子类（如 `AddBirthdayViewController`）并重写原始父类的方法时，确保也调用父类中的方法非常重要。苹果可能在
    `UIViewController` 的 `viewDidLoad()` 中有一些我们不了解的特殊代码，因此不调用这个父类方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3352
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 `birthdatePicker` 的 `maximumDate`，你只需要在 ➊ 处输入 `birthdatePicker.maximumDate
    = Date()`。`Date()` 方法创建一个新的日期对象，它表示当前的日期和时间。现在试着运行应用程序。你应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3353
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在 [第 9 章](text00020.html#ch09) 中创建的按钮来保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3355
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮吧！当用户点击保存时，应用程序应该根据用户输入的信息创建一个 `Birthday` 并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3356
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3357
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 `saveTapped(_:)` 方法开始，每当用户点击保存按钮时，这个方法就会被调用。将以下代码添加到 AddBirthdayViewController
    中，紧接着 `viewDidLoad()` 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3358
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE396]'
  id: totrans-3359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3360
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 `@IBAction` 是一个关键字，它将一个函数直接与视图控制器中的一个元素连接起来，并允许我们指定当用户对该元素执行某个操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时它会运行。编写
    `IBAction` 方法时，你应该始终包含一个表示触发该方法的 UI 元素的参数。通常，使用下划线来隐藏参数标签，参数名称是 `sender` ➋，但你也可以根据需要命名此参数。在这种情况下，我们希望每当用户点击保存（一个
    `UIBarButtonItem`）时，调用 `saveTapped(_:)` 方法。因此，我们指定 `sender` 的类型是 `UIBarButtonItem`
    ➌。 `print(_:)` 方法 ➍ 可以帮助我们在测试代码时看到保存按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3361
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到保存按钮，就像将一个 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL -点击 “Add a Birthday” 这一行，打开连接对话框。在连接对话框的底部，有一个叫做 "Received Actions"
    的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动从 `saveTapped:` 旁边的圆圈到 "Add
    a Birthday" 视图控制器中的保存按钮，以便将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3362
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3363
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框底部的 "Received Actions" 部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3364
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，应该会在调试控制台中显示 "The save button was tapped." 这条信息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3365
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3366
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们向 `saveTapped(_:)` 方法中添加代码，以便在用户输入名字后，从 `firstNameTextField` 和 `lastNameTextField`
    中获取用户的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3367
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField` 类有一个名为 `text` 的可选字符串属性。这个 `text` 属性的值是用户输入到文本框中的内容，因此你可以用它来在
    `saveTapped(_:)` 中获取用户的输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3368
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE397]'
  id: totrans-3369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3370
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`（如果它存在，也就是用户输入了内容），否则设置为一个空字符串
    `""`。你可以使用在[第 5 章](text00015.html#ch05)中学到的“空合并运算符”（??）来实现这一点。这里我们使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3371
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 执行相同的操作。在你为 `firstName` 和 `lastName` 获取值后，将它们打印到控制台，以便你在运行应用时能够看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3372
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中什么也不输入的情况下点击保存按钮，然后在输入名字和姓氏后再试一次。你应该会看到类似下面的输出：
- en: '[PRE398]'
  id: totrans-3373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3374
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在你的应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3376
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `birthdatePicker` 获取日期和从 `firstNameTextField` 或 `lastNameTextField` 获取文本一样简单。`UIDatePicker`
    类有一个 `date` 属性，这是当前由选择器显示的日期。对于 `birthdatePicker`，这就是 `birthdatePicker.date`。当用户改变
    `UIDatePicker` 时，`date` 属性也会发生变化，所以你可以通过 `birthdayPicker.date` 获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3377
  prefs: []
  type: TYPE_NORMAL
  zh: 向你的 `saveTapped(_:)` 方法中添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3378
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE399]'
  id: totrans-3379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3380
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看发生了什么。你应该会看到类似以下的输出：
- en: '[PRE400]'
  id: totrans-3381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3382
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日记录所需要的！你会注意到，在调试控制台中显示的日期格式有点奇怪，还包括了时间和时区偏移（+0000）。目前不需要太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式，以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3383
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3384
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息，通过Birthday类的初始化方法来创建一个生日记录。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3385
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句替代它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3386
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE401]'
  id: totrans-3387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3388
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你通过Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate常量。创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你获取的是来自newBirthday实例的值。运行应用程序，输入一个生日，并点击保存，看看会发生什么。你应该会在调试控制台中看到类似下面的输出：
- en: '[PRE402]'
  id: totrans-3389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3390
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日记录。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日记录。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3392
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法——dismiss(animated:completion:)。这个方法就是它所说的那样——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3393
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE403]'
  id: totrans-3394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3395
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 接受两个参数。animated参数用于动画化关闭屏幕。传入true，这样用户可以看到“添加生日”屏幕从界面滑下。看起来就像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。completion闭包可以在视图控制器被关闭后执行任何你希望执行的代码。因为你这里不需要做任何事情，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-3396
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3397
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。您可以像将 saveTapped(_:) 方法与保存按钮连接一样，进行操作。进入 *Main.storyboard*，调出添加生日视图控制器的连接对话框。然后点击并拖动
    cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3398
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **取消**。您应该看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**您学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3400
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何将编写的代码与应用的视觉界面连接起来。您还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，您可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示您的生日列表。
- en: '**NOTE**'
  id: totrans-3401
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*We’ll be building each code file for the projects step-by-step. The final
    versions are available from* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *.*'
  id: totrans-3402
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们将逐步为项目构建每个代码文件。最终版本可以从* [https://www.nostarch.com/iphoneappsforkids/](https://www.nostarch.com/iphoneappsforkids/)
    *获取。*'
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-3403
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-3404
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您已经有了一个可以存储朋友姓名和出生日期的 Birthday 类，并且您已经在故事板中设置了输入字段（在[第9章](text00020.html#ch09)中）。但是，Birthday
    类和输入字段尚未连接，因此用户输入的数据不会作为 Birthday 存储。现在是时候编写代码以使界面能够添加生日了。为此，您将创建一个新的 AddBirthdayViewController
    类来管理故事板中“添加生日”场景的输入字段。（记住，视图是由视图控制器控制的，这就是您接下来要做的事。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3405
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3406
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，表示并通过代码控制一个视图。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3407
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择它，并在项目导航器中点击其名称，使其高亮显示（参见[图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3408
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将 ViewController 类的名称更改为 AddBirthdayViewController。您可以通过在文件中更改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-3409
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3410
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE404]'
  id: totrans-3411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: 'to the line:'
  id: totrans-3412
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE405]'
  id: totrans-3413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3414
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不再需要内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在您的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3415
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE406]'
  id: totrans-3416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3417
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个类，内建了管理应用运行时出现在屏幕上的视图的方法。AddBirthdayViewController是UIViewController的*子类*，它允许我们通过实现UIViewController的一些内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3418
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个非常有用的内建回调方法，这些方法会在视图控制器创建并且视图出现在屏幕上或从屏幕消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3419
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后但在视图出现在屏幕上之前被调用。这是进行视图初始设置的好地方，适合做只需执行一次的操作。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3420
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在viewDidLoad()之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3421
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与viewWillAppear(_:)类似，只不过它是在视图控制器的视图出现在屏幕后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3422
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3423
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类UIViewController中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift期望任何继承UIViewController的子类都使用这个方法，因此当你继承UIViewController时，它会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3424
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位代码。如果你决定使用其中之一，你可以开始输入，自动补全会填写细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3425
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只在视图控制器首次创建时调用一次，但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上并且被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)将再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载。如果你希望每次视图出现时都用新信息刷新视图，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3426
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在[第10章第6节](text00021.html#ch10lev2sec6)的“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，我们将在AddBirthdayViewController中重写viewDidLoad()。不过，现在我们可以先忽略这些方法，将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3428
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的Add a Birthday视图控制器包含一个First Name文本框、一个Last Name文本框和一个Birthdate日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过为与屏幕元素连接的输入控件分配变量来实现这一点。将以下三个属性添加到AddBirthdayViewController类的顶部，放在viewDidLoad()方法之前（灰色行表示一些现有代码，用于定位）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3429
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE407]'
  id: totrans-3430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3431
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，它是Xcode中我们工作于故事板的部分。当你在一个属性前加上@IBOutlet关键字时，在旁边的边距中会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3432
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3433
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* AddBirthdayViewController *与IBOutlet属性的输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3434
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet就会被赋予它们在故事板中所连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3435
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3436
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及其输入控件的属性，是时候将First Name和Last Name文本框以及Birthdate日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3437
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该能看到顶部的Custom
    Class部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3438
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3439
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3440
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本框和日期选择器。在左侧大纲视图中点击Add
    a Birthday Scene旁边的三角形以展开该场景中的项目菜单。然后，CONTROL-点击**添加生日**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3441
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Under Outlets部分，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击birthdatePicker旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被蓝色高亮时，你可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3442
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3443
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3444
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，您会看到在连接框中 birthdatePicker 旁边列出了 Birthdate Picker，并且连接圆圈已经填充（见[图 10-8](text00021.html#ch10fig8)）。您只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在创建 AddBirthdayViewController 属性时指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3445
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3446
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3447
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动将 firstNameTextField 从其圆圈连接到“First Name”标签下的文本字段。最后，将 lastNameTextField
    连接到“Last Name”标签下的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3448
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成故事板的工作。让我们回到 *AddBirthdayViewController.swift*，以在代码中设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3449
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3450
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的生日出现在未来是不合逻辑的，所以我们编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论过
    viewDidLoad() 方法，见 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController
    中的这个方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3451
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE408]'
  id: totrans-3452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3453
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字重写它，像这样：override
    func viewDidLoad()。注意，必须保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类（例如 AddBirthdayViewController）并重写原始父类的方法时，确保调用父类的方法非常重要。Apple
    在 UIViewController 的 viewDidLoad() 中可能有我们不知道的特殊代码，因此如果不调用这个父类方法，可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3454
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个新的日期，表示当前日期和时间。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3455
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便通过在[第 9 章](text00020.html#ch09)中创建的按钮，在此视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3457
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3458
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个saveTapped(_:)方法开始，每次用户点击保存按钮时都会调用该方法。将以下代码添加到AddBirthdayViewController中，紧跟在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3460
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE409]'
  id: totrans-3461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3462
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数与视图控制器中的一个元素直接连接，并允许我们指定当用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时该函数会运行。当你编写一个IBAction方法时，应该始终为触发方法的UI元素添加一个参数。通常，会使用下划线来隐藏参数标签，参数名为sender
    ➋，但你可以将此参数命名为任何你想要的。在这个例子中，我们希望每次用户点击保存按钮时都调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。在➍处的print(_:)方法有助于我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3463
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)方法连接到保存按钮，就像将IBOutlet连接到故事板元素一样。回到你的*Main.storyboard*文件，按住CONTROL键点击“添加生日”这一行打开连接对话框。连接对话框的底部有一个名为“接收的动作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，点击并拖动saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3464
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3465
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions列在连接对话框底部的“接收的动作”中。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3466
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，调试控制台应该会显示“保存按钮被点击了。”的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3468
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入名字后，从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3469
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性叫做text。这个text属性的值是用户在文本框中输入的内容，所以你可以在saveTapped(_:)方法中通过以下代码获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3470
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE410]'
  id: totrans-3471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3472
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，也就是用户输入了值），否则设置为空字符串""。你可以使用nil合并运算符（??）来实现这一点，这在[第5章](text00015.html#ch05)中已经学过了。我们使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3473
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3474
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中什么都不输入然后点击保存，再输入姓名后再试一次。你应该会看到类似以下的输出：
- en: '[PRE411]'
  id: totrans-3475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3476
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3477
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3478
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前由选择器显示的日期。对于 birthdatePicker ，这个属性就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3479
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3480
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE412]'
  id: totrans-3481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3482
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE413]'
  id: totrans-3483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3484
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了 firstName、lastName 和 birthdate ——这三个数据足以创建一个生日！你会注意到，调试控制台中显示的日期格式很奇怪，包含了时间以及时区偏移的
    +0000。暂时不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3485
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3486
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3487
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替换它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3488
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE414]'
  id: totrans-3489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3490
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你通过点语法将其属性输出到调试控制台。打印输出将与之前的 print 语句相同，不过这次你从 newBirthday
    实例中获取值。运行应用，输入一个生日，并点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE415]'
  id: totrans-3491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3492
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3494
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，应该关闭“添加生日”界面。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内建的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法的作用正如它所描述的——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3495
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE416]'
  id: totrans-3496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3497
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画关闭界面。传入 true，用户可以看到“添加生日”界面从屏幕上滑下，效果看起来就像一个专业的应用一样！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是一段可以传入函数的代码。如果你想在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。由于你不需要在这里执行任何操作，可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-3498
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3499
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到“取消”按钮。你可以像将 saveTapped(_:) 方法连接到“保存”按钮一样，按照相同的方式操作。打开
    *Main.storyboard* 并显示“添加生日”视图控制器的连接对话框。从 cancelTapped(_:) 方法列表拖动到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3500
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用，点击 **+** 进入“添加生日”界面，再点击 **取消**。你应该看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3502
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的生日对象。现在你可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表视图控制器中显示你的生日列表。
- en: '**PROGRAMMING USER INPUT**'
  id: totrans-3503
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程用户输入**'
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-3504
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个能够保存朋友姓名和生日日期的 Birthday 类，并且在[第9章](text00020.html#ch09)中你在 storyboard
    中设置了输入字段。但是，Birthday 类和输入字段并没有连接，所以用户的输入不会被存储为生日对象。现在是时候编写代码，让界面可以添加生日信息了。为此，你将创建一个新的
    AddBirthdayViewController 类，来管理 storyboard 中“添加生日”场景的输入字段。（记住，一个视图由一个视图控制器控制，而这正是你接下来要创建的内容。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3505
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3506
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，文件中包含一个 ViewController
    类，它用代码表示和控制视图。故事板中的视图控制器是由这个 ViewController 类管理的，我们将其重命名为 AddBirthdayViewController，这样类名就能描述它的作用。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3507
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift* ，请在项目导航器中选择该文件，然后点击文件名，使其高亮显示（参见 [图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3508
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController 。你可以在文件中通过修改以下行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-3509
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3510
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名的示例* ViewController.swift'
- en: '[PRE417]'
  id: totrans-3511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: 'to the line:'
  id: totrans-3512
  prefs: []
  type: TYPE_NORMAL
  zh: 改为以下行：
- en: '[PRE418]'
  id: totrans-3513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3514
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3515
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE419]'
  id: totrans-3516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3517
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内建的类，提供管理视图的方法，这些视图会在你运行应用时显示在屏幕上。AddBirthdayViewController
    是 UIViewController 的一个 *子类*，它让我们通过实现一些 UIViewController 内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3518
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，当视图控制器创建并显示在屏幕上或从屏幕上消失时，这些回调方法会被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3519
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后、视图出现在屏幕之前被调用。这里是进行任何一次性视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3520
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后以及每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3521
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，唯一不同的是，它在视图控制器的视图出现在屏幕上之后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3522
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3523
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。其中，第一个方法 viewDidLoad() 非常有用。Swift 期望所有继承自
    UIViewController 的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3524
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，它会自动补全细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3525
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只会在视图控制器第一次创建时调用一次，但viewWillAppear(_:)每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上并被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经加载在另一个屏幕后面。如果你希望每次视图出现时都刷新新信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3526
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，位于[第149页](text00021.html#page_149)，我们将重写AddBirthdayViewController中的viewDidLoad()。然而，目前我们可以先放着这些方法不动，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3527
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3528
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框，一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过为这些控件分配变量，并使用IBOutlet将它们连接到屏幕元素来实现。将以下三个属性添加到AddBirthdayViewController类的顶部，在viewDidLoad()方法之前（灰色行表示一些现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3529
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE420]'
  id: totrans-3530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3531
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们编辑故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距处会出现一个小圆圈，如[图
    10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3532
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3533
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *与用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3534
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包可选值，因为当视图控制器第一次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet将被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3535
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3536
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和用于输入控件的属性，接下来是将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来的时候了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3537
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，并在右侧面板中打开身份检查器。你应该会看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3538
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3539
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3540
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本字段和日期选择器。点击左侧大纲视图中“添加生日”场景旁的三角形按钮，展开该场景中的项目菜单。然后，按住
    CONTROL 键点击**添加生日**，这会在黄色视图控制器图标旁打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3541
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开鼠标（参见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3542
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3543
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3544
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”列在连接框中 birthdatePicker 旁边，并且连接圆圈已填充，说明连接成功（参见[图10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在创建 AddBirthdayViewController 的属性时，我们为其指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3545
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3546
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3547
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，从 firstNameTextField 的圆圈连接到 First Name 标签下的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3548
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成故事板的工作。接下来回到 *AddBirthdayViewController.swift* 文件中设置代码中的最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3549
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3550
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期设置为未来的日期是没有意义的，所以我们来写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这样的设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论过
    viewDidLoad() 方法（见[第145页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此在 AddBirthdayViewController
    中找到该方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3551
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE421]'
  id: totrans-3552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3553
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字重写它，如下所示：override
    func viewDidLoad()。请注意，保留super.viewDidLoad()这一行非常重要。当你创建一个子类（例如AddBirthdayViewController）并重写原始超类中的方法时，你需要确保调用超类中的方法。Apple可能在UIViewController的viewDidLoad()方法中有一些特殊的代码我们不了解，所以如果不调用这个超类方法，可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3554
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需要在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期对象，表示当前的日期和时间。现在试着运行一下应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3555
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便可以通过你在[第9章](text00020.html#ch09)中创建的按钮，在这个视图控制器中保存生日和取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3556
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3557
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现“保存”按钮功能！当用户点击“保存”时，应用程序应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3558
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3559
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个saveTapped(_:)方法，该方法会在每次用户点击“保存”按钮时被调用。将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3560
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE422]'
  id: totrans-3561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3562
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，该函数会在用户点击“保存”时执行。当你编写一个IBAction方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以随意命名这个参数。在这种情况下，我们希望每次用户点击保存时都调用saveTapped(_:)方法，它是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。print(_:)方法在➍处帮助我们查看“保存”按钮是否已被点击，以便我们在测试代码时确认。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3563
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮，就像将IBOutlet连接到故事板元素一样。返回你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3564
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3565
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions在连接对话框底部的“接收的操作”下列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3566
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台中应该显示“保存按钮已点击。”的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3567
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3568
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，获取用户输入的firstNameTextField和lastNameTextField中的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3569
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是用户在文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3570
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE423]'
  id: totrans-3571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3572
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊位置，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并运算符（??）来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3573
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋位置做同样的操作，处理lastName。在你获取到firstName和lastName的值之后，将它们打印到控制台，这样你就能在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3574
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中什么也不输入，然后点击保存按钮，再输入一个名字和姓氏后再次尝试。你应该能看到类似以下的输出：
- en: '[PRE424]'
  id: totrans-3575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3576
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用程序中输入一个名字，并在调试控制台中查看计算机输出的结果。接下来，让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3577
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3578
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，所以你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3579
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3580
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE425]'
  id: totrans-3581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3582
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE426]'
  id: totrans-3583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3584
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三个数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括了时间和+0000的时区偏移。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3585
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3586
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3587
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3588
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE427]'
  id: totrans-3589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3590
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化器创建一个newBirthday实例，并传入firstName、lastName和birthdate常量。创建newBirthday后，在➋，你通过点语法输出它的属性到调试控制台。打印的输出与之前的print语句相同，但这次你获取的是newBirthday实例的值。运行应用程序，输入生日，点击保存，看看发生了什么。你应该会在调试控制台看到类似下面的输出：
- en: '[PRE428]'
  id: totrans-3591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3592
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday实例。你将会在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3593
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3594
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法会调用UIViewController的一个内置方法dismiss(animated:completion:)。这个方法做的正是它名字所表达的——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3595
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE429]'
  id: totrans-3596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3597
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制关闭屏幕时的动画效果。传入true，用户就能看到“添加生日”界面滑出屏幕，效果就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是一段可以传入函数的代码块。如果在关闭视图控制器后你希望执行某些代码，可以使用这个completion闭包。由于你在这里不需要执行任何操作，所以可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-3598
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3599
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法连接到取消按钮。你可以像连接saveTapped(_:)方法到保存按钮那样进行操作。进入*Main.storyboard*，并打开Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法的列表项到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3600
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3601
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3602
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日信息，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: At this point, you have a Birthday class that can hold a friend’s name and birthdate,
    and you have input fields in the storyboard that you set up in [Chapter 9](text00020.html#ch09)
    . But the Birthday class and the input fields aren’t connected, so the user’s
    input isn’t stored as a Birthday . It’s time to write code to make the interface
    add birthdays. To do that, you’ll create a new AddBirthdayViewController class
    to manage the input fields in the Add a Birthday Scene in the storyboard. (Remember
    that a view is controlled by a view controller, which is what you’ll make next.)
  id: totrans-3603
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经有了一个可以保存朋友姓名和生日日期的 Birthday 类，并且在[第 9 章](text00020.html#ch09)中设置了输入字段。但
    Birthday 类和输入字段还没有连接起来，所以用户输入的内容不会被存储为一个 Birthday。现在是时候编写代码来让界面能够添加生日信息了。为此，你将创建一个新的
    AddBirthdayViewController 类来管理故事板中“添加生日”场景的输入字段。（记住，视图是由视图控制器管理的，而视图控制器就是你接下来要创建的东西。）
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3604
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3605
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单一视图应用模板开始时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，该类通过代码表示和控制一个视图。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便类名能够描述它的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3606
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请在项目导航器中选择它，然后点击文件名使其高亮（参见[图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3607
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件内部通过更改以下行来实现：
- en: '![](Image00226.jpg)'
  id: totrans-3608
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3609
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE430]'
  id: totrans-3610
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: 'to the line:'
  id: totrans-3611
  prefs: []
  type: TYPE_NORMAL
  zh: 到以下这一行：
- en: '[PRE431]'
  id: totrans-3612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3613
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置方法 didReceiveMemoryWarning()，所以你可以通过删除这个方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3614
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE432]'
  id: totrans-3615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3616
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个类，带有内置的方法，用于管理当你运行应用时出现在屏幕上的视图。AddBirthdayViewController
    是 UIViewController 的 *子类*，它让我们通过实现 UIViewController 一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3617
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，当视图控制器被创建并显示或从屏幕上消失时，它们会被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3618
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建完成后但视图还未显示时被调用。这里是做任何一次性初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3619
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后、每次视图控制器的视图显示在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3620
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，只是它是在视图控制器的视图显示到屏幕后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3621
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3622
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 UIViewController 中重写这些方法中的任何一个。其中，第一个方法 viewDidLoad() 非常有用。Swift 期望所有子类化
    UIViewController 的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动为 viewDidLoad() 方法添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3623
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，自动补全会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3624
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会被调用一次——在视图控制器首次创建时——但 viewWillAppear(_:) 每次视图控制器的视图即将出现在屏幕上时都会被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，导致视图控制器的屏幕重新显示，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都能刷新新信息，你可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3625
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 12 章](text00023.html#ch12)，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。同时，在 “[设置最大生日](text00021.html#ch10lev2sec6)”
    中的 [第 149 页](text00021.html#page_149)，我们将在 AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以先不管这些方法，直接将我们的代码连接到在
    [第 9 章](text00020.html#ch09) 中设置的输入控件上。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3626
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3627
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器有一个名为 First Name 的文本框、一个名为 Last Name 的文本框和一个名为
    Birthdate 的日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为连接到屏幕元素的输入控件分配变量。这些输入控件是通过 IBOutlets
    与界面连接的。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前添加以下三个属性（灰色的行表示一些现有代码，用于指示位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3628
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE433]'
  id: totrans-3629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3630
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *接口构建器*，它是 Xcode 中用于操作故事板的部分。当你在属性前面添加
    @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，意味着该属性还没有连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3631
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3632
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *带有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3633
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型为UITextField! ➋，是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，当视图加载后，IBOutlet会根据它们在故事板中连接的内容被赋予值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3634
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3635
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController并为输入控件创建了属性，是时候将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3636
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，选择左侧大纲视图中的**添加生日场景**，并在右侧窗格中打开身份检查器。你应该看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3637
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3638
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3639
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日”场景中的文本字段和日期选择器。点击左侧大纲视图中“添加生日”场景旁边的三角形，展开该场景中的项目菜单。然后，按住CONTROL键并点击**添加生日**，在黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3640
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Under Outlets，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击其旁边的空圆圈并将其拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象变为蓝色高亮时，你可以松开（参见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3641
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3642
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3643
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中的birthdatePicker旁边，并且连接圆圈已经填充，说明连接成功（参见[图 10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker
    outlet连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在AddBirthdayViewController中为它指定了这个数据类型，当我们创建该属性时。
- en: '![](Image00230.jpg)'
  id: totrans-3644
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3645
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3646
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并从其圆圈拖动到“名字”标签下方的文本字段来连接firstNameTextField。最后，将lastNameTextField连接到“姓氏”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3647
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的部分。接下来，让我们回到*AddBirthdayViewController.swift*文件，编写代码来设置一个最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3648
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3649
  prefs: []
  type: TYPE_NORMAL
  zh: 人的生日不可能是未来的日期，因此我们需要写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来完成这个设置。我们在[《创建添加生日视图控制器》](text00021.html#ch10lev2sec3)一节中讨论了viewDidLoad()方法，详见[第145页](text00021.html#page_145)。它是自动添加到我们的视图控制器中的，因此请在AddBirthdayViewController中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3650
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE434]'
  id: totrans-3651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3652
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()方法已经是UIViewController类的一个方法，因此我们需要使用override关键字来重写它，代码如下：override
    func viewDidLoad()。注意，必须保留super.viewDidLoad()这一行代码。当你创建一个子类（如AddBirthdayViewController）并重写父类中的方法时，要确保你也调用父类的方法。苹果可能在UIViewController的viewDidLoad()中有一些我们不清楚的特殊代码，因此不调用这个父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3653
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置birthdatePicker的maximumDate，只需要在➊位置输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前的日期和时间。现在试着运行应用，应该无法选择未来的日期了！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3654
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使用你在[第9章](text00020.html#ch09)中创建的按钮，能够在这个视图控制器中保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3655
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3656
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮的功能！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3657
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3658
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要创建一个saveTapped(_:)方法，每次用户点击“保存”按钮时都会调用这个方法。将以下代码添加到AddBirthdayViewController中，紧接着viewDidLoad()方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3659
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE435]'
  id: totrans-3660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3661
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时执行。当你编写IBAction方法时，你应该总是包括一个参数，用于表示触发该方法的UI元素。通常会使用下划线来隐藏参数标签，参数名称为sender➋，但你可以为这个参数取任何名字。在这种情况下，我们希望在用户点击保存时调用saveTapped(_:)方法，它是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem➌。在测试代码时，➍处的print(_:)方法帮助我们看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3662
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为接收动作的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3663
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3664
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的接收动作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3665
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台应该显示“保存按钮已被点击”的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3666
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3667
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入名字后，可以从firstNameTextField和lastNameTextField获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3668
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是输入到文本字段中的内容，因此你可以在saveTapped(_:)方法中使用它获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3669
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE436]'
  id: totrans-3670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3671
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，即用户输入了一个值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现这一点。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3672
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的处理。获取firstName和lastName的值后，将它们打印到控制台中，这样你就能在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3673
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再尝试输入名字和姓氏后点击保存。你应该会看到类似下面的输出：
- en: '[PRE437]'
  id: totrans-3674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3675
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在你的应用程序中输入一个名字，并在调试控制台中查看计算机输出它。接下来，让我们集中精力输出一个日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3676
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3677
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，表示当前日期选择器中显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3678
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3679
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE438]'
  id: totrans-3680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3681
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE439]'
  id: totrans-3682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3683
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经拥有了firstName、lastName和birthdate——这三个数据是创建生日所需的！你会注意到调试控制台中显示的日期格式很奇怪，里面还包括时间和+0000的时区偏移。暂时不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3684
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3685
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3686
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用打印语句来测试新的newBirthday实例。然后在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3687
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE440]'
  id: totrans-3688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3689
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate常量。在创建了newBirthday之后，在➋处，你通过点符号输出其属性到调试控制台。打印的输出与之前的打印语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该会在调试控制台看到类似下面的输出：
- en: '[PRE441]'
  id: totrans-3690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3691
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只是创建了一个生日。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3692
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3693
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这个行为，该方法会调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的作用就是它所说的——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中，紧接着saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3694
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE442]'
  id: totrans-3695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3696
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制关闭屏幕时的动画效果。传入 true，这样用户就能看到添加生日屏幕从屏幕上滑下，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包*是一个可以传递给函数的代码块。completion 闭包可以在视图控制器被关闭后执行任何你想运行的代码。因为你这里不需要做任何操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-3697
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3698
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以用与将 saveTapped(_:) 方法与保存按钮连接相同的方式来完成这一步。进入*Main.storyboard*，并打开
    Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3699
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用程序，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到添加生日屏幕从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3700
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3701
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日信息，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在生日列表视图控制器中显示你的生日信息。
- en: '**CREATING THE ADD BIRTHDAY VIEW CONTROLLER**'
  id: totrans-3702
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建添加生日视图控制器**'
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3703
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并从单一视图应用模板开始时，Xcode 会自动创建一个名为*ViewController.swift*的文件，其中包含一个表示并通过代码控制视图的
    ViewController 类。故事板中的视图控制器由这个 ViewController 类管理，我们将其重命名为 AddBirthdayViewController，以便让类名更准确地描述它将执行的功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3704
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名*ViewController.swift*，请选择它并点击项目导航器中的文件名，使其被高亮显示（见[图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名，*AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3705
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以在文件内更改以下行：
- en: '![](Image00226.jpg)'
  id: totrans-3706
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3707
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改文件名* ViewController.swift'
- en: '[PRE443]'
  id: totrans-3708
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: 'to the line:'
  id: totrans-3709
  prefs: []
  type: TYPE_NORMAL
  zh: 到这行：
- en: '[PRE444]'
  id: totrans-3710
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3711
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置的 didReceiveMemoryWarning() 方法，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3712
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE445]'
  id: totrans-3713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3714
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个内置的类，提供了用于管理在应用运行时出现在屏幕上的视图的方法。AddBirthdayViewController是UIViewController的一个*子类*，它允许我们通过实现一些UIViewController内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3715
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个非常有用的内置回调方法，这些方法会在视图控制器被创建并且视图出现在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3716
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建完成后，但在视图出现在屏幕上之前调用。这是进行任何只需执行一次的视图初始化设置的绝佳位置。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3717
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在viewDidLoad()之后调用，并且在视图控制器的视图每次显示在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3718
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与viewWillAppear(_:)类似，区别在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3719
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3720
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。其中第一个方法，viewDidLoad()，非常有用。Swift期望任何子类化UIViewController的人都使用这个方法，因此当你子类化UIViewController时，它会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3721
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中之一，你可以开始输入，自动补全会填充详细内容。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3722
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只会调用一次——即视图控制器首次创建时——但viewWillAppear(_:)会在每次视图控制器的视图即将显示在屏幕上时调用。因此，如果一个屏幕被放置在视图控制器的屏幕上方，然后移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会被调用，因为视图控制器已经在另一个屏幕后面加载。如果你希望每次视图出现时刷新内容，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3723
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，位于[第149页](text00021.html#page_149)，我们将在AddBirthdayViewController中重写viewDidLoad()。不过，现在我们可以暂时不使用这些方法，而是将我们的代码与在[第9章](text00020.html#ch09)中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3724
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3725
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个名字字段、一个姓氏字段和一个生日日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这通过为与屏幕元素连接的输入控件分配变量来实现。将以下三个属性添加到
    AddBirthdayViewController 类的顶部，在 viewDidLoad() 方法之前（灰色的行表示部分现有代码，仅用于位置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3726
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE446]'
  id: totrans-3727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3728
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB 代表 *接口构建器*，这是 Xcode 中我们操作故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，属性旁边的边距会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈未被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3729
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3730
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *具有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3731
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋ ，它是一个隐式解包可选类型，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋值为它们在故事板中所连接的内容。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3732
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3733
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将名字字段、姓氏字段和生日日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3734
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，选择左侧大纲视图中的 **添加生日场景**，并打开右侧窗格中的身份检查器。你应该能看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3735
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3736
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6: 将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3737
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形展开该场景中的项目菜单。然后，CONTROL
    -点击**添加生日**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3738
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3739
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3740
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* `birthdatePicker` *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3741
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到`Birthdate Picker`显示在连接框中，且与`birthdatePicker`并列，并且连接圆圈已填充（参见[图10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将`birthdatePicker`出口连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode知道`birthdatePicker`必须连接到`UIDatePicker`类，因为我们在`AddBirthdayViewController`中创建该属性时指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3742
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3743
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* `birthdatePicker` *的出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3744
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动从`firstNameTextField`的圆圈到“First Name”标签下方的文本框，连接`firstNameTextField`。最后，将`lastNameTextField`连接到“Last
    Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3745
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，你已经完成了界面设计部分。让我们回到*AddBirthdayViewController.swift*，在代码中设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3746
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3747
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，生日日期不可能是未来的日期，因此我们需要写一些代码来防止`birthdatePicker`选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的`viewDidLoad()`方法来完成这一设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论了`viewDidLoad()`方法，见[第145页](text00021.html#page_145)。它是自动添加到我们的视图控制器中的，因此可以在`AddBirthdayViewController`中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3748
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE447]'
  id: totrans-3749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3750
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的方法，因此我们需要使用`override`关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，保留`super.viewDidLoad()`这一行是很重要的。当你创建一个子类，比如`AddBirthdayViewController`，并重写了父类的某个方法时，你需要确保调用父类的方法。苹果可能在`UIViewController`的`viewDidLoad()`方法中有一些我们不知道的特殊代码，因此不调用这个父类的方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3751
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的`maximumDate`，你只需在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法创建了一个新的日期对象，该对象是当前的日期和时间。现在尝试运行应用。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3752
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中创建的按钮，从这个视图控制器保存一个生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3753
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3754
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3755
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3756
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，该方法会在每次用户点击保存按钮时被调用。将以下代码添加到AddBirthdayViewController中的viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3757
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE448]'
  id: totrans-3758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3759
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接与视图控制器中的元素连接，并允许我们指定当用户对该元素进行操作时应运行的代码。在这种情况下，我们将添加一个在用户点击保存时运行的函数。当你编写IBAction方法时，应该始终为触发该方法的UI元素包括一个参数。通常使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以根据需要命名此参数。在这种情况下，我们希望在用户点击保存按钮时调用saveTapped(_:)方法，保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌。在➔4处的print(_:)方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3760
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接就像将IBOutlet与故事板元素连接一样。返回到你的*Main.storyboard*文件，按住CONTROL键并点击“添加生日”行以打开连接对话框。在连接对话框的底部是一个名为“接收的动作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在这个部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3761
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3762
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions在连接对话框底部的接收的动作部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3763
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，"保存按钮已被点击"的信息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3764
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3765
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入后，从firstNameTextField和lastNameTextField中提取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3766
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个名为text的可选String属性。该text属性的值是输入文本框中所输入的内容，因此你可以使用它来在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3767
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE449]'
  id: totrans-3768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3769
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值）或空字符串""。你可以使用nil合并操作符(??)来实现这一点，你在[第5章](text00015.html#ch05)中已经学习过了。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3770
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的事情。获取firstName和lastName的值后，将它们打印到控制台中，以便你在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3771
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在没有输入任何内容的情况下点击“保存”按钮，然后再尝试输入名字和姓氏后点击“保存”。你应该看到类似如下的输出：
- en: '[PRE450]'
  id: totrans-3772
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3773
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3774
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3775
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，表示当前日期选择器显示的日期。对于birthdatePicker来说，这就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来访问用户输入的生日日期。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3776
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3777
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE451]'
  id: totrans-3778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3779
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用看看会发生什么。你应该看到类似如下的输出：
- en: '[PRE452]'
  id: totrans-3780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3781
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate这三项数据，这些是创建一个生日记录所需要的！你会注意到，调试控制台中显示的日期格式有些奇怪，还包括了时间和+0000的时区偏移。现在不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式，以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3782
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日记录**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3783
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日记录。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3784
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用新的打印语句来测试newBirthday实例。然后将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3785
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE453]'
  id: totrans-3786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3787
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate常量。创建newBirthday之后，在➋处，你使用点表示法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，不过这次你得到的是来自newBirthday实例的值。运行应用，输入一个生日，然后点击“保存”按钮，看看会发生什么。你应该在调试控制台中看到类似如下的输出：
- en: '[PRE454]'
  id: totrans-3788
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3789
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮仅会创建一个生日记录。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日记录。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3790
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3791
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。让我们通过在类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内建的
    UIViewController 方法 dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3792
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE455]'
  id: totrans-3793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3794
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制关闭屏幕的动画效果。传入 true，让用户看到添加生日界面从屏幕滑动出去。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是一段可以传递给函数的代码块。如果你希望在视图控制器消失后执行某些代码，可以使用 completion 闭包。由于在这里没有需要执行的代码，可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-3795
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3796
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法与取消按钮连接。你可以按照和将 saveTapped(_:) 方法与保存按钮连接的方式来完成此操作。打开
    *Main.storyboard*，并调出 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3797
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的知识**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3799
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表视图控制器中显示你保存的生日列表。
- en: When you make an app and start with a Single View Application template, Xcode
    automatically creates a file called *ViewController.swift* , which contains a
    ViewController class that represents and controls a view with code. The view controller
    in the storyboard is managed with this ViewController class, which we’ll rename
    AddBirthdayViewController so that the class’s name describes what it will be doing.
  id: totrans-3800
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个应用并使用单视图应用模板时，Xcode 会自动创建一个名为 *ViewController.swift* 的文件，其中包含一个 ViewController
    类，用于通过代码表示和控制视图。故事板中的视图控制器是通过这个 ViewController 类来管理的，我们将其重命名为 AddBirthdayViewController，以便类名能准确描述其功能。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3801
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选择该文件并在项目导航器中点击文件名，使其高亮（见[图 10-4](text00021.html#ch10fig4)）。然后输入新的文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3802
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将 ViewController 类的名称更改为 AddBirthdayViewController。你可以通过在文件中修改以下这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-3803
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3804
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改* ViewController.swift 的文件名'
- en: '[PRE456]'
  id: totrans-3805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'to the line:'
  id: totrans-3806
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE457]'
  id: totrans-3807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3808
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置的`didReceiveMemoryWarning()`方法，因此可以通过删除这个方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3809
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE458]'
  id: totrans-3810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3811
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController`是一个带有内置方法的类，用于管理在运行你的应用时出现在屏幕上的视图。`AddBirthdayViewController`是`UIViewController`的一个*子类*，它让我们可以通过实现`UIViewController`的一些内置方法的自定义版本来控制故事板中的视图控制器。'
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3812
  prefs: []
  type: TYPE_NORMAL
  zh: '`UIViewController`类有四个有用的内置回调方法，这些方法会在视图控制器创建并且其视图出现在屏幕上或从屏幕上消失时被调用。这些回调方法是：'
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3813
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 这个方法在视图控制器创建完成后、视图显示在屏幕上之前调用。这是进行任何只需要执行一次的视图初始设置的好地方。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3814
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)` 这个方法在`viewDidLoad()`之后被调用，并且在每次视图控制器的视图出现在屏幕上之前被调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3815
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)` 这个方法类似于`viewWillAppear(_:)`，不同之处在于它是在视图控制器的视图出现在屏幕上后调用的。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3816
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 这个方法在视图控制器的视图即将离开屏幕时调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3817
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类`UIViewController`中重写这些方法中的任何一个。其中第一个方法`viewDidLoad()`非常有用。Swift期望任何继承`UIViewController`的子类都使用这个方法，因此当你创建`UIViewController`的子类时，它会自动在模板中添加`viewDidLoad()`的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3818
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，自动完成功能会帮你填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3819
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然`viewDidLoad()`只会在视图控制器第一次创建时调用一次，但`viewWillAppear(_:)`每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕覆盖了视图控制器的屏幕，然后又被移除，导致视图控制器的屏幕重新出现，那么`viewWillAppear(_:)`会再次被调用，而`viewDidLoad()`则不会，因为视图控制器已经加载并处于另一个屏幕的后面。如果你希望每次视图出现时都刷新新的信息，你可以重写`viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3820
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)，我们将使用`viewWillAppear(_:)`方法来刷新我们的生日列表。另外，在“[设置最大生日](text00021.html#ch10lev2sec6)”中，[第149页](text00021.html#page_149)我们会在`AddBirthdayViewController`中重写`viewDidLoad()`。不过现在，我们可以先不管这些方法，直接将我们的代码与[第9章](text00020.html#ch09)中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3821
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接代码与输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3822
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器有一个 First Name 文本字段，一个 Last Name 文本字段和一个 Birthdate
    日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过为与屏幕元素连接的输入控件分配变量来实现这一点。将以下三个属性添加到 AddBirthdayViewController
    类的顶部，在 viewDidLoad() 方法之前（灰色的行表示部分现有代码，仅用于位置标注）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3823
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE459]'
  id: totrans-3824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3825
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *interface builder*，即 Xcode 中用于处理故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，会在旁边的边缘出现一个小圆圈，如 [图10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有被填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3826
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3827
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5:* AddBirthdayViewController *具有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3828
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性 firstNameTextField 的数据类型 UITextField! ➋ 是一个隐式解包的可选类型，因为在视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载，IBOutlet 将会赋予它们在故事板中连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3829
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3830
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3831
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧窗格中打开身份检查器。你应该会看到顶部有一个自定义类部分。将类更改为
    AddBirthdayViewController，如 [图10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-3832
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3833
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3834
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本字段和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中项目的菜单。然后，按住 CONTROL 键点击 **Add a Birthday**，点击黄色的视图控制器图标，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3835
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器来连接 birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以放开鼠标（参见
    [图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3836
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3837
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7: 连接日期选择器到 birthdatePicker outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3838
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到出生日期选择器旁边的 birthdatePicker 在连接框中列出，并且连接圆圈已填充（见 [图 10-8](text00021.html#ch10fig8)），就知道连接成功了。你只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时给它指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3839
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3840
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8: birthdatePicker outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3841
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈到 First Name 标签下方的文本框来连接 firstNameTextField。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3842
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了 storyboard 的工作。现在回到 *AddBirthdayViewController.swift* 中，在代码里设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3843
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3844
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期出现在未来是不合逻辑的，因此我们需要编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这一点。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论过
    viewDidLoad() 方法（见 [第145页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此请在 AddBirthdayViewController
    中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3845
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE460]'
  id: totrans-3846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3847
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，所以我们需要使用 override 关键字来重写它，如下所示：override
    func viewDidLoad()。请注意，重要的是在方法中保留这一行 super.viewDidLoad()。当你创建一个子类，比如 AddBirthdayViewController，并重写原父类的方法时，你需要确保调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3848
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3849
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，这样你就可以通过在 [第9章](text00020.html#ch09) 中创建的按钮来保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3850
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3851
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3852
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3853
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个saveTapped(_:)方法，它将在每次用户点击保存按钮时被调用。将以下代码添加到AddBirthdayViewController中，放在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3854
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE461]'
  id: totrans-3855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3856
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，用于将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素采取操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时，该函数将被执行。当您编写IBAction方法时，应该始终包含一个参数，用于指定触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为sender
    ➋，但是您可以根据需要为该参数取任何名称。在这种情况下，我们希望saveTapped(_:)方法在用户点击保存时被调用，而保存是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。在➍处的print(_:)方法可以帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3857
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet连接到故事板元素一样。返回到您的*Main.storyboard*文件中。按住CONTROL键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，点击并从saveTapped:旁边的圆圈拖动到添加生日视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3858
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3859
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框的接收操作下列出了IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3860
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行您的应用程序。当您点击保存按钮时，调试控制台应该显示消息"The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3861
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3862
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入名字和姓氏后，从firstNameTextField和lastNameTextField中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3863
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，名为text。这个text属性的值是用户在文本框中输入的内容，因此您可以在saveTapped(_:)方法中使用以下代码来获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3864
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE462]'
  id: totrans-3865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3866
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，您创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。您可以使用在[第5章](text00015.html#ch05)中学到的空合并运算符（??）来完成此操作。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3867
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对lastName进行相同的操作，在➋处获取firstName和lastName的值后，将它们打印到控制台，这样在运行应用时您可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3868
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似这样的输出：
- en: '[PRE463]'
  id: totrans-3869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3870
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3871
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3872
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前显示在选择器上的日期。对于birthdatePicker，它是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3873
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3874
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE464]'
  id: totrans-3875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3876
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下输出：
- en: '[PRE465]'
  id: totrans-3877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3878
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了firstName、lastName和birthdate——创建Birthday所需的三条数据！你会注意到调试控制台中显示的日期格式很奇怪，还包括时间和+0000作为时区偏移。现在不必太担心这个。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3879
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3880
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息使用Birthday类的初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3881
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除打印语句，因为我们将用新的print语句来测试newBirthday实例。然后，将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3882
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE466]'
  id: totrans-3883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3884
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday后，在
    ➋ 处，你通过点表示法将其属性输出到调试控制台。打印输出与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该会看到调试控制台中类似以下的输出：
- en: '[PRE467]'
  id: totrans-3885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3886
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3888
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日屏幕应该消失。让我们通过向我们的类中添加一个 cancelTapped(_:) 方法来实现这一行为，它将调用一个内建的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法正如它所描述的那样——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法之后，添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3889
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE468]'
  id: totrans-3890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3891
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就可以看到“添加生日”屏幕从屏幕上滑下，就像一个专业的应用程序一样！第二个参数是一个可选的闭包，叫做
    completion。*闭包*是可以传递给函数的代码块。completion 闭包可以在视图控制器被关闭后运行任何代码。由于您不需要在这里执行任何操作，您可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-3892
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3893
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。您可以像将 saveTapped(_:) 方法与保存按钮连接一样，使用相同的方式来操作。在
    *Main.storyboard* 中打开 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3894
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入“添加生日”屏幕，然后点击 **取消**。您应该看到“添加生日”屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3895
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3896
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将编写的代码与应用程序的视觉界面连接起来。您还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，您可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向您展示如何在“生日”表视图控制器中显示您的生日列表。
- en: To change the name of the file *ViewController.swift* , select it and click
    inside its name in the Project navigator so that it’s highlighted (see [Figure
    10-4](text00021.html#ch10fig4) ). Then type the new filename, *AddBirthdayViewController*
    .
  id: totrans-3897
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改文件名 *ViewController.swift*，请选中它并在项目导航器中点击文件名，使其高亮显示（参见[图 10-4](text00021.html#ch10fig4)）。然后输入新文件名
    *AddBirthdayViewController*。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3898
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将 ViewController 类的名称更改为 AddBirthdayViewController。您可以在文件中通过更改以下行来完成此操作：
- en: '![](Image00226.jpg)'
  id: totrans-3899
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3900
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改 ViewController.swift 的文件名*'
- en: '[PRE469]'
  id: totrans-3901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: 'to the line:'
  id: totrans-3902
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为：
- en: '[PRE470]'
  id: totrans-3903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3904
  prefs: []
  type: TYPE_NORMAL
  zh: 您将不再需要内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在，您的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3905
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE471]'
  id: totrans-3906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-3907
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内置方法的类，用于管理在运行应用时显示在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的*子类*，它让我们可以通过实现一些 UIViewController 的内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-3908
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，它们会在视图控制器创建并显示在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-3909
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后立即调用，但在其视图显示在屏幕上之前调用。这是进行任何视图初始设置的一个好地方，这些设置只需要做一次。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-3910
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后、每次视图控制器的视图即将显示在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-3911
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，只是它在视图控制器的视图显示在屏幕上之后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-3912
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法会在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-3913
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的 UIViewController 子类中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望任何继承
    UIViewController 的子类都使用这个方法，所以当你子类化 UIViewController 时，模板会自动为 viewDidLoad() 添加占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-3914
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并不会为其他三个方法提供占位代码。如果你决定使用其中一个，可以开始输入，自动补全会填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-3915
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会被调用一次——即视图控制器首次创建时——但 viewWillAppear(_:) 每次视图控制器的视图即将显示在屏幕上时都会被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时刷新新信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-3916
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，位于[第149页](text00021.html#page_149)，我们将重写
    AddBirthdayViewController 中的 viewDidLoad()。不过目前，我们可以先将这些方法留着不动，并将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-3917
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-3918
  prefs: []
  type: TYPE_NORMAL
  zh: 在 storyboard 中，我们的“添加生日”视图控制器包含一个“名字”文本框，一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这可以通过将变量分配给已连接到屏幕元素的控件来实现。将以下三个属性添加到
    AddBirthdayViewController 类的顶部，在 viewDidLoad() 方法之前（灰色的行表示一些现有代码，作为位置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3919
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE472]'
  id: totrans-3920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-3921
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在 storyboard 中连接的属性前面。IB 代表 *界面构建器*，它是 Xcode 中我们用来处理
    storyboard 的部分。当你在一个属性前面加上 @IBOutlet 关键字时，旁边的边距中会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到
    storyboard 中的一个元素。当圆圈没有被填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-3922
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-3923
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-3924
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 会被赋予它们在 storyboard 中所连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-3925
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-3926
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 以及输入控件的属性，接下来是将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-3927
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 storyboard 中“添加生日”视图控制器的类更改为 AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **添加生日场景**，并打开右侧窗格中的身份检查器。你应该会看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-3928
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-3929
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-3930
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本框和日期选择器。点击左侧大纲视图中“添加生日场景”旁的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键点击 **添加生日**，并点击黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-3931
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到 storyboard 中的日期选择器来连接该属性。当日期选择器对象高亮显示为蓝色时，你可以放开鼠标（见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-3932
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-3933
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-3934
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到连接框中列出了 Birthdate Picker，并且在连接圆圈旁边显示已填充状态（请参见[图 10-8](text00021.html#ch10fig8)），则说明连接成功。您只能将
    birthdatePicker 出口连接到一个日期选择器。如果您尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时为其指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-3935
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-3936
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-3937
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个 firstNameTextField，从它的圆圈连接到“First Name”标签下方的文本框。最后，将 lastNameTextField
    连接到“Last Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-3938
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，您已完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift*，以编写代码设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-3939
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-3940
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人拥有未来的生日日期是没有意义的，因此我们编写一些代码以防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中已经讨论过
    viewDidLoad() 方法，见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此请在 AddBirthdayViewController
    中找到该方法并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3941
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE473]'
  id: totrans-3942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-3943
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：`override
    func viewDidLoad()`。请注意，必须保留方法中的 `super.viewDidLoad()` 这一行。当您创建一个子类（如 AddBirthdayViewController）并重写原始超类的方法时，您希望确保也调用超类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 方法中运行一些我们不知道的特殊代码，因此不调用此超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-3944
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，您只需在 ➊ 处输入 `birthdatePicker.maximumDate =
    Date()`。Date() 方法会创建一个新的日期对象，该日期为当前的日期和时间。现在试着运行一下应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-3945
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便您可以保存一个生日，并使用在[第9章](text00020.html#ch09)中创建的按钮取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-3946
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-3947
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-3948
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-3949
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用它。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3950
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE474]'
  id: totrans-3951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-3952
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，用于将一个函数直接连接到视图控制器中的一个元素，并允许我们指定用户在该元素上执行操作时应运行的代码。在本例中，我们将添加一个函数，当用户点击保存按钮时执行。编写
    IBAction 方法时，应始终包含一个参数，用于表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但你可以根据需要自定义该参数名。在本例中，我们希望每当用户点击保存按钮时，调用
    saveTapped(_:) 方法，该按钮是一个 UIBarButtonItem 。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌ 。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-3953
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 方法连接到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。回到 *Main.storyboard*
    文件中，CONTROL -点击“Add a Birthday”行，打开连接对话框。在连接对话框的底部，有一个名为“Received Actions”的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，点击并拖动从 saveTapped: 旁边的圆圈到 Add a Birthday
    视图控制器中的保存按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-3954
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-3955
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBAction 被列在连接对话框底部的 Received Actions 部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-3956
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，调试控制台中应显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-3957
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-3958
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，用于在用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中提取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-3959
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性 text 。这个 text 属性的值是用户在文本框中输入的内容，因此你可以使用它来获取用户在
    saveTapped(_:) 方法中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3960
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE475]'
  id: totrans-3961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-3962
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你首先创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串
    "" 。你可以使用 nil 合并操作符（??）来实现这一点，这在 [第5章](text00015.html#ch05) 中已经学过。这里使用常量而不是变量是因为我们不会修改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-3963
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。在获取 firstName 和 lastName 的值后，将它们打印到控制台，以便你在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-3964
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本字段中不输入任何内容就点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似于以下的输出：
- en: '[PRE476]'
  id: totrans-3965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-3966
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用程序中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-3967
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-3968
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-3969
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3970
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE477]'
  id: totrans-3971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-3972
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似于以下的输出：
- en: '[PRE478]'
  id: totrans-3973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3974
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据就是我们创建一个 Birthday 所需的！你会注意到调试控制台中显示的日期格式有些奇怪，里面还包括时间和
    +0000 的时区偏移。暂时不必太担心这个问题。我们将在[第 11 章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-3975
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-3976
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类初始化器创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-3977
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替换它们。然后将以下几行代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3978
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE479]'
  id: totrans-3979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-3980
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印输出将与之前的 print 语句相同，但这次你获取的是 newBirthday
    实例的值。运行应用程序，输入一个生日，并点击保存，看看会发生什么。你应该会在调试控制台中看到类似于以下的输出：
- en: '[PRE480]'
  id: totrans-3981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-3982
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个 Birthday 实例。你将在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays
    视图控制器中显示这个 Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-3983
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-3984
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法将调用一个名为dismiss(animated:completion:)的UIViewController内置方法。这个方法的作用正如其名——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中，在saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-3985
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE481]'
  id: totrans-3986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-3987
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于为关闭界面添加动画效果。传入true，这样用户就能看到添加生日界面从屏幕上滑下。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的代码块。如果在视图控制器被关闭后你想执行一些代码，可以使用completion闭包。因为你这里不需要执行任何操作，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-3988
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-3989
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法连接到取消按钮。你可以按照与将saveTapped(_:)方法连接到保存按钮完全相同的方式进行。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-3990
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-3991
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-3992
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将书写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表格视图控制器中显示你的生日列表。
- en: 'Next, you need to change the name of the ViewController class to AddBirthdayViewController
    . You do this inside the file by changing the line:'
  id: totrans-3993
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将ViewController类的名称更改为AddBirthdayViewController。你可以在文件中通过更改以下这一行来完成：
- en: '![](Image00226.jpg)'
  id: totrans-3994
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-3995
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改* ViewController.swift的文件名'
- en: '[PRE482]'
  id: totrans-3996
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: 'to the line:'
  id: totrans-3997
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE483]'
  id: totrans-3998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-3999
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置方法didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4000
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE484]'
  id: totrans-4001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4002
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个类，提供了内置方法来管理运行应用程序时出现在屏幕上的视图。AddBirthdayViewController是UIViewController的*子类*，它允许我们通过实现UIViewController的一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4003
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个有用的内置回调方法，这些方法会在视图控制器创建并显示或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4004
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后、其视图出现在屏幕上之前调用。这是进行任何你只想做一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4005
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在viewDidLoad()之后并且每次视图控制器的视图即将出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4006
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法类似于viewWillAppear(_:)，不同之处在于它是在视图控制器的视图出现在屏幕上后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4007
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4008
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift期望任何子类化UIViewController的人都使用这个方法，所以当你子类化UIViewController时，它会自动为viewDidLoad()方法添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4009
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中一个，可以开始输入它，自动补全会填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4010
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只会在视图控制器第一次创建时调用一次，但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，随后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经加载并在另一个屏幕后面等待显示。如果你希望每次视图出现时刷新新信息，可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4011
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”中，在[第149页](text00021.html#page_149)中，我们将重写`AddBirthdayViewController`中的viewDidLoad()。然而，目前我们可以先不管这些方法，只需将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4012
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4013
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含一个“名字”文本字段、一个“姓氏”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量分配给与屏幕元素连接的输入控件来实现。请在`viewDidLoad()`方法之前将以下三个属性添加到`AddBirthdayViewController`类的顶部（灰色行表示现有代码，供放置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4014
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE485]'
  id: totrans-4015
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4016
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*接口构建器*，这是Xcode中用于编辑故事板的部分。当你在属性前面加上@IBOutlet关键字时，属性旁边会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4017
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4018
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：AddBirthdayViewController *带有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4019
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet将赋予它们在故事板中连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4020
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4021
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController和输入控件的属性，是时候将First Name和Last Name文本字段以及Birthdate日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4022
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，选择左侧大纲视图中的**添加生日场景**，并在右侧窗格中打开身份检查器。你应该能看到顶部的自定义类部分，将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4023
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4024
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4025
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁的三角形，展开该场景中的项目菜单。然后，按住CONTROL键点击**Add
    a Birthday**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4026
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Under Outlets，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击birthdatePicker旁边的空圆圈并拖动到故事板中的日期选择器，来连接birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4027
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4028
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4029
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 在连接框中列在 birthdatePicker 旁边，并且连接圆圈被填充，说明连接成功（参见[图10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中创建属性时指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4030
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4031
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：birthdatePicker outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4032
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动从 firstNameTextField 的圆圈到 First Name 标签下方的文本字段，来连接 firstNameTextField。最后，将
    lastNameTextField 连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4033
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift* 文件，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4034
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4035
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期在未来是没有意义的，因此让我们编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这种设置。我们在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”一节中讨论过
    viewDidLoad() 方法，见[第145页](text00021.html#page_145)。它已经自动添加到我们的视图控制器中，所以找到 AddBirthdayViewController
    中的这个方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4036
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE486]'
  id: totrans-4037
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4038
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字来重写它，代码如下：`override
    func viewDidLoad()`。请注意，保留方法中的 `super.viewDidLoad()` 这一行是很重要的。当你创建一个子类（比如 AddBirthdayViewController）并重写原始父类的方法时，要确保你也调用了父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4039
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需要在 ➊ 处输入 `birthdatePicker.maximumDate =
    Date()`。Date() 方法创建一个新的日期，表示当前的日期和时间。现在试着运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4040
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你能够通过你在[第9章](text00020.html#ch09)中制作的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4041
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4042
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存时，应用程序应该根据输入的信息创建一个 Birthday 对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4043
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4044
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 `saveTapped(_:)` 方法开始，该方法将在用户每次点击保存按钮时被调用。在 `AddBirthdayViewController`
    中，紧跟在 `viewDidLoad()` 方法后面添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4045
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE487]'
  id: totrans-4046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4047
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，在用户点击保存时运行。当你编写
    IBAction 方法时，应该始终包含一个用于表示触发方法的 UI 元素的参数。通常使用下划线来隐藏参数标签，参数名称是 `sender` ➋，但你可以根据需要为该参数命名。在这个例子中，我们希望在用户点击保存时调用
    `saveTapped(_:)` 方法，而保存按钮是一个 `UIBarButtonItem`。所以我们指定 `sender` 的类型是 `UIBarButtonItem`
    ➌。`print(_:)` 方法在 ➍ 处帮助我们查看在测试代码时保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4048
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件中。CONTROL -点击“添加生日”行，打开连接对话框。在连接对话框的底部有一个名为“接收的操作”的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分中，从
    `saveTapped:` 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4049
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4050
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列在连接对话框底部的“接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4051
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，调试控制台应该显示消息：“保存按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4052
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4053
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 `saveTapped(_:)` 方法添加代码，以便在用户输入名字后，从 `firstNameTextField` 和 `lastNameTextField`
    获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4054
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField` 类有一个可选的 String 类型属性 `text`。这个 `text` 属性的值是用户在文本字段中输入的内容，因此你可以使用它来在
    `saveTapped(_:)` 中获取用户的输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4055
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE488]'
  id: totrans-4056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4057
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`，如果存在的话（即用户输入了值），否则设置为一个空字符串
    `""`。你可以使用 `nil 合并运算符 (??)` 来实现这一点，这个运算符你在[第 5 章](text00015.html#ch05)中学到过。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4058
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 做同样的操作。获取 `firstName` 和 `lastName` 的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4059
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再尝试在输入了姓名后点击保存。你应该会看到类似以下的输出：
- en: '[PRE489]'
  id: totrans-4060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4061
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用程序中输入姓名，并在调试控制台中看到计算机输出的内容。接下来，让我们关注如何获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4062
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4063
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，这是当前显示的日期。对于 birthdatePicker，date 就是 birthdatePicker.date。当用户更改 UIDatePicker
    时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4064
  prefs: []
  type: TYPE_NORMAL
  zh: 在 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4065
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE490]'
  id: totrans-4066
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4067
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下内容的输出：
- en: '[PRE491]'
  id: totrans-4068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4069
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我们已经有了 firstName 、lastName 和 birthdate ——这三项数据是我们创建一个 Birthday 所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，里面还包含了时间和
    +0000 的时区偏移。现在不需要太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4070
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4071
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码可以访问用户提供的 firstName 、lastName 和 birthdate 输入数据，你可以利用这些信息通过 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4072
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试新实例 newBirthday 的 print 语句来替换它们。然后在
    saveTapped(_:) 方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4073
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE492]'
  id: totrans-4074
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4075
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入 firstName 、lastName 和 birthdate
    的常量。创建完 newBirthday 后，在 ➋ 处，你使用点符号输出它的属性到调试控制台。打印的输出将与之前的 print 语句相同，但这次你从 newBirthday
    实例中获取值。运行应用程序，输入生日，然后点击保存，看看会发生什么。你应该会在调试控制台看到类似以下内容的输出：
- en: '[PRE493]'
  id: totrans-4076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4077
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4078
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4079
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，“添加生日”屏幕应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，这个方法将调用一个内建的
    UIViewController 方法，叫做 dismiss(animated:completion:)。这个方法做的正是它说的那样——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4080
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE494]'
  id: totrans-4081
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4082
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true 使用户可以看到“添加生日”屏幕从屏幕上滑下。它看起来就像一个专业的应用程序！第二个参数是一个可选闭包，称为
    completion。*闭包*是可以传递给函数的代码块。如果在视图控制器被关闭后你希望执行某些代码，可以使用 completion 闭包。因为你不需要在这里做任何事情，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-4083
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4084
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 连接到取消按钮。你可以按照与将 saveTapped(_:) 方法连接到保存按钮时完全相同的方式进行操作。进入
    *Main.storyboard*，打开“添加生日”视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4085
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击 **+** 进入“添加生日”屏幕，然后点击 **取消**。你应该会看到“添加生日”从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4086
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4087
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将书面代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后无法查看它们。在 [第11章](text00022.html#ch11)
    中，我们将向你展示如何在 Birthdays 表格视图控制器中显示你的生日列表。
- en: '![](Image00226.jpg)'
  id: totrans-4088
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00226.jpg)'
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-4089
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-4：更改文件名为* ViewController.swift'
- en: '[PRE495]'
  id: totrans-4090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: 'to the line:'
  id: totrans-4091
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE496]'
  id: totrans-4092
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-4093
  prefs: []
  type: TYPE_NORMAL
  zh: 你不再需要内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该像这样：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4094
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE497]'
  id: totrans-4095
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4096
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内建方法的类，用于管理在运行应用时显示在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的 *子类*，它允许我们通过实现一些 UIViewController 内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4097
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，当视图控制器创建并显示在屏幕上或从屏幕消失时，这些回调方法会被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4098
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器被创建后、视图出现在屏幕上之前调用。这是进行视图初始化设置的好地方，通常这些设置只需要做一次。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4099
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后调用，并且在每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4100
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不过它是在视图控制器的视图出现在屏幕后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4101
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 希望任何子类化
    UIViewController 的人都能使用这个方法，所以当你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4103
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并不会为其他三个方法提供占位代码。如果你决定使用其中一个，你可以开始输入它，自动补全将填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4104
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会在视图控制器首次创建时调用一次，但 viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上并随后移除，导致视图控制器的屏幕重新出现，那么
    viewWillAppear(_:) 将再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经加载在另一个屏幕后面。如果你希望每次视图出现时都刷新新信息，可以重写
    viewWillAppear(_:) 方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4105
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”（[第149页](text00021.html#page_149)）中，我们将在
    AddBirthdayViewController 中重写 viewDidLoad()。但是现在，我们可以先不管这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4107
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个名为 First Name 的文本框、一个 Last Name 的文本框和一个 Birthdate 的日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这通过为这些输入控件分配与屏幕元素连接的
    IBOutlets 来实现。在 viewDidLoad() 方法之前，在 AddBirthdayViewController 类的顶部添加以下三个属性（灰色行表示一些现有代码，用于定位）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4108
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE498]'
  id: totrans-4109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4110
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于在属性前面，这些属性可以在故事板中连接。IB 代表 *界面构建器*，这是 Xcode 中我们处理故事板的部分。当您在属性前面放置
    @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示您可以将属性连接到故事板中的元素。当圆圈没有填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4111
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4113
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋，是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    会有 nil 值。然而，一旦视图加载，IBOutlet 会被赋值为它们在故事板中连接的对象。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，以便您可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，并在右侧面板中打开身份检查器。您应该能在顶部看到一个“自定义类”部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-4117
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4118
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，以展开该场景中项目的菜单。然后，按住
    CONTROL 键点击 **添加生日**，该操作位于黄色视图控制器图标旁边，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4120
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以在“出口”下看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器来连接它。当日期选择器对象被蓝色高亮显示时，您可以松开（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4121
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4122
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，且连接圆圈已填充（请参见 [图 10-8](text00021.html#ch10fig8)），则表示连接成功。您只能将
    birthdatePicker outlet 连接到日期选择器。如果您尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中创建属性时指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4124
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4125
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：birthdatePicker outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 First Name 标签下方的文本字段，将 firstNameTextField 连接起来。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4127
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了 storyboard 的工作。让我们回到 *AddBirthdayViewController.swift* 中，通过代码设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4128
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，拥有未来的生日日期是不合逻辑的，因此让我们编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这种设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 第
    [145 页](text00021.html#page_145) 中讨论过 viewDidLoad() 方法。它会自动添加到我们的视图控制器中，因此请在 AddBirthdayViewController
    中找到此方法并添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4130
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE499]'
  id: totrans-4131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4132
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，如：override
    func viewDidLoad()。请注意，方法中必须保留 super.viewDidLoad() 这一行。当您创建一个子类（如 AddBirthdayViewController）并重写原父类的方法时，您需要确保也调用父类中的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，所以如果不调用父类的方法，可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4133
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，您只需在 ➊ 处输入 `birthdatePicker.maximumDate =
    Date()`。Date() 方法创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便能够保存生日并取消从此视图控制器中添加生日，使用您在 [第 9 章](text00020.html#ch09) 中制作的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现 Save 按钮！当用户点击 Save 时，应用程序应该根据输入的信息创建一个生日对象并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个saveTapped(_:)方法，每次用户点击保存按钮时都会调用该方法。在viewDidLoad()方法后，向AddBirthdayViewController中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4139
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE500]'
  id: totrans-4140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4141
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的@IBAction是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素进行操作时应该运行的代码。在这种情况下，我们将添加一个在用户点击保存按钮时运行的函数。当你编写IBAction方法时，应该始终包含一个参数，表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以将这个参数命名为任何你想要的名字。在这种情况下，我们希望每当用户点击保存按钮时调用saveTapped(_:)方法，保存按钮是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。在➋处的print(_:)方法帮助我们查看在测试代码时保存按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4142
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来就像将IBOutlet连接到故事板元素一样。返回到*Main.storyboard*文件。CONTROL-点击“Add
    a Birthday”行以打开连接对话框。在连接对话框的底部，有一个名为Received Actions的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到Add
    a Birthday视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4143
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4144
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction列在连接对话框的底部的Received Actions部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4145
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，消息"The save button was tapped."应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框中读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入姓名后，从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4148
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性text。这个text属性的值是用户在文本框中输入的内容，因此你可以使用以下代码在saveTapped(_:)中获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4149
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE501]'
  id: totrans-4150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4151
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并运算符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName执行相同的操作。获取firstName和lastName的值后，将它们打印到控制台，以便你在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4153
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中没有输入任何内容的情况下点击保存按钮，然后再在输入了名字和姓氏后重试。你应该看到类似下面的输出：
- en: '[PRE502]'
  id: totrans-4154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4155
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入一个名字，并在调试控制台中看到计算机输出这个名字。接下来，让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4157
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前由日期选择器显示的日期。对于 birthdatePicker ，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4158
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4159
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE503]'
  id: totrans-4160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下输出的内容：
- en: '[PRE504]'
  id: totrans-4162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4163
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经有了 firstName 、 lastName 和 birthdate ——这三项数据是创建生日所需的！你会注意到调试控制台中显示的日期格式有些奇怪，它还包括时间和时区偏移的
    +0000。现在不用太担心这个问题，我们将在 [第11章](text00022.html#ch11) 中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName 、 lastName 和 birthdate 输入信息，你可以使用这些信息通过 Birthday 类的初始化方法来创建一个
    Birthday 对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句替换它们，这些语句用于测试 newBirthday
    实例。然后将以下几行代码添加到 saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4167
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE505]'
  id: totrans-4168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个新的 newBirthday 实例，并传入了 firstName 、 lastName 和
    birthdate 的常量。创建 newBirthday 后，在 ➋ 处，你通过点符号将它的属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你是从
    newBirthday 实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE506]'
  id: totrans-4170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4171
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday 对象。你将学习如何在 [第11章](text00022.html#ch11) 中将这个生日显示在 Birthdays
    视图控制器中。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4173
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，Add a Birthday 屏幕应该消失。我们通过向我们的类添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个名为
    dismiss(animated:completion:) 的 UIViewController 内置方法。这个方法做的正是它所描述的——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4174
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE507]'
  id: totrans-4175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4176
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画效果来关闭屏幕。传入 true 以便用户能看到
    Add a Birthday 屏幕从屏幕滑下。这看起来就像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为 completion。一个 *闭包* 是一段可以传递给函数的代码块。completion
    闭包可以在视图控制器被关闭后执行任何代码。因为你在这里不需要任何操作，所以可以传入 nil。
- en: '![](Image00233.jpg)'
  id: totrans-4177
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样操作。打开 *Main.storyboard*，并调出
    Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4179
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击 **+** 进入 Add a Birthday 屏幕，然后点击 **Cancel**。你应该看到 Add a Birthday
    屏幕从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接。你还学会了如何使用输入文本框和日期选择器来创建一个具有 firstName、lastName 和
    birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)，我们将向你展示如何在一个
    Birthdays 表视图控制器中显示你保存的生日列表。
- en: '*Figure 10-4: Changing the filename of* ViewController.swift'
  id: totrans-4182
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-4：更改 ViewController.swift 的文件名*'
- en: '[PRE508]'
  id: totrans-4183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: 'to the line:'
  id: totrans-4184
  prefs: []
  type: TYPE_NORMAL
  zh: 到这行：
- en: '[PRE509]'
  id: totrans-4185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-4186
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该是这样的：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4187
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE510]'
  id: totrans-4188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4189
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内置方法的类，用于管理当你运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的一个 *子类*，它允许我们通过实现 UIViewController 一些内置方法的自定义版本，来控制 storyboard
    中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4190
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，当视图控制器被创建并出现在屏幕上或从屏幕消失时，这些回调方法会被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4191
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后、视图出现在屏幕之前被调用。这是进行任何只需要执行一次的视图初始设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4192
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法会在 viewDidLoad() 之后，每次视图控制器的视图出现在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4193
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，不过它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4194
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4195
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法。第一个方法 viewDidLoad() 非常有用。Swift 希望任何子类化 UIViewController
    的类都使用此方法，因此当你子类化 UIViewController 时，它会自动在模板中添加一个 viewDidLoad() 的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4196
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中之一，可以开始输入，它会自动完成。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4197
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会被调用一次——当视图控制器首次创建时——viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除以使视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，而 viewDidLoad() 则不会，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时都能刷新信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4198
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    第149页([page 149](text00021.html#page_149))中，我们将重写 AddBirthdayViewController 中的
    viewDidLoad()。然而，现在我们可以暂时不使用这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4200
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名”文本框，一个“姓”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量赋值给与屏幕元素通过
    IBOutlets 连接的输入控件来实现。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前，添加以下三个属性（灰色行表示一些现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4201
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE511]'
  id: totrans-4202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4203
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB代表*界面构建器*，这是Xcode中我们进行故事板编辑的部分。当你在属性前面加上@IBOutlet关键字时，属性旁边的边距会出现一个小圆圈，如[图
    10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4204
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4205
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *具有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4206
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet属性的值为nil。然而，一旦视图加载，IBOutlet属性会根据它们在故事板中连接的元素赋予相应的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及其输入控件的属性，接下来是连接“名字”和“姓氏”文本框以及“生日”日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4209
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该在顶部看到一个自定义类部分。将类更改为AddBirthdayViewController，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4210
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4211
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本框和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中项目的菜单。然后，按住CONTROL键点击**添加生日**，在黄色视图控制器图标旁边打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4213
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Outlets部分可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被蓝色高亮显示时，可以松开鼠标（见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4214
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4215
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到Birthdate Picker在连接框中列在birthdatePicker旁边，并且连接圆圈已经填充（见[图10-8](text00021.html#ch10fig8)），那么你就知道连接成功了。你只能将birthdatePicker插座连接到日期选择器。如果你试图将它连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController中的属性时，我们给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4217
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4218
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *插座已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4219
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈将firstNameTextField连接到First Name标签下方的文本字段。最后，将lastNameTextField连接到Last
    Name标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4220
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到*AddBirthdayViewController.swift*中，编写代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期出现在未来是没有意义的，所以让我们编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在“[创建Add
    Birthday视图控制器](text00021.html#ch10lev2sec3)”中讨论过viewDidLoad()方法，在[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此找到AddBirthdayViewController中的这个方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4223
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE512]'
  id: totrans-4224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4225
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字来重写它，如下所示：override
    func viewDidLoad()。注意，在该方法中保留super.viewDidLoad()这一行是非常重要的。当你创建一个子类，比如AddBirthdayViewController，并且重写了原父类的方法时，你需要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()中运行一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4226
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前日期和时间的日期。现在试着运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够从这个视图控制器中保存一个生日并取消添加生日，使用的是你在[第9章](text00020.html#ch09)中制作的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4231
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一个 saveTapped(_:) 方法，该方法在用户每次点击保存按钮时被调用。在 AddBirthdayViewController 中，在
    viewDidLoad() 方法之后添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4232
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE513]'
  id: totrans-4233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4234
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，用来将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时该函数会运行。当你编写
    IBAction 方法时，应该始终包含一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋ ，但你可以为这个参数命名任何你想要的名称。在这种情况下，我们希望
    saveTapped(_:) 方法在用户点击保存时被调用，而保存按钮是 UIBarButtonItem 类型。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4235
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 与保存按钮连接起来，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击 "Add a Birthday" 行以打开连接对话框。在连接对话框的底部，有一个名为 "Received Actions"
    的区域，如 [图 10-9](text00021.html#ch10fig9) 所示。在该区域中，从 saveTapped: 旁边的圆圈点击并拖动到 "Add
    a Birthday" 视图控制器中的保存按钮以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4236
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4237
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列在连接对话框底部的 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4238
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用程序。当你点击保存按钮时，调试控制台应该会显示 "The save button was tapped." 消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，当用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4241
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性叫做 text。这个 text 属性的值是用户在文本字段中输入的内容，所以你可以在 saveTapped(_:)
    中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4242
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE514]'
  id: totrans-4243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4244
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在，即用户输入了值）或空字符串
    ""。你可以使用 nil 合并运算符 (??) 来实现这一点，这一点你在 [第 5 章](text00015.html#ch05) 中学过。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4245
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 lastName 在 ➋ 处执行相同的操作。在获取 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用程序时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4246
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在没有输入任何内容的情况下点击“保存”按钮，然后再尝试在输入了名字和姓氏之后点击。你应该会看到类似下面的输出：
- en: '[PRE515]'
  id: totrans-4247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4248
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4250
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4251
  prefs: []
  type: TYPE_NORMAL
  zh: 在 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4252
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE516]'
  id: totrans-4253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE517]'
  id: totrans-4255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4256
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这三项数据是我们创建生日所需的！你会注意到在调试控制台中显示的日期格式有点奇怪，包含了时间和
    +0000 时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以利用这些信息使用 Birthday 类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替换它们。然后，在
    saveTapped(_:) 方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4260
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE518]'
  id: totrans-4261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你获取的是 newBirthday
    实例中的值。运行应用程序，输入一个生日，点击“保存”按钮，看看会发生什么。你应该会看到类似下面的调试控制台输出：
- en: '[PRE519]'
  id: totrans-4263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4264
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4266
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，表示他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个`cancelTapped(_:)`方法来实现这个行为，这个方法将调用一个内置的UIViewController方法，叫做`dismiss(animated:completion:)`。这个方法的作用正如其名——它会关闭当前显示的视图控制器。将以下方法添加到`saveTapped(_:)`方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4267
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE520]'
  id: totrans-4268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4269
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数➊有两个参数。`animated`参数用于动画化关闭界面，传入true，用户可以看到添加生日界面从屏幕上滑下。这将看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做`completion`。一个*闭包*是可以传递给函数的一段代码。如果你想在视图控制器关闭后执行某些代码，可以使用`completion`闭包。因为你在这里不需要任何操作，可以直接传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-4270
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`方法与取消按钮连接起来。你可以像将`saveTapped(_:)`方法连接到保存按钮一样操作。在*Main.storyboard*中，打开添加生日视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4272
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码连接到应用程序的视觉界面。你还学习了如何使用输入文本框和日期选择器来创建一个包含`firstName`、`lastName`和`birthdate`属性的生日对象。现在你可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个生日列表视图控制器中显示你的生日。
- en: '[PRE521]'
  id: totrans-4275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: 'to the line:'
  id: totrans-4276
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE522]'
  id: totrans-4277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-4278
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要内置的`didReceiveMemoryWarning()`方法，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4279
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE523]'
  id: totrans-4280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4281
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个内置类，提供了用于管理应用程序中显示的视图的方法。AddBirthdayViewController是UIViewController的*子类*，通过实现UIViewController的一些内置方法的自定义版本，我们可以控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4282
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个有用的内置回调方法，这些方法将在视图控制器创建并出现在屏幕上或从屏幕上消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4283
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器被创建之后立即调用，但在其视图显示在屏幕上之前。这里是做任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4284
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后以及每次视图控制器的视图将要显示在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4285
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，不同之处在于它是在视图控制器的视图出现在屏幕上之后被调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4286
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4287
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法 viewDidLoad() 非常有用。Swift 期望任何子类化
    UIViewController 的类都使用这个方法，因此在你子类化 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4288
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个，可以开始输入，自动补全会填写详细内容。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4289
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会调用一次——即视图控制器首次创建时——但 viewWillAppear(_:) 每次视图控制器的视图即将显示在屏幕上时都会被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，视图控制器的屏幕重新出现时，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经加载在另一个屏幕后面。如果你希望每次视图出现时都刷新新信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4290
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第12章](text00023.html#ch12)，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    中的 [第149页](text00021.html#page_149)，我们将在 AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以暂时不管这些方法，直接将代码与我们在
    [第9章](text00020.html#ch09) 中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4291
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4292
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器有一个“名”文本字段、一个“姓”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量分配给与屏幕元素通过
    IBOutlet 连接的输入控件来实现。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前，添加以下三个属性（灰色的行表示一些现有代码，用于位置标注）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4293
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE524]'
  id: totrans-4294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4295
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键词，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，这是Xcode中我们进行故事板工作的部分。当你在属性前面加上@IBOutlet关键词时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将属性连接到故事板中的某个元素。当圆圈没有被填充时，意味着属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4296
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4297
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *具有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4298
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值为nil。然而，一旦视图加载，IBOutlet会被赋予它们在故事板中所连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4299
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController并为输入控件设置了属性，是时候连接First Name和Last Name文本框以及Birthdate日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4301
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接着，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4302
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4303
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中Add a
    Birthday Scene旁边的三角形，展开该场景中的项目菜单。然后，CONTROL-点击**添加生日**，这是黄色视图控制器图标旁的选项，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4305
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器，连接birthdatePicker。当日期选择器对象高亮为蓝色时，你可以松开（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4306
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4307
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到 Birthdate Picker 列在连接框中的 birthdatePicker 旁边，并且连接圆圈已填充（参见 [图 10-8](text00021.html#ch10fig8)），那么说明连接成功。您只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时为其指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4309
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4310
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *连接已成功完成。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4311
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 firstNameTextField 连接到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4312
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了 storyboard 的部分。现在让我们回到 *AddBirthdayViewController.swift*，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4313
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4314
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期在未来是不合逻辑的，所以让我们编写一些代码来防止出生日期选择器选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这个设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中（见
    [第145页](text00021.html#page_145)）讨论了 viewDidLoad() 方法。这个方法会自动添加到我们的视图控制器中，因此在
    AddBirthdayViewController 中找到该方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4315
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE525]'
  id: totrans-4316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4317
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，在方法中保留 `super.viewDidLoad()` 这一行非常重要。当您创建一个子类，例如 AddBirthdayViewController，并重写原始父类的方法时，您希望确保同时调用父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中运行了一些特殊代码，我们无法知道，因此不调用父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4318
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器（birthdatePicker）的最大日期，您只需在➊处输入 `birthdatePicker.maximumDate = Date()`。Date()
    方法会创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4319
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便您可以保存生日并通过您在[第9章](text00020.html#ch09)中创建的按钮取消从此视图控制器添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击“保存”时，应用应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4322
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4323
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个每次用户点击“保存”按钮时都会调用的`saveTapped(_:)`方法开始。在`viewDidLoad()`方法之后，向`AddBirthdayViewController`添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4324
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE526]'
  id: totrans-4325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4326
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的`@IBAction`是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”时该函数会执行。当你编写一个IBAction方法时，应该始终包含一个用于触发该方法的UI元素的参数。通常，使用下划线来隐藏参数标签，参数名为`sender`
    ➋，但你可以根据需要命名此参数。在这里，我们希望每次用户点击“保存”时调用`saveTapped(_:)`方法，这时`sender`是一个UIBarButtonItem。所以我们指定`sender`的类型为UIBarButtonItem
    ➌。➍处的`print(_:)`方法帮助我们在测试代码时看到“保存”按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4327
  prefs: []
  type: TYPE_NORMAL
  zh: 将`saveTapped(_:)`与“保存”按钮连接，就像将IBOutlet连接到Storyboard元素一样。返回到你的*Main.storyboard*文件。CONTROL
    -点击“添加生日”行以打开连接对话框。在连接对话框的底部有一个名为“接收的动作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从`saveTapped:`旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4328
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4329
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框的底部，位于“接收的动作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4330
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用程序。当你点击“保存”按钮时，调试控制台应显示消息“保存按钮已点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4331
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4332
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`saveTapped(_:)`方法中添加代码，当用户输入姓名后，可以从`firstNameTextField`和`lastNameTextField`中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4333
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField`类有一个名为`text`的可选`String`属性。该`text`属性包含用户在文本框中输入的内容，因此你可以使用它在`saveTapped(_:)`方法中获取用户的输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4334
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE527]'
  id: totrans-4335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4336
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量`firstName`并将其值设置为`firstNameTextField.text`（如果存在的话，也就是如果用户输入了值），否则设置为空字符串`""`。你可以使用空合并操作符（??）来实现这一点，正如你在[第5章](text00015.html#ch05)中学到的那样。我们使用常量而非变量是因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4337
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对`lastName`做相同的操作。获取`firstName`和`lastName`的值后，将它们打印到控制台，以便在运行应用程序时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4338
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本字段中什么都不输入，然后点击保存按钮，再尝试输入名字和姓氏后点击保存。你应该能看到类似以下的输出：
- en: '[PRE528]'
  id: totrans-4339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4340
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4342
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期与从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker，这是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4343
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4344
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE529]'
  id: totrans-4345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4346
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE530]'
  id: totrans-4347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4348
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——创建一个Birthday所需的三项数据！你会注意到调试控制台中显示的日期格式很奇怪，还包括了时间和+0000的时区偏移。现在不必太担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不带时间显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4350
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4351
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用print语句替代它们来测试新的Birthday实例。然后，将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4352
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE531]'
  id: totrans-4353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4354
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你通过生日类的初始化器创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你从newBirthday实例中获取值。运行应用，输入生日并点击保存，看看会发生什么。你应该能在调试控制台中看到类似以下的输出：
- en: '[PRE532]'
  id: totrans-4355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4356
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4358
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法会调用一个内置的
    UIViewController 方法，叫做 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。请将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4359
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE533]'
  id: totrans-4360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4361
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制关闭屏幕时的动画效果。传入 true，以便用户看到添加生日界面从屏幕上滑下，就像一个专业的应用一样！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是可以传递给函数的一段代码。如果在视图控制器被关闭后你想执行某些代码，可以使用 completion 闭包。但由于这里不需要执行任何操作，所以你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-4362
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4363
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法连接到取消按钮。你可以和连接 saveTapped(_:) 方法到保存按钮的方法一样，进行连接。进入
    *Main.storyboard*，打开添加生日视图控制器的连接对话框，从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4364
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击 **+** 进入添加生日界面，再点击 **Cancel**。你应该能看到添加生日界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4366
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的生日对象。目前，你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表格视图控制器中显示你的生日列表。
- en: 'to the line:'
  id: totrans-4367
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一行：
- en: '[PRE534]'
  id: totrans-4368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-4369
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内置方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4370
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE535]'
  id: totrans-4371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4372
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内置方法的类，用于管理在运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的一个*子类*，通过实现一些 UIViewController 内置方法的自定义版本，我们可以控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4373
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，这些方法会在视图控制器创建并出现在屏幕上或从屏幕消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4374
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 这个方法会在视图控制器创建后但在其视图出现在屏幕上之前被调用。这是进行任何一次性初始设置的好地方。'
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4375
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillAppear(_:)` 这个方法在 `viewDidLoad()` 之后，并且在每次视图控制器的视图出现在屏幕之前被调用。'
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4376
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidAppear(_:)` 这个方法与 `viewWillAppear(_:)` 类似，只不过它是在视图控制器的视图出现在屏幕后调用的。'
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4377
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 这个方法在视图控制器的视图即将离开屏幕时被调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4378
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 `UIViewController` 中重写这些方法。第一个方法 `viewDidLoad()` 非常有用。Swift 要求任何继承自
    `UIViewController` 的类都使用这个方法，所以当你创建 `UIViewController` 的子类时，它会自动在模板中添加一个 `viewDidLoad()`
    的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4379
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为另外三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，它会自动补全细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4380
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 `viewDidLoad()` 只会调用一次——即视图控制器首次创建时——`viewWillAppear(_:)` 会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新出现，`viewWillAppear(_:)`
    会再次被调用，但 `viewDidLoad()` 不会，因为视图控制器已经在另一个屏幕后加载了。如果你希望每次视图出现时都能刷新新的信息，可以重写 `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4381
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)，我们将使用 `viewWillAppear(_:)` 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    中的[第149页](text00021.html#page_149)，我们将重写 `viewDidLoad()` 方法，在 `AddBirthdayViewController`
    中进行。现在，然而，我们可以暂时不修改这些方法，而是将代码与我们在[第9章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接起来**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4383
  prefs: []
  type: TYPE_NORMAL
  zh: 在 storyboard 中，我们的 "添加生日" 视图控制器包含了一个“名字”文本框，一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是将变量与通过
    `IBOutlet` 连接到屏幕元素的输入控件关联起来。在 `AddBirthdayViewController` 类的顶部，`viewDidLoad()`
    方法之前，添加以下三个属性（灰色行表示已有的代码，位置如下）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4384
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE536]'
  id: totrans-4385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4386
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB代表*界面构建器*，是Xcode中我们处理故事板的部分。当你在属性前面加上@IBOutlet关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4387
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4388
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：AddBirthdayViewController* *具有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4389
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets就会被赋予它们在故事板中连接到的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4390
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4391
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及其输入控件的属性，接下来是连接“名字”和“姓氏”文本字段以及“生日”日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4392
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4393
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4394
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4395
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中Add
    a Birthday Scene旁边的三角形，展开该场景中的项目菜单。然后，按住CONTROL并点击**添加生日**，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4396
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4397
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4398
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4399
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”列在连接框中，并且连接圆圈已填充（见[图10-8](text00021.html#ch10fig8)），那说明连接成功。你只能将birthdatePicker
    outlet连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController中的属性时，我们给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4400
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4401
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：出生日期选择器已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4402
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接firstNameTextField，方法是从它的圆圈拖动到First Name标签下方的文本字段。最后，将lastNameTextField连接到Last
    Name标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4403
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。现在让我们回到*AddBirthdayViewController.swift*中编写代码来设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4405
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期出现在未来是不合适的，因此我们编写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中已经讨论过viewDidLoad()方法（见[第145页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此找到AddBirthdayViewController中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4406
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE537]'
  id: totrans-4407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4408
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字重写它，代码如下：`override
    func viewDidLoad()`。注意，方法中保留`super.viewDidLoad()`这一行是非常重要的。当你创建一个子类（例如AddBirthdayViewController）并重写原始父类中的方法时，你需要确保调用父类的方法。苹果可能在UIViewController的viewDidLoad()方法中加入了一些特殊的代码，我们并不知道，因此不调用父类的方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4409
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器（birthdatePicker）的最大日期，只需在➊处输入`birthdatePicker.maximumDate = Date()`。Date()方法会创建一个当前日期和时间的新日期。现在尝试运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4410
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使得你能够使用你在[第9章](text00020.html#ch09)中创建的按钮来保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4412
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存按钮时，应用程序应该根据输入的信息创建一个生日记录，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4413
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4414
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，每次用户点击“保存”按钮时都会调用这个方法。将以下代码添加到 AddBirthdayViewController
    中，紧接在 viewDidLoad() 方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4415
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE538]'
  id: totrans-4416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4417
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”按钮时运行。当你编写一个
    IBAction 方法时，应该始终包括一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以根据需要为此参数命名。在这个例子中，我们希望
    saveTapped(_:) 方法在用户点击“保存”时被调用，而“保存”是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌ 。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看是否点击了“保存”按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4418
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到“保存”按钮就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件。按住
    CONTROL 键，点击 “Add a Birthday” 行以打开连接对话框。在连接对话框的底部，有一个名为 Received Actions 的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到 Add a Birthday
    视图控制器中的“保存”按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4419
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4420
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框底部的 Received Actions 部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4421
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击“保存”按钮时，调试控制台应该显示消息“保存按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4422
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4423
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 saveTapped(_:) 方法添加代码，获取用户输入的 firstNameTextField 和 lastNameTextField 中的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4424
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，叫做 text。这个 text 属性的值是文本字段中输入的内容，因此你可以使用它在 saveTapped(_:)
    方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4425
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE539]'
  id: totrans-4426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4427
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了一个值），否则设置为空字符串
    "" 。你可以使用在 [第 5 章](text00015.html#ch05) 中学到的 nil 合并操作符（?? ）来实现这一点。我们在这里使用常量而非变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4428
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用 lastName 在 ➋ 处做同样的事情。获取 firstName 和 lastName 的值后，将它们打印到控制台，以便你在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4429
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了姓名后再试一次。您应该看到类似以下的输出：
- en: '[PRE540]'
  id: totrans-4430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4431
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在您可以在应用中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4432
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4433
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前由选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4434
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4435
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE541]'
  id: totrans-4436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4437
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序看看会发生什么。您应该会看到类似以下的输出：
- en: '[PRE542]'
  id: totrans-4438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4439
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了 firstName、lastName 和 birthdate ——这三项数据足够用来创建一个 Birthday！您会注意到调试控制台中显示的日期格式很奇怪，还包括时间和
    +0000 的时区偏移。现在不需要过多担心这个问题，我们将在 [第11章](text00022.html#ch11) 中讨论日期格式和如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4440
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4441
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，您可以使用这些信息通过 Birthday 类的初始化器创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4442
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替代它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4443
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE543]'
  id: totrans-4444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4445
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您使用 Birthday 类初始化器创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。在创建 newBirthday 后，➋ 处，您使用点符号输出它的属性到调试控制台。打印输出将与之前的 print 语句相同，但这次您获取的是来自 newBirthday
    实例的值。运行应用程序，输入生日，点击保存，看看会发生什么。您应该在调试控制台看到类似以下内容的输出：
- en: '[PRE544]'
  id: totrans-4446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4447
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday。您将在 [第11章](text00022.html#ch11) 中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4449
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日屏幕应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法会调用一个名为
    dismiss(animated:completion:) 的内建 UIViewController 方法。这个方法做的就是它的名字所说的——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中，紧接着 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4450
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE545]'
  id: totrans-4451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4452
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) ➊ 方法接受两个参数。animated 参数用于动画关闭屏幕。传入 true，让用户看到“添加生日”屏幕从屏幕上滑下，效果就像一个专业的应用！第二个参数是一个可选闭包，名为
    completion。*闭包* 是一个可以传递给函数的代码块。如果你希望在视图控制器被关闭后运行某些代码，可以使用 completion 闭包。由于你不需要执行任何操作，只需传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-4453
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4454
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以通过与将 saveTapped(_:) 方法与保存按钮连接的方式一样来完成这个操作。打开
    *Main.storyboard* 并调出 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4455
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该能看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4457
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表格视图控制器中显示你的生日列表。
- en: '[PRE546]'
  id: totrans-4458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-4459
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在你的类应该看起来像这样：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4460
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE547]'
  id: totrans-4461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4462
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个自带方法的类，用于管理在你运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的一个*子类*，它允许我们通过实现一些 UIViewController 内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4463
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法会在视图控制器创建并显示在屏幕上或从屏幕上消失时被调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4464
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后、视图出现在屏幕之前调用。这里是进行视图初始设置的好地方，通常只需要做一次设置。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4465
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在viewDidLoad()之后调用，每次视图控制器的视图出现在屏幕上之前都会调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4466
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法类似于viewWillAppear(_:)，只是它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4467
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4468
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在UIViewController的子类中重写这些方法中的任何一个。其中，第一个方法viewDidLoad()非常有用。Swift期望任何子类化UIViewController的人都使用这个方法，因此当你子类化UIViewController时，它会自动在模板中为viewDidLoad()添加占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4469
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位代码。如果你决定使用其中之一，你可以开始输入，自动补全会填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4470
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()只在视图控制器首次创建时调用一次，但viewWillAppear(_:)每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望视图每次出现时都能刷新新的信息，你可以重写viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4471
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。此外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”的[第149页](text00021.html#page_149)，我们将在AddBirthdayViewController中重写viewDidLoad()。不过，现在我们可以先不动这些方法，直接将代码与我们在[第9章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4472
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4473
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个名字文本框、一个姓氏文本框和一个出生日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给与屏幕元素连接的控件（IBOutlets）来实现。在viewDidLoad()方法之前，将以下三个属性添加到AddBirthdayViewController类的顶部（灰色行表示现有代码，便于放置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4474
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE548]'
  id: totrans-4475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4476
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，即我们在 Xcode 中处理故事板的部分。当你将
    @IBOutlet 关键字放在属性前面时，属性旁边的边距中会出现一个小圆圈，如 [图10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的元素。如果圆圈没有填充，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4477
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4478
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* 为 AddBirthdayViewController 添加 *用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4479
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载，IBOutlet 就会赋值为它们在故事板中连接的对象。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4480
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4481
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是连接 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4482
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧窗格中打开身份检查器。你应该能在顶部看到一个自定义类部分。将类更改为
    AddBirthdayViewController，如 [图10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-4483
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4484
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4485
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本字段和日期选择器。在左侧大纲视图中，点击
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**
    旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4486
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象变为蓝色高亮时，你可以放开鼠标（见 [图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4487
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4488
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4489
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到`birthdatePicker`旁边列出了出生日期选择器，并且连接框中的连接圆圈已经填充（参见[图10-8](text00021.html#ch10fig8)），那么你就知道连接成功了。你只能将`birthdatePicker`的outlet连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，则什么也不会发生。Xcode知道`birthdatePicker`必须连接到UIDatePicker类，因为我们在`AddBirthdayViewController`中创建属性时给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4490
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4491
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：出生日期选择器outlet已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4492
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击并拖动`firstNameTextField`的圆圈，将它连接到“名字”标签下的文本框。最后，将`lastNameTextField`连接到“姓氏”标签下的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4493
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的工作。让我们回到*AddBirthdayViewController.swift*，在代码中设置一个最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4494
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4495
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期出现在未来是不合逻辑的，所以我们来写一些代码，防止出生日期选择器选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的viewDidLoad()方法来实现这个设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一文中讨论过viewDidLoad()方法，见[第145页](text00021.html#page_145)。它是自动添加到我们的视图控制器中的，所以在`AddBirthdayViewController`中找到这个方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4496
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE549]'
  id: totrans-4497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4498
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法了，所以我们需要用override关键字重写它，如下所示：`override func
    viewDidLoad()`。注意，在方法中保留`super.viewDidLoad()`这一行非常重要。当你创建一个子类（如`AddBirthdayViewController`）并重写了原始超类中的方法时，你需要确保调用超类的方法。Apple可能在UIViewController的viewDidLoad()中有一些我们不知道的特殊代码，所以不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4499
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的最大日期，只需在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个当前日期和时间的日期。现在尝试运行应用。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4500
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要写一些代码，以便能够保存生日并通过你在[第9章](text00020.html#ch09)中创建的按钮取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4502
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4504
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要创建一个saveTapped(_:)方法，每当用户点击Save按钮时就会调用。将以下代码添加到AddBirthdayViewController中，放在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4505
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE550]'
  id: totrans-4506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4507
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的@IBAction是一个关键字，用来将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素进行操作时应该执行的代码。在这个例子中，我们将添加一个函数，当用户点击Save时就会运行。编写IBAction方法时，应该始终包含一个参数，用来表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名是sender
    ➋，但你可以根据需要自定义这个参数的名称。在这个例子中，我们希望saveTapped(_:)方法在用户点击Save时被调用，而Save是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。在➍处的print(_:)方法帮助我们在测试代码时查看Save按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4508
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与Save按钮连接起来，就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。CONTROL
    -点击“Add a Birthday”行以打开连接对话框。在连接对话框的底部，有一个名为“Received Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“Add
    a Birthday”视图控制器中的Save按钮，以建立它们之间的连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4509
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4510
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的Received Actions下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4511
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击Save按钮时，调试控制台应显示消息“Save按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4512
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4513
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来给saveTapped(_:)方法添加代码，这样当用户输入姓名后，可以从firstNameTextField和lastNameTextField中获取用户输入的名字。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4514
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性叫做text。这个text属性的值就是用户在文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它来获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4515
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE551]'
  id: totrans-4516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4517
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，即用户输入了一个值），否则设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的nil合并操作符(??)来实现这一点。这里使用常量而不是变量是因为我们不会改变用户输入的firstName和lastName的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4518
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的操作。在获取了firstName和lastName的值后，将它们打印到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4519
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看看会发生什么。试着在文本框中什么都不输入，点击保存按钮，然后再试一次，输入名字和姓氏。你应该会看到类似以下的输出：
- en: '[PRE552]'
  id: totrans-4520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4521
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用程序中输入一个名字，并在调试控制台中看到计算机输出它。接下来让我们集中精力获取一个日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4522
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4523
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，这是当前由日期选择器显示的日期。对于 birthdatePicker，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4524
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4525
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE553]'
  id: totrans-4526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4527
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE554]'
  id: totrans-4528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4529
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，我们已经有了 firstName、lastName 和 birthdate——我们创建生日所需的三项数据！你会注意到调试控制台中显示的日期格式有些奇怪，其中还包括时间和
    +0000 的时区偏移。现在不必太担心这个问题。我们将在[第 11 章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4530
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4531
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4532
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除打印语句，因为我们将用打印语句来测试新的 newBirthday 实例。然后将以下代码添加到 saveTapped(_:)
    方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4533
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE555]'
  id: totrans-4534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4535
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你通过点符号输出其属性到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE556]'
  id: totrans-4536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4537
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将会在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4538
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4539
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日屏幕应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内建的
    UIViewController 方法，名为 dismiss(animated:completion:)。该方法做的就是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4540
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE557]'
  id: totrans-4541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4542
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) ➊ 函数接受两个参数。animated 参数用于为关闭屏幕添加动画效果。传入 true，这样用户就能看到添加生日屏幕滑动下去的效果，界面看起来就像一个专业的应用一样！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是可以传入函数的代码块。completion 闭包可用于在视图控制器被关闭后运行一些代码。因为您不需要在这里执行任何操作，所以可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-4543
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4544
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。您可以像将 saveTapped(_:) 方法连接到保存按钮一样进行操作。打开 *Main.storyboard*，并调出添加生日视图控制器的连接对话框。从
    cancelTapped(_:) 方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4545
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用程序，点击 **+** 进入添加生日屏幕，再点击 **取消**。您应该会看到添加生日屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4546
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**您所学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4547
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将编写的代码与应用程序的视觉界面连接起来。您还学习了如何使用输入文本字段和日期选择器创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，您可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向您展示如何在
    Birthdays 表格视图控制器中显示您的生日列表。
- en: 'You won’t need the built-in method didReceiveMemoryWarning() , so you can clean
    up your code by deleting that method. Now your class should look like this:'
  id: totrans-4548
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要内建方法 didReceiveMemoryWarning()，因此可以通过删除该方法来清理代码。现在，您的类应该如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4549
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE558]'
  id: totrans-4550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4551
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内建方法的类，用于管理在运行应用时出现在屏幕上的视图。AddBirthdayViewController 是
    UIViewController 的 *子类*，它允许我们通过实现 UIViewController 一些内建方法的自定义版本，来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4552
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，这些方法将在视图控制器被创建并出现在屏幕上或从屏幕上消失时调用。这些回调方法包括：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4553
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器被创建后但在其视图出现在屏幕上之前被调用。这是进行任何只需要执行一次的初始设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4554
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 之后，并且在每次视图控制器的视图出现在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4555
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 相似，不同之处在于它是在视图控制器的视图出现在屏幕上之后被调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4556
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4557
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写任何这些方法。第一个方法，viewDidLoad()，非常有用。Swift 期望任何继承自 UIViewController
    的类都使用这个方法，因此当你子类化 UIViewController 时，它会自动为 viewDidLoad() 添加占位符到模板中。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4558
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，可以开始输入，自动完成功能会填写其细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4559
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会被调用一次——即当视图控制器首次创建时——但 viewWillAppear(_:) 每次视图控制器的视图即将显示到屏幕上时都会被调用。因此，如果另一个屏幕被覆盖到视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后加载好。如果你希望每次视图出现时都刷新信息，可以重写 viewWillAppear(_:)
    方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4560
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    [第149页](text00021.html#page_149) 中，我们将重写 AddBirthdayViewController 中的 viewDidLoad()。然而，暂时我们可以不处理这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4561
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4562
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框、一个“姓氏”文本框和一个“出生日期”日期选择器。要使用这些输入控件，我们需要在代码中引用它们，通过为这些输入控件分配变量，这些控件通过
    IBOutlets 与屏幕元素连接。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前，添加以下三个属性（灰色的行表示一些现有代码，用于位置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4563
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE559]'
  id: totrans-4564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4565
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于修饰可以在故事板中连接的属性。IB 代表 *interface builder*，它是 Xcode 中用于编辑故事板的部分。当你在属性前面加上
    @IBOutlet 关键字时，会在旁边的边距中出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4566
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4567
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4568
  prefs: []
  type: TYPE_NORMAL
  zh: '`firstNameTextField` 属性的数据类型是 UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋予与故事板中相应元素连接的值。'
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4569
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4570
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 `AddBirthdayViewController` 和输入控件的属性，接下来是将“First Name”和“Last Name”文本字段以及“Birthdate”日期选择器进行连接。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4571
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“Add a Birthday”视图控制器的类更改为 `AddBirthdayViewController`，以便你可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，然后在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧面板中打开身份检查器。你应该会看到顶部的
    Custom Class 部分。将类更改为 `AddBirthdayViewController`，如 [图 10-6](text00021.html#ch10fig6)
    所示。
- en: '![](Image00228.jpg)'
  id: totrans-4572
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4573
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4574
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 `AddBirthdayViewController` 的 IBOutlet 属性连接到“Add a Birthday Scene”中的文本字段和日期选择器。在左侧大纲视图中，点击“Add
    a Birthday Scene”旁边的三角形展开该场景中的项目菜单。然后，按住 CONTROL 键并点击 **Add a Birthday** 旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4575
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 `birthdatePicker`、`firstNameTextField` 和 `lastNameTextField`。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    `birthdatePicker`。当日期选择器对象高亮显示为蓝色时，你可以松开（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4576
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4577
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4578
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你将在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充（参见[图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker 插槽连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中创建属性时所指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4579
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4580
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *插槽已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4581
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 firstNameTextField 从其圆圈连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4582
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已完成故事板部分。让我们回到 *AddBirthdayViewController.swift* 文件中，在代码中设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4583
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4584
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一个人的生日不应出现在未来，因此让我们编写一些代码，以防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一章的
    [第145页](text00021.html#page_145) 中讨论过 viewDidLoad() 方法。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController
    中的这个方法，并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4585
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE560]'
  id: totrans-4586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4587
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，必须保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类，比如 AddBirthdayViewController，并重写原始超类的方法时，必须确保也调用超类的方法。因为苹果可能在
    UIViewController 的 viewDidLoad() 中有我们不知道的特殊代码，所以不调用这个超类方法可能会导致不可预期的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4588
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个当前的日期和时间。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4589
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在[第9章](text00020.html#ch09) 中创建的按钮来保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4591
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据用户输入的信息创建一个生日，并保存这些信息。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4592
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4593
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用该方法。在 viewDidLoad() 方法后，添加以下代码到 AddBirthdayViewController：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4594
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE561]'
  id: totrans-4595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4596
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定用户对该元素进行操作时应该执行的代码。在这个例子中，我们将添加一个函数，当用户点击保存时执行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称是 sender ➋，但你可以根据需要为该参数命名。在这个例子中，我们希望
    saveTapped(_:) 方法在用户点击保存时被调用，保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌。print(_:) 方法在 ➍处帮助我们查看保存按钮是否已经被点击，以便在测试代码时查看。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4597
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。回到你的 *Main.storyboard*
    文件。按住 CONTROL -点击 "Add a Birthday" 这一行以打开连接对话框。在连接对话框的底部有一个名为 Received Actions
    的区域，如 [图 10-9](text00021.html#ch10fig9) 所示。在该区域中，从 saveTapped: 旁边的圆圈点击并拖动到 "Add
    a Birthday" 视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4598
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4599
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBAction 列表显示在连接对话框的底部，位于 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4600
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，调试控制台应该会显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4601
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4602
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们向 saveTapped(_:) 方法添加代码，当用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4603
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4604
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE562]'
  id: totrans-4605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4606
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了一个值），否则设置为空字符串
    ""。你可以使用 nil 合并操作符（??）来实现这一点，正如你在 [第5章](text00015.html#ch05) 中学到的那样。这里使用常量而不是变量是因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4607
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对 lastName 做同样的操作。在你获取了 firstName 和 lastName 的值后，打印它们到控制台，以便在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4608
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中什么都不输入时点击保存，然后再尝试在输入了名字和姓氏后点击保存。你应该会看到类似如下的输出：
- en: '[PRE563]'
  id: totrans-4609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4610
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4611
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4612
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4613
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4614
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE564]'
  id: totrans-4615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4616
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE565]'
  id: totrans-4617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4618
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经拥有了 firstName、lastName 和 birthdate ——这三项数据是我们创建一个生日所需要的！你会注意到调试控制台中显示的日期格式有些奇怪，里面还包含了时间和
    +0000 的时区偏移。现在不必太担心这个问题，我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4619
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4620
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4621
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替代它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4622
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE566]'
  id: totrans-4623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4624
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量值。创建 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的 print 语句一样，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE567]'
  id: totrans-4625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4626
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将会在[第11章](text00022.html#ch11)学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4627
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4628
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法会调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中的saveTapped(_:)方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4629
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE568]'
  id: totrans-4630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4631
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于动画化关闭屏幕。传入true，这样用户可以看到“添加生日”界面从屏幕上滑动下来，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，称为completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后运行任何代码，可以使用completion闭包。由于这里不需要执行任何操作，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-4632
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4633
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样进行操作。打开*Main.storyboard*，并调出添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4634
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入“添加生日”界面，再点击**取消**。你应该会看到“添加生日”界面从屏幕上滑出并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4635
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4636
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4637
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE569]'
  id: totrans-4638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4639
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController是一个带有内置方法的类，用于管理应用运行时在屏幕上显示的视图。AddBirthdayViewController是UIViewController的*子类*，它允许我们通过实现UIViewController的一些内置方法来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4640
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个有用的内置回调方法，这些方法将在视图控制器创建并出现在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4641
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 方法在视图控制器创建后但在其视图显示在屏幕上之前调用。这是进行任何初始设置的好地方，特别是当你只想做一次设置时。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4642
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在viewDidLoad()之后，在每次视图控制器的视图即将出现在屏幕上时被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4643
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法类似于viewWillAppear(_:)，只是它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4644
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4645
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。第一个方法viewDidLoad()非常有用。Swift期望所有子类化UIViewController的人使用这个方法，因此当你子类化UIViewController时，它会自动在模板中为viewDidLoad()添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4646
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入它，自动补全会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4647
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只会被调用一次——即视图控制器第一次创建时——但viewWillAppear(_:)会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕被放置在视图控制器的屏幕上方，然后移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)将会再次被调用，而viewDidLoad()则不会，因为视图控制器已经在另一个屏幕后面加载过了。如果你希望每次视图出现时都能刷新信息，可以重写viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4648
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”的[第149页](text00021.html#page_149)，我们将在AddBirthdayViewController中重写viewDidLoad()。不过目前，我们可以先不处理这些方法，直接将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4649
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4650
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器包含一个名字文本框、一个姓氏文本框和一个出生日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过为连接到屏幕元素的控件分配变量来实现这一点，这些控件是通过IBOutlet连接的。在AddBirthdayViewController类的viewDidLoad()方法之前添加以下三个属性（灰色的行表示一些现有代码，供参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4651
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE570]'
  id: totrans-4652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4653
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，用于标记那些可以在故事板中连接的属性。IB代表*界面构建器*，它是Xcode中我们处理故事板的部分。当你在一个属性前加上@IBOutlet关键字时，在其旁边的边距中会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的某个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4654
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4655
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *带有输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4656
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型为UITextField! ➋ ，是一个隐式展开的可选类型，因为当视图控制器首次创建时，IBOutlets的值为nil。然而，当视图加载时，IBOutlets会被赋予它们在故事板中连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4657
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4658
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及其输入控件的属性，接下来是连接First Name和Last Name文本框以及Birthdate日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4659
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中Add a Birthday视图控制器的类更改为AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**Add
    a Birthday Scene**，然后在右侧面板中打开身份检查器。你应该在顶部看到一个Custom Class部分。将类更改为AddBirthdayViewController，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4660
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4661
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4662
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到Add a Birthday场景中的文本框和日期选择器。点击左侧大纲视图中的Add
    a Birthday Scene旁边的三角形，以展开该场景中的项目菜单。然后，CONTROL -点击黄色视图控制器图标旁的**Add a Birthday**，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4663
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，选择Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击birthdatePicker旁边的空圆圈并拖动到故事板中的日期选择器，来连接birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以放开鼠标（参见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4664
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4665
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4666
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到Birthdate Picker列在连接框中，并且birthdatePicker旁边的连接圆圈已填充，则表示连接成功（参见[图 10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker
    outlet连接到一个日期选择器。如果你试图将它连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在AddBirthdayViewController中创建属性时给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4667
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4668
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4669
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击并从firstNameTextField的圆圈拖动到First Name标签下方的文本框，来连接firstNameTextField。最后，将lastNameTextField连接到Last
    Name标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4670
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的设置。让我们回到 *AddBirthdayViewController.swift*，通过代码来设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4671
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4672
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期不可能是未来的日期，因此让我们编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这个设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论过
    viewDidLoad() 方法，具体见 [第145页](text00021.html#page_145)。这个方法会自动添加到我们的视图控制器中，因此找到
    AddBirthdayViewController 中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4673
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE571]'
  id: totrans-4674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4675
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，代码如下：override
    func viewDidLoad()。请注意，在方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类（比如 AddBirthdayViewController）并重写原父类的方法时，确保你也调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中加入了一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4676
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，你只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个当前的日期和时间。现在试着运行应用程序，应该无法选择未来的任何日期了！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4677
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在 [第9章](text00020.html#ch09) 中创建的按钮，在这个视图控制器中保存生日信息和取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4678
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4679
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存时，应用程序应该根据输入的信息创建一个生日，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4680
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4681
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用这个方法。将以下代码添加到 AddBirthdayViewController
    中，位置紧跟在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4682
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE572]'
  id: totrans-4683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4684
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 @IBAction 是一个关键字，它将一个函数直接连接到视图控制器中的某个元素，并允许我们指定当用户对该元素执行操作时应运行的代码。在本例中，我们将添加一个函数，当用户点击“保存”时，它会运行。当你编写一个
    IBAction 方法时，你应该始终包含一个用于触发该方法的 UI 元素的参数。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋，但你可以根据需要为这个参数命名。在本例中，我们希望在用户点击“保存”时调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem ➌。
    ➍ 处的 print(_:) 方法帮助我们在测试代码时查看“保存”按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4685
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到“保存”按钮就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件。按住
    CONTROL 键并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“Received Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，点击并拖动从
    saveTapped: 旁边的圆圈到“添加生日”视图控制器中的“保存”按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4686
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4687
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction 列表显示在连接对话框的底部，位于“Received Actions”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4688
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用程序。当你点击“保存”按钮时，应该会在调试控制台中显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4689
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4690
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4691
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选字符串属性。这个 text 属性的值是用户在文本框中输入的内容，因此你可以使用它在 saveTapped(_:)
    方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4692
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE573]'
  id: totrans-4693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4694
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果它存在，即用户输入了一个值）或空字符串
    ""。你可以使用在[第5章](text00015.html#ch05)中学到的 nil 合并运算符（??）来完成这一操作。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4695
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你就可以在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4696
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中没有输入任何内容的情况下点击“保存”按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似于以下内容的输出：
- en: '[PRE574]'
  id: totrans-4697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4698
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字，并在调试控制台中查看计算机输出的结果了。接下来，我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4699
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4700
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4701
  prefs: []
  type: TYPE_NORMAL
  zh: 在saveTapped(_:)方法中添加以下行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4702
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE575]'
  id: totrans-4703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4704
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE576]'
  id: totrans-4705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4706
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所必需的！你会注意到在调试控制台中显示的日期格式很奇怪，还包含了时间和+0000时区偏移。暂时不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4707
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4708
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4709
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用测试newBirthday实例的打印语句替代它们。然后在saveTapped(_:)方法中添加以下行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4710
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE577]'
  id: totrans-4711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4712
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday之后，在➋处，你通过点语法将其属性输出到调试控制台。打印的输出将和之前的打印语句相同，不过这次你获取的是来自newBirthday实例的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE578]'
  id: totrans-4713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4714
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4715
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4716
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该关闭。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内建的UIViewController方法dismiss(animated:completion:)。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。在AddBirthdayViewController类的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4717
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE579]'
  id: totrans-4718
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4719
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画效果地关闭界面。传入true，让用户看到“添加生日”界面滑出屏幕。它看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为
    completion。*闭包*是可以传递给函数的一段代码。如果你想在视图控制器被关闭后执行某些操作，可以使用这个闭包。因为你不需要执行任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-4720
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4721
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 绑定到“取消”按钮。你可以按照与将 saveTapped(_:) 方法绑定到“保存”按钮相同的方式进行。打开*Main.storyboard*，并弹出“添加生日”视图控制器的连接对话框。点击并拖动
    cancelTapped(_:) 方法项到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4722
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4724
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName 和
    birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)，我们将向你展示如何在“生日”表格视图控制器中显示你的生日列表。
- en: '[PRE580]'
  id: totrans-4725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4726
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个内置类，提供了管理当你运行应用时出现在屏幕上的视图的方法。AddBirthdayViewController 是
    UIViewController 的*子类*，它让我们通过实现 UIViewController 的一些内置方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4727
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内置回调方法，它们会在视图控制器创建并显示在屏幕上或消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4728
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法会在视图控制器创建后，但在其视图显示之前调用。这个方法是做任何你只想执行一次的视图初始化操作的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4729
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后，以及每次视图控制器的视图出现在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4730
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，区别在于它是在视图控制器的视图显示在屏幕后调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4731
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4732
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift期望任何子类化UIViewController的人都使用这个方法，因此当你子类化UIViewController时，它会自动在模板中添加viewDidLoad()的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4733
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位代码。如果你决定使用其中一个方法，你可以开始输入，自动完成功能将填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4734
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然viewDidLoad()仅在视图控制器第一次创建时调用一次，但viewWillAppear(_:)会在视图控制器的视图即将出现在屏幕上时每次调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕，然后被移除，导致视图控制器的屏幕重新出现，viewWillAppear(_:)会再次被调用，但viewDidLoad()不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果你希望每次视图出现时刷新新信息，你可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4735
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”一节中，[第149页](text00021.html#page_149)将重写AddBirthdayViewController中的viewDidLoad()方法。然而，目前，我们可以先不管这些方法，而将我们的代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4736
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4737
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本字段，一个“姓氏”文本字段，以及一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是将变量分配给与屏幕元素通过IBOutlet连接的输入控件。在viewDidLoad()方法之前，将以下三个属性添加到AddBirthdayViewController类的顶部（灰色的行表示一些现有代码，用于放置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4738
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE581]'
  id: totrans-4739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4740
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊是一个特殊的关键字，用于放在可以在故事板中连接的属性前面。IB代表*接口构建器*，它是我们在Xcode中处理故事板的部分。当你在属性前面放置@IBOutlet关键字时，如[图10-5](text00021.html#ch10fig5)所示，旁边的边距会出现一个小圆圈。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4741
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4742
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* AddBirthdayViewController *与用于输入控件的IBOutlet属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4743
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型是UITextField! ➋，这是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet的值是nil。然而，一旦视图加载，IBOutlet会根据它们在故事板中连接的对象获取相应的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4744
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4745
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了AddBirthdayViewController以及输入控件的属性，是时候将First Name和Last Name文本字段以及Birthdate日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4746
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，选择左侧大纲视图中的**添加生日场景**，并在右侧窗格中打开身份检查器。你应该能看到顶部的“自定义类”部分。将类更改为AddBirthdayViewController，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4747
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4748
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *.*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4749
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形展开该场景中的项目菜单。然后，按住CONTROL键并点击**添加生日**旁边的黄色视图控制器图标以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4750
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以放开鼠标（参见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4751
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4752
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4753
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中，并且与birthdatePicker并排显示，且连接圆圈已经填充，那么你就知道连接成功了（参见[图
    10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController的属性时，已经在其中指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4754
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4755
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet已经成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4756
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动从其圆圈到“名字”标签下方的文本字段来连接firstNameTextField。最后，将lastNameTextField连接到“姓氏”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4757
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，你已经完成了故事板的设置。接下来，让我们回到*AddBirthdayViewController.swift*中，通过代码设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4758
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4759
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的生日是未来的日期，那是没有意义的，所以我们来写些代码，防止`birthdatePicker`选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的`viewDidLoad()`方法来实现这个设置。在[《创建添加生日视图控制器》](text00021.html#ch10lev2sec3)中，我们谈到了`viewDidLoad()`方法，具体内容见[第145页](text00021.html#page_145)。该方法会自动添加到我们的视图控制器中，所以找到`AddBirthdayViewController`中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4760
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE582]'
  id: totrans-4761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4762
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的方法，因此我们需要使用`override`关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，保留`super.viewDidLoad()`这一行是很重要的。当你创建一个子类（比如`AddBirthdayViewController`）并重写父类中的方法时，需要确保也调用父类的方法。苹果可能在`UIViewController`的`viewDidLoad()`中有一些我们不知道的特殊代码，所以不调用父类方法可能会导致不可预料的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4763
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的`maximumDate`，你只需要在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个新的日期对象，它代表当前的日期和时间。现在试着运行一下应用，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4764
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将写一些代码，使你能够在这个视图控制器中使用在[第9章](text00020.html#ch09)中创建的按钮来保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4765
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4766
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击“保存”时，应用应该根据输入的信息创建一个生日，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4767
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4768
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写一个`saveTapped(_:)`方法开始，这个方法将在用户每次点击“保存”按钮时被调用。将以下代码添加到`AddBirthdayViewController`中，紧接着`viewDidLoad()`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4769
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE583]'
  id: totrans-4770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4771
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的`@IBAction`是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素进行操作时应执行的代码。在这个案例中，我们将添加一个函数，当用户点击“保存”时执行。编写`IBAction`方法时，应该始终包含一个参数，表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称为`sender`➋，但你可以根据需要将其命名。在这个例子中，我们希望每次用户点击“保存”时，都会调用`saveTapped(_:)`方法，这个方法的类型是`UIBarButtonItem`➌。`print(_:)`方法在➊处有助于我们在测试代码时看到“保存”按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4772
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 方法连接到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。返回你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“已接收动作”的部分，如 [图10-9](text00021.html#ch10fig9)
    所示。在该部分，点击并拖动 saveTapped: 旁边的圆圈到“添加生日”视图控制器中的保存按钮，进行连接。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4773
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4774
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的已接收动作下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4775
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台应该会显示消息 "The save button was tapped."（保存按钮已被点击）。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4776
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4777
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，当用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4778
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选 String 属性。这个 text 属性的值是输入到文本框中的内容，因此你可以使用它在 `saveTapped(_:)`
    方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4779
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE584]'
  id: totrans-4780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4781
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串
    ""。你可以使用你在 [第5章](text00015.html#ch05) 中学到的空合并操作符 (??) 来实现这一点。我们在这里使用常量而非变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4782
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做相同的操作。在获取了 firstName 和 lastName 的值后，将它们打印到控制台，这样你在运行应用程序时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4783
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在文本框中什么都不输入的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该看到类似以下的输出：
- en: '[PRE585]'
  id: totrans-4784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4785
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以将名字输入到应用程序中，并在调试控制台看到计算机输出它。接下来我们来关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4786
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4787
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个名为 date 的属性，它表示当前由选择器显示的日期。对于 birthdatePicker，应该是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4788
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `saveTapped(_:)` 方法中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4789
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE586]'
  id: totrans-4790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4791
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE587]'
  id: totrans-4792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4793
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这三项数据是我们创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，包含了时间和
    +0000 的时区偏移。现在不必过于担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4794
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4795
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4796
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替换它们。然后，在
    saveTapped(_:) 方法中添加以下行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4797
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE588]'
  id: totrans-4798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4799
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个新的 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点符号输出它的属性到调试控制台。打印输出将与之前的 print 语句相同，但这次你得到的是来自
    newBirthday 实例的值。运行应用，输入生日并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE589]'
  id: totrans-4800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4801
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4803
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法叫做 dismiss(animated:completion:)。这个方法正如其名——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4804
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE590]'
  id: totrans-4805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4806
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true 以便用户看到添加生日界面从屏幕上滑下，效果就像一个专业应用一样！第二个参数是一个可选闭包，叫做
    completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后运行某些代码，可以使用这个 completion 闭包。但由于此处不需要任何操作，你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-4807
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4808
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以按照与将 saveTapped(_:) 方法连接到保存按钮完全相同的方式来实现。打开
    *Main.storyboard* 并显示 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4809
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击 **+** 进入添加生日屏幕，再点击 **Cancel**。你应该会看到添加生日视图从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4810
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4811
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: UIViewController is a class that comes with built-in methods for managing views
    that appear onscreen when you run your app. AddBirthdayViewController is a *subclass*
    of UIViewController , which lets us control the view controller in the storyboard
    by implementing our own versions of some of UIViewController ’s built-in methods.
  id: totrans-4812
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 是一个带有内建方法的类，用于管理当你运行应用时出现在屏幕上的视图。AddBirthdayViewController
    是 UIViewController 的一个*子类*，它让我们通过实现 UIViewController 一些内建方法的自定义版本来控制故事板中的视图控制器。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4813
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController 类有四个有用的内建回调方法，它们将在视图控制器创建后以及视图控制器的视图出现在屏幕上或离开屏幕时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4814
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器被创建后立即调用，但在视图出现在屏幕上之前调用。这是进行任何只需要执行一次的视图初始化设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4815
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 调用后和每次视图控制器的视图出现在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4816
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，不同之处在于它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4817
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4818
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法 viewDidLoad() 非常有用。Swift 期望所有继承自
    UIViewController 的子类都使用这个方法，因此当你继承 UIViewController 时，它会自动在模板中为 viewDidLoad()
    添加占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4819
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，它会自动补全细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4820
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会被调用一次——即当视图控制器第一次创建时——但 viewWillAppear(_:) 每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果一个屏幕被覆盖在视图控制器的屏幕上并且被移除，以使视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载好了。如果您希望每次视图出现时刷新其内容，可以重写 viewWillAppear(_:)
    方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4821
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 12 章](text00023.html#ch12) 中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在
    “[设置最大出生日期](text00021.html#ch10lev2sec6)” （第 149 页）中，我们将重写 AddBirthdayViewController
    中的 viewDidLoad() 方法。然而，现在我们可以先不管这些方法，直接将代码与 [第 9 章](text00020.html#ch09) 中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4822
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4823
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名”文本框，一个“姓”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给与屏幕元素连接的
    IBOutlet 控件。将以下三个属性添加到 AddBirthdayViewController 类的顶部，在 viewDidLoad() 方法之前（灰色的行表示现有代码，表示放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4824
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE591]'
  id: totrans-4825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4826
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，它放置在属性前面，表示这些属性可以在故事板中进行连接。IB 代表 *接口构建器*，这是 Xcode 中我们操作故事板的部分。当你在属性前面加上
    @IBOutlet 关键字时，旁边的边距中会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将属性连接到故事板中的一个元素。当圆圈没有被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4827
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4828
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4829
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型，UITextField! ➋ ，是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlet
    的值为 nil。然而，一旦视图被加载，IBOutlet 就会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4830
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4831
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是将“名”和“姓”文本框以及“出生日期”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4832
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧窗格中打开身份检查器。你应该能在顶部看到一个自定义类部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-4833
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4834
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4835
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“Add a Birthday Scene”中的文本字段和日期选择器。在左侧大纲视图中点击
    Add a Birthday Scene 旁边的三角形，展开该场景中项目的菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**，该项位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4836
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象高亮为蓝色时，你可以松开鼠标（参见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4837
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4838
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *控件*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4839
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 出现在连接框中，并且与 birthdatePicker 对应的连接圆圈已填充（参见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将
    birthdatePicker 控件连接到日期选择器。如果尝试将它连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在 AddBirthdayViewController 中创建属性时，我们为其指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4840
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4841
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *控件已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4842
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将 firstNameTextField 连接到“First Name”标签下方的文本字段。最后，将 lastNameTextField
    连接到“Last Name”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4843
  prefs: []
  type: TYPE_NORMAL
  zh: 至此，故事板的工作完成了。现在让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4844
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4845
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有一个未来的出生日期是不合理的，因此我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这一设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中提到了
    viewDidLoad() 方法（参见[第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，所以在 AddBirthdayViewController
    中找到该方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4846
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE592]'
  id: totrans-4847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4848
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 UIViewController 类的一个方法，所以我们需要使用 `override` 关键字重写它，如下所示：`override
    func viewDidLoad()`。请注意，在方法中保留 `super.viewDidLoad()` 这一行非常重要。当你创建一个子类，如 `AddBirthdayViewController`，并重写原始超类中的方法时，你需要确保调用超类中的方法。Apple
    可能在 `UIViewController` 的 `viewDidLoad()` 中有一些我们不知道的特殊代码，所以如果不调用这个超类方法，可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4849
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 `birthdatePicker` 的 `maximumDate`，只需在 ➊ 处输入 `birthdatePicker.maximumDate
    = Date()`。`Date()` 方法创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序。你应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4850
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便你可以从这个视图控制器保存生日并取消添加生日，使用你在 [第9章](text00020.html#ch09) 中创建的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4851
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4852
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该从输入的信息中创建一个生日对象，并保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4853
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4854
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 `saveTapped(_:)` 方法开始，每当用户点击保存按钮时，都会调用该方法。将以下代码添加到 `AddBirthdayViewController`
    中，紧跟在 `viewDidLoad()` 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4855
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE593]'
  id: totrans-4856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4857
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 `@IBAction` 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时它会运行。当你编写一个
    IBAction 方法时，应该始终包括一个参数，用于触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名为 `sender` ➋，但是你可以根据需要给这个参数起任何名字。在本例中，我们希望每当用户点击保存时调用
    `saveTapped(_:)` 方法，而保存按钮是一个 `UIBarButtonItem`。因此，我们指定 `sender` 的类型为 `UIBarButtonItem`
    ➌。`print(_:)` 方法在 ➍ 处帮助我们查看保存按钮是否被点击，当我们测试代码时非常有用。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4858
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”的部分，如 [图10-9](text00021.html#ch10fig9)
    所示。在该部分，点击并拖动 `saveTapped:` 旁边的圆圈，将其连接到“添加生日”视图控制器中的保存按钮。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4859
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4860
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions 列在连接对话框底部的“接收的动作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4861
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行您的应用程序。当您点击保存按钮时，"The save button was tapped." 的消息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4862
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4863
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，获取用户输入后从 firstNameTextField 和 lastNameTextField
    中提取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4864
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选 String 属性。该 text 属性的值为用户输入的文本，因此您可以通过以下代码在 saveTapped(_:)
    方法中获取用户输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4865
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE594]'
  id: totrans-4866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4867
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即如果用户输入了一个值），或者设置为空字符串
    ""。您可以使用 nil 合并操作符（??）来实现这一点，正如您在[第5章](text00015.html#ch05)中学到的那样。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4868
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做相同的操作。在获取了 firstName 和 lastName 的值后，将它们打印到控制台，以便您在运行应用时能够看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4869
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再次尝试。您应该会看到类似这样的输出：
- en: '[PRE595]'
  id: totrans-4870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4871
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在您可以将一个名字输入到应用程序中，并在调试控制台中看到计算机输出它。接下来，让我们集中精力输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4872
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4873
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker，它就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此您可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4874
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4875
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE596]'
  id: totrans-4876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4877
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。您应该会看到类似以下的输出：
- en: '[PRE597]'
  id: totrans-4878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4879
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据是我们创建生日所需的！您会注意到在调试控制台中显示的日期格式很奇怪，还包括时间和
    +0000 的时区偏移。暂时不用太担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4880
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4881
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，您可以使用这些信息通过 Birthday 类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4882
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后，在saveTapped(_:)方法中添加以下行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4883
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE598]'
  id: totrans-4884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4885
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。在创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你获取的是newBirthday实例的值。运行应用程序，输入生日，点击保存以查看发生了什么。你应该会在调试控制台中看到类似如下的输出：
- en: '[PRE599]'
  id: totrans-4886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4887
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，点击保存按钮只会创建一个Birthday。你将学习如何在[第11章](text00022.html#ch11)中将这个Birthday显示在Birthdays视图控制器中。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4888
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4889
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内建的UIViewController方法：dismiss(animated:completion:)。这个方法正如它的名字所示，它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4890
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE600]'
  id: totrans-4891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4892
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于为关闭屏幕添加动画效果。传入true，这样用户就能看到添加生日的界面从屏幕上滑下，效果就像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行任何代码，可以使用completion闭包。因为你在这里不需要任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-4893
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4894
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接起来。你可以与连接saveTapped(_:)方法到保存按钮时完全相同的方式进行。前往*Main.storyboard*，然后打开Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4895
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日页面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4896
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4897
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建包含firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个Birthday表格视图控制器中显示你的生日列表。
- en: 'The UIViewController class has four useful built-in callback methods that will
    be called when the view controller is created and appears on or disappears from
    the screen. These callback methods are:'
  id: totrans-4898
  prefs: []
  type: TYPE_NORMAL
  zh: UIViewController类有四个非常有用的内置回调方法，这些方法会在视图控制器创建、显示在屏幕上或从屏幕上消失时被调用。这些回调方法是：
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4899
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 这个方法在视图控制器创建后立即调用，但在视图显示在屏幕上之前。这是一个非常适合进行视图初步设置的地方，通常只需要设置一次。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4900
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在viewDidLoad()之后调用，并且在每次视图控制器的视图即将显示在屏幕上之前调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4901
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与viewWillAppear(_:)类似，区别在于它是在视图控制器的视图显示在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4902
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4903
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类UIViewController中重写这些方法中的任何一个。其中第一个方法，viewDidLoad()，非常有用。Swift期望所有继承UIViewController的子类都使用这个方法，因此当你创建UIViewController的子类时，它会自动在模板中添加viewDidLoad()的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4904
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中一个方法，你可以开始输入，自动补全功能会填充详细内容。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4905
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()只会在视图控制器第一次创建时调用一次，但viewWillAppear(_:)会在每次视图控制器的视图即将显示在屏幕上时调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新显示，那么viewWillAppear(_:)将会再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后加载过了。如果你希望每次视图出现时都能刷新新的信息，你可以重写viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4906
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。同时，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)中，我们将在[第149页](text00021.html#page_149)的AddBirthdayViewController中重写viewDidLoad()。但是现在，我们可以暂时不管这些方法，直接将我们的代码与[第9章](text00020.html#ch09)中设置的输入连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4907
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4908
  prefs: []
  type: TYPE_NORMAL
  zh: 在 storyboard 中，我们的“添加生日”视图控制器有一个“名”文本字段，一个“姓”文本字段和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，我们通过将变量分配给与屏幕元素通过
    IBOutlet 连接的输入控件来实现这一点。将以下三个属性添加到 AddBirthdayViewController 类的顶部，在 viewDidLoad()
    方法之前（灰色行表示一些现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4909
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE601]'
  id: totrans-4910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4911
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊关键字，放在可以在 storyboard 中连接的属性前面。IB 代表 *interface builder*，这是
    Xcode 中我们操作 storyboard 的部分。当你将 @IBOutlet 关键字放在属性前面时，旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5)
    所示。这表示你可以将该属性连接到 storyboard 中的一个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4912
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4913
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：具有 IBOutlet 属性的 AddBirthdayViewController 用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4914
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包可选类型，因为当视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载完成，IBOutlet 就会被赋予它们在 storyboard 中所连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4915
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-4916
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 并为输入控件设置了属性，是时候连接“名”文本字段、“姓”文本字段和“生日”日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-4917
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 storyboard 中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧窗格中打开身份检查器。你应该能看到顶部的
    Custom Class 部分。将类更改为 AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6)
    所示。
- en: '![](Image00228.jpg)'
  id: totrans-4918
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-4919
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-4920
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本字段和日期选择器。在左侧大纲视图中点击“添加生日”场景旁边的三角形，展开该场景中项目的菜单。然后，按住
    CONTROL 键并点击黄色视图控制器图标旁边的 **Add a Birthday** 打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-4921
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象被蓝色高亮时，可以放开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-4922
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-4923
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *控件*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-4924
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你会看到“Birthdate Picker”出现在连接框中，旁边显示birthdatePicker，且连接圆圈已填充（参见[图 10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker控件连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在创建AddBirthdayViewController时已经将其定义为该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-4925
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-4926
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *控件已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-4927
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将firstNameTextField从其圆圈连接到“First Name”标签下方的文本框。最后，将lastNameTextField连接到“Last
    Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-4928
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的部分。让我们回到*AddBirthdayViewController.swift*，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-4929
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-4930
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期在未来是不合逻辑的，所以我们需要写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来完成这个设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论了viewDidLoad()方法，位于[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以在AddBirthdayViewController中找到此方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4931
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE602]'
  id: totrans-4932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-4933
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，因此我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad()。请注意，在方法中保留super.viewDidLoad()这一行非常重要。当你创建一个子类，如AddBirthdayViewController，并重写原始父类的方法时，确保也调用父类的方法。苹果可能在UIViewController的viewDidLoad()方法中有一些我们不知道的特殊代码，所以如果不调用这个父类方法，可能会导致不可预料的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-4934
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前的日期和时间。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-4935
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用[第9章](text00020.html#ch09)中制作的按钮，从这个视图控制器保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-4936
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-4937
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日记录，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-4938
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-4939
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个saveTapped(_:)方法，每当用户点击保存按钮时都会调用。将以下代码添加到AddBirthdayViewController中，在viewDidLoad()方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4940
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE603]'
  id: totrans-4941
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-4942
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction标记位于➊处，是一个关键字，它将一个函数直接与视图控制器中的一个元素连接，并允许我们指定用户在该元素上进行操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时它将被执行。当你编写IBAction方法时，应该始终包含一个参数，该参数表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以根据需要为这个参数命名。在这里，我们希望每次用户点击保存时调用saveTapped(_:)方法，这个保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。print(_:)方法位于➍处，可以帮助我们查看在测试代码时保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-4943
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet连接到storyboard元素一样。返回到你的*Main.storyboard*文件。按住CONTROL并点击“添加生日”这一行以打开连接对话框。在连接对话框的底部，有一个名为接收的操作的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动从saveTapped:旁边的圆圈到Add
    a Birthday视图控制器中的保存按钮以进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-4944
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-4945
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框的底部，位于接收的操作下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-4946
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，调试控制台应显示“保存按钮已被点击”的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-4947
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-4948
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入完firstNameTextField和lastNameTextField后，获取其中的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-4949
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，名为text。这个text属性包含了在文本字段中输入的内容，因此你可以使用它来获取用户在saveTapped(_:)中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4950
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE604]'
  id: totrans-4951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-4952
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或者为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学习过的nil合并操作符(??)来实现这一点。这里我们使用常量而非变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-4953
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对lastName做相同的操作，位于➋处。在你获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-4954
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用，看看会发生什么。尝试在文本字段中不输入任何内容时点击保存按钮，然后再试试输入名字和姓氏后点击保存按钮。你应该会看到类似这样的输出：
- en: '[PRE605]'
  id: totrans-4955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-4956
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并看到计算机将其输出到调试控制台。接下来，让我们专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-4957
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-4958
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `birthdatePicker` 获取日期就像从 `firstNameTextField` 或 `lastNameTextField` 获取文本一样简单。UIDatePicker
    类有一个 `date` 属性，它表示当前由选择器显示的日期。对于 `birthdatePicker`，就是 `birthdatePicker.date`。当用户更改
    UIDatePicker 时，`date` 属性也会发生变化，所以你可以使用 `birthdayPicker.date` 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-4959
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的 `saveTapped(_:)` 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4960
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE606]'
  id: totrans-4961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-4962
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE607]'
  id: totrans-4963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4964
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 `firstName`、`lastName` 和 `birthdate`——这三个数据点是创建生日所需的！你会注意到，在调试控制台中显示的日期格式有点奇怪，还包括时间和
    +0000 的时区偏移。暂时不必太担心这个问题。我们将在 [第11章](text00022.html#ch11) 中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-4965
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-4966
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 `firstName`、`lastName` 和 `birthdate` 输入，你可以使用这些信息，通过生日类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-4967
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `saveTapped(_:)` 方法中的 `print` 语句，因为我们将用测试 `newBirthday` 实例的 `print` 语句来替换它们。然后将以下代码添加到
    `saveTapped(_:)` 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4968
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE608]'
  id: totrans-4969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-4970
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用生日类的初始化方法创建一个 `newBirthday` 实例，并传入 `firstName`、`lastName` 和 `birthdate`
    的常量。创建 `newBirthday` 后，在 ➋ 处，你使用点表示法将它的属性输出到调试控制台。打印的输出将与早期的 `print` 语句相同，但这次你获取的是
    `newBirthday` 实例中的值。运行应用，输入一个生日，并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE609]'
  id: totrans-4971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-4972
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在 [第11章](text00022.html#ch11) 中学到如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-4973
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-4974
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。我们通过向类中添加 cancelTapped(_:) 方法来实现这一行为，它将调用一个内置的
    UIViewController 方法，叫做 dismiss(animated:completion:)。这个方法做的正是它名字所暗示的事情——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4975
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE610]'
  id: totrans-4976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-4977
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于设置关闭屏幕的动画效果。传入 true 以便用户看到“添加生日”屏幕滑下屏幕的效果，像一个专业的应用程序一样！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是可以传入函数的一段代码。如果在视图控制器被关闭后需要执行任何代码，可以使用这个 completion 闭包。因为你在这里不需要做任何事情，可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-4978
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-4979
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样进行操作。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。点击并拖动
    cancelTapped(_:) 方法条目到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-4980
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用程序，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该能看到“添加生日”屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-4981
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-4982
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后你无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表视图控制器中显示生日列表。
- en: viewDidLoad() This method is called as soon as the view controller has been
    created but before its view appears on the screen. This is a great place to do
    any initial setup of the view that you want to do only once.
  id: totrans-4983
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 该方法在视图控制器创建后但在视图显示之前被调用。这个方法是进行任何只需要执行一次的视图初始设置的好地方。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-4984
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 该方法在 viewDidLoad() 后和视图控制器的视图每次显示在屏幕之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-4985
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 该方法与 viewWillAppear(_:) 类似，只不过它是在视图控制器的视图出现在屏幕上之后被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-4986
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 该方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-4987
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法 viewDidLoad() 非常有用。Swift 期望任何继承
    UIViewController 的类都使用这个方法，因此当你创建 UIViewController 的子类时，它会自动为 viewDidLoad() 方法添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-4988
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并没有为其他三个方法提供占位符代码。如果你决定使用其中之一，你可以开始输入，自动完成功能将填充其细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-4989
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会被调用一次——即当视图控制器首次创建时——但 viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖了视图控制器的屏幕并被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经加载并处于另一个屏幕后面。如果你希望每次视图出现时都刷新信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-4990
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。同时，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”的[第
    149 页](text00021.html#page_149)中，我们将重写 AddBirthdayViewController 中的 viewDidLoad()。然而，目前我们可以暂时不管这些方法，直接将代码连接到我们在[第
    9 章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-4991
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-4992
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器有一个 First Name 文本字段、一个 Last Name 文本字段和一个 Birthdate
    日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是为这些输入控件分配与屏幕元素连接的 IBOutlet 变量。在 AddBirthdayViewController
    类的 viewDidLoad() 方法之前，添加以下三个属性（灰色行表示一些现有代码，供放置参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-4993
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE611]'
  id: totrans-4994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-4995
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于放置在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，这是 Xcode 中我们编辑故事板的部分。当你在属性前面加上
    @IBOutlet 关键字时，旁边的边距中会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-4996
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-4997
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *带有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-4998
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的数据类型为UITextField! ➋，它是一个隐式解包的可选类型，因为在视图控制器首次创建时，IBOutlets的值为nil。然而，当视图加载后，IBOutlets将获得它们在故事板中连接到的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-4999
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5000
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController并为输入控件设置了属性，是时候连接“名字”和“姓氏”文本字段以及“出生日期”日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5001
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接着，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。你应该能在顶部看到一个自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-5002
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5003
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5004
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日”场景中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住CONTROL键并点击**添加生日**，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5005
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，找到“出口”下的birthdatePicker、firstNameTextField和lastNameTextField。点击birthdatePicker旁边的空圆圈并拖动到故事板中的日期选择器。当日期选择器对象高亮显示为蓝色时，可以松开（请参见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5006
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5007
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5008
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”旁边列出了birthdatePicker，并且连接框中的连接圆圈已填充，说明连接成功（请参见[图10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在AddBirthdayViewController中为其创建属性时指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5009
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5010
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5011
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动firstNameTextField的圆圈，将其连接到“名字”标签下方的文本字段。最后，将lastNameTextField连接到“姓氏”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5012
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的设置。接下来，我们回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5013
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5014
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期不可能是未来的日期，因此我们要写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来实现这种设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一文中讨论了viewDidLoad()方法，见[第145页](text00021.html#page_145)。这个方法会自动添加到我们的视图控制器中，因此找到AddBirthdayViewController中的该方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5015
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE612]'
  id: totrans-5016
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5017
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是UIViewController类的方法，所以我们需要使用`override`关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，在该方法中保留`super.viewDidLoad()`这一行非常重要。当你创建一个子类，比如AddBirthdayViewController，并重写原始父类的方法时，你需要确保调用父类的方法。Apple可能在UIViewController的`viewDidLoad()`中有一些我们不知道的特殊代码，如果不调用这个父类的方法，可能会导致不可预料的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5018
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的最大日期，你只需在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个新的日期，即当前的日期和时间。现在尝试运行应用程序，应该无法选择未来的日期了！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5019
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，这样你就可以从这个视图控制器中使用你在[第9章](text00020.html#ch09)中创建的按钮来保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5020
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5021
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始实现“保存”按钮！当用户点击“保存”时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5022
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5023
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个`saveTapped(_:)`方法，每当用户点击“保存”按钮时就会调用。请将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5024
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE613]'
  id: totrans-5025
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5026
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将函数与视图控制器中的元素直接连接，并允许我们指定当用户在该元素上执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”时执行。编写IBAction方法时，应该始终包括一个参数，用于表示触发该方法的UI元素。通常，我们使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以根据需要自定义此参数名。在本例中，我们希望每当用户点击“保存”按钮时调用`saveTapped(_:)`方法，`Save`按钮是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。在➔处的`print(_:)`方法有助于我们在测试代码时看到“保存”按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5027
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。返回你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击“Add a Birthday”这一行，打开连接对话框。在对话框的底部，有一个名为 Received Actions 的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到 Add a Birthday
    视图控制器中的保存按钮，将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5028
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5029
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9: IBActions 列表显示在连接对话框底部的 Received Actions 部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5030
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，消息“The save button was tapped.”应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5031
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5032
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，用以在用户输入姓名后从 firstNameTextField 和 lastNameTextField
    获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5033
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选字符串属性。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用它来获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5034
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE614]'
  id: totrans-5035
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5036
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在，即用户输入了值），或者为空字符串
    ""。你可以使用 [第五章](text00015.html#ch05) 中学到的 nil 合并操作符（??）来实现。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5037
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5038
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。试着在没有输入任何内容的文本框中点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似如下的输出：
- en: '[PRE615]'
  id: totrans-5039
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5040
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5041
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5042
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前显示的日期。对于 birthdatePicker，date 属性就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5043
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5044
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE616]'
  id: totrans-5045
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5046
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE617]'
  id: totrans-5047
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5048
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据正是创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，它还包含了时间和+0000时区偏移。暂时不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5049
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5050
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5051
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用打印语句来测试新的newBirthday实例。然后，将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5052
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE618]'
  id: totrans-5053
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5054
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建了一个newBirthday实例，并传入firstName、lastName和birthdate常量。创建newBirthday后，在➋处，你使用点符号将它的属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你得到的值来自newBirthday实例。运行应用程序，输入一个生日，并点击保存按钮，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE619]'
  id: totrans-5055
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5056
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日对象。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5057
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5058
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，"添加生日"屏幕应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现此功能，该方法将调用一个内建的UIViewController方法，叫做dismiss(animated:completion:)。这个方法的作用就是关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5059
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE620]'
  id: totrans-5060
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5061
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:)➊接受两个参数。animated参数用于动画化关闭屏幕。传入true，这样用户就能看到“添加生日”屏幕从屏幕上滑动消失，效果就像一个专业的应用程序！第二个参数是一个可选闭包，称为completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为此处不需要任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-5062
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5063
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接起来。你可以像将 saveTapped(_:) 方法与保存按钮连接一样，去 *Main.storyboard*
    并打开“添加生日”视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5064
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个步骤后，运行应用，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该能看到“添加生日”从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5065
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5066
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将书写的代码连接到应用的视觉界面。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName 和
    birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后无法查看它们。在 [第 11 章](text00022.html#ch11)
    中，我们将向你展示如何在 Birthdays 表格视图控制器中显示你的生日列表。
- en: viewWillAppear(_:) This method is called after viewDidLoad() and before each
    time the view controller’s view appears on the screen.
  id: totrans-5067
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillAppear(_:) 这个方法在 viewDidLoad() 之后、每次视图控制器的视图出现在屏幕上之前被调用。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-5068
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法类似于 viewWillAppear(_:)，只是它在视图控制器的视图出现在屏幕上之后才会被调用。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-5069
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时被调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-5070
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。第一个方法，viewDidLoad()，非常有用。Swift 期望所有子类化
    UIViewController 的类都使用这个方法，因此当你子类化 UIViewController 时，Swift 会自动在模板中添加 viewDidLoad()
    的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-5071
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并没有为其他三个方法提供占位符代码。如果你决定使用其中一个方法，可以开始输入，它会自动补全细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-5072
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只会被调用一次——即视图控制器第一次创建时——但 viewWillAppear(_:) 会在每次视图控制器的视图即将出现在屏幕上时被调用。所以，如果另一个屏幕覆盖在视图控制器的屏幕上，随后移除，使视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，而 viewDidLoad() 则不会，因为视图控制器已经在另一个屏幕后面加载了。如果你希望每次视图出现时都刷新新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5073
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 12 章](text00023.html#ch12) 中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。另外，在
    “[设置最大出生日期](text00021.html#ch10lev2sec6)” 的 [149 页](text00021.html#page_149) 中，我们将在
    AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以先不动这些方法，直接将我们的代码连接到 [第 9
    章](text00020.html#ch09) 中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5074
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5075
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器包含一个“名字”文本字段、一个“姓氏”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这通过为这些输入控件分配与屏幕元素连接的
    IBOutlet 变量来完成。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前（灰色的线条表示一些现有代码位置），添加以下三个属性：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5076
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE621]'
  id: totrans-5077
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5078
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，位于可以在故事板中连接的属性前面。IB 代表 *interface builder*，即 Xcode 中我们用于编辑故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，旁边会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将属性连接到故事板中的某个元素。如果圆圈没有填充，说明该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5079
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5080
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *与用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5081
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlet
    属性的初始值为 nil。然而，一旦视图加载，IBOutlet 属性就会赋予它们在故事板中连接到的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5082
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5083
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是连接“名字”和“姓氏”文本字段以及“出生日期”日期选择器。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5084
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，接着在左侧大纲视图中选择 **添加生日场景**，然后在右侧面板中打开身份检查器。你应该能看到顶部的 Custom Class
    部分。将类更改为 AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5085
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5086
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5087
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁的三角形以展开该场景中项目的菜单。然后，按住
    CONTROL 键并点击 **Add a Birthday**，该按钮位于黄色视图控制器图标旁边，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5088
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以松开（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5089
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5090
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *的 outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5091
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，且连接圆圈已填充，那么连接成功（参见 [图 10-8](text00021.html#ch10fig8)）。您只能将
    birthdatePicker outlet 连接到日期选择器。如果您尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建该属性时就指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5092
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5093
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *的 outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5094
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，方法是从其圆圈拖动并点击将其连接到 First Name 标签下方的文本字段。最后，连接 lastNameTextField
    到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5095
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5096
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5097
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期设定在未来是不合理的，因此我们需要编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论过
    viewDidLoad() 方法，在 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController
    中的这个方法并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5098
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE622]'
  id: totrans-5099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5100
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，如：override
    func viewDidLoad()。请注意，保留方法中的 super.viewDidLoad() 这一行是很重要的。当你创建一个子类，如 AddBirthdayViewController，并重写原始父类的方法时，确保也调用父类中的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5101
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，您只需要在 ➊ 输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个表示当前日期和时间的新日期。现在尝试运行应用程序，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，使您能够使用 [第 9 章](text00020.html#ch09) 中创建的按钮在这个视图控制器中保存和取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在开始实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个每次用户点击保存按钮时都会调用的saveTapped(_:)方法开始。在viewDidLoad()方法之后，添加以下代码到AddBirthdayViewController中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5107
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE623]'
  id: totrans-5108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5109
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的@IBAction是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素进行操作时应执行的代码。在这个例子中，我们将添加一个函数，该函数将在用户点击保存时执行。当你编写IBAction方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名是sender➋，但你可以根据需要命名该参数。在本例中，我们希望在用户点击保存时调用saveTapped(_:)方法，而保存是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem➌。在➊处的print(_:)方法帮助我们在测试代码时看到保存按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5110
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“Add
    a Birthday”行，打开连接对话框。在连接对话框的底部是一个叫做Received Actions的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“Add
    a Birthday”视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5111
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5112
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction在连接对话框的底部列出，位于Received Actions下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5113
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，调试控制台应该显示消息“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为saveTapped(_:)方法添加代码，在用户输入名字后，从firstNameTextField和lastNameTextField中提取出名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5116
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是用户在文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用以下代码来获取用户输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5117
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE624]'
  id: totrans-5118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5119
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了一个值），如果没有，则设置为一个空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现这一点。这里我们使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再次尝试。你应该会看到类似以下的输出：
- en: '[PRE625]'
  id: totrans-5122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5123
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5125
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，这是当前选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5126
  prefs: []
  type: TYPE_NORMAL
  zh: 在saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5127
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE626]'
  id: totrans-5128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE627]'
  id: totrans-5130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5131
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了firstName、lastName和birthdate——这三个数据是创建Birthday所需的！你会注意到调试控制台中显示的日期格式有点奇怪，它还包含了时间和+0000的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式，以及如何不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用新的print语句来测试newBirthday实例。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5135
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE628]'
  id: totrans-5136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5137
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建newBirthday之后，在➋处，你使用点语法将它的属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你是从newBirthday实例中获取的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE629]'
  id: totrans-5138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5139
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday实例。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5141
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法会调用一个内建的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法的作用就是它所说的——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5142
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE630]'
  id: totrans-5143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5144
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true 以便用户看到添加生日屏幕从屏幕上滑下。它看起来就像一个专业的应用！第二个参数是一个可选闭包，叫做
    completion。*闭包*是一个可以传入函数的代码块。completion 闭包可以在视图控制器被关闭后执行任何代码。由于你在这里不需要任何操作，可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-5145
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样，进行相同的操作。进入
    *Main.storyboard*，并打开添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5147
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到添加生日界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)，我们将展示如何在
    Birthdays 表视图控制器中显示你的生日列表。
- en: viewDidAppear(_:) This method is similar to viewWillAppear(_:) except it is
    called after a view controller’s view appears on the screen.
  id: totrans-5150
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidAppear(_:) 这个方法与 viewWillAppear(_:) 类似，只不过它是在视图控制器的视图出现在屏幕上之后调用的。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-5151
  prefs: []
  type: TYPE_NORMAL
  zh: viewWillDisappear(_:) 这个方法在视图控制器的视图即将离开屏幕时调用。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-5152
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的子类 UIViewController 中重写这些方法中的任何一个。其中第一个，viewDidLoad()，非常有用。Swift 期望任何继承
    UIViewController 的子类都使用此方法，因此在你继承 UIViewController 时，它会自动将 viewDidLoad() 的占位符添加到模板中。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-5153
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 并未为其他三个方法提供占位代码。如果你决定使用其中一个，你可以开始输入，自动补全会填充细节。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-5154
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管viewDidLoad()方法只在视图控制器第一次创建时调用一次，但viewWillAppear(_:)方法会在每次视图控制器的视图即将出现在屏幕上时调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，然后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)方法将再次被调用，但viewDidLoad()不会，因为视图控制器已经在另一个屏幕后面加载过了。如果你希望每次视图出现时都刷新显示新信息，可以重写viewWillAppear(_:)方法。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5155
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用viewWillAppear(_:)方法来刷新我们的生日列表。另外，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”[第149页](text00021.html#page_149)中，我们将重写AddBirthdayViewController中的viewDidLoad()方法。现在，我们可以暂时不管这些方法，直接将代码与我们在[第9章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5156
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5157
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器包含了一个“名字”文本框、一个“姓氏”文本框和一个“生日”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给与屏幕元素连接的IBOutlets来实现。在AddBirthdayViewController类的viewDidLoad()方法之前，添加以下三个属性（灰色行表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5158
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE631]'
  id: totrans-5159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5160
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB代表*界面构建器*，即我们在Xcode中编辑故事板的部分。当你在属性前加上@IBOutlet关键字时，旁边的边距会出现一个小圆圈，如[图10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的一个元素。如果圆圈没有被填充，说明该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5161
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5162
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-5：* 带有IBOutlet属性的AddBirthdayViewController *用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5163
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField属性的类型UITextField! ➋ 是一个隐式解包可选类型，因为在视图控制器首次创建时，IBOutlets的值为nil。然而，一旦视图加载，IBOutlets会被赋值为它们在故事板中连接的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及其输入控件的属性，接下来是将“名字”和“姓氏”文本框以及“生日”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，选择左侧大纲视图中的**添加生日场景**，然后在右侧窗格中打开身份检查器。你应该会看到顶部的自定义类部分，将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5167
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5168
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本字段和日期选择器。在左侧大纲视图中点击“添加生日”场景旁的三角形，展开该场景中项目的菜单。然后，按住
    CONTROL 键点击**添加生日**，在黄色视图控制器图标旁，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5170
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器，来连接 birthdatePicker。当日期选择器对象被蓝色高亮显示时，可以放开鼠标（见
    [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5171
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5172
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *外接口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到连接框中列出了 Birthdate Picker，且连接圆圈已填充，那么你就知道连接成功了（见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker 外接口连接到日期选择器。如果你试图将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建该属性时已经指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5174
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5175
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *外接口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将 firstNameTextField 连接到 First Name 标签下的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5177
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时完成了故事板的工作。现在让我们回到 *AddBirthdayViewController.swift* 中，通过代码设置一个最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5178
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5179
  prefs: []
  type: TYPE_NORMAL
  zh: 人们不可能有未来的出生日期，因此我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论了
    viewDidLoad() 方法，位于 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此在 AddBirthdayViewController
    中找到此方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5180
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE632]'
  id: totrans-5181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5182
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类中的一个方法，因此我们需要使用override关键字来重写它，如下所示：override
    func viewDidLoad() 。请注意，在方法中保留super.viewDidLoad()这一行很重要。当你创建一个子类，如AddBirthdayViewController，并重写原始父类的方法时，你需要确保也调用父类中的方法。苹果可能在UIViewController的viewDidLoad()方法中有一些我们不知道的特殊代码，所以如果不调用这个父类方法，可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5183
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date() 。Date()方法创建一个新的日期，该日期是当前的日期和时间。现在尝试运行应用程序。应该不可能选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5184
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在[第9章](text00020.html#ch09)中创建的按钮来保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个saveTapped(_:)方法，每次用户点击保存按钮时都会调用。将以下代码添加到AddBirthdayViewController中的viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5189
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE633]'
  id: totrans-5190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5191
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时会执行。编写IBAction方法时，你应该始终包含一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为sender
    ➋ ，但你可以随意命名这个参数。在这个例子中，我们希望每次用户点击保存时都会调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌ 。print(_:)方法在 ➍ 处帮助我们查看在测试代码时是否点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5192
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”（Received
    Actions）部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分中，点击并拖动saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5193
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5194
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions在连接对话框底部的“接收的操作”下列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5195
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用程序。当你点击保存按钮时，调试控制台中应该会显示消息：“保存按钮被点击了。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，获取用户输入的名字和姓氏，分别从 firstNameTextField 和 lastNameTextField
    中提取出来。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5198
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 `saveTapped(_:)`
    方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5199
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE634]'
  id: totrans-5200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串
    ""。你可以使用你在 [第 5 章](text00015.html#ch05) 中学习过的空值合并运算符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5202
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 ➋ 处对 lastName 执行相同的操作。获取到 firstName 和 lastName 的值后，将它们打印到控制台，以便你在运行应用程序时能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5203
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏之后再试一次。你应该会看到类似如下的输出：
- en: '[PRE635]'
  id: totrans-5204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5205
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用程序中输入一个名字，并在调试控制台中看到计算机输出它了。接下来，让我们重点关注如何输出一个日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5207
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个名为 date 的属性，表示当前日期选择器中显示的日期。对于 birthdatePicker，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5208
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 `saveTapped(_:)` 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5209
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE636]'
  id: totrans-5210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE637]'
  id: totrans-5212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5213
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 firstName、lastName 和 birthdate——这三项数据足以创建一个生日对象了！你会注意到调试控制台中显示的日期格式很奇怪，包含了时间和
    +0000 的时区偏移。现在不用太担心这个问题，我们将在 [第 11 章](text00022.html#ch11) 中讨论日期格式以及如何在不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入数据，你可以使用这些信息通过 Birthday 类的初始化方法来创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5216
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用打印语句来测试`newBirthday`实例。然后，向`saveTapped(_:)`方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5217
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE638]'
  id: totrans-5218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5219
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个`newBirthday`实例，并传入了`firstName`、`lastName`和`birthdate`常量。在创建了`newBirthday`之后，在➋处，你使用点语法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你获得的是来自`newBirthday`实例的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该能在调试控制台看到类似以下的输出：
- en: '[PRE639]'
  id: totrans-5220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5221
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个Birthday实例。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday实例。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5223
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加一个Birthday，Add a Birthday屏幕应该消失。让我们通过向我们的类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法将调用一个内置的UIViewController方法`dismiss(animated:completion:)`。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在`AddBirthdayViewController`类中的`saveTapped(_:)`方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5224
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE640]'
  id: totrans-5225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5226
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`dismiss(animated:completion:)` ➊ 有两个参数。`animated`参数用于为关闭屏幕添加动画效果。传入true，这样用户就能看到Add
    a Birthday屏幕从屏幕上滑下来。看起来就像一个专业的应用程序一样！第二个参数是一个可选闭包，名为`completion`。*闭包*是可以传递到函数中的一段代码。如果你希望在视图控制器被关闭后运行某些代码，可以使用这个`completion`闭包。因为在这里你不需要执行任何操作，可以直接传入`nil`。
- en: '![](Image00233.jpg)'
  id: totrans-5227
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5228
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`方法连接到取消按钮。你可以像将`saveTapped(_:)`方法连接到保存按钮一样操作。在*Main.storyboard*中打开Add
    Birthday视图控制器的连接对话框，然后点击并拖动`cancelTapped(_:)`方法的列表项到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5229
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用程序，点击**+**进入Add a Birthday屏幕，然后点击**Cancel**。你应该看到Add a Birthday屏幕滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 `firstName`、`lastName`
    和 `birthdate` 属性的生日对象。目前，你可以保存生日，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将向你展示如何在“生日”表格视图控制器中显示你的生日列表。
- en: viewWillDisappear(_:) This method is called when the view controller’s view
    is about to leave the screen.
  id: totrans-5232
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewWillDisappear(_:)` 这个方法在视图控制器的视图即将离开屏幕时被调用。'
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-5233
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在子类 `UIViewController` 中重写这些方法中的任何一个。第一个方法，`viewDidLoad()`，非常有用。Swift 期望所有子类化
    `UIViewController` 的类都使用这个方法，因此当你子类化 `UIViewController` 时，它会自动在模板中为 `viewDidLoad()`
    添加一个占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-5234
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 没有为其他三个方法提供占位符代码。如果你决定使用其中一个，你可以开始输入，自动补全将填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-5235
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 `viewDidLoad()` 只在视图控制器第一次创建时被调用一次，但 `viewWillAppear(_:)` 每次视图控制器的视图即将出现在屏幕上时都会被调用。因此，如果另一个屏幕被覆盖在视图控制器的屏幕上，然后移除，使得视图控制器的屏幕重新出现，`viewWillAppear(_:)`
    将会再次被调用，而 `viewDidLoad()` 则不会被调用，因为视图控制器已经在另一个屏幕后面加载过了。如果你希望每次视图出现时都能用新信息刷新它，你可以重写
    `viewWillAppear(_:)`。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5236
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](text00023.html#ch12)中，我们将使用 `viewWillAppear(_:)` 方法来刷新我们的生日列表。此外，在
    “[设置最大出生日期](text00021.html#ch10lev2sec6)”（第[149页](text00021.html#page_149)）中，我们将在
    `AddBirthdayViewController` 中重写 `viewDidLoad()`。但是现在，我们可以暂时不使用这些方法，而将代码连接到我们在[第
    9 章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5238
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本字段，一个“姓氏”文本字段和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给与屏幕元素连接的输入控件（使用
    `IBOutlet`）。在 `viewDidLoad()` 方法之前，将以下三个属性添加到 `AddBirthdayViewController` 类的顶部（灰色行表示现有代码，用于定位）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5239
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE641]'
  id: totrans-5240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5241
  prefs: []
  type: TYPE_NORMAL
  zh: '`@IBOutlet` ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *interface builder* ，即 Xcode
    中用于处理故事板的部分。当你在属性前添加 `@IBOutlet` 关键字时，属性旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5)
    所示。这个小圆圈表示你可以将该属性连接到故事板中的某个元素。如果圆圈没有被填充，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5242
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5243
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* `AddBirthdayViewController` *具有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5244
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个属性 `firstNameTextField` 的数据类型是 `UITextField!` ➋ ，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图被加载，IBOutlets 就会获得它们在故事板中连接到的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了 `AddBirthdayViewController` 和输入控件的属性，接下来是将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5247
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，改变故事板中“添加生日”视图控制器的类为 `AddBirthdayViewController`，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*，然后在左侧大纲视图中选择 **Add a Birthday Scene**，并在右侧面板中打开 Identity Inspector。你应该能看到顶部的
    Custom Class 部分，将类名更改为 `AddBirthdayViewController`，如 [图 10-6](text00021.html#ch10fig6)
    所示。
- en: '![](Image00228.jpg)'
  id: totrans-5248
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5249
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* `AddBirthdayViewController` *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 `AddBirthdayViewController` 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中，点击“添加生日场景”旁边的三角形，展开该场景中项目的菜单。然后，按住
    CONTROL 键并点击黄色视图控制器图标旁边的 **Add a Birthday**，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5251
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 部分，你可以看到 `birthdatePicker`、`firstNameTextField` 和 `lastNameTextField`。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器，来连接
    `birthdatePicker`。当日期选择器对象被蓝色高亮显示时，你可以松开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5252
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5253
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* `birthdatePicker` *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5254
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到连接框中 birthdatePicker 旁边列出了 Birthdate Picker，并且连接圆圈已填充（见 [图10-8](text00021.html#ch10fig8)
    ），那么说明连接成功。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，将不会发生任何事情。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时给定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5255
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5256
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5257
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 firstNameTextField 从其圆圈连接到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5258
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。现在让我们回到 *AddBirthdayViewController.swift* 文件，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5259
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5260
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期不可能是未来的日期，所以让我们编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》的 [第145页](text00021.html#page_145)
    中讨论了 viewDidLoad() 方法。它会自动添加到我们的视图控制器中，因此找到 AddBirthdayViewController 中的此方法并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5261
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE642]'
  id: totrans-5262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5263
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，如下所示： override
    func viewDidLoad() 。请注意，重要的是要在方法中保留 super.viewDidLoad() 这一行。当你创建一个子类（如 AddBirthdayViewController
    ）并重写原始父类的方法时，你需要确保也调用父类的方法。Apple 可能在 UIViewController 的 viewDidLoad() 中运行了一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5264
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate ，你只需要在➊处输入 birthdatePicker.maximumDate = Date()
    。Date() 方法会创建一个当前日期和时间的新日期。现在尝试运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在 [第9章](text00020.html#ch09) 中创建的按钮来保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 saveTapped(_:) 方法，每次用户点击保存按钮时都会调用它。在 viewDidLoad() 方法后，向 AddBirthdayViewController
    添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5270
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE643]'
  id: totrans-5271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5272
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接与视图控制器中的元素连接，并允许我们指定在用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时会执行。编写
    IBAction 方法时，应该始终包含一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋ ，但是你可以根据需要为此参数命名。在这个例子中，我们希望在用户点击保存按钮时调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem ➌ 。在
    ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5273
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到故事板元素一样。返回你的 *Main.storyboard* 文件。按住
    CONTROL 键并点击“添加生日”这一行以打开连接对话框。在连接对话框的底部，有一个名为“已接收的操作”（Received Actions）的部分，如 [图
    10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5274
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5275
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部的“已接收的操作”部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5276
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，调试控制台中应该会显示消息“保存按钮被点击了。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5278
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入姓名后，从 firstNameTextField 和 lastNameTextField
    中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5279
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。这个 text 属性的值是输入到文本字段中的内容，因此你可以使用它来获取用户在
    saveTapped(_:) 方法中输入的信息，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5280
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE644]'
  id: totrans-5281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5282
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或者设置为空字符串
    ""。你可以使用在 [第 5 章](text00015.html#ch05) 中学习过的 nil 合并运算符（??）来完成这一操作。这里我们使用常量而非变量，因为用户输入的名字和姓氏的值不会发生变化。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5283
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。在获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5284
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似如下的输出：
- en: '[PRE645]'
  id: totrans-5285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5286
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并看到计算机将其输出到你的调试控制台。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5287
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5288
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker来说，它就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5289
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5290
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE646]'
  id: totrans-5291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE647]'
  id: totrans-5293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5294
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了firstName、lastName和birthdate——这三项数据是我们创建Birthday所需的！你会注意到，在调试控制台中显示的日期格式奇怪，还包括了时间和+0000的时区偏移。暂时不用太担心这些。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5295
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5297
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试新Birthday实例的print语句来替换它们。然后，将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5298
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE648]'
  id: totrans-5299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5300
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你获取的是来自newBirthday实例的值。运行应用，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE649]'
  id: totrans-5301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5302
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将会在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5304
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内置的UIViewController方法，名为dismiss(animated:completion:)。这个方法的作用正如它所说的——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5305
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE650]'
  id: totrans-5306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5307
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制关闭屏幕时的动画效果。传入true，这样用户可以看到“添加生日”界面从屏幕上滑下，看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传入函数的一段代码。如果你想在视图控制器关闭后执行某些代码，可以使用completion闭包。由于你这里不需要任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-5308
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5309
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法连接到取消按钮。你可以通过和将saveTapped(_:)方法连接到保存按钮的方式一样来做这件事。进入*Main.storyboard*，然后打开Add
    Birthday视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5310
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日界面，再点击**取消**。你应该会看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5312
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存生日信息，但保存后无法查看。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: You can override any of these methods in your subclass UIViewController . The
    first of these, viewDidLoad() , is very useful. Swift expects anyone who subclasses
    UIViewController to use this method, so it automatically adds a placeholder to
    the template for viewDidLoad() when you subclass UIViewController .
  id: totrans-5313
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在UIViewController的子类中重写这些方法中的任何一个。其中第一个，viewDidLoad()，非常有用。Swift期望所有UIViewController的子类都使用这个方法，因此当你子类化UIViewController时，它会自动在模板中添加viewDidLoad()的占位符。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-5314
  prefs: []
  type: TYPE_NORMAL
  zh: Swift不会为其他三个方法提供占位符代码。如果你决定使用其中一个，可以开始输入，自动补全会填写详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-5315
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，虽然 viewDidLoad() 只在视图控制器第一次创建时调用一次，但 viewWillAppear(_:) 会在视图控制器的视图即将出现在屏幕上时每次被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，并且随后被移除以使视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会，因为视图控制器已经在另一个屏幕下加载过了。如果你希望每次视图出现时都刷新新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5316
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 12 章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”一节的[第
    149 页](text00021.html#page_149)，我们将覆盖 AddBirthdayViewController 中的 viewDidLoad()
    方法。然而，目前我们可以暂时不管这些方法，将我们的代码与[第 9 章](text00020.html#ch09)中设置的输入控件连接起来。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5318
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器包含一个 First Name 文本字段、一个 Last Name 文本字段和一个 Birthdate
    日期选择器。要使用这些输入控件，我们需要在代码中引用它们，通过将变量赋给与界面元素连接的 IBOutlet 输入控件来实现。在 AddBirthdayViewController
    类的 viewDidLoad() 方法之前添加以下三个属性（灰色行表示一些现有代码，表示放置位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5319
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE651]'
  id: totrans-5320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5321
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表*界面构建器*，它是 Xcode 中我们进行故事板设计的部分。当你在属性前加上
    @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5322
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5323
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* 带有 IBOutlet 属性的 AddBirthdayViewController *用于输入控件*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5324
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋，它是一个隐式展开的可选类型，因为当视图控制器第一次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载完成，IBOutlets 会被赋值为它们在故事板中连接的元素。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5325
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5327
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，并在右侧窗格中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5328
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5329
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中项目的菜单。然后，按住
    CONTROL 键并点击**添加生日**，位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5331
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器，来连接 birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开（参见
    [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5332
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5333
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 出现在连接框中的 birthdatePicker 旁边，且连接圆圈已填充，表示连接成功（参见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker 出口连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在创建属性时在 AddBirthdayViewController 中给它指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5335
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5336
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5337
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个 firstNameTextField 的圆圈，将其连接到“名字”标签下方的文本字段。最后，将 lastNameTextField
    连接到“姓氏”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5338
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，故事板的工作完成了。让我们回到 *AddBirthdayViewController.swift* 文件中，设置代码中的最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5340
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期不可能是在未来的，所以我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这一设置。我们在 “[创建添加生日视图控制器](text00021.html#ch10lev2sec3)” 中讨论过
    viewDidLoad() 方法，见 [第 145 页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以找到 AddBirthdayViewController
    中的这个方法，并在其中添加以下一行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5341
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE652]'
  id: totrans-5342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5343
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，所以我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，保持方法中的 super.viewDidLoad() 这一行非常重要。当你创建一个子类，如 AddBirthdayViewController，并重写原始父类的方法时，你需要确保也调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5344
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个当前日期和时间的日期。现在尝试运行应用，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5345
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，这样你就可以使用在 [第 9 章](text00020.html#ch09) 中制作的按钮，从这个视图控制器保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5347
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5348
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5349
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用该方法。在 AddBirthdayViewController
    中的 viewDidLoad() 方法之后添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5350
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE653]'
  id: totrans-5351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5352
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 @IBAction 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素执行操作时应该运行的代码。在这个例子中，我们将添加一个函数，当用户点击保存时它会被执行。当你编写
    IBAction 方法时，应该始终包含一个参数，用于指示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称为 sender ➋，但你可以将这个参数命名为任何你喜欢的名字。在本例中，我们希望
    saveTapped(_:) 方法在用户点击保存时被调用，保存是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5353
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 并点击 “添加生日” 这一行以打开连接对话框。在连接对话框的底部，有一个名为 "Received Actions" 的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到 "添加生日" 视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5354
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5355
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的 Received Actions 部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5356
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的应用程序。当你点击保存按钮时，调试控制台中应该会显示消息“保存按钮已点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5357
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5358
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入名字后，它将从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5359
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值就是输入到文本框中的内容，因此你可以用它来在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5360
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE654]'
  id: totrans-5361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5362
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在，即用户输入了值），否则设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的nil合并操作符(??)来实现。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5363
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对lastName做同样的操作，参考➋。在你获取了firstName和lastName的值后，打印它们到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5364
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中不输入任何内容，然后再输入名字和姓氏后再次尝试。你应该会看到类似以下的输出：
- en: '[PRE655]'
  id: totrans-5365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5366
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用中输入名字，并在调试控制台看到计算机输出它。接下来我们来聚焦于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5367
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5368
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，这就是birthdatePicker.date。当用户改变UIDatePicker时，date属性也会发生变化，所以你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5369
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5370
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE656]'
  id: totrans-5371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5372
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用并查看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE657]'
  id: totrans-5373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5374
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需的！你会注意到在调试控制台中显示的日期格式很奇怪，里面还包括时间和+0000的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5375
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5376
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5377
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用打印新Birthday实例的print语句替换它们。然后将以下行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5378
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE658]'
  id: totrans-5379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5380
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你通过使用Birthday类的初始化器创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。在创建newBirthday之后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你从newBirthday实例中获取值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE659]'
  id: totrans-5381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5382
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5384
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该关闭。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内置的UIViewController方法，叫做dismiss(animated:completion:)。这个方法的作用就是它的名字——关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5385
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE660]'
  id: totrans-5386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5387
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于动画化关闭界面。传入true，以便用户可以看到添加生日界面从屏幕上滑下。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为这里不需要任何操作，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-5388
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5389
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮关联起来。你可以像将saveTapped(_:)方法与保存按钮关联一样，使用相同的方式进行操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5390
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5392
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将编写的代码与应用程序的视觉界面连接起来。您还学习了如何使用输入文本字段和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，您可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向您展示如何在
    Birthdays 表视图控制器中显示您的生日列表。
- en: Swift doesn’t give you placeholder code for the other three methods. If you
    decide to use one, you can start typing it and autocomplete will fill in the details.
  id: totrans-5393
  prefs: []
  type: TYPE_NORMAL
  zh: Swift 不会为其他三个方法提供占位符代码。如果您决定使用其中一个方法，您可以开始输入它，自动完成功能会填充详细信息。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-5394
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 仅在视图控制器首次创建时调用一次，viewWillAppear(_:) 会在视图控制器的视图即将显示到屏幕上时每次都被调用。因此，如果另一个屏幕覆盖在视图控制器的屏幕上，并随后被移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    将再次被调用，而 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后面加载了。如果您希望每次视图出现时都能刷新新的信息，可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5395
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。此外，在[“设置最大出生日期”](text00021.html#ch10lev2sec6)一节的[第149页](text00021.html#page_149)中，我们将重写
    AddBirthdayViewController 中的 viewDidLoad() 方法。然而，现阶段我们可以先不管这些方法，直接将代码与[第9章](text00020.html#ch09)中设置的输入进行连接。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5396
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5397
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器包含一个 First Name 文本字段、一个 Last Name 文本字段和一个 Birthdate 日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给与屏幕元素连接的
    IBOutlets 输入控件来实现。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前，添加以下三个属性（灰色线条表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5398
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE661]'
  id: totrans-5399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5400
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放置在可以在故事板中连接的属性前面。IB 代表 *界面构建器*，这是 Xcode 中我们工作于故事板的部分。当您将
    @IBOutlet 关键字放置在属性前面时，属性旁边的边距会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示您可以将该属性连接到故事板中的元素。当圆圈未被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5401
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5402
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* 带有 IBOutlet 属性的 AddBirthdayViewController，用于输入控件'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5403
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器第一次创建时，IBOutlet
    的值是 nil。然而，当视图加载时，IBOutlet 会被赋予它们在故事板中连接的内容的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5405
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5406
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，以便使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，接着选择左侧大纲视图中的 **添加生日场景**，并在右侧面板中打开身份检查器。您应该看到顶部的 Custom Class
    部分，将类更改为 AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5407
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5408
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5409
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本字段和日期选择器。点击左侧大纲视图中“添加生日”场景旁的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击 **添加生日**，这将打开一个连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5410
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。在它们旁边的空圆圈上点击并拖动到故事板中的日期选择器上，即可连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，您可以松开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5411
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5412
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker 插座'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5413
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接框中看到 Birthdate Picker 显示在 birthdatePicker 旁边，并且连接圆圈已填充，说明连接成功（参见 [图 10-8](text00021.html#ch10fig8)）。您只能将
    birthdatePicker 插座连接到日期选择器。如果您尝试将其连接到标签或其他类型的视图，将不会发生任何反应。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中为其定义的属性类型。
- en: '![](Image00230.jpg)'
  id: totrans-5414
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5415
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *插座已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5416
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动从 firstNameTextField 的圆圈到 First Name 标签下方的文本字段，来连接 firstNameTextField。最后，将
    lastNameTextField 连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5417
  prefs: []
  type: TYPE_NORMAL
  zh: 目前您已经完成了故事板的工作。接下来，我们回到 *AddBirthdayViewController.swift* 文件中，以便在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5418
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5419
  prefs: []
  type: TYPE_NORMAL
  zh: 人的生日不可能是未来的日期，所以让我们写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来实现这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论了viewDidLoad()方法，见[第145页](text00021.html#page_145)。这个方法自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到这个方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5420
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE662]'
  id: totrans-5421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5422
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类中的一个方法，所以我们需要使用override关键字来重写它，如下所示：override
    func viewDidLoad()。注意，必须保留方法中的super.viewDidLoad()这一行。当你创建一个子类（如AddBirthdayViewController）并重写原父类的方法时，你需要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()方法中运行了一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5423
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需要在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前日期和时间的日期对象。现在试着运行一下应用，应该就不能选择未来的日期了！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5424
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中制作的按钮，从这个视图控制器保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5426
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5428
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个saveTapped(_:)方法，每当用户点击保存按钮时都会调用它。将以下代码添加到AddBirthdayViewController类中的viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5429
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE663]'
  id: totrans-5430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5431
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时执行。当编写IBAction方法时，应该始终包括一个参数，用于接收触发该方法的UI元素。通常情况下，使用下划线来隐藏参数标签，参数名为sender
    ➋，但是你可以根据需要将这个参数命名为其他任何名称。在这个例子中，我们希望每当用户点击保存按钮时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。print(_:)方法在➍处帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5432
  prefs: []
  type: TYPE_NORMAL
  zh: 将 saveTapped(_:) 连接到 Save 按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击 Add a Birthday 行，打开连接对话框。在连接对话框的底部，有一个叫做 Received Actions 的部分，如[图
    10-9](text00021.html#ch10fig9)所示。在这个部分，点击并拖动 saveTapped:旁边的圆圈到 Add a Birthday
    视图控制器中的 Save 按钮，将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5433
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5434
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的 Received Actions 部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5435
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击 Save 按钮时，应该会在调试控制台中显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5436
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5437
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入名字后从 firstNameTextField 和 lastNameTextField
    中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5438
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性 text。这个 text 属性的值是输入到文本框中的内容，所以你可以使用它在 saveTapped(_:)
    中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5439
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE664]'
  id: totrans-5440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5441
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即如果用户输入了值），否则设置为空字符串
    ""。你可以使用你在[第 5 章](text00015.html#ch05)中学到的 nil 合并运算符 (??) 来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5442
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的事情。在你获取了 firstName 和 lastName 的值后，打印它们到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5443
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中没有输入任何内容的情况下点击 Save 按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE665]'
  id: totrans-5444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5445
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出。接下来，让我们关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5447
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5448
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 saveTapped(_:) 方法中添加以下行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5449
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE666]'
  id: totrans-5450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5451
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE667]'
  id: totrans-5452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5453
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了一个 firstName 、一个 lastName 和一个 birthdate——这三项数据是我们创建一个生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和+0000的时区偏移。暂时不用太担心这些问题。我们将在[第11章](text00022.html#ch11)讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5454
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5455
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName 、 lastName 和 birthdate 输入，你可以利用这些信息通过 Birthday 类的初始化器创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5456
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替换它们。然后将以下代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5457
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE668]'
  id: totrans-5458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5459
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个新的 newBirthday 实例，并传入了 firstName 、 lastName 和
    birthdate 常量。创建 newBirthday 后，在 ➋ 处，你通过点符号输出了它的属性到调试控制台。打印的输出将与之前的 print 语句一样，只不过这次你获取的是来自
    newBirthday 实例的值。运行应用，输入生日并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下内容的输出：
- en: '[PRE669]'
  id: totrans-5460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5461
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只是创建了一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5463
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们可以通过向我们的类中添加一个 cancelTapped(_:) 方法来实现这个行为，这个方法将调用一个内置的
    UIViewController 方法叫做 dismiss(animated:completion:) 。这个方法的作用就是它所描述的——它会关闭当前显示的视图控制器。请在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5464
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE670]'
  id: totrans-5465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5466
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭界面。传入 true，这样用户就可以看到“添加生日”界面滑动消失，效果就像一个专业的应用一样！第二个参数是一个可选的闭包，叫做
    completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行某些代码，可以使用 completion 闭包。因为你不需要做任何事情，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-5467
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5468
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到取消按钮。你可以与将 saveTapped(_:) 方法连接到保存按钮的方式完全相同来完成这一操作。进入
    *Main.storyboard* 并打开 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5469
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击 **+** 进入 Add a Birthday 屏幕，然后点击 **Cancel**。你应该看到 Add a Birthday
    从屏幕滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你所学的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5471
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: It’s important to note that although viewDidLoad() is called only one time—when
    the view controller is first created—viewWillAppear(_:) is called every time the
    view controller’s view is about to appear onscreen. So, if another screen is put
    on top of a view controller’s screen and then removed so that the view controller’s
    screen reappears, viewWillAppear(_:) will be called again but viewDidLoad() will
    not, because the view controller was already sitting there loaded behind another
    screen. If you want the view to be refreshed with new information every time it
    appears, you can override viewWillAppear(_:) .
  id: totrans-5472
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管 viewDidLoad() 只会被调用一次——即视图控制器首次创建时——viewWillAppear(_:) 会在每次视图控制器的视图即将显示在屏幕上时被调用。因此，如果另一个屏幕被覆盖在视图控制器的屏幕上，然后移除，使得视图控制器的屏幕重新出现，viewWillAppear(_:)
    会再次被调用，但 viewDidLoad() 不会被调用，因为视图控制器已经在另一个屏幕后加载好了。如果你希望每次视图出现时都刷新显示新信息，你可以重写 viewWillAppear(_:)。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5473
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法来刷新我们的生日列表。同时，在 “[设置最大出生日期](text00021.html#ch10lev2sec6)”
    中的[第149页](text00021.html#page_149)，我们将重写 AddBirthdayViewController 中的 viewDidLoad()
    方法。然而，现在我们可以先将这些方法留着不管，专注于将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5474
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5475
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的 Add a Birthday 视图控制器包含一个 First Name 文本字段、一个 Last Name 文本字段和一个 Birthdate
    日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，通过将变量分配给与界面元素连接的 IBOutlet 来实现。请在 AddBirthdayViewController
    类的 viewDidLoad() 方法之前添加以下三个属性（灰色的行表示现有代码，用于显示位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5476
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE671]'
  id: totrans-5477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5478
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在 storyboard 中连接的属性前面。IB 代表 *界面构建器*，这是 Xcode 中我们处理
    storyboard 的部分。当你在属性前面加上 @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5)
    所示。这表示你可以将该属性连接到 storyboard 中的某个元素。当圆圈没有填充时，意味着该属性还没有连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5479
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5480
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：AddBirthdayViewController *带有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5481
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋，它是一个隐式解包的可选值，因为在视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋予它们在 storyboard 中连接的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5483
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 以及输入控件的属性，接下来是将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来的时候了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5484
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 storyboard 中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，然后在右侧窗格中打开身份检查器。你应该在顶部看到一个自定义类部分，将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5485
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5486
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5487
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中
    **添加生日场景** 旁边的三角形，展开该场景中项的菜单。然后，按住 CONTROL 并点击黄色的视图控制器图标旁边的 **添加生日**，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5488
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5489
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5490
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 在连接框中列在 birthdatePicker 旁边，并且连接圆圈已填充，那么就说明连接成功（见[图10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中为其创建属性时指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5492
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5493
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *连接已成功完成。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5494
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 firstNameTextField 的圆圈连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5495
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift* 中，通过代码设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5496
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5497
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们写一些代码，防止 birthdatePicker 选择未来的日期，因为让一个人的生日日期出现在未来是没有意义的。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一文中讨论了
    viewDidLoad() 方法，内容见[第145页](text00021.html#page_145)。该方法会自动添加到我们的视图控制器中，所以请在 AddBirthdayViewController
    中找到这个方法，并在其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5498
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE672]'
  id: totrans-5499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5500
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，像这样：`override
    func viewDidLoad()`。请注意，务必保留方法中的 `super.viewDidLoad()` 这一行。当你创建一个子类，如 AddBirthdayViewController，并重写原父类中的方法时，你需要确保也调用父类中的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 方法中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5501
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 `birthdatePicker.maximumDate = Date()`。Date()
    方法会创建一个当前日期和时间的新日期。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5502
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够通过在[第9章](text00020.html#ch09)中创建的按钮，保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5503
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5504
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5505
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5506
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 saveTapped(_:) 方法，每次用户点击保存按钮时都会调用它。将以下代码添加到 AddBirthdayViewController
    中，在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5507
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE673]'
  id: totrans-5508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5509
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 处的 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，在用户点击保存时运行。当你编写
    IBAction 方法时，应该始终包括一个用于触发该方法的 UI 元素的参数。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋ ，但你可以根据需要给这个参数命名。在这个例子中，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem ➌ 。➍
    处的 print(_:) 方法帮助我们在调试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5510
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮的方式就像将 IBOutlet 连接到 storyboard 元素一样。返回你的 *Main.storyboard*
    文件。按住 CONTROL 并点击 “添加生日”行以打开连接对话框。在连接对话框的底部有一个名为 “接收的操作” 的部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到添加生日视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5511
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5512
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列在连接对话框底部的接收的操作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5513
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用程序。当你点击保存按钮时，调试控制台应该显示 “保存按钮已点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5514
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5515
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，以便在用户输入后从 firstNameTextField 和 lastNameTextField
    中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5516
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，叫做 text。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用它，获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5517
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE674]'
  id: totrans-5518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5519
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在，即如果用户输入了一个值），或者设置为空字符串
    "" 。你可以使用你在 [第 5 章](text00015.html#ch05) 中学习过的空合并操作符 (??) 来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5520
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 lastName 执行相同的操作，位于 ➋ 。在你为 firstName 和 lastName 获取值之后，将它们打印到控制台，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5521
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何文本的情况下点击“保存”按钮，然后再输入姓名后尝试一次。你应该会看到类似以下的输出：
- en: '[PRE675]'
  id: totrans-5522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5523
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入姓名，并看到计算机将其输出到调试控制台。接下来，让我们关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5524
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5525
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker ，它就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5526
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5527
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE676]'
  id: totrans-5528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5529
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE677]'
  id: totrans-5530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5531
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了 firstName 、 lastName 和 birthdate ——这三个数据项是我们创建生日所需的！你会注意到在调试控制台中显示的日期格式很奇怪，还包括了时间和
    +0000 的时区偏移。暂时不用担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5532
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5533
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName 、 lastName 和 birthdate 输入，你可以利用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5534
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后，将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5535
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE678]'
  id: totrans-5536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5537
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ ，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入了 firstName 、 lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ ，你通过点语法输出其属性到调试控制台。打印的输出与之前的 print 语句相同，不过这次你是从 newBirthday
    实例中获取值。运行应用，输入一个生日，然后点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE679]'
  id: totrans-5538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5539
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5540
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5541
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加 cancelTapped(_:) 方法来实现这个行为，它将调用一个内建的
    UIViewController 方法，称为 dismiss(animated:completion:)。这个方法正如其名，它会解除当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5542
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE680]'
  id: totrans-5543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5544
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画效果地关闭屏幕。传入 true，这样用户可以看到“添加生日”界面从屏幕滑下，效果就像一个专业的应用！第二个参数是一个可选的闭包，称为
    completion。*闭包* 是一个可以传递给函数的代码块。completion 闭包可以在视图控制器被解除显示后运行你想执行的任何代码。因为这里不需要做任何事情，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-5545
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5546
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以像将 saveTapped(_:) 方法与保存按钮连接一样来操作。打开 *Main.storyboard*
    并弹出添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5547
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该看到“添加生日”界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5548
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5549
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: In [Chapter 12](text00023.html#ch12) , we’ll be using the viewWillAppear(_:)
    method to refresh our birthday list. Also, in “[Setting a Maximum Birthdate](text00021.html#ch10lev2sec6)
    ” on [page 149](text00021.html#page_149) , we’ll override viewDidLoad() in AddBirthdayViewController
    . For right now, however, we can leave these methods alone and connect our code
    to the inputs we set up in [Chapter 9](text00020.html#ch09) .
  id: totrans-5550
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](text00023.html#ch12)中，我们将使用 viewWillAppear(_:) 方法刷新生日列表。同时，在“[设置最大出生日期](text00021.html#ch10lev2sec6)”（[第149页](text00021.html#page_149)）中，我们将在
    AddBirthdayViewController 中重写 viewDidLoad()。不过现在，我们可以暂时不处理这些方法，先将代码连接到我们在[第9章](text00020.html#ch09)中设置的输入控件。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5551
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码与输入控件连接**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5552
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框、一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是通过分配变量将它们连接到与屏幕元素相关联的
    IBOutlets。请将以下三个属性添加到 AddBirthdayViewController 类的顶部，放置在 viewDidLoad() 方法之前（灰色行表示现有代码的部分，供参考）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5553
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE681]'
  id: totrans-5554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5555
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB 代表 *界面构建器*，它是 Xcode 中用于处理故事板的部分。当你在属性前面加上
    @IBOutlet 关键字时，旁边的边距会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈没有被填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5556
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5557
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：AddBirthdayViewController *包含用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5558
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据显示类型为 UITextField! ➋，是一个隐式解包可选类型，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图被加载，IBOutlets 就会被赋予它们在故事板中所连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5559
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5560
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 以及输入控件的属性，是时候将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5561
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*。接着，在左侧大纲视图中选择**添加生日场景**，并在右侧窗格中打开身份检查器。你应该能看到顶部的“自定义类”部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-5562
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5563
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5564
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本框和日期选择器。在左侧大纲视图中，点击“添加生日”场景旁的三角形按钮，展开该场景中项目的菜单。然后，按住
    CONTROL 键并点击**添加生日**，位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5565
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮时，你可以松开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5566
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5567
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5568
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中，且其连接圆圈已填充（参见[图10-8](text00021.html#ch10fig8)），你就知道连接成功了。你只能将birthdatePicker出口连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在创建AddBirthdayViewController属性时给它指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5569
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5570
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5571
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个文本框的圆圈，将其连接到“First Name”标签下方的文本框。最后，将“Last Name”文本框连接到“Last Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5572
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时已经完成了故事板的设计。接下来，我们回到*AddBirthdayViewController.swift*，在代码中设置一个最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5573
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5574
  prefs: []
  type: TYPE_NORMAL
  zh: 让人有未来生日日期显然不合理，因此让我们编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来实现这个设置。在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》[第145页](text00021.html#page_145)中，我们讨论了viewDidLoad()方法。它自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到这个方法并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5575
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE682]'
  id: totrans-5576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5577
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的一个方法，因此我们需要使用override关键字重写它，像这样：override func
    viewDidLoad()。请注意，在方法中保留super.viewDidLoad()这一行非常重要。当你创建一个子类（如AddBirthdayViewController）并重写父类中的方法时，你希望确保同时调用父类的方法。Apple可能在UIViewController的viewDidLoad()中有一些特殊的代码我们不知道，所以不调用这个父类方法可能会导致意想不到的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5578
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，即当前日期和时间。现在试着运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5579
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中创建的按钮，从这个视图控制器保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5581
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该从输入的信息中创建一个生日，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5582
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5583
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，该方法会在每次用户点击保存按钮时被调用。将以下代码添加到 AddBirthdayViewController
    中，在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5584
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE683]'
  id: totrans-5585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5586
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时该函数会运行。当编写一个
    IBAction 方法时，应该始终包含一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以根据需要命名此参数。在本例中，我们希望每当用户点击保存按钮时调用
    saveTapped(_:) 方法，保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5587
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件中。按住
    CONTROL 键并点击 "添加生日" 这一行以打开连接对话框。在连接对话框的底部有一个名为接收到的操作的区域，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该区域中，点击并从 saveTapped: 旁边的圆圈拖动到 "保存" 按钮上，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5588
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5589
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的底部列出了 IBActions，位于接收到的操作下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5590
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试重新运行你的应用程序。当你点击保存按钮时，调试控制台应显示消息 "保存按钮已被点击"。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5591
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5592
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为 saveTapped(_:) 方法添加代码，这段代码会在用户输入后，从 firstNameTextField 和 lastNameTextField
    中获取用户的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5593
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，称为 text。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以使用它来在
    saveTapped(_:) 方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5594
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE684]'
  id: totrans-5595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5596
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，也就是说，如果用户输入了一个值），否则设置为空字符串
    ""。你可以使用在 [第 5 章](text00015.html#ch05) 中学习的空合并操作符（?? ）来实现这一点。我们在这里使用常量而非变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5597
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。在获取 firstName 和 lastName 的值后，将它们打印到控制台，这样在运行应用程序时就可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5598
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。试着在没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似于下面的输出：
- en: '[PRE685]'
  id: totrans-5599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5600
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入姓名，并在调试控制台中查看计算机输出它。接下来，让我们集中精力获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5601
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5602
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前显示在选择器上的日期。对于 birthdatePicker，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5603
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5604
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE686]'
  id: totrans-5605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5606
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似于以下的输出：
- en: '[PRE687]'
  id: totrans-5607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE687]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5608
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了 firstName、lastName 和 birthdate ——这三个数据是创建 Birthday 所需的！你会注意到调试控制台中显示的日期格式很奇怪，其中还包括了时间和时区偏移
    +0000。现在不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5609
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5610
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码能够访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5611
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的打印语句，因为我们将用新的打印语句来测试 newBirthday 实例。然后在 saveTapped(_:)
    方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5612
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE688]'
  id: totrans-5613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE688]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5614
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类初始化器创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你通过点符号输出它的属性到调试控制台。打印的输出将和之前的打印语句一样，但这次你是从 newBirthday
    实例中获取的值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该会在调试控制台看到类似于以下的输出：
- en: '[PRE689]'
  id: totrans-5615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE689]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5616
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5617
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5618
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，这个方法会调用UIViewController的一个内置方法dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中，紧接在saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5619
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE690]'
  id: totrans-5620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE690]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5621
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于动画化关闭界面。传入true，用户就能看到“添加生日”界面从屏幕上滑动消失。这看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做completion。*闭包*是一段可以传入函数的代码块。如果在视图控制器被关闭后有任何代码需要运行，可以使用这个completion闭包。因为你不需要在这里执行任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-5622
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5623
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到“取消”按钮。你可以像将saveTapped(_:)方法连接到“保存”按钮一样进行操作。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法的条目到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5624
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该看到“添加生日”界面从屏幕上滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5625
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5626
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。现在你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在“生日”表格视图控制器中显示你的生日列表。
- en: '**CONNECTING CODE TO THE INPUT CONTROLS**'
  id: totrans-5627
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到输入控件**'
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5628
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的“添加生日”视图控制器有一个“名字”文本框，一个“姓氏”文本框和一个“出生日期”日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，这样我们就可以通过将变量赋值给与屏幕元素通过IBOutlet连接的输入控件来实现。在AddBirthdayViewController类的viewDidLoad()方法之前添加以下三个属性（灰色的行表示现有代码的位置）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5629
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE691]'
  id: totrans-5630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE691]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5631
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于属性前，这些属性可以在故事板中连接。IB 代表 *interface builder*，这是我们在 Xcode
    中操作故事板的部分。当您将 @IBOutlet 关键字放在属性前面时，属性旁边的边距中会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5)
    所示。这表示您可以将该属性连接到故事板中的一个元素。当圆圈未填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5632
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5633
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *，具有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5634
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 会被赋予它们在故事板中所连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5635
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5636
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5637
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，这样您就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接下来，选择左侧大纲视图中的 **Add a Birthday Scene**，并在右侧窗格中打开身份检查器。您应该会看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5638
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5639
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5640
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本字段和日期选择器。点击左侧大纲视图中
    Add a Birthday Scene 旁边的三角形，展开该场景中的项目菜单。然后，CONTROL -点击 **Add a Birthday** 旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5641
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被高亮显示为蓝色时，您可以松开（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5642
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5643
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5644
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“出生日期选择器”列在出生日期选择器旁边，并且连接框中的连接圆圈已填充（见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将出生日期选择器连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，则不会发生任何事情。Xcode
    知道出生日期选择器必须连接到 UIDatePicker 类，因为我们在创建 AddBirthdayViewController 属性时已经指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5645
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5646
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：*出生日期选择器*已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5647
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，点击并拖动从 firstNameTextField 的圆圈到 First Name 标签下方的文本框，连接第一个名字文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5648
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你已经完成了故事板的部分。现在让我们回到 *AddBirthdayViewController.swift* 文件，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5649
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5650
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期不应该在未来，因此我们需要编写代码，防止出生日期选择器选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这种设置。在[第145页](text00021.html#page_145)的“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中，我们讨论了
    viewDidLoad() 方法。这个方法会自动添加到我们的视图控制器中，所以在 AddBirthdayViewController 中找到这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5651
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE692]'
  id: totrans-5652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE692]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5653
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类中的一个方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类（例如 AddBirthdayViewController）并重写原始超类的方法时，务必确保你也调用了超类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 方法中运行了一些我们不知道的特殊代码，因此不调用该超类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5654
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器的最大日期，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date() 方法创建一个新的日期，表示当前日期和时间。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5655
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，这样你就可以使用在[第9章](text00020.html#ch09)中创建的按钮，保存生日并取消从此视图控制器添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5656
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5657
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5658
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5659
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要创建一个 saveTapped(_:) 方法，该方法将在每次用户点击保存按钮时被调用。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5660
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE693]'
  id: totrans-5661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE693]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5662
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 @IBAction 是一个关键字，用于将一个函数直接连接到视图控制器中的某个元素，并允许我们指定用户对该元素进行操作时应该执行的代码。在本例中，我们将添加一个函数，当用户点击保存时会执行。编写
    IBAction 方法时，应该始终包括一个参数，用于表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋，但你可以将这个参数命名为任何你想要的名称。在这个例子中，我们希望
    saveTapped(_:) 方法在用户点击保存按钮时被调用，保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5663
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮的过程，就像将 IBOutlet 连接到故事板元素一样。返回你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击“添加生日”那一行，打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”的部分，如[图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，完成连接。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5664
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5665
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框的底部列出了 IBActions，位于“接收的操作”下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5666
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，"The save button was tapped." 的消息应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5667
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5668
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 saveTapped(_:) 方法添加代码，在用户输入姓名后，从 firstNameTextField 和 lastNameTextField
    获取用户的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5669
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，名为 text。这个 text 属性的值就是用户输入到文本框中的内容，所以你可以使用它在
    saveTapped(_:) 方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5670
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE694]'
  id: totrans-5671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE694]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5672
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，也就是用户输入了值）或者设置为空字符串
    ""。你可以使用 nil 合并操作符（??）来实现这一点，这个你在[第5章](text00015.html#ch05) 中学过。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5673
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。获取 firstName 和 lastName 的值后，打印它们到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5674
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在没有输入任何内容的情况下点击“保存”按钮，然后在输入了姓名和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE695]'
  id: totrans-5675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE695]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5676
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入一个名字，并看到计算机将其输出到调试控制台。接下来，让我们重点关注获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5677
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5678
  prefs: []
  type: TYPE_NORMAL
  zh: 从`birthdatePicker`获取日期就像从`firstNameTextField`或`lastNameTextField`获取文本一样简单。`UIDatePicker`类有一个`date`属性，它是当前显示在选择器中的日期。对于`birthdatePicker`，就是`birthdatePicker.date`。当用户更改`UIDatePicker`时，`date`属性也会改变，因此你可以使用`birthdayPicker.date`来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5679
  prefs: []
  type: TYPE_NORMAL
  zh: 在`saveTapped(_:)`方法中添加以下行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5680
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE696]'
  id: totrans-5681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE696]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5682
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE697]'
  id: totrans-5683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE697]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5684
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了`firstName`、`lastName`和`birthdate`——这三项数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括了时间和时区偏移（+0000）。暂时不需要太担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5685
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5686
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入了，你可以使用这些信息通过生日类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5687
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用打印语句来测试新的`newBirthday`实例。然后，在`saveTapped(_:)`方法中添加以下行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5688
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE698]'
  id: totrans-5689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE698]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5690
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊位置，你使用生日类的初始化方法创建了一个`newBirthday`实例，并传入了`firstName`、`lastName`和`birthdate`的常量。创建完`newBirthday`后，在➋位置，你使用点符号将其属性输出到调试控制台。打印的输出将和之前的打印语句相同，只不过这次你是从`newBirthday`实例中获取值。运行应用程序，输入一个生日，点击“保存”看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE699]'
  id: totrans-5691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE699]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5692
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日对象。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5693
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5694
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想要添加生日，添加生日屏幕应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法，叫做 dismiss(animated:completion:)。这个方法做的就是它说的那样——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5695
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE700]'
  id: totrans-5696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE700]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5697
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就能看到添加生日屏幕滑出屏幕的动画效果，效果看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是一段可以传递给函数的代码块。completion 闭包可以在视图控制器消失后执行某些代码。因为在这里你不需要任何操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-5698
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5699
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以用与将 saveTapped(_:) 方法连接到保存按钮完全相同的方式来完成这一步。前往
    *Main.storyboard* 并打开 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5700
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **取消**。你应该会看到添加生日界面滑出屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5701
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5702
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后无法查看它们。在 [第 11 章](text00022.html#ch11)
    中，我们将向你展示如何在 Birthdays 表格视图控制器中显示你的生日列表。
- en: 'In the storyboard, our Add a Birthday view controller has a First Name text
    field, a Last Name text field, and a Birthdate date picker. To use these input
    controls, we need to refer to them in the code, which we do by assigning variables
    to the input controls that are connected to the screen elements with IBOutlets.
    Add the following three properties to the top of the AddBirthdayViewController
    class before the viewDidLoad() method (the gray lines indicate some of the existing
    code, for placement):'
  id: totrans-5703
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事板中，我们的添加生日视图控制器有一个名字字段、一个姓氏字段和一个出生日期选择器。为了使用这些输入控件，我们需要在代码中引用它们，方法是通过为输入控件分配与界面元素连接的
    IBOutlets 变量。在 AddBirthdayViewController 类的 viewDidLoad() 方法之前添加以下三个属性（灰色的线表示一些现有的代码，仅用于定位）：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5704
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE701]'
  id: totrans-5705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE701]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5706
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在 storyboard 中连接的属性前面。IB 代表*界面构建器*，这是我们在 Xcode 中操作
    storyboard 的部分。当你在属性前加上 @IBOutlet 关键字时，旁边会出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到
    storyboard 中的一个元素。当圆圈没有填充时，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5707
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5708
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *具有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5709
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlets
    的值是 nil。然而，当视图加载后，IBOutlets 会被赋予它们在 storyboard 中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5710
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到 storyboard**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5711
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5712
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将 storyboard 中“添加生日”视图控制器的类更改为 AddBirthdayViewController，以便可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧窗格中打开身份检查器。你应该会看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-5713
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5714
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5715
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本字段和日期选择器。在左侧大纲视图中点击
    Add a Birthday Scene 旁边的三角形，展开该场景中项目的菜单。然后，按住 CONTROL 键点击**添加生日**旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5716
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，点击“Outlets”下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到
    storyboard 中的日期选择器来连接 birthdatePicker。当日期选择器对象被高亮显示为蓝色时，可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5717
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5718
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5719
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充（参见 [图10-8](text00021.html#ch10fig8)
    ），那就说明连接成功了。你只能将 birthdatePicker outlet 连接到一个日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为在我们创建 AddBirthdayViewController 属性时，给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5720
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5721
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：birthdatePicker outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5722
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将 firstNameTextField 连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5723
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成 storyboard 的部分。让我们回到 *AddBirthdayViewController.swift* 来通过代码设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5724
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5725
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人的生日来说，不可能是未来的日期，所以我们编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”
    中讨论过 viewDidLoad() 方法，见 [第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以在
    AddBirthdayViewController 中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5726
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE702]'
  id: totrans-5727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE702]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5728
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，所以我们需要使用 `override` 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，重要的是要在方法中保留行 `super.viewDidLoad()`。当你创建一个子类，比如 AddBirthdayViewController，并重写原始父类的方法时，你需要确保也调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5729
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 `birthdatePicker.maximumDate = Date()`。Date()
    方法会创建一个新的日期，代表当前的日期和时间。现在试着运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5730
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在 [第9章](text00020.html#ch09) 中创建的按钮来保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5732
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5733
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5734
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 saveTapped(_:) 方法，每次用户点击保存按钮时都会调用它。在 AddBirthdayViewController 中的
    viewDidLoad() 方法后面添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5735
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE703]'
  id: totrans-5736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE703]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5737
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时该函数会运行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋ ，但你可以根据需要自定义该参数的名称。在这种情况下，我们希望在用户点击保存按钮时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem 。所以我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。位于 ➍ 的 print(_:) 方法有助于我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5738
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个叫做“接收的操作”部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5739
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5740
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBAction 在连接对话框的底部列出，位于接收的操作下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5741
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，应该会在调试控制台中显示消息 "保存按钮已被点击"。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5742
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5743
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，当用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取相应的值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5744
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，叫做 text 。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用它来获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5745
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE704]'
  id: totrans-5746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE704]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5747
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ ，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了一个值），否则设置为空字符串
    "" 。你可以使用 nil 合并操作符 (??) 来实现这一点，这是你在 [第 5 章](text00015.html#ch05) 中学到的。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5748
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 lastName 在 ➋ 做相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，以便你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5749
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再试一次。你应该看到类似如下的输出：
- en: '[PRE705]'
  id: totrans-5750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE705]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5751
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，我们将专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5752
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5753
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前显示在选择器上的日期。对于birthdatePicker来说，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5754
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5755
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE706]'
  id: totrans-5756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE706]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5757
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE707]'
  id: totrans-5758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE707]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5759
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了一个firstName，一个lastName，和一个birthdate——这三项数据是我们创建生日所需要的！你会注意到调试控制台中显示的日期格式有些奇怪，它还包括时间和+0000的时区偏移。暂时不用过于担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5760
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5761
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入数据，你可以使用这些信息通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5762
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5763
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE708]'
  id: totrans-5764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE708]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5765
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你获取的是newBirthday实例的值。运行应用，输入生日，点击保存看看会发生什么。你应该在调试控制台看到类似如下的输出：
- en: '[PRE709]'
  id: totrans-5766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE709]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5767
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5769
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，Add a Birthday 屏幕应该消失。我们通过在类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。该方法确实如其所述——它会关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中，紧跟 saveTapped(_:) 方法之后，添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5770
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE710]'
  id: totrans-5771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE710]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5772
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画效果来关闭屏幕。传入 true，用户可以看到
    Add a Birthday 屏幕从屏幕上滑下。这将看起来像一个专业的应用程序！第二个参数是一个可选的闭包，名为 completion。*闭包* 是可以传递给函数的一段代码。completion
    闭包可以在视图控制器被关闭后执行任何代码。因为你不需要在这里执行任何操作，所以可以直接传入 nil。
- en: '![](Image00233.jpg)'
  id: totrans-5773
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5774
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样来操作。进入 *Main.storyboard*，打开
    Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5775
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，运行应用程序，点击 **+** 进入 Add a Birthday 屏幕，然后点击 **Cancel**。你应该看到 Add a Birthday
    屏幕向下滑动并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5776
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5777
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将书写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存生日，但保存后无法看到它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5778
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE711]'
  id: totrans-5779
  prefs: []
  type: TYPE_PRE
  zh: '[PRE711]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5780
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，放在可以在故事板中连接的属性前面。IB 代表 *interface builder*，即 Xcode 中用于操作故事板的部分。当你在属性前加上
    @IBOutlet 关键字时，会在旁边的边距上出现一个小圆圈，如[图 10-5](text00021.html#ch10fig5)所示。这表示你可以将该属性连接到故事板中的元素。当圆圈未填充时，意味着该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5781
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5782
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5:* AddBirthdayViewController *具有用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5783
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋，它是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    的值为 nil。然而，一旦视图加载，IBOutlet 就会被赋予在故事板中连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5784
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将您的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5785
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将“名字”和“姓氏”文本框以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5786
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样您就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，并在右侧面板中打开身份检查器。您应该看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5787
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5788
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5789
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本框和日期选择器。在左侧大纲视图中，点击“添加生日”场景旁边的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击**添加生日**，在黄色的视图控制器图标旁边打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5790
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被高亮显示为蓝色时，您可以松开鼠标（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5791
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5792
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet。*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5793
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接框中看到“出生日期选择器”列在 birthdatePicker 旁边，并且连接圆圈已填充，则说明连接成功（参见 [图 10-8](text00021.html#ch10fig8)）。您只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，将不会发生任何反应。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在创建 AddBirthdayViewController 的属性时指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5794
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5795
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5796
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并从它的圆圈拖动到“名字”标签下方的文本框来连接 firstNameTextField。最后，将 lastNameTextField 连接到“姓氏”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5797
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您已经完成了故事板的工作。接下来，让我们回到 *AddBirthdayViewController.swift* 文件中设置代码中的最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5798
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5799
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，出生日期出现在未来是没有意义的，所以让我们写一些代码来防止`birthdatePicker`选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的`viewDidLoad()`方法来实现这一设置。我们在[“创建添加生日视图控制器”](text00021.html#ch10lev2sec3)一文中讨论了`viewDidLoad()`方法，位于[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以在`AddBirthdayViewController`中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5800
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE712]'
  id: totrans-5801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE712]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5802
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类中的一个方法，因此我们需要使用`override`关键字来重写它，像这样：`override
    func viewDidLoad()`。请注意，必须在方法中保留`super.viewDidLoad()`这一行。当您创建一个子类，比如`AddBirthdayViewController`，并且重写了原始父类的方法时，您要确保调用父类中的这个方法。苹果可能在`UIViewController`的`viewDidLoad()`方法中有一些我们不知道的特殊代码，因此如果不调用父类方法，可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5803
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的`maximumDate`，您只需要在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个新的日期对象，表示当前的日期和时间。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5804
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便您可以通过您在[第9章](text00020.html#ch09)中制作的按钮，保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5805
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5806
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮的功能！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5807
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5808
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个`saveTapped(_:)`方法，这个方法会在用户每次点击保存按钮时调用。在`viewDidLoad()`方法后面添加以下代码到`AddBirthdayViewController`中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5809
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE713]'
  id: totrans-5810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE713]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5811
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的`@IBAction`是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定用户对该元素进行操作时应执行的代码。在这个例子中，我们将添加一个函数，当用户点击保存时执行。当您编写`IBAction`方法时，应始终为触发该方法的UI元素包含一个参数。通常，使用下划线来隐藏参数标签，参数名称为`sender`
    ➋，但您可以根据需要命名此参数。在此案例中，我们希望每当用户点击保存按钮时，调用`saveTapped(_:)`方法，这个按钮是`UIBarButtonItem`类型。所以我们指定`sender`的类型是`UIBarButtonItem`
    ➌。`print(_:)`方法在➍处帮助我们在测试代码时查看保存按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5812
  prefs: []
  type: TYPE_NORMAL
  zh: 将`saveTapped(_:)`连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从`saveTapped:`旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5813
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5814
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction列在连接对话框底部的“接收的操作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5815
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再运行一次你的应用。当你点击保存按钮时，应该会在调试控制台中显示消息：“保存按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5816
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5817
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`saveTapped(_:)`方法中添加代码，从`firstNameTextField`和`lastNameTextField`中获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5818
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField`类有一个可选的`String`属性，叫做`text`。这个`text`属性的值是用户在文本字段中输入的内容，因此你可以在`saveTapped(_:)`方法中使用它来获取用户输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5819
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE714]'
  id: totrans-5820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE714]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5821
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊位置，你创建了一个常量`firstName`，并将其值设置为`firstNameTextField.text`（如果存在的话，也就是用户输入了值）或者设置为空字符串`""`。你可以使用在[第5章](text00015.html#ch05)中学到的空合并运算符（??）来实现。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5822
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋位置对`lastName`做同样的操作。在获取`firstName`和`lastName`的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5823
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再尝试一次。你应该会看到类似这样的输出：
- en: '[PRE715]'
  id: totrans-5824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE715]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5825
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以将名字输入到应用中，并在调试控制台中查看计算机输出。接下来，让我们集中精力获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5826
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5827
  prefs: []
  type: TYPE_NORMAL
  zh: 从`birthdatePicker`获取日期和从`firstNameTextField`或`lastNameTextField`获取文本一样简单。`UIDatePicker`类有一个`date`属性，它是当前由日期选择器显示的日期。对于`birthdatePicker`，这是`birthdatePicker.date`。当用户更改`UIDatePicker`时，`date`属性也会改变，因此你可以使用`birthdayPicker.date`来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5828
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到`saveTapped(_:)`方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5829
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE716]'
  id: totrans-5830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE716]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5831
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE717]'
  id: totrans-5832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE717]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5833
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了firstName、lastName和birthdate——这三项数据是创建生日所需的！你会注意到在调试控制台中显示的日期格式很奇怪，还包含了时间和+0000的时区偏移。现在不需要过多担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不包含时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5834
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5835
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5836
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后，将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5837
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE718]'
  id: totrans-5838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE718]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5839
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在你创建newBirthday后，在➋处，你使用点语法将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你从newBirthday实例中获取值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE719]'
  id: totrans-5840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE719]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5841
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5842
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5843
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再希望添加生日，添加生日的界面应该消失。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内建的UIViewController方法，名为dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5844
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE720]'
  id: totrans-5845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE720]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5846
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:)函数➊接受两个参数。animated参数用于设置关闭界面的动画效果。传入true，以便用户能看到添加生日界面从屏幕上滑下的效果。这将看起来像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是一个可以传递给函数的代码块。completion闭包可以在视图控制器被关闭后运行任何代码。由于你不需要任何操作，所以可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-5847
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5848
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以通过与将 saveTapped(_:) 方法连接到保存按钮的相同方式来完成这一步。打开
    *Main.storyboard*，并调出添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5849
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击 **+** 进入添加生日页面，再点击 **取消**。你应该能看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5850
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5851
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的可视化界面。你还学习了如何使用输入文本字段和日期选择器来创建包含 firstName、lastName 和
    birthdate 属性的 Birthday 对象。现在你可以保存生日数据，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表视图控制器中显示生日列表。
- en: '[PRE721]'
  id: totrans-5852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE721]'
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5853
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊的关键字，用于标记可以在故事板中连接的属性。IB 代表 *界面构建器*，这是 Xcode 中我们处理故事板的部分。当你在属性前添加
    @IBOutlet 关键字时，属性旁边的边距处会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的某个元素。如果圆圈没有被填充，表示该属性尚未连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5854
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5855
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* 添加生日视图控制器 *与用于输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5856
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型是 UITextField! ➋，它是一个隐式解包的可选值，因为当视图控制器首次创建时，IBOutlet
    属性的值为 nil。然而，一旦视图加载，IBOutlet 属性就会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5857
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5858
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，是时候将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5859
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将添加生日视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。选择项目导航器中的
    *Main.Storyboard*。接下来，在左侧大纲视图中选择 **添加生日场景**，然后在右侧面板中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5860
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5861
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5862
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本框和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住CONTROL键点击**添加生日**，它位于黄色视图控制器图标旁边，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5863
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开鼠标（参见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5864
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5865
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *插座*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5866
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中，且连接圆圈已填充，则表示连接成功（参见[图10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker插座连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController时，给它指定的数据类型就是UIDatePicker。
- en: '![](Image00230.jpg)'
  id: totrans-5867
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5868
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *插座已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5869
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动firstNameTextField旁边的圆圈，将其连接到“名”标签下的文本框。最后，将lastNameTextField连接到“姓”标签下的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5870
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。让我们回到*AddBirthdayViewController.swift*文件中，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5871
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5872
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期不可能是未来的日期，因此让我们写一些代码来防止`birthdatePicker`选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这样的设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一文中提到过viewDidLoad()方法，位于[第145页](text00021.html#page_145)。这个方法会自动添加到我们的视图控制器中，所以找到AddBirthdayViewController中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5873
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE722]'
  id: totrans-5874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE722]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5875
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类中的一个方法，所以我们需要使用 override 关键字重写它，像这样：override
    func viewDidLoad()。请注意，保留方法中的 super.viewDidLoad() 这一行很重要。当你创建一个子类，比如 AddBirthdayViewController，并重写原始超类的方法时，你需要确保同时调用超类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 方法中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5876
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的最大日期，你只需要在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个当前的日期和时间。现在试着运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5877
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用在 [第 9 章](text00020.html#ch09) 中创建的按钮从这个视图控制器保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5879
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5880
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5881
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用这个方法。在 AddBirthdayViewController
    中的 viewDidLoad() 方法之后添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5882
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE723]'
  id: totrans-5883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE723]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5884
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接与视图控制器中的元素连接起来，并允许我们指定当用户对该元素执行操作时应该运行的代码。在这里，我们将添加一个函数，在用户点击保存时执行。当你编写一个
    IBAction 方法时，应该始终包括一个参数来表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋，但你可以根据需要为这个参数命名。在这种情况下，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看是否已经点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5885
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键点击“添加生日”这一行以打开连接对话框。在连接对话框的底部有一个名为“接收的操作”（Received Actions）的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在这个部分中，从 saveTapped: 旁边的圆圈点击并拖动到 Add a Birthday
    视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5886
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5887
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的底部列出了 IBActions，位于“接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5888
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，"The save button was tapped."这条消息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5889
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5890
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，以便在用户输入后从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5891
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性叫做text。这个text属性的值是文本字段中输入的内容，所以你可以在saveTapped(_:)方法中使用它来获取用户输入，如下代码所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5892
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE724]'
  id: totrans-5893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE724]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5894
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，也就是用户输入了值），或者为空字符串""。你可以使用你在[第5章](text00015.html#ch05)学到的空合并操作符（??）来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5895
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName做同样的操作。在获取firstName和lastName的值后，将它们打印到控制台中，以便你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5896
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再试着输入名字和姓氏后再点击。你应该看到类似这样的输出：
- en: '[PRE725]'
  id: totrans-5897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE725]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5898
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，我们将专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5899
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5900
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker，这是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5901
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5902
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE726]'
  id: totrans-5903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE726]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5904
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行你的应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE727]'
  id: totrans-5905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE727]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5906
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，它还包括时间和+0000的时区偏移。暂时不需要过多担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5907
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5908
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息使用Birthday类初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5909
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替代它们。然后，将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5910
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE728]'
  id: totrans-5911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE728]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5912
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建完newBirthday后，在➋，你使用点符号将它的属性输出到调试控制台。打印的输出与之前的print语句相同，但这次是从newBirthday实例中获取的值。运行应用，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE729]'
  id: totrans-5913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE729]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5914
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5915
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5916
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这个行为，该方法将调用UIViewController的内建方法dismiss(animated:completion:)。这个方法正如其名所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5917
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE730]'
  id: totrans-5918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE730]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5919
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) ➊函数有两个参数。animated参数用于控制关闭界面的动画效果。传入true，这样用户就能看到添加生日界面从屏幕上滑下去，效果就像专业应用一样！第二个参数是一个可选的闭包，名为completion。*闭包*是一段可以传递给函数的代码。如果你想在视图控制器被关闭后执行一些代码，可以使用这个completion闭包。因为在这里你不需要执行任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-5920
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5921
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与取消按钮连接起来。你可以像将saveTapped(_:)方法连接到保存按钮一样操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5922
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5923
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5924
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将书面代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法看到它们。在 [第 11 章](text00022.html#ch11)
    中，我们将向你展示如何在 Birthdays 表视图控制器中显示生日列表。
- en: '@IBOutlet ➊ is a special keyword that is put in front of properties that can
    be hooked up in the storyboard. IB stands for *interface builder* , which is the
    part of Xcode where we work on our storyboard. When you put the keyword @IBOutlet
    in front of a property, a little circle appears in the margin next to it, as shown
    in [Figure 10-5](text00021.html#ch10fig5) . This indicates that you can connect
    the property to an element in the storyboard. When the circle isn’t filled in,
    it means the property hasn’t been connected yet.'
  id: totrans-5925
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBOutlet ➊ 是一个特殊关键字，放在可以在故事板中连接的属性前面。IB 代表 *interface builder*，它是 Xcode 中用于工作在故事板上的部分。当你将
    @IBOutlet 关键字放在属性前面时，旁边的边距会出现一个小圆圈，如 [图 10-5](text00021.html#ch10fig5) 所示。这表示你可以将该属性连接到故事板中的一个元素。当圆圈没有填充时，表示该属性还没有连接。'
- en: '![](Image00227.jpg)'
  id: totrans-5926
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5927
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5928
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋，是一个隐式解包可选值，因为在视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋予它们在故事板中连接的元素的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-5929
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-5930
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 以及输入控件的属性，接下来是将 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-5931
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，然后在左侧大纲视图中选择 **添加生日场景**，并在右侧窗格中打开身份检查器。你应该能在顶部看到一个 Custom Class
    部分。将类更改为 AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-5932
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-5933
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-5934
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中的菜单项。然后，CONTROL
    -点击 **添加生日**，它位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-5935
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮时，你可以松开（参见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-5936
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-5937
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker 控件'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-5938
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 和 birthdatePicker 旁边显示，并且连接圈已填充（参见[图10-8](text00021.html#ch10fig8)），则表示连接成功。你只能将
    birthdatePicker 控件连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时已经指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-5939
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-5940
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *控件已经成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-5941
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，从 First Name 标签下方的文本框连接 firstNameTextField。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-5942
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成 storyboard 的部分。接下来，回到 *AddBirthdayViewController.swift* 中设置代码中最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-5943
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-5944
  prefs: []
  type: TYPE_NORMAL
  zh: 让人有出生日期在未来是不合理的，因此我们可以编写代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这一设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论过
    viewDidLoad() 方法，它自动添加到我们的视图控制器中，所以在 AddBirthdayViewController 中找到此方法，并添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5945
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE731]'
  id: totrans-5946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE731]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-5947
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字来重写它，如下所示：override
    func viewDidLoad()。请注意，保持 super.viewDidLoad() 这一行在方法中是很重要的。当你创建一个子类（比如 AddBirthdayViewController）并重写父类的方法时，你需要确保也调用父类的方法。因为
    Apple 可能在 UIViewController 的 viewDidLoad() 中运行一些我们不知道的特殊代码，所以如果不调用父类的方法，可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-5948
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的最大日期，只需要在 ➊ 位置输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个当前日期和时间的新的日期对象。现在尝试运行应用，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-5949
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你能够通过之前在 [第9章](text00020.html#ch09) 中创建的按钮来保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-5950
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-5951
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据用户输入的信息创建一个生日，并保存这些数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-5952
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-5953
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，每次用户点击保存按钮时都会调用该方法。将以下代码添加到AddBirthdayViewController中，紧跟在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5954
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE732]'
  id: totrans-5955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE732]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-5956
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时会运行。编写IBAction方法时，应该始终包含一个参数，用于指定触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你可以将该参数命名为任何你喜欢的名称。在这种情况下，我们希望每当用户点击保存按钮时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。在➍处的print(_:)方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-5957
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)方法连接到保存按钮，就像将IBOutlet连接到故事板元素一样。回到你的*Main.storyboard*文件中。CONTROL-点击“Add
    a Birthday”行，打开连接对话框。在连接对话框的底部有一个叫做Received Actions的部分，如[图 10-9](text00021.html#ch10fig9)所示。在这个部分，点击并拖动saveTapped:旁边的圆圈到Add
    a Birthday视图控制器中的保存按钮进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-5958
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-5959
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions在连接对话框的底部列出，位于Received Actions下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-5960
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，"The save button was tapped."的信息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-5961
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-5962
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，从firstNameTextField和lastNameTextField中获取用户输入的名字。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-5963
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是用户在文本框中输入的内容，因此你可以使用它来获取用户在saveTapped(_:)方法中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5964
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE733]'
  id: totrans-5965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE733]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-5966
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，也就是说用户输入了一个值），如果不存在则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并操作符（??）来完成这项工作。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-5967
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的操作。获取firstName和lastName的值后，打印它们到控制台，以便你在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-5968
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似于下面的输出：
- en: '[PRE734]'
  id: totrans-5969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE734]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-5970
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-5971
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-5972
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-5973
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5974
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE735]'
  id: totrans-5975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE735]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-5976
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似于以下的输出：
- en: '[PRE736]'
  id: totrans-5977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE736]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5978
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一步，我们有了firstName、lastName和birthdate——这三条数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式有点奇怪，其中还包括时间和时区偏移（+0000）。暂时不必过于担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何不显示时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-5979
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-5980
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-5981
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用打印测试newBirthday实例的print语句来替换它们。然后在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5982
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE737]'
  id: totrans-5983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE737]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-5984
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday之后，➋处，你使用点符号将它的属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用，输入生日，并点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE738]'
  id: totrans-5985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE738]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-5986
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-5987
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-5988
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击 Cancel 时，表示他们不再想添加生日，添加生日的屏幕应该消失。我们通过在类中添加 cancelTapped(_:) 方法并调用一个内建的
    UIViewController 方法 dismiss(animated:completion:) 来实现这个行为。这个方法做的正是它所描述的功能——它关闭当前显示的视图控制器。将以下方法添加到你的
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-5989
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE739]'
  id: totrans-5990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE739]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-5991
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭屏幕添加动画效果。传入 true，这样用户就能看到添加生日屏幕从屏幕上滑下的动画效果。这看起来就像一个专业的应用！第二个参数是一个可选闭包，叫做
    completion。*闭包*是可以传递给函数的代码块。completion 闭包可以在视图控制器被关闭后执行你想运行的代码。因为在这里你不需要任何操作，所以可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-5992
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-5993
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与 Cancel 按钮连接起来。你可以像将 saveTapped(_:) 方法与 Save 按钮连接一样操作。进入
    *Main.storyboard*，打开 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到 Cancel
    按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-5994
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **Cancel**。你应该能看到“添加生日”屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-5995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-5996
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后你无法看到它们。在[第 11 章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表视图控制器中显示生日列表。
- en: '![](Image00227.jpg)'
  id: totrans-5997
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00227.jpg)'
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-5998
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *与输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-5999
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型 UITextField! ➋ 是一个隐式解包的可选类型，因为当视图控制器首次创建时，IBOutlet
    的值是 nil。然而，一旦视图加载完成，IBOutlet 就会获得它们在故事板中连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-6000
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-6001
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 和输入控件的属性，接下来是将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-6002
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，以便你可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接下来，在左侧大纲视图中选择**添加生日场景**，然后在右侧面板中打开身份检查器。你应该在顶部看到一个“自定义类”部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-6003
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6004
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6005
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中点击“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住CONTROL键并点击**添加生日**，此时会打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6006
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被高亮为蓝色时，可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6007
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6008
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6009
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到Birthdate Picker出现在birthdatePicker旁边，并且连接圆圈已填充（见[图10-8](text00021.html#ch10fig8)），说明连接成功。你只能将birthdatePicker
    outlet连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为这是我们在AddBirthdayViewController中为其创建属性时指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6010
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6011
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6012
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将firstNameTextField连接到First Name标签下方的文本字段。最后，将lastNameTextField连接到Last
    Name标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6013
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，故事板的工作已经完成。现在让我们回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6014
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6015
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个人来说，出生日期在未来是不合逻辑的，因此我们需要编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中，我们讨论了viewDidLoad()方法（见[第145页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到该方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6016
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE740]'
  id: totrans-6017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE740]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6018
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，像这样：override
    func viewDidLoad()。请注意，在方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类（如 AddBirthdayViewController）并重写原始父类的方法时，你需要确保也调用父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 方法中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6019
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个新的日期对象，该日期为当前的日期和时间。现在试着运行应用。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6020
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使得你可以使用在[第9章](text00020.html#ch09)中创建的按钮，在这个视图控制器中保存生日信息或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6021
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6022
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6023
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6024
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一个 saveTapped(_:) 方法，每次用户点击保存按钮时都会调用它。将以下代码添加到 AddBirthdayViewController
    中，紧接在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6025
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE741]'
  id: totrans-6026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE741]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6027
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，用于将函数直接连接到视图控制器中的元素，并允许我们指定当用户在该元素上执行操作时应该运行的代码。在本例中，我们将添加一个函数，当用户点击“保存”按钮时运行。当你编写
    IBAction 方法时，应该始终为触发该方法的 UI 元素包含一个参数。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋，但是你可以将这个参数命名为任何你喜欢的名字。在这个例子中，我们希望
    saveTapped(_:) 方法在用户点击“保存”时被调用，后者是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法有助于我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6028
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 与保存按钮连接起来，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 键并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个叫做“接收的操作”部分，如[图10-9](text00021.html#ch10fig9)所示。在这个部分中，从
    saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6029
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6030
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions 在连接对话框底部的“接收的操作”下列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6031
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行应用。当你点击保存按钮时，调试控制台应显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6032
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6033
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，获取用户输入的firstNameTextField和lastNameTextField中的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6034
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性叫做text。这个text属性的值就是文本框中输入的内容，因此你可以使用它来获取用户在saveTapped(_:)方法中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6035
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE742]'
  id: totrans-6036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE742]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6037
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串""。你可以使用nil合并操作符（??）来实现这一点，这在[第5章](text00015.html#ch05)中你已经学习过了。我们这里使用常量而不是变量，因为用户输入的名字和姓氏的值不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6038
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的事情。当你获取到firstName和lastName的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6039
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再试试在输入了名字和姓氏后点击保存。你应该会看到类似这样的输出：
- en: '[PRE743]'
  id: totrans-6040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE743]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6041
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入一个名字，并在调试控制台看到计算机输出该名字。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6042
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6043
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker，这个属性就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6044
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6045
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE744]'
  id: totrans-6046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE744]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6047
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE745]'
  id: totrans-6048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE745]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6049
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate ——这三项数据是我们创建生日所需要的！你会注意到调试控制台中显示的日期格式很奇怪，其中还包含了时间和+0000作为时区偏移。暂时不需要太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6050
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6051
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6052
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替代它们。然后将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6053
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE746]'
  id: totrans-6054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE746]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6055
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate常量。在创建newBirthday之后，在➋，你通过点语法输出其属性到调试控制台。打印的输出将和之前的print语句相同，但这次你得到的是newBirthday实例的值。运行应用，输入一个生日并点击保存，看看会发生什么。你应该能在调试控制台看到类似下面的输出：
- en: '[PRE747]'
  id: totrans-6056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE747]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6057
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6058
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6059
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，Add a Birthday屏幕应该消失。让我们通过在类中添加一个cancelTapped(_:)方法来实现这个功能，该方法会调用UIViewController的一个内置方法dismiss(animated:completion:)。这个方法正如其名，它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6060
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE748]'
  id: totrans-6061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE748]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6062
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) ➊函数有两个参数。animated参数用于控制屏幕关闭的动画效果。传入true，用户就能看到Add
    a Birthday屏幕滑出屏幕，效果会像专业应用一样！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果有任何需要在视图控制器关闭后执行的代码，可以使用completion闭包。由于这里没有需要执行的代码，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6063
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6064
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以像连接saveTapped(_:)方法到保存按钮一样操作。进入*Main.storyboard*，打开Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6065
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日屏幕，再点击**取消**。你应该会看到Add a Birthday从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6067
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的可视界面连接。你还学习了如何使用输入文本框和日期选择器创建包含 firstName、lastName 和
    birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday，但是保存后无法查看它们。在 [第 11 章](text00022.html#ch11)
    中，我们将向你展示如何在一个 Birthdays 表格视图控制器中显示你保存的生日列表。
- en: '*Figure 10-5:* AddBirthdayViewController *with IBOutlet properties for the
    input controls*'
  id: totrans-6068
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-5：* AddBirthdayViewController *具有输入控件的 IBOutlet 属性*'
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-6069
  prefs: []
  type: TYPE_NORMAL
  zh: firstNameTextField 属性的数据类型为 UITextField! ➋ ，是一个隐式解包可选值，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，一旦视图加载，IBOutlets 就会被赋予它们在故事板中连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-6070
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-6071
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了 AddBirthdayViewController 以及输入控件的属性，是时候将 First Name 和 Last Name 文本框以及
    Birthdate 日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-6072
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，然后在左侧大纲视图中选择 **添加生日场景**，并在右侧窗格中打开身份检查器。你应该在顶部看到一个“自定义类”部分。将类更改为
    AddBirthdayViewController，如 [图 10-6](text00021.html#ch10fig6) 所示。
- en: '![](Image00228.jpg)'
  id: totrans-6073
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6074
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6075
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中“添加生日场景”旁边的三角形，展开该场景中项目的菜单。然后，按住
    CONTROL 键点击 **添加生日**，这是黄色视图控制器图标旁边的选项，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6076
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象高亮显示为蓝色时，你可以松开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6077
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6078
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6079
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你会看到 Birthdate Picker 在连接框中与 birthdatePicker 一起列出，并且连接圆圈已填充（见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为在我们创建 AddBirthdayViewController 的属性时，给它分配了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6080
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6081
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *控件已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6082
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动，将 firstNameTextField 从其圆圈连接到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6083
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的部分工作。现在，让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6084
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6085
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期是未来的，那就不合理了，因此我们需要写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建 Add Birthday View Controller](text00021.html#ch10lev2sec3)”
    中讨论过 viewDidLoad() 方法，参见 [第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以请在
    AddBirthdayViewController 中找到这个方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6086
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE749]'
  id: totrans-6087
  prefs: []
  type: TYPE_PRE
  zh: '[PRE749]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6088
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，如下所示：override
    func viewDidLoad()。请注意，重要的是要保留方法中的 super.viewDidLoad() 这一行。当你创建一个子类（如 AddBirthdayViewController）并重写父类中的方法时，要确保你也调用父类的方法。苹果可能在
    UIViewController 的 viewDidLoad() 方法中有一些特殊代码，我们无法得知，所以不调用父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6089
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个新的日期对象，代表当前的日期和时间。现在尝试运行应用，应该不可能选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6090
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使得可以通过你在[第9章](text00020.html#ch09)中创建的按钮来保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6091
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6092
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该从输入的信息中创建一个生日对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6093
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6094
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先来创建一个 saveTapped(_:) 方法，每次用户点击保存按钮时就会调用它。在 AddBirthdayViewController 中的 viewDidLoad()
    方法之后添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6095
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE750]'
  id: totrans-6096
  prefs: []
  type: TYPE_PRE
  zh: '[PRE750]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6097
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处的@IBAction是一个关键字，将函数直接连接到视图控制器中的元素，并允许我们指定当用户在该元素上执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击“保存”时会运行。当您编写IBAction方法时，应始终包含一个参数，用于表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为sender➋，但您可以将这个参数命名为任何您想要的名称。在这种情况下，我们希望saveTapped(_:)方法在用户点击“保存”时被调用，它是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem➌。在➍处的print(_:)方法帮助我们在测试代码时看到“保存”按钮是否被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6098
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮，就像将IBOutlet连接到故事板元素一样。返回到您的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，点击并拖动saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6099
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6100
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列出在连接对话框底部的“接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6101
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行您的应用程序。当您点击“保存”按钮时，调试控制台中应该会显示“保存按钮已被点击”的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法添加代码，以便在用户输入姓名后从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6104
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性的值是用户在文本框中输入的内容，因此您可以在saveTapped(_:)方法中使用它来获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6105
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE751]'
  id: totrans-6106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE751]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6107
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，您创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。您可以使用在[第5章](text00015.html#ch05)中学习到的空合并运算符（??）来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6109
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击“保存”按钮，然后再试一次，输入一个名字和姓氏后点击。您应该会看到类似下面的输出：
- en: '[PRE752]'
  id: totrans-6110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE752]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6111
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在您可以在应用程序中输入一个名字，并看到计算机在调试控制台输出它。接下来，让我们集中精力获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6113
  prefs: []
  type: TYPE_NORMAL
  zh: 从`birthdatePicker`获取日期就像从`firstNameTextField`或`lastNameTextField`获取文本一样简单。`UIDatePicker`类有一个`date`属性，它是当前`picker`显示的日期。对于`birthdatePicker`，就是`birthdatePicker.date`。当用户更改`UIDatePicker`时，`date`属性也会变化，所以你可以使用`birthdayPicker.date`来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6114
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`saveTapped(_:)`方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6115
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE753]'
  id: totrans-6116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE753]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE754]'
  id: totrans-6118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE754]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6119
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经有了`firstName`、`lastName`和`birthdate`——这三项数据是我们创建`Birthday`所需的！你会注意到，在调试控制台中显示的日期格式有点奇怪，还包含了时间和时区偏移`+0000`。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入，你可以使用这些信息通过`Birthday`类的初始化器来创建一个`Birthday`。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用测试新的`newBirthday`实例的打印语句替代它们。然后，在`saveTapped(_:)`方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6123
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE755]'
  id: totrans-6124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE755]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6125
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用`Birthday`类的初始化器创建一个`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`的常量。创建`newBirthday`后，在➋，你使用点语法将它的属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你从`newBirthday`实例获取值。运行应用，输入一个生日并点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE756]'
  id: totrans-6126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE756]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6127
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个`Birthday`。你将在[第11章](text00022.html#ch11)中学习如何在`Birthdays`视图控制器中显示这个`Birthday`。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6129
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加一个`Birthday`，所以添加生日的界面应该消失。让我们通过向类中添加一个`cancelTapped(_:)`方法来实现这个行为，它将调用一个内置的`UIViewController`方法`dismiss(animated:completion:)`。这个方法的作用就是它所描述的——关闭当前显示的视图控制器。将以下方法添加到`saveTapped(_:)`方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6130
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE757]'
  id: totrans-6131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE757]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6132
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` ➊函数有两个参数。`animated`参数用于动画效果，传入true让用户看到“添加生日”页面滑出屏幕，效果就像一个专业的应用一样！第二个参数是一个可选的闭包`completion`。*闭包*是一个可以传递给函数的代码块。如果你希望在视图控制器关闭后执行某些代码，可以使用`completion`闭包。由于在此处不需要执行任何操作，因此可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-6133
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`方法连接到“取消”按钮。你可以像将`saveTapped(_:)`方法连接到“保存”按钮一样来做这件事。进入*Main.storyboard*，打开“添加生日”视图控制器的连接对话框。从`cancelTapped(_:)`方法列表拖动并连接到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击**+**进入添加生日页面，然后点击**取消**。你应该会看到“添加生日”视图从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建具有`firstName`、`lastName`和`birthdate`属性的`Birthday`对象。目前你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示生日列表。
- en: The data type of the firstNameTextField property, UITextField! ➋ , is an implicitly
    unwrapped optional because when the view controller is first created, IBOutlets
    have nil values. As soon as the view is loaded, however, IBOutlets are given the
    value of what they are connected to in the storyboard.
  id: totrans-6138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`firstNameTextField`属性的数据类型是`UITextField!` ➋，它是一个隐式解包的可选值，因为当视图控制器首次创建时，IBOutlets
    的值为 nil。然而，当视图加载后，IBOutlets 会被赋予它们在故事板中所连接的对象的值。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-6139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将你的代码与故事板连接**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-6140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了`AddBirthdayViewController`以及输入控件的属性，接下来是将“名字”和“姓氏”文本字段与“出生日期”日期选择器连接起来。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-6141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为`AddBirthdayViewController`，以便使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接着，在左侧大纲视图中选择**添加生日场景**，然后在右侧面板中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为`AddBirthdayViewController`，如[图
    10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-6142
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6143
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* `AddBirthdayViewController` *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中点击“添加生日场景”旁边的三角形，展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击**添加生日**，该按钮位于黄色视图控制器图标旁边，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6145
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器，连接
    birthdatePicker。当日期选择器对象高亮显示为蓝色时，可以松开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6146
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6147
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到在连接框中 birthdatePicker 旁边列出了“出生日期选择器”并且连接圆圈已填充，则表示连接成功（见 [图 10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，将不会发生任何操作。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为这是我们在 AddBirthdayViewController 中为其创建属性时所指定的数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6149
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6150
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将 firstNameTextField 连接到“名”标签下方的文本字段。最后，将 lastNameTextField 连接到“姓”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6152
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的设置。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6154
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期出现在未来是不合逻辑的，所以我们来写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来完成这个设置。在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一章中我们讨论了
    viewDidLoad() 方法，见 [第 145 页](text00021.html#page_145)。该方法自动添加到我们的视图控制器中，所以在 AddBirthdayViewController
    中找到该方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6155
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE758]'
  id: totrans-6156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE758]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6157
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，因此我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad() 。注意，重要的一点是要保留super.viewDidLoad()这一行。当你创建一个子类（例如AddBirthdayViewController）并重写了父类的方法时，你需要确保也调用父类的方法。因为Apple可能在UIViewController的viewDidLoad()中包含了一些特殊的代码，而我们并不完全了解，跳过调用父类的方法可能会导致不可预见的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6158
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，表示当前的日期和时间。现在试着运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你能够在这个视图控制器中使用你在[第9章](text00020.html#ch09)中创建的按钮来保存生日和取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为saveTapped(_:)的方法，每当用户点击保存按钮时，都会调用该方法。将以下代码添加到AddBirthdayViewController中，放在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6164
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE759]'
  id: totrans-6165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE759]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6166
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时，这个函数会运行。当你编写一个IBAction方法时，应该始终包含一个参数，用于表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你也可以给这个参数起任何你喜欢的名字。在这个例子中，我们希望在用户点击保存时，调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌。在➍处的print(_:)方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6167
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。CONTROL
    -点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为Received Actions的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6168
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6169
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction列在连接对话框的底部，标题为Received Actions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6170
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行应用程序。当您点击保存按钮时，调试控制台中应该会显示“保存按钮被点击了”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6171
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，从 firstNameTextField 和 lastNameTextField 获取用户输入的名字。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6173
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性叫做 text。这个 text 属性的值是用户输入到文本框中的内容，您可以在 saveTapped(_:)
    方法中通过以下代码获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6174
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE760]'
  id: totrans-6175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE760]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了一个值），如果不存在则设置为空字符串
    ""。您可以使用您在[第 5 章](text00015.html#ch05)中学到的 nil 合并操作符（??）来完成这一点。这里我们使用常量而不是变量，因为用户输入的名字不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 ➋ 处对 lastName 执行相同的操作。当您获取到 firstName 和 lastName 的值后，打印它们到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序看看会发生什么。尝试在文本框中不输入任何内容点击保存按钮，然后再尝试输入名字后点击保存。您应该会看到类似以下的输出：
- en: '[PRE761]'
  id: totrans-6179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE761]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6180
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在您可以在应用程序中输入名字，并看到计算机在调试控制台中输出这个名字。接下来让我们重点关注如何获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6182
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前日期选择器显示的日期。对于 birthdatePicker 来说，这个属性就是 birthdatePicker.date。当用户改变
    UIDatePicker 时，date 属性也会随之变化，因此您可以使用 birthdayPicker.date 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6183
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6184
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE762]'
  id: totrans-6185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE762]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。您应该会看到类似以下的输出：
- en: '[PRE763]'
  id: totrans-6187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE763]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6188
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据足以创建一个生日！您会注意到，调试控制台中显示的日期格式很奇怪，还包括了时间和
    +0000 的时区偏移。现在不用太担心这个，我们将在[第 11 章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，您可以使用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6191
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的打印语句，因为我们将用测试 newBirthday 实例的打印语句来替换它们。然后在 saveTapped(_:)
    方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6192
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE764]'
  id: totrans-6193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE764]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6194
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，使用 Birthday 类的初始化器创建一个新的 Birthday 实例，并传入 firstName、lastName 和 birthdate
    的常量值。在创建 newBirthday 后， 在 ➋ 处，使用点表示法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从 newBirthday
    实例获取值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE765]'
  id: totrans-6195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE765]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6196
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个 Birthday。你将在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6198
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，"添加生日" 屏幕应该消失。我们通过在类中添加 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个名为
    dismiss(animated:completion:) 的内建 UIViewController 方法。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中，紧接在 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6199
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE766]'
  id: totrans-6200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE766]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6201
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭屏幕添加动画效果。传入 true，这样用户就能看到
    "添加生日" 屏幕滑出屏幕。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为 completion。*闭包* 是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用
    completion 闭包。由于你这里不需要做任何事，可以直接传入 nil。
- en: '![](Image00233.jpg)'
  id: totrans-6202
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6203
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以像将 saveTapped(_:) 方法连接到保存按钮那样来操作。进入 *Main.storyboard*，并打开“添加生日”视图控制器的连接对话框。从
    cancelTapped(_:) 方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6204
  prefs: []
  type: TYPE_NORMAL
  zh: 做完这些后，运行应用程序，点击 **+** 进入“添加生日”屏幕，再点击 **取消**。你应该会看到“添加生日”屏幕滑动下去并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存生日数据，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个
    Birthdays 表视图控制器中显示你保存的生日列表。
- en: '**CONNECTING YOUR CODE TO THE STORYBOARD**'
  id: totrans-6207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将代码连接到故事板**'
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-6208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了 AddBirthdayViewController 及其输入控件的属性，是时候连接 First Name 和 Last Name 文本字段以及
    Birthdate 日期选择器了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-6209
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将故事板中“添加生日”视图控制器的类更改为 AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*，然后在左侧大纲视图中选择 **添加生日场景**，并在右侧窗格中打开 Identity Inspector。你应该看到顶部有一个
    Custom Class 部分，将类更改为 AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-6210
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6211
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将 AddBirthdayViewController 的 IBOutlet 属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中，点击“添加生日场景”旁边的三角形展开该场景中的项目菜单。然后，按住
    CONTROL 键并点击 **添加生日** 旁边的黄色视图控制器图标，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6213
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在 Outlets 下，你可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击其旁边的空圆圈并拖动到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6214
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6215
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，你将在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，且连接圆圈已填充（见[图10-8](text00021.html#ch10fig8)）。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，则不会发生任何反应。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在创建 AddBirthdayViewController 的属性时给它指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6217
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6218
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6219
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动 firstNameTextField 的圆圈，将其连接到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6220
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了storyboard的工作。现在让我们返回到*AddBirthdayViewController.swift*，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6221
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人的出生日期设定在未来是没有意义的，因此让我们编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在[《创建添加生日视图控制器》](text00021.html#ch10lev2sec3)一文中提到了viewDidLoad()方法，见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此在AddBirthdayViewController中找到这个方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6223
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE767]'
  id: totrans-6224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE767]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6225
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，所以我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad()。请注意，在方法中保留super.viewDidLoad()这一行是很重要的。当你创建一个子类（如AddBirthdayViewController）并重写原始父类的方法时，确保你也调用了父类的方法。Apple可能在UIViewController的viewDidLoad()方法中有我们不知道的特殊代码，如果不调用这个父类方法，可能会导致不可预料的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6226
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，它是当前的日期和时间。现在试着运行一下应用程序，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够保存生日，并通过你在[第9章](text00020.html#ch09)中创建的按钮取消添加生日操作。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据用户输入的信息创建一个生日对象，然后保存这些用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6231
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个saveTapped(_:)方法，每当用户点击保存按钮时，这个方法就会被调用。在viewDidLoad()方法之后，立即将以下代码添加到AddBirthdayViewController中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6232
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE768]'
  id: totrans-6233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE768]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6234
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素进行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时运行。编写
    IBAction 方法时，应该始终包括一个用于触发该方法的 UI 元素的参数。通常，使用下划线来隐藏参数标签，参数名为 sender ➋，但你可以根据需要给这个参数起任何名字。在这种情况下，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，保存按钮是一个 UIBarButtonItem。所以我们指定 sender 的类型是 UIBarButtonItem ➌。在
    ➍ 处的 print(_:) 方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6235
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 方法连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。回到你的 *Main.storyboard*
    文件，按住 CONTROL 键点击“添加生日”那一行，打开连接对话框。在连接对话框的底部，有一个名为“已接收的操作”部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分，点击并拖动从 saveTapped: 旁边的圆圈到“添加生日”视图控制器中的保存按钮，连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6236
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6237
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的下方列出了，位于“已接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6238
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用程序。当你点击保存按钮时，消息“保存按钮已被点击”应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框中读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，当用户输入名字和姓氏后，可以从 firstNameTextField 和 lastNameTextField
    中提取它们的值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6241
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。这个 text 属性的值是输入到文本框中的内容，因此你可以在 saveTapped(_:)
    方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6242
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE769]'
  id: totrans-6243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE769]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6244
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，也就是用户输入了值），否则设置为空字符串
    ""。你可以使用你在 [第 5 章](text00015.html#ch05) 中学到的 nil 合并操作符（??）来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6245
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。在你获取了 firstName 和 lastName 的值之后，将它们打印到控制台，这样你在运行应用程序时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6246
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在文本框中不输入任何内容就点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似这样的输出：
- en: '[PRE770]'
  id: totrans-6247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE770]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6248
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出它。接下来，让我们集中精力获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6250
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由日期选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6251
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6252
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE771]'
  id: totrans-6253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE771]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE772]'
  id: totrans-6255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE772]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6256
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们已经有了 firstName、lastName 和 birthdate——这三项数据是创建 Birthday 所需要的！你会注意到调试控制台中显示的日期格式很奇怪，还包括时间和
    +0000 的时区偏移。目前不用太担心这个问题，我们会在[第 11 章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6257
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入信息，你可以使用这些信息通过 Birthday 类的初始化器来创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6259
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替代它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6260
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE773]'
  id: totrans-6261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE773]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你通过点表示法将其属性输出到调试控制台。打印输出将与早期的 print 语句一样，不过这次你是从 newBirthday
    实例中获取值。运行应用，输入生日并点击保存，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE774]'
  id: totrans-6263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE774]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6264
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6266
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个 cancelTapped(_:) 方法来实现这个功能，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法正如其名所示——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6267
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE775]'
  id: totrans-6268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE775]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6269
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制关闭屏幕的动画效果。传入true，用户可以看到“添加生日”屏幕从屏幕上滑下，效果就像一个专业的应用程序！第二个参数是一个可选闭包，名为completion。*闭包*是一个可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为在此处你不需要做任何事情，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6270
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6271
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与“取消”按钮连接。你可以像将saveTapped(_:)方法与“保存”按钮连接一样操作。前往*Main.storyboard*并打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到“取消”按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6272
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击**+**进入“添加生日”屏幕，然后点击**取消**。你应该会看到“添加生日”界面滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6274
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个生日表视图控制器中显示你的生日列表。
- en: Now that you’ve created AddBirthdayViewController and the properties for the
    input controls, it’s time to hook up the First Name and Last Name text fields
    and the Birthdate date picker.
  id: totrans-6275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了AddBirthdayViewController及输入控件的属性，是时候将“名字”和“姓氏”文本字段以及“出生日期”日期选择器连接起来了。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-6276
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在故事板中将“添加生日”视图控制器的类更改为AddBirthdayViewController，这样你就可以使用该类来管理视图控制器。在项目导航器中选择*Main.Storyboard*。接着，在左侧大纲视图中选择**添加生日场景**，并在右侧窗格中打开身份检查器。你应该能看到顶部的自定义类部分。将类更改为AddBirthdayViewController，如[图10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-6277
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6278
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日场景”中的文本字段和日期选择器。在左侧大纲视图中点击“添加生日场景”旁的三角形，展开该场景中的项目菜单。然后，按住CONTROL键并点击**添加生日**，即黄色视图控制器图标旁边的项，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6280
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以看到`birthdatePicker`、`firstNameTextField`和`lastNameTextField`。通过点击`birthdatePicker`旁边的空圆圈并将其拖动到故事板中的日期选择器来连接。当日期选择器对象高亮显示为蓝色时，您可以放开鼠标（参见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6281
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6282
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7: 将日期选择器连接到`birthdatePicker` outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到“Birthdate Picker”列在`birthdatePicker`旁边，并且连接圆圈已填充（参见[图 10-8](text00021.html#ch10fig8)），就表示连接成功。您只能将`birthdatePicker`的outlet连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道`birthdatePicker`必须连接到`UIDatePicker`类，因为我们在创建`AddBirthdayViewController`时给它设置了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6284
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6285
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8: `birthdatePicker` outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6286
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个`firstNameTextField`的圆圈，将其连接到“First Name”标签下方的文本框。最后，将`lastNameTextField`连接到“Last
    Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6287
  prefs: []
  type: TYPE_NORMAL
  zh: 您暂时完成了故事板的工作。接下来，让我们返回到*AddBirthdayViewController.swift*，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6288
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6289
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人的出生日期来说，未来的日期是不合理的，因此让我们写一些代码来防止`birthdatePicker`选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的`viewDidLoad()`方法来进行此设置。我们在“[创建
    Add Birthday View Controller](text00021.html#ch10lev2sec3)”中讨论过`viewDidLoad()`方法（参见[第
    145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此找到这个方法并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6290
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE776]'
  id: totrans-6291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE776]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6292
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的一个方法，因此我们需要使用`override`关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，务必在方法中保留`super.viewDidLoad()`这一行。当您创建一个子类，比如`AddBirthdayViewController`，并重写原始父类的方法时，您需要确保也调用父类的方法。苹果可能在`UIViewController`的`viewDidLoad()`中有一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6293
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的最大日期，您只需在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个当前的日期和时间。现在可以尝试运行应用，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6294
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你能够通过你在[第9章](text00020.html#ch09)中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据用户输入的信息创建一个生日对象，并保存这些输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6297
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个 `saveTapped(_:)` 方法开始，该方法会在用户每次点击保存按钮时被调用。将以下代码添加到 `AddBirthdayViewController`
    中，放在 `viewDidLoad()` 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6299
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE777]'
  id: totrans-6300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE777]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6301
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应执行的代码。在这个例子中，我们将添加一个函数，在用户点击保存时执行。当你编写
    IBAction 方法时，你应该始终为触发该方法的 UI 元素包含一个参数。通常，使用下划线来隐藏参数标签，参数名为 sender ➋，但是你可以根据需要将此参数命名为任何你喜欢的名字。在这个例子中，我们希望在用户点击保存时调用
    `saveTapped(_:)` 方法，而保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌。`print(_:)` 方法在 ➍ 处帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6302
  prefs: []
  type: TYPE_NORMAL
  zh: '将 `saveTapped(_:)` 连接到保存按钮，就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard*
    文件。CONTROL -点击“添加生日”行，打开连接对话框。连接对话框底部有一个叫做“已接收的动作”的区域，如[图10-9](text00021.html#ch10fig9)所示。在该区域中，从
    saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6303
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6304
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions 在连接对话框的底部列出，位于“已接收的动作”下方。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6305
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用程序。当你点击保存按钮时，调试控制台中应显示“保存按钮被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6306
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6307
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向 `saveTapped(_:)` 方法添加代码，以便在用户输入名字后，从 firstNameTextField 和 lastNameTextField
    中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6308
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的字符串属性叫做 text。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以使用它在 `saveTapped(_:)`
    方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6309
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE778]'
  id: totrans-6310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE778]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6311
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值），或者设置为一个空字符串""。你可以使用nil合并操作符(??)来实现这一点，正如你在[第5章](text00015.html#ch05)中学到的那样。我们在这里使用常量而不是变量，因为用户输入的firstName和lastName的值不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6312
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName执行相同操作。在获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6313
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在没有输入任何内容的情况下点击保存按钮，然后在输入了firstName和lastName后再试一次。你应该会看到类似以下的输出：
- en: '[PRE779]'
  id: totrans-6314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE779]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6315
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，我们来关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6316
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6317
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前显示在选择器中的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，所以你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6318
  prefs: []
  type: TYPE_NORMAL
  zh: 在saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6319
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE780]'
  id: totrans-6320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE780]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE781]'
  id: totrans-6322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE781]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6323
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了一个firstName、一个lastName和一个birthdate——这三项数据是我们创建Birthday所需的！你会注意到在调试控制台中显示的日期格式很奇怪，还包含了时间和+0000的时区偏移。现在不必过于担心这些内容。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6325
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6326
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用新的print语句来测试newBirthday实例。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6327
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE782]'
  id: totrans-6328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE782]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6329
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你通过Birthday类的初始化器创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出将与早前的print语句相同，但这次你获取的是newBirthday实例中的值。运行应用，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE783]'
  id: totrans-6330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE783]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6331
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只能创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学会如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6333
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加一个生日，添加生日的界面应该消失。我们通过在类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法的作用正如其名——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6334
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE784]'
  id: totrans-6335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE784]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6336
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭的屏幕添加动画效果。传入 true，这样用户可以看到“添加生日”屏幕从屏幕上滑下，效果看起来就像一个专业的应用一样！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是可以传递给函数的一段代码。如果有任何代码需要在视图控制器关闭后执行，可以使用 completion 闭包。因为你在这里不需要执行任何操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-6337
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6338
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮关联。你可以像将 saveTapped(_:) 方法与保存按钮关联一样操作。打开 *Main.storyboard*
    并调出 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6339
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击**+**进入添加生日页面，再点击**取消**。你应该能看到“添加生日”从屏幕滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6341
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你保存的生日列表。
- en: First, change the class of the Add a Birthday view controller in the storyboard
    to AddBirthdayViewController so you can use that class to manage the view controller.
    Select *Main.Storyboard* in the Project navigator. Next, select **Add a Birthday
    Scene** in the left outline view and open the Identity Inspector in the right
    pane. You should see a Custom Class section at the top. Change the class to AddBirthdayViewController
    , as shown in [Figure 10-6](text00021.html#ch10fig6) .
  id: totrans-6342
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 storyboard 中将 Add a Birthday 视图控制器的类更改为 AddBirthdayViewController，以便你可以使用这个类来管理视图控制器。在项目导航器中选择
    *Main.Storyboard*。接着，在左侧大纲视图中选择 **Add a Birthday 场景**，并在右侧窗格中打开身份检查器。你应该会看到顶部的
    Custom Class 部分。将类更改为 AddBirthdayViewController，如[图 10-6](text00021.html#ch10fig6)所示。
- en: '![](Image00228.jpg)'
  id: totrans-6343
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6344
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将AddBirthdayViewController的IBOutlet属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中“添加生日”场景旁的三角形，展开该场景中的项目菜单。然后，按住CONTROL键点击黄色视图控制器图标旁的**添加生日**，以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6346
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。点击birthdatePicker旁的空圆圈并将其拖到故事板中的日期选择器上。当日期选择器对象被蓝色高亮时，你可以放开（见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6347
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6348
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker 插座'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6349
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到在连接框中，birthdatePicker旁边列出了Birthdate Picker，并且连接圆圈已填充（见[图 10-8](text00021.html#ch10fig8)），那就说明连接成功。你只能将birthdatePicker插座连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController属性时，给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6350
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6351
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *插座已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6352
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并从其圆圈拖动到“名”标签下方的文本框，连接firstNameTextField。最后，将lastNameTextField连接到“姓”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6353
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。让我们回到*AddBirthdayViewController.swift*文件中，在代码里设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6354
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6355
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有未来的出生日期是没有意义的，因此我们需要写一些代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论过viewDidLoad()方法，位于[第145页](text00021.html#page_145)。该方法会自动添加到我们的视图控制器中，所以找到AddBirthdayViewController中的这个方法并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6356
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE785]'
  id: totrans-6357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE785]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6358
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad() 。请注意，保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类（如 AddBirthdayViewController
    ）并重写原始超类的方法时，你需要确保也调用超类的方法。苹果可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6359
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()
    。Date() 方法会创建一个表示当前日期和时间的新日期。现在尝试运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6360
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在 [第 9 章](text00020.html#ch09) 中创建的按钮，能够从此视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6362
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6363
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6364
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过创建一个 saveTapped(_:) 方法来开始。每次用户点击保存按钮时，这个方法都会被调用。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6365
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE786]'
  id: totrans-6366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE786]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6367
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 处的 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，该函数将在用户点击保存时运行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，用来表示触发方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但你可以根据需要给这个参数命名。在这个例子中，我们希望每当用户点击保存按钮时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem 。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。print(_:) 方法 ➍ 可以帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6368
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回你的 *Main.storyboard*
    文件。CONTROL -点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为 Received Actions 的部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮进行连接。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6369
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6370
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的底部列出了接收到的操作（Received Actions）。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6371
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行你的应用程序。当你点击保存按钮时，调试控制台应该会显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6372
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6373
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，从 `firstNameTextField` 和 `lastNameTextField` 中获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6374
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，叫做 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 `saveTapped(_:)`
    方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6375
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE787]'
  id: totrans-6376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE787]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6377
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`（如果它存在，即用户输入了值），否则设置为空字符串
    ""。你可以使用你在[第5章](text00015.html#ch05)中学到的 nil 合并操作符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6378
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 ➋ 处对 `lastName` 做同样的操作。当你获取到 `firstName` 和 `lastName` 的值后，将它们打印到控制台，以便你在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6379
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。先尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似于下面的输出：
- en: '[PRE788]'
  id: totrans-6380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE788]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6381
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入名字，并看到计算机将其输出到调试控制台。接下来，让我们专注于如何获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6383
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `birthdatePicker` 获取日期就像从 `firstNameTextField` 或 `lastNameTextField` 获取文本一样简单。UIDatePicker
    类有一个 `date` 属性，这个属性是当前选择器显示的日期。对于 `birthdatePicker`，就是 `birthdatePicker.date`。当用户更改
    UIDatePicker 时，`date` 属性也会发生变化，因此你可以使用 `birthdayPicker.date` 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6384
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `saveTapped(_:)` 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6385
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE789]'
  id: totrans-6386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE789]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6387
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似于以下的输出：
- en: '[PRE790]'
  id: totrans-6388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE790]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6389
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了 `firstName`、`lastName` 和 `birthdate` ——这三项数据是我们创建一个生日所需要的！你会注意到在调试控制台中显示的日期格式很奇怪，还包括了时间和
    +0000 的时区偏移。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6390
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6391
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的 `firstName`、`lastName` 和 `birthdate` 输入信息，你可以使用这些信息通过 Birthday
    类的初始化器创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6392
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句替代它们。然后将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6393
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE791]'
  id: totrans-6394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE791]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6395
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋，你通过点表示法将它的属性输出到调试控制台。打印的输出将和之前的print语句相同，但这次你获取的是newBirthday实例中的值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE792]'
  id: totrans-6396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE792]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6397
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅仅是创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6399
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，"添加生日"屏幕应该消失。让我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，它将调用一个内置的UIViewController方法，叫做dismiss(animated:completion:)。这个方法做的就是它名字所表示的功能——它关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6400
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE793]'
  id: totrans-6401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE793]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6402
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 需要两个参数。animated参数用于动画化关闭屏幕。传入true，以便用户可以看到“添加生日”屏幕从屏幕上滑下来。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你想在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为你不需要在这里做任何事情，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6403
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6404
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样来做。进入*Main.storyboard*，并调出“添加生日”视图控制器的连接对话框。从cancelTapped(_:)方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6405
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入“添加生日”屏幕，然后点击**取消**。你应该看到“添加生日”屏幕从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6407
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示生日列表。
- en: '![](Image00228.jpg)'
  id: totrans-6408
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00228.jpg)'
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6409
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6410
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将AddBirthdayViewController的IBOutlet属性连接到“添加生日”场景中的文本框和日期选择器。点击左侧大纲视图中Add
    a Birthday Scene旁边的三角形，展开该场景中项的菜单。然后，按住CONTROL键点击**Add a Birthday**，它会打开一个连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6411
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在Outlets下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并拖动到故事板中的日期选择器来连接birthdatePicker。当日期选择器对象被高亮显示为蓝色时，你可以松开鼠标（见[图10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6412
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6413
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6414
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到出生日期选择器列在birthdatePicker旁边，并且连接圆圈已填充，那么你就知道连接成功了（见[图10-8](text00021.html#ch10fig8)）。你只能将birthdatePicker
    outlet连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为我们在创建属性时，在AddBirthdayViewController中已经为它指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6415
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6416
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *outlet已经成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6417
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将firstNameTextField连接到First Name标签下的文本框。最后，将lastNameTextField连接到Last
    Name标签下的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6418
  prefs: []
  type: TYPE_NORMAL
  zh: 目前你已经完成了故事板的工作。让我们返回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6419
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人有未来的出生日期是没有意义的，所以让我们编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来完成这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中已经讨论过viewDidLoad()方法（见[第145页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，因此找到AddBirthdayViewController中的这个方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6421
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE794]'
  id: totrans-6422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE794]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6423
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 `UIViewController` 类的一个方法，因此我们需要使用 `override` 关键字重写它，如下所示：`override
    func viewDidLoad()`。请注意，必须保留方法中的 `super.viewDidLoad()` 这一行。当您创建一个子类，比如 `AddBirthdayViewController`，并重写原始父类的方法时，您需要确保也调用父类的方法。苹果可能在
    `UIViewController` 的 `viewDidLoad()` 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6424
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器的最大日期，您只需在 ➊ 处输入 `birthdatePicker.maximumDate = Date()`。`Date()` 方法会创建一个新的日期对象，表示当前的日期和时间。现在试着运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6425
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便使用您在[第9章](text00020.html#ch09)中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6426
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6427
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮！当用户点击“保存”时，应用程序应该从输入的信息创建一个生日对象，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6428
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6429
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 `saveTapped(_:)` 方法开始，每次用户点击保存按钮时该方法都会被调用。将以下代码添加到 `AddBirthdayViewController`
    中，紧跟在 `viewDidLoad()` 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6430
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE795]'
  id: totrans-6431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE795]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6432
  prefs: []
  type: TYPE_NORMAL
  zh: '`@IBAction` 在 ➊ 处是一个关键字，它将函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在本例中，我们将添加一个函数，该函数会在用户点击“保存”时运行。当您编写一个
    `IBAction` 方法时，应始终包含一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名为 `sender` ➋，但您可以根据需要为这个参数命名。在本例中，我们希望在用户点击“保存”时调用
    `saveTapped(_:)` 方法，`Save` 是一个 `UIBarButtonItem`。因此，我们指定 `sender` 的类型是 `UIBarButtonItem`
    ➌。位于 ➍ 处的 `print(_:)` 方法帮助我们在测试代码时查看“保存”按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6433
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到“保存”按钮，就像将一个 `IBOutlet` 连接到一个故事板元素一样。返回到您的 *Main.storyboard*
    文件。按住 CONTROL 键并点击“添加生日”一行以打开连接对话框。在连接对话框的底部，有一个名为“收到的动作”的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分中，从
    `saveTapped:` 旁边的圆圈拖动到“保存”按钮，完成它们之间的连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6434
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6435
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的底部列出了收到的 IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6436
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，"保存按钮已被点击"的信息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6437
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6438
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`saveTapped(_:)`方法中添加代码，获取用户输入的名字和姓氏，分别从firstNameTextField和lastNameTextField中提取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6439
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个名为text的可选String属性。这个text属性的值是文本框中输入的内容，因此你可以使用它来在`saveTapped(_:)`方法中获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6440
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE796]'
  id: totrans-6441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE796]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6442
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并运算符（??）来完成这项操作。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6443
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对➋处的lastName做相同的操作。在获取firstName和lastName的值后，将它们打印到控制台，这样在运行应用时就可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6444
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本框中不输入任何内容就点击保存按钮，然后再输入姓名后再试一次。你应该看到类似以下的输出：
- en: '[PRE797]'
  id: totrans-6445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE797]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6446
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出的结果。接下来，我们专注于如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6447
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6448
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，表示当前日期选择器显示的日期。对于birthdatePicker来说，这就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来获取用户输入的生日日期。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6449
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的`saveTapped(_:)`方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6450
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE798]'
  id: totrans-6451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE798]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6452
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE799]'
  id: totrans-6453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE799]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6454
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个步骤，我们已经有了firstName、lastName和birthdate——这三个数据是创建生日所需的！你会注意到调试控制台中显示的日期格式有些奇怪，它还包含时间和+0000的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6455
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6456
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息了，你可以使用这些信息，通过Birthday类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6457
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用打印语句替换它们，以测试`newBirthday`实例。然后，将以下代码行添加到`saveTapped(_:)`方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6458
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE800]'
  id: totrans-6459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE800]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6460
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，使用`Birthday`类的初始化器创建一个`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`常量。在创建`newBirthday`后，在
    ➋ 处，使用点符号输出其属性到调试控制台。打印的输出将与之前的打印语句相同，但这次你获取的是来自`newBirthday`实例的值。运行应用，输入生日信息，点击保存按钮，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE801]'
  id: totrans-6461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE801]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6462
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个`Birthday`对象。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个`Birthday`。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6464
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，"添加生日"屏幕应该消失。让我们通过为类添加一个`cancelTapped(_:)`方法来实现这种行为，它将调用一个内建的`UIViewController`方法——`dismiss(animated:completion:)`。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到你的`AddBirthdayViewController`类中的`saveTapped(_:)`方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6465
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE802]'
  id: totrans-6466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE802]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6467
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数 ➊ 有两个参数。`animated`参数用于控制屏幕关闭时的动画效果。传入`true`，让用户看到“添加生日”屏幕滑出屏幕，就像一个专业的应用程序一样！第二个参数是一个可选的闭包，叫做`completion`。*闭包*是一段可以传递给函数的代码块。如果你希望在视图控制器消失后执行某些代码，可以使用`completion`闭包。由于在这里不需要任何操作，你可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-6468
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6469
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`连接到取消按钮。你可以像将`saveTapped(_:)`方法连接到保存按钮一样进行操作。进入*Main.storyboard*，打开“添加生日”视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6470
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入“添加生日”屏幕，再点击**取消**。你应该看到“添加生日”屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6472
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将编写的代码与应用的视觉界面连接起来。您还学习了如何使用输入文本框和日期选择器来创建具有 firstName、lastName 和
    birthdate 属性的 Birthday 对象。现在，您可以保存 Birthday 对象，但保存后无法查看它们。在 [第 11 章](text00022.html#ch11)
    中，我们将向您展示如何在 Birthdays 表视图控制器中显示生日列表。
- en: '*Figure 10-6: Change the class of the view controller to* AddBirthdayViewController
    *.*'
  id: totrans-6473
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-6：将视图控制器的类更改为* AddBirthdayViewController *。*'
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6474
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 “Add a Birthday Scene” 中的文本框和日期选择器。在左侧大纲视图中，点击
    Add a Birthday Scene 旁的三角形以展开该场景中的项目菜单。然后，按住 CONTROL 键点击 **Add a Birthday** 旁边的黄色视图控制器图标以打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6475
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，您可以在“Outlets”下看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击
    birthdatePicker 旁边的空圆圈并拖动到故事板中的日期选择器来连接它。当日期选择器对象被蓝色高亮时，您可以松开鼠标（见 [图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6476
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6477
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6478
  prefs: []
  type: TYPE_NORMAL
  zh: 如果连接成功，您将在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充（见 [图 10-8](text00021.html#ch10fig8)）。您只能将
    birthdatePicker outlet 连接到日期选择器。如果尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在创建属性时在 AddBirthdayViewController 中为它指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6479
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6480
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6481
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，通过点击并拖动其圆圈到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6482
  prefs: []
  type: TYPE_NORMAL
  zh: 目前您已完成故事板的工作。接下来，让我们回到 *AddBirthdayViewController.swift* 中以在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6483
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6484
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人的出生日期不应该是未来的日期，所以让我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行此设置。我们在 “[创建 Add Birthday View Controller](text00021.html#ch10lev2sec3)”
    中讨论过 viewDidLoad() 方法，具体见 [第 145 页](text00021.html#page_145)。该方法会自动添加到我们的视图控制器中，因此在
    AddBirthdayViewController 中找到该方法并添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6485
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE803]'
  id: totrans-6486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE803]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6487
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，所以我们需要使用 override 关键字来重写它，像这样：override
    func viewDidLoad() 。注意，在方法中保留 super.viewDidLoad() 这一行是很重要的。当你创建一个子类，比如 AddBirthdayViewController，并重写原始父类的方法时，你要确保也调用父类中的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6488
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，你只需要在 ➊ 处输入 birthdatePicker.maximumDate =
    Date() 。Date() 方法创建一个当前日期和时间的新日期。现在试着运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6489
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便可以通过你在 [第 9 章](text00020.html#ch09) 中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6490
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6491
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现 Save 按钮！当用户点击 Save 时，应用程序应该根据输入的信息创建一个生日，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6492
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6493
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，它将在每次用户点击 Save 按钮时被调用。将以下代码添加到 AddBirthdayViewController
    中，紧接在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6494
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE804]'
  id: totrans-6495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE804]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6496
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 @IBAction 是一个关键字，用来将一个函数直接连接到视图控制器中的一个元素，并允许我们指定在用户对该元素进行操作时应该执行的代码。在这种情况下，我们要添加一个函数，当用户点击保存时，它会执行。当你编写一个
    IBAction 方法时，应该始终包括一个参数，用来表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以将此参数命名为任何你想要的名称。在这里，我们希望每当用户点击保存时，调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem 。因此，我们指定 sender 的类型为 UIBarButtonItem ➌
    。 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看 Save 按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6497
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到 Save 按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到 *Main.storyboard*
    文件。按住 CONTROL 键点击 "Add a Birthday" 行以打开连接对话框。在连接对话框的底部，有一个叫做 Received Actions
    的部分，如 [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到 Add
    a Birthday 视图控制器中的 Save 按钮，以连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6498
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6499
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部列出，位于 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6500
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台中应该会显示“保存按钮已点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6501
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6502
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入名字后，从 firstNameTextField 和 lastNameTextField
    获取名字并保存。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6503
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性叫做 text。这个 text 属性包含了用户在文本框中输入的内容，你可以使用它在 saveTapped(_:)
    中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6504
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE805]'
  id: totrans-6505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE805]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6506
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，也就是如果用户输入了值），否则设置为空字符串
    ""。你可以使用你在[第 5 章](text00015.html#ch05)中学到的空合并操作符 (??) 来实现。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6507
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你就能在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6508
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在文本框中什么都不输入然后点击保存按钮，再试一次，输入一个名字和姓氏后再点击保存。你应该会看到类似下面的输出：
- en: '[PRE806]'
  id: totrans-6509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE806]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6510
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并看到计算机将其输出到调试控制台。接下来，我们将专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6511
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6512
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前日期选择器显示的日期。对于 birthdatePicker，它的值是 birthdatePicker.date。当用户改变
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6513
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6514
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE807]'
  id: totrans-6515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE807]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6516
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE808]'
  id: totrans-6517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE808]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6518
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据就是创建生日所需要的！你会注意到，在调试控制台中显示的日期格式有点奇怪，还包括时间和
    +0000 时区偏移。目前不必太担心这个，我们将在[第 11 章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6519
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6520
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码能够访问用户提供的 firstName、lastName 和 birthdate 输入数据了，你可以使用这些信息通过 Birthday 类的初始化方法来创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6521
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用打印测试newBirthday实例的print语句来替代它们。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6522
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE809]'
  id: totrans-6523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE809]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6524
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate常量。创建newBirthday后，在➋处，你使用点语法将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你获取的是来自newBirthday实例的值。运行应用程序，输入生日并点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE810]'
  id: totrans-6525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE810]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6526
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个Birthday实例。你将在[第11章](text00022.html#ch11)中学习如何将这个生日显示在“生日”视图控制器中。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6528
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，"添加生日"界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，它将调用一个内建的UIViewController方法，名为dismiss(animated:completion:)。这个方法的作用如其名——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法之后，添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6529
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE811]'
  id: totrans-6530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE811]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6531
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 接受两个参数。animated参数用于为关闭屏幕添加动画效果。传入true，这样用户就可以看到“添加生日”界面从屏幕上滑动消失。效果就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你想在视图控制器被关闭后运行一些代码，可以使用completion闭包。由于你不需要执行任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6532
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6533
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到“取消”按钮。你可以像将saveTapped(_:)方法连接到“保存”按钮一样，进行相同的操作。前往*Main.storyboard*并打开“添加生日”视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法的列表到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6534
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入“添加生日”界面，再点击**取消**。你应该看到“添加生日”界面从屏幕上滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6536
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你学习了如何将书写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表视图控制器中显示你的生日列表。
- en: Now connect the AddBirthdayViewController ’s IBOutlet properties to the text
    fields and date picker in Add a Birthday Scene. Click the triangle next to Add
    a Birthday Scene in the left outline view to expand the menu of items in that
    scene. Then, CONTROL -click **Add a Birthday** next to the yellow view controller
    icon to open a connection dialog.
  id: totrans-6537
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 AddBirthdayViewController 的 IBOutlet 属性连接到 Add a Birthday Scene 中的文本框和日期选择器。点击左侧大纲视图中“Add
    a Birthday Scene”旁边的三角形，以展开该场景中的项目菜单。然后，按住 CONTROL 键并点击 **Add a Birthday**，这是黄色视图控制器图标旁边的内容，打开连接对话框。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6538
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，Outlets 下可以看到 birthdatePicker、firstNameTextField 和 lastNameTextField。通过点击它旁边的空圆圈并将其拖到故事板中的日期选择器来连接
    birthdatePicker。当日期选择器对象被蓝色高亮显示时，你可以松开鼠标（见[图 10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6539
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6540
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker 输出'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6541
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到“Birthdate Picker”出现在连接框中，并且连接圆圈已被填充（见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将
    birthdatePicker 输出连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，将不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在创建 AddBirthdayViewController 的属性时为它指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6542
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6543
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *输出已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6544
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，通过点击并将其圆圈拖动到 First Name 标签下方的文本框。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6545
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时完成了故事板的工作。让我们回到 *AddBirthdayViewController.swift* 中，设置最大出生日期的代码。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6546
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6547
  prefs: []
  type: TYPE_NORMAL
  zh: 让人出生日期在未来是不合理的，所以让我们写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来实现这种设置。我们在 “[创建 Add Birthday View Controller](text00021.html#ch10lev2sec3)”
    中讨论过 viewDidLoad() 方法（见[第 145 页](text00021.html#page_145)）。它会自动添加到我们的视图控制器中，所以找到
    AddBirthdayViewController 中的此方法，并向其中添加以下代码行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6548
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE812]'
  id: totrans-6549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE812]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6550
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类中的一个方法，因此我们需要使用override关键字重写它，如下所示：override
    func viewDidLoad()。请注意，保持super.viewDidLoad()这一行是很重要的。当你创建一个子类，比如AddBirthdayViewController，并且重写了原始父类的方法时，你需要确保也调用父类的方法。苹果可能在UIViewController的viewDidLoad()中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6551
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，即当前的日期和时间。现在试着运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6552
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09)中创建的按钮，能够保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6554
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应从输入的信息中创建一个生日对象，然后保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6555
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6556
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，每当用户点击保存按钮时都会调用该方法。将以下代码添加到AddBirthdayViewController中，紧接着viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6557
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE813]'
  id: totrans-6558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE813]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6559
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时会运行。编写IBAction方法时，通常应该包括一个表示触发方法的UI元素的参数。通常，使用下划线来隐藏参数标签，参数名称为sender➋，但你可以根据需要命名此参数。在这种情况下，我们希望每当用户点击保存时，调用saveTapped(_:)方法，而保存是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem➌。print(_:)方法在➔处帮助我们看到保存按钮何时被点击，方便我们测试代码。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6560
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接就像将IBOutlet与Storyboard元素连接一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”那一行，打开连接对话框。在连接对话框的底部有一个名为“Received
    Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，以建立它们之间的连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6561
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6562
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的“Received Actions”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6563
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击“保存”按钮时，调试控制台应该显示消息：“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6564
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6565
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，获取用户输入的 `firstName` 和 `lastName`，它们来自 `firstNameTextField`
    和 `lastNameTextField`。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6566
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 `text` 的可选字符串属性。这个 `text` 属性包含用户在文本框中输入的内容，因此你可以在 `saveTapped(_:)`
    方法中通过以下代码获取用户输入的内容：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6567
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE814]'
  id: totrans-6568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE814]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6569
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`（如果存在的话，即用户输入了值），或者设置为空字符串
    `""`。你可以使用你在[第五章](text00015.html#ch05)中学到的空合并操作符（??）来做到这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6570
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 做同样的操作。在获取 `firstName` 和 `lastName` 的值后，将它们打印到控制台，这样你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6571
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用看看会发生什么。尝试在不输入任何内容的情况下点击“保存”按钮，然后再输入名字和姓氏后重试。你应该会看到类似于这样的输出：
- en: '[PRE815]'
  id: totrans-6572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE815]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6573
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，我们将专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6574
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6575
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `birthdatePicker` 获取日期和从 `firstNameTextField` 或 `lastNameTextField` 获取文本一样简单。UIDatePicker
    类有一个 `date` 属性，表示当前由日期选择器显示的日期。对于 `birthdatePicker`，这是 `birthdatePicker.date`。当用户更改
    UIDatePicker 时，`date` 属性也会改变，所以你可以使用 `birthdayPicker.date` 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6576
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 `saveTapped(_:)` 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6577
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE816]'
  id: totrans-6578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE816]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6579
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE817]'
  id: totrans-6580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE817]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6581
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 `firstName`、`lastName` 和 `birthdate`——这三个数据是创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，其中还包括时间和
    +0000 的时区偏移。现在不需要太担心这个问题。我们将在[第十一章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6582
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6583
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 `firstName`、`lastName` 和 `birthdate` 输入信息，你可以使用这些信息通过 `Birthday`
    类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6584
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后，将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6585
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE818]'
  id: totrans-6586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE818]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6587
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用生日类的初始化方法创建一个新的Birthday实例，并传入firstName、lastName和birthdate常量。创建完newBirthday后，在
    ➋ 处，你通过点语法将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你获取的是newBirthday实例中的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE819]'
  id: totrans-6588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE819]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6589
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6591
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。我们通过向类中添加cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法，叫做dismiss(animated:completion:)。这个方法就是做它说的事——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6592
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE820]'
  id: totrans-6593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE820]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6594
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 接受两个参数。animated参数用于动画效果，传入true，用户可以看到添加生日页面从屏幕上滑下，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器消失后执行某些代码，可以使用completion闭包。因为在这里不需要执行任何操作，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6595
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6596
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样进行操作。打开*Main.storyboard*，并打开Add
    Birthday视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6597
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日页面，再点击**取消**。你应该看到添加生日页面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6598
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6599
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用程序的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示生日列表。
- en: In the connection dialog, under Outlets, you can see the birthdatePicker , firstNameTextField
    , and lastNameTextField . Connect the birthdatePicker by clicking the empty circle
    next to it and dragging to the date picker in the storyboard. When the date picker
    object is highlighted in blue, you can let go (see [Figure 10-7](text00021.html#ch10fig7)
    ).
  id: totrans-6600
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接对话框中，在“Outlets”下，你可以看到birthdatePicker、firstNameTextField和lastNameTextField。通过点击它旁边的空圆圈并将其拖动到故事板中的日期选择器，可以连接birthdatePicker。当日期选择器对象被蓝色高亮显示时，可以松开鼠标（参见[图
    10-7](text00021.html#ch10fig7)）。
- en: '![](Image00229.jpg)'
  id: totrans-6601
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6602
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *出口*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6603
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到“Birthdate Picker”列在“birthdatePicker”旁边，并且连接圆圈已填充（参见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将birthdatePicker出口连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，将不会发生任何变化。Xcode知道birthdatePicker必须连接到UIDatePicker类，因为在我们创建AddBirthdayViewController中的属性时，我们给它指定了这个数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6604
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6605
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *出口已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6606
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个文本字段（firstNameTextField）旁边的圆圈，连接到“First Name”标签下方的文本字段。最后，将lastNameTextField连接到“Last
    Name”标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6607
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。让我们返回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6608
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6609
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期出现在未来是不合逻辑的，因此我们可以编写代码来防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来实现这一设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一文中已经讨论了viewDidLoad()方法，详见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，所以请在AddBirthdayViewController中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6610
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE821]'
  id: totrans-6611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE821]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6612
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，写法如下：override
    func viewDidLoad()。请注意，在方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类，比如 AddBirthdayViewController，并重写原父类的方法时，你需要确保也调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中运行了一些我们不知道的特殊代码，所以不调用父类的方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6613
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，您只需要在 ➊ 处输入 birthdatePicker.maximumDate =
    Date()。Date() 方法创建一个表示当前日期和时间的新日期。现在尝试运行应用，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6614
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，使得您可以通过本视图控制器中的按钮保存生日并取消添加生日，这些按钮是在 [第9章](text00020.html#ch09)
    中创建的。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6615
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6616
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮功能！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6617
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6618
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用它。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6619
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE822]'
  id: totrans-6620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE822]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6621
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上执行操作时应执行的代码。在这个例子中，我们将添加一个函数，在用户点击保存时执行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，用来接收触发该方法的 UI 元素。通常会使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以根据需要自定义这个参数名。在这个例子中，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem。所以我们指定 sender 的类型为 UIBarButtonItem
    ➌ 。方法 print(_:) 在 ➍ 处帮助我们测试代码时，能够看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6622
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮，就像将 IBOutlet 连接到 storyboard 元素一样。回到您的 *Main.storyboard*
    文件中。按住 CONTROL 键并点击添加生日的那一行以打开连接对话框。在连接对话框的底部有一个名为 "Received Actions" 的部分，如 [图10-9](text00021.html#ch10fig9)
    所示。在这个部分，点击并拖动 saveTapped: 旁边的圆圈，连接到 Add a Birthday 视图控制器中的保存按钮。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6623
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6624
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions 列在连接对话框底部的 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6625
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台应该显示“保存按钮被点击了”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6626
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6627
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法中添加代码，当用户输入名字后，从firstNameTextField和lastNameTextField中获取firstName和lastName。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6628
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值就是文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6629
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE823]'
  id: totrans-6630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE823]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6631
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，也就是如果用户输入了值）或者空字符串""。你可以使用空合并操作符(??)来做到这一点，这个你在[第5章](text00015.html#ch05)学过。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6632
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的操作。获取firstName和lastName的值后，将它们打印到控制台，这样在运行应用时你可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6633
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后再输入名字后点击保存按钮。你应该会看到类似下面的输出：
- en: '[PRE824]'
  id: totrans-6634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE824]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6635
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台输出它。接下来，让我们集中精力获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6636
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6637
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，表示当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6638
  prefs: []
  type: TYPE_NORMAL
  zh: 在saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6639
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE825]'
  id: totrans-6640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE825]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6641
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该能看到类似下面的输出：
- en: '[PRE826]'
  id: totrans-6642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE826]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6643
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需要的！你会注意到，调试控制台显示的日期格式有点奇怪，还包括时间和+0000时区偏移。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6644
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6645
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6646
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句替代它们。然后将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6647
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE827]'
  id: totrans-6648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE827]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6649
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在
    ➋ 处，你通过点符号法输出它的属性到调试控制台。打印的输出与之前的print语句相同，不过这次你获取的是newBirthday实例的值。运行应用，输入一个生日，点击保存查看会发生什么。你应该在调试控制台看到类似以下内容的输出：
- en: '[PRE828]'
  id: totrans-6650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE828]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6651
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6652
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6653
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日页面应该消失。我们通过向类中添加cancelTapped(_:)方法来实现这一行为，该方法会调用一个内建的UIViewController方法dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6654
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE829]'
  id: totrans-6655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE829]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6656
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 接受两个参数。animated参数用于动画效果地关闭屏幕。传入true，这样用户就可以看到添加生日页面从屏幕上滑走。看起来就像是一个专业的应用！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的代码块。completion闭包可以在视图控制器被关闭后运行任何代码。因为在这里你不需要做任何事，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6657
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6658
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以按照和将saveTapped(_:)方法与保存按钮连接的相同方式来进行。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。从cancelTapped(_:)方法的列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6659
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击**+**进入添加生日页面，然后点击**取消**。你应该看到添加生日页面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6660
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6661
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学习了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName 和
    birthdate 属性的 Birthday 对象。目前你可以保存 Birthday，但保存后无法查看它们。在 [第 11 章](text00022.html#ch11)
    中，我们将展示如何在生日列表视图控制器中显示保存的生日。
- en: '![](Image00229.jpg)'
  id: totrans-6662
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00229.jpg)'
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6663
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker *outlet*'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6664
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 Birthdate Picker 在连接框中列在 birthdatePicker 旁边，并且连接圆圈已填充（见 [图 10-8](text00021.html#ch10fig8)），那么你就知道连接成功了。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，什么也不会发生。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6665
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6666
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6667
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动第一个名字文本框，从它的圆圈拖动到“First Name”标签下方的文本框，来连接 firstNameTextField。最后，将
    lastNameTextField 连接到“Last Name”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6668
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了故事板的工作。现在让我们回到 *AddBirthdayViewController.swift* 中，编写代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6669
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6670
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有未来的出生日期是没有意义的，所以我们来编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”
    中讨论过 viewDidLoad() 方法，在 [第 145 页](text00021.html#page_145) 中也提到过。它会自动添加到我们的视图控制器中，所以找到
    AddBirthdayViewController 中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6671
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE830]'
  id: totrans-6672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE830]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6673
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 `override` 关键字来重写它，像这样：override
    func viewDidLoad()。请注意，在方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类，比如 AddBirthdayViewController，并重写原始父类的方法时，确保你也调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6674
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate ，您只需在 ➊ 处输入 birthdatePicker.maximumDate =
    Date() 。Date() 方法创建一个新的日期，即当前日期和时间。现在尝试运行应用程序。现在应该无法选择任何将来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6675
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，以便可以使用您在 [第 9 章](text00020.html#ch09) 中创建的按钮，从该视图控制器保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6676
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6677
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应根据输入的信息创建一个生日，然后保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6678
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6679
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从制作一个 saveTapped(_:) 方法开始，每次用户点击保存按钮时都会调用该方法。将以下代码添加到 AddBirthdayViewController
    的 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6680
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE831]'
  id: totrans-6681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE831]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6682
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 是一个关键字，将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素采取行动时应运行的代码。在这种情况下，我们将添加一个函数，该函数在用户点击保存时运行。当您编写一个IBAction方法时，应始终包括一个参数用于触发方法的
    UI 元素。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但您可以根据需要命名此参数。在这种情况下，我们希望每当用户点击保存按钮时都调用
    saveTapped(_:) 方法，而这是一个 UIBarButtonItem 。因此，我们指定 sender 的类型为 UIBarButtonItem ➌
    。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看何时点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6683
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 钩到保存按钮，就像将 IBOutlet 钩到故事板元素一样。返回到您的 *Main.storyboard* 文件。CONTROL
    -click Add a Birthday 行以打开连接对话框。在连接对话框的底部是一个名为接收操作的部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分，从 saveTapped: 旁边的圆形拖动到 Add a Birthday 视图控制器中的保存按钮，将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6684
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6685
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列表在连接对话框底部的接收操作下方列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6686
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行应用程序。当您点击保存按钮时，应在调试控制台中显示消息“保存按钮被点击。”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6687
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6688
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 saveTapped(_:) 方法添加代码，以获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6689
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选 String 属性。这个 text 属性的值是输入到文本字段中的任何内容，因此您可以使用它在 saveTapped(_:)
    中获取用户的输入，具体代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6690
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE832]'
  id: totrans-6691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE832]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6692
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您首先创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），或者为空字符串""。您可以使用在[第5章](text00015.html#ch05)中学到的空合并运算符
    (?? ) 来实现这一点。我们在这里使用常量而不是变量，因为用户输入的名字和姓氏的值不会发生变化。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6693
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 ➋ 处对 lastName 做同样的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，这样您就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6694
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用，看看会发生什么。尝试在没有输入任何内容的文本框的情况下点击保存按钮，然后再尝试在输入了名字和姓氏后再次点击保存。您应该会看到类似以下的输出：
- en: '[PRE833]'
  id: totrans-6695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE833]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6696
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在您可以在应用中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6697
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6698
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前日期选择器上显示的日期。对于 birthdatePicker，它是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此您可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6699
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行添加到您的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6700
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE834]'
  id: totrans-6701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE834]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6702
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。您应该会看到类似以下内容的输出：
- en: '[PRE835]'
  id: totrans-6703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE835]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6704
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 firstName、lastName 和 birthdate——这三项数据足以创建一个 Birthday！您会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和
    +0000 的时区偏移。目前不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6705
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6706
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，您可以使用这些信息通过 Birthday 类的初始化器创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6707
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后，将以下几行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6708
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE836]'
  id: totrans-6709
  prefs: []
  type: TYPE_PRE
  zh: '[PRE836]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6710
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您使用 Birthday 类的初始化器创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，您使用点表示法将其属性输出到调试控制台。打印的输出与之前的 print 语句相同，但这次您是从 newBirthday
    实例中获取值。运行应用，输入生日并点击保存，看看会发生什么。您应该会在调试控制台看到类似以下内容的输出：
- en: '[PRE837]'
  id: totrans-6711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE837]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6712
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday 对象。你将在[第 11 章](text00022.html#ch11)中学习如何在 Birthdays
    视图控制器中显示这个 Birthday 对象。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6713
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6714
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加 cancelTapped(_:) 方法来实现这个行为，这个方法将调用一个内建的
    UIViewController 方法叫做 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中，在 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6715
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE838]'
  id: totrans-6716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE838]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6717
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画关闭屏幕。传入 true，用户就能看到添加生日界面从屏幕上滑下，就像一个专业应用一样！第二个参数是一个可选闭包，名为
    completion。*闭包*是可以传递到函数中的代码块。如果你想在视图控制器被关闭后执行某些代码，可以使用这个闭包。由于这里不需要做任何事，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-6718
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6719
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以按照与 Save 按钮连接 saveTapped(_:) 方法相同的方式操作。打开
    *Main.storyboard*，然后调出添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6720
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日界面，然后点击 **Cancel**。你应该看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6721
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6722
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在一个
    Birthdays 表视图控制器中显示你的生日列表。
- en: '*Figure 10-7: Connecting the date picker to the* birthdatePicker outlet'
  id: totrans-6723
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-7：将日期选择器连接到* birthdatePicker outlet'
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6724
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈已填充（见[图 10-8](text00021.html#ch10fig8)），那么说明连接成功。你只能将
    birthdatePicker outlet 连接到日期选择器。如果你尝试将它连接到标签或其他类型的视图，则不会发生任何事情。Xcode 知道 birthdatePicker
    必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建属性时已经指定了该数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6725
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6726
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6727
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动其圆圈，将firstNameTextField连接到First Name标签下的文本字段。最后，将lastNameTextField连接到Last
    Name标签下的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6728
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可以暂时完成故事板的部分。让我们回到*AddBirthdayViewController.swift*，在代码中设置一个最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6729
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6730
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期是未来的日期，那就没有意义了，所以我们来编写一些代码，防止birthdatePicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行这样的设置。我们在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一文中已经讨论过viewDidLoad()方法，详见[第145页](text00021.html#page_145)。这个方法会自动添加到我们的视图控制器中，所以请在AddBirthdayViewController中找到这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6731
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE839]'
  id: totrans-6732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE839]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6733
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，因此我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad()。请注意，必须保留super.viewDidLoad()这一行代码。当你创建一个子类（如AddBirthdayViewController）并重写原始父类的方法时，要确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()中运行了一些我们不知道的特殊代码，因此不调用父类的方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6734
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个表示当前日期和时间的新日期。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6735
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你能够通过在[第9章](text00020.html#ch09)中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6736
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6737
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6738
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6739
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始编写一个saveTapped(_:)方法，每次用户点击保存按钮时都会调用该方法。将以下代码添加到AddBirthdayViewController的viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6740
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE840]'
  id: totrans-6741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE840]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6742
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将函数直接与视图控制器中的元素连接起来，并允许我们指定当用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时，它将运行。当你编写一个IBAction方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以根据需要命名该参数。在这种情况下，我们希望在用户点击保存时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。在➍处的print(_:)方法帮助我们在测试代码时查看保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6743
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接起来，就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“Add
    a Birthday”行以打开连接对话框。在连接对话框的底部，有一个名为“Received Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动saveTapped:旁边的圆圈，将其连接到“Add
    a Birthday”视图控制器中的保存按钮。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6744
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6745
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的Received Actions下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6746
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台应显示消息：“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6747
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6748
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入firstName和lastName后，它将从firstNameTextField和lastNameTextField中获取这两个值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6749
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性叫做text。这个text属性的值就是用户在文本框中输入的内容，因此你可以使用它来获取用户在saveTapped(_:)方法中的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6750
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE841]'
  id: totrans-6751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE841]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6752
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，即如果用户输入了值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并操作符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的firstName和lastName的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6753
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的操作。获取firstName和lastName的值后，将它们打印到控制台，这样你就能在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6754
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中什么都不输入然后点击保存按钮，再尝试在输入了名字后点击保存按钮。你应该会看到类似以下的输出：
- en: '[PRE842]'
  id: totrans-6755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE842]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6756
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6757
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6758
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前由选择器显示的日期。对于 birthdatePicker ，这就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6759
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6760
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE843]'
  id: totrans-6761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE843]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6762
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE844]'
  id: totrans-6763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE844]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6764
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName 、 lastName 和 birthdate ——这三项数据是我们创建生日所需的！你会注意到，调试控制台中显示的日期格式很奇怪，其中还包含了时间和
    +0000 的时区偏移。暂时不用太担心这个问题，我们将在[第11章](text00022.html#ch11)讨论日期格式及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6765
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6766
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName 、 lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6767
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6768
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE845]'
  id: totrans-6769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE845]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6770
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建一个 newBirthday 实例，并传入 firstName 、 lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你通过点语法将它的属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE846]'
  id: totrans-6771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE846]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6772
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6773
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6774
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，Add a Birthday 界面应该消失。我们通过在类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法会调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6775
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE847]'
  id: totrans-6776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE847]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6777
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `dismiss(animated:completion:)` ➊ 接受两个参数。animated 参数用于控制关闭屏幕时的动画效果。传入 true，这样用户就能看到添加生日屏幕从屏幕上滑下。它看起来就像一个专业的应用！第二个参数是一个可选闭包，叫做
    completion。*闭包* 是一个可以传递给函数的代码块。如果你希望在视图控制器消失后执行某些代码，可以使用 completion 闭包。由于你这里不需要执行任何操作，因此可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-6778
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6779
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 `cancelTapped(_:)` 方法连接到取消按钮。你可以通过和将 `saveTapped(_:)` 方法连接到保存按钮的方式完全相同来实现这一点。进入
    *Main.storyboard* 并打开添加生日视图控制器的连接对话框。点击并拖动 `cancelTapped(_:)` 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6780
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **Cancel**。你应该看到添加生日的界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6781
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6782
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学习了如何使用输入文本框和日期选择器来创建具有 firstName、lastName 和
    birthdate 属性的 Birthday 对象。目前，你可以保存生日，但保存后看不到它们。在 [第11章](text00022.html#ch11) 中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: You’ll know that the connection was successful if you see Birthdate Picker listed
    next to birthdatePicker in the connection box with the connection circle filled
    (see [Figure 10-8](text00021.html#ch10fig8) ). You can only connect the birthdatePicker
    outlet to a date picker. If you try to connect it to a label or another type of
    view, nothing will happen. Xcode knows that the birthdatePicker has to be connected
    to a UIDatePicker class because that’s the data type we gave it in AddBirthdayViewController
    when we created the property.
  id: totrans-6783
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在连接框中看到 Birthdate Picker 列在 birthdatePicker 旁边，并且连接圆圈被填充（参见 [图 10-8](text00021.html#ch10fig8)
    ），那么就说明连接成功。你只能将 birthdatePicker outlet 连接到日期选择器。如果你尝试将其连接到标签或其他类型的视图，什么也不会发生。Xcode
    知道 birthdatePicker 必须连接到 UIDatePicker 类，因为我们在 AddBirthdayViewController 中创建该属性时指定了数据类型。
- en: '![](Image00230.jpg)'
  id: totrans-6784
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6785
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6786
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过点击并拖动从 firstNameTextField 的圆圈到 First Name 标签下方的文本框，连接 firstNameTextField。最后，将
    lastNameTextField 连接到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6787
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时完成了 storyboard 的工作。让我们回到 *AddBirthdayViewController.swift* 文件，在代码中设置最大生日日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6788
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大生日日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6789
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人来说，未来的出生日期显然不合理，因此我们来编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行这种设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”一节中讨论过
    viewDidLoad() 方法，见[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此在 AddBirthdayViewController
    中找到该方法并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6790
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE848]'
  id: totrans-6791
  prefs: []
  type: TYPE_PRE
  zh: '[PRE848]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6792
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，代码如下：override
    func viewDidLoad() 。请注意，在方法中保留 super.viewDidLoad() 这一行非常重要。当你创建一个子类（比如 AddBirthdayViewController
    ）并重写原始超类的方法时，确保也调用超类的方法。Apple 可能在 UIViewController 的 viewDidLoad() 方法中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6793
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需要在 ➊ 处输入 birthdatePicker.maximumDate = Date()
    。Date() 方法创建一个当前日期和时间的日期。现在尝试运行应用程序，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6794
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便通过你在[第9章](text00020.html#ch09) 中创建的按钮，保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6795
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6796
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6797
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6798
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，每当用户点击保存按钮时都会调用这个方法。将以下代码添加到 AddBirthdayViewController
    中，紧接着 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6799
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE849]'
  id: totrans-6800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE849]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6801
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，用于将函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，在用户点击保存时执行。编写
    IBAction 方法时，应该始终包含一个参数，用于表示触发方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称是 sender ➋ ，但你可以根据需要命名这个参数。在本例中，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem 。因此，我们指定 sender 的类型为 UIBarButtonItem
    ➌ 。print(_:) 方法 ➍ 可以帮助我们在测试代码时查看是否点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6802
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件。按住
    CONTROL 键点击 "Add a Birthday" 这一行打开连接对话框。在连接对话框的底部有一个名为 Received Actions 的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分，点击并拖动 saveTapped: 旁边的圆圈到 Add a Birthday
    视图控制器中的保存按钮以将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6803
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6804
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的 Received Actions 部分列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6805
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试重新运行你的应用程序。当你点击保存按钮时，调试控制台应该显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6806
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6807
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，用于获取用户输入的 firstName 和 lastName，并从 firstNameTextField
    和 lastNameTextField 中提取出来。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6808
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的字符串属性叫做 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以通过以下代码在 saveTapped(_:)
    方法中获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6809
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE850]'
  id: totrans-6810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE850]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6811
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了一个值）或空字符串
    ""。你可以使用 nil 合并运算符 (??) 来实现这一点，正如你在 [第 5 章](text00015.html#ch05) 中学到的那样。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6812
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，以便你在运行应用程序时能够看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6813
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在文本框中没有输入任何内容的情况下点击保存按钮，然后再尝试输入名字和姓氏后点击保存。你应该看到类似于以下的输出：
- en: '[PRE851]'
  id: totrans-6814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE851]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6815
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用程序中输入一个名字并看到计算机在调试控制台中输出它。接下来我们来集中精力输出一个日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6816
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6817
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前由选择器显示的日期。对于 birthdatePicker，使用 birthdatePicker.date 即可。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6818
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 saveTapped(_:) 方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6819
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE852]'
  id: totrans-6820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE852]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6821
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似于以下的输出：
- en: '[PRE853]'
  id: totrans-6822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE853]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6823
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，里面还包含了时间和+0000的时区偏移。不过目前不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6824
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6825
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息，你可以利用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6826
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用测试newBirthday实例的打印语句来替代它们。然后，将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6827
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE854]'
  id: totrans-6828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE854]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6829
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday之后，在➋处，你使用点符号将其属性输出到调试控制台。打印输出将与之前的打印语句相同，不过这次你是从newBirthday实例中获取值。运行应用，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE855]'
  id: totrans-6830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE855]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6831
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6832
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6833
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再希望添加生日，添加生日的界面应该消失。我们通过为类添加cancelTapped(_:)方法来实现这一行为，该方法会调用UIViewController的一个内置方法：dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6834
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE856]'
  id: totrans-6835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE856]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6836
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于动画化关闭界面。传入true，这样用户就可以看到添加生日界面滑动消失，效果就像专业的应用一样！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行某些代码，可以使用这个completion闭包。但由于你不需要在此执行任何操作，可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6837
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6838
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到 Cancel 按钮。您可以像将 saveTapped(_:) 方法连接到 Save 按钮一样操作。进入
    *Main.storyboard*，打开 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表拖动到 Cancel
    按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6839
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用程序，点击 **+** 进入添加生日界面，再点击 **Cancel**。您应该会看到 Add a Birthday 从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6840
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6841
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学会了如何将编写的代码与应用程序的视觉界面连接起来。您还学会了如何使用输入文本字段和日期选择器来创建具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在您可以保存 Birthday，但保存后无法查看它们。在 [第 11 章](text00022.html#ch11)，我们将向您展示如何在
    Birthdays 表视图控制器中显示您的生日列表。
- en: '![](Image00230.jpg)'
  id: totrans-6842
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00230.jpg)'
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6843
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-8：* birthdatePicker *outlet 已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6844
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，通过点击并拖动它的圆圈到 First Name 标签下方的文本字段。最后，将 lastNameTextField
    连接到 Last Name 标签下方的文本字段。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6845
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，您已经完成了 storyboard 的工作。接下来，让我们回到 *AddBirthdayViewController.swift* 文件，通过代码设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6846
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6847
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人的出生日期是未来的，那是不合理的，因此我们可以编写一些代码来防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行此设置。我们在“[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”中讨论了
    viewDidLoad() 方法，[第 145 页](text00021.html#page_145) 有相关内容。这个方法会自动添加到我们的视图控制器中，因此在
    AddBirthdayViewController 中找到这个方法并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6848
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE857]'
  id: totrans-6849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE857]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6850
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，在方法中保留 super.viewDidLoad() 这一行非常重要。当您创建一个子类（如 AddBirthdayViewController）并重写原父类的方法时，确保也调用父类的方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用父类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6851
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，您只需在 ➊ 处输入 `birthdatePicker.maximumDate =
    Date()`。Date() 方法创建一个新的日期，表示当前的日期和时间。现在尝试运行应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6852
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使得你能够通过你在[第9章](text00020.html#ch09)中制作的按钮，在此视图控制器中保存一个生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6853
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6854
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮的功能！当用户点击保存时，应用应根据用户输入的信息创建一个生日对象，并保存这些输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6855
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6856
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个名为saveTapped(_:)的方法，每次用户点击保存按钮时都会调用这个方法。在AddBirthdayViewController中，将以下代码添加到viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6857
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE858]'
  id: totrans-6858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE858]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6859
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction位于➊处，是一个关键字，将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时执行。编写IBAction方法时，应该始终包含一个用于触发该方法的UI元素的参数。通常，使用下划线来隐藏参数标签，参数名称为sender
    ➋，但你可以随意命名这个参数。在本例中，我们希望saveTapped(_:)方法在用户点击保存按钮时被调用，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。print(_:)方法位于➍处，帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6860
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”这一行，打开连接对话框。连接对话框的底部有一个名为接收的动作的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并从saveTapped:旁边的圆圈拖动到Add
    a Birthday视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6861
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6862
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框的底部，位于接收的动作下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6863
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台中应该会显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6864
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6865
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在saveTapped(_:)方法中添加代码，以获取用户输入的名字和姓氏，分别从firstNameTextField和lastNameTextField中提取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6866
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性text。这个text属性的值是用户在文本框中输入的内容，因此你可以使用它在saveTapped(_:)方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6867
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE859]'
  id: totrans-6868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE859]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6869
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值），否则设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现这一点。这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6870
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的操作。在获取了firstName和lastName的值之后，将它们打印到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6871
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看看会发生什么。尝试在文本框中不输入任何内容就点击保存按钮，然后再输入名字和姓氏后再次尝试。你应该会看到类似这样的输出：
- en: '[PRE860]'
  id: totrans-6872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE860]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6873
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用中输入名字，并看到计算机在调试控制台中输出它。接下来我们来专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6874
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6875
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6876
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6877
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE861]'
  id: totrans-6878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE861]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6879
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE862]'
  id: totrans-6880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE862]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6881
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——这三项数据，我们可以用来创建一个Birthday！你会注意到在调试控制台中显示的日期格式有些奇怪，里面还包括了时间和+0000的时区偏移。暂时不用太担心这个问题，我们会在[第11章](text00022.html#ch11)中讨论日期格式以及如何只显示日期而不显示时间。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6882
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6883
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入了，你可以利用这些信息通过Birthday类初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6884
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用新的print语句来测试newBirthday实例。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6885
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE863]'
  id: totrans-6886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE863]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6887
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个新的newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建newBirthday之后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你获取的是来自newBirthday实例的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE864]'
  id: totrans-6888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE864]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6889
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6890
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6891
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日屏幕应该关闭。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中，在saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6892
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE865]'
  id: totrans-6893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE865]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6894
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制屏幕关闭时的动画效果。传入true，用户可以看到“添加生日”屏幕滑动消失。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行某些代码，可以使用completion闭包。因为你这里不需要任何操作，所以可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-6895
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6896
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接。你可以通过和连接saveTapped(_:)方法到保存按钮的方式完全相同的方式来实现。打开*Main.storyboard*，并调出“添加生日”视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6897
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入“添加生日”屏幕，然后点击**取消**。你应该看到“添加生日”屏幕滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6898
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6899
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的生日对象。现在你可以保存生日，但保存后你无法看到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表格视图控制器中显示你的生日列表。
- en: '*Figure 10-8: The* birthdatePicker *outlet has been successfully connected.*'
  id: totrans-6900
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-8：* birthdatePicker *已成功连接。*'
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6901
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接firstNameTextField，通过点击并从其圆圈拖动到“名字”标签下方的文本框。最后，将lastNameTextField连接到“姓氏”标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6902
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，你已经完成了故事板的设置。接下来，我们回到*AddBirthdayViewController.swift*中编写代码，为出生日期设置最大值。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6903
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6904
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人有一个未来的出生日期是没有意义的，因此我们需要编写一些代码来防止`birthdatePicker`选择未来的日期。我们可以通过修改`AddBirthdayViewController`中的`viewDidLoad()`方法来实现这一设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”的[第145页](text00021.html#page_145)中讨论过`viewDidLoad()`方法。它会自动添加到我们的视图控制器中，因此在`AddBirthdayViewController`中找到这个方法，并向其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6905
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE866]'
  id: totrans-6906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE866]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6907
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()`已经是`UIViewController`类的方法，因此我们需要使用`override`关键字重写它，如下所示：`override
    func viewDidLoad()`。请注意，务必保留方法中的`super.viewDidLoad()`这一行。当你创建一个子类，比如`AddBirthdayViewController`，并重写原始父类的方法时，你要确保同时调用父类中的方法。因为苹果可能在`UIViewController`的`viewDidLoad()`方法中运行一些我们不知道的特殊代码，所以不调用这个父类方法可能会导致意外错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6908
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的`maximumDate`，你只需要在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法会创建一个当前日期和时间的日期。现在尝试运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6909
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便能够保存一个生日并取消从这个视图控制器添加生日，使用你在[第9章](text00020.html#ch09)中创建的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6910
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6911
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现“保存”按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6912
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6913
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从创建一个`saveTapped(_:)`方法开始，该方法会在用户每次点击“保存”时调用。在`viewDidLoad()`方法之后，将以下代码添加到`AddBirthdayViewController`中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6914
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE867]'
  id: totrans-6915
  prefs: []
  type: TYPE_PRE
  zh: '[PRE867]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6916
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接与视图控制器中的元素连接起来，并允许我们指定用户对该元素执行操作时应该运行的代码。在这个例子中，我们将添加一个函数，当用户点击“保存”时，它会运行。编写`IBAction`方法时，应该始终为触发该方法的UI元素包含一个参数。通常，使用下划线来隐藏参数标签，参数名称为`sender`➋，但你可以根据需要命名这个参数。在这种情况下，我们希望在用户点击“保存”时调用`saveTapped(_:)`方法，这个方法是一个`UIBarButtonItem`。因此，我们指定`sender`的类型是`UIBarButtonItem`➌。`print(_:)`方法在➍处帮助我们在测试代码时看到“保存”按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6917
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到 Save 按钮，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。CONTROL -点击 Add a Birthday 这一行，打开连接对话框。在连接对话框的底部，有一个名为 Received Actions 的部分，如
    [图 10-9](text00021.html#ch10fig9) 所示。在该部分中，从 saveTapped: 旁边的圆圈点击并拖动到 Add a Birthday
    视图控制器中的 Save 按钮，以完成连接。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6918
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6919
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列在连接对话框的底部，位于 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6920
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击 Save 按钮时，调试控制台应该显示“Save 按钮已被点击。”的信息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6921
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6922
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向 saveTapped(_:) 方法添加代码，在用户输入名字后，从 firstNameTextField 和 lastNameTextField
    中提取出名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6923
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性，名为 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以使用它来获取用户在
    saveTapped(_:) 中输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6924
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE868]'
  id: totrans-6925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE868]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6926
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），如果没有则设置为空字符串
    ""。你可以使用在 [第 5 章](text00015.html#ch05) 中学到的空合并运算符（??）来实现这一点。我们在这里使用常量而不是变量，因为用户输入的名字和姓氏值不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6927
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照 ➋ 的步骤，对 lastName 做相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6928
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中不输入任何内容直接点击 Save 按钮，然后在输入了名字和姓氏后再试一次。你应该看到类似下面的输出：
- en: '[PRE869]'
  id: totrans-6929
  prefs: []
  type: TYPE_PRE
  zh: '[PRE869]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6930
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出它。接下来，我们来关注获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6931
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6932
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，这个属性是当前显示的日期。对于 birthdatePicker，它是 birthdatePicker.date。当用户更改 UIDatePicker
    时，date 属性也会改变，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6933
  prefs: []
  type: TYPE_NORMAL
  zh: 向你的 saveTapped(_:) 方法添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6934
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE870]'
  id: totrans-6935
  prefs: []
  type: TYPE_PRE
  zh: '[PRE870]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6936
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似下面的输出：
- en: '[PRE871]'
  id: totrans-6937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE871]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6938
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了 firstName、lastName 和 birthdate——这三项数据足以创建一个生日！你会注意到，调试控制台中显示的日期格式奇怪，其中还包含了时间和
    +0000 的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式以及如何在没有时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6939
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6940
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以利用这些信息通过 Birthday 类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6941
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替代它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6942
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE872]'
  id: totrans-6943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE872]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-6944
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个新的 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    常量。创建 newBirthday 后，在 ➋ 处，你使用点语法将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你获得的是 newBirthday
    实例的值。运行应用程序，输入生日，并点击保存查看会发生什么。你应该能在调试控制台中看到类似以下的输出：
- en: '[PRE873]'
  id: totrans-6945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE873]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6946
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学到如何在 "生日" 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-6947
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-6948
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，"添加生日" 屏幕应该消失。让我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法：dismiss(animated:completion:)。这个方法正如其名所示——它关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6949
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE874]'
  id: totrans-6950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE874]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-6951
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` ➊ 函数接受两个参数。animated 参数用于动画关闭屏幕。传入 true 以便用户可以看到
    "添加生日" 屏幕滑出屏幕。它看起来就像一个专业的应用程序！第二个参数是一个可选闭包，名为 completion。*闭包* 是一段可以传递给函数的代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用
    completion 闭包。由于你不需要在这里执行任何操作，可以直接传入 nil。'
- en: '![](Image00233.jpg)'
  id: totrans-6952
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-6953
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法连接到 Cancel 按钮。你可以像将 saveTapped(_:) 方法连接到 Save 按钮一样进行操作。打开
    *Main.storyboard*，并调出 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表项到 Cancel
    按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-6954
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日屏幕，然后点击 **Cancel**。你应该看到 Add a Birthday 从屏幕上滑动并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-6955
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-6956
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday 对象，但保存后无法查看它们。在 [第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: Next, connect the firstNameTextField by clicking and dragging from its circle
    to the text field underneath the First Name label. Finally, connect the lastNameTextField
    to the text field underneath the Last Name label.
  id: totrans-6957
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，连接 firstNameTextField，通过点击并拖动其圆圈到 First Name 标签下方的文本框。最后，连接 lastNameTextField
    到 Last Name 标签下方的文本框。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-6958
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时完成了 storyboard 的工作。让我们回到 *AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-6959
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-6960
  prefs: []
  type: TYPE_NORMAL
  zh: 人物不应该有未来的出生日期，因此让我们编写一些代码，防止 birthdatePicker 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 viewDidLoad() 方法来进行此类设置。我们在 “[创建 Add Birthday 视图控制器](text00021.html#ch10lev2sec3)”
    的 [第 145 页](text00021.html#page_145) 中谈到过 viewDidLoad() 方法。它会自动添加到我们的视图控制器中，因此找到
    AddBirthdayViewController 中的该方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6961
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE875]'
  id: totrans-6962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE875]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-6963
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字重写它，如下所示：override
    func viewDidLoad()。请注意，保留方法中的 super.viewDidLoad() 这一行很重要。当你创建一个子类，比如 AddBirthdayViewController，并重写原始超类的方法时，你需要确保也调用超类中的方法。苹果可能在
    UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此如果不调用这个超类方法，可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-6964
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法会创建一个新的日期对象，表示当前的日期和时间。现在尝试运行应用程序。应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-6965
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便使用你在[第 9 章](text00020.html#ch09)中创建的按钮，能够保存生日并取消添加生日的操作。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-6966
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-6967
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-6968
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-6969
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个每次用户点击保存按钮时都会被调用的 saveTapped(_:) 方法。在 viewDidLoad() 方法之后，向 AddBirthdayViewController
    中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6970
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE876]'
  id: totrans-6971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE876]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-6972
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时该函数会执行。编写
    IBAction 方法时，应该始终包括一个表示触发该方法的 UI 元素的参数。通常，使用下划线来隐藏参数标签，参数名称为 sender ➋ ，但是你可以随意命名该参数。在此，我们希望每次用户点击保存时调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem 类型的元素。所以我们指定 sender 的类型是 UIBarButtonItem
    ➌ 。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时查看是否已经点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-6973
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 方法连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。回到你的 *Main.storyboard*
    文件。按住 CONTROL 键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“已接收的操作”的区域，如[图 10-9](text00021.html#ch10fig9)所示。在该区域中，从
    saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，将它们连接起来。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-6974
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-6975
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 会在连接对话框的底部列出，位于“已接收的操作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-6976
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台应该显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-6977
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-6978
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，当用户输入完毕后，从 firstNameTextField 和 lastNameTextField
    获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-6979
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个名为 text 的可选 String 属性。该 text 属性的值是用户在文本框中输入的内容，因此你可以使用它在 saveTapped(_:)
    方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6980
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE877]'
  id: totrans-6981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE877]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-6982
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串
    ""。你可以使用在[第5章](text00015.html#ch05)中学到的空合并操作符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-6983
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对 lastName 做相同的操作。获取 firstName 和 lastName 的值后，打印它们到控制台，这样你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-6984
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再试一次，输入名字和姓氏后点击保存。你应该看到类似以下的输出：
- en: '[PRE878]'
  id: totrans-6985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE878]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-6986
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入名字，并查看计算机将其输出到调试控制台。接下来，我们将重点关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-6987
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-6988
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前日期选择器显示的日期。对于 birthdatePicker，这个日期就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-6989
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6990
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE879]'
  id: totrans-6991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE879]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-6992
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE880]'
  id: totrans-6993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE880]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-6994
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 firstName、lastName 和 birthdate ——这三条数据是我们创建一个生日所需的！你会注意到，调试控制台中显示的日期格式很奇怪，它还包含时间和
    +0000 的时区偏移。现在不用太担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-6995
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-6996
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入了，你可以利用这些信息通过 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-6997
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后，将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-6998
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE881]'
  id: totrans-6999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE881]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7000
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你通过 Birthday 类的初始化方法创建一个新的 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在➋处，你通过点符号输出它的属性到调试控制台。打印的输出将和之前的 print 语句一样，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该在调试控制台中看到类似以下内容的输出：
- en: '[PRE882]'
  id: totrans-7001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE882]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7002
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7003
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7004
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个名为cancelTapped(_:)的方法来实现这个功能，该方法将调用一个内置的UIViewController方法，名为dismiss(animated:completion:)。这个方法做的就是它的名字所表示的——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7005
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE883]'
  id: totrans-7006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE883]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7007
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊需要两个参数。animated参数用于动画效果，设置为true以便用户看到添加生日界面从屏幕上滑下。看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为completion。*闭包*是一段可以传递给函数的代码块。completion闭包可以在视图控制器被关闭后执行一些代码。因为在这里你不需要任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7008
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7009
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接起来。你可以像将saveTapped(_:)方法连接到保存按钮一样进行操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7010
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该看到添加生日界面从屏幕上滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7011
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7012
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的生日对象。目前你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日列表视图控制器中显示你的生日。
- en: You’re done with the storyboard for the time being. Let’s go back to *AddBirthdayViewController.swift*
    to set a maximum birthdate in code.
  id: totrans-7013
  prefs: []
  type: TYPE_NORMAL
  zh: 你暂时完成了故事板的工作。现在让我们回到*AddBirthdayViewController.swift*，在代码中设置最大出生日期。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-7014
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-7015
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的生日日期设置为未来的日期是没有意义的，因此我们需要写一些代码来防止 `birthdatePicker` 选择未来的日期。我们可以通过修改 AddBirthdayViewController
    中的 `viewDidLoad()` 方法来进行这种设置。在《[创建添加生日视图控制器](text00021.html#ch10lev2sec3)》一文中我们讨论了
    `viewDidLoad()` 方法，[第145页](text00021.html#page_145) 中有相关内容。这个方法会自动添加到我们的视图控制器中，所以在
    AddBirthdayViewController 中找到该方法，并添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7016
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE884]'
  id: totrans-7017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE884]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-7018
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 `UIViewController` 类的一个方法，因此我们需要使用 `override` 关键字来重写它，如下所示：`override
    func viewDidLoad()`。请注意，方法中必须保留 `super.viewDidLoad()` 这一行。当你创建一个子类（如 `AddBirthdayViewController`）并重写了原始父类的方法时，确保也调用父类的方法非常重要。因为
    Apple 可能在 `UIViewController` 的 `viewDidLoad()` 中有一些我们不清楚的特殊代码，所以不调用这个父类的方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7019
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 `birthdatePicker` 的 `maximumDate`，只需在 ➊ 处输入 `birthdatePicker.maximumDate
    = Date()`。`Date()` 方法会创建一个新的日期，表示当前的日期和时间。现在试着运行一下应用程序，应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7020
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，这样你就可以使用在 [第9章](text00020.html#ch09) 中创建的按钮，在这个视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7021
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7022
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮功能！当用户点击保存时，应用程序应该根据用户输入的信息创建一个生日对象，并保存这些输入数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7023
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7024
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要创建一个 `saveTapped(_:)` 方法，每当用户点击保存按钮时，都会调用这个方法。将以下代码添加到 AddBirthdayViewController
    中，放在 `viewDidLoad()` 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7025
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE885]'
  id: totrans-7026
  prefs: []
  type: TYPE_PRE
  zh: '[PRE885]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7027
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接与视图控制器中的元素连接起来，并允许我们指定用户对该元素进行操作时应该运行的代码。在这个例子中，我们要添加一个函数，当用户点击保存时执行。当你编写一个
    IBAction 方法时，应该总是包含一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 `sender` ➋，但是你可以根据需要为该参数命名。在这个例子中，我们希望每当用户点击保存按钮时，调用
    `saveTapped(_:)` 方法，这个按钮是一个 `UIBarButtonItem`。因此，我们指定 `sender` 的类型为 `UIBarButtonItem`
    ➌。在 ➍ 处的 `print(_:)` 方法可以帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7028
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”那一行，打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”（Received
    Actions）的区域，如[图10-9](text00021.html#ch10fig9)所示。在该区域中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7029
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7030
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列出了在连接对话框底部的“接收的动作”区域下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7031
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，应该在调试控制台中显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7032
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7033
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，获取用户输入的名字和姓氏，即从firstNameTextField和lastNameTextField中提取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7034
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个名为text的可选String属性。这个text属性的值是输入框中用户输入的内容，因此你可以使用它在saveTapped(_:)方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7035
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE886]'
  id: totrans-7036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE886]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7037
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，也就是如果用户输入了值），或者设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的空合并运算符(??)来实现这一点。我们在这里使用常量而非变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7038
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同操作。在获取firstName和lastName的值后，将它们打印到控制台，这样你就可以在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7039
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE887]'
  id: totrans-7040
  prefs: []
  type: TYPE_PRE
  zh: '[PRE887]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7041
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7042
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7043
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，这是选择器当前显示的日期。对于birthdatePicker来说，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7044
  prefs: []
  type: TYPE_NORMAL
  zh: 向你的saveTapped(_:)方法添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7045
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE888]'
  id: totrans-7046
  prefs: []
  type: TYPE_PRE
  zh: '[PRE888]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7047
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE889]'
  id: totrans-7048
  prefs: []
  type: TYPE_PRE
  zh: '[PRE889]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7049
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所需的！您会注意到调试控制台中显示的日期格式有些奇怪，还包含了时间和+0000的时区偏移。暂时不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7050
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7051
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的firstName、lastName和birthdate输入，您可以利用这些信息通过Birthday类的初始化方法创建一个Birthday实例。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7052
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除打印语句，因为我们将用打印语句来测试新的`newBirthday`实例。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7053
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE890]'
  id: totrans-7054
  prefs: []
  type: TYPE_PRE
  zh: '[PRE890]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7055
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，您通过Birthday类的初始化方法创建了一个新的`newBirthday`实例，并传入firstName、lastName和birthdate常量。创建`newBirthday`实例后，在
    ➋ 处，您使用点语法将其属性输出到调试控制台。打印输出与之前的打印语句相同，只不过这次您获得的是来自`newBirthday`实例的值。运行应用程序，输入生日并点击保存，看看会发生什么。您应该在调试控制台中看到类似以下内容的输出：
- en: '[PRE891]'
  id: totrans-7056
  prefs: []
  type: TYPE_PRE
  zh: '[PRE891]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7057
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday实例。您将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7058
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7059
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们可以通过在类中添加一个cancelTapped(_:)方法来实现此行为，该方法会调用一个内置的UIViewController方法dismiss(animated:completion:)。此方法的作用就是它的名字所描述的——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7060
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE892]'
  id: totrans-7061
  prefs: []
  type: TYPE_PRE
  zh: '[PRE892]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7062
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于控制关闭屏幕的动画效果。传入true，这样用户就能看到“添加生日”界面从屏幕上滑动消失，效果就像一个专业的应用程序一样！第二个参数是一个可选闭包，名为completion。*闭包*是可以传递给函数的一段代码块。如果您希望在视图控制器消失后执行某些代码，可以使用completion闭包。但因为此处不需要任何操作，您可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7063
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7064
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接起来。你可以像将saveTapped(_:)方法与保存按钮连接一样来操作。在*Main.storyboard*中，打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法的列表项到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7065
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该看到添加生日界面从屏幕上滑动并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7066
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7067
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用程序的视觉界面。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的生日对象。现在，你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表格视图控制器中显示你的生日列表。
- en: '**SETTING A MAXIMUM BIRTHDATE**'
  id: totrans-7068
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**设置最大出生日期**'
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-7069
  prefs: []
  type: TYPE_NORMAL
  zh: 让一个人的出生日期出现在未来是不合适的，因此我们要编写一些代码，防止出生日期选择器选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来完成这个设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论了viewDidLoad()方法，具体内容请参见[第145页](text00021.html#page_145)。它是自动添加到我们的视图控制器中的，所以找到AddBirthdayViewController中的这个方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7070
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE893]'
  id: totrans-7071
  prefs: []
  type: TYPE_PRE
  zh: '[PRE893]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-7072
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，因此我们需要使用override关键字来重写它，像这样：override func
    viewDidLoad()。请注意，在方法中保留super.viewDidLoad()这一行是很重要的。当你创建一个子类（比如AddBirthdayViewController）并重写原始超类的方法时，你需要确保也调用超类的方法。Apple可能在UIViewController的viewDidLoad()中有一些我们不知道的特殊代码，因此不调用这个超类方法可能会导致意外错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7073
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器的maximumDate，您只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个新的日期，它是当前的日期和时间。现在尝试运行应用程序。你应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7074
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便你可以使用在[第9章](text00020.html#ch09)中创建的按钮来保存生日并取消从此视图控制器添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7075
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7076
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7077
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7078
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 `saveTapped(_:)` 方法，每次用户点击保存按钮时都会调用。将以下代码添加到 `AddBirthdayViewController`
    中，在 `viewDidLoad()` 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7079
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE894]'
  id: totrans-7080
  prefs: []
  type: TYPE_PRE
  zh: '[PRE894]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7081
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处的 `@IBAction` 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时运行。当你编写一个
    IBAction 方法时，应该始终包含一个参数，用于接收触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，并且参数名称是 `sender` ➋，但你可以根据需要为该参数命名。在这种情况下，我们希望每次用户点击保存时调用
    `saveTapped(_:)` 方法，这时保存按钮是一个 `UIBarButtonItem`。因此，我们指定 `sender` 的类型为 `UIBarButtonItem`
    ➌。打印方法 `print(_:)` 在 ➍ 处帮助我们查看保存按钮是否在测试代码时被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7082
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 方法与保存按钮连接就像将一个 IBOutlet 连接到一个故事板元素一样。返回到你的*Main.storyboard*文件。按住
    CONTROL 键并点击 "Add a Birthday" 这一行，以打开连接对话框。在连接对话框的底部，有一个名为 "Received Actions"
    的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分中，从 `saveTapped:` 旁边的圆圈点击并拖动到 "Add
    a Birthday" 视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7083
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7084
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列在连接对话框的底部，位于 Received Actions 下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7085
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，应该会在调试控制台显示 "The save button was tapped."（保存按钮被点击了）。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7086
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7087
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，在用户输入后，从 `firstNameTextField` 和 `lastNameTextField`
    获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7088
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField` 类有一个可选的 String 属性叫做 `text`。这个 `text` 属性的值是输入框中所输入的内容，因此你可以使用它来获取用户在
    `saveTapped(_:)` 中的输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7089
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE895]'
  id: totrans-7090
  prefs: []
  type: TYPE_PRE
  zh: '[PRE895]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7091
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`（如果存在的话，即如果用户输入了值），否则设置为空字符串
    ""。你可以使用在[第 5 章](text00015.html#ch05)中学到的空合并操作符（??）来实现这一点。这里我们使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7092
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 做同样的事情。在获取了 `firstName` 和 `lastName` 的值之后，将它们打印到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7093
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本字段中不输入任何内容就点击保存按钮，然后再试一次，输入名字和姓氏后点击保存。你应该看到类似以下的输出：
- en: '[PRE896]'
  id: totrans-7094
  prefs: []
  type: TYPE_PRE
  zh: '[PRE896]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7095
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，我们将集中精力输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7096
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7097
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7098
  prefs: []
  type: TYPE_NORMAL
  zh: 向saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7099
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE897]'
  id: totrans-7100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE897]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE898]'
  id: totrans-7102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE898]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7103
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建Birthday所需的！你会注意到调试控制台中显示的日期格式有点奇怪，包含了时间和+0000的时区偏移。暂时不用太担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息，通过Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除打印语句，因为我们将用打印语句替换它们，来测试newBirthday实例。然后，向saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7107
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE899]'
  id: totrans-7108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE899]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7109
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点表示法将其属性输出到调试控制台。打印的输出将与早期的打印语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE900]'
  id: totrans-7110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE900]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7111
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7113
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加cancelTapped(_:)方法来实现这个行为，该方法将调用一个内建的UIViewController方法，名为dismiss(animated:completion:)。这个方法正如其名——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7114
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE901]'
  id: totrans-7115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE901]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7116
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制屏幕关闭时的动画效果。传入true，用户就能看到“添加生日”界面从屏幕上滑下，就像专业的应用程序一样！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行一些代码，可以使用completion闭包。因为你不需要在这里执行任何操作，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7117
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样进行操作。前往*Main.storyboard*，并调出“添加生日”视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7119
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用程序，点击**+**进入添加生日页面，再点击**取消**。你应该看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建具有firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个生日列表视图控制器中显示所有的生日。
- en: 'It wouldn’t make sense for a person to have a birthdate in the future, so let’s
    write some code to prevent birthdatePicker from selecting future dates. We can
    do this kind of setup by modifying the viewDidLoad() method in the AddBirthdayViewController
    . We talked about the viewDidLoad() method in “[Creating the Add Birthday View
    Controller](text00021.html#ch10lev2sec3) ” on [page 145](text00021.html#page_145)
    . It’s automatically added to our view controllers, so find this method in the
    AddBirthdayViewController and add the following line of code to it:'
  id: totrans-7122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个人的生日来说，未来的日期是没有意义的，因此我们需要写一些代码，防止birthdayPicker选择未来的日期。我们可以通过修改AddBirthdayViewController中的viewDidLoad()方法来进行此设置。我们在“[创建添加生日视图控制器](text00021.html#ch10lev2sec3)”中讨论过viewDidLoad()方法，位于[第145页](text00021.html#page_145)。它会自动添加到我们的视图控制器中，因此请在AddBirthdayViewController中找到此方法，并在其中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7123
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE902]'
  id: totrans-7124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE902]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-7125
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类的方法，所以我们需要使用override关键字来重写它，如下所示：override func
    viewDidLoad()。请注意，必须保留方法中的super.viewDidLoad()这一行。当你创建一个子类（如AddBirthdayViewController）并重写原父类的方法时，必须确保也调用父类的方法。Apple可能在UIViewController的viewDidLoad()中有一些我们不了解的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7126
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需在➊处输入birthdatePicker.maximumDate = Date()。Date()方法创建一个表示当前日期和时间的新日期。现在试着运行应用程序。应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，以便可以通过你在[第9章](text00020.html#ch09)中创建的按钮，从这个视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在实现保存按钮！当用户点击保存时，应用程序应该根据输入的信息创建一个生日对象，然后保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7130
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先编写一个saveTapped(_:)方法，该方法会在用户点击保存按钮时被调用。将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7132
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE903]'
  id: totrans-7133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE903]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7134
  prefs: []
  type: TYPE_NORMAL
  zh: ➊处的@IBAction是一个关键字，将函数直接连接到视图控制器中的元素，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，在用户点击保存时运行。当你编写IBAction方法时，应该始终包括一个参数，用来表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你可以根据需要为这个参数命名。在这个例子中，我们希望在用户点击保存按钮时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。所以我们指定sender的类型为UIBarButtonItem
    ➌。在➔处使用print(_:)方法帮助我们在测试代码时看到保存按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7135
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)方法与保存按钮连接，就像将IBOutlet与故事板元素连接一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”这一行，打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”（Received
    Actions）的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7136
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7137
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的接收操作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次运行你的应用程序。当你点击保存按钮时，"保存按钮被点击了。"的信息应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，当用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中获取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7141
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。这个 text 属性的值是文本字段中输入的内容，因此你可以使用它在 saveTapped(_:)
    方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7142
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE904]'
  id: totrans-7143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE904]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串
    ""。你可以使用你在[第 5 章](text00015.html#ch05)学到的空合并操作符（??）来完成这一操作。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做相同的操作。当你获取到 firstName 和 lastName 的值后，将它们打印到控制台，这样你就可以在运行应用程序时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7146
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序查看发生了什么。尝试在文本字段中没有输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似于以下的输出：
- en: '[PRE905]'
  id: totrans-7147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE905]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7148
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入一个名字，并在调试控制台中看到计算机输出它。接下来，我们将专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7150
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前显示在选择器中的日期。对于 birthdatePicker 来说，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7151
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7152
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE906]'
  id: totrans-7153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE906]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似于以下输出的内容：
- en: '[PRE907]'
  id: totrans-7155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE907]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7156
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包含了时间和
    +0000 的时区偏移。现在不用太担心这个，我们会在[第 11 章](text00022.html#ch11)中讨论日期格式，以及如何不带时间显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7157
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入信息了，你可以使用这些信息通过 Birthday 类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7159
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用测试newBirthday实例的打印语句来替换它们。然后将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7160
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE908]'
  id: totrans-7161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE908]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7162
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate常量。创建newBirthday后，在➋处，你使用点语法将它的属性输出到调试控制台。打印输出将与早期的打印语句相同，但这次你得到的是newBirthday实例中的值。运行应用程序，输入生日，点击保存，看看发生了什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE909]'
  id: totrans-7163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE909]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7166
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日的屏幕应该消失。让我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的作用就是它所说的——它关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7167
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE910]'
  id: totrans-7168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE910]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7169
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于动画化关闭屏幕。传入true，这样用户就可以看到“添加生日”屏幕从屏幕上滑下。看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是一个可以传递给函数的代码块。completion闭包可以在你希望视图控制器关闭后运行某些代码时使用。因为你不需要在这里做任何事情，所以可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7170
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7171
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接。你可以通过与保存按钮连接saveTapped(_:)方法的相同方式来完成。打开*Main.storyboard*并弹出“添加生日”视图控制器的连接对话框。从cancelTapped(_:)方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7172
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日屏幕，然后点击**取消**。你应该会看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将编写的代码与应用程序的视觉界面连接起来。您还学习了如何使用输入文本框和日期选择器创建一个包含 `firstName`、`lastName`
    和 `birthdate` 属性的 Birthday 对象。现在您可以保存 Birthday，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将向您展示如何在一个
    Birthdays 表视图控制器中显示您的生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7175
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE911]'
  id: totrans-7176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE911]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-7177
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewDidLoad()` 已经是 `UIViewController` 类的一个方法，因此我们需要使用 `override` 关键字重写它，像这样：`override
    func viewDidLoad()`。请注意，务必保留方法中的 `super.viewDidLoad()` 这一行。当您创建一个子类（如 AddBirthdayViewController）并重写原始父类的方法时，您需要确保也调用父类的方法。苹果可能在
    `UIViewController` 的 `viewDidLoad()` 中有一些我们不了解的特殊代码，所以不调用父类的方法可能会导致意外的错误。'
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7178
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置出生日期选择器的最大日期，您只需要在➊处输入 `birthdatePicker.maximumDate = Date()`。`Date()` 方法创建一个新的日期对象，它表示当前的日期和时间。现在尝试运行应用程序。此时应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将编写一些代码，使得您能够从这个视图控制器中保存生日并取消添加生日，使用您在[第 9 章](text00020.html#ch09)中创建的按钮。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用程序应该根据用户输入的信息创建一个生日对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7182
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先来创建一个 `saveTapped(_:)` 方法，每当用户点击保存按钮时，这个方法会被调用。请在 `viewDidLoad()` 方法后面将以下代码添加到
    AddBirthdayViewController 中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7184
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE912]'
  id: totrans-7185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE912]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7186
  prefs: []
  type: TYPE_NORMAL
  zh: '`@IBAction` 在➊处是一个关键字，它将函数与视图控制器中的元素直接连接，并允许我们指定在用户对该元素进行操作时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时会运行。编写
    `IBAction` 方法时，您应始终包含一个参数，用于表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名为 `sender` ➋，但您可以根据需要将该参数命名为其他任何名称。在这种情况下，我们希望每当用户点击保存按钮时，调用
    `saveTapped(_:)` 方法，而保存按钮是一个 `UIBarButtonItem`。因此，我们指定 `sender` 的类型为 `UIBarButtonItem`
    ➌。`print(_:)` 方法在 ➍ 处帮助我们在测试代码时查看是否点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7187
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回你的*Main.storyboard*文件。CONTROL-点击“添加生日”行以打开连接对话框。在连接对话框的底部有一个名为“已接收操作”的区域，如[图10-9](text00021.html#ch10fig9)所示。在该区域中，点击并拖动从saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7188
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7189
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的已接收操作区域。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7190
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行应用程序。当你点击保存按钮时，"The save button was tapped."的信息应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7192
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法中添加代码，获取用户输入的firstNameTextField和lastNameTextField中的名字。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7193
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，名为text。这个text属性的值就是输入到文本字段中的内容，因此你可以使用它来在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7194
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE913]'
  id: totrans-7195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE913]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7196
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，也就是说，如果用户输入了值）或者空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并操作符(??)来实现这一点。我们这里使用常量而非变量，因为我们不会更改用户输入的名字。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7197
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。当你获取到firstName和lastName的值后，将它们打印到控制台，这样你在运行应用时可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7198
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看看会发生什么。尝试在文本字段中不输入任何内容点击保存按钮，再试一次，在输入了名字后点击保存。你应该会看到类似于以下的输出：
- en: '[PRE914]'
  id: totrans-7199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE914]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7200
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入名字，并在调试控制台中查看计算机输出的内容。接下来，我们将专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7202
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker中获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，表示当前日期选择器中显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7203
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7204
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE915]'
  id: totrans-7205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE915]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE916]'
  id: totrans-7207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE916]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7208
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 `firstName`、`lastName` 和 `birthdate`——这三项数据是创建生日所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，还包含了时间和
    +0000 的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)讨论日期格式，以及如何在不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7209
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 `firstName`、`lastName` 和 `birthdate` 输入数据，你可以使用这些信息通过 `Birthday`
    类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7211
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `saveTapped(_:)` 方法中的 `print` 语句，因为我们将用测试 `newBirthday` 实例的 `print` 语句来替代它们。然后将以下行添加到
    `saveTapped(_:)` 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7212
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE917]'
  id: totrans-7213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE917]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 `Birthday` 类的初始化器创建了一个 `newBirthday` 实例，并传入了 `firstName`、`lastName`
    和 `birthdate` 的常量。创建 `newBirthday` 后，在 ➋ 处，你使用点语法将其属性输出到调试控制台。打印输出将与之前的 `print`
    语句相同，不过这次你获得的是 `newBirthday` 实例中的值。运行应用，输入一个生日，然后点击“保存”查看发生了什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE918]'
  id: totrans-7215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE918]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7216
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学到如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7218
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，表示他们不再想添加生日，添加生日的界面应该关闭。我们可以通过向类中添加一个 `cancelTapped(_:)` 方法来实现这个行为，该方法将调用一个内置的
    `UIViewController` 方法，名为 `dismiss(animated:completion:)`。这个方法正如其名字所示——它会关闭当前显示的视图控制器。在
    `AddBirthdayViewController` 类中的 `saveTapped(_:)` 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7219
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE919]'
  id: totrans-7220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE919]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7221
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` 方法 ➊ 接受两个参数。`animated` 参数用于动画地关闭屏幕。传入 `true`，这样用户可以看到添加生日界面从屏幕上滑下，效果就像一个专业的应用程序一样！第二个参数是一个可选的闭包，叫做
    `completion`。*闭包* 是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用 `completion` 闭包。因为这里不需要执行任何操作，你可以传入
    `nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-7222
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7223
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 连接到取消按钮。你可以像之前将 saveTapped(_:) 方法连接到保存按钮一样操作。打开 *Main.storyboard*，并为添加生日视图控制器打开连接对话框。从
    cancelTapped(_:) 方法列表拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7224
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日界面，然后点击 **Cancel**。你应该能看到添加生日界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表视图控制器中显示你的生日列表。
- en: '[PRE920]'
  id: totrans-7227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE920]'
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-7228
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad() 已经是 UIViewController 类的一个方法，因此我们需要使用 override 关键字来重写它，代码如下：override
    func viewDidLoad()。注意，保留方法中的 super.viewDidLoad() 这一行是很重要的。当你创建一个子类（比如 AddBirthdayViewController）并重写原始父类的方法时，你需要确保调用父类中的这个方法。Apple
    可能在 UIViewController 的 viewDidLoad() 中有一些我们不知道的特殊代码，因此不调用这个父类方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7229
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 birthdatePicker 的 maximumDate，你只需在 ➊ 处输入 birthdatePicker.maximumDate = Date()。Date()
    方法创建一个当前的日期和时间。现在尝试运行应用，应该无法选择未来的任何日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7230
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使得你能够保存生日，并通过你在[第9章](text00020.html#ch09)中创建的按钮取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮功能！当用户点击保存时，应用应该根据输入的信息创建一个 Birthday 对象，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7234
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个 saveTapped(_:) 方法，每当用户点击保存时都会调用。将以下代码添加到 AddBirthdayViewController
    中，放在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7235
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE921]'
  id: totrans-7236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE921]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7237
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时就会运行。当你编写
    IBAction 方法时，应该始终包含一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，参数名称是 sender ➋，但你可以根据需要为该参数命名。在这个例子中，我们希望在用户点击保存时调用
    saveTapped(_:) 方法，而保存按钮是一个 UIBarButtonItem。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7238
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到故事板元素一样。回到你的 *Main.storyboard* 文件，按住
    CONTROL 键并点击“添加生日”这一行以打开连接对话框。在连接对话框的底部，有一个名为“接收操作”（Received Actions）的部分，如[图 10-9](text00021.html#ch10fig9)所示。在这个部分中，从
    saveTapped: 旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，来连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7239
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7240
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBAction 列表位于连接对话框底部的接收操作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7241
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，调试控制台中应该显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7242
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    中提取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7244
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型的属性，叫做 text。这个 text 属性的值是输入到文本字段中的内容，所以你可以在 saveTapped(_:)
    方法中使用它来获取用户输入，如下所示：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7245
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE922]'
  id: totrans-7246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE922]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7247
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果它存在的话，即如果用户输入了值），否则设置为空字符串
    ""。你可以使用在[第5章](text00015.html#ch05)中学习的 nil 合并运算符（??）来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7248
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7249
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本字段中不输入任何内容就点击保存按钮，然后再输入名字和姓氏后再试一次。你应该会看到类似下面的输出：
- en: '[PRE923]'
  id: totrans-7250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE923]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7251
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7252
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7253
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，表示当前picker显示的日期。对于birthdatePicker，这就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7254
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7255
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE924]'
  id: totrans-7256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE924]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE925]'
  id: totrans-7258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE925]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7259
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是创建Birthday所需的！你会注意到，在调试控制台中显示的日期格式有点奇怪，其中还包括时间和+0000的时区偏移。暂时不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类初始化器来创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7262
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后，向saveTapped(_:)方法中添加以下行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7263
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE926]'
  id: totrans-7264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE926]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7265
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化器创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。创建完newBirthday后，在➋，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE927]'
  id: totrans-7266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE927]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7267
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7269
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，Add a Birthday界面应该消失。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，它将调用一个内置的UIViewController方法，名为dismiss(animated:completion:)。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7270
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE928]'
  id: totrans-7271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE928]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7272
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) ➊方法有两个参数。animated参数用于设置是否动画关闭屏幕。传入true，这样用户就能看到“添加生日”界面从屏幕上滑下，效果就像专业应用一样！第二个参数是一个可选的闭包，叫做completion。*闭包*是一个可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为你在这里不需要任何操作，可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7273
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7274
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与取消按钮连接。你可以像将saveTapped(_:)方法与保存按钮连接一样进行操作。前往*Main.storyboard*，然后打开Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7275
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学习了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。现在你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示你所有的生日列表。
- en: 'viewDidLoad() is already a method of the UIViewController class, so we need
    to override it using the override keyword, like so: override func viewDidLoad()
    . Note that it’s important to leave the line super.viewDidLoad() in the method.
    When you create a subclass, like AddBirthdayViewController , and override a method
    from the original superclass, you want to make sure that you also call the method
    on the superclass. Apple could have some special code that runs in the UIViewController
    viewDidLoad() that we don’t know about, so not calling this superclass method
    could lead to unexpected errors.'
  id: totrans-7278
  prefs: []
  type: TYPE_NORMAL
  zh: viewDidLoad()已经是UIViewController类中的一个方法，因此我们需要使用override关键字来重写它，写成：override
    func viewDidLoad()。请注意，在方法中保留super.viewDidLoad()这一行非常重要。当你创建一个子类，例如AddBirthdayViewController，并重写原始超类的方法时，你需要确保也调用超类的方法。Apple可能在UIViewController的viewDidLoad()方法中有一些我们不了解的特殊代码，所以不调用超类的方法可能会导致意外的错误。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7279
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置birthdatePicker的maximumDate，你只需要在➊处输入birthdatePicker.maximumDate = Date()。Date()方法会创建一个当前的日期和时间。现在试着运行一下应用，应该无法选择未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7280
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，让你可以使用[第9章](text00020.html#ch09)中创建的按钮，在这个视图控制器中保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该从输入的信息中创建一个Birthday对象，然后保存用户输入的内容。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个saveTapped(_:)方法开始，每当用户点击保存按钮时，它就会被调用。在viewDidLoad()方法之后，立即将以下代码添加到AddBirthdayViewController中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7285
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE929]'
  id: totrans-7286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE929]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7287
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时运行。当你编写IBAction方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，参数名称是sender
    ➋，但你可以将该参数命名为任何你喜欢的名称。在这种情况下，我们希望每当用户点击保存按钮时调用saveTapped(_:)方法，保存按钮是一个UIBarButtonItem。所以我们指定sender的类型是UIBarButtonItem
    ➌。在➊处的print(_:)方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7288
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接，就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“接收的操作”（Received
    Actions）的部分，如[图10-9](text00021.html#ch10fig9)所示。在这个部分，点击并拖动从saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7289
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7290
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：在连接对话框的“接收的操作”部分列出了所有的IBAction。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7291
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试重新运行你的应用。当你点击保存按钮时，调试控制台应该显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7292
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7293
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入firstName和lastName后，从firstNameTextField和lastNameTextField中获取这两个值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7294
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是文本字段中输入的内容，所以你可以使用它来获取用户在saveTapped(_:)中输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7295
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE930]'
  id: totrans-7296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE930]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7297
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的空值合并操作符（??）来实现这一点。这里我们使用常量而非变量，因为我们不会更改用户输入的firstName和lastName的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7298
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对➋处的lastName做同样的操作。获取firstName和lastName的值后，将它们打印到控制台，这样你就能在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7299
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用查看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE931]'
  id: totrans-7300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE931]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7301
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，我们将重点关注如何获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7302
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7303
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7304
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7305
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE932]'
  id: totrans-7306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE932]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE933]'
  id: totrans-7308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE933]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7309
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——创建一个Birthday所需的三项数据！你会注意到调试控制台中显示的日期格式很奇怪，还包括时间和+0000的时区偏移。目前不需要太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7311
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7312
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7313
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE934]'
  id: totrans-7314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE934]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7315
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建一个新的newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday之后，在➋处，你使用点语法将它的属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用，输入生日，然后点击保存查看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE935]'
  id: totrans-7316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE935]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7317
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7319
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，添加生日页面应该关闭。我们通过在类中添加`cancelTapped(_:)`方法来实现这一行为，该方法将调用一个内置的`UIViewController`方法`dismiss(animated:completion:)`。该方法的作用正如它所描述的那样——它会关闭当前显示的视图控制器。在`AddBirthdayViewController`类中的`saveTapped(_:)`方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7320
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE936]'
  id: totrans-7321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE936]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7322
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数➊接受两个参数。`animated`参数用于为关闭界面添加动画效果。传入`true`，用户将看到“添加生日”页面从屏幕上滑下来。这看起来就像一个专业应用！第二个参数是一个可选的闭包，名为`completion`。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后运行某些代码，可以使用`completion`闭包。由于你在这里不需要做任何事，因此可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-7323
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7324
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`连接到“取消”按钮。你可以像将`saveTapped(_:)`方法连接到“保存”按钮一样进行操作。打开*Main.storyboard*并调出“添加生日”视图控制器的连接对话框。从`cancelTapped(_:)`方法列表拖动到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7325
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日页面，然后点击**取消**。你应该看到“添加生日”页面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7327
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含`firstName`、`lastName`和`birthdate`属性的生日对象。现在你可以保存生日，但保存后你看不到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: To set the maximumDate of the birthdatePicker , all you have to do is enter
    birthdatePicker.maximumDate = Date() at ➊ . The Date() method creates a new date
    that is the current date and time. Try running the app now. It should be impossible
    to select any date in the future!
  id: totrans-7328
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置`birthdatePicker`的`maximumDate`，你只需在➊处输入`birthdatePicker.maximumDate = Date()`。`Date()`方法创建一个表示当前日期和时间的新日期。现在试着运行应用。你应该无法选择任何未来的日期！
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7329
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将编写一些代码，使你可以通过在[第9章](text00020.html#ch09)中创建的按钮保存生日并取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮！当用户点击“保存”时，应用应该根据输入的信息创建一个生日对象，并保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7332
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接“保存”按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先从创建一个每次用户点击“保存”时都会调用的`saveTapped(_:)`方法开始。将以下代码添加到`AddBirthdayViewController`，紧接着`viewDidLoad()`方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7334
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE937]'
  id: totrans-7335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE937]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7336
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ 处的 `@IBAction` 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素执行操作时应该运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时运行。编写
    IBAction 方法时，通常应该包含一个参数，表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称为 `sender` ➋，但你可以根据需要为这个参数取任何名称。在此情况下，我们希望每当用户点击保存按钮时调用
    `saveTapped(_:)` 方法，保存按钮是一个 `UIBarButtonItem`。因此，我们指定 `sender` 的类型是 `UIBarButtonItem`
    ➌。在 ➍ 处的 `print(_:)` 方法帮助我们在测试代码时查看保存按钮是否已被点击。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7337
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到保存按钮就像将一个 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件。按住 CONTROL 并点击 “Add a Birthday” 行以打开连接对话框。在连接对话框的底部有一个叫做 “Received Actions”
    的部分，如 [图 10-9](text00021.html#ch10fig9) 所示。在这个部分，点击并拖动 `saveTapped:` 旁边的圆圈到 Add
    a Birthday 视图控制器中的保存按钮以建立连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7338
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7339
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的 “Received Actions” 部分列出了 IBActions。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7340
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用。当你点击保存按钮时，应该会在调试控制台中显示消息 "The save button was tapped."。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7342
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，从 `firstNameTextField` 和 `lastNameTextField` 中获取用户输入的名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7343
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField` 类有一个可选的字符串属性叫做 `text`。这个 `text` 属性的值就是用户在文本框中输入的内容，因此你可以使用它在
    `saveTapped(_:)` 方法中获取用户的输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7344
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE938]'
  id: totrans-7345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE938]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7346
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`（如果存在的话，即用户输入了值），否则设置为一个空字符串
    `""`。你可以使用你在 [第 5 章](text00015.html#ch05) 中学到的空值合并运算符（??）来实现这一点。这里我们使用常量而非变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7347
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 执行相同的操作。获取 `firstName` 和 `lastName` 的值后，打印它们到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7348
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用并观察会发生什么。尝试在文本框为空时点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE939]'
  id: totrans-7349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE939]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7350
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它了。接下来我们将重点关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7351
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7352
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会改变，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7353
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7354
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE940]'
  id: totrans-7355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE940]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7356
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似下面的输出：
- en: '[PRE941]'
  id: totrans-7357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE941]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7358
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据是我们创建 Birthday 所需的！你会注意到在调试控制台中显示的日期格式很奇怪，其中还包括时间和
    +0000 的时区偏移。暂时不必太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不包含时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7359
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7360
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器来创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7361
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替换它们。然后，将以下几行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7362
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE942]'
  id: totrans-7363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE942]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7364
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建一个新的 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的 print 语句一样，但这次你得到的是来自
    newBirthday 实例的值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台中看到类似下面的输出：
- en: '[PRE943]'
  id: totrans-7365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE943]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7366
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，点击保存按钮只会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7368
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加 Birthday，添加生日的界面应该消失。我们来实现这个功能，通过向我们的类中添加一个 cancelTapped(_:)
    方法，这个方法将调用一个内建的 UIViewController 方法叫做 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7369
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE944]'
  id: totrans-7370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE944]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7371
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` 函数➊接受两个参数。`animated` 参数用于控制关闭屏幕时的动画效果。传入 `true`，用户可以看到“添加生日”界面滑出屏幕。它看起来就像一个专业的应用！第二个参数是一个可选的闭包，称为
    `completion`。*闭包*是一个可以传递给函数的代码块。如果你希望在视图控制器关闭后执行某些代码，可以使用 `completion` 闭包。因为这里不需要执行任何操作，你可以传入
    `nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-7372
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7373
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 `cancelTapped(_:)` 方法连接到“取消”按钮。你可以像连接 `saveTapped(_:)` 方法到“保存”按钮一样操作。前往
    *Main.storyboard* 并打开“添加生日”视图控制器的连接对话框。点击并拖动 `cancelTapped(_:)` 方法列表到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7374
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入“添加生日”界面，然后点击**取消**。你应该看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7376
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 `firstName`、`lastName`
    和 `birthdate` 属性的生日对象。现在你可以保存生日，但是保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日列表视图控制器中显示你保存的生日。
- en: Next, you’ll write some code so that you can save a Birthday and cancel adding
    a Birthday from this view controller using the buttons you made in [Chapter 9](text00020.html#ch09)
    .
  id: totrans-7377
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要编写一些代码，使用你在[第9章](text00020.html#ch09)中制作的按钮，从此视图控制器中保存生日或取消添加生日。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7379
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现“保存”按钮！当用户点击“保存”时，应用应该根据输入的信息创建一个生日对象，然后保存用户输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7380
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7381
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个 `saveTapped(_:)` 方法，每次用户点击“保存”按钮时都会调用这个方法。在 `AddBirthdayViewController`
    中的 `viewDidLoad()` 方法之后，添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7382
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE945]'
  id: totrans-7383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE945]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7384
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存按钮时运行。编写
    IBAction 方法时，应该始终包含一个参数，表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称是 `sender` ➋ ，但你可以随意命名此参数。在这个例子中，我们希望每当用户点击保存按钮时调用
    `saveTapped(_:)` 方法，而保存按钮是一个 UIBarButtonItem。所以我们指定 `sender` 的类型为 UIBarButtonItem
    ➌ 。在 ➍ 处的 `print(_:)` 方法帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7385
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `saveTapped(_:)` 连接到保存按钮，就像将 IBOutlet 连接到故事板元素一样。返回你的 *Main.storyboard* 文件。按住
    CONTROL 键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分，从
    `saveTapped:` 旁边的圆圈拖动到“添加生日”视图控制器中的保存按钮以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7386
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7387
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 列在连接对话框底部的“接收的动作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7388
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击“保存”按钮时，调试控制台应该会显示消息：“保存按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7389
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7390
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `saveTapped(_:)` 方法中添加代码，以便在用户输入名字和姓氏后，从 `firstNameTextField` 和 `lastNameTextField`
    中获取它们。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7391
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 类型属性 `text`。这个 `text` 属性的值是用户在文本框中输入的内容，因此你可以在 `saveTapped(_:)`
    方法中使用它获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7392
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE946]'
  id: totrans-7393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE946]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7394
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName`，并将其值设置为 `firstNameTextField.text`，如果它存在（即用户输入了一个值），否则设置为空字符串
    ""。你可以使用你在[第 5 章](text00015.html#ch05)中学到的“空合并运算符（??）”来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7395
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 做相同的事情。在你获取到 `firstName` 和 `lastName` 的值后，将它们打印到控制台，以便在运行应用程序时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7396
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本字段中不输入任何内容，点击“保存”按钮，然后输入一个名字和姓氏后再试一次。你应该会看到类似于下面的输出：
- en: '[PRE947]'
  id: totrans-7397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE947]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7398
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷！现在你可以在应用程序中输入名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7399
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7400
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由日期选择器显示的日期。对于birthdatePicker来说，这个属性就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7401
  prefs: []
  type: TYPE_NORMAL
  zh: 在saveTapped(_:)方法中添加以下几行代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7402
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE948]'
  id: totrans-7403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE948]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7404
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE949]'
  id: totrans-7405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE949]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7406
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日记录所必需的！你会注意到，调试控制台中显示的日期格式很奇怪，其中包括时间和+0000时区偏移。现在不必过于担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不显示时间的情况下展示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7407
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日记录**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7408
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入信息了，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日记录。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7409
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用测试新Birthday实例的print语句替代它们。然后，在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7410
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE950]'
  id: totrans-7411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE950]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7412
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday之后，在➋处，你使用点语法将其属性输出到调试控制台。打印的输出与之前的print语句相同，但这次你是从newBirthday实例中获取的值。运行应用程序，输入生日并点击“保存”看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE951]'
  id: totrans-7413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE951]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7414
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日记录。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7416
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日记录，添加生日界面应该消失。让我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内建的UIViewController方法——dismiss(animated:completion:)。这个方法的作用就是它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7417
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE952]'
  id: totrans-7418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE952]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7419
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就能看到
    Add a Birthday 屏幕从屏幕上滑下，效果就像一个专业的应用程序一样！第二个参数是一个可选的闭包，称为 completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器消失后运行某些代码，可以使用
    completion 闭包。由于这里不需要任何操作，你可以传入 nil。
- en: '![](Image00233.jpg)'
  id: totrans-7420
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7421
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到 Cancel 按钮。你可以用与将 saveTapped(_:) 方法连接到 Save 按钮完全相同的方式进行操作。前往
    *Main.storyboard* 并打开 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表拖动到 Cancel
    按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7422
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用程序，点击 **+** 进入添加生日界面，然后点击 **Cancel**。你应该能看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7424
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '**SAVING A BIRTHDAY**'
  id: totrans-7425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**保存生日**'
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7426
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现 Save 按钮！当用户点击 Save 时，应用程序应该根据输入的信息创建一个 Birthday 对象，并保存用户的输入。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7427
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7428
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个 saveTapped(_:) 方法开始，该方法会在用户每次点击 Save 按钮时调用。将以下代码添加到 AddBirthdayViewController
    中，紧跟在 viewDidLoad() 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7429
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE953]'
  id: totrans-7430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE953]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7431
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction ➊ 是一个关键字，将函数直接与视图控制器中的元素连接，并允许我们指定在用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个在用户点击
    Save 时运行的函数。编写 IBAction 方法时，应该始终包括一个参数，表示触发该方法的 UI 元素。通常，使用下划线来隐藏参数标签，并且参数名称是
    sender ➋，但你可以根据需要为此参数命名。在这种情况下，我们希望 saveTapped(_:) 方法在用户点击 Save（一个 UIBarButtonItem）时被调用。因此，我们指定
    sender 的类型为 UIBarButtonItem ➌。print(_:) 方法 ➍ 帮助我们在测试代码时查看 Save 按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7432
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接，就像将IBOutlet与故事板元素连接一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”行以打开连接对话框。在连接对话框的底部有一个叫做“接收操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在这个部分，从saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7433
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7434
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的接收操作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7435
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，应该在调试控制台中显示消息“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7436
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框中读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7437
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，以便在用户输入姓名后从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7438
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是输入框中输入的内容，所以你可以在saveTapped(_:)方法中使用它来获取用户输入的内容，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7439
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE954]'
  id: totrans-7440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE954]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7441
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在，即如果用户输入了值），或者设置为空字符串""。你可以使用nil合并运算符（??）来做到这一点，这在[第5章](text00015.html#ch05)中已经讲解过了。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7442
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做相同的操作。在检索到firstName和lastName的值后，将它们打印到控制台，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7443
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在没有输入任何文本的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似如下的输出：
- en: '[PRE955]'
  id: totrans-7444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE955]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7445
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以将名字输入到你的应用程序中，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7446
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7447
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，这就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7448
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7449
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE956]'
  id: totrans-7450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE956]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7451
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似如下的输出：
- en: '[PRE957]'
  id: totrans-7452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE957]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7453
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了一个 firstName，一个 lastName 和一个 birthdate ——这三项数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式有点奇怪，里面还包含了时间和
    +0000 的时区偏移。现在不需要过多担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式及如何不显示时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7454
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7455
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7456
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替代它们。然后将以下行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7457
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE958]'
  id: totrans-7458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE958]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7459
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个新的 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    常量。在创建了 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出结果与之前的 print 语句相同，不过这次你是从
    newBirthday 实例获取值。运行应用，输入生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE959]'
  id: totrans-7460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE959]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7461
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7463
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法就是它的名字所表示的功能 —— 它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7464
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE960]'
  id: totrans-7465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE960]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7466
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画效果关闭界面，传入 true，这样用户就能看到“添加生日”界面从屏幕上滑下来，效果看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是一段可以传递给函数的代码。如果在视图控制器关闭后有任何代码需要执行，可以使用这个 completion 闭包。因为在这里不需要做什么，你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7467
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7468
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以像将saveTapped(_:)方法连接到保存按钮一样，按照相同的方式进行操作。前往*Main.storyboard*，打开“添加生日”视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法条目到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7469
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击**+**进入“添加生日”屏幕，然后点击**取消**。你应该看到“添加生日”视图从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7471
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用的可视化界面。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的生日对象。现在你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日列表视图控制器中显示你的生日列表。
- en: Now to implement the Save button! When the user taps Save, the app should create
    a Birthday from the information that was entered and then save the user input.
  id: totrans-7472
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来实现保存按钮！当用户点击保存时，应用应该根据输入的信息创建一个生日对象，并保存用户输入的数据。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7473
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7474
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写一个saveTapped(_:)方法开始，该方法将在每次用户点击保存按钮时调用。在viewDidLoad()方法之后，向AddBirthdayViewController中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7475
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE961]'
  id: totrans-7476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE961]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7477
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 处是一个关键字，用来将一个函数直接连接到视图控制器中的元素，并允许我们指定用户对该元素采取行动时应执行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时执行。当你编写IBAction方法时，应该始终包含一个参数，表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名为sender
    ➋，但你可以根据需要命名这个参数。在这里，我们希望每次用户点击保存时调用saveTapped(_:)方法，它是一个UIBarButtonItem。因此，我们指定sender的类型为UIBarButtonItem
    ➌。print(_:)方法在 ➍ 处帮助我们在测试代码时看到保存按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7478
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)方法连接到保存按钮就像将IBOutlet连接到故事板元素一样。回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个叫做接收的动作的部分，如[图10-9](text00021.html#ch10fig9)所示。在这个部分，点击并拖动从saveTapped:旁边的圆圈到“添加生日”视图控制器中的保存按钮，以连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7479
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7480
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction列在连接对话框的底部，标注为接收的动作。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7481
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，消息"The save button was tapped." 应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7483
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，获取用户输入的firstName和lastName，方法是从firstNameTextField和lastNameTextField中提取数据。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7484
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，名为text。这个text属性包含文本框中输入的内容，因此您可以在saveTapped(_:)方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7485
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE962]'
  id: totrans-7486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE962]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7487
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，您创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或空字符串""。您可以使用在[第5章](text00015.html#ch05)中学到的空合并运算符(??)来实现这一点。这里我们使用常量而不是变量，因为我们不会更改用户输入的firstName和lastName值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7488
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同操作。获取firstName和lastName的值后，打印它们到控制台，这样您就可以在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7489
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序，看看会发生什么。尝试在文本框中不输入任何内容就点击保存按钮，然后在输入了firstName和lastName后再试一次。您应该会看到类似以下的输出：
- en: '[PRE963]'
  id: totrans-7490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE963]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7491
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在您可以在应用程序中输入名字，并在调试控制台中看到计算机输出的结果。接下来我们将重点关注如何输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7492
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7493
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker中获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个名为date的属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此您可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7494
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7495
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE964]'
  id: totrans-7496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE964]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7497
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。您应该会看到类似以下的输出：
- en: '[PRE965]'
  id: totrans-7498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE965]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7499
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三个数据是我们创建一个Birthday对象所需要的！您会注意到在调试控制台中显示的日期格式很奇怪，还包括了时间和+0000的时区偏移。暂时不用太担心这个问题，我们会在[第11章](text00022.html#ch11)讨论日期格式及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7500
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7501
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的firstName、lastName和birthdate输入，您可以使用这些信息通过Birthday类初始化器创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7502
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后，添加以下代码到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7503
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE966]'
  id: totrans-7504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE966]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7505
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate常量。在创建newBirthday后，➋处，你使用点符号将它的属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例获取值。运行应用，输入生日，点击保存，查看会发生什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE967]'
  id: totrans-7506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE967]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7507
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7508
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7509
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，"添加生日"界面应该消失。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，这个方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7510
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE968]'
  id: totrans-7511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE968]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7512
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 需要两个参数。animated 参数用于动画效果，关闭屏幕时使用此参数。传入true，这样用户就能看到“添加生日”界面从屏幕滑下。这看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码块。如果你想在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为在这里你不需要执行任何操作，所以可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7513
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7514
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与取消按钮连接。你可以像将saveTapped(_:)方法连接到保存按钮一样操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7515
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到“添加生日”界面滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7517
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，你学习了如何将书写的代码连接到应用的视觉界面。你还学习了如何使用输入文本框和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在“生日”表格视图控制器中显示你的生日列表。
- en: '**HOOKING UP THE SAVE BUTTON**'
  id: totrans-7518
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接保存按钮**'
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7519
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先编写一个 saveTapped(_:) 方法，这个方法会在每次用户点击“保存”按钮时被调用。将以下代码添加到 AddBirthdayViewController
    中，紧接着 viewDidLoad() 方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7520
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE969]'
  id: totrans-7521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE969]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7522
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户对该元素进行操作时应该执行的代码。在这种情况下，我们将添加一个函数，在用户点击“保存”时运行。当你编写一个
    IBAction 方法时，应该始终包括一个参数，表示触发该方法的 UI 元素。通常使用下划线来隐藏参数标签，参数名称是 sender ➋，但你可以根据需要为这个参数命名。在这里，我们希望每当用户点击保存时，调用
    saveTapped(_:) 方法，而保存是一个 UIBarButtonItem 。因此，我们指定 sender 的类型是 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到“保存”按钮是否被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7523
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 方法与“保存”按钮连接起来，就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的 *Main.storyboard*
    文件中，按住 CONTROL 键点击“添加生日”行以打开连接对话框。在连接对话框的底部，有一个名为“接收到的操作”的部分，如 [图 10-9](text00021.html#ch10fig9)
    所示。在该部分中，点击并拖动 saveTapped: 旁边的圆圈到“保存”按钮，连接它们。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7524
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7525
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：在连接对话框的底部列出了 IBActions，位于接收到的操作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7526
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试重新运行你的应用。当你点击“保存”按钮时，调试控制台中应该显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7527
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7528
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 saveTapped(_:) 方法中添加代码，获取用户输入后从 firstNameTextField 和 lastNameTextField 中提取出名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7529
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text 。该 text 属性的值是用户在文本框中输入的内容，因此你可以在 saveTapped(_:)
    中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7530
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE970]'
  id: totrans-7531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE970]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7532
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），否则设置为空字符串
    ""。你可以使用在 [第 5 章](text00015.html#ch05) 中学习过的空合并运算符 (??) 来实现这一点。我们在这里使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7533
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 lastName 也执行相同的操作，在 ➋ 处。当你获取到 firstName 和 lastName 的值后，打印它们到控制台，这样你可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7534
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本字段中不输入任何内容直接点击保存按钮，然后再输入名字和姓氏后再次尝试。你应该会看到类似以下的输出：
- en: '[PRE971]'
  id: totrans-7535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE971]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7536
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用程序中输入名字，并看到计算机在调试控制台中输出它。接下来，我们将专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7537
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7538
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker中获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker来说，它是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7539
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7540
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE972]'
  id: totrans-7541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE972]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7542
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE973]'
  id: totrans-7543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE973]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7544
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了firstName、lastName和birthdate——这三项数据正是创建Birthday所需要的！你会注意到调试控制台中显示的日期格式有点奇怪，还包括时间和+0000的时区偏移。目前不需要太担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7545
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7546
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7547
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用打印测试newBirthday实例的语句替换它们。然后将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7548
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE974]'
  id: totrans-7549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE974]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7550
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类初始化器创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋，你使用点符号输出它的属性到调试控制台。打印的输出与之前的print语句相同，但这次你是从newBirthday实例获取的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE975]'
  id: totrans-7551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE975]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7552
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7553
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7554
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，“添加生日”屏幕应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这个功能，该方法会调用一个内建的UIViewController方法dismiss(animated:completion:)。这个方法的作用正如它所描述的那样——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7555
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE976]'
  id: totrans-7556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE976]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7557
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于为关闭屏幕添加动画效果。传入true，这样用户就能看到“添加生日”界面从屏幕上滑下来，效果就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码块。completion闭包可以在视图控制器被关闭后执行任何你想执行的代码。因为这里没有需要执行的代码，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7558
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7559
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与“取消”按钮关联起来。你可以像将saveTapped(_:)方法与“保存”按钮关联一样来操作。在*Main.storyboard*中，打开添加生日视图控制器的连接对话框，从cancelTapped(_:)方法列表拖动到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7560
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日屏幕，再点击**取消**。你应该会看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7561
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7562
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建具有firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个生日表格视图控制器中显示你的生日列表。
- en: 'Let’s start by making a saveTapped(_:) method that is called every time the
    user taps the Save button. Add the following code to AddBirthdayViewController
    right after the viewDidLoad() method:'
  id: totrans-7563
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为saveTapped(_:)的方法，每次用户点击“保存”按钮时都会调用它。将以下代码添加到AddBirthdayViewController中，紧接在viewDidLoad()方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7564
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE977]'
  id: totrans-7565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE977]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7566
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction在➊处是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定用户对该元素执行操作时应运行的代码。在这种情况下，我们将添加一个在用户点击保存时执行的函数。当你编写一个IBAction方法时，应该始终包括一个参数，表示触发该方法的UI元素。通常使用下划线来隐藏参数标签，并且参数名称是sender
    ➋ ，但是你可以随意为该参数命名。在这个例子中，我们希望在用户点击保存时调用saveTapped(_:)方法，而保存按钮是一个UIBarButtonItem。因此，我们指定sender的类型是UIBarButtonItem
    ➌ 。在➍处的print(_:)方法帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7567
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)连接到保存按钮就像将IBOutlet连接到故事板元素一样。返回到你的*Main.storyboard*文件中。CONTROL
    -点击“Add a Birthday”行打开连接对话框。在连接对话框的底部，有一个叫做“Received Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分中，从saveTapped:旁边的圆圈点击并拖动到“Add
    a Birthday”视图控制器中的保存按钮，进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7568
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7569
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction列在连接对话框底部的“Received Actions”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7570
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用程序。当你点击保存按钮时，调试控制台中应该会显示消息“The save button was tapped.”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7571
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7572
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，当用户输入名字后，我们将从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7573
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是文本字段中输入的内容，因此你可以使用它在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7574
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE978]'
  id: totrans-7575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE978]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7576
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学习的nil合并运算符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7577
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。在你获取了firstName和lastName的值后，将它们打印到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7578
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在文本字段中不输入任何内容就点击保存按钮，然后在输入名字和姓氏后再试一次。你应该会看到类似于以下的输出：
- en: '[PRE979]'
  id: totrans-7579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE979]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7580
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用程序中输入名字，并在调试控制台中看到计算机输出结果。接下来，我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7581
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7582
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `birthdatePicker` 获取日期与从 `firstNameTextField` 或 `lastNameTextField` 获取文本一样简单。UIDatePicker
    类有一个 `date` 属性，这是当前由选择器显示的日期。对于 `birthdatePicker`，它是 `birthdatePicker.date`。当用户更改
    UIDatePicker 时，`date` 属性也会变化，因此你可以使用 `birthdayPicker.date` 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7583
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 `saveTapped(_:)` 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7584
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE980]'
  id: totrans-7585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE980]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7586
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该能看到类似以下的输出：
- en: '[PRE981]'
  id: totrans-7587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE981]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7588
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 `firstName`、`lastName` 和 `birthdate` ——这三个数据是我们创建 `Birthday` 所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和时区偏移
    +0000。现在不必太担心这个问题。我们将在[第 11 章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7589
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7590
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 `firstName`、`lastName` 和 `birthdate` 输入，你可以使用这些信息通过 Birthday
    类的初始化方法创建一个 `Birthday`。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7591
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `saveTapped(_:)` 方法中的打印语句，因为我们将用测试新实例 `newBirthday` 的打印语句替代它们。然后在 `saveTapped(_:)`
    方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7592
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE982]'
  id: totrans-7593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE982]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7594
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，使用 Birthday 类的初始化方法创建一个 `newBirthday` 实例，并传入 `firstName`、`lastName` 和
    `birthdate` 的常量。创建 `newBirthday` 后，在 ➋ 处，使用点语法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你从
    `newBirthday` 实例中获取值。运行应用，输入生日，然后点击保存，看看会发生什么。你应该能在调试控制台看到类似以下的输出：
- en: '[PRE983]'
  id: totrans-7595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE983]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7596
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个 `Birthday`。你将在[第 11 章](text00022.html#ch11)中学到如何在 Birthdays
    视图控制器中显示这个 `Birthday`。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7597
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7598
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，这意味着他们不再想添加生日，`Add a Birthday` 界面应该消失。我们通过向类中添加一个 `cancelTapped(_:)`
    方法来实现这一行为，该方法将调用一个内置的 `UIViewController` 方法 `dismiss(animated:completion:)`。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到你的
    `AddBirthdayViewController` 类中的 `saveTapped(_:)` 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7599
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE984]'
  id: totrans-7600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE984]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7601
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就能看到“添加生日”屏幕从屏幕上滑动消失。看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是一个可以传递给函数的代码块。如果在视图控制器被解除时需要运行任何代码，可以使用 completion 闭包。由于你这里不需要执行任何操作，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7602
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7603
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到取消按钮。你可以按照和将 saveTapped(_:) 方法连接到保存按钮完全相同的方式进行操作。打开
    *Main.storyboard*，并显示“添加生日”视图控制器的连接对话框。从 cancelTapped(_:) 方法列表点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7604
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用程序，点击 **+** 进入添加生日页面，再点击 **取消**。你应该能看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7605
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的知识**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7606
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用程序的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后你无法看到它们。在[第 11 章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你保存的生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7607
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE985]'
  id: totrans-7608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE985]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7609
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在 ➊ 是一个关键字，它将一个函数直接连接到视图控制器中的元素，并允许我们指定当用户在该元素上执行某个操作时应该运行的代码。在这个例子中，我们将添加一个函数，该函数会在用户点击保存时运行。当你编写一个
    IBAction 方法时，应该始终包括一个用于表示触发该方法的 UI 元素的参数。通常使用下划线来隐藏参数标签，参数名称为 sender ➋，但你可以根据需要命名该参数。在这个例子中，我们希望每当用户点击保存时，调用
    saveTapped(_:) 方法，这个保存按钮是一个 UIBarButtonItem。所以我们指定 sender 的类型为 UIBarButtonItem
    ➌。在 ➍ 处的 print(_:) 方法帮助我们在测试代码时看到是否已经点击了保存按钮。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7610
  prefs: []
  type: TYPE_NORMAL
  zh: 将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到 storyboard 元素一样。返回到你的*Main.storyboard*文件。按住
    CONTROL 键并点击“添加生日”行，打开连接对话框。在连接对话框的底部，有一个名为“接收的动作”（Received Actions）的部分，如[图 10-9](text00021.html#ch10fig9)所示。在该部分，从
    saveTapped:旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮，连接它们。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7611
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7612
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions在连接对话框底部的“接收的操作”下列出。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7613
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击“保存”按钮时，"The save button was tapped."的消息应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7614
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7615
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，用来在用户输入名字和姓氏后，从firstNameTextField和lastNameTextField中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7616
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性的值是输入到文本框中的内容，因此你可以在saveTapped(_:)方法中使用它来获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7617
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE986]'
  id: totrans-7618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE986]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7619
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值），否则设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7620
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的处理。在检索到firstName和lastName的值后，将它们打印到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7621
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序，看看会发生什么。尝试在文本框中没有输入任何内容的情况下点击“保存”按钮，然后再尝试在输入了名字和姓氏后点击保存。你应该看到类似以下的输出：
- en: '[PRE987]'
  id: totrans-7622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE987]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7623
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并在调试控制台中看到计算机输出它。接下来，我们将专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7624
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7625
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7626
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7627
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE988]'
  id: totrans-7628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE988]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7629
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE989]'
  id: totrans-7630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE989]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7631
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三个数据是我们创建Birthday所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包含了时间和+0000的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7632
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7633
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码已经能够访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7634
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用用于测试newBirthday实例的print语句来替代它们。然后在saveTapped(_:)方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7635
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE990]'
  id: totrans-7636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE990]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7637
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday之后，在➋处，你使用点符号输出它的属性到调试控制台。打印的输出与之前的print语句相同，不过这次你获得的是来自newBirthday实例的值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE991]'
  id: totrans-7638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE991]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7639
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个Birthday对象。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday对象。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7640
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7641
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加Birthday对象，Add a Birthday屏幕应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法将调用一个内建的UIViewController方法，叫做dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7642
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE992]'
  id: totrans-7643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE992]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7644
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于动画化关闭屏幕的效果。传入true，这样用户就能看到Add
    a Birthday屏幕从屏幕上滑动消失。它看起来就像一个专业的应用程序一样！第二个参数是一个可选闭包，叫做completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后运行一些代码，可以使用completion闭包。由于你不需要在这里做任何事情，可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7645
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7646
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法连接到取消按钮。你可以像将saveTapped(_:)方法连接到保存按钮一样，完成这个操作。打开*Main.storyboard*，并调出Add
    Birthday视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7647
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上操作后，运行应用程序，点击**+**进入Add a Birthday屏幕，然后点击**Cancel**。你应该会看到Add a Birthday屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7648
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7649
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含`firstName`、`lastName`和`birthdate`属性的生日对象。目前，你可以保存生日对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表格视图控制器中显示你的生日列表。
- en: '[PRE993]'
  id: totrans-7650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE993]'
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7651
  prefs: []
  type: TYPE_NORMAL
  zh: '`@IBAction` ➊是一个关键字，它将函数直接连接到视图控制器中的元素，并允许我们指定当用户对该元素进行操作时应运行的代码。在这个例子中，我们将添加一个函数，当用户点击保存时，它会运行。在编写`IBAction`方法时，你应该始终包含一个参数，表示触发该方法的UI元素。通常，使用下划线来隐藏参数标签，参数名是`sender`
    ➋，但你可以根据需要给这个参数命名。在这种情况下，我们希望在用户点击保存按钮时调用`saveTapped(_:)`方法，该按钮是一个`UIBarButtonItem`。因此，我们指定`sender`的类型是`UIBarButtonItem`
    ➌。`print(_:)`方法 ➍帮助我们在测试代码时看到保存按钮是否已被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7652
  prefs: []
  type: TYPE_NORMAL
  zh: 将`saveTapped(_:)`连接到保存按钮就像将`IBOutlet`连接到故事板元素一样。返回到你的*Main.storyboard*文件。按住CONTROL键并点击“添加生日”行以打开连接对话框。在连接对话框的底部是一个名为“接收的操作”部分，如[图
    10-9](text00021.html#ch10fig9)所示。在该部分中，从`saveTapped:`旁边的圆圈点击并拖动到“添加生日”视图控制器中的保存按钮进行连接。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7653
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7654
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9: IBActions在连接对话框的底部列出，位于“接收的操作”部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7655
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台应该会显示消息 "保存按钮已被点击"。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7656
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7657
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`saveTapped(_:)`方法中添加代码，在用户输入后，从`firstNameTextField`和`lastNameTextField`中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7658
  prefs: []
  type: TYPE_NORMAL
  zh: '`UITextField`类有一个可选的`String`类型属性，名为`text`。这个`text`属性的值是用户在文本字段中输入的内容，因此你可以使用它来在`saveTapped(_:)`方法中获取用户的输入，代码如下：'
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7659
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE994]'
  id: totrans-7660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE994]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7661
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊，你创建了一个常量`firstName`，并将其值设置为`firstNameTextField.text`（如果存在的话，即用户输入了一个值），或者设置为空字符串`""`。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并运算符（`??`）来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7662
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处，对lastName执行相同的操作。获取firstName和lastName的值后，将它们打印到控制台，这样你在运行应用程序时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7663
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序，看看会发生什么。尝试在不输入任何内容的情况下点击“保存”按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似于以下的输出：
- en: '[PRE995]'
  id: totrans-7664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE995]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7665
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入名字，并在调试控制台中查看计算机的输出。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7666
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7667
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，表示当前由选择器显示的日期。对于birthdatePicker，这是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7668
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7669
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE996]'
  id: totrans-7670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE996]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7671
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE997]'
  id: totrans-7672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE997]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7673
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三个数据点是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和+0000的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7674
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7675
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你的代码可以访问用户提供的firstName、lastName和birthdate输入，你就可以使用这些信息，通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7676
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用测试newBirthday实例的print语句来替代它们。然后，将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7677
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE998]'
  id: totrans-7678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE998]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7679
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化器创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你是从newBirthday实例获取值。运行应用程序，输入生日，然后点击“保存”按钮，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE999]'
  id: totrans-7680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE999]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7681
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7682
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7683
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再希望添加生日，因此“添加生日”界面应当消失。我们通过向类中添加 cancelTapped(_:) 方法来实现这一行为，它将调用一个内置的
    UIViewController 方法，叫做 dismiss(animated:completion:) 。该方法的作用就是它的名字——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7684
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1000]'
  id: totrans-7685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1000]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7686
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭界面添加动画效果。传入 true，这样用户可以看到“添加生日”界面从屏幕上滑下。看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是可以传入函数的一段代码。如果在视图控制器关闭后有任何代码需要执行，可以使用这个 completion 闭包。因为这里不需要执行任何操作，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7687
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7688
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法连接到取消按钮。你可以用与将 saveTapped(_:) 方法连接到保存按钮相同的方式来实现这一点。进入
    *Main.storyboard* 并打开 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法条目到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7689
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该能看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7690
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7691
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的可视界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '@IBAction at ➊ is a keyword that connects a function directly to an element
    in a view controller and allows us to specify code that should run when the user
    takes an action on that element. In this case, we’re going to add a function that
    will run when the user taps Save. When you write an IBAction method, you should
    always include a parameter for the UI element that triggered the method. Typically,
    an underscore is used to hide the argument label and the parameter name is sender
    ➋ , but you can call this parameter whatever you want. In this case, we want the
    saveTapped(_:) method to be called whenever the user taps Save, which is a UIBarButtonItem
    . So we specify that the type of sender is UIBarButtonItem ➌ . The print(_:) method
    at ➍ helps us see when the Save button has been tapped as we’re testing the code.'
  id: totrans-7692
  prefs: []
  type: TYPE_NORMAL
  zh: '@IBAction 在➊处是一个关键字，用于将一个函数直接连接到视图控制器中的一个元素，并允许我们指定当用户在该元素上执行操作时应运行的代码。在这种情况下，我们将添加一个函数，当用户点击保存时会执行该函数。当编写一个
    IBAction 方法时，应该始终包括一个表示触发该方法的 UI 元素的参数。通常会使用下划线来隐藏参数标签，参数名为 sender ➋ ，但你可以随意命名这个参数。在此情况下，我们希望每当用户点击保存时，都会调用
    saveTapped(_:) 方法，它是一个 UIBarButtonItem。所以我们指定 sender 的类型是 UIBarButtonItem ➌ 。➔处的
    print(_:) 方法帮助我们在测试代码时看到保存按钮何时被点击。'
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7693
  prefs: []
  type: TYPE_NORMAL
  zh: '将 saveTapped(_:) 连接到保存按钮就像将 IBOutlet 连接到故事板元素一样。返回到你的 *Main.storyboard* 文件。按住
    CONTROL -点击“Add a Birthday”行以打开连接对话框。在连接对话框的底部有一个叫做“Received Actions”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动
    saveTapped: 旁边的圆圈到 Add a Birthday 视图控制器中的保存按钮，以建立连接。'
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7694
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7695
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions 列在连接对话框底部的 Received Actions 部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7696
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，消息 "The save button was tapped." 应该会显示在调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7697
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7698
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，在用户输入姓名后，从 firstNameTextField 和 lastNameTextField
    获取 firstName 和 lastName。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7699
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，叫做 text。这个 text 属性的值是用户在文本框中输入的内容，因此你可以在 saveTapped(_:)
    中使用它，获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7700
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1001]'
  id: totrans-7701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1001]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7702
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串
    ""。你可以使用 nil 合并运算符 (??) 来实现这一点，这个你在[第5章](text00015.html#ch05)中学过。我们这里使用常量而不是变量，因为我们不会更改用户输入的
    firstName 和 lastName 的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7703
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 执行相同的操作。当你获取到 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7704
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中什么都不输入时点击保存按钮，然后再输入姓名后再尝试一次。你应该会看到类似以下的输出：
- en: '[PRE1002]'
  id: totrans-7705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1002]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7706
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入姓名，并在调试控制台中查看计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7707
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7708
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前显示的日期。对于 birthdatePicker 来说，这就是 birthdatePicker.date。当用户更改 UIDatePicker
    时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7709
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7710
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1003]'
  id: totrans-7711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1003]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7712
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用并查看结果。你应该会看到类似以下的输出：
- en: '[PRE1004]'
  id: totrans-7713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1004]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7714
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了一个 firstName 、一个 lastName 和一个 birthdate ——这三项数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，它还包括了时间和
    +0000 的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7715
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7716
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName 、lastName 和 birthdate 输入数据，你可以使用这些信息通过 Birthday 类的初始化器来创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7717
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句来替换它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7718
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1005]'
  id: totrans-7719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1005]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7720
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入 firstName 、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点表示法将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你获得的是来自
    newBirthday 实例的值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似下面的输出：
- en: '[PRE1006]'
  id: totrans-7721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1006]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7722
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只是创建了一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7723
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7724
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法会调用一个内建的
    UIViewController 方法，名为 dismiss(animated:completion:) 。这个方法做的就是它名字所说的事情——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7725
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1007]'
  id: totrans-7726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1007]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7727
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true 以便用户能够看到添加生日界面从屏幕上滑下的效果。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为
    completion 。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后运行一些代码，可以使用这个 completion 闭包。因为你这里不需要做任何事情，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7728
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7729
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接起来。你可以像将saveTapped(_:)方法连接到保存按钮一样来做这件事。前往*Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7730
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该看到添加生日的界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7731
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7732
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日列表视图控制器中显示你的生日列表。
- en: 'Hooking up saveTapped(_:) to the Save button is like hooking up an IBOutlet
    to a storyboard element. Go back to your *Main.storyboard* file. CONTROL -click
    the Add a Birthday line to open a connection dialog. At the bottom of the connection
    dialog is a section called Received Actions, as shown in [Figure 10-9](text00021.html#ch10fig9)
    . In that section, click and drag from the circle next to saveTapped: to the Save
    button in the Add a Birthday view controller to connect them.'
  id: totrans-7733
  prefs: []
  type: TYPE_NORMAL
  zh: 将saveTapped(_:)与保存按钮连接就像将IBOutlet与storyboard元素连接一样。返回到你的*Main.storyboard*文件。按住CONTROL键点击“添加生日”这一行以打开连接对话框。在连接对话框的底部有一个名为“接收操作”的部分，如[图10-9](text00021.html#ch10fig9)所示。在该部分，点击并拖动saveTapped旁边的圆圈到“添加生日”视图控制器中的保存按钮，以将它们连接起来。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7734
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7735
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框底部的接收操作下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7736
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行你的应用。当你点击保存按钮时，调试控制台应该显示消息“保存按钮已被点击”。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7737
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7738
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法添加代码，当用户输入名字和姓氏后，它将从firstNameTextField和lastNameTextField中获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7739
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性text。这个text属性的值就是用户在文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7740
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1008]'
  id: totrans-7741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1008]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7742
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即如果用户输入了值），否则设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的空合并运算符(??)来实现这一点。我们在这里使用常量而不是变量，因为用户输入的名字和姓氏的值不会改变。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7743
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋处对lastName做同样的操作。在获取firstName和lastName的值后，打印它们到控制台，这样在运行你的应用时你就可以看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7744
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框中不输入任何内容时点击保存按钮，然后在输入名字和姓氏后再试一次。你应该看到类似于下面的输出：
- en: '[PRE1009]'
  id: totrans-7745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1009]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7746
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以将名字输入到应用中，并在调试控制台中看到它的输出。接下来，让我们专注于获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7747
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7748
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker中获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，这是当前选择器显示的日期。对于birthdatePicker，它就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7749
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的saveTapped(_:)方法中添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7750
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1010]'
  id: totrans-7751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1010]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7752
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE1011]'
  id: totrans-7753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1011]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7754
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三个数据足以创建一个生日！你会注意到，在调试控制台中显示的日期格式很奇怪，还包含了时间和+0000的时区偏移。暂时不必太担心这个。我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何不带时间显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7755
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7756
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7757
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用print语句来测试newBirthday实例来替换它们。然后将以下几行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7758
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1012]'
  id: totrans-7759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1012]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7760
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。在创建newBirthday后，在➋处，你使用点符号将它的属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用，输入生日，然后点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE1013]'
  id: totrans-7761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1013]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7762
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅仅是创建了一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7763
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7764
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的页面应该消失。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，它会调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中的saveTapped(_:)方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7765
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1014]'
  id: totrans-7766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1014]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7767
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制关闭屏幕时的动画效果。传入 true，这样用户可以看到添加生日页面滑下屏幕，效果就像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为
    completion。*闭包*是一个可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。由于你不需要在这里执行任何操作，因此可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7768
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7769
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到 Cancel 按钮。你可以像将 saveTapped(_:) 方法连接到 Save 按钮一样进行操作。打开
    *Main.storyboard*，并为添加生日视图控制器调出连接对话框。点击并拖动 cancelTapped(_:) 方法到 Cancel 按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7770
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用程序，点击 **+** 进入添加生日页面，然后点击 **Cancel**。你应该看到添加生日的页面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7771
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7772
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表格视图控制器中显示你的生日列表。
- en: '![](Image00231.jpg)![](Image00232.jpg)'
  id: totrans-7773
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00231.jpg)![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7774
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 10-9：IBActions 在连接对话框的底部列出，位于“接收的操作”下。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7775
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用程序。当你点击 Save 按钮时，调试控制台中应该显示“Save 按钮已被点击”的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7776
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7777
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 saveTapped(_:) 方法中添加代码，以便在用户输入名字和姓氏后，从 firstNameTextField 和 lastNameTextField
    获取这些值。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7778
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。这个 text 属性的值是用户在文本字段中输入的内容，因此你可以在 saveTapped(_:)
    中使用以下代码来获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7779
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1015]'
  id: totrans-7780
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1015]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7781
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值）或者为空字符串
    ""。你可以使用在[第5章](text00015.html#ch05)中学习的空合并操作符（??）来实现这一点。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7782
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 lastName 做同样的操作。在你获取到 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7783
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在文本框未输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似于以下的输出：
- en: '[PRE1016]'
  id: totrans-7784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1016]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7785
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并看到计算机将其输出到你的调试控制台。接下来让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7786
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7787
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前由日期选择器显示的日期。对于 birthdatePicker，这个属性就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7788
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7789
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1017]'
  id: totrans-7790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1017]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7791
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1018]'
  id: totrans-7792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1018]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7793
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了 firstName、lastName 和 birthdate ——这三项数据足以创建一个 Birthday！你会注意到，在调试控制台中显示的日期格式有点奇怪，它还包括时间和时区偏移
    +0000。暂时不用太担心这个问题。我们将在 [第11章](text00022.html#ch11) 中讨论日期格式以及如何不显示时间来展示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7794
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7795
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7796
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用测试 newBirthday 实例的 print 语句替代它们。然后将以下代码行添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7797
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1019]'
  id: totrans-7798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1019]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7799
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。在创建 newBirthday 后，在 ➋ 处，你通过点表示法将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，不过这次你是从
    newBirthday 实例获取值。运行应用，输入生日并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE1020]'
  id: totrans-7800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1020]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7801
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个 Birthday 实例。你将在 [第11章](text00022.html#ch11) 学到如何在 Birthdays
    视图控制器中显示这个 Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7802
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7803
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。我们来实现这个功能，通过在类中添加一个cancelTapped(_:)方法，该方法将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的功能正如它的名字所示——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7804
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1021]'
  id: totrans-7805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1021]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7806
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于控制关闭屏幕时的动画效果。传入true，这样用户就可以看到“添加生日”屏幕从屏幕上滑下，看起来就像一个专业的应用程序一样！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递到函数中的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为这里不需要任何操作，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7807
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7808
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接起来。你可以和将saveTapped(_:)方法与保存按钮连接的方式完全相同。在*Main.storyboard*中打开Add
    Birthday视图控制器的连接对话框，然后点击并拖动cancelTapped(_:)方法到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7809
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用程序，点击**+**进入添加生日屏幕，再点击**取消**。你应该会看到“添加生日”屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7810
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7811
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器，创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在你可以保存Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthday的表视图控制器中显示你的生日列表。
- en: '![](Image00232.jpg)'
  id: totrans-7812
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00232.jpg)'
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7813
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBActions列在连接对话框的底部，标记为接收到的动作（Received Actions）。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7814
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行应用程序。当你点击保存按钮时，调试控制台应显示消息：“保存按钮已被点击。”
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7815
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7816
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入名字后，从firstNameTextField和lastNameTextField中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7817
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性，叫做text。这个text属性的值是用户在文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它来获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7818
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1022]'
  id: totrans-7819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1022]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7820
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果它存在的话，即如果用户输入了值），否则设置为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空合并操作符(??
    )来实现这一点。我们这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7821
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对lastName做同样的操作。获取firstName和lastName的值后，将它们打印到控制台中，以便在运行应用程序时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7822
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似以下的输出：
- en: '[PRE1023]'
  id: totrans-7823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1023]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7824
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用程序中输入一个名字，并在调试控制台中看到计算机输出它。接下来，我们集中在获取日期的输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7825
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7826
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7827
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7828
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1024]'
  id: totrans-7829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1024]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7830
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似于以下输出的内容：
- en: '[PRE1025]'
  id: totrans-7831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1025]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7832
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三项数据是我们创建生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包含时间和+0000的时区偏移。现在不必过于担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何在不显示时间的情况下展示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7833
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7834
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入了，你可以使用这些信息通过Birthday类的初始化器来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7835
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除打印语句，因为我们将用打印语句替换它们，来测试新的newBirthday实例。然后将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7836
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1026]'
  id: totrans-7837
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1026]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7838
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用Birthday类的初始化器创建一个新的newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday之后，在
    ➋ 处，你使用点语法将它的属性输出到调试控制台。打印的输出将和之前的打印语句一样，但这次你得到的是来自newBirthday实例的值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会看到类似以下的调试控制台输出：
- en: '[PRE1027]'
  id: totrans-7839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1027]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7840
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7841
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7842
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再希望添加生日，添加生日的界面应该消失。让我们通过向我们的类中添加一个cancelTapped(_:)方法来实现这个功能，该方法将调用一个内置的UIViewController方法——dismiss(animated:completion:)。这个方法做的正是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7843
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1028]'
  id: totrans-7844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1028]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7845
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于控制是否为关闭界面添加动画。传入true，这样用户就能看到添加生日界面从屏幕上滑下，呈现出像专业应用一样的效果！第二个参数是一个可选闭包，叫做completion。*闭包*是一段可以传入函数的代码块。completion闭包可以在视图控制器被关闭后执行任何需要运行的代码。由于你在这里不需要做任何事，你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7846
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7847
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法与取消按钮连接起来。你可以用与将saveTapped(_:)方法与保存按钮连接的相同方式来进行连接。前往*Main.storyboard*并打开Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表项到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7848
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7849
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7850
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。目前你可以保存生日，但是保存后你无法看到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表格视图控制器中显示生日列表。
- en: '*Figure 10-9: IBActions are listed at the bottom of the connection dialog under
    Received Actions.*'
  id: totrans-7851
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10-9：IBAction会在连接对话框的底部列出，位于接收的动作部分。*'
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7852
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试再次运行你的应用。当你点击保存按钮时，调试控制台应该会显示"Save button was tapped."的消息。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7853
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7854
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，以便在用户输入完姓名后，从firstNameTextField和lastNameTextField获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7855
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性叫做text。这个text属性的值就是用户在文本框中输入的内容，因此你可以在saveTapped(_:)方法中使用它，通过以下代码来获取用户的输入：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7856
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1029]'
  id: totrans-7857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1029]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7858
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果它存在，即用户输入了值），如果没有则设置为空字符串
    ""。你可以使用 nil 合并操作符 (??) 来完成这项操作，这个操作符你在[第5章](text00015.html#ch05)中学过。我们在这里使用常量而非变量，因为我们不会改变用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7859
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 ➋ 处的 lastName 做相同的操作。在你获取了 firstName 和 lastName 的值后，将它们打印到控制台，这样你在运行应用时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7860
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在没有输入任何内容的情况下点击保存按钮，然后再试试输入了名字和姓氏之后的情况。你应该会看到类似以下的输出：
- en: '[PRE1030]'
  id: totrans-7861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1030]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7862
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出了这个名字。接下来，让我们专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7863
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7864
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前日期选择器中显示的日期。对于 birthdatePicker，这个属性就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，所以你可以使用 birthdayPicker.date 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7865
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7866
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1031]'
  id: totrans-7867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1031]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7868
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似下面的输出：
- en: '[PRE1032]'
  id: totrans-7869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1032]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7870
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这三项数据是我们创建 Birthday 所需的！你会注意到调试控制台中显示的日期格式有些奇怪，包含了时间和时区偏移
    +0000。现在不必过于担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7871
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7872
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以利用这些信息使用 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7873
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的打印语句，因为我们将用打印语句替换它们，测试新的 birthday 实例。然后将以下几行添加到 saveTapped(_:)
    方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7874
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1033]'
  id: totrans-7875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1033]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7876
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。在创建 newBirthday 后，在 ➋ 处，你使用点表示法将它的属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你得到的是来自
    newBirthday 实例的值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该能在调试控制台中看到类似下面的输出：
- en: '[PRE1034]'
  id: totrans-7877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1034]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7878
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学到如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7879
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7880
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，"添加生日"界面应该关闭。让我们通过在类中添加一个 cancelTapped(_:) 方法来实现这个行为，这个方法会调用一个名为
    dismiss(animated:completion:) 的内置 UIViewController 方法。这个方法正如其名——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7881
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1035]'
  id: totrans-7882
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1035]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7883
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭屏幕添加动画效果。传入 true，这样用户就能看到“添加生日”界面从屏幕上滑下。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做
    completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行某些代码，可以使用 completion 闭包。因为在这里你不需要做任何事情，所以可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7884
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7885
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样来做这件事。进入 *Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动
    cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7886
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用程序，点击**+**进入添加生日界面，然后点击**取消**。你应该能看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7887
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7888
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在“生日”表视图控制器中显示你的生日列表。
- en: Try running your app again. When you tap the Save button, the message "The save
    button was tapped." should be displayed in your debug console.
  id: totrans-7889
  prefs: []
  type: TYPE_NORMAL
  zh: 再次尝试运行你的应用程序。当你点击保存按钮时，消息 "The save button was tapped." 应该会显示在你的调试控制台中。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7890
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本框读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7891
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向saveTapped(_:)方法中添加代码，用于在用户输入名字和姓氏后从firstNameTextField和lastNameTextField中获取这些信息。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7892
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，名为text。这个text属性的值是用户在文本框中输入的内容，因此您可以在saveTapped(_:)方法中使用它来获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7893
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1036]'
  id: totrans-7894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1036]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7895
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，您创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。您可以使用nil合并运算符(??)来实现这一点，这在[第5章](text00015.html#ch05)中讲解过。我们使用常量而不是变量，因为我们不会改变用户输入的名字和姓氏。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7896
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同的操作。在获取firstName和lastName的值后，将它们打印到控制台，这样您在运行应用程序时就能看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7897
  prefs: []
  type: TYPE_NORMAL
  zh: 运行您的应用程序，看看会发生什么。尝试在文本框中什么都不输入的情况下点击保存按钮，然后再次尝试输入名字和姓氏后再点击保存。您应该会看到类似下面的输出：
- en: '[PRE1037]'
  id: totrans-7898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1037]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7899
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在您可以在应用程序中输入一个名字，并在调试控制台中查看计算机输出。接下来，我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7900
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7901
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前选择器上显示的日期。对于birthdatePicker来说，这个属性是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此您可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7902
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到您的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7903
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1038]'
  id: totrans-7904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1038]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7905
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。您应该会看到类似以下的输出：
- en: '[PRE1039]'
  id: totrans-7906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1039]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7907
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了firstName、lastName和birthdate——这三个数据是我们创建生日所需的！您会注意到，在调试控制台中显示的日期格式很奇怪，还包括时间和+0000时区偏移。暂时不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7908
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7909
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的firstName、lastName和birthdate输入，您可以使用这些信息通过Birthday类的初始化器来创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7910
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后，向saveTapped(_:)方法添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7911
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1040]'
  id: totrans-7912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1040]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7913
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化方法创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。在创建newBirthday之后，在➋，你通过点表示法将它的属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从newBirthday实例中获取的值。运行应用，输入一个生日，点击保存，看看会发生什么。你应该能在调试控制台看到类似如下的输出：
- en: '[PRE1041]'
  id: totrans-7914
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1041]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7915
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日对象。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7916
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7917
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这个行为，它将调用一个内建的UIViewController方法，叫做dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法之后，添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7918
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1042]'
  id: totrans-7919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1042]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7920
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:)➊接受两个参数。animated参数用于动画效果，控制关闭屏幕的动画。传入true，以便用户能看到添加生日屏幕滑出屏幕，效果看起来就像一个专业的应用！第二个参数是一个可选闭包，叫做completion。*闭包*是可以传递给函数的一段代码块。completion闭包可以在视图控制器被关闭后执行任何代码。由于这里不需要执行任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-7921
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7922
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接。你可以通过与连接saveTapped(_:)方法到保存按钮的方式来完成这一操作。打开*Main.storyboard*，并为添加生日的视图控制器调出连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7923
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该能看到添加生日屏幕从屏幕上方滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7924
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7925
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器创建具有firstName、lastName和birthdate属性的生日对象。现在你可以保存生日对象，但保存后你无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '**READING TEXT FROM A TEXT FIELD**'
  id: totrans-7926
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从文本字段读取文本**'
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7927
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在saveTapped(_:)方法中添加代码，在用户输入firstName和lastName后，从firstNameTextField和lastNameTextField中提取出这些信息。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7928
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String属性，叫做text。这个text属性的值是用户在文本字段中输入的内容，所以你可以使用它在saveTapped(_:)方法中获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7929
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1043]'
  id: totrans-7930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1043]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7931
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果用户输入了值的话），或者为空字符串""。你可以使用你在[第5章](text00015.html#ch05)中学到的空值合并操作符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的firstName和lastName的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7932
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName进行相同的操作。在你获取到firstName和lastName的值后，将它们打印到控制台，这样你就可以在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7933
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在不输入任何内容的情况下点击保存按钮，然后在输入了firstName和lastName后再试一次。你应该看到类似以下的输出：
- en: '[PRE1044]'
  id: totrans-7934
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1044]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7935
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并在调试控制台中看到计算机输出的结果。接下来，我们来集中处理日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7936
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7937
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前由选择器显示的日期。对于birthdatePicker来说，这个属性就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，因此你可以使用birthdayPicker.date来访问用户输入的生日日期。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7938
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7939
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1045]'
  id: totrans-7940
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1045]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7941
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE1046]'
  id: totrans-7942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1046]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7943
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了firstName、lastName和birthdate——这三个数据项是我们创建生日所需要的！你会注意到，在调试控制台中显示的日期格式很奇怪，其中还包括时间和+0000的时区偏移。现在不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7944
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7945
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7946
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后，将以下几行代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7947
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1047]'
  id: totrans-7948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1047]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7949
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用`Birthday`类的初始化器创建一个新的`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`的常量。创建完`newBirthday`之后，在➋，你使用点符号输出它的属性到调试控制台。打印输出将与之前的`print`语句一样，但这次你得到的是来自`newBirthday`实例的值。运行应用，输入一个生日并点击“保存”，看看会发生什么。你应该会在调试控制台看到类似以下内容的输出：
- en: '[PRE1048]'
  id: totrans-7950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1048]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7951
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7952
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7953
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，“添加生日”界面应该消失。让我们通过向类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法会调用一个内置的UIViewController方法`dismiss(animated:completion:)`。这个方法做的正是它说的——它会关闭当前显示的视图控制器。将以下方法添加到`AddBirthdayViewController`类的`saveTapped(_:)`方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7954
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1049]'
  id: totrans-7955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1049]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7956
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数➊有两个参数。`animated`参数用于动画地关闭屏幕。传入`true`，这样用户可以看到“添加生日”界面从屏幕上滑下。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为`completion`。一个*闭包*是一个可以传递给函数的代码块。如果你想在视图控制器被关闭后运行某些代码，可以使用`completion`闭包。因为你这里不需要做任何事情，所以可以直接传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-7957
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7958
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将`cancelTapped(_:)`方法与“取消”按钮连接。你可以通过与“保存”按钮连接`saveTapped(_:)`方法的方式，来实现这一连接。前往*Main.storyboard*，打开“添加生日”视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法列表到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7959
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击**+**进入“添加生日”界面，然后点击**取消**。你应该会看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7960
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7961
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建具有`firstName`、`lastName`和`birthdate`属性的`Birthday`对象。现在，你可以保存生日，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在“生日”表格视图控制器中显示你保存的生日列表。
- en: Let’s add code to the saveTapped(_:) method that will get the first and last
    names out of firstNameTextField and lastNameTextField after the user enters them.
  id: totrans-7962
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向`saveTapped(_:)`方法中添加代码，以便在用户输入名字后从`firstNameTextField`和`lastNameTextField`中获取名字和姓氏。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7963
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField 类有一个可选的 String 属性，名为 text。该 text 属性的值为文本框中输入的内容，因此你可以在 saveTapped(_:)
    方法中使用它来获取用户输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7964
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1050]'
  id: totrans-7965
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1050]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-7966
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 firstName，并将其值设置为 firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串
    ""。你可以使用之前在 [第5章](text00015.html#ch05) 中学到的空合并操作符 (?? ) 来实现这一点。我们这里使用常量而非变量，因为用户输入的
    firstName 和 lastName 的值不会发生变化。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-7967
  prefs: []
  type: TYPE_NORMAL
  zh: 然后对 ➋ 处的 lastName 执行相同的操作。获取 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-7968
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用查看发生了什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再尝试输入 firstName 和 lastName 后点击保存。你应该会看到类似这样的输出：
- en: '[PRE1051]'
  id: totrans-7969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1051]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-7970
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用中输入姓名，并在调试控制台中看到计算机输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-7971
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-7972
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期就像从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前显示的日期。对于 birthdatePicker 来说，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以通过 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-7973
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7974
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1052]'
  id: totrans-7975
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1052]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-7976
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1053]'
  id: totrans-7977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1053]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7978
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据正是创建一个 Birthday 所需的！你会注意到，调试控制台中显示的日期格式有些奇怪，包含了时间和
    +0000 的时区偏移。暂时不需要太担心这个问题，我们将在 [第11章](text00022.html#ch11) 中讨论日期格式及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-7979
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-7980
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以利用这些信息通过 Birthday 类的初始化器创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-7981
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除 print 语句，因为我们将用打印测试 newBirthday 实例的语句替代它们。然后将以下几行代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7982
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1054]'
  id: totrans-7983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1054]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-7984
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点语法将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你获取的是 newBirthday
    实例的值。运行应用，输入一个生日并点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE1055]'
  id: totrans-7985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1055]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-7986
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个 Birthday 对象。你将在[第11章](text00022.html#ch11)中学到如何在 Birthdays 视图控制器中显示这个生日对象。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-7987
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-7988
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日页面应该消失。让我们通过向我们的类中添加 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法正如它的名字所示——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类的 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7989
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1056]'
  id: totrans-7990
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1056]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-7991
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就能看到“添加生日”屏幕从屏幕上滑下，效果就像一个专业应用！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是一段可以传递到函数中的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。由于此处不需要执行任何操作，你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-7992
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-7993
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法连接到取消按钮。你可以通过与将 saveTapped(_:) 方法连接到保存按钮的方式完全相同来完成这一步。进入
    *Main.storyboard*，打开 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-7994
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击 **+** 进入添加生日页面，再点击 **取消**。你应该会看到“添加生日”视图从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-7995
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-7996
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码连接到应用的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个生日表格视图控制器中显示你保存的生日列表。
- en: 'The UITextField class has an optional String property called text . This text
    property has a value of whatever has been typed into the text field, so you can
    use it to get the user’s input in saveTapped(_:) with the following code:'
  id: totrans-7997
  prefs: []
  type: TYPE_NORMAL
  zh: UITextField类有一个可选的String类型属性text。这个text属性的值是文本框中输入的内容，因此你可以用它在saveTapped(_:)方法中获取用户的输入，代码如下：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-7998
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1057]'
  id: totrans-7999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1057]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-8000
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并操作符(??)。我们在这里使用常量而不是变量，因为我们不会更改用户输入的firstName和lastName值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-8001
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName做同样的处理。获取firstName和lastName的值后，将它们打印到控制台，以便你在运行应用时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-8002
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用，看看会发生什么。尝试在文本框中不输入任何内容就点击保存按钮，然后再输入firstName和lastName后再试一次。你应该看到类似以下的输出：
- en: '[PRE1058]'
  id: totrans-8003
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1058]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8004
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入名字，并在调试控制台看到计算机输出它。接下来我们来专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8005
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8006
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker，这是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会变化，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8007
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8008
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1059]'
  id: totrans-8009
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1059]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8010
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE1060]'
  id: totrans-8011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1060]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8012
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所需的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和+0000的时区偏移。现在不必太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8013
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8014
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8015
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除print语句，因为我们将用测试newBirthday实例的print语句来替代它们。然后将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8016
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1061]'
  id: totrans-8017
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1061]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8018
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类初始化器创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。在你创建newBirthday后，在➋，你使用点表示法将其属性输出到调试控制台。打印输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下内容的输出：
- en: '[PRE1062]'
  id: totrans-8019
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1062]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8020
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8021
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8022
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，Add a Birthday屏幕应该消失。让我们通过向我们的类添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个名为dismiss(animated:completion:)的内置UIViewController方法。该方法的作用正如其名——它会关闭当前显示的视图控制器。在你的AddBirthdayViewController类中，紧接着saveTapped(_:)方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8023
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1063]'
  id: totrans-8024
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1063]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8025
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:)➊接受两个参数。animated参数用于控制屏幕关闭时的动画效果。传入true，这样用户就能看到Add
    a Birthday屏幕从屏幕上滑下，看起来就像一个专业的应用程序！第二个参数是一个名为completion的可选闭包。*闭包*是可以传递给函数的代码块。completion闭包可以在视图控制器被关闭后运行某些代码。由于你不需要在这里执行任何操作，因此可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8026
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8027
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法与取消按钮连接起来。你可以和将saveTapped(_:)方法与保存按钮连接起来的方法完全一样。进入*Main.storyboard*，调出Add
    Birthday视图控制器的连接对话框，从cancelTapped(_:)方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8028
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入Add a Birthday屏幕，然后点击**Cancel**。你应该会看到Add a Birthday屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8029
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8030
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在你可以保存Birthday，但保存后你看不到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8031
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1064]'
  id: totrans-8032
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1064]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-8033
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你创建了一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值）或设置为空字符串""。你可以使用[第5章](text00015.html#ch05)中学到的nil合并操作符(??)来实现这一点。我们在这里使用常量而不是变量，因为我们不会更改用户输入的姓名。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-8034
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在➋处对lastName执行相同操作。获取firstName和lastName的值后，将它们打印到控制台，以便在运行应用程序时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-8035
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，查看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了姓和名后再试一次。你应该会看到类似下面的输出：
- en: '[PRE1065]'
  id: totrans-8036
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1065]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8037
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入姓名，并在调试控制台中看到计算机输出它。接下来，让我们集中精力处理日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8038
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8039
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，它是当前日期选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8040
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8041
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1066]'
  id: totrans-8042
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1066]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8043
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，查看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE1067]'
  id: totrans-8044
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1067]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8045
  prefs: []
  type: TYPE_NORMAL
  zh: 到这时，我们已经有了firstName、lastName和birthdate——创建一个Birthday所需的三项数据！你会注意到调试控制台中显示的日期格式有些奇怪，里面还包括时间和+0000的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8046
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8047
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息使用Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8048
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试新Birthday实例的print语句替代它们。然后将以下代码行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8049
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1068]'
  id: totrans-8050
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1068]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8051
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，使用Birthday类的初始化器创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。在创建newBirthday后，在➋处，使用点表示法将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日，并点击保存查看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1069]'
  id: totrans-8052
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1069]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8053
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8054
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8055
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这个行为，该方法会调用UIViewController的内置方法dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8056
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1070]'
  id: totrans-8057
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1070]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8058
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 有两个参数。animated参数用于动画效果，关闭屏幕时会进行动画处理。传入true，让用户看到“添加生日”屏幕滑动出屏幕，效果看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用completion闭包。因为这里不需要执行任何操作，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8059
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8060
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以通过与连接saveTapped(_:)方法到保存按钮的方式完全相同的方法来实现这一点。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8061
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用程序，点击**+**进入添加生日界面，再点击**取消**。你应该看到“添加生日”界面从屏幕上滑动并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8062
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8063
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建包含firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日列表视图控制器中显示保存的生日。
- en: '[PRE1071]'
  id: totrans-8064
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1071]'
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-8065
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊的位置，你首先创建一个常量firstName，并将其值设置为firstNameTextField.text（如果存在的话，即用户输入了值），或者设置为空字符串""。你可以使用在[第5章](text00015.html#ch05)中学到的nil合并运算符(??)来实现这一点。我们这里使用常量而非变量，因为用户输入的名字和姓氏不会发生变化。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-8066
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在➋的位置对lastName执行相同的操作。在获取firstName和lastName的值之后，将它们打印到控制台，以便在运行应用程序时查看。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-8067
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用，看看会发生什么。尝试在没有输入任何内容的文本框中点击保存按钮，然后再输入姓名后尝试一次。你应该会看到类似下面的输出：
- en: '[PRE1072]'
  id: totrans-8068
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1072]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8069
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8070
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8071
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField中获取文本一样简单。UIDatePicker类有一个date属性，表示当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会发生变化，因此你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8072
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8073
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1073]'
  id: totrans-8074
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1073]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8075
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1074]'
  id: totrans-8076
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1074]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8077
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了firstName、lastName和birthdate——这三项数据是创建Birthday所需的！你会注意到，在调试控制台中显示的日期格式很奇怪，里面还包括时间和时区偏移的+0000。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8078
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8079
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息使用Birthday类初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8080
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句替换它们。然后，将以下几行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8081
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1075]'
  id: totrans-8082
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1075]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8083
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，使用Birthday类初始化器创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。在创建了newBirthday之后，在➋处，使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这一次你是从newBirthday实例中获取值。运行应用，输入生日并点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE1076]'
  id: totrans-8084
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1076]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8085
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8086
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8087
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想要添加生日，添加生日的界面应该消失。让我们通过向我们的类中添加 `cancelTapped(_:)` 方法来实现这个行为，该方法将调用一个内置的
    UIViewController 方法，叫做 `dismiss(animated:completion:)`。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。请在
    `saveTapped(_:)` 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8088
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1077]'
  id: totrans-8089
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1077]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8090
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` ➊ 函数接受两个参数。`animated` 参数用于动画关闭界面。传入 `true`
    让用户看到添加生日界面从屏幕上滑下，看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做 `completion`。*闭包* 是可以传入函数中的一段代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用
    `completion` 闭包。因为这里没有任何代码需要执行，所以你可以直接传入 `nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-8091
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8092
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 `cancelTapped(_:)` 连接到取消按钮。你可以像将 `saveTapped(_:)` 方法连接到保存按钮一样，按相同的方式进行操作。前往
    *Main.storyboard* 并打开“添加生日”视图控制器的连接对话框。点击并拖动 `cancelTapped(_:)` 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8093
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，运行应用，点击 **+** 进入添加生日界面，再点击 **取消**。你应该看到添加生日的界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8094
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8095
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 `firstName`、`lastName`
    和 `birthdate` 属性的 Birthday 对象。目前你可以保存生日，但是保存之后看不到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表视图控制器中显示你的生日列表。
- en: At ➊ , you create a constant firstName and set its value to firstNameTextField.text
    if it exists (that is, if the user entered a value) or to the empty string ""
    . You can do this using the nil coalescing operator (?? ) that you learned about
    in [Chapter 5](text00015.html#ch05) . We’re using constants and not variables
    here because we won’t change the value of the first and last names the user enters.
  id: totrans-8096
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你创建了一个常量 `firstName` 并将其值设置为 `firstNameTextField.text`（如果存在的话，也就是说，如果用户输入了值），否则设置为一个空字符串
    ""。你可以使用空合并运算符（??）来做到这一点，这在[第5章](text00015.html#ch05)中已经讲解过了。我们在这里使用常量而不是变量，因为我们不会更改用户输入的名字和姓氏的值。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-8097
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 ➋ 处对 `lastName` 做同样的事情。在你获取了 `firstName` 和 `lastName` 的值之后，将它们打印到控制台，这样你就能在运行应用时看到它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-8098
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用程序看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后在输入了名字和姓氏后再试一次。你应该会看到类似于以下的输出：
- en: '[PRE1078]'
  id: totrans-8099
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1078]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8100
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！现在你可以在应用程序中输入一个名字，并在调试控制台中看到计算机的输出。接下来，我们来专注于输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8102
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期与从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前显示在选择器上的日期。对于 birthdatePicker ，这个属性是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会随之更改，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8103
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8104
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1079]'
  id: totrans-8105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1079]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1080]'
  id: totrans-8107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1080]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8108
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了 firstName 、 lastName 和 birthdate ——这三项数据是创建 Birthday 所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，还包括时间和
    +0000 的时区偏移。目前不必过于担心这些。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName 、 lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法来创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后将以下代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8112
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1081]'
  id: totrans-8113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1081]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入了 firstName 、 lastName 和 birthdate
    的常量。创建了 newBirthday 后，在 ➋ 处，你使用点表示法将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你获取的是来自
    newBirthday 实例的值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1082]'
  id: totrans-8115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1082]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8116
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，点击保存按钮只会创建一个 Birthday 。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8118
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们可以通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内建的
    UIViewController 方法，叫做 dismiss(animated:completion:)。这个方法的作用就是它的名字所表示的——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8119
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1083]'
  id: totrans-8120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1083]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8121
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画关闭屏幕。传入 true，用户将看到“添加生日”屏幕从屏幕滑下，看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做
    completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行某些代码，可以使用 completion 闭包。由于你在这里不需要执行任何操作，可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8122
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 与 Cancel 按钮连接起来。你可以像将 saveTapped(_:) 方法连接到 Save 按钮一样操作。前往
    *Main.storyboard* 并打开添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到 Cancel 按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8124
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上步骤后，运行应用，点击 **+** 进入添加生日界面，然后点击 **Cancel**。你应该会看到“添加生日”界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个生日列表表视图控制器中显示你的生日记录。
- en: Then do the same thing with lastName at ➋ . After you retrieve values for firstName
    and lastName , print them to the console so you can see them when you run your
    app.
  id: totrans-8127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 ➋ 处对 lastName 执行相同的操作。在你获取了 firstName 和 lastName 的值后，将它们打印到控制台，以便在运行应用时查看它们。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-8128
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。尝试在没有输入任何内容的情况下点击保存按钮，然后再输入一个名字和姓氏后尝试。你应该看到类似以下的输出：
- en: '[PRE1084]'
  id: totrans-8129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1084]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8130
  prefs: []
  type: TYPE_NORMAL
  zh: 太酷了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，我们聚焦于输出一个日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8132
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，表示当前由日期选择器显示的日期。对于 birthdatePicker，这是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8133
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8134
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1085]'
  id: totrans-8135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1085]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看发生了什么。你应该会看到类似于以下的输出：
- en: '[PRE1086]'
  id: totrans-8137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1086]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8138
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了firstName、lastName和birthdate——这三项数据足以创建一个生日对象！你会注意到，在调试控制台中显示的日期格式很奇怪，还包含了时间和+0000的时区偏移。现在不需要太担心这个，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以利用这些信息通过Birthday类的初始化方法创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8141
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句替代它们。然后将以下行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8142
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1087]'
  id: totrans-8143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1087]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate常量。创建newBirthday后，在
    ➋ 处，你使用点语法将它的属性输出到调试控制台。打印的输出将与之前的print语句一样，但这次你是从newBirthday实例中获取的值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE1088]'
  id: totrans-8145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1088]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只是创建了一个生日对象。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日对象。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8148
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，"添加生日"页面应该关闭。让我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，它将调用一个内置的UIViewController方法dismiss(animated:completion:)。这个方法的作用正如它的名字所示——它关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8149
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1089]'
  id: totrans-8150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1089]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8151
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊ 接受两个参数。animated参数用于动画关闭屏幕。传入true，这样用户就能看到“添加生日”页面从屏幕上滑下。看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用这个completion闭包。因为这里不需要任何操作，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8152
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8153
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以像将saveTapped(_:)方法连接到保存按钮一样来做这件事。打开*Main.storyboard*并调出Add
    Birthday视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8154
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该会看到“添加生日”滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的知识**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器创建具有firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存Birthday，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示生日列表。
- en: 'Run your app to see what happens. Try tapping the Save button without entering
    anything in the text fields and then try again after entering a first and last
    name. You should see output similar to this:'
  id: totrans-8157
  prefs: []
  type: TYPE_NORMAL
  zh: 运行你的应用，看看会发生什么。试着在不输入任何内容的情况下点击保存按钮，然后再输入名字和姓氏后重试。你应该会看到类似下面的输出：
- en: '[PRE1090]'
  id: totrans-8158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1090]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8159
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在应用中输入一个名字，查看计算机在调试控制台中输出它。接下来，我们集中精力让程序输出日期。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8160
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8161
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期和从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，它表示当前由选择器显示的日期。对于birthdatePicker来说，就是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会随之变化，所以你可以使用birthdayPicker.date来获取用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8162
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8163
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1091]'
  id: totrans-8164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1091]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE1092]'
  id: totrans-8166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1092]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8167
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，我们已经有了firstName、lastName和birthdate——这三项数据是创建生日所需的！你会注意到调试控制台中显示的日期格式有些奇怪，还包括时间和+0000的时区偏移。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化器创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用测试newBirthday实例的print语句来替换它们。然后将以下行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8171
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1093]'
  id: totrans-8172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1093]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8173
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点语法将其属性输出到调试控制台。打印输出将与之前的 print 语句相同，但这次你获取的是来自
    newBirthday 实例的值。运行应用，输入生日并点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1094]'
  id: totrans-8174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1094]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8175
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8177
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。让我们通过向类中添加一个 cancelTapped(_:) 方法来实现这个行为，该方法将调用一个内建的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8178
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1095]'
  id: totrans-8179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1095]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8180
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户可以看到“添加生日”界面从屏幕上滑下来。看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，称为
    completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后运行某些代码，可以使用 completion 闭包。由于这里不需要执行任何操作，你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8181
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8182
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 与取消按钮连接起来。你可以按照将 saveTapped(_:) 方法连接到保存按钮的方式进行操作。进入
    *Main.storyboard*，打开添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8183
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该看到“添加生日”界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个具有 firstName、lastName
    和 birthdate 属性的生日对象。现在，你可以保存生日，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表格视图控制器中显示你的生日列表。
- en: '[PRE1096]'
  id: totrans-8186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1096]'
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8187
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在你可以在应用中输入一个名字，并看到计算机在调试控制台中输出它。接下来，让我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8188
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8189
  prefs: []
  type: TYPE_NORMAL
  zh: 从birthdatePicker获取日期就像从firstNameTextField或lastNameTextField获取文本一样简单。UIDatePicker类有一个date属性，表示当前由选择器显示的日期。对于birthdatePicker来说，它是birthdatePicker.date。当用户更改UIDatePicker时，date属性也会改变，所以你可以使用birthdayPicker.date来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8190
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8191
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1097]'
  id: totrans-8192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1097]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE1098]'
  id: totrans-8194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1098]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了firstName、lastName和birthdate——这三项数据是创建一个生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，包含了时间和+0000的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式，以及如何不显示时间地展示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8196
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法来创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8198
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从saveTapped(_:)方法中删除打印语句，因为我们将用新的打印语句来测试newBirthday实例。然后，向saveTapped(_:)方法中添加以下代码行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8199
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1099]'
  id: totrans-8200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1099]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8201
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你通过Birthday类的初始化方法创建了一个newBirthday实例，并传入了firstName、lastName和birthdate的常量。创建newBirthday之后，在➋，你通过点语法将它的属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似下面的输出：
- en: '[PRE1100]'
  id: totrans-8202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1100]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8203
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8205
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。我们通过在类中添加一个cancelTapped(_:)方法来实现这一行为，该方法会调用一个内建的UIViewController方法叫做dismiss(animated:completion:)。这个方法正如其名——它会关闭当前显示的视图控制器。将以下方法添加到你的AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8206
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1101]'
  id: totrans-8207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1101]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8208
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于控制关闭界面的动画效果。传入 true，以便用户能看到添加生日界面从屏幕上滑下来，看起来就像是一个专业的应用！第二个参数是一个可选的闭包，叫做
    completion 。*闭包* 是可以传入函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。因为这里不需要执行任何操作，你可以传入
    nil 。
- en: '![](Image00233.jpg)'
  id: totrans-8209
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法与取消按钮连接。你可以像将 saveTapped(_:) 方法连接到保存按钮一样进行操作。进入 *Main.storyboard*
    ，打开添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8211
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日界面，再点击 **取消** 。你应该会看到添加生日界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8213
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建包含 firstName 、 lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存 Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: Cool! Now you can put a name into your app and see the computer output it in
    your debug console. Let’s focus on getting a date output next.
  id: totrans-8214
  prefs: []
  type: TYPE_NORMAL
  zh: 酷！现在你可以在你的应用程序中输入一个名字，并在调试控制台中看到计算机输出它。接下来，我们专注于获取日期输出。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8216
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期和从 firstNameTextField 或 lastNameTextField 中获取文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date 。当用户更改
    UIDatePicker 时，date 属性也会发生变化，所以你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8217
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到你的 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8218
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1102]'
  id: totrans-8219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1102]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1103]'
  id: totrans-8221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1103]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8222
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 firstName 、 lastName 和 birthdate ——这三项数据是创建 Birthday 所需的！你会注意到调试控制台中显示的日期格式有些奇怪，其中还包括时间和
    +0000 的时区偏移。暂时不用太担心这个问题，我们会在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入信息，你可以使用这些信息通过`Birthday`类的初始化方法来创建一个生日记录。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8225
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用测试`newBirthday`实例的打印语句来替代它们。然后将以下代码添加到`saveTapped(_:)`方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8226
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1104]'
  id: totrans-8227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1104]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你通过`Birthday`类的初始化方法创建了一个`newBirthday`实例，并传入了`firstName`、`lastName`和`birthdate`常量。创建完`newBirthday`后，在
    ➋ 处，你通过点符号输出其属性到调试控制台。输出的内容与之前的打印语句相同，但这次你得到的是`newBirthday`实例的值。运行应用程序，输入一个生日，点击“保存”查看结果。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1105]'
  id: totrans-8229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1105]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8230
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日记录。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日记录。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8232
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的页面应该消失。我们通过在类中添加一个`cancelTapped(_:)`方法来实现这个行为，该方法会调用一个内置的UIViewController方法，叫做`dismiss(animated:completion:)`。这个方法的作用就是它所说的——它会关闭当前显示的视图控制器。将以下方法添加到`AddBirthdayViewController`类中的`saveTapped(_:)`方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8233
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1106]'
  id: totrans-8234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1106]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8235
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` ➊ 方法接受两个参数。`animated`参数用于控制是否对关闭界面进行动画效果。传入`true`，这样用户就能看到“添加生日”页面从屏幕上滑下，就像一个专业的应用程序一样！第二个参数是一个可选的闭包，叫做`completion`。*闭包*是一个可以传递给函数的代码块。如果你想在视图控制器关闭后执行一些代码，可以使用`completion`闭包。因为你在这里不需要执行任何操作，所以可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-8236
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8237
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`与取消按钮关联起来。你可以像将`saveTapped(_:)`方法与保存按钮关联一样来做。打开*Main.storyboard*，调出“添加生日”视图控制器的连接对话框。从`cancelTapped(_:)`方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8238
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入“添加生日”页面，再点击**取消**。你应该会看到“添加生日”页面滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将书写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前你可以保存 Birthday ，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表视图控制器中显示你的生日列表。
- en: '**GETTING A DATE FROM A DATE PICKER**'
  id: totrans-8241
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**从日期选择器获取日期**'
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8242
  prefs: []
  type: TYPE_NORMAL
  zh: 从 birthdatePicker 获取日期与从 firstNameTextField 或 lastNameTextField 获取文本一样简单。UIDatePicker
    类有一个 date 属性，它是当前由选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会发生变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8243
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下几行代码添加到 saveTapped(_:) 方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8244
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1107]'
  id: totrans-8245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1107]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1108]'
  id: totrans-8247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1108]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8248
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有了 firstName、lastName 和 birthdate ——这三项数据正是我们创建 Birthday 所需的！你会注意到调试控制台中显示的日期格式比较奇怪，其中还包括时间和
    +0000 时区偏移。现在不必过于担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8249
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建一个 Birthday**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，您可以利用这些信息通过 Birthday 类的初始化器来创建一个
    Birthday 对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8251
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的打印语句，因为我们将用测试 newBirthday 实例的打印语句替换它们。然后，将以下几行代码添加到
    saveTapped(_:) 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8252
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1109]'
  id: totrans-8253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1109]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8254
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点表示法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用程序，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下的输出：
- en: '[PRE1110]'
  id: totrans-8255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1110]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8256
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday 。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday 。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8258
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想要添加生日，添加生日的屏幕应该消失。我们通过向类中添加 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法叫做 dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8259
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1111]'
  id: totrans-8260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1111]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8261
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true，这样用户就能看到添加生日的屏幕滑动消失，效果就像一个专业的应用程序一样！第二个参数是一个可选闭包，叫做
    completion。*闭包*是可以传递给函数的代码块。completion 闭包可以在视图控制器关闭后执行任何代码。因为你不需要在这里执行任何操作，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8262
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8263
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以按照将 saveTapped(_:) 方法与保存按钮连接的相同步骤来完成。进入
    *Main.storyboard*，打开添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8264
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到添加生日界面从屏幕上滑动消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8266
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的生日对象。目前，你可以保存生日，但保存后无法看到它们。在 [第11章](text00022.html#ch11) 中，我们将展示如何在生日表格视图控制器中显示你的生日列表。
- en: Getting a date from the birthdatePicker is just as easy as getting the text
    out of firstNameTextField or lastNameTextField . The UIDatePicker class has a
    date property, which is the date currently being displayed by the picker. For
    the birthdatePicker , this is birthdatePicker.date . When a user changes the UIDatePicker
    , the date property also changes, so you can use birthdayPicker.date to access
    a birthday the user inputs.
  id: totrans-8267
  prefs: []
  type: TYPE_NORMAL
  zh: 获取出生日期选择器的日期就像获取 firstNameTextField 或 lastNameTextField 中的文本一样简单。UIDatePicker
    类有一个 date 属性，它表示当前由选择器显示的日期。对于 birthdatePicker 来说，就是 birthdatePicker.date。当用户更改
    UIDatePicker 时，date 属性也会变化，因此你可以使用 birthdayPicker.date 来访问用户输入的生日。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8268
  prefs: []
  type: TYPE_NORMAL
  zh: 向 saveTapped(_:) 方法添加以下几行：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8269
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1112]'
  id: totrans-8270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1112]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1113]'
  id: totrans-8272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1113]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8273
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了`firstName`、`lastName`和`birthdate`——这三个数据项是创建一个生日所需要的！你会注意到，调试控制台中显示的日期格式很奇怪，包含了时间和+0000的时区偏移。暂时不用太担心这个问题，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不带时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8274
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入，你可以使用这些信息通过`Birthday`类的初始化方法来创建一个生日实例。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8276
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的`print`语句，因为我们将用测试`newBirthday`实例的`print`语句替换它们。然后，将以下行添加到`saveTapped(_:)`方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8277
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1114]'
  id: totrans-8278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1114]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8279
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用`Birthday`类的初始化方法创建了一个`newBirthday`实例，并传入了`firstName`、`lastName`和`birthdate`的常量。创建完`newBirthday`之后，在
    ➋ 处，你通过点语法将其属性输出到调试控制台。打印的输出将与之前的`print`语句相同，但这次你是从`newBirthday`实例中获取值。运行应用，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台中看到类似以下内容的输出：
- en: '[PRE1115]'
  id: totrans-8280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1115]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8281
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击保存按钮只会创建一个生日实例。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8283
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日的界面应该消失。我们通过在类中添加一个`cancelTapped(_:)`方法来实现这个行为，该方法将调用一个内置的UIViewController方法`dismiss(animated:completion:)`。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到`AddBirthdayViewController`类中的`saveTapped(_:)`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8284
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1116]'
  id: totrans-8285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1116]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8286
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数 ➊ 接受两个参数。`animated`参数用于动画关闭屏幕。传入`true`，这样用户就能看到“添加生日”屏幕向下滑出屏幕，效果就像一个专业的应用！第二个参数是一个可选闭包，叫做`completion`。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后运行一些代码，可以使用`completion`闭包。但由于你这里不需要执行任何操作，你可以直接传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-8287
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8288
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)与取消按钮连接起来。你可以与将saveTapped(_:)方法与保存按钮连接的方式完全相同地进行操作。进入*Main.storyboard*并打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8289
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，然后点击**Cancel**。你应该会看到“添加生日”界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器，通过firstName、lastName和birthdate属性创建一个Birthday对象。目前，你可以保存Birthday，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthday表格视图控制器中显示你的生日列表。
- en: 'Add the following lines to your saveTapped(_:) method:'
  id: totrans-8292
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到你的saveTapped(_:)方法中：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8293
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1117]'
  id: totrans-8294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1117]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8295
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1118]'
  id: totrans-8296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1118]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8297
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们有了firstName、lastName和birthdate——创建生日所需的三项数据！你会注意到调试控制台中显示的日期格式很奇怪，里面还包括时间和+0000的时区偏移。现在不必太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8300
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的打印语句，因为我们将用测试新的newBirthday实例的打印语句替代它们。然后，将以下代码添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8301
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1119]'
  id: totrans-8302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1119]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8303
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday之后，在➋处，你通过点语法将其属性输出到调试控制台。打印的输出将与之前的打印语句相同，但这次你获得的是来自newBirthday实例的值。运行应用程序，输入生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1120]'
  id: totrans-8304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1120]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8305
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个Birthday。你将在[第11章](text00022.html#ch11)中学到如何在Birthday视图控制器中显示这个Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8307
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日页面应该消失。让我们通过在类中添加 cancelTapped(_:) 方法来实现这一行为，它将调用一个名为
    dismiss(animated:completion:) 的内置 UIViewController 方法。这个方法做的正是它说的——它关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8308
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1121]'
  id: totrans-8309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1121]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8310
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画关闭屏幕。传入 true，这样用户就可以看到“添加生日”页面滑动消失的效果，效果就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做
    completion。*闭包*是可以传递给函数的代码块。如果有任何代码需要在视图控制器被关闭后执行，可以使用 completion 闭包。由于此处不需要任何操作，你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8311
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8312
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样操作。前往 *Main.storyboard*，并打开添加生日视图控制器的连接对话框。点击并拖动
    cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8313
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用程序，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该能看到“添加生日”页面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器创建一个具有 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8316
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1122]'
  id: totrans-8317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1122]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8318
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该看到类似以下的输出：
- en: '[PRE1123]'
  id: totrans-8319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1123]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8320
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate——这三项数据是我们创建一个生日所需的！你会注意到在调试控制台中显示的日期格式很奇怪，还包括时间和
    +0000 的时区偏移。现在不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式和如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8321
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8322
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入信息，你可以使用这些信息通过 Birthday 类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8323
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从 saveTapped(_:) 方法中删除打印语句，因为我们将用测试 newBirthday 实例的打印语句替代它们。然后将以下代码行添加到 saveTapped(_:)
    方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8324
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1124]'
  id: totrans-8325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1124]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8326
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。输出的内容与之前的打印语句相同，不过这次你是从 newBirthday
    实例中获取值的。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1125]'
  id: totrans-8327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1125]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8328
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8330
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过在类中添加 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法的作用正如其名——它会关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8331
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1126]'
  id: totrans-8332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1126]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8333
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于为关闭屏幕添加动画效果。传入 true，这样用户可以看到添加生日界面滑出屏幕，看起来就像一个专业的应用程序！第二个参数是一个可选闭包，叫做
    completion。*闭包* 是一个可以传递给函数的代码块。completion 闭包可以用来执行你希望在视图控制器被关闭后运行的任何代码。因为在这里你不需要执行任何操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8334
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8335
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以按照与将 saveTapped(_:) 方法连接到保存按钮相同的方式进行操作。进入
    *Main.storyboard*，并打开添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8336
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日界面，再点击 **取消**。你应该看到添加生日界面从屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8338
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器创建一个具有firstName、lastName和birthdate属性的Birthday对象。现在，你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日表视图控制器中显示你的生日列表。
- en: '[PRE1127]'
  id: totrans-8339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1127]'
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8340
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似以下的输出：
- en: '[PRE1128]'
  id: totrans-8341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1128]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8342
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，我们已经有了firstName、lastName和birthdate——创建生日所需的三项数据！你会注意到调试控制台中显示的日期格式很奇怪，它还包括时间和+0000作为时区偏移。暂时不用太担心这个问题。我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8344
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的firstName、lastName和birthdate输入，你可以使用这些信息通过Birthday类的初始化方法创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8345
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除saveTapped(_:)方法中的print语句，因为我们将用新的print语句来测试newBirthday实例。然后，将以下行添加到saveTapped(_:)方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8346
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1129]'
  id: totrans-8347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1129]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8348
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类的初始化方法创建了一个newBirthday实例，并传入firstName、lastName和birthdate常量。在创建newBirthday之后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入生日，然后点击保存，看看会发生什么。你应该在调试控制台中看到类似以下的输出：
- en: '[PRE1130]'
  id: totrans-8349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1130]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8350
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8352
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该关闭。我们通过在类中添加一个cancelTapped(_:)方法来实现这个行为，它将调用一个内置的UIViewController方法——dismiss(animated:completion:)。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到AddBirthdayViewController类中的saveTapped(_:)方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8353
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1131]'
  id: totrans-8354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1131]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8355
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 有两个参数。animated 参数用于设置关闭屏幕时的动画效果。传入 true，用户可以看到“添加生日”屏幕滑下的效果，看起来就像是一个专业的应用程序！第二个参数是一个可选的闭包，叫做
    completion。*闭包* 是可以传递给函数的一段代码。如果你希望在视图控制器消失后执行某些代码，可以使用这个 completion 闭包。因为这里你不需要做任何事，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8356
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8357
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接起来。你可以像将 saveTapped(_:) 方法与保存按钮连接一样，操作方式完全相同。打开
    *Main.storyboard*，然后打开“添加生日”视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8358
  prefs: []
  type: TYPE_NORMAL
  zh: 做完这些后，运行应用程序，点击 **+** 进入添加生日屏幕，再点击 **取消**。你应该能看到“添加生日”屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8359
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8360
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器，通过 firstName、lastName 和
    birthdate 属性创建一个 Birthday 对象。现在你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: 'Run the app now and see what happens. You should see something similar to the
    following output:'
  id: totrans-8361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，看看会发生什么。你应该会看到类似下面的输出：
- en: '[PRE1132]'
  id: totrans-8362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1132]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8363
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了 firstName、lastName 和 birthdate ——这三项数据是我们创建 Birthday 所需的！你会注意到，调试控制台中显示的日期格式很奇怪，里面还包含了时间和
    +0000 时区偏移。暂时不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示不包含时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8364
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8365
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器来创建一个
    Birthday 对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8366
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的打印语句，因为我们将用测试 newBirthday 实例的打印语句来替代它们。然后在 saveTapped(_:)
    方法中添加以下行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8367
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1133]'
  id: totrans-8368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1133]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8369
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用Birthday类初始化器创建一个新的Birthday实例，并传入firstName、lastName和birthdate的常量。创建完newBirthday后，在➋处，你使用点符号将其属性输出到调试控制台。打印的输出将与之前的print语句相同，但这次你是从newBirthday实例中获取值。运行应用程序，输入一个生日，点击保存，看看会发生什么。你应该能在调试控制台看到类似以下的输出：
- en: '[PRE1134]'
  id: totrans-8370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1134]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8371
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，点击保存按钮只会创建一个生日对象。你将在[第11章](text00022.html#ch11)中学习如何在Birthdays视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8373
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日界面应该消失。我们通过向类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个内置的UIViewController方法，名为dismiss(animated:completion:)。这个方法做的就是它所说的——它会关闭当前显示的视图控制器。在AddBirthdayViewController类中的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8374
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1135]'
  id: totrans-8375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1135]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8376
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊有两个参数。animated参数用于为关闭界面添加动画效果。传入true，让用户看到添加生日界面从屏幕上滑下来。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的一段代码。如果你希望在视图控制器关闭后执行任何代码，可以使用completion闭包。由于你不需要在这里执行任何操作，可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8377
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8378
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将cancelTapped(_:)方法连接到取消按钮。你可以按照与将saveTapped(_:)方法连接到保存按钮时相同的方式进行操作。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8379
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日界面，点击**取消**。你应该看到“添加生日”界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8381
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用程序的视觉界面。你还学会了如何使用输入文本字段和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。现在你可以保存生日对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表格视图控制器中显示生日列表。
- en: '[PRE1136]'
  id: totrans-8382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1136]'
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8383
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经拥有了 firstName、lastName 和 birthdate ——创建生日所需的三项数据！你会注意到，在调试控制台中显示的日期格式很奇怪，还包含了时间和
    +0000 的时区偏移。暂时不用太担心这些，我们将在[第11章](text00022.html#ch11)中讨论日期格式以及如何显示没有时间的日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8384
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化方法创建一个
    Birthday。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8386
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后在 saveTapped(_:)
    方法中添加以下代码：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8387
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1137]'
  id: totrans-8388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1137]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8389
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化方法创建了一个 newBirthday 实例，并传入了 firstName、lastName 和 birthdate
    的常量。在创建 newBirthday 后，在 ➋ 处，你通过点符号法将其属性输出到调试控制台。打印的输出将与之前的 print 语句相同，但这次你从 newBirthday
    实例中获取值。运行应用，输入生日，点击保存查看发生了什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE1138]'
  id: totrans-8390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1138]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8391
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8392
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8393
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的屏幕应该消失。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个名为
    dismiss(animated:completion:) 的内建 UIViewController 方法。这个方法做的就是它所说的——关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中，紧跟着 saveTapped(_:) 方法之后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8394
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1139]'
  id: totrans-8395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1139]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8396
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画化关闭屏幕。传入 true 以便用户看到“添加生日”屏幕从屏幕上滑下来，效果就像专业应用一样！第二个参数是一个可选的闭包，名为
    completion。*闭包*是可以传递给函数的一段代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用这个 completion 闭包。因为你这里不需要执行任何操作，可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8397
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8398
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以按照与 saveTapped(_:) 方法连接保存按钮的相同方式来操作。前往
    *Main.storyboard* 并打开添加生日视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮上。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8399
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该会看到添加生日页面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8400
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8401
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的生日对象。现在你可以保存生日，但保存后无法看到它们。在 [第 11 章](text00022.html#ch11) 中，我们将向你展示如何在
    Birthdays 表格视图控制器中显示生日列表。
- en: At this point, we have a firstName , a lastName , and a birthdate —the three
    pieces of data that we need to create a Birthday ! You’ll notice that the date
    displayed in the debug console is in a strange format, which also includes a time
    and +0000 for a time zone offset. Don’t worry too much about this for now. We’ll
    discuss date formats and how to display a date without a time in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8402
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已经有了 firstName、lastName 和 birthdate ——这三项数据足以创建一个生日对象！你会注意到，调试控制台中显示的日期格式比较奇怪，还包含了时间和
    +0000 的时区偏移。暂时不必太担心这个问题。我们将在 [第 11 章](text00022.html#ch11) 中讨论日期格式和如何不显示时间的情况下显示日期。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8403
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8404
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 firstName、lastName 和 birthdate 输入，你可以使用这些信息通过 Birthday 类的初始化器创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8405
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 saveTapped(_:) 方法中的 print 语句，因为我们将用新的 print 语句来测试 newBirthday 实例。然后在 saveTapped(_:)
    方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8406
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1140]'
  id: totrans-8407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1140]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8408
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你通过使用 Birthday 类的初始化器创建一个新的 Birthday 实例，并传入 firstName、lastName 和 birthdate
    常量。创建 newBirthday 后，在 ➋ 处，你使用点表示法将其属性输出到调试控制台。打印输出将与之前的 print 语句相同，但这次你得到的值来自
    newBirthday 实例。运行应用，输入一个生日，然后点击保存以查看会发生什么。你应该能在调试控制台中看到类似以下的输出：
- en: '[PRE1141]'
  id: totrans-8409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1141]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8410
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，点击保存按钮只会创建一个生日对象。你将学习如何在 [第 11 章](text00022.html#ch11) 中将这个生日显示在 Birthdays
    视图控制器中。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8412
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，表示他们不再想添加生日，“添加生日”界面应该关闭。让我们通过向类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法将调用一个内置的UIViewController方法`dismiss(animated:completion:)`。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。将以下方法添加到`AddBirthdayViewController`类中的`saveTapped(_:)`方法后面：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8413
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1142]'
  id: totrans-8414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1142]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8415
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数➊接受两个参数。`animated`参数用于控制关闭界面的动画效果。传入true，这样用户就可以看到“添加生日”界面从屏幕上滑下。看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为`completion`。*闭包*是一个可以传递给函数的代码块。如果你在视图控制器被关闭后有任何代码需要执行，可以使用`completion`闭包。因为在这里你不需要执行任何操作，所以可以直接传入nil。'
- en: '![](Image00233.jpg)'
  id: totrans-8416
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8417
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将`cancelTapped(_:)`方法与“取消”按钮连接。你可以按照与将`saveTapped(_:)`方法与“保存”按钮连接时完全相同的方式进行操作。打开*Main.storyboard*，并调出“添加生日”视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法列表到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8418
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个步骤后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该会看到“添加生日”界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8419
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8420
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器，通过`firstName`、`lastName`和`birthdate`属性创建一个生日对象。目前你可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日列表视图控制器中显示你的生日数据。
- en: '**CREATING A BIRTHDAY**'
  id: totrans-8421
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**创建生日**'
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8422
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的`firstName`、`lastName`和`birthdate`输入，你可以利用这些信息通过生日类的初始化方法创建一个生日对象。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8423
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用测试`newBirthday`实例的打印语句替换它们。然后，向`saveTapped(_:)`方法中添加以下几行代码。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8424
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1143]'
  id: totrans-8425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1143]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8426
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用Birthday类的初始化方法创建一个newBirthday实例，并传入firstName、lastName和birthdate的常量。创建newBirthday后，在➋，你使用点语法将其属性输出到调试控制台。打印的输出将与早期的print语句相同，只不过这次你获取的是来自newBirthday实例的值。运行应用，输入一个生日，点击保存，看看会发生什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1144]'
  id: totrans-8427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1144]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8428
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日对象。你将在[第11章](text00022.html#ch11)学习如何在生日视图控制器中显示这个生日对象。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8429
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8430
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再希望添加生日，因此“添加生日”屏幕应该消失。让我们通过向我们的类中添加一个cancelTapped(_:)方法来实现这一行为，该方法将调用一个名为dismiss(animated:completion:)的内建UIViewController方法。这个方法正如它的名字所描述的那样——它会关闭当前显示的视图控制器。在AddBirthdayViewController类的saveTapped(_:)方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8431
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1145]'
  id: totrans-8432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1145]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8433
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于动画显示关闭屏幕。传入true，这样用户可以看到“添加生日”屏幕从界面上滑动下去。它看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，称为completion。*闭包*是可以传递给函数的一段代码。如果有任何代码希望在视图控制器被关闭后运行，可以使用completion闭包。由于在这里不需要执行任何操作，你可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8434
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8435
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你需要以和将saveTapped(_:)方法连接到保存按钮完全相同的方式来做。前往*Main.storyboard*，并调出“添加生日”视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8436
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击**+**进入“添加生日”屏幕，然后点击**取消**。你应该看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8438
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将书写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的生日对象。现在你可以保存生日对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在生日列表视图控制器中显示这些生日。
- en: Now that your code can access the firstName , lastName , and birthdate input
    that the user provided, you can use this information to create a Birthday using
    the Birthday class initializer.
  id: totrans-8439
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的代码可以访问用户提供的 `firstName`、`lastName` 和 `birthdate` 输入，你可以利用这些信息通过 `Birthday`
    类的初始化器创建一个生日。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8440
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除 `saveTapped(_:)` 方法中的 `print` 语句，因为我们将用新的 `print` 语句来测试 `newBirthday`
    实例。然后将以下行添加到 `saveTapped(_:)` 方法中。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8441
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1146]'
  id: totrans-8442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1146]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8443
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 `Birthday` 类的初始化器创建一个新的 `newBirthday` 实例，并传入 `firstName`、`lastName`
    和 `birthdate` 常量。创建了 `newBirthday` 后，在 ➋ 处，你使用点符号将其属性输出到调试控制台。打印的输出与之前的 `print`
    语句相同，但这次你从 `newBirthday` 实例中获取值。运行应用，输入一个生日，并点击保存，看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE1147]'
  id: totrans-8444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1147]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8445
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11) 学到如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8446
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8447
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。我们通过向类中添加一个 `cancelTapped(_:)` 方法来实现这个行为，该方法将调用一个内建的
    UIViewController 方法，名为 `dismiss(animated:completion:)`。这个方法正如它的名字所示——它会关闭当前显示的视图控制器。在你的
    `AddBirthdayViewController` 类中的 `saveTapped(_:)` 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8448
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1148]'
  id: totrans-8449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1148]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8450
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)` ➊ 方法接受两个参数。`animated` 参数用于控制屏幕关闭时的动画效果。传入 `true`
    以便用户能够看到“添加生日”界面从屏幕上滑下去。这将看起来就像一个专业的应用程序一样！第二个参数是一个可选的闭包，名为 `completion`。*闭包*
    是可以传入函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用 `completion` 闭包。因为你在这里不需要做任何事情，所以你可以传入
    `nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-8451
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8452
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 `cancelTapped(_:)` 方法与取消按钮连接起来。你可以像将 `saveTapped(_:)` 方法与保存按钮连接一样操作。进入
    *Main.storyboard* 并打开添加生日视图控制器的连接对话框。从 `cancelTapped(_:)` 方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8453
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，运行应用，点击 **+** 进入添加生日界面，再点击 **取消**。你应该看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8454
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8455
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章，你学习了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个具有`firstName`、`lastName`和`birthdate`属性的生日对象。现在你可以保存生日，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将展示如何在一个生日表视图控制器中显示你保存的生日列表。
- en: First, delete the print statements from the saveTapped(_:) method since we’ll
    replace them with print statements that test out the newBirthday instance instead.
    Then add the following lines to the saveTapped(_:) method.
  id: totrans-8456
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除`saveTapped(_:)`方法中的打印语句，因为我们将用测试`newBirthday`实例的打印语句来替换它们。然后，在`saveTapped(_:)`方法中添加以下行。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8457
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1149]'
  id: totrans-8458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1149]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8459
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊，你使用生日类的初始化器创建一个新的`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`的常量。创建`newBirthday`后，在➋，你使用点符号将它的属性输出到调试控制台。打印输出将与之前的打印语句相同，但这次你获得的是来自`newBirthday`实例的值。运行应用，输入一个生日，点击“保存”看看会发生什么。你应该在调试控制台看到类似以下的输出：
- en: '[PRE1150]'
  id: totrans-8460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1150]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8461
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8463
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再希望添加生日，“添加生日”界面应该消失。我们通过在类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法会调用一个内置的`UIViewController`方法，名为`dismiss(animated:completion:)`。这个方法正如它的名字所说，它会消失当前显示的视图控制器。在`AddBirthdayViewController`类中的`saveTapped(_:)`方法后，添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8464
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1151]'
  id: totrans-8465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1151]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8466
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`方法➊接受两个参数。`animated`参数用于动画化关闭界面。传入`true`，让用户看到“添加生日”界面从屏幕上滑下，像专业应用一样！第二个参数是一个名为`completion`的可选闭包。*闭包*是可以传递给函数的一段代码块。如果你希望在视图控制器消失后执行一些代码，可以使用`completion`闭包。由于你这里不需要任何操作，你可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-8467
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8468
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`方法与取消按钮连接。你可以通过和将`saveTapped(_:)`方法连接到“保存”按钮的方法完全相同的方式来做这件事。进入*Main.storyboard*，并打开“添加生日”视图控制器的连接对话框。从`cancelTapped(_:)`方法的列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8469
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用，点击 **+** 进入添加生日屏幕，然后点击 **取消**。你应该看到“添加生日”屏幕滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8471
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后看不到它们。在 [第11章](text00022.html#ch11)
    中，我们将展示如何在“生日”表视图控制器中显示你所有的生日。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8472
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1152]'
  id: totrans-8473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1152]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8474
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ➊ 处，你使用 Birthday 类的初始化器创建了一个 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量值。创建 newBirthday 后，在 ➋ 处，你使用点符号将它的属性输出到调试控制台。打印的输出将与之前的 print 语句相同，只不过这次你获取的是
    newBirthday 实例的值。运行应用，输入一个生日，然后点击保存，看看会发生什么。你应该会在调试控制台看到类似如下的输出：
- en: '[PRE1153]'
  id: totrans-8475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1153]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8476
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击“保存”按钮仅仅会创建一个 Birthday。你将在 [第11章](text00022.html#ch11) 中学习如何在“生日”视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8477
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8478
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击“取消”时，意味着他们不再想添加生日，添加生日的屏幕应该消失。让我们通过向类中添加一个 cancelTapped(_:) 方法来实现这个行为，它将调用一个内置的
    UIViewController 方法叫做 dismiss(animated:completion:)。这个方法的作用正如其名称所示——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8479
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1154]'
  id: totrans-8480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1154]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8481
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画关闭屏幕。传入 true，这样用户就能看到“添加生日”屏幕从屏幕上滑下去，效果就像一个专业的应用一样！第二个参数是一个可选的闭包，称为
    completion。*闭包* 是可以传递给函数的一段代码。如果你希望在视图控制器被关闭后执行某些代码，可以使用 completion 闭包。因为这里不需要任何操作，所以你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8482
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8483
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 连接到“取消”按钮。你可以通过与将 saveTapped(_:) 方法连接到“保存”按钮的相同方式来完成此操作。前往
    *Main.storyboard* 并打开添加生日视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到“取消”按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8484
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，运行应用，点击 **+** 进入添加生日页面，然后点击 **取消**。你应该看到“添加生日”页面滑出并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8485
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8486
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存生日信息，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在“生日”表格视图控制器中显示你的生日列表。
- en: '[PRE1155]'
  id: totrans-8487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1155]'
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8488
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处，你使用 Birthday 类的初始化方法创建一个新的 newBirthday 实例，并传入 firstName、lastName 和 birthdate
    的常量。创建 newBirthday 后，在➋处，你通过点符号将它的属性输出到调试控制台。打印输出将与之前的 print 语句相同，但这次你是从 newBirthday
    实例中获取值。运行应用，输入一个生日，并点击保存，看看会发生什么。你应该在调试控制台看到类似以下内容的输出：
- en: '[PRE1156]'
  id: totrans-8489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1156]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8490
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个 Birthday。你将在[第11章](text00022.html#ch11)中学习如何在“生日”视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8491
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8492
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再想添加生日，添加生日页面应该关闭。我们通过向类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法：dismiss(animated:completion:)。这个方法正如它的名字所示——它关闭当前显示的视图控制器。在
    AddBirthdayViewController 类中的 saveTapped(_:) 方法后添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8493
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1157]'
  id: totrans-8494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1157]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8495
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 有两个参数。animated 参数用于动画效果来关闭页面。传入 true，这样用户就能看到“添加生日”页面从屏幕上滑下去，效果看起来就像专业的应用程序一样！第二个参数是一个可选的闭包，名为
    completion。*闭包* 是一个可以传递给函数的代码块。completion 闭包可以在视图控制器关闭后执行任何你想要运行的代码。由于你不需要执行任何操作，你可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8496
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8497
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接起来。你可以按照与 saveTapped(_:) 方法连接保存按钮的相同方式来操作。在
    *Main.storyboard* 中，调出 Add Birthday 视图控制器的连接对话框。点击并拖动 cancelTapped(_:) 方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8498
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述操作后，运行应用，点击**+**进入添加生日界面，然后点击**取消**。你应该看到“添加生日”界面从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8499
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8500
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码连接到应用的视觉界面。你还学习了如何使用输入文本字段和日期选择器来创建一个包含`firstName`、`lastName`和`birthdate`属性的生日对象。目前你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: 'At ➊ , you create a newBirthday instance using the Birthday class initializer
    and pass in constants for firstName , lastName , and birthdate . After you create
    newBirthday , at ➋ , you output its properties into the debug console using dot
    notation. The printed output will be the same as with the earlier print statements,
    but this time you’re getting the values from the newBirthday instance. Run the
    app, enter a birthday, and tap Save to see what happens. You should see output
    in your debug console similar to the following:'
  id: totrans-8501
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊位置，你使用`Birthday`类的初始化器创建一个`newBirthday`实例，并传入`firstName`、`lastName`和`birthdate`常量。创建`newBirthday`后，在➋位置，你使用点表示法将它的属性输出到调试控制台。打印输出将与之前的打印语句相同，但这次你得到的是来自`newBirthday`实例的值。运行应用，输入生日并点击保存，查看发生了什么。你应该会在调试控制台看到类似以下的输出：
- en: '[PRE1158]'
  id: totrans-8502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1158]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8503
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，点击保存按钮仅会创建一个生日。你将在[第11章](text00022.html#ch11)中学到如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8505
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，表示他们不再希望添加生日，添加生日界面应该关闭。我们通过向类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法会调用一个内置的UIViewController方法，叫做`dismiss(animated:completion:)`。这个方法正如其名所示——它会关闭当前显示的视图控制器。在`AddBirthdayViewController`类的`saveTapped(_:)`方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8506
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1159]'
  id: totrans-8507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1159]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8508
  prefs: []
  type: TYPE_NORMAL
  zh: '`dismiss(animated:completion:)`函数➊接受两个参数。`animated`参数用于动画效果关闭屏幕。传入`true`，这样用户就能看到“添加生日”界面从屏幕上滑下来。这看起来就像一个专业的应用！第二个参数是一个可选的闭包，叫做`completion`。*闭包*是可以传递给函数的一段代码。如果在关闭视图控制器后你希望执行某些代码，可以使用这个闭包。因为你在这里不需要任何操作，所以可以传入`nil`。'
- en: '![](Image00233.jpg)'
  id: totrans-8509
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8510
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`方法与取消按钮连接起来。你可以像将`saveTapped(_:)`方法与保存按钮连接一样，进行操作。进入*Main.storyboard*，调出添加生日视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8511
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日屏幕，然后点击**取消**。你应该会看到“添加生日”从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8513
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: '[PRE1160]'
  id: totrans-8514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1160]'
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8515
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，点击保存按钮只会创建一个生日。你将在[第11章](text00022.html#ch11)中学习如何在生日视图控制器中显示这个生日。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8517
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日屏幕应该消失。让我们通过向我们的类中添加一个 cancelTapped(_:) 方法来实现这一行为，它将调用一个内置的
    UIViewController 方法，名为 dismiss(animated:completion:)。这个方法正如其名所示——它会关闭当前显示的视图控制器。将以下方法添加到你的
    AddBirthdayViewController 类中的 saveTapped(_:) 方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8518
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1161]'
  id: totrans-8519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1161]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8520
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 dismiss(animated:completion:) ➊ 接受两个参数。animated 参数用于动画关闭屏幕。传入 true，以便用户能看到“添加生日”屏幕从屏幕上滑下来，看起来就像一个专业的应用程序！第二个参数是一个可选闭包，称为
    completion。*闭包*是可以传递给函数的一块代码。如果在视图控制器被关闭后需要执行某些代码，可以使用这个 completion 闭包。因为这里不需要做任何事情，你可以直接传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8521
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8522
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将 cancelTapped(_:) 方法与取消按钮连接。你可以像将 saveTapped(_:) 方法连接到保存按钮一样连接。进入 *Main.storyboard*，打开添加生日视图控制器的连接对话框。从
    cancelTapped(_:) 方法列表拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8523
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日屏幕，然后点击**取消**。你应该会看到“添加生日”从屏幕上滑下来并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8525
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在你可以保存生日，但保存后看不到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在生日表视图控制器中显示你的生日列表。
- en: For now, tapping the Save button only creates a Birthday . You’ll learn how
    to display this Birthday in the Birthdays view controller in [Chapter 11](text00022.html#ch11)
    .
  id: totrans-8526
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时，点击保存按钮只会创建一个 Birthday 对象。你将在[第11章](text00022.html#ch11)中学习如何在 Birthdays 视图控制器中显示这个
    Birthday。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8528
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。让我们通过在我们的类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法就是它的名字所描述的功能——它会关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中，在 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8529
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1162]'
  id: totrans-8530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1162]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8531
  prefs: []
  type: TYPE_NORMAL
  zh: dismiss(animated:completion:) ➊ 函数有两个参数。animated 参数用于为关闭界面添加动画效果。传入 true，这样用户就能看到添加生日的界面从屏幕上滑下来，看起来就像是一个专业的应用程序！第二个参数是一个可选的闭包，叫做
    completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后执行某些代码，可以使用这个 completion 闭包。因为你这里不需要任何操作，所以可以传入
    nil。
- en: '![](Image00233.jpg)'
  id: totrans-8532
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8533
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法连接到取消按钮。你可以像将 saveTapped(_:) 方法连接到保存按钮一样，做这一步。进入 *Main.storyboard*，并打开添加生日视图控制器的连接对话框。从
    cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8534
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，运行应用程序，点击 **+** 进入添加生日界面，然后点击 **取消**。你应该会看到添加生日界面从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8535
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8536
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你学习了如何将编写的代码连接到应用程序的视觉界面。你还学习了如何使用输入文本框和日期选择器创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表视图控制器中显示你的生日列表。
- en: '**ADDING THE CANCEL BUTTON**'
  id: totrans-8537
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**添加取消按钮**'
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8538
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日的界面应该消失。让我们通过在我们的类中添加一个 cancelTapped(_:) 方法来实现这一行为，该方法将调用一个内置的
    UIViewController 方法 dismiss(animated:completion:)。这个方法就是它的名字所描述的功能——它会关闭当前显示的视图控制器。在你的
    AddBirthdayViewController 类中，在 saveTapped(_:) 方法后面添加以下方法：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8539
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1163]'
  id: totrans-8540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1163]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8541
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`dismiss(animated:completion:)` ➊ 接受两个参数。`animated`参数用于动画化关闭屏幕。传入`true`，这样用户就能看到添加生日屏幕从屏幕上滑下，效果看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为`completion`。*闭包*是可以传入函数的一段代码。如果你希望在视图控制器消失后执行某些代码，可以使用`completion`闭包。因为这里你不需要任何操作，所以可以传入`nil`。
- en: '![](Image00233.jpg)'
  id: totrans-8542
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8543
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`cancelTapped(_:)`与取消按钮连接起来。你可以像将`saveTapped(_:)`方法与保存按钮连接一样来操作。打开*Main.storyboard*，然后调出添加生日视图控制器的连接对话框。点击并拖动`cancelTapped(_:)`方法到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8544
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该会看到添加生日界面滑下屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8546
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学习了如何使用输入文本框和日期选择器来创建包含`firstName`、`lastName`和`birthdate`属性的Birthday对象。现在，你可以保存Birthday，但保存后无法看到它们。在[第11章](text00022.html#ch11)，我们将向你展示如何在Birthdays表视图控制器中显示你保存的生日列表。
- en: 'When the user taps Cancel, it means they no longer want to add a Birthday ,
    and the Add a Birthday screen should go away. Let’s implement this behavior by
    adding a cancelTapped(_:) method to our class, which will call a built-in UIViewController
    method called dismiss(animated:completion:) . This method does just what it says
    it does—it dismisses the currently displayed view controller. Add the following
    method right after the saveTapped(_:) method in your AddBirthdayViewController
    class:'
  id: totrans-8547
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击取消时，意味着他们不再想添加生日，添加生日屏幕应该消失。让我们通过向类中添加一个`cancelTapped(_:)`方法来实现这一行为，该方法将调用一个内置的`UIViewController`方法，叫做`dismiss(animated:completion:)`。这个方法正如其名，它会关闭当前显示的视图控制器。将以下方法添加到你的`AddBirthdayViewController`类中的`saveTapped(_:)`方法之后：
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8548
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1164]'
  id: totrans-8549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1164]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8550
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`dismiss(animated:completion:)` ➊ 接受两个参数。`animated`参数用于动画化关闭屏幕。传入`true`，这样用户就能看到添加生日屏幕从屏幕上滑下，效果看起来就像一个专业的应用！第二个参数是一个可选的闭包，名为`completion`。*闭包*是可以传入函数的一段代码。如果你希望在视图控制器消失后执行某些代码，可以使用`completion`闭包。因为这里你不需要任何操作，所以可以传入`nil`。
- en: '![](Image00233.jpg)'
  id: totrans-8551
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8552
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以像将saveTapped(_:)方法连接到保存按钮一样操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8553
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上操作后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该看到“添加生日”屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8554
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8555
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建具有firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '*AddBirthdayViewController.swift*'
  id: totrans-8556
  prefs: []
  type: TYPE_NORMAL
  zh: '*AddBirthdayViewController.swift*'
- en: '[PRE1165]'
  id: totrans-8557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1165]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8558
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接受两个参数。animated参数用于控制关闭屏幕时的动画效果。传入true，用户可以看到“添加生日”屏幕从屏幕上滑下来，效果就像一个专业的应用程序！第二个参数是一个可选的闭包，叫做completion。*闭包*是可以传递给函数的一段代码块。如果你希望在视图控制器消失后运行某些代码，可以使用completion闭包。因为这里不需要执行任何操作，所以你可以传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8559
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8560
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)方法连接到取消按钮。你可以像将saveTapped(_:)方法连接到保存按钮一样操作。进入*Main.storyboard*，打开添加生日视图控制器的连接对话框。从cancelTapped(_:)方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8561
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以上操作后，运行应用，点击**+**进入添加生日屏幕，然后点击**取消**。你应该看到“添加生日”屏幕从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8562
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8563
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用的视觉界面连接起来。你还学会了如何使用输入文本框和日期选择器来创建具有firstName、lastName和birthdate属性的Birthday对象。目前，你可以保存Birthday对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在Birthdays表视图控制器中显示你的生日列表。
- en: '[PRE1166]'
  id: totrans-8564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1166]'
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8565
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于动画化关闭屏幕。传入true，用户可以看到“添加生日”页面滑出屏幕。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后运行某些代码，可以使用completion闭包。因为在这里你不需要任何操作，所以可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8566
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8567
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与取消按钮连接。你可以按照与保存按钮连接saveTapped(_:)方法的方式进行操作。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8568
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日页面，然后点击**取消**。你应该看到“添加生日”页面滑动出屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8569
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8570
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学会了如何将编写的代码与应用程序的视觉界面连接。你还学会了如何使用输入文本框和日期选择器来创建一个包含firstName、lastName和birthdate属性的Birthday对象。现在你可以保存生日，但保存后无法看到它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在Birthdays表视图控制器中显示你保存的生日列表。
- en: The function dismiss(animated:completion:) ➊ takes two parameters. The animated
    parameter is used to animate the closing screen. Pass in true so users can see
    the Add a Birthday screen slide down off the screen. It’ll look just like a professional
    app! The second parameter is an optional closure called completion . A *closure*
    is a block of code that can be passed in to the function. The completion closure
    can be used if there is any code that you want to run after the view controller
    is dismissed. Because you don’t need anything to happen here, you can just pass
    in nil .
  id: totrans-8571
  prefs: []
  type: TYPE_NORMAL
  zh: 函数dismiss(animated:completion:) ➊接收两个参数。animated参数用于动画化关闭屏幕。传入true，用户可以看到“添加生日”页面滑出屏幕。这看起来就像一个专业的应用程序！第二个参数是一个可选的闭包，名为completion。*闭包*是可以传递给函数的代码块。如果你希望在视图控制器被关闭后运行某些代码，可以使用completion闭包。因为在这里你不需要任何操作，所以可以直接传入nil。
- en: '![](Image00233.jpg)'
  id: totrans-8572
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8573
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将cancelTapped(_:)与取消按钮连接。你可以按照与保存按钮连接saveTapped(_:)方法的方式进行操作。打开*Main.storyboard*并调出添加生日视图控制器的连接对话框。点击并拖动cancelTapped(_:)方法列表到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8574
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击**+**进入添加生日页面，然后点击**取消**。你应该看到“添加生日”页面滑动出屏幕并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到的内容**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8576
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '![](Image00233.jpg)'
  id: totrans-8577
  prefs: []
  type: TYPE_IMG
  zh: '![](Image00233.jpg)'
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8578
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以按照与将 saveTapped(_:) 方法与保存按钮连接相同的方式来操作。打开
    *Main.storyboard*，并调出 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8579
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日屏幕，然后点击 **Cancel**。你应该看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8580
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8581
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表格视图控制器中显示你的生日列表。
- en: The final step is to hook up cancelTapped(_:) to the Cancel button. You do this
    exactly the same way that you hooked up the saveTapped(_:) method to the Save
    button. Go to *Main.storyboard* and bring up the connections dialog for the Add
    Birthday view controller. Click and drag from the cancelTapped(_:) method listing
    to the Cancel button.
  id: totrans-8582
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 cancelTapped(_:) 方法与取消按钮连接。你可以按照与将 saveTapped(_:) 方法与保存按钮连接相同的方式来操作。打开
    *Main.storyboard*，并调出 Add Birthday 视图控制器的连接对话框。从 cancelTapped(_:) 方法列表中点击并拖动到取消按钮。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8583
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日屏幕，然后点击 **Cancel**。你应该看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8584
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8585
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。目前，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将向你展示如何在一个
    Birthdays 表格视图控制器中显示你的生日列表。
- en: After you’ve done that, run the app, tap **+** to get to the Add a Birthday
    screen, and tap **Cancel** . You should see Add a Birthday slide down the screen
    and disappear.
  id: totrans-8586
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，运行应用程序，点击 **+** 进入添加生日屏幕，然后点击 **Cancel**。你应该看到“添加生日”从屏幕上滑下并消失。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8588
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: '**WHAT YOU LEARNED**'
  id: totrans-8589
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**你学到了什么**'
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8590
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
- en: In this chapter, you learned how to hook up written code to your app’s visual
    interface. You also learned how to use the input text fields and date picker to
    create a Birthday object with firstName , lastName , and birthdate properties.
    Right now you can save Birthday s, but you can’t see them after you saved them.
    In [Chapter 11](text00022.html#ch11) , we’ll show you how to display a list of
    your birthdays in a Birthdays table view controller.
  id: totrans-8591
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何将编写的代码与应用程序的视觉界面连接起来。你还学习了如何使用输入文本字段和日期选择器来创建一个包含 firstName、lastName
    和 birthdate 属性的 Birthday 对象。现在，你可以保存 Birthday 对象，但保存后无法查看它们。在[第11章](text00022.html#ch11)中，我们将展示如何在
    Birthdays 表格视图控制器中显示你的生日列表。
