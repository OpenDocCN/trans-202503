["```\npi@raspberrypi:~ $ cd ~/Desktop/Projects\npi@raspberrypi:~/Desktop/Projects $ mkdir Games_and_Toys\npi@raspberrypi:~/Desktop/Projects $ cd Games_and_Toys\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys $ cp -r /opt/\nsonic-pi/etc/samples/ .\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys $ cd samples\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys/samples $ ls\n```", "```\nambi_choir.flac        drum_cowbell.flac        elec_ping.flac\nambi_dark_woosh.flac   drum_cymbal_closed.flac  elec_plip.flac\n...\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys/samples $ sudo apt\ninstall libav-tools\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys/samples $ for f in\n*.flac; do avconv -i \"$f\" \"${f%.flac}.wav\"; done\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys/samples $ ls\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys/samples $ rm *.flac\n```", "```\npi@raspberrypi:~/Desktop/Projects/Games_and_Toys/samples $ omxplayer\ndrum_snare_soft.wav\n```", "```\n  #import the necessary libraries\n➊ import pygame.mixer\n  from pygame.mixer import Sound\n  from gpiozero import Button\n  from signal import pause\n\n  #create an object for the mixer module that loads and plays sounds\n➋ pygame.mixer.init()\n\n  #assign each button to a drum sound\n➌ button_sounds = {\n      Button(2): Sound(\"samples/drum_cymbal_open.wav\"),\n      Button(3): Sound(\"samples/drum_heavy_kick.wav\"),\n      Button(14): Sound(\"samples/drum_snare_hard.wav\"),\n      Button(15): Sound(\"samples/drum_cymbal_closed.wav\"),\n      Button(17): Sound(\"samples/drum_roll.wav\"),\n      Button(18): Sound(\"samples/perc_snap.wav\"),\n      Button(22): Sound(\"samples/loop_amen_full.wav\"),\n      Button(27): Sound(\"samples/loop_mika.wav\"),\n  }\n  #the sound plays when the button is pressed\n➍ for button, sound in button_sounds.items():\n      button.when_pressed = sound.play\n  #keep the program running to detect events\n➎ pause()\n```", "```\ndictionary_name = {key_1: value_1, key_2: value_2}\n```", "```\npi@raspberrypi:~ $ sudo apt update\npi@raspberrypi:~ $ sudo apt install npm\n```", "```\npi@raspberrypi:~ $ sudo npm install -g npm@3.x\npi@raspberrypi:~ $ hash –r\n```", "```\npi@raspberrypi:~ $ sudo npm install --unsafe-perm -g node-red-dashboard\n```", "```\npi@raspberrypi:~ $ sudo systemctl enable nodered.service\n```", "```\n➊ var msg1 = { payload: 0 };\n  var msg2 = { payload: 0 };\n  var msg3 = { payload: 0 };\n  var msg4 = { payload: 0 };\n  var msg5 = { payload: 0 };\n  var msg6 = { payload: 0 };\n➋ if (msg.payload === \"forward\") {\n     msg1.payload = 1;\n     msg2.payload = 1;\n     msg4.payload = 1;\n     msg5.payload = 1;\n  }\n  else if (msg.payload === \"left\") {\n     msg1.payload = 1;\n     msg2.payload = 1;\n  }\n  else if (msg.payload === \"right\") {\n     msg4.payload = 1;\n     msg5.payload = 1;\n  }\n  else if (msg.payload === \"reverse\") {\n     msg1.payload = 1;\n     msg3.payload = 1;\n     msg4.payload = 1;\n     msg6.payload = 1;\n  }\n➌ return [msg1, msg2, msg3, msg4, msg5, msg6];\n```"]