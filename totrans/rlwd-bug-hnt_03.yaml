- en: '**3'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3**'
- en: HTTP PARAMETER POLLUTION**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 参数污染**
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: '*HTTP parameter pollution (HPP)* is the process of manipulating how a website
    treats the parameters it receives during HTTP requests. The vulnerability occurs
    when an attacker injects extra parameters into a request and the target website
    trusts them, leading to unexpected behavior. HPP bugs can happen on the server
    side or on the client side. On the client side, which is usually your browser,
    you can see the effect of your tests. In many cases, HPP vulnerabilities depend
    on how server-side code uses values passed as parameters, which are controlled
    by an attacker. For this reason, finding these vulnerabilities might require more
    experimentation than other types of bugs.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*HTTP参数污染（HPP）* 是通过操控网站处理HTTP请求时接收的参数方式来进行的一种攻击过程。漏洞发生在攻击者注入额外的参数到请求中，而目标网站信任这些参数，导致出现意料之外的行为。HPP漏洞可能出现在服务器端或客户端。在客户端（通常是你的浏览器）中，你可以看到测试的效果。在许多情况下，HPP漏洞取决于服务器端代码如何使用作为参数传递的值，这些值由攻击者控制。因此，发现这些漏洞可能需要比其他类型的漏洞更多的实验。'
- en: In this chapter, we’ll begin by exploring the differences between server-side
    HPP and client-side HPP in general. Then I’ll use three examples involving popular
    social media channels to illustrate how to use HPP to inject parameters on target
    websites. Specifically, you’ll learn the differences between server- and client-side
    HPP, how to test for this vulnerability type, and where developers often make
    mistakes. As you’ll see, finding HPP vulnerabilities requires experimentation
    and persistence but can be worth the effort.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先探讨服务器端HPP与客户端HPP之间的一般区别。接着，我将使用三个涉及流行社交媒体平台的例子来说明如何利用HPP在目标网站上注入参数。具体来说，你将学习服务器端和客户端HPP之间的区别、如何测试这种类型的漏洞，以及开发人员常犯的错误。正如你将看到的，发现HPP漏洞需要实验和坚持，但它值得付出努力。
- en: '**Server-Side HPP**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**服务器端HPP**'
- en: 'In server-side HPP, you send the servers unexpected information in an attempt
    to make the server-side code return unexpected results. When you make a request
    to a website, the site’s servers process the request and return a response, as
    discussed in [Chapter 1](ch01.xhtml#ch01). In some cases, the servers don’t just
    return a web page but also run some code based on information they receive from
    the URL that is sent. This code runs only on the servers, so it’s essentially
    invisible to you: you can see the information you send and the results you get
    back, but the code in between isn’t available. Therefore, you can only infer what’s
    happening. Because you can’t see how the server’s code functions, server-side
    HPP depends on you identifying potentially vulnerable parameters and experimenting
    with them.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端HPP中，你会向服务器发送意料之外的信息，试图使服务器端的代码返回意外的结果。当你向网站发起请求时，网站的服务器会处理请求并返回响应，正如在[第1章](ch01.xhtml#ch01)中讨论的那样。在某些情况下，服务器不仅仅返回一个网页，还会根据它从URL中收到的信息运行一些代码。该代码仅在服务器端运行，因此对你来说是不可见的：你可以看到你发送的信息和收到的结果，但中间的代码是无法看到的。因此，你只能推测发生了什么。由于你无法看到服务器端代码的运行方式，服务器端HPP依赖于你识别潜在的易受攻击的参数并进行实验。
- en: 'Let’s look at an example: a server-side HPP could happen if your bank initiated
    transfers through its website by accepting URL parameters that were processed
    on its servers. Imagine that you could transfer money by entering values in the
    three URL parameters `from`, `to`, and `amount`. Each parameter specifies the
    account number to transfer money from, the account number to transfer to, and
    the amount to transfer, in that order. A URL with these parameters that transfers
    $5,000 from account number 12345 to account number 67890 might look like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子：如果你的银行通过其网站发起转账，接受由其服务器处理的URL参数，那么可能会发生服务器端HPP。假设你可以通过输入三个URL参数`from`、`to`和`amount`来转账。每个参数指定了转账的源账户、目标账户和转账金额，顺序如下。一个通过这些参数转账5000美元的URL可能如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It’s possible the bank could assume that it will receive only one `from` parameter.
    But what happens if you submit two, as in the following URL:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 银行可能会假设它只会收到一个`from`参数。但如果你提交两个参数，会发生什么呢？比如以下的URL：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This URL is initially structured in the same way as the first example but appends
    an extra `from` parameter that specifies another sending account, `ABCDEF`. In
    this situation, an attacker would send the extra parameter in the hopes that the
    application would validate the transfer using the first `from` parameter but withdraw
    the money using the second one. So, an attacker might be able to execute a transfer
    from an account they don’t own if the bank trusted the last `from` parameter it
    received. Instead of transferring $5,000 from account 12345 to 67890, the server-side
    code would use the second parameter and send money from account ABCDEF to 67890.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 URL 最初的结构与第一个示例相同，但添加了一个额外的 `from` 参数，指定了另一个发送账户 `ABCDEF`。在这种情况下，攻击者会发送额外的参数，希望应用程序使用第一个
    `from` 参数来验证转账，但使用第二个参数来提取资金。因此，如果银行信任最后一个收到的 `from` 参数，攻击者可能能够从他们不拥有的账户执行转账。服务器端代码将不会从账户
    12345 向 67890 转账 $5000，而是使用第二个参数，从账户 ABCDEF 向 67890 转账。
- en: 'When a server receives multiple parameters with the same name, it can respond
    in a variety of ways. For example, PHP and Apache use the last occurrence, Apache
    Tomcat uses the first occurrence, ASP and IIS use all occurrences, and so on.
    Two researchers, Luca Carettoni and Stefano di Paolo, provided a detailed presentation
    on the many differences between server technologies at the AppSec EU 09 conference:
    this information is now available on the OWASP website at *[https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf](https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf)*
    (see slide 9). As a result, there is no single guaranteed process for handling
    multiple parameter submissions with the same name, and finding HPP vulnerabilities
    takes some experimentation to confirm how the site you’re testing works.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器接收到多个具有相同名称的参数时，它可以以多种方式进行响应。例如，PHP 和 Apache 使用最后一个出现的参数，Apache Tomcat 使用第一个出现的参数，ASP
    和 IIS 使用所有出现的参数，等等。两位研究员 Luca Carettoni 和 Stefano di Paolo 在 AppSec EU 09 大会上对服务器技术之间的许多差异进行了详细介绍：这些信息现在可以在
    OWASP 网站上找到，网址为 *[https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf](https://www.owasp.org/images/b/ba/AppsecEU09_CarettoniDiPaola_v0.8.pdf)*（请参见幻灯片
    9）。因此，处理多个具有相同名称的参数提交时，并没有一个单一的保证过程，发现 HPP 漏洞需要通过实验来确认你正在测试的网站是如何工作的。
- en: 'The bank example uses parameters that are obvious. But sometimes HPP vulnerabilities
    occur as a result of hidden server-side behavior from code that isn’t directly
    visible. For example, let’s say your bank decides to revise the way it processes
    transfers and changes its backend code to not include a `from` parameter in the
    URL. This time, the bank will take two parameters, one for the account to transfer
    to and the other for the amount to transfer. The account to transfer from will
    be set by the server, which is invisible to you. An example link might look like
    this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个银行示例使用了显而易见的参数。但有时，HPP 漏洞是由于隐藏的服务器端行为引起的，这些行为来自于不直接可见的代码。例如，假设你的银行决定修改处理转账的方式，并更改其后端代码，不再在
    URL 中包含 `from` 参数。这次，银行将接收两个参数，一个是接收转账的账户，另一个是转账金额。要转账的账户将由服务器设置，对你不可见。一个示例链接可能如下所示：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Normally, the server-side code would be a mystery to us, but for the sake of
    this example, we know that the bank’s (overtly terrible and redundant) server-side
    Ruby code looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，服务器端代码对我们来说是个谜，但为了这个示例，我们知道银行（明显糟糕且冗余的）服务器端 Ruby 代码如下所示：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This code creates two functions, `prepare_transfer` and `transfer_money`. The
    `prepare_transfer` function takes an array called `params` ➊, which contains the
    `to` and `amount` parameters from the URL. The array would be `[67890,5000]`,
    where the array values are sandwiched between brackets and each value is separated
    by a comma. The first line of the function ➋ adds the user account information
    that was defined earlier in the code to the end of the array. We end up with the
    array `[67890,5000,12345]` in `params`, and then `params` is passed to `transfer_money`
    ➌. Notice that unlike parameters, arrays don’t have names associated with their
    values, so the code depends on the array always containing each value in order:
    the account to transfer to is first, the amount to transfer is next, and the account
    to transfer from follows the other two values. In `transfer_money`, the order
    of the values becomes evident as the function assigns each array value to a variable.
    Because array locations are numbered starting from 0, `params[0]` accesses the
    value at the first location in the array, which is `67890` in this case, and assigns
    it to the variable `to` ➍. The other values are also assigned to variables at
    lines ➎ and ➏. Then the variable names are passed to the `transfer` function,
    not shown in this code snippet, which takes the values and transfers the money.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了两个函数，`prepare_transfer` 和 `transfer_money`。`prepare_transfer` 函数接受一个名为
    `params` ➊ 的数组，该数组包含 URL 中的 `to` 和 `amount` 参数。数组为 `[67890,5000]`，其中数组值被括号包围，且每个值之间由逗号分隔。函数的第一行
    ➋ 将之前在代码中定义的用户账户信息添加到数组的末尾。最终，我们会在 `params` 中得到数组 `[67890,5000,12345]`，然后将 `params`
    传递给 `transfer_money` ➌。请注意，与参数不同，数组没有与值关联的名称，因此代码依赖于数组始终按顺序包含每个值：第一个是要转账的账户，接下来是转账金额，最后是转账来源账户。
    在 `transfer_money` 中，值的顺序变得显而易见，因为函数将每个数组值分配给一个变量。由于数组的位置是从 0 开始编号的，`params[0]`
    访问数组中的第一个位置的值，在此案例中是 `67890`，并将其分配给变量 `to` ➍。其他值也分别在第 ➎ 和 ➏ 行分配给变量。然后，变量名被传递给
    `transfer` 函数（该代码片段中未显示），该函数接受这些值并执行转账。
- en: 'Ideally, the URL parameters would always be formatted in the way the code expects.
    However, an attacker could change the outcome of this logic by passing in a `from`
    value to `params`, as with the following URL:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，URL 参数应始终按代码预期的格式进行格式化。然而，攻击者可以通过向 `params` 传递 `from` 值来改变该逻辑的结果，如以下 URL
    所示：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, the `from` parameter is also included in the `params` array passed
    to the `prepare_transfer` function; therefore, the array’s values would be `[67890,5000,ABCDEF]`,
    and adding the user account at ➋ would result in `[67890,5000,ABCDEF,12345]`.
    As a result, in the `transfer_money` function called in `prepare_transfer`, the
    `from` variable would take the third parameter, expecting the `user.account` value
    `12345`, but would actually reference the attacker-passed value `ABCDEF` ➍.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`from` 参数也包含在传递给 `prepare_transfer` 函数的 `params` 数组中；因此，数组的值将是 `[67890,5000,ABCDEF]`，并且在
    ➋ 添加用户账户后，结果会变为 `[67890,5000,ABCDEF,12345]`。因此，在 `prepare_transfer` 中调用的 `transfer_money`
    函数中，`from` 变量将获取第三个参数，期望 `user.account` 的值为 `12345`，但实际上会引用攻击者传递的值 `ABCDEF` ➍。
- en: '**Client-Side HPP**'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**客户端 HPP**'
- en: Client-side HPP vulnerabilities allow attackers to inject extra parameters into
    a URL to create effects on a user’s end (*client side* is a common way of referring
    to actions that happen on your computer, often via the browser, and not on the
    site’s servers).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端 HPP 漏洞允许攻击者向 URL 中注入额外的参数，以在用户端（*客户端*是指在你的计算机上发生的操作，通常通过浏览器，而不是在网站的服务器上发生）产生效果。
- en: 'Luca Carettoni and Stefano di Paola included an example of this behavior in
    their presentation using the theoretical URL *http://host/page.php?par=123%26action=edit*
    and the following server-side code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Luca Carettoni 和 Stefano di Paola 在他们的演示中使用了理论 URL *http://host/page.php?par=123%26action=edit*
    及以下服务器端代码，展示了这种行为的一个例子：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code generates a new URL based on the value of `par`, a user-entered parameter.
    In this example, the attacker passes the value `123%26action=edit` as the value
    for `par` to generate an additional, unintended parameter. The URL-encoded value
    for `&` is `%26`, which means that when the URL is parsed, the `%26` is interpreted
    as `&`. This value adds an additional parameter to the generated `href` without
    making the action parameter explicit in the URL. Had the parameter used `123&action=edit`
    instead of `%26`, the `&` would have been interpreted as separating two different
    parameters, but because the site is only using the parameter `par` in its code,
    the `action` parameter would be dropped. The value `%26` works around this by
    making sure action isn’t initially recognized as a separate parameter, and so
    `123%26action=edit` becomes the value of `par`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码基于`par`的值（一个用户输入的参数）生成一个新的URL。在这个示例中，攻击者将值`123%26action=edit`作为`par`的值传递，从而生成了一个额外的、未预期的参数。`&`的URL编码值是`%26`，这意味着当URL被解析时，`%26`会被解释为`&`。这个值会向生成的`href`中添加一个额外的参数，而不会让`action`参数在URL中显现。如果参数使用的是`123&action=edit`而不是`%26`，`&`会被解释为分隔两个不同的参数，但由于站点的代码只使用了`par`参数，`action`参数将被丢弃。使用`%26`的值可以绕过这一点，确保`action`不会最初被识别为一个单独的参数，因此`123%26action=edit`成为了`par`的值。
- en: Next, `par` (with the encoded `&` as `%26`) is passed to the function `htmlspecialchars`
    ➊. The `htmlspecialchars` function converts special characters, such as `%26`,
    to their HTML-encoded values, turning `%26` into `&amp;` (the HTML entity that
    represents `&` in HTML), where that character might have special meaning. The
    converted value is then stored in `$val`. Then a new link is generated by appending
    `$val` to the `href` value at ➋. So the generated link becomes `<a href="/page.php?action=view&par=123`&amp;action=edit`">`.
    Consequently, the attacker has managed to add the additional `action=edit` to
    the `href` URL, which could lead to a vulnerability depending on how the application
    handles the smuggled `action` parameter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`par`（其编码后的`&`为`%26`）被传递给函数`htmlspecialchars` ➊。`htmlspecialchars`函数将特殊字符（如`%26`）转换为其HTML编码值，将`%26`转化为`&amp;`（HTML实体，用于表示HTML中的`&`），在该字符可能具有特殊含义的地方。转换后的值被存储在`$val`中。然后通过将`$val`附加到`href`值上，生成了一个新的链接，位置见➋。因此，生成的链接变为`<a
    href="/page.php?action=view&par=123`&amp;action=edit`">`。因此，攻击者成功地将额外的`action=edit`添加到了`href`网址中，这可能会导致漏洞，具体取决于应用程序如何处理这个被夹带的`action`参数。
- en: The following three examples detail both client and server-side HPP vulnerabilities
    found on HackerOne and Twitter. All of these examples involved URL parameter tampering.
    However, you should note that no two examples were found using the same method
    or share the same root cause, reinforcing the importance of thorough testing when
    looking for HPP vulnerabilities.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下三个示例详细介绍了在HackerOne和Twitter上发现的客户端和服务器端HPP漏洞。这些示例都涉及了URL参数篡改。然而，需要注意的是，没有两个示例是通过相同的方法发现的，也没有共享相同的根本原因，这进一步强调了在寻找HPP漏洞时彻底测试的重要性。
- en: '**HackerOne Social Sharing Buttons**'
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**HackerOne 社交分享按钮**'
- en: '**Difficulty:** Low'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度:** 低'
- en: '**URL:** *[https://hackerone.com/blog/introducing-signal-and-impact/](https://hackerone.com/blog/introducing-signal-and-impact/)*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址:** *[https://hackerone.com/blog/introducing-signal-and-impact/](https://hackerone.com/blog/introducing-signal-and-impact/)*'
- en: '**Source:** *[https://hackerone.com/reports/105953/](https://hackerone.com/reports/105953/)*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源:** *[https://hackerone.com/reports/105953/](https://hackerone.com/reports/105953/)*'
- en: '**Date reported:** December 18, 2015'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期:** 2015年12月18日'
- en: '**Bounty paid:** $500'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励金额:** $500'
- en: One way to find HPP vulnerabilities is to look for links that appear to contact
    other services. HackerOne blog posts do just that by including links to share
    content on popular social media sites, such as Twitter, Facebook, and so on. When
    clicked, these HackerOne links generate content for the user to publish on social
    media. The published content includes a URL reference to the original blog post.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查找HPP漏洞的一种方法是寻找看似与其他服务联系的链接。HackerOne博客文章正是通过包括分享到流行社交媒体网站（如Twitter、Facebook等）的链接来做到这一点。当点击这些链接时，HackerOne链接会生成内容供用户在社交媒体上发布。发布的内容包括指向原始博客文章的URL引用。
- en: One hacker discovered a vulnerability that allowed you to tack on a parameter
    to the URL of a HackerOne blog post. The added URL parameter would be reflected
    in the shared social media link so that the generated social media content would
    link to somewhere other than the intended HackerOne blog URL.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一位黑客发现了一个漏洞，允许你在HackerOne博客帖子的网址中附加一个参数。添加的URL参数会反映在共享的社交媒体链接中，从而使生成的社交媒体内容链接到目标HackerOne博客网址以外的地方。
- en: 'The example used in the vulnerability report involved visiting the URL *https://hackerone.com/blog/introducing-signal*
    and then adding *&u=https://vk.com/durov* to the end of it. On the blog page,
    when HackerOne rendered a link to share on Facebook, the link would become the
    following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 漏洞报告中使用的示例涉及访问网址*https://hackerone.com/blog/introducing-signal*，然后在末尾添加*&u=https://vk.com/durov*。在博客页面，当HackerOne渲染一个分享到Facebook的链接时，链接将变成如下：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If HackerOne visitors clicked this maliciously updated link while trying to
    share content, the last `u` parameter would be given precedence over the first
    `u` parameter. Subsequently, the Facebook post would use the last `u` parameter.
    Then Facebook users who clicked the link would be directed to *[https://vk.com/durov](https://vk.com/durov)*
    instead of HackerOne.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HackerOne的访客在尝试分享内容时点击了这个恶意更新的链接，最后一个`u`参数会优先于第一个`u`参数。随后，Facebook帖子将使用最后一个`u`参数。然后，点击该链接的Facebook用户将被引导到*[https://vk.com/durov](https://vk.com/durov)*，而不是HackerOne。
- en: 'In addition, when posting to Twitter, HackerOne includes default tweet text
    that promotes the post. Attackers could also manipulate this text by including
    `&text=` in the URL, like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在发布到Twitter时，HackerOne会包含默认的推文文本来推广该帖子。攻击者还可以通过在URL中加入`&text=`来操控这段文本，像这样：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When a user clicked this link, they would get a tweet pop-up containing the
    text “another_site: [https://vk.com/durov](https://vk.com/durov)” instead of text
    promoting the HackerOne blog.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '当用户点击这个链接时，他们会看到一个包含文本“another_site: [https://vk.com/durov](https://vk.com/durov)”的推文弹窗，而不是推广HackerOne博客的文本。'
- en: '***Takeaways***'
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***总结***'
- en: Be on the lookout for vulnerability opportunities when websites accept content,
    appear to be contacting another web service (such as social media sites), and
    rely on the current URL to generate the content to be published.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站接受内容、似乎在联系另一个网络服务（如社交媒体网站），并依赖当前URL生成待发布内容时，注意漏洞机会。
- en: In these situations, it’s possible that submitted content is being passed on
    without undergoing proper security checks, which could lead to parameter pollution
    vulnerabilities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，提交的内容可能在未经适当的安全检查的情况下被传递，这可能导致参数污染漏洞。
- en: '**Twitter Unsubscribe Notifications**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Twitter取消订阅通知**'
- en: '**Difficulty:** Low'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** *[https://www.twitter.com/](https://www.twitter.com/)*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**网址：** *[https://www.twitter.com/](https://www.twitter.com/)*'
- en: '**Source:** *https://blog.mert.ninja/twitter-hpp-vulnerability/*'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *https://blog.mert.ninja/twitter-hpp-vulnerability/*'
- en: '**Date reported:** August 23, 2015'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年8月23日'
- en: '**Bounty paid:** $700'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** $700'
- en: 'In some cases, successfully finding an HPP vulnerability takes persistence.
    In August 2015, hacker Mert Tasci noticed an interesting URL (which I’ve shortened
    here) when unsubscribing from receiving Twitter notifications:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，成功发现HPP漏洞需要坚持不懈。2015年8月，黑客Mert Tasci在取消订阅接收Twitter通知时注意到了一个有趣的网址（我在这里进行了简化）：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice the parameter `UID`. This `UID` happens to be the user ID of the currently
    signed-in Twitter account. After noticing the `UID`, Tasci did what most hackers
    would do—he tried changing the `UID` to that of another user, but nothing happened.
    Twitter just returned an error.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到参数`UID`。这个`UID`恰好是当前登录的Twitter账户的用户ID。在注意到`UID`后，Tasci做了大多数黑客会做的事情——他尝试将`UID`更改为另一个用户的`UID`，但什么也没发生。Twitter仅返回了一个错误。
- en: 'Determined to continue when others might have given up, Tasci tried adding
    a second `UID` parameter so the URL looked like this (again, a shortened version):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持继续，而其他人可能已经放弃，Tasci尝试添加第二个`UID`参数，因此URL看起来像这样（同样是简化版）：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Success! He managed to unsubscribe another user from their email notifications.
    Twitter was vulnerable to HPP unsubscribing of users. The reason this vulnerability
    is noteworthy, as explained to me by FileDescriptor, relates to the `SIG` parameter.
    As it turns out, Twitter generates the `SIG` value using the `UID` value. When
    a user clicks the unsubscribe URL, Twitter validates that the `URL` has not been
    tampered with by checking the `SIG` and `UID` values. So, in Tasci’s initial test,
    changing the `UID` to unsubscribe another user failed because the signature no
    longer matched what Twitter was expecting. However, by adding a second `UID`,
    Tasci succeeded in making Twitter validate the signature with the first `UID`
    parameter but perform the unsubscribe action using the second `UID` parameter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！他成功地将另一位用户从他们的邮件通知中取消订阅。Twitter 存在 HPP 用户取消订阅漏洞。正如 FileDescriptor 向我解释的那样，这个漏洞之所以值得注意，是因为它与
    `SIG` 参数有关。事实证明，Twitter 使用 `UID` 值来生成 `SIG` 值。当用户点击取消订阅的 URL 时，Twitter 会验证该 `URL`
    是否没有被篡改，通过检查 `SIG` 和 `UID` 的值。因此，在 Tasci 的第一次测试中，改变 `UID` 以取消另一个用户的订阅失败了，因为签名不再与
    Twitter 预期的匹配。然而，通过添加第二个 `UID`，Tasci 成功地使 Twitter 用第一个 `UID` 参数验证签名，但使用第二个 `UID`
    参数执行了取消订阅操作。
- en: '***Takeaways***'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: Tasci’s efforts demonstrate the importance of persistence and knowledge. If
    he had walked away from the vulnerability after changing the `UID` to another
    user’s and failing or had he not known about HPP-type vulnerabilities, he wouldn’t
    have received his $700 bounty.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Tasci 的努力展示了坚持和知识的重要性。如果他在更改 `UID` 为另一个用户的值并失败后放弃，或者如果他不知道 HPP 类型的漏洞，他将无法获得
    $700 的奖励。
- en: 'Also, keep an eye out for parameters with auto-incremented integers, like `UID`,
    that are included in HTTP requests: many vulnerabilities involve manipulating
    parameter values like these to make web applications behave in unexpected ways.
    I’ll discuss this in more detail in [Chapter 16](ch16.xhtml#ch16).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还要留意那些包含自动递增整数的参数，如 `UID`，这些参数通常会出现在 HTTP 请求中：许多漏洞都涉及到操控这些参数的值，使得 Web 应用程序的行为变得出乎意料。我将在[第16章](ch16.xhtml#ch16)中更详细地讨论这一点。
- en: '**Twitter Web Intents**'
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Twitter Web Intents**'
- en: '**Difficulty:** Low'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**难度：** 低'
- en: '**URL:** *[https://twitter.com/](https://twitter.com/)*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL：** *[https://twitter.com/](https://twitter.com/)*'
- en: '**Source:** *[https://ericrafaloff.com/parameter-tampering-attack-on-twitter-web-intents/](https://ericrafaloff.com/parameter-tampering-attack-on-twitter-web-intents/)*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源：** *[https://ericrafaloff.com/parameter-tampering-attack-on-twitter-web-intents/](https://ericrafaloff.com/parameter-tampering-attack-on-twitter-web-intents/)*'
- en: '**Date reported:** November 2015'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**报告日期：** 2015年11月'
- en: '**Bounty paid:** Undisclosed'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励支付：** 未披露'
- en: In some cases, an HPP vulnerability can be indicative of other issues and can
    lead to finding additional bugs. This is what happened in the Twitter Web Intents
    feature. The feature provides pop-up flows for working with Twitter users’ tweets,
    replies, retweets, likes, and follows in the context of non-Twitter sites. Twitter
    Web Intents make it possible for users to interact with Twitter content without
    leaving the page or having to authorize a new app just for the interaction. [Figure
    3-1](ch03.xhtml#ch03fig01) shows an example of what one of these pop-ups looks
    like.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，HPP 漏洞可能暗示着其他问题，并可能导致发现其他 bug。这就是 Twitter Web Intents 功能中发生的情况。该功能提供了在非
    Twitter 网站的上下文中与 Twitter 用户的推文、回复、转发、点赞和关注互动的弹出流程。Twitter Web Intents 使用户能够在不离开页面的情况下与
    Twitter 内容互动，也无需仅仅为了互动而授权新的应用程序。[图 3-1](ch03.xhtml#ch03fig01) 显示了这些弹出窗口的一个示例。
- en: '![image](../images/03fig01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/03fig01.jpg)'
- en: '*Figure 3-1: An early version of the Twitter Web Intents feature, which allows
    users to interact with Twitter content without leaving the page. In this example,
    users can like Jack’s tweet.*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3-1：Twitter Web Intents 功能的早期版本，它允许用户在不离开页面的情况下与 Twitter 内容进行互动。在这个例子中，用户可以点赞
    Jack 的推文。*'
- en: 'Testing this feature, hacker Eric Rafaloff found that all four intent types—following
    a user, liking a tweet, retweeting, and tweeting—were vulnerable to HPP. Twitter
    would create each intent via a `GET` request with URL parameters like the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试此功能时，黑客 Eric Rafaloff 发现所有四种意图类型——关注用户、点赞推文、转发推文和发推文——都存在 HPP 漏洞。Twitter
    会通过一个 `GET` 请求创建每个意图，URL 参数如下：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This URL would include intentType and one or more parameter name/value pairs—for
    example, a Twitter username and Tweet ID. Twitter would use these parameters to
    create the pop-up intent to display the user to follow or tweet to like. Rafaloff
    discovered a problem when he created a URL with two `screen_name` parameters instead
    of the expected singular `screen_name` for a follow intent:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该 URL 将包括 intentType 和一个或多个参数名/值对——例如，Twitter 用户名和推文 ID。Twitter 将使用这些参数来创建弹出意图，显示用户要关注的对象或要点赞的推文。Rafaloff
    发现当他创建一个包含两个 `screen_name` 参数的 URL 时，而不是预期的单一 `screen_name` 参数时，出现了问题：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Twitter would handle the request by giving precedence to the second `screen_name`
    value, `ericrtest3`, instead of the first `twitter` value when generating a Follow
    button. Consequently, a user attempting to follow Twitter’s official account could
    be tricked into following Rafaloff’s test account. Visiting the URL Rafaloff created
    would cause Twitter’s backend code to generate the following HTML form using the
    two `screen_name` parameters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter 会处理请求，优先使用第二个 `screen_name` 值 `ericrtest3`，而不是第一个 `twitter` 值来生成 Follow
    按钮。因此，试图关注 Twitter 官方账户的用户可能会被欺骗去关注 Rafaloff 的测试账户。访问 Rafaloff 创建的 URL 会导致 Twitter
    后端代码使用两个 `screen_name` 参数生成以下 HTML 表单：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Twitter would use the information from the first `screen_name` parameter, which
    is associated with the official Twitter account. As a result, a target would see
    the correct profile of the user they intended to follow because the URL’s first
    `screen_name` parameter is used to populate the code at ➋ and ➌. But, after clicking
    the button, the target would follow `ericrtest3`, because the action in the form
    tag would instead use the second `screen_name` parameter’s value ➊ passed to the
    original URL.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter 会使用第一个 `screen_name` 参数中的信息，这个参数与官方 Twitter 账户相关联。因此，目标用户会看到他们打算关注的用户的正确个人资料，因为
    URL 中的第一个 `screen_name` 参数用于填充 ➋ 和 ➌ 处的代码。但是，点击按钮后，目标用户将会关注 `ericrtest3`，因为表单标签中的操作将使用传递给原始
    URL 的第二个 `screen_name` 参数值 ➊。
- en: 'Similarly, when presenting intents for liking, Rafaloff found he could include
    a `screen_name` parameter despite its having no relevance to liking the tweet.
    For example, he could create this URL:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当提出点赞意图时，Rafaloff 发现他可以在没有与点赞推文相关的情况下，仍然包含一个 `screen_name` 参数。例如，他可以创建这个
    URL：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A normal like intent would only need the `tweet_id` parameter; however, Rafaloff
    injected the `screen_name` parameter to the end of the URL. Liking this tweet
    would result in a target’s being presented with the correct owner profile to like
    the tweet. But the Follow button next to the correct tweet and the correct profile
    of the tweeter would be for the unrelated user `ericrtest3`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个普通的点赞意图只需要 `tweet_id` 参数；然而，Rafaloff 将 `screen_name` 参数注入到 URL 的末尾。点赞这条推文将导致目标用户看到正确的推文所有者的个人资料来进行点赞。但正确的推文旁边的
    Follow 按钮以及推文作者的正确个人资料会显示为与之无关的用户 `ericrtest3`。
- en: '***Takeaways***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***要点***'
- en: The Twitter Web Intents vulnerability is similar to the previous `UID` Twitter
    vulnerability. Unsurprisingly, when a site is vulnerable to a flaw like HPP, it
    might be indicative of a broader systemic issue. Sometimes, when you find such
    a vulnerability, it’s worth taking the time to explore the platform in its entirety
    to see if there are other areas where you might be able to exploit similar behavior.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter Web Intents 漏洞与之前的 `UID` Twitter 漏洞类似。不出所料，当一个网站容易受到像 HPP 这样的漏洞影响时，可能意味着更广泛的系统性问题。有时，当你发现这样的漏洞时，值得花时间全面探索平台，看看是否有其他地方也可以利用类似的行为。
- en: '**Summary**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: The risk posed by HPP is contingent on the actions a site’s backend performs
    and where the polluted parameters are being used.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: HPP 所带来的风险取决于网站后端执行的操作以及污染参数的使用位置。
- en: Discovering HPP vulnerabilities requires thorough testing, more so than for
    some other vulnerabilities, because we usually can’t access the code servers run
    after receiving our HTTP request. This means we can only infer how sites handle
    the parameters we pass to them.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 发现 HPP 漏洞需要彻底的测试，比某些其他漏洞更为重要，因为我们通常无法访问服务器在收到 HTTP 请求后运行的代码。这意味着我们只能推测网站如何处理我们传递给它们的参数。
- en: Through trial and error, you might discover situations in which HPP vulnerabilities
    occur. Usually, social media links are a good first place to test for this vulnerability
    type, but remember to keep digging and think of HPP when you’re testing for parameter
    substitutions, such as ID-like values.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反复试验，你可能会发现HPP漏洞发生的情况。通常，社交媒体链接是测试这种漏洞类型的一个好起点，但记得继续深入挖掘，并在测试参数替换时考虑HPP漏洞，例如类似ID的值。
