- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Error Handling
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: For all but the simplest programs, you will have methods that can fail. In this
    chapter, we’ll look at different ways to represent, handle, and propagate those
    failures and the advantages and drawbacks of each. We’ll start by exploring different
    ways to represent errors, including enumeration and erasure, and then examine
    some special error cases that require a different representation technique. Next,
    we’ll look at various ways of handling errors and the future of error handling.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于除最简单的程序之外的所有程序，你将会有可能失败的方法。在本章中，我们将探讨不同的表示、处理和传播这些失败的方式，以及每种方式的优缺点。我们将从探索表示错误的不同方式开始，包括枚举和擦除，然后检查一些需要不同表示技术的特殊错误情况。接下来，我们将研究各种错误处理方式以及错误处理的未来发展。
- en: It’s worth noting that best practices for error handling in Rust are still an
    active topic of conversation, and at the time of writing, the ecosystem has not
    yet settled on a single, unified approach. This chapter will therefore focus on
    the underlying principles and techniques rather than recommending specific crates
    or patterns.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Rust 中的错误处理最佳实践仍然是一个活跃的话题，在写作时，生态系统尚未统一采用单一的方法。因此，本章将侧重于基本原则和技术，而不是推荐具体的
    crate 或模式。
- en: Representing Errors
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示错误
- en: When you write code that can fail, the most important question to ask yourself
    is how your users will interact with any errors returned. Will users need to know
    exactly which error happened and the minutiae about what went wrong, or will they
    simply log that an error occurred and move on as best they can? To understand
    this, we have to look at whether the nature of the error is likely to affect what
    the caller does upon receiving it. This in turn will dictate how we represent
    different errors.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写可能失败的代码时，最重要的问题是问自己，用户如何与返回的错误进行交互。用户需要确切知道发生了什么错误以及具体出了什么问题，还是仅仅记录发生了错误并尽可能继续前进？要理解这一点，我们必须考虑错误的性质是否可能影响调用者收到错误后的行为。这反过来将决定我们如何表示不同的错误。
- en: 'You have two main options for representing errors: enumeration and erasure.
    That is, you can either have your error type *enumerate* the possible error conditions
    so that the caller can distinguish them, or you can just provide the caller with
    a single, *opaque* error. Let’s discuss these two options in turn.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你有两种主要选项来表示错误：枚举和擦除。也就是说，你可以让错误类型 *枚举* 可能的错误条件，以便调用者能够区分它们，或者你可以仅提供一个单一的、*不透明*
    的错误给调用者。让我们依次讨论这两种选项。
- en: Enumeration
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举
- en: For our example, we’ll use a library function that copies bytes from some input
    stream into some output stream, much like `std::io::copy`. The user provides you
    with two streams, one to read from and one to write to, and you copy the bytes
    from one to the other. During this process, it’s entirely possible for either
    stream to fail, at which point the copy has to stop and return an error to the
    user. Here, the user will likely want to know whether it was the input stream
    or the output stream that failed. For example, in a web server, if an error occurs
    on the input stream while streaming a file to a client, it might be because a
    disk was ejected, whereas if the output stream errors, maybe the client just disconnected.
    The latter may be an error the server should ignore, since copies to new connections
    can still complete, whereas the former may require that the whole server be shut
    down!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将使用一个库函数，它将字节从某个输入流复制到某个输出流，类似于 `std::io::copy`。用户为你提供两个流，一个用于读取，另一个用于写入，你将字节从一个流复制到另一个流。在此过程中，任一流都可能失败，此时复制必须停止并向用户返回错误。在这里，用户可能想知道是输入流失败了还是输出流失败了。例如，在一个
    Web 服务器中，如果在将文件流式传输到客户端时输入流发生错误，可能是因为磁盘被弹出了，而如果输出流出错，可能是客户端断开了连接。后者可能是服务器应该忽略的错误，因为新的连接仍然可以完成复制，而前者可能需要服务器关闭！
- en: This is a case where we want to enumerate the errors. The user needs to be able
    to distinguish between the different error cases so that they can respond appropriately,
    so we use an `enum` named `CopyError`, with each variant representing a separate
    underlying cause for the error, like in [Listing 4-1](#listing4-1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个我们希望枚举错误的情况。用户需要能够区分不同的错误情况，以便他们能够做出适当的响应，因此我们使用一个名为 `CopyError` 的 `enum`，每个变体表示错误的不同根本原因，类似于
    [列表 4-1](#listing4-1)。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 4-1: An enumerated error type'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 4-1：枚举错误类型
- en: Each variant also includes the error that was encountered to provide the caller
    with as much information about went wrong as possible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个变体还包括遇到的错误，以尽可能多地提供关于出错原因的信息。
- en: 'When making your own error type, you need to take a number of steps to make
    the error type play nicely with the rest of the Rust ecosystem. First, your error
    type should implement the `std::error::Error` trait, which provides callers with
    common methods for introspecting error types. The main method of interest is `Error::source`,
    which provides a mechanism to find the underlying cause of an error. This is most
    commonly used to print a backtrace that displays a trace all the way back to the
    error’s root cause. For our `CopyError` type, the implementation of `source` is
    straightforward: we match on `self` and extract and return the inner `std::io::Error`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建你自己的错误类型时，你需要采取一些步骤，使错误类型能够与Rust生态系统中的其他部分良好配合。首先，你的错误类型应该实现`std::error::Error`特性，它为调用者提供了用于检查错误类型的常用方法。最重要的方法是`Error::source`，它提供了一种机制来找到错误的根本原因。这通常用于打印回溯，以显示从错误的根源到当前错误的完整追踪。对于我们的`CopyError`类型，`source`的实现非常直接：我们根据`self`进行匹配，提取并返回内部的`std::io::Error`。
- en: Second, your type should implement both `Display` and `Debug` so that callers
    can meaningfully print your error. This is required if you implement the `Error`
    trait. In general, your implementation of `Display` should give a one-line description
    of what went wrong that can easily be folded into other error messages. The display
    format should be lowercase and without trailing punctuation so that it fits nicely
    into other, larger error reports. `Debug` should provide a more descriptive error
    including auxiliary information that may be useful in tracking down the cause
    of the error, such as port numbers, request identifiers, filepaths, and the like,
    which `#[derive(Debug)]` is usually sufficient for.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你的类型应该实现`Display`和`Debug`，以便调用者能够有意义地打印错误。这是实现`Error`特性时的要求。一般来说，你的`Display`实现应该提供一行简短的描述，说明出了什么问题，并且能够轻松地整合到其他错误消息中。显示格式应为小写并且没有结尾标点，以便能够很好地融入到其他更大的错误报告中。`Debug`应该提供更详细的错误描述，包括可能有助于追踪错误原因的辅助信息，如端口号、请求标识符、文件路径等，通常`#[derive(Debug)]`就足够了。
- en: Third, your type should, if possible, implement both `Send` and `Sync` so that
    users are able to share the error across thread boundaries. If your error type
    is not thread-safe, you will find that it’s almost impossible to use your crate
    in a multithreaded context. Error types that implement `Send` and `Sync` are also
    much easier to use with the very common `std::io::Error` type, which is able to
    wrap errors that implement `Error`, `Send`, and `Sync`. Of course, not all error
    types can reasonably be `Send` and `Sync`, such as if they’re tied to particular
    thread-local resources, and that’s okay. You’re probably not sending those errors
    across thread boundaries either. However, it’s something to be aware of before
    you go placing `Rc<String>` and `RefCell<bool>` types in your errors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，你的类型应该实现`Send`和`Sync`，这样用户就能够跨线程边界共享错误。如果你的错误类型不是线程安全的，你会发现几乎无法在多线程环境中使用你的库。实现了`Send`和`Sync`的错误类型也更容易与非常常见的`std::io::Error`类型一起使用，因为它能够包装实现了`Error`、`Send`和`Sync`的错误。当然，并非所有错误类型都能合理地实现`Send`和`Sync`，例如，如果它们依赖于特定的线程局部资源，这也没问题。你可能也不会将这些错误跨线程边界传递。不过，在你将`Rc<String>`和`RefCell<bool>`类型放入你的错误中之前，最好意识到这一点。
- en: Finally, where possible, your error type should be `'static`. The most immediate
    benefit of this is that it allows the caller to more easily propagate your error
    up the call stack without running into lifetime issues. It also enables your error
    type to be used more easily with type-erased error types, as we’ll see shortly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果可能的话，你的错误类型应该是`'static`。这带来的直接好处是，它允许调用者更轻松地将错误传播到调用栈的上层，而不会遇到生命周期问题。它还使得你的错误类型能够更方便地与类型擦除的错误类型一起使用，稍后我们将看到这一点。
- en: Opaque Errors
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不透明错误
- en: 'Now let’s consider a different example: an image decoding library. You give
    the library a bunch of bytes to decode, and it gives you access to various image
    manipulation methods. If the decoding fails, the user needs to be able to figure
    out how to resolve the issue, and so must understand the cause. But is it important
    whether the cause is the `size` field in the image header being invalid, or the
    compression algorithm failing to decompress a block? Probably not—the application
    can’t meaningfully recover from either situation, even if it knows the exact cause.
    In cases like this, you as the library author may instead want to provide a single,
    opaque error type. This also makes your library a little nicer to use, because
    there is only one error type in use everywhere. This error type should implement
    `Send`, `Debug`, `Display`, and `Error` (including the `source` method where appropriate),
    but beyond that, the caller doesn’t need to know anything more. You might internally
    represent more fine-grained error states, but there is no need to expose those
    to the users of the library. Doing so would only serve to unnecessarily increase
    the size and complexity of your API.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑一个不同的例子：一个图像解码库。你给这个库一堆字节来解码，它会让你访问各种图像处理方法。如果解码失败，用户需要能够弄清楚如何解决问题，因此必须了解原因。但问题的原因是图像头部的`size`字段无效，还是压缩算法无法解压某个块，是否重要呢？可能不重要——即使知道确切的原因，应用程序也无法从这两种情况中有效恢复。在这种情况下，你作为库的作者可能更愿意提供一个单一的不透明错误类型。这也使得你的库更加易于使用，因为在任何地方只有一个错误类型。这个错误类型应该实现`Send`、`Debug`、`Display`和`Error`（在适当的地方包括`source`方法），但除此之外，调用者不需要知道更多内容。你可能会在内部表示更细粒度的错误状态，但没有必要将这些暴露给库的用户。这样做只会不必要地增加你的API的大小和复杂性。
- en: Exactly what your opaque error type should be is mostly up to you. It could
    just be a type with all private fields that exposes only limited methods for displaying
    and introspecting the error, or it could be a severely type-erased error type
    like `Box<dyn Error + Send + Sync + 'static>`, which reveals nothing more than
    the fact that it is an error and does not generally let your users introspect
    at all. Deciding how opaque to make your error types is mostly a matter of whether
    there is anything interesting about the error beyond its description. With `Box<dyn
    Error>`, you leave your users with little option but to bubble up your error.
    That might be fine if it truly has no information of value to present to the user—for
    example, if it’s just a dynamic error message or is one of a large number of unrelated
    errors from deeper inside your program. But if the error has some interesting
    facets to it, such as a line number or a status code, you may want to expose that
    through a concrete but opaque type instead.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你的不透明错误类型到底应该是什么，主要由你决定。它可以只是一个包含所有私有字段的类型，只暴露有限的方法来显示和检查错误，或者它可以是一个高度类型擦除的错误类型，如`Box<dyn
    Error + Send + Sync + 'static>`，它除了表明这是一个错误之外，什么也不揭示，也通常不允许用户进行任何检查。决定将错误类型做得多么不透明，主要取决于这个错误除了描述之外是否还有其他有趣的信息。如果使用`Box<dyn
    Error>`，你基本上只能让用户将错误向上传递。如果这个错误真的没有任何有价值的信息要展示给用户——例如，它只是一个动态错误信息，或者是来自你程序内部深层次的多个无关错误之一，那么这种方式可能是可以接受的。但如果错误有一些有趣的方面，比如行号或状态码，你可能想通过一个具体但不透明的类型来暴露这些信息。
- en: One benefit of using type-erased errors is that it allows you to easily combine
    errors from different sources without having to introduce additional error types.
    That is, type-erased errors often *compose* nicely, and allow you to express an
    open-ended set of errors. If you write a function whose return type is `Box<dyn
    Error + ...>`, then you can use `?` across different error types inside that function,
    on all sorts of different errors, and they will all be turned into that one common
    error type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型擦除错误的一个好处是，它允许你轻松地将来自不同来源的错误组合在一起，而不需要引入额外的错误类型。也就是说，类型擦除的错误通常能够*良好地组合*，并允许你表达一个开放式的错误集合。如果你编写了一个返回类型为`Box<dyn
    Error + ...>`的函数，那么你可以在该函数内对不同的错误类型使用`?`，无论是哪种不同的错误，它们都会被转换为那个共同的错误类型。
- en: 'The `''static` bound on `Box<dyn Error + Send + Sync + ''static>` is worth
    spending a bit more time on in the context of erasure. I mentioned in the previous
    section that it’s useful for letting the caller propagate the error without worrying
    about the lifetime bounds of the method that failed, but it serves an even bigger
    purpose: access to downcasting. *Downcasting* is the process of taking an item
    of one type and casting it to a more specific type. This is one of the few cases
    where Rust gives you access to type information at runtime; it’s a limited case
    of the more general type reflection that dynamic languages often provide. In the
    context of errors, downcasting allows a user to turn a `dyn Error` into a concrete
    underlying error type when that `dyn Error` was originally of that type. For example,
    the user may want to take a particular action if the error they received was a
    `std::io::Error` of kind `std::io::ErrorKind::WouldBlock`, but they would not
    take that same action in any other case. If the user gets a `dyn Error`, they
    can use `Error::downcast_ref` to try to downcast the error into a `std::io::Error`.
    The `downcast_ref` method returns an `Option`, which tells the user whether or
    not the downcast succeeded. And here is the key observation: `downcast_ref` works
    only if the argument is `''static`. If we return an opaque `Error` that’s not
    `''static`, we take away the user’s ability to do this kind of error introspection
    should they wish.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Box<dyn Error + Send + Sync + ''static>` 上的 `''static` 约束在擦除类型的上下文中值得花一些时间讲解。我在前一节中提到过，它有助于让调用者在不担心失败方法生命周期约束的情况下传播错误，但它还有更重要的作用：访问下转型。*下转型*是将某种类型的项转换为更具体类型的过程。这是Rust在运行时提供类型信息的少数几种情况之一；它是动态语言常常提供的更一般的类型反射的有限版本。在错误的上下文中，下转型允许用户将
    `dyn Error` 转换为原本就是该类型的具体底层错误类型。例如，用户可能希望在接收到的错误是 `std::io::Error` 且错误类型为 `std::io::ErrorKind::WouldBlock`
    时执行特定操作，而在其他情况下则不执行该操作。如果用户得到一个 `dyn Error`，他们可以使用 `Error::downcast_ref` 尝试将错误下转型为
    `std::io::Error`。`downcast_ref` 方法返回一个 `Option`，告诉用户下转型是否成功。这里的关键观察是：`downcast_ref`
    只有在参数是 `''static` 时才有效。如果我们返回一个不是 `''static` 的不透明 `Error`，就会剥夺用户进行此类错误自省的能力。'
- en: There’s some disagreement in the ecosystem about whether a library’s type-erased
    errors (or more generally, its type-erased types) are part of its public and stable
    API. That is, if the method `foo` in your library returns `lib::MyError` as a
    `Box<dyn Error>`, would changing `foo` to return a different error type be a breaking
    change? The type signature hasn’t changed, but users may have written code that
    assumes that they can use `downcast` to turn that error back into `lib::MyError`.
    My opinion on this matter is that you chose to return `Box<dyn Error>` (and not
    `lib::MyError`) for a reason, and unless explicitly documented, that does not
    guarantee anything in particular about downcasting.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 生态系统中对于库的类型擦除错误（或更一般地说，类型擦除类型）是否是其公开且稳定的 API 的一部分存在一些争议。也就是说，如果你库中的方法 `foo`
    返回一个 `Box<dyn Error>` 类型的 `lib::MyError`，那么将 `foo` 修改为返回不同的错误类型是否会导致破坏性变化？类型签名没有改变，但用户可能已经编写了假设能够使用
    `downcast` 将错误转回为 `lib::MyError` 的代码。对此我个人的看法是，你选择返回 `Box<dyn Error>`（而不是 `lib::MyError`）是有原因的，除非明确记录，否则这并不保证下转型的任何特定行为。
- en: You may wonder how `Error::downcast_ref` can be safe. That is, how does it know
    whether a provided `dyn Error` argument is indeed of the given type `T`? The standard
    library even has a trait called `Any` that is implemented for *any* type, and
    which implements `downcast_ref` for `dyn Any`—how can that be okay? The answer
    lies in the compiler-supported type `std::any::TypeId`, which allows you to get
    a unique identifier for any type. The `Error` trait has a hidden provided method
    called `type_id`, whose default implementation is to return `TypeId::of::<Self>()`.
    Similarly, `Any` has a blanket implementation of `impl Any for T`, and in that
    implementation, its `type_id` returns the same. In the context of these `impl`
    blocks, the concrete type of `Self` is known, so this `type_id` is the type identifier
    of the real type. That provides all the information `downcast_ref` needs. `downcast_ref`
    calls `self.type_id`, which forwards through the vtable for dynamically sized
    types (see Chapter 2) to the implementation for the underlying type and compares
    that to the type identifier of the provided downcast type. If they match, then
    the type behind the `dyn Error` or `dyn Any` really is `T`, and it is safe to
    cast from a reference to one to a reference to the other.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会疑惑，`Error::downcast_ref`是如何安全的。也就是说，它是如何判断提供的`dyn Error`参数是否确实是给定类型`T`的？标准库中甚至有一个叫做`Any`的特性，它被实现于*任何*类型，并且为`dyn
    Any`实现了`downcast_ref`——那怎么可能是安全的呢？答案在于编译器支持的类型`std::any::TypeId`，它允许你获取任何类型的唯一标识符。`Error`特性有一个隐藏的提供方法叫做`type_id`，它的默认实现是返回`TypeId::of::<Self>()`。类似地，`Any`为`T`提供了一个通用实现，且在该实现中，它的`type_id`返回相同的内容。在这些`impl`块的上下文中，`Self`的具体类型是已知的，因此这个`type_id`就是实际类型的类型标识符。这为`downcast_ref`提供了它所需要的所有信息。`downcast_ref`调用`self.type_id`，它通过虚表（vtable）转发到动态大小类型的实现（参见第2章），并将其与提供的下转类型的类型标识符进行比较。如果它们匹配，那么`dyn
    Error`或`dyn Any`背后的类型确实是`T`，从一个引用转换为另一个引用是安全的。
- en: Special Error Cases
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊错误情况
- en: Some functions are fallible but cannot return any meaningful error if they fail.
    Conceptually, these functions have a return type of `Result<T, ()>`. In some codebases,
    you may see this represented as `Option<T>` instead. While both are legitimate
    choices for the return type for such a function, they convey different semantic
    meanings, and you should usually avoid “simplifying” a `Result<T, ()>` to `Option<T>`.
    An `Err(())` indicates that an operation failed and should be retried, reported,
    or otherwise handled exceptionally. `None`, on the other hand, conveys only that
    the function has nothing to return; it is usually not considered an exceptional
    case or something that should be handled. You can see this in the `#[must_use]`
    annotation on the `Result` type—when you get a `Result`, the language expects
    that it is important to handle both cases, whereas with an `Option`, neither case
    actually needs to be handled.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数是可能失败的，但如果失败了无法返回任何有意义的错误。从概念上讲，这些函数的返回类型是`Result<T, ()>`。在某些代码库中，你可能会看到它被表示为`Option<T>`。虽然这两者都是这类函数的合法返回类型，但它们传达了不同的语义含义，通常不应将`Result<T,
    ()>`“简化”为`Option<T>`。`Err(())`表示操作失败，应该重试、报告或以其他方式特殊处理。而`None`则仅表示函数没有返回值；通常不认为这是一种异常情况或需要处理的事情。你可以从`Result`类型上的`#[must_use]`注解中看到这一点——当你得到一个`Result`时，语言期望你处理两种情况，而对于`Option`，实际上没有任何情况需要处理。
- en: Some functions, like those that start a continuously running server loop, only
    ever return errors; unless an error occurs, they run forever. Other functions
    never error but need to return a `Result` nonetheless, for example, to match a
    trait signature. For functions like these, Rust provides the *never type*, written
    with the `!` syntax. The never type represents a value that can never be generated.
    You cannot construct an instance of this type yourself—the only way to make one
    is by entering an infinite loop or panicking, or through a handful of other special
    operations that the compiler knows never return. With `Result`, when you have
    an `Ok` or `Err` that you know will never be used, you can set it to the `!` type.
    If you write a function that returns `Result<T, !>`, you will be unable to ever
    return `Err`, since the only way to do so is to enter code that will never return.
    Because the compiler knows that any variant with a `!` will never be produced,
    it can also optimize your code with that in mind, such as by not generating the
    panic code for an `unwrap` on `Result<T, !>`. And when you pattern match, the
    compiler knows that any variant that contains a `!` does not even need to be listed.
    Pretty neat!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有些函数，比如那些启动持续运行服务器循环的函数，只有在发生错误时才会返回错误；如果没有错误发生，它们将永远运行下去。其他函数虽然永远不会出错，但仍然需要返回一个`Result`，例如为了匹配特征签名。对于这样的函数，Rust
    提供了*never类型*，其语法是`!`。never类型表示一个永远无法生成的值。你不能自己构造这种类型的实例——生成它的唯一方法是进入一个无限循环或发生
    panic，或者通过一些编译器知道永远不会返回的特殊操作。对于`Result`，当你知道一个`Ok`或`Err`永远不会被使用时，可以将它设置为`!`类型。如果你写一个返回`Result<T,
    !>`的函数，你将永远无法返回`Err`，因为返回`Err`的唯一方式是进入一个永远不会返回的代码。由于编译器知道任何包含`!`的变体永远不会被生成，它也可以据此优化你的代码，例如在对`Result<T,
    !>`进行`unwrap`时不生成 panic 代码。当你进行模式匹配时，编译器知道任何包含`!`的变体根本不需要列出。相当巧妙吧！
- en: 'One last curious error case is the error type `std::thread::Result`. Here’s
    its definition:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个奇怪的错误情况是错误类型`std::thread::Result`。这是它的定义：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The error type is type-erased, but it’s not erased into a `dyn Error` as we’ve
    seen so far. Instead, it is a `dyn Any`, which guarantees only that the error
    is *some* type, and nothing more . . . which is not much of a guarantee at all.
    The reason for this curious-looking error type is that the error variant of `std::thread::Result`
    is produced only in response to a panic; specifically, if you try to join a thread
    that has panicked. In that case, it’s not clear that there’s much the joining
    thread can do other than either ignore the error or panic itself using `unwrap`.
    In essence, the error type is “a panic” and the value is “whatever argument was
    passed to `panic!`,” which can truly be any type (even though it’s usually a formatted
    string).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 错误类型是类型擦除的，但它并不像我们之前看到的那样被擦除成`dyn Error`。相反，它是一个`dyn Any`，这保证了错误只是*某种*类型，除此之外没有任何保证……这几乎不算什么保证。这个看起来很奇怪的错误类型的原因是，`std::thread::Result`的错误变体仅在响应
    panic 时产生；特别是当你尝试加入一个已经发生 panic 的线程时。在这种情况下，加入线程的线程似乎除了忽略错误或自己使用`unwrap`发生 panic
    外，几乎没有其他办法可以处理错误。实际上，错误类型是“一个 panic”，而值是“传递给`panic!`的任何参数”，它可以是真正的任何类型（尽管通常是格式化字符串）。
- en: Propagating Errors
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误传播
- en: 'Rust’s `?` operator acts as a shorthand for *unwrap or return early*, for working
    easily with errors. But it also has a few other tricks up its sleeve that are
    worth knowing about. First, `?` performs type conversion through the `From` trait.
    In a function that returns `Result<T, E>`, you can use `?` on any `Result<T, X>`
    where `E: From<X>`. This is the feature that makes error erasure through `Box<dyn
    Error>` so appealing; you can just use `?` everywhere and not worry about the
    particular error type, and it will usually “just work.”'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'Rust 的`?`操作符作为*unwrap 或者提前返回*的快捷方式，用于方便地处理错误。但它也有一些其他的技巧值得了解。首先，`?`通过`From`特征执行类型转换。在返回`Result<T,
    E>`的函数中，你可以在任何`Result<T, X>`上使用`?`，前提是`E: From<X>`。正是这个特性使得通过`Box<dyn Error>`进行错误擦除变得如此吸引人；你可以在任何地方使用`?`，而不必担心特定的错误类型，它通常会“自动工作”。'
- en: The second aspect of `?` to be aware of is that this operator is really just
    syntax sugar for a trait tentatively called `Try`. At the time of writing, the
    `Try` trait has not yet been stabilized, but by the time you read this, it’s likely
    that it, or something very similar, will have been settled on. Since the details
    haven’t all been figured out yet, I’ll give you only an outline of how `Try` works,
    rather than the full method signatures. At its heart, `Try` defines a wrapper
    type whose state is either one where further computation is useful (the happy
    path), or one where it is not. Some of you will correctly think of monads, though
    we won’t explore that connection here. For example, in the case of `Result<T,
    E>`, if you have an `Ok(t)`, you can continue on the happy path by unwrapping
    the `t`. If you have an `Err(e)`, on the other hand, you want to stop executing
    and produce the error value immediately, since further computation is not possible
    as you don’t have the `t`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的第二个方面是，`?` 操作符实际上只是一个语法糖，代表一个名为 `Try` 的 trait。撰写本文时，`Try` trait 还没有稳定，但在你阅读本文时，它或类似的东西很可能已经稳定。由于细节尚未完全确定，我只会给出
    `Try` 的工作原理概述，而不是完整的方法签名。`Try` 的核心定义了一个包装类型，其状态要么表示进一步计算有意义（快乐路径），要么表示没有意义。你们中的一些人可能会想到单子（monads），尽管我们在这里不会深入探讨这个连接。例如，在
    `Result<T, E>` 的情况下，如果你有一个 `Ok(t)`，你可以通过解包 `t` 来继续执行快乐路径。另一方面，如果你有一个 `Err(e)`，你就需要停止执行并立即返回错误值，因为没有
    `t`，进一步的计算是不可能的。
- en: What’s interesting about `Try` is that it applies to more types than just `Result`.
    An `Option<T>`, for example, follows the same pattern—if you have a `Some(t)`,
    you can continue on the happy path, whereas if you have a `None`, you want to
    yield `None` instead of continuing. This pattern extends to more complex types,
    like `Poll<Result<T, E>>`, whose happy path type is `Poll<T>`, which makes `?`
    apply in far more cases than you might expect. When `Try` stabilizes, we may see
    `?` start to work with all sorts of types to make our happy path code nicer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Try` 的有趣之处在于，它适用于比 `Result` 更多的类型。例如，`Option<T>` 也遵循相同的模式——如果你有一个 `Some(t)`，你可以继续执行快乐路径，而如果你有一个
    `None`，你想返回 `None` 而不是继续。这种模式扩展到了更复杂的类型，如 `Poll<Result<T, E>>`，其快乐路径类型是 `Poll<T>`，这使得
    `?` 可以在更多情况下使用，超出你预期的范围。当 `Try` 稳定下来时，我们可能会看到 `?` 开始适用于各种类型，从而使我们的快乐路径代码更加简洁。'
- en: The
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: The
- en: '`?` operator is already usable in fallible functions, in doctests, and in `fn
    main`. To reach its full potential, though, we also need a way to scope this error
    handling. For example, consider the function in [Listing 4-2](#listing4-2).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`?` 操作符已经可以在失败函数、doctests 和 `fn main` 中使用。然而，要发挥其全部潜力，我们还需要一种方法来限制错误处理的范围。例如，考虑
    [列表 4-2](#listing4-2) 中的函数。'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 4-2: A multi-step fallible function using the `?` operator'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 4-2：使用 `?` 操作符的多步骤失败函数
- en: This won’t quite work as expected. Any `?` between `setup` and `cleanup` will
    cause an early return from the entire function, which would skip the cleanup code!
    This is the problem *try blocks* are intended to solve. A try block acts pretty
    much like a single-iteration loop, where `?` uses `break` instead of `return`,
    and the final expression of the block has an implicit `break`. We can now fix
    the code in [Listing 4-2](#listing4-2) to always do cleanup, as shown in [Listing
    4-3](#listing4-3).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会按预期工作。`setup` 和 `cleanup` 之间的任何 `?` 都会导致整个函数提前返回，这样就会跳过清理代码！这是 *try 块* 旨在解决的问题。`try`
    块的作用几乎就像一个单次迭代的循环，其中 `?` 使用 `break` 而不是 `return`，并且块的最终表达式隐式地带有 `break`。我们现在可以修复
    [列表 4-2](#listing4-2) 中的代码，使其始终进行清理，如 [列表 4-3](#listing4-3) 所示。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 4-3: A multi-step fallible function that always cleans up after itself'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 4-3：一个总是清理的多步骤失败函数
- en: Try blocks are also not stable at the time of writing, but there is enough of
    a consensus on their usefulness that they’re likely to land in a form similar
    to that described here.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 撰写本文时，`Try` 块也尚不稳定，但关于它们的有用性的共识已经足够，可能会以类似这里描述的形式稳定下来。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter covered the two primary ways to construct error types in Rust:
    enumeration and erasure. We looked at when you may want to use each one and the
    advantages and drawbacks of each. We also took a look at some of the behind-the-scenes
    aspects of the `?` operator and considered how `?` may become even more useful
    going forward. In the next chapter, we’ll take a step back from the code and look
    at how you *structure* a Rust project. We’ll look at feature flags, dependency
    management, and versioning as well as how to manage more complex crates using
    workspaces and subcrates. See you on the next page!'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在 Rust 中构建错误类型的两种主要方式：枚举和擦除。我们探讨了在何种情况下你可能需要使用每种方式，以及它们各自的优缺点。我们还了解了 `?`
    运算符的一些幕后细节，并考虑了 `?` 在未来可能变得更加有用的情况。在下一章中，我们将从代码中抽身，探讨如何*构建*一个 Rust 项目。我们将讨论特性标志、依赖管理和版本控制，以及如何使用工作区和子包来管理更复杂的
    crate。下一页见！
