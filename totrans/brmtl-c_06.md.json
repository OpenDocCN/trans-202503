["```\nif (`condition`)\n    `statement`;\n```", "```\nif (`condition`)  {\n    `statement`;\n    `statement`;\n    `statement`;\n    // ...\n}\n```", "```\nif (aNumber == 5) {\n    printf(\"The number is 5\\n\");\n}\n```", "```\nif (aNumber = 7) {\n    printf(\"Something happened\\n\");\n}\n```", "```\naNumber = 7;        // Assignment\nif (aNumber != 0) { // Test against zero\n    printf(\"Something happened\\n\");\n}\n```", "```\nif (aNumber == 7)\n```", "```\naNumber = 5;\nif (aNumber = 7) {  // Notice the missing '=' character.\n    printf(\"Something happened\\n\");\n}\n```", "```\nequal.c:14:5: warning: suggest parentheses around assignment used as truth value [-Wparentheses]\n if (aNumber = 7) {\n```", "```\nif ((aNumber = 7)) {   // Very very lousy programming\n```", "```\nif ((number % 2) == 0) {\n    printf(\"Number is even\\n);\n} else {\n    printf(\"Number is odd\\n);\n}\n```", "```\nif (a == 1)\n    if (b == 2)\n        printf(\"Condition orange\\n\");\n  else\n    printf(\"Condition pink\\n\");\n```", "```\nif (a == 1) {\n    if (b == 2) {\n        printf(\"Condition orange\\n\");\n    } else {\n        printf(\"Condition pink\\n\");\n    }\n}\n```", "```\nwhile (`condition`)\n    `statement`;\n```", "```\n/*\n * Test to see if the numbers 1 through 10 are even\n * or odd.\n *\n#include <stdio.h>\n\nint main()\n{\n    int aNumber;  // Number to test for oddness\n    aNumber = 1;\n    while (aNumber <= 10) {\n        if ((aNumber % 2) == 1) {\n            printf(\"%d is odd\\n\", aNumber);\n        } else {\n            printf(\"%d is even\\n\", aNumber);\n        }\n        ++aNumber;\n    }\n    return (0);\n}\n```", "```\n1 is odd\n2 is even\n3 is odd\n4 is even\n5 is odd\n6 is even\n7 is odd\n8 is even\n9 is odd\n10 is even\n```", "```\nfor (`initialization`; `condition`; `increment`)\n```", "```\n/*\n * Test to see if the numbers 1 through 10 are even\n * or odd.\n */\n#include <stdio.h>\n\nint main()\n{\n    int aNumber;  // Number to test for oddness\n    for (aNumber = 1; aNumber <= 10; ++aNumber) {\n        if ((aNumber % 2) == 1) {\n            printf(\"%d is odd\\n\", aNumber);\n        } else {\n            printf(\"%d is even\\n\", aNumber);\n        }\n    }\n    return (0);\n}\n```", "```\naNumber = 1;\nfor (; aNumber <= 10; ++aNumber) {\n```", "```\nfor (aNumber = 1; aNumber <= 10;) {\n    // Oddness test\n    ++aNumber;\n```", "```\nfor (;;)\n```", "```\n/**\n  **************************************************************\n  * @file    main.c\n  * @author  Steve Oualline\n  * @version V1.0\n  * @date    11-April-2018\n  * @brief   Push the button -- flash the LED\n  **************************************************************\n*/\n\n#include \"stm32f0xx.h\"\n#include \"stm32f0xx_nucleo.h\"\n\nint main(void)\n{\n  1 GPIO_InitTypeDef GPIO_LedInit; // Init. for the LED\n    GPIO_InitTypeDef GPIO_ButtonInit;  // Init. for push button\n    GPIO_PinState result; // The result of reading the pin\n\n    HAL_Init();\n\n    // LED clock initialization\n  2 LED2_GPIO_CLK_ENABLE();\n\n    // Initialize LED.\n  3 GPIO_LedInit.Pin = LED2_PIN;\n    GPIO_LedInit.Mode = GPIO_MODE_OUTPUT_PP;\n    GPIO_LedInit.Pull = GPIO_PULLUP;\n    GPIO_LedInit.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_LedInit);\n\n    // Push button clock initialization\n    USER_BUTTON_GPIO_CLK_ENABLE();\n\n /* Configure GPIO pin : For button */\n    GPIO_ButtonInit.Pin = USER_BUTTON_PIN;\n    GPIO_ButtonInit.Mode = GPIO_MODE_INPUT;\n  4 GPIO_ButtonInit.Pull = GPIO_PULLDOWN;\n    GPIO_ButtonInit.Speed = GPIO_SPEED_FREQ_HIGH;\n    HAL_GPIO_Init(USER_BUTTON_GPIO_PORT, &GPIO_ButtonInit);\n\n    for(;;) {\n        // Get the current state of the push button\n        result = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_PORT,\n                                  USER_BUTTON_PIN);\n        if (result == GPIO_PIN_SET)\n            HAL_GPIO_WritePin(LED2_GPIO_PORT,\n                              LED2_PIN, GPIO_PIN_SET);\n        else\n            HAL_GPIO_WritePin(LED2_GPIO_PORT,\n                              LED2_PIN,GPIO_PIN_RESET);\n    }\n}\n```", "```\n/*\n * Find the key number in an array.\n */\n#include <stdio.h>\n#include <stdbool.h>\n\n#define ARRAY_SIZE  7   // Size of the array to search\n\nint main()\n{\n    // Array to search\n    int array[ARRAY_SIZE] = {4, 5, 23, 56, 79, 0, -5};\n    static const int KEY = 56; // Key to search for\n\n    for (unsigned int index = 0; index < ARRAY_SIZE; ++index) {\n        if (array[index] == KEY) {\n            printf(\"Key (%d) found at index %d\\n\",\n                   KEY, index);\n          1 break;\n        }\n    }\n    return (0);\n}\n```", "```\n/*\n * Find the key number in an array.\n */\n#include <stdio.h>\n\n#define COMMAND_COUNT 5 // Number of commands\n\n// Commands, ones beginning with . are secret\nstatic const char commands[COMMAND_COUNT][4] = {\n    \"help\",\n    \"exec\",\n    \".adm\",\n    \"quit\"\n};\nint main()\n{\n    // Print the help text\n    for (unsigned int index = 0;\n         index < COMMAND_COUNT;\n         ++index) {\n      1 if (commands[index][0] == '.') {\n            // Hidden command\n          2 continue;\n        }\n        printf(\"%s\\n\", commands[index]);\n    }\n    return (0);\n}\n```", "```\nwhile (GPIO_PIN_SET == HAL_GPIO_ReadPin(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN))**;**\n{\n    // ... do something\n}\n```", "```\nwhile (GPIO_PIN_SET == HAL_GPIO_ReadPin(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN))**;**\n{\n    // ... do something\n}\n```", "```\nwhile (GPIO_PIN_SET == HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN))\n    continue;\n{\n    // ... do something\n}\n```", "```\nwhile ((result = ReadPin(BTN_PORT, BTN_PIN)) == GPIO_PIN_SET) {\n    // ... statements\n}\n```", "```\nwhile (1) {\n    result = ReadPin(BTN_PORT, BUTTON_PIN);\n    if (result != GPIO_PIN_SET)\n        break;\n    // ... statements\n}\n```"]