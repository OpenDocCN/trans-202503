- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: The Big Picture
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 整体视角
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: At first glance, a contemporary operating system such as Linux is very complicated,
    with a dizzying number of pieces simultaneously running and communicating. For
    example, a web server can talk to a database server, which could in turn use a
    shared library that many other programs use. How does all of this manage to work,
    and how can you make sense of any of it?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，像Linux这样的现代操作系统看起来非常复杂，成千上万的组件同时运行并进行通信。例如，一个Web服务器可以与一个数据库服务器进行通信，后者又可以使用一个多个其他程序都在使用的共享库。这一切是如何顺利工作的呢？你又该如何理解它呢？
- en: The most effective way to understand how an operating system works is through
    *abstraction*—a fancy way of saying that you can ignore most of the details that
    make up a piece that you’re trying to understand, and concentrate instead on its
    basic purpose and operation. For example, when you ride in a car, you normally
    don’t need to think about details such as the mounting bolts that hold the motor
    inside the car or the people who build and maintain the road upon which the car
    drives. All you really need to know is what the car does (transports you somewhere
    else) and a few basics about how to use it (how to operate the door and seat belt).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 理解操作系统如何工作的最有效方式是通过*抽象*——这是一种高大上的说法，意思是你可以忽略大多数构成你要理解的部分的细节，而专注于它的基本功能和操作。例如，当你乘坐汽车时，通常不需要考虑像固定发动机的安装螺栓或建造和维护道路的人员这些细节。你真正需要知道的是汽车的功能（把你带到别的地方）以及如何使用它的一些基本知识（如何操作车门和安全带）。
- en: 'This level of abstraction might work if you’re just a passenger in the car.
    But if you also need to drive it, you have to dig deeper and break up your abstraction
    into a few parts. You now expand your knowledge in three areas: the car itself
    (such as its size and capabilities), how to operate the controls (steering wheel,
    accelerator pedal, and so on), and the features of the road.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是车上的乘客，这种层次的抽象可能已经足够。但如果你还需要驾驶它，你就必须深入挖掘，并将抽象拆分成几个部分。现在，你的知识扩展到了三个领域：汽车本身（如其大小和功能）、如何操作控制装置（方向盘、油门踏板等）以及道路的特征。
- en: Abstraction can be a great help when you’re trying to find and fix problems.
    For example, let’s say you’re driving a car and the ride is rough. You can quickly
    assess the three basic car-related abstractions just mentioned to determine the
    source of the problem. It should be fairly easy to eliminate the first two abstractions
    (your car or the way you’re driving) if neither is the issue, so you can narrow
    the problem down to the road itself. You’ll probably find that the road is bumpy.
    Now, if you want, you can dig deeper into your abstraction of the road and find
    out why the road has deteriorated or, if the road is new, why the construction
    workers did a lousy job.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在寻找和修复问题时，抽象化可以是一个很大的帮助。例如，假设你正在开车，车程很颠簸。你可以迅速评估刚才提到的三种基本的与汽车相关的抽象，来确定问题的来源。如果问题不在前两个抽象（你的车或你的驾驶方式），那么你可以迅速排除它们，将问题缩小到路面本身。你可能会发现路面很颠簸。如果你愿意，你可以进一步深入探究路面的抽象，找出为什么路面会破损，或者如果路面是新的，为什么施工人员工作不当。
- en: Software developers use abstraction as a tool when building an operating system
    and its applications. There are many terms for an abstracted subdivision in computer
    software—including *subsystem*, *module*, and *package*—but we’ll use the term
    *component* in this chapter because it’s simple. When building a software component,
    developers typically don’t think much about the internal structure of other components,
    but they do consider other components they can use (so that they don’t have to
    write any additional unnecessary software) and how to use them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发者在构建操作系统及其应用程序时，会将抽象作为一种工具。在计算机软件中，有许多用于表示抽象子分区的术语——包括*子系统*、*模块*和*包*——但在本章中我们将使用*组件*这个术语，因为它比较简单。在构建软件组件时，开发者通常不会过多考虑其他组件的内部结构，但他们会考虑能使用的其他组件（这样他们就不需要编写任何额外的、不必要的软件）以及如何使用它们。
- en: This chapter provides a high-level overview of the components that make up a
    Linux system. Although each one has a tremendous number of technical details in
    its internal makeup, we’re going to ignore these details and concentrate on what
    the components do in relation to the whole system. We’ll look at the details in
    subsequent chapters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了Linux系统组件的高层次概述。虽然每个组件在其内部构造中有大量的技术细节，但我们将忽略这些细节，专注于这些组件在整个系统中的作用。我们将在后续章节中详细探讨这些细节。
- en: 1.1 Levels and Layers of Abstraction in a Linux System
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 Linux系统中的抽象层次与层级
- en: Using abstraction to split computing systems into components makes things easier
    to understand, but it doesn’t work without organization. We arrange components
    into *layers* or *levels*, classifications (or groupings) of components according
    to where the components sit between the user and the hardware. Web browsers, games,
    and such sit at the top layer; at the bottom layer we have the memory in the computer
    hardware—the 0s and 1s. The operating system occupies many of the layers in between.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用抽象将计算系统划分为多个组件有助于理解，但如果没有组织结构是行不通的。我们将组件安排成*层*或*级别*，根据组件在用户与硬件之间的位置来分类（或分组）。网页浏览器、游戏等处于最上层；在底层，我们有计算机硬件中的内存——0和1。操作系统占据了中间的许多层。
- en: A Linux system has three main levels. [Figure 1-1](#figure1-1) shows these levels
    and some of the components inside each level. The *hardware* is at the base. Hardware
    includes the memory as well as one or more central processing units (CPUs) to
    perform computation and to read from and write to memory. Devices such as disks
    and network interfaces are also part of the hardware.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Linux系统有三个主要层级。[图1-1](#figure1-1)展示了这些层级以及每个层级中的一些组件。*硬件*处于底层。硬件包括内存，以及一个或多个中央处理单元（CPU），用于执行计算并读写内存。磁盘和网络接口等设备也是硬件的一部分。
- en: The next level up is the *kernel*, which is the core of the operating system.
    The kernel is software residing in memory that tells the CPU where to look for
    its next task. Acting as a mediator, the kernel manages the hardware (especially
    main memory) and is the primary interface between the hardware and any running
    program.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 下一级是*内核*，它是操作系统的核心。内核是驻留在内存中的软件，告诉CPU在哪里查找下一个任务。作为中介，内核管理硬件（特别是主内存），并且是硬件与任何正在运行的程序之间的主要接口。
- en: '*Processes*—the running programs that the kernel manages—collectively make
    up the system’s upper level, called *user space*. (A more specific term for process
    is *user process*, regardless of whether a user directly interacts with the process.
    For example, all web servers run as user processes.)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*进程*——即内核管理的运行程序——共同构成了系统的上层，称为*用户空间*。（进程的一个更具体的术语是*用户进程*，无论用户是否直接与进程交互。例如，所有的网页服务器都作为用户进程运行。）'
- en: '![f01001](image_fi/500402c01/f01001.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![f01001](image_fi/500402c01/f01001.png)'
- en: 'Figure 1-1: General Linux system organization'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1：通用的Linux系统组织
- en: 'There is a critical difference between how the kernel and the user processes
    run: the kernel runs in *kernel mode*, and the user processes run in *user mode*.
    Code running in kernel mode has unrestricted access to the processor and main
    memory. This is a powerful but dangerous privilege that allows the kernel to easily
    corrupt and crash the entire system. The memory area that only the kernel can
    access is called *kernel space*.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 内核和用户进程运行方式之间有一个关键的区别：内核运行在*内核模式*下，而用户进程运行在*用户模式*下。运行在内核模式下的代码可以无限制地访问处理器和主内存。这是一个强大但危险的特权，允许内核轻易地破坏并使整个系统崩溃。只有内核可以访问的内存区域称为*内核空间*。
- en: User mode, in comparison, restricts access to a (usually quite small) subset
    of memory and safe CPU operations. *User space* refers to the parts of main memory
    that the user processes can access. If a process makes a mistake and crashes,
    the consequences are limited and can be cleaned up by the kernel. This means that
    if your web browser crashes, it probably won’t take down the scientific computation
    that has been running in the background for days.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，用户模式限制了对（通常非常小的）内存子集和安全CPU操作的访问。*用户空间*指的是用户进程可以访问的主内存部分。如果一个进程发生错误并崩溃，其后果是有限的，可以由内核进行清理。这意味着，如果你的网页浏览器崩溃，它可能不会影响后台运行了几天的科学计算。
- en: In theory, a user process gone haywire can’t cause serious damage to the rest
    of the system. In reality, it depends on what you consider “serious damage,” as
    well as the particular privileges of the process, because some processes are allowed
    to do more than others. For example, can a user process completely wreck the data
    on a disk? With the correct permissions, yes—and you might consider this to be
    fairly dangerous. There are safeguards to prevent this, however, and most processes
    simply aren’t allowed to wreak havoc in this manner.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，一个出现故障的用户进程不会对系统的其他部分造成严重损害。实际上，这取决于你对“严重损害”的定义，以及进程的特定权限，因为某些进程被允许做的事情比其他进程更多。例如，一个用户进程能否完全破坏磁盘上的数据？在正确的权限下，答案是肯定的——而你可能认为这相当危险。然而，也有一些安全机制可以防止这种情况发生，大多数进程通常不被允许以这种方式造成破坏。
- en: '1.2 Hardware: Understanding Main Memory'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 硬件：理解主内存
- en: Of all of the hardware on a computer system, *main memory* is perhaps the most
    important. In its rawest form, main memory is just a big storage area for a bunch
    of 0s and 1s. Each slot for a 0 or 1 is called a *bit*. This is where the running
    kernel and processes reside—they’re just big collections of bits. All input and
    output from peripheral devices flows through main memory, also as a bunch of bits.
    A CPU is just an operator on memory; it reads its instructions and data from the
    memory and writes data back out to the memory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有计算机硬件中，*主内存*也许是最重要的。从最原始的形式来看，主内存仅仅是一个存储大量0和1的大区域。每一个0或1的存储位置被称为*比特*。这是运行中的内核和进程所在的地方——它们只是大量比特的集合。所有来自外围设备的输入和输出都流经主内存，也是以比特的形式传输。CPU本质上是内存的操作员；它从内存中读取指令和数据，并将数据写回内存。
- en: You’ll often hear the term *state* in reference to memory, processes, the kernel,
    and other parts of a computer system. Strictly speaking, a state is a particular
    arrangement of bits. For example, if you have four bits in your memory, 0110,
    0001, and 1011 represent three different states.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你常常会听到*状态*一词，通常用来描述内存、进程、内核和计算机系统的其他部分。严格来说，状态是比特的一种特定排列。例如，如果你的内存中有四个比特，0110、0001和1011代表三种不同的状态。
- en: When you consider that a single process can easily consist of millions of bits
    in memory, it’s often easier to use abstract terms when talking about states.
    Instead of describing a state using bits, you describe what something has done
    or is doing at the moment. For example, you might say, “The process is waiting
    for input” or, “The process is performing Stage 2 of its startup.”
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑到一个单独的进程可能由数百万个比特组成时，谈论状态时通常更容易使用抽象的术语。你不再用比特来描述状态，而是描述某物当前正在做的事情。例如，你可能会说，“进程正在等待输入”或，“进程正在执行启动的第二阶段”。
- en: 1.3 The Kernel
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 内核
- en: Why are we talking about main memory and states? Nearly everything that the
    kernel does revolves around main memory. One of the kernel’s tasks is to split
    memory into many subdivisions, and it must maintain certain state information
    about those subdivisions at all times. Each process gets its own share of memory,
    and the kernel must ensure that each process keeps to its share.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要讨论主内存和状态？几乎所有内核的操作都围绕主内存展开。内核的任务之一是将内存划分为许多子区，并且它必须始终维护关于这些子区的状态信息。每个进程都有自己的一部分内存，内核必须确保每个进程只能使用其分配的内存。
- en: 'The kernel is in charge of managing tasks in four general system areas:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 内核负责管理四个主要系统区域的任务：
- en: Processes The kernel is responsible for determining which processes are allowed
    to use the CPU.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进程 内核负责确定哪些进程被允许使用CPU。
- en: Memory The kernel needs to keep track of all memory—what is currently allocated
    to a particular process, what might be shared between processes, and what is free.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存 内核需要跟踪所有内存——当前分配给某个进程的内存、可能在进程间共享的内存以及空闲内存。
- en: Device drivers The kernel acts as an interface between hardware (such as a disk)
    and processes. It’s usually the kernel’s job to operate the hardware.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设备驱动程序 内核充当硬件（如磁盘）和进程之间的接口。通常是内核的工作来操作硬件。
- en: System calls and support Processes normally use system calls to communicate
    with the kernel.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统调用和支持进程通常使用系统调用与内核进行通信。
- en: We’ll now briefly explore each of these areas.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将简要探讨这些领域。
- en: 1.3.1Process Management
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.1 进程管理
- en: '*Process management* describes the starting, pausing, resuming, scheduling,
    and terminating of processes. The concepts behind starting and terminating processes
    are fairly straightforward, but describing how a process uses the CPU in its normal
    course of operation is a bit more complex.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*进程管理*描述了进程的启动、暂停、恢复、调度和终止。启动和终止进程的概念相对简单，但描述一个进程在其正常操作过程中如何使用CPU则稍显复杂。'
- en: 'On any modern operating system, many processes run “simultaneously.” For example,
    you might have a web browser and a spreadsheet open on a desktop computer at the
    same time. However, things are not as they appear: the processes behind these
    applications typically do not run at *exactly* the same time.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何现代操作系统中，许多进程是“同时”运行的。例如，你可能在桌面电脑上同时打开了一个网页浏览器和一个电子表格。然而，事情并不像它们看起来的那样：这些应用程序背后的进程通常不会在*完全*相同的时间运行。
- en: Consider a system with a one-core CPU. Many processes may be *able* to use the
    CPU, but only one process can actually use the CPU at any given time. In practice,
    each process uses the CPU for a small fraction of a second, then pauses; then
    another process uses the CPU for another small fraction of a second; then another
    process takes a turn, and so on. The act of one process giving up control of the
    CPU to another process is called a *context switch*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个系统有一个单核CPU。许多进程可能*能够*使用CPU，但在任何给定的时间内，只有一个进程可以实际使用CPU。实际上，每个进程使用CPU的时间很短，然后暂停；接着另一个进程使用CPU短暂的时间；然后另一个进程轮流使用CPU，依此类推。一个进程将CPU控制权交给另一个进程的行为称为*上下文切换*。
- en: Each piece of time—called a *time slice*—gives a process enough time for significant
    computation (and indeed, a process often finishes its current task during a single
    slice). However, because the slices are so small, humans can’t perceive them,
    and the system appears to be running multiple processes at the same time (a capability
    known as *multitasking*).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每一段时间——称为*时间片*——为进程提供足够的时间进行重要的计算（实际上，进程通常在一个时间片内完成当前任务）。然而，由于时间片非常短，人类无法察觉它们，因此系统似乎在同时运行多个进程（这种能力被称为*多任务处理*）。
- en: 'The kernel is responsible for context switching. To understand how this works,
    let’s think about a situation in which a process is running in user mode but its
    time slice is up. Here’s what happens:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 内核负责上下文切换。为了理解这一过程，让我们设想一个场景，其中一个进程正在用户模式下运行，但它的时间片已用完。接下来会发生什么：
- en: The CPU (the actual hardware) interrupts the current process based on an internal
    timer, switches into kernel mode, and hands control back to the kernel.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CPU（实际硬件）根据内部定时器中断当前进程，切换到内核模式，并将控制权交回内核。
- en: The kernel records the current state of the CPU and memory, which will be essential
    to resuming the process that was just interrupted.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核记录了当前CPU和内存的状态，这对于恢复刚刚被中断的进程至关重要。
- en: The kernel performs any tasks that might have come up during the preceding time
    slice (such as collecting data from input and output, or I/O, operations).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核执行在前一个时间片期间可能发生的任何任务（例如，收集输入输出或I/O操作的数据）。
- en: The kernel is now ready to let another process run. The kernel analyzes the
    list of processes that are ready to run and chooses one.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核现在准备让另一个进程运行。内核分析准备运行的进程列表，并选择一个进程。
- en: The kernel prepares the memory for this new process and then prepares the CPU.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核为这个新进程准备内存，然后为CPU做准备。
- en: The kernel tells the CPU how long the time slice for the new process will last.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核告知CPU新进程的时间片将持续多长时间。
- en: The kernel switches the CPU into user mode and hands control of the CPU to the
    process.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内核将CPU切换到用户模式，并将CPU的控制权交给进程。
- en: The context switch answers the important question of *when* the kernel runs.
    The answer is that it runs *between* process time slices during a context switch.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文切换回答了一个重要问题——*何时*内核运行。答案是，它在上下文切换期间*在*进程时间片之间运行。
- en: In the case of a multi-CPU system, as most current machines are, things become
    slightly more complicated because the kernel doesn’t need to relinquish control
    of its current CPU in order to allow a process to run on a different CPU, and
    more than one process may run at a time. However, to maximize the usage of all
    available CPUs, the kernel typically performs these steps anyway (and may use
    certain tricks to grab a little more CPU time for itself).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在多CPU系统的情况下（如大多数当前机器一样），情况会稍微复杂一些，因为内核不需要放弃对当前CPU的控制来允许进程在其他CPU上运行，并且可能同时有多个进程在运行。然而，为了最大化所有可用CPU的使用，内核通常会执行这些步骤（并可能使用某些技巧为自己争取更多的CPU时间）。
- en: 1.3.2 Memory Management
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.2 内存管理
- en: 'The kernel must manage memory during a context switch, which can be a complex
    job. The following conditions must hold:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 内核必须在上下文切换期间管理内存，这可能是一个复杂的任务。必须满足以下条件：
- en: The kernel must have its own private area in memory that user processes can’t
    access.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内核必须在内存中有自己的私有区域，用户进程无法访问。
- en: Each user process needs its own section of memory.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个用户进程需要自己的一段内存区域。
- en: One user process may not access the private memory of another process.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户进程不能访问另一个进程的私有内存。
- en: User processes can share memory.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户进程可以共享内存。
- en: Some memory in user processes can be read-only.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些用户进程的内存是只读的。
- en: The system can use more memory than is physically present by using disk space
    as auxiliary.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统可以通过使用磁盘空间作为辅助内存，来使用比物理内存更多的内存。
- en: Fortunately for the kernel, there is help. Modern CPUs include a *memory management
    unit (MMU)* that enables a memory access scheme called *virtual memory*. When
    using virtual memory, a process does not directly access the memory by its physical
    location in the hardware. Instead, the kernel sets up each process to act as if
    it had an entire machine to itself. When the process accesses some of its memory,
    the MMU intercepts the access and uses a memory address map to translate the memory
    location from the process point of view into an actual physical memory location
    in the machine. The kernel must still initialize and continuously maintain and
    alter this memory address map. For example, during a context switch, the kernel
    has to change the map from the outgoing process to the incoming process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，内核并非孤立无援。现代CPU包含一个*内存管理单元（MMU）*，它启用了一个名为*虚拟内存*的内存访问方案。使用虚拟内存时，进程不会直接按硬件中的物理位置访问内存。相反，内核为每个进程设置，使其像拥有一台完整的机器一样。当进程访问某些内存时，MMU会拦截该访问，并使用内存地址映射将进程视角中的内存位置转换为机器中的实际物理内存位置。内核仍然需要初始化并持续维护和修改这个内存地址映射。例如，在上下文切换期间，内核必须将映射从即将退出的进程切换到即将进入的进程。
- en: You’ll learn more about how to view memory performance in Chapter 8.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在第8章中学习更多关于如何查看内存性能的内容。
- en: 1.3.3 Device Drivers and Management
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.3 设备驱动与管理
- en: The kernel’s role with devices is relatively simple. A device is typically accessible
    only in kernel mode because improper access (such as a user process asking to
    turn off the power) could crash the machine. A notable difficulty is that different
    devices rarely have the same programming interface, even if the devices perform
    the same task (for example, two different network cards). Therefore, device drivers
    have traditionally been part of the kernel, and they strive to present a uniform
    interface to user processes in order to simplify the software developer’s job.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 内核在设备管理中的角色相对简单。设备通常只能在内核模式下访问，因为不当访问（例如，用户进程要求关闭电源）可能会导致机器崩溃。一个显著的难点是，不同设备的编程接口通常不同，即使它们执行相同的任务（例如，两个不同的网卡）。因此，设备驱动程序通常是内核的一部分，它们努力向用户进程提供统一的接口，以简化软件开发人员的工作。
- en: 1.3.4 System Calls and Support
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1.3.4 系统调用与支持
- en: There are several other kinds of kernel features available to user processes.
    For example, *system calls* (or *syscalls*) perform specific tasks that a user
    process alone cannot do well or at all. For example, the acts of opening, reading,
    and writing files all involve system calls.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他几种内核特性可供用户进程使用。例如，*系统调用*（或 *syscalls*）执行一些用户进程单独无法或不容易完成的特定任务。例如，打开、读取和写入文件的操作都涉及系统调用。
- en: 'Two system calls, `fork()` and `exec()`, are important to understanding how
    processes start:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`fork()` 和 `exec()` 两个系统调用对于理解进程如何启动至关重要：'
- en: '`fork()` When a process calls `fork()`, the kernel creates a nearly identical
    copy of the process.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fork()` 当一个进程调用 `fork()` 时，内核会创建一个几乎完全相同的进程副本。'
- en: '`exec()` When a process calls `exec(``program``)`, the kernel loads and starts
    `program`, replacing the current process.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`exec()` 当一个进程调用`exec(``program``)`时，内核加载并启动`program`，替换当前进程。'
- en: Other than init (see Chapter 6), *all* new user processes on a Linux system
    start as a result of `fork()`, and most of the time, you also run `exec()` to
    start a new program instead of running a copy of an existing process. A very simple
    example is any program that you run at the command line, such as the `ls` command
    to show the contents of a directory. When you enter `ls` into a terminal window,
    the shell that’s running inside the terminal window calls `fork()` to create a
    copy of the shell, and then the new copy of the shell calls `exec(ls)` to run
    `ls`. [Figure 1-2](#figure1-2) shows the flow of processes and system calls for
    starting a program like `ls`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 除了init（参见第6章），*所有*新的用户进程在Linux系统中都是通过`fork()`启动的，并且大多数情况下，你还会运行`exec()`来启动一个新程序，而不是运行一个现有进程的副本。一个非常简单的例子是你在命令行运行的任何程序，比如`ls`命令，用来显示目录内容。当你在终端窗口中输入`ls`时，终端窗口中运行的shell会调用`fork()`来创建一个shell的副本，然后新副本的shell会调用`exec(ls)`来运行`ls`。[图1-2](#figure1-2)展示了启动像`ls`这样的程序时，进程和系统调用的流程。
- en: '![f01002](image_fi/500402c01/f01002.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![f01002](image_fi/500402c01/f01002.png)'
- en: 'Figure 1-2: Starting a new process'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-2：启动一个新进程
- en: The kernel also supports user processes with features other than traditional
    system calls, the most common of which are *pseudodevices*. Pseudodevices look
    like devices to user processes, but they’re implemented purely in software. This
    means they don’t technically need to be in the kernel, but they are usually there
    for practical reasons. For example, the kernel random number generator device
    (*/dev/random*) would be difficult to implement securely with a user process.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 内核还通过支持其他特性来支持用户进程，这些特性不同于传统的系统调用，其中最常见的是*伪设备*。伪设备对于用户进程来说看起来像是设备，但它们完全通过软件实现。这意味着它们在技术上不需要在内核中，但通常出于实际原因，它们还是会在内核中。例如，内核的随机数生成器设备（*/dev/random*）如果用用户进程来实现，安全性会很难保障。
- en: 1.4 User Space
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4 用户空间
- en: As mentioned earlier, the main memory that the kernel allocates for user processes
    is called *user space*. Because a process is simply a state (or image) in memory,
    user space also refers to the memory for the entire collection of running processes.
    (You may also hear the more informal term *userland* used for user space; sometimes
    this also means the programs running in user space.)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，内核为用户进程分配的主内存称为*用户空间*。因为一个进程只是内存中的一个状态（或镜像），所以用户空间也指的是所有正在运行的进程的内存（你可能会听到更口语化的术语*用户域*来指代用户空间；有时它也指代在用户空间中运行的程序）。
- en: Most of the real action on a Linux system happens in user space. Though all
    processes are essentially equal from the kernel’s point of view, they perform
    different tasks for users. There is a rudimentary service level (or layer) structure
    to the kinds of system components that user processes represent. [Figure 1-3](#figure1-3)
    shows how an example set of components fit together and interact on a Linux system.
    Basic services are at the bottom level (closest to the kernel), utility services
    are in the middle, and applications that users touch are at the top. [Figure 1-3](#figure1-3)
    is a greatly simplified diagram because only six components are shown, but you
    can see that the components at the top are closest to the user (the user interface
    and web browser); the components in the middle level include a domain name caching
    server that the web browser uses; and there are several smaller components at
    the bottom.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数在Linux系统上真正发生的操作都是在用户空间中。尽管从内核的角度来看，所有进程本质上是平等的，但它们为用户执行不同的任务。用户进程所代表的系统组件有一个基本的服务层级结构。[图1-3](#figure1-3)展示了在Linux系统中，一组示例组件是如何组合在一起并相互交互的。基本服务位于最底层（最接近内核），实用服务位于中间，用户接触到的应用程序则位于顶部。[图1-3](#figure1-3)是一个大大简化的示意图，因为只显示了六个组件，但你可以看到，最顶部的组件最接近用户（用户界面和网页浏览器）；中间层的组件包括网页浏览器使用的域名缓存服务器；底层则有几个较小的组件。
- en: '![f01003](image_fi/500402c01/f01003.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![f01003](image_fi/500402c01/f01003.png)'
- en: 'Figure 1-3: Process types and interactions'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-3：进程类型与交互
- en: The bottom level tends to consist of small components that perform single, uncomplicated
    tasks. The middle level has larger components such as mail, print, and database
    services. Finally, components at the top level perform complicated tasks that
    the user often controls directly. Components also use other components. Generally,
    if one component wants to use another, the second component is either at the same
    service level or below.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最底层通常由执行单一、简单任务的小组件组成。中间层则包含更大的组件，如邮件、打印和数据库服务。最后，顶层的组件执行复杂的任务，用户通常会直接控制这些任务。组件之间也会相互使用。一般来说，如果一个组件想要使用另一个组件，第二个组件要么在同一服务层级，要么在更低层级。
- en: However, [Figure 1-3](#figure1-3) is only an approximation of the arrangement
    of user space. In reality, there are no rules in user space. For example, most
    applications and services write diagnostic messages known as *logs*. Most programs
    use the standard syslog service to write log messages, but some prefer to do all
    of the logging themselves.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[图 1-3](#figure1-3)仅仅是对用户空间排列的近似描述。实际上，用户空间没有固定规则。例如，大多数应用程序和服务会写诊断信息，也就是*日志*。大多数程序使用标准的syslog服务来写日志消息，但也有一些程序更倾向于自己完成所有日志记录。
- en: In addition, it’s difficult to categorize some user-space components. Server
    components such as web and database servers can be considered very high-level
    applications because their tasks are often complicated, so you might place these
    at the top level in [Figure 1-3](#figure1-3). However, user applications may depend
    on these servers to perform tasks that they’d rather not do themselves, so you
    could also make a case for placing them at the middle level.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，一些用户空间组件很难分类。例如，像网页和数据库服务器这样的服务器组件可以视为高级应用程序，因为它们的任务通常比较复杂，因此你可能会将它们放在[图
    1-3](#figure1-3)的顶层。然而，用户应用程序可能依赖这些服务器来完成它们自己不想做的任务，因此你也可以将它们放在中间层。
- en: 1.5 Users
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.5 用户
- en: The Linux kernel supports the traditional concept of a Unix user. A *user* is
    an entity that can run processes and own files. A user is most often associated
    with a *username*; for example, a system could have a user named *billyjoe*. However,
    the kernel does not manage the usernames; instead, it identifies users by simple
    numeric identifiers called *user IDs*. (You’ll learn more about how usernames
    correspond to user IDs in Chapter 7.)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Linux内核支持传统的Unix用户概念。*用户*是可以运行进程并拥有文件的实体。用户通常与*用户名*相关联；例如，系统可以有一个名为*billyjoe*的用户。然而，内核并不管理用户名；相反，它通过简单的数字标识符来识别用户，这些标识符称为*用户ID*。
    （你将在第七章了解更多关于用户名与用户ID之间的关系。）
- en: Users exist primarily to support permissions and boundaries. Every user-space
    process has a user *owner*, and processes are said to run *as* the owner. A user
    may terminate or modify the behavior of its own processes (within certain limits),
    but it cannot interfere with other users’ processes. In addition, users may own
    files and choose whether to share them with other users.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 用户的存在主要是为了支持权限和边界。每个用户空间进程都有一个用户*所有者*，进程被认为是*以*所有者身份运行的。用户可以终止或修改自己的进程行为（在某些限制范围内），但不能干扰其他用户的进程。此外，用户可以拥有文件并决定是否与其他用户共享这些文件。
- en: A Linux system normally has a number of users in addition to the ones that correspond
    to the real human beings who use the system. You’ll read about these in more detail
    in Chapter 3, but the most important user to know about is *root*. The root user
    is an exception to the preceding rules because root may terminate and alter another
    user’s processes and access any file on the local system. For this reason, root
    is known as the *superuser*. A person who can operate as root—that is, who has
    *root access*—is an administrator on a traditional Unix system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Linux系统通常除了与真实用户对应的用户外，还会有多个其他用户。你将在第三章中详细了解这些内容，但最重要的用户是*root*。root用户是前述规则的例外，因为root可以终止和修改其他用户的进程，并访问本地系统上的任何文件。因此，root被称为*超级用户*。可以以root身份操作的人——也就是拥有*root访问权限*的人——在传统Unix系统中是管理员。
- en: '*Groups* are sets of users. The primary purpose of groups is to allow a user
    to share file access to other members of a group.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*组*是用户的集合。组的主要目的是允许一个用户与其他组成员共享文件访问权限。'
- en: 1.6 Looking Forward
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6 展望未来
- en: So far, you’ve seen what constitutes a *running* Linux system. User processes
    make up the environment that you directly interact with; the kernel manages processes
    and hardware. Both the kernel and processes reside in memory.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经了解了构成*运行中*Linux系统的基本内容。用户进程构成了你直接交互的环境；内核管理进程和硬件。内核和进程都驻留在内存中。
- en: 'This is great background information, but you can’t learn the details of a
    Linux system by reading about it alone; you need to get your hands dirty. The
    next chapter starts your journey by teaching you some user-space basics. Along
    the way, you’ll learn about a major part of the Linux system that this chapter
    doesn’t discuss: long-term storage (disks, files, and the like). After all, you
    need to store your programs and data somewhere.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是很好的背景信息，但仅仅通过阅读你无法了解Linux系统的细节；你需要动手实践。下一章将通过教授一些用户空间的基础知识来开启你的旅程。在此过程中，你将学习到本章没有讨论的Linux系统的一个重要部分：长期存储（磁盘、文件等）。毕竟，你需要将程序和数据存储在某个地方。
