["```\n#define _GNU_SOURCE             /* Without _GNU_SOURCE the two field\nstruct exit_status {               names below are prepended by \"__\" */\n    short e_termination;        /* Process termination status (signal) */\n    short e_exit;               /* Process exit status */\n};\n\n#define __UT_LINESIZE    32\n#define __UT_NAMESIZE    32\n#define __UT_HOSTSIZE   256\n\nstruct utmpx {\n    short ut_type;                      /* Type of record */\n    pid_t ut_pid;                       /* PID of login process */\n    char  ut_line[__UT_LINESIZE];       /* Terminal device name */\n    char  ut_id[4];                     /* Suffix from terminal name, or\n                                           ID field from inittab(5) */\n    char  ut_user[__UT_NAMESIZE];       /* Username */\n    char  ut_host[__UT_HOSTSIZE];       /* Hostname for remote login, or kernel\n                                           version for run-level messages */\n    struct exit_status ut_exit;         /* Exit status of process marked\n                                           as DEAD_PROCESS (not filled\n                                           in by init(8) on Linux) */\n    long  ut_session;                   /* Session ID */\n    struct timeval ut_tv;               /* Time when entry was made */\n    int32_t ut_addr_v6[4];              /* IP address of remote host (IPv4\n                                           address uses just ut_addr_v6[0],\n                                           with other elements set to 0) */\n    char __unused[20];                  /* Reserved for future use */\n};\n```", "```\nutp->ut_type >= INIT_PROCESS && utp->ut_type <= DEAD_PROCESS\n```", "```\n#include <utmpx.h>\n\nvoid `setutxent`(void);\n```", "```\n#include <utmpx.h>\n\nvoid `endutxent`(void);\n```", "```\n#include <utmpx.h>\n\nstruct utmpx *`getutxent`(void);\nstruct utmpx *`getutxid`(const struct utmpx **ut*);\nstruct utmpx *`getutxline`(const struct utmpx **ut*);\n```", "```\nstruct utmpx *res = NULL;\n\n/* Other code omitted */\n\nif (res != NULL)            /* If 'res' was set via a previous call */\n    memset(res, 0, sizeof(struct utmpx));\nres = getutxline(&ut);\n```", "```\n#define _GNU_SOURCE\n#include <utmpx.h>\n\nint `utmpxname`(const char **file*);\n```", "```\n$ `./dump_utmpx`\nuser     type        PID line   id  host      date/time\nLOGIN    LOGIN_PR   1761 tty1   1             Sat Oct 23 09:29:37 2010\nLOGIN    LOGIN_PR   1762 tty2   2             Sat Oct 23 09:29:37 2010\nlynley   USER_PR   10482 tty3   3             Sat Oct 23 10:19:43 2010\ndavid    USER_PR    9664 tty4   4             Sat Oct 23 10:07:50 2010\nliz      USER_PR    1985 tty5   5             Sat Oct 23 10:50:12 2010\nmtk      USER_PR   10111 pts/0  /0            Sat Oct 23 09:30:57 2010\n```", "```\n$ `./dump_utmpx /var/log/wtmp`\nuser     type        PID line   id  host      date/time\nlynley   USER_PR   10482 tty3   3             Sat Oct 23 10:19:43 2010\n         DEAD_PR   10482 tty3   3   2.4.20-4G Sat Oct 23 10:32:54 2010\n```", "```\n`loginacct/dump_utmpx.c`\n#define _GNU_SOURCE\n#include <time.h>\n#include <utmpx.h>\n#include <paths.h>\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    struct utmpx *ut;\n\n    if (argc > 1 && strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s [utmp-pathname]\\n\", argv[0]);\n\n    if (argc > 1)               /* Use alternate file if supplied */\n        if (utmpxname(argv[1]) == -1)\n            errExit(\"utmpxname\");\n\n    setutxent();\n\n    printf(\"user     type        PID line   id  host      date/time\\n\");\n\n    while ((ut = getutxent()) != NULL) {        /* Sequential scan to EOF */\n        printf(\"%-8s \", ut->ut_user);\n        printf(\"%-9.9s \",\n                (ut->ut_type == EMPTY) ?         \"EMPTY\" :\n                (ut->ut_type == RUN_LVL) ?       \"RUN_LVL\" :\n                (ut->ut_type == BOOT_TIME) ?     \"BOOT_TIME\" :\n                (ut->ut_type == NEW_TIME) ?      \"NEW_TIME\" :\n                (ut->ut_type == OLD_TIME) ?      \"OLD_TIME\" :\n                (ut->ut_type == INIT_PROCESS) ?  \"INIT_PR\" :\n                (ut->ut_type == LOGIN_PROCESS) ? \"LOGIN_PR\" :\n                (ut->ut_type == USER_PROCESS) ?  \"USER_PR\" :\n                (ut->ut_type == DEAD_PROCESS) ?  \"DEAD_PR\" : \"???\");\n        printf(\"%5ld %-6.6s %-3.5s %-9.9s \", (long) ut->ut_pid,\n                ut->ut_line, ut->ut_id, ut->ut_host);\n        printf(\"%s\", ctime((time_t *) &(ut->ut_tv.tv_sec)));\n    }\n\n    endutxent();\n    exit(EXIT_SUCCESS);\n}\n     `loginacct/dump_utmpx.c`\n```", "```\n#include <unistd.h>\n\nchar *`getlogin`(void);\n```", "```\n#include <utmpx.h>\n\nstruct utmpx *`pututxline`(const struct utmpx **ut*);\n```", "```\n#define _GNU_SOURCE\n#include <utmpx.h>\n\nvoid `updwtmpx`(char **wtmpx_file*, struct utmpx **ut*);\n```", "```\n$ `su`\nPassword:\n# `./utmpx_login mtk`\nCreating login entries in utmp and wtmp\n        using pid 1471, line pts/7, id /7\n*Type Control-Z to suspend program*\n[1]+  Stopped                 ./utmpx_login mtk\n```", "```\n# `./dump_utmpx /var/run/utmp`\nuser     type        PID line   id  host      date/time\ncecilia  USER_PR     249 tty1   1             Fri Feb  1 21:39:07 2008\nmtk      USER_PR    1471 pts/7  /7            Fri Feb  1 22:08:06 2008\n# `who`\ncecilia  tty1     Feb  1 21:39\nmtk      pts/7    Feb  1 22:08\n```", "```\n# `./dump_utmpx /var/log/wtmp`\nuser     type        PID line   id  host      date/time\ncecilia  USER_PR     249 tty1   1             Fri Feb  1 21:39:07 2008\nmtk      USER_PR    1471 pts/7  /7            Fri Feb  1 22:08:06 2008\n# `last mtk`\nmtk      pts/7                      Fri Feb  1 22:08   still logged in\n```", "```\n# `fg`\n./utmpx_login mtk\nCreating logout entries in utmp and wtmp\n```", "```\n# `./dump_utmpx /var/run/utmp`\nuser     type        PID line   id  host      date/time\ncecilia  USER_PR     249 tty1   1             Fri Feb  1 21:39:07 2008\n         DEAD_PR    1471 pts/7  /7            Fri Feb  1 22:09:09 2008\n# `who`\ncecilia  tty1     Feb  1 21:39\n```", "```\n# `./dump_utmpx /var/log/wtmp`\nuser     type        PID line   id  host      date/time\ncecilia  USER_PR     249 tty1   1             Fri Feb  1 21:39:07 2008\nmtk      USER_PR    1471 pts/7  /7            Fri Feb  1 22:08:06 2008\n         DEAD_PR    1471 pts/7  /7            Fri Feb  1 22:09:09 2008\n# `last mtk`\nmtk      pts/7                      Fri Feb  1 22:08 - 22:09  (00:01)\n```", "```\n`loginacct/utmpx_login.c`\n#define _GNU_SOURCE\n#include <time.h>\n#include <utmpx.h>\n#include <paths.h>              /* Definitions of _PATH_UTMP and _PATH_WTMP */\n#include \"tlpi_hdr.h\"\nint\nmain(int argc, char *argv[])\n{\n    struct utmpx ut;\n    char *devName;\n\n    if (argc < 2 || strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s username [sleep-time]\\n\", argv[0]);\n\n    /* Initialize login record for utmp and wtmp files */\n\n    memset(&ut, 0, sizeof(struct utmpx));\n    ut.ut_type = USER_PROCESS;          /* This is a user login */\n    strncpy(ut.ut_user, argv[1], sizeof(ut.ut_user));\n    if (time((time_t *) &ut.ut_tv.tv_sec) == -1)\n        errExit(\"time\");                /* Stamp with current time */\n    ut.ut_pid = getpid();\n\n    /* Set ut_line and ut_id based on the terminal associated with\n       'stdin'. This code assumes terminals named \"/dev/[pt]t[sy]*\".\n       The \"/dev/\" dirname is 5 characters; the \"[pt]t[sy]\" filename\n       prefix is 3 characters (making 8 characters in all). */\n\n    devName = ttyname(STDIN_FILENO);\n    if (devName == NULL)\n        errExit(\"ttyname\");\n    if (strlen(devName) <= 8)           /* Should never happen */\n        fatal(\"Terminal name is too short: %s\", devName);\n\n    strncpy(ut.ut_line, devName + 5, sizeof(ut.ut_line));\n    strncpy(ut.ut_id, devName + 8, sizeof(ut.ut_id));\n\n    printf(\"Creating login entries in utmp and wtmp\\n\");\n    printf(\"        using pid %ld, line %.*s, id %.*s\\n\",\n            (long) ut.ut_pid, (int) sizeof(ut.ut_line), ut.ut_line,\n            (int) sizeof(ut.ut_id), ut.ut_id);\n\n    setutxent();                        /* Rewind to start of utmp file */\n    if (pututxline(&ut) == NULL)        /* Write login record to utmp */\n        errExit(\"pututxline\");\n    updwtmpx(_PATH_WTMP, &ut);          /* Append login record to wtmp */\n\n    /* Sleep a while, so we can examine utmp and wtmp files */\n\n    sleep((argc > 2) ? getInt(argv[2], GN_NONNEG, \"sleep-time\") : 15);\n\n    /* Now do a \"logout\"; use values from previously initialized 'ut',\n       except for changes below */\n\n    ut.ut_type = DEAD_PROCESS;          /* Required for logout record */\n    time((time_t *) &ut.ut_tv.tv_sec);  /* Stamp with logout time */\n    memset(&ut.ut_user, 0, sizeof(ut.ut_user));\n                                        /* Logout record has null username */\n    printf(\"Creating logout entries in utmp and wtmp\\n\");\n    setutxent();                        /* Rewind to start of utmp file */\n    if (pututxline(&ut) == NULL)        /* Overwrite previous utmp record */\n        errExit(\"pututxline\");\n    updwtmpx(_PATH_WTMP, &ut);          /* Append logout record to wtmp */\n\n    endutxent();\n    exit(EXIT_SUCCESS);\n}\n      `loginacct/utmpx_login.c`\n```", "```\n#define UT_NAMESIZE           32\n#define UT_HOSTSIZE          256\n\nstruct lastlog {\n    time_t ll_time;                     /* Time of last login */\n    char   ll_line[UT_NAMESIZE];        /* Terminal for remote login */\n    char   ll_host[UT_HOSTSIZE];        /* Hostname for remote login */\n};\n```", "```\n$ `./view_lastlog annie paulh`\nannie    tty2                        Mon Jan 17 11:00:12 2011\npaulh    pts/11                      Sat Aug 14 09:22:14 2010\n```", "```\n`loginacct/view_lastlog.c`\n#include <time.h>\n#include <lastlog.h>\n#include <paths.h>                      /* Definition of _PATH_LASTLOG */\n#include <fcntl.h>\n#include \"ugid_functions.h\"             /* Declaration of userIdFromName() */\n#include \"tlpi_hdr.h\"\n\nint\nmain(int argc, char *argv[])\n{\n    struct lastlog llog;\n    int fd, j;\n    uid_t uid;\n\n    if (argc > 1 && strcmp(argv[1], \"--help\") == 0)\n        usageErr(\"%s [username...]\\n\", argv[0]);\n\n    fd = open(_PATH_LASTLOG, O_RDONLY);\n    if (fd == -1)\n        errExit(\"open\");\n\n    for (j = 1; j < argc; j++) {\n        uid = userIdFromName(argv[j]);\n        if (uid == -1) {\n            printf(\"No such user: %s\\n\", argv[j]);\n            continue;\n        }\n\n        if (lseek(fd, uid * sizeof(struct lastlog), SEEK_SET) == -1)\n            errExit(\"lseek\");\n\n        if (read(fd, &llog, sizeof(struct lastlog)) <= 0) {\n            printf(\"read failed for %s\\n\", argv[j]);    /* EOF or error */\n            continue;\n        }\n\n        printf(\"%-8.8s %-6.6s %-20.20s %s\", argv[j], llog.ll_line,\n                llog.ll_host, ctime((time_t *) &llog.ll_time));\n    }\n\n    close(fd);\n    exit(EXIT_SUCCESS);\n}\n      `loginacct/view_lastlog.c`\n```"]