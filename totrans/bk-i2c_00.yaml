- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Welcome to *The Book of I*^(*2*)*C*. This book provides the resources you need
    to design and program systems using the Inter-Integrated Circuit Bus (IIC, I2C,
    or I²C), a serial protocol for connecting various integrated circuits (ICs) together
    in computer systems. This book will teach you how to expand your embedded system
    design by adding I²C peripherals with minimal wiring and software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*《I*^(*2*)*C 之书*》。本书提供了设计和编程使用互连电路总线（IIC、I2C 或 I²C）的系统所需的资源，I²C 是一种用于将各种集成电路（IC）连接到计算机系统中的串行协议。本书将教你如何通过添加
    I²C 外设来扩展嵌入式系统设计，且仅需极少的接线和软件。
- en: To paraphrase from [https://i2c.info](https://i2c.info), I²C uses only two wires
    to easily connect devices such as microcontrollers, A/D and D/A converters, digital
    I/O, memory, and many others, together in an embedded system. Although it was
    originally developed by Philips (now NXP Semiconductors), most major IC manufacturers
    now support I²C. I²C is popular because it is ubiquitous—most CPUs destined for
    embedded systems include support for I²C—and its peripheral ICs are inexpensive.
    It is present in hobbyist systems like Arduino and Raspberry Pi, as well as in
    most professional single-board computers (SBCs) intended for use in embedded systems.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 引用 [https://i2c.info](https://i2c.info) 的内容，I²C 只使用两根线即可轻松地将微控制器、A/D 和 D/A 转换器、数字
    I/O、存储器等设备连接到嵌入式系统中。尽管最初由飞利浦（现为 NXP 半导体）开发，但现在大多数主要的 IC 制造商都支持 I²C。I²C 之所以受欢迎，是因为它普及——大多数嵌入式系统所用的
    CPU 都支持 I²C——并且其外设 IC 价格低廉。它广泛应用于像 Arduino 和 Raspberry Pi 这样的爱好级系统，以及大多数用于嵌入式系统的专业单板计算机（SBC）中。
- en: The I²C bus is especially important on hobbyist-level embedded systems employed
    by “makers” working on personal projects, which typically use a commercially available
    off-the-shelf (COTS) SBC like an Arduino Uno, Teensy 4.*x*, or Raspberry Pi as
    the brains for the system. Such SBCs generally have limited I/O capability or
    other limitations, so the addition of peripheral ICs may be necessary to realize
    a given design. The I²C bus is one of the most popular and common ways to expand
    such systems, since it’s easy, convenient, and inexpensive to use. Furthermore,
    there are hundreds of different devices available as individual ICs with a wide
    range of capabilities that connect directly to the I²C bus. Combined with a huge
    library of open source code to control these devices (especially for Arduino devices),
    it’s almost trivial to expand small systems using the I²C bus.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 总线在由“创客”用于个人项目的爱好级嵌入式系统中尤为重要，这些系统通常使用类似 Arduino Uno、Teensy 4.*x* 或 Raspberry
    Pi 等市售的单板计算机（SBC）作为系统的“大脑”。这些 SBC 通常具有有限的 I/O 能力或其他限制，因此可能需要添加外设 IC 来实现特定设计。I²C
    总线是扩展这些系统的最流行和常见方式之一，因为它易于使用、方便且廉价。此外，市面上有成百上千种具有广泛功能的独立 IC 设备，可以直接连接到 I²C 总线。再加上庞大的开源代码库（特别是针对
    Arduino 设备的代码），使用 I²C 总线扩展小型系统几乎变得轻而易举。
- en: Although higher-end custom SBCs intended for professional embedded systems often
    include many of the peripherals missing in hobbyist-grade SBCs, the I²C bus is
    still a cost-effective way to design such systems. Often, peripherals that don’t
    have high-performance requirements connect to the CPU on the SBC using the I²C
    bus.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管面向专业嵌入式系统的高端定制 SBC 通常包括爱好级 SBC 所缺少的许多外设，但 I²C 总线仍然是设计此类系统的一种成本效益高的方式。通常，性能要求不高的外设通过
    I²C 总线与 SBC 上的 CPU 连接。
- en: Because of the ubiquity of the I²C, it is difficult to work on embedded systems
    these days without at least a passing familiarity with the I²C bus. Sadly, most
    programmers are expected to figure out how to use the I²C bus on their own by
    searching the internet and piecing together design and programming information.
    This book rectifies that situation, collecting into one comprehensive book the
    resources needed to fully understand how to design and program systems using the
    I²C bus.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 I²C 总线的普遍存在，现如今如果不至少对 I²C 总线有一些基本了解，就很难从事嵌入式系统的开发。不幸的是，大多数程序员都被期望通过搜索互联网、拼凑设计和编程信息来弄清楚如何使用
    I²C 总线。本书解决了这个问题，收集了所有需要的资源，将它们整合成一本全面的书籍，帮助读者完全理解如何使用 I²C 总线设计和编程系统。
- en: Expectations and Prerequisites
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预期与前提条件
- en: Working with I²C peripherals requires some hardware and software expertise.
    In theory, an electrical engineer with no software experience could design some
    hardware and hand it off to a software engineer with no hardware experience, and
    the two of them could get something working. However, this book is not intended
    to be read by such teams. Rather, it’s meant for software engineers who aren’t
    afraid to get their hands dirty by working directly with the hardware, or for
    hardware engineers who aren’t afraid to sit down with a text editor and write
    software.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 I²C 外设需要一定的硬件和软件专业知识。理论上，一个没有软件经验的电子工程师可以设计一些硬件，然后交给一个没有硬件经验的软件工程师，两人合作可以完成某些工作。然而，本书并不是为这种团队而写的。相反，它是为那些不怕直接与硬件打交道的软件工程师，或那些不怕坐下来用文本编辑器编写软件的硬件工程师所准备的。
- en: '*The Book of I*^(*2*)*C* assumes you are capable of reading schematics and
    wiring a COTS SBC (such as an Arduino, Pi, or other commercially available SBC)
    to various peripheral devices using breadboarding or point-to-point wiring on
    prototyping boards. You should be comfortable using tools such as DVMs, oscilloscopes,
    logic analyzers, and more to examine and debug such circuits.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*《I*^(*2*)*C* 的书* 假设你能够阅读原理图，并将 COTS SBC（如 Arduino、Pi 或其他商用 SBC）通过面包板或原型板上的点对点布线连接到各种外设。你应该能够熟练使用万用表、示波器、逻辑分析仪等工具来检查和调试这些电路。'
- en: This book also assumes you are familiar with the C/C++ programming language
    and are capable of creating, testing, and debugging decent-sized programs on the
    aforementioned SBCs. Although I²C code can be written in many different languages
    (including assembly language, Java, and Python), C/C++ is the universal language
    for embedded systems. Almost every COTS SBC’s development software supports using
    C/C++, so the book assumes prior knowledge of this language.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书还假设你熟悉 C/C++ 编程语言，并能够在上述单板计算机（SBC）上创建、测试和调试适当大小的程序。虽然 I²C 代码可以用多种不同的语言编写（包括汇编语言、Java
    和 Python），但 C/C++ 是嵌入式系统的通用语言。几乎每个商用现成单板计算机（COTS SBC）的开发软件都支持使用 C/C++，因此本书假设读者已经掌握了这门语言。
- en: Most of the examples in this book use the Arduino library due to its widespread
    use and simplicity. Therefore, it assumes at least a passing familiarity with
    the Arduino system. The Raspberry Pi examples obviously use the Raspberry Pi OS
    (Linux) and the Pi OS I²C library code; the book provides links to the documentation
    for those libraries as appropriate. For other systems (for example, µC/OS running
    on a NetBurner module or MBED running on an STM32 module), this book assumes no
    prior knowledge and provides either the necessary information or links to the
    associated documentation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数示例使用了 Arduino 库，因为它广泛应用且易于使用。因此，假设读者至少对 Arduino 系统有基本的了解。树莓派的示例显然使用树莓派操作系统（Linux）和
    Pi OS I²C 库代码；本书提供了这些库文档的链接。对于其他系统（例如，运行在 NetBurner 模块上的 µC/OS 或运行在 STM32 模块上的
    MBED），本书假设读者没有先前的知识，并提供必要的信息或相关文档的链接。
- en: The software tools for embedded system programming generally run on Windows,
    macOS, or Linux. You should be familiar with the particular system running these
    tools (for example, the C/C++ compilers) and capable of running those tools on
    your own system, including learning how to use, install, and configure those tools
    with their accompanying documentation. As necessary, this book will describe how
    to find those tools and their documentation; however, its focus is the I²C bus,
    not running C/C++ compilers and integrated development environments (IDEs), so
    it leaves you to learn more about tools on your own.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式系统编程的软件工具通常运行在 Windows、macOS 或 Linux 上。你应该熟悉运行这些工具的特定系统（例如，C/C++ 编译器），并能够在自己的系统上运行这些工具，包括学习如何使用、安装和配置这些工具及其相关文档。必要时，本书会描述如何找到这些工具及其文档；然而，本书的重点是
    I²C 总线，而不是如何运行 C/C++ 编译器和集成开发环境（IDE），因此它留给你自己去了解这些工具。
- en: Source Code in This Book
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书中的源代码
- en: 'This book contains considerable C/C++ source code that comes in one of three
    forms: code snippets, modules, and full-blown programs.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含大量的 C/C++ 源代码，代码形式有三种：代码片段、模块和完整程序。
- en: '*Code snippets* are fragments of a program, provided to make a point or provide
    an example of some programming technique. They are not stand-alone, and you cannot
    compile them using a C/C++ compiler. Here is a typical example of a snippet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*代码片段*是程序的片段，提供这些片段是为了说明某个观点或提供某种编程技巧的示例。它们不是独立的，你不能使用 C/C++ 编译器编译它们。以下是一个典型的代码片段示例：'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The vertical ellipses in this example denote some arbitrary code that could
    appear in their place.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例中的竖直省略号表示可以替代的任意代码。
- en: '*Modules* are small C/C++ code sections that are compilable but won’t run on
    their own. Modules typically contain a function that some other program will call.
    Here is a typical example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块*是可以编译但不能独立运行的小型 C/C++ 代码块。模块通常包含某些其他程序将调用的函数。以下是一个典型的示例：'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Full-blown programs are called *listings* in this book, and I refer to them
    by listing number or filename. For example, the following example listing for
    an Arduino “blink” program is taken from the file *Listing1-1.ino*. The name indicates
    that it is the first listing in Chapter 1, and I refer to it as [Listing 1-1](#listing1-1)
    in the surrounding text, labeling the code itself with the filename in the comments:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中完整的程序称为 *listings*，我通过 listing 编号或文件名来引用它们。例如，以下是 Arduino “闪烁”程序的示例 listing，来自文件
    *Listing1-1.ino*。文件名表示它是第1章中的第一个 listing，我在周围的文本中将其称为 [Listing 1-1](#listing1-1)，并在代码本身的注释中标明文件名：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that the *Listing1-1.ino* filename format applies only to code of my own
    making. Any other source code retains its original filename. For example, I refer
    to Chapter 16’s code from the TinyWire library as *attiny84_Periph.ino*. Certain
    non-Arduino systems (Pi OS and MBED, for example) use a standard *main.cpp* filename
    for their main programs; this book will generally place such programs in a subdirectory
    with a name such as *Listingx-x* and refer to that whole directory as the “listing.”
    Many listings in this book are sufficiently long that I’ve broken them up into
    sections with text annotation between the sections. In such instances, I will
    place a comment such as `// Listing10-1.ino (cont.)` at the beginning of each
    section to provide continuity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，*Listing1-1.ino* 文件名格式仅适用于我自己编写的代码。其他源代码保持其原始文件名。例如，我提到的第16章中 TinyWire 库的代码是
    *attiny84_Periph.ino*。某些非 Arduino 系统（例如 Pi OS 和 MBED）使用标准的 *main.cpp* 文件名作为主程序；本书通常会将这些程序放在一个名为
    *Listingx-x* 的子目录中，并将整个目录称为“listing”。本书中的许多 listing 足够长，我已经将它们分成多个部分，并在各部分之间加上文本注释。在这种情况下，我会在每个部分的开头放置类似
    `// Listing10-1.ino (cont.)` 的注释，以保持连续性。
- en: All listings and modules are available in electronic form at my website [https://bookofi2c.randallhyde.com](https://bookofi2c.randallhyde.com),
    either individually or as a ZIP file containing all the listings and other support
    information for this book, including errata, electronic chapters, and more.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 listing 和模块的电子版本都可以在我的网站 [https://bookofi2c.randallhyde.com](https://bookofi2c.randallhyde.com)
    上获取，可以单独下载或作为一个包含所有 listing 和其他支持信息（包括勘误表、电子章节等）的 ZIP 文件下载。
- en: Unless otherwise noted, all source code appearing in this book is covered under
    the Creative Commons 4.0 license. You may freely use that code in your own projects
    as per the Creative Commons license. See [https://creativecommons.org/licenses/by/4.0](https://creativecommons.org/licenses/by/4.0)
    for more details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，本书中出现的所有源代码都受到 Creative Commons 4.0 许可证的保护。根据 Creative Commons 许可证，你可以自由地将这些代码用于你自己的项目。更多详情请参见
    [https://creativecommons.org/licenses/by/4.0](https://creativecommons.org/licenses/by/4.0)。
- en: Typography and Pedantry
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排版与学究主义
- en: Computer books have a habit of abusing the English language, and this book is
    no exception. Whenever source code snippets appear in the middle of an English
    sentence, there is often a conflict between the grammar rules of the programming
    language and English. In this section, I describe my choices for differentiating
    syntactical rules in English versus programming languages, in addition to a few
    other conventions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机书籍往往有滥用英语语言的习惯，而这本书也不例外。每当源代码片段出现在英文句子中间时，编程语言的语法规则和英语的语法规则之间通常会发生冲突。在本节中，我将描述我在区分英语语法规则与编程语言语法规则时的选择，以及其他一些约定。
- en: First, this book uses a monospace font to denote any text that appears as part
    of a program source file. This includes variable and procedure function names,
    program output, and user input to a program. Therefore, when you see something
    like `get`, you know that the book is describing an identifier in a program, not
    commanding you to get something.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，本书使用等宽字体来表示任何作为程序源文件一部分的文本。这包括变量和过程函数名称、程序输出以及用户对程序的输入。因此，当你看到像`get`这样的词时，你知道本书是在描述程序中的标识符，而不是命令你去获取某样东西。
- en: There are a few logic operations whose names also have common English meanings.
    These logic operations are AND, OR, and NOT. When using these terms as logic functions,
    this book uses all caps to help differentiate otherwise confusing English statements.
    When using these terms as English, this book uses the standard typeset font. The
    fourth logic operator, exclusive-OR (XOR), doesn’t normally appear in English
    statements, but this book still capitalizes it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些逻辑操作的名称也有常见的英语含义。这些逻辑操作是AND、OR和NOT。当作为逻辑函数使用这些术语时，本书使用全大写字母以帮助区分可能会让人困惑的英语语句。当这些术语作为英语使用时，本书使用标准排版字体。第四个逻辑运算符，异或（XOR），通常不会出现在英语语句中，但本书仍然将其大写。
- en: In general, I always try to define any acronym or abbreviation the first time
    I use it. If I haven’t used the term in a while, I often redefine it when I use
    it next. I’ve added a glossary where I define most of the acronyms (and other
    technical terms) appearing in this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，我总是尽量在第一次使用任何缩略语或简称时进行定义。如果我很久没有使用这个术语了，我通常会在下一次使用时重新定义它。我在本书中增加了一个术语表，定义了大部分出现的缩略语（和其他技术术语）。
- en: Finally, hardcore electrical engineers will often use the term *buss* when describing
    a collection of electronic signals, especially when describing buss bars. However,
    I use the spellings *bus* and *buses* simply because they are more prevalent in
    literature discussing the I²C bus.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，硬核电气工程师通常在描述一组电子信号时使用*buss*一词，尤其是在描述总线条时。然而，我使用*bus*和*buses*的拼写，因为它们在讨论I²C总线的文献中更为常见。
- en: A Note About Terminology
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于术语的说明
- en: In 2020, several major electronics firms and other members of the Open Source
    Hardware Association (OSHWA) proposed changing the names of various SPI bus terms
    to eliminate terms that some find morally questionable. The electronics industry
    has long used the terms *master* and *slave* to describe the operating hierarchy
    of various devices in the system. There is no technical justification for these
    names; they don’t even precisely describe the relationship between devices, so
    better terms would be desirable even if other issues weren’t a factor.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在2020年，几家主要电子公司和开放源代码硬件协会（OSHWA）的其他成员提议更改各种SPI总线术语的名称，以消除一些人认为在道德上有问题的术语。电子行业长期以来一直使用*master*（主设备）和*slave*（从设备）来描述系统中各种设备的操作层次结构。这些名称没有技术上的正当理由；它们甚至无法精确地描述设备之间的关系，因此即使没有其他问题，使用更合适的术语也是值得推崇的。
- en: 'Although this is a book about the I²C bus, not the SPI bus, I²C is probably
    next on the list (as SparkFun notes at [https://www.sparkfun.com/spi_signal_names](https://www.sparkfun.com/spi_signal_names)).
    Though the I²C bus does not have pins using the names master or slave, the terms
    *master*, *slave*, *multimaster*, and *multislave* are common in I²C literature.
    This book substitutes the following more descriptive and less offensive terms,
    as per the OSHWA guidelines for the SPI bus:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一本关于I²C总线的书，而不是SPI总线，但I²C可能是下一个需要修改的术语（正如SparkFun在[https://www.sparkfun.com/spi_signal_names](https://www.sparkfun.com/spi_signal_names)所提到的）。虽然I²C总线没有使用*master*或*slave*的引脚名称，但术语*master*、*slave*、*multimaster*和*multislave*在I²C文献中很常见。根据OSHWA的SPI总线指南，本书采用了以下更具描述性且不具冒犯性的术语：
- en: '*Master becomes *controller**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Master变为*controller**'
- en: '**   *Multimaster becomes *multicontroller****   *Slave becomes *peripheral****   *Multislave
    becomes *multiperipheral*****'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**   *Multimaster变为*multicontroller**   *Slave变为*peripheral**   *Multislave变为*multiperipheral**'
- en: '**Of course, *controller* and *peripheral* have their own meanings and may
    not always correspond to an I²C bus controller or peripheral device. However,
    context within this book will make it clear which meaning I intend. Considerable
    historical documentation continues to use the terms *master* and *slave*, but
    you can simply mentally convert between *master*/*controller* and *slave*/*peripheral*.
    To avoid confusion with such historical documentation, this book uses *master*
    and *slave* only when referring to external documentation that uses those terms.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Organization
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This book is organized into four parts as follows, in addition to appendixes
    and online chapters:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**Part I: Low-Level Protocols and Hardware**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: This part describes the signals and hardware for the I²C. Though you don’t necessarily
    need to know this information in order to design systems using the I²C bus or
    to write code to program peripherals, this knowledge is handy when debugging hardware
    and software that use the I²C bus. Part I also includes a software implementation
    of the I²C bus for those software engineers who relate more to code than electrical
    specifications, as well as a section on analyzing and debugging I²C bus transactions.
    Finally, the section concludes by discussing various real-world extensions to
    the I²C bus.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Part II: Hardware Implementations**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'This part describes several real-world implementations of the I²C bus. In particular,
    it reviews the I²C implementation of the following pieces of hardware:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arduino systems (and compatibles)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Teensy 3.*x* and 4.*x* SBC I²C implementations
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Raspberry Pi, BeagleBone Black, PINE64 and ROCKPro64, Onion, and other Linux
    systems
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The STM32/Nucleo-144/Nucleo-64 I²C implementation
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NetBurner MOD54415 I²C implementation
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Part II also describes the following I²C bus implementations:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Adafruit Feather bus
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SparkFun Qwiic bus
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Seeed Studio Grove bus
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Part III: Programming the I²C Bus**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: This part discusses programming devices on the I²C bus. It covers various generic
    programming techniques, such as real-time OS I²C programming, as well as providing
    specific real-world programming examples for Arduino, Raspberry Pi, Teensy, MBED,
    and NetBurner. Part III also describes how to implement an I²C using bare-metal
    programming techniques—those that work at the hardware level rather than calling
    library code.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Part IV: I²C Peripheral Programming Examples**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: This part provides programming examples for some common real-world I²C peripheral
    ICs, including the MCP23017 GPIO expander, ADS1115 16-bit A/D converter, MCP4725
    D/A converter, and TCA9548A I²C multiplexer. Part IV also describes how to use
    a SparkFun Atto84 module as a custom I²C peripheral.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Appendixes**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A is a snapshot of the Adafruit I²C Address Compilation, which lists
    the addresses of hundreds of commerically available I²C peripheral ICs.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Appendix B contains an overview of the online content. No matter how many pages
    I add to this book, it will be woefully incomplete. There are just too many I²C
    controllers and peripherals available. Furthermore, new peripherals will certainly
    appear after this book is published. To resolve this conundrum (and reduce the
    price you have to pay for this book), additional chapters are available online
    at [https://bookofi2c.randallhyde.com](https://bookofi2c.randallhyde.com).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 附录 B 包含在线内容的概述。无论我向本书添加多少页，它都将显得不完全，因为市场上有太多 I²C 控制器和外设。此外，在本书出版后，肯定会有新的外设出现。为了解决这个难题（并降低你购买本书的价格），额外的章节可以在
    [https://bookofi2c.randallhyde.com](https://bookofi2c.randallhyde.com) 在线访问。
- en: 'The online content will cover (among other things) the following topics:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在线内容将涵盖（其中包括）以下主题：
- en: The MCP4728 quad DAC
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MCP4728 四通道 DAC
- en: The Maxim DS3502 digital potentiometer
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maxim DS3502 数字电位计
- en: The DS3231 precision real-time clock
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DS3231 精密实时时钟
- en: The MCP9600 thermocouple amplifier
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MCP9600 热电偶放大器
- en: I²C displays
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: I²C 显示器
- en: The SX1509 GPIO interface
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SX1509 GPIO 接口
- en: The PCA9685 PCM/servo interface
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PCA9685 PCM/伺服接口
- en: The INA169 and INA218 current sensors
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: INA169 和 INA218 电流传感器
- en: The MPR121 capacitive touch interface
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MPR121 电容式触摸接口
- en: The Raspberry Pi Pico SBC
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi Pico SBC
- en: Espressif ESP32 (and ESP8266) SBCs
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Espressif ESP32（以及 ESP8266）SBC
- en: '**Glossary**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**术语表**'
- en: A list of the terms and acronyms appearing in this book.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本书中出现的术语和缩写列表。
- en: In addition to the online chapters, the website will contain help on constructing
    the circuitry appearing in this book and other information of interest to someone
    programming I²C peripherals. It will also contain a parts list for all the electronic
    projects appearing within this book. My goal is to continuously update this information
    as new (important) peripherals and controllers appear that utilize the I²C bus.**
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了在线章节外，网站还将提供帮助，指导如何构建本书中出现的电路，并提供有关编程 I²C 外设的其他信息。它还将包含本书中所有电子项目的零件清单。我的目标是随着新的（重要的）外设和控制器的出现，不断更新这些信息，这些新设备利用
    I²C 总线。**
