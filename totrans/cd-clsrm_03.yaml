- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Computer Science History
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机科学历史
- en: In this chapter, you’ll learn the technical details of every ­logical layer
    inside your computer, from what you see on your monitor to the electronic circuits
    that move bits of data. Learning this information is an exercise in *decomposition*.
    You’ll break down a highly complex system, the computer, into some of its smaller
    parts to understand them. Students familiar with the end-to-end operations of
    a computer will have deeper technical insights and appreciation of computer systems
    in general.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解计算机内部每一逻辑层的技术细节，从你在显示器上看到的内容到移动数据位的电子电路。学习这些信息是一次*分解*的练习。你将把一个高度复杂的系统——计算机，拆解成它的一些较小部分进行理解。熟悉计算机端到端操作的学生将对计算机系统有更深的技术见解和更强的感知。
- en: As we move down each layer of logic, we’ll travel through history, going back
    to times when those layers were primarily how humans worked with computers. We’ll
    go from the point-and-click interfaces we use today back to when programming required
    flipping electric switches and soldering circuits.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们向下穿越每一层逻辑，我们将穿越历史，回到那些层次主要是人类与计算机交互的时代。我们将从今天使用的点选界面回到需要翻动电气开关和焊接电路的编程时代。
- en: You’ll learn how each innovation hides the complexity of the layer below it
    and the importance of *abstractions*, names and symbols that allow users to interact
    with computers without having to know the complex details of how they operate.
    Students should appreciate how each generation of programmers developed abstractions
    that made computers more accessible to the generations that followed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习每项创新如何隐藏其下层的复杂性，以及*抽象*的重要性，抽象是允许用户与计算机互动的名称和符号，而无需了解其操作的复杂细节。学生们应该理解每一代程序员是如何开发出让计算机对后续世代更易接触的抽象概念的。
- en: Students should realize how much they don’t know and can’t know about these
    immensely complex computing systems. The modern computer is a vast ecosystem of
    solutions built up through generations of innovators. Also, students should acknowledge
    that all people are ignorant in some areas of computer science and approach the
    subject with personal humility, sensitivity to peers who aren’t aware of certain
    facts, and deep gratitude for everyone who has contributed to making computer
    science more accessible for all.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 学生应该意识到他们对这些极为复杂的计算系统知道多少，以及他们无法知道的东西。现代计算机是一个庞大的解决方案生态系统，是一代代创新者共同构建起来的。此外，学生们应该认识到所有人在计算机科学的某些领域都有无知，并以个人谦逊、对那些不了解某些事实的同伴的敏感态度，以及对所有为让计算机科学更易接触而做出贡献的人深深的感激来对待这一学科。
- en: The User Interface
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面
- en: Most of us are familiar with the icons that represent certain programs. But
    how often do we think about the real-world objects these icons are based on? Figure
    3-1 shows some of the many icons that identify various applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大多数人都熟悉代表特定程序的图标。但我们有多久没有思考这些图标所基于的现实世界物体了？图 3-1 展示了识别各种应用程序的众多图标之一。
- en: '![](image/CitC03_01_Metaphors.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_01_Metaphors.png)'
- en: 'Figure 3-1: The many metaphors used to abstract away computational complexity'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1：用于抽象计算复杂性的多种隐喻
- en: 'For example, paper folders represent file locations, cogs and gears represent
    settings, and postal envelopes represent electronic mail. These icons use objects
    from the physical world to interface with algorithms and information architectures
    that are incomprehensibly complex to the human mind. These technical complexities
    become accessible to us through an interface that presents only the abstraction:
    a single icon we can click without a second thought.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，纸质文件夹代表文件位置，齿轮和齿轮代表设置，邮政信封代表电子邮件。这些图标使用现实世界中的物体来与人类难以理解的算法和信息架构进行交互。通过这种只呈现抽象概念的界面，我们可以点击这些图标而无需再多想。
- en: So what does the Save icon do on the computer? When we click this icon, we send
    a command to the software we’re using, which in turn communicates with the computer’s
    operating system to save the file. The operating system takes the contents of
    what we’re saving from working memory and sends a command to the hard drive controllers
    to store the contents in its long-term memory along with a directory address.
    The long-term memory hardware, such as a hard drive or flash drive, commits the
    contents in bytes of bits stored along various physical locations within the device.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，计算机上的保存图标到底做了什么呢？当我们点击这个图标时，我们向正在使用的软件发送一个命令，软件再与计算机的操作系统通信来保存文件。操作系统从工作内存中获取我们要保存的内容，并向硬盘控制器发送命令，将内容存储到长期内存中，并附带一个目录地址。长期存储硬件，如硬盘或闪存驱动器，将内容以字节的形式存储在设备的多个物理位置中。
- en: This complex, highly technical chain of events is completely abstracted away
    from the end user. The user simply clicks a disk icon, watches an indicator spin,
    and moves on to initiating the next mind-bafflingly complex sequence of processes
    hidden behind this wall of abstractions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这条复杂且高度技术化的事件链完全对最终用户进行了抽象处理。用户只需点击一个磁盘图标，观看指示器旋转，然后继续启动下一个隐藏在这些抽象背后的复杂过程序列。
- en: What might surprise your students is that behind these abstractions is *another*
    layer of abstractions. These icons might trigger programming functions in the
    code with names like loadContactList(), checkForNewMessages(), or plotNavigation­BetweenTwoPoints(),
    themselves representations that abstract away complexity for easy use. Figure
    3-2 shows the many levels of coding abstractions, starting with the user interface
    (UI) and descending to the machine’s architecture.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的学生感到惊讶的是，在这些抽象背后还有*另一层*抽象。这些图标可能会触发代码中的编程功能，函数名称如loadContactList()、checkForNewMessages()或plotNavigation­BetweenTwoPoints()，它们本身就是将复杂性抽象化以便于使用的表示。图3-2展示了编码抽象的多个层次，从用户界面(UI)开始，向下到机器架构。
- en: '![](image/CitC03_02_LanguageLevelsDiagram.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_02_LanguageLevelsDiagram.png)'
- en: 'Figure 3-2: The levels of code and languages between the user and the computer’s
    hardware'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-2：用户与计算机硬件之间的代码和语言层次
- en: In this diagram, we see many levels of abstraction between the user and the
    computer’s hardware. As we move down the levels, the code examples grow increasingly
    challenging to understand because the syntax more closely conforms to the computer’s
    architecture and hardware configuration. In the next section, we’ll look at the
    code just beneath the UI.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个图表中，我们可以看到用户与计算机硬件之间有许多层次的抽象。当我们向下移动这些层次时，代码示例变得越来越难以理解，因为语法与计算机的架构和硬件配置更加契合。在下一节中，我们将看到紧接着UI下方的代码。
- en: High-Level Code
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级代码
- en: Just below the UI is the *high-level code*, code where the syntax is more legible
    to humans than the code further down the stack. This is the code your students
    will work with most often in class and in the professional world. Listing 3-1
    shows an elegant bit of high-level code that draws polygons in the web browser.
    *Comments*, human-readable annotations the computer ignores, are included after
    each // in the code to explain some of the functions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 紧接在UI下方的是*高级代码*，它的语法对人类来说比栈下方的代码更容易理解。这是你的学生在课堂上和专业领域中最常接触的代码。清单3-1展示了一段优雅的高级代码，它在网页浏览器中绘制多边形。*注释*（计算机会忽略的可读注释）位于每个//后面，用来解释代码中的一些功能。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 3-1: High-level JavaScript code for rendering polygons'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 清单3-1：用于渲染多边形的高级JavaScript代码
- en: What we see in Listing 3-1 are many high-level functions performing what might appear
    to be some very simple operations. A cursor is in the context, and using translate()
    and moveTo() functions, we position the drawing point. Then we use the Math.cos()
    and Math.sin() functions to calculate the start and end point angles for each
    side. Finally, we draw the lines with the lineTo() function and fill the shape
    with the requested color using the fill() function. In just 11 lines, we perform
    some fairly complex calculations to draw any polygon in any color requested.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单3-1中，我们看到许多高级函数执行看似非常简单的操作。上下文中有一个光标，使用translate()和moveTo()函数来定位绘图点。接着，我们使用Math.cos()和Math.sin()函数计算每一边的起始和结束点角度。最后，我们通过lineTo()函数绘制直线，并使用fill()函数填充所请求的颜色。在仅仅11行代码中，我们完成了一些相当复杂的计算，绘制任何所需颜色的多边形。
- en: What we *don’t* see here—what has been abstracted away from us—is all the messy
    detail of how the computer executes these functions. For example, the lineTo()
    function tells the computer to draw a line between point A and point B. But the
    computer must calculate where those points are in the canvas, where that canvas
    is in the browser window, where that browser window is on the desktop, and what
    the dimensions of the desktop are. Then it has to interface with the monitor and
    graphics card before changing the color of each pixel between them to our chosen
    color. Incredible amounts of math are going on behind the scenes of this code,
    from the monitor down to the electronic circuits, that we don’t have to think
    about. The high-level code insulates the programmer from having to worry about
    the machine the code is running on. Instead, it lets programmers focus on what
    their program is trying to accomplish; however, the computer still needs code
    to communicate with the hardware.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们*看不到*的——被我们抽象掉的——是计算机执行这些功能时的所有复杂细节。例如，lineTo() 函数告诉计算机在 A 点和 B 点之间画一条线。但计算机必须计算这些点在画布中的位置，这个画布在浏览器窗口中的位置，浏览器窗口在桌面上的位置，以及桌面的尺寸。接着，它需要与显示器和显卡交互，改变它们之间每个像素的颜色为我们选择的颜色。在这段代码的幕后，发生了大量的数学计算，从显示器到电子电路，我们无需担心。高级代码将程序员从必须考虑代码运行所用机器的负担中解脱出来。相反，它让程序员专注于程序要完成的任务；然而，计算机仍然需要代码与硬件进行通信。
- en: Low-Level Code
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 低级代码
- en: In the many layers of interfaces between the human and the computers’ circuits,
    *low-level code* is where the hardware-specific operations are defined. Low-level
    code is often machine specific and will reference particular memory addresses,
    storage peripherals, or processor functions. As a result, it can also be quite
    difficult to read and requires a deep familiarity with the hardware architecture
    your computer uses.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在人类与计算机电路之间的多个接口层中，*低级代码*是定义硬件特定操作的地方。低级代码通常是特定于机器的，并会引用特定的内存地址、存储外设或处理器功能。因此，它也可能非常难以阅读，需要对计算机使用的硬件架构有深刻的了解。
- en: Assembly Language
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 汇编语言
- en: Even low-level code offers some human readability. *Assembly language* is low-level
    code but still uses symbolic commands. It’s different in that it must operate
    very strictly within the computer architecture in which it executes. Listing 3-2
    shows a function in assembly language that will add one to the number it’s given
    and return the result.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 即便是低级代码，也提供了一定程度的人类可读性。*汇编语言*是低级代码，但仍然使用符号命令。它不同之处在于，它必须严格地在执行的计算机架构内操作。示例 3-2
    展示了一个汇编语言函数，它将给定的数字加一并返回结果。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 3-2: Assembly language code for adding one to a number'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-2：为数字加一的汇编语言代码
- en: 'The def add_one(n) line defines the name of the function that accepts the argument
    n. The pushq and movq lines set up a new stack for the function to run on specific
    registers in this hardware architecture, addresses for specific locations in the
    hardware’s memory. The addl line adds a long integer: the first argument adds
    one and the second, %edi, refers to the register holding the value of n. The movl
    line moves the new value for n from the %edi register into the register holding
    the return value, %eax. Finally, the popq and retq lines free the memory and return
    the computer to where it was in the program before the function was called.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: def add_one(n) 这一行定义了接受参数 n 的函数名称。pushq 和 movq 这一行在特定寄存器上为函数设置了一个新的栈，这些寄存器用于硬件架构中的特定位置的内存地址。addl
    这一行将一个长整数加一，第一个参数加一，第二个参数 %edi 指的是存储 n 值的寄存器。movl 这一行将 n 的新值从 %edi 寄存器移动到存储返回值的寄存器
    %eax 中。最后，popq 和 retq 这一行释放内存，并将计算机返回到函数调用之前的程序位置。
- en: 'The equivalent function in high-level programming code would look something
    like this: n = n +1; or n++;. It takes eight lines of cryptic assembly language
    code to accomplish what we can do in one line of high-level code. Similarly, the
    high-level code example in Listing 3-1 could draw any polygon in just nine lines
    of code, whereas the same task in assembly code would take many more lines than
    that.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 高级编程代码中等效的功能可能类似于这样：n = n + 1；或 n++。完成我们能在一行高级代码中做的事情，需要八行晦涩的汇编语言代码。同样，示例 3-1
    中的高级代码可以仅用九行代码绘制任意多边形，而相同的任务在汇编代码中需要更多的代码行数。
- en: It takes a lot of assembly code to tell the computer where to specifically store
    and retrieve each piece of data. Figure 3-3 is an iconic photo of Margaret Hamilton,
    director of the Software Engineering Division at the MIT Instrumentation Laboratory
    at the time, standing next to a printout of the assembly code for the Apollo Guidance
    Computer (AGC), alongside the LEGO figure honoring her.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 编写汇编代码需要大量的工作才能告诉计算机具体存储和检索每一块数据的位置。图 3-3 是玛格丽特·汉密尔顿的标志性照片，当时她是麻省理工学院仪器实验室软件工程部的主任，她站在阿波罗导航计算机（AGC）汇编代码的打印列表旁边，旁边是纪念她的LEGO人物。
- en: '![](image/CitC03_03_Margaret_Hamilton_LegoComparison.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_03_Margaret_Hamilton_LegoComparison.png)'
- en: 'Figure 3-3: Margaret Hamilton (left) during her time as lead Apollo flight
    software engineer, standing next to listings of the actual Apollo Guidance Computer
    (AGC) source code (Photo: Draper Laboratory, 1969). Reconstruction of the iconic
    photo (right) from the “Women of NASA” LEGO set.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-3：玛格丽特·汉密尔顿（左）作为阿波罗飞行软件工程师团队的负责人时的照片，站在阿波罗导航计算机（AGC）源代码的列表旁边（照片来源：德雷珀实验室，1969年）。右侧为来自“NASA女性”LEGO系列的重建图像。
- en: This stack of assembly language code is as tall as the programmer. When we write
    high-level code, it’s important to appreciate that there are extensive libraries
    of assembly code like this making each function call possible. On the human side,
    this photo of Margaret Hamilton is iconic for how it puts a relatable human face
    on something as technically complex as flying to the moon. Even in the complex
    code, programmers find ways to convey personality and levity. Listing 3-3 shows
    some sample lines of assembly code from the Apollo code repository. After each
    hash mark (#) symbol are *comments*, which are explanations of the code for human
    benefit that the computer won’t read.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这一堆汇编语言代码的高度几乎与程序员本人一样。当我们编写高级代码时，重要的是要意识到像这样的汇编代码库广泛存在，使得每个函数调用成为可能。在人类方面，这张玛格丽特·汉密尔顿的照片因其将飞往月球这一技术复杂的事物与人类的面孔结合起来而成为标志性图片。即使在复杂的代码中，程序员也能找到表达个性和幽默的方式。列表
    3-3 显示了来自阿波罗代码库的一些汇编代码示例。每个井号（#）符号后面是*注释*，这些注释是为人类提供的代码解释，计算机不会读取。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 3-3: Sample code from the Apollo computer'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 3-3：阿波罗计算机的示例代码
- en: There’s a lot of humor to be found among the cryptic commands in Listing 3-3\.
    The GOTOP00H command is a reference to Winnie the Pooh, which was the name of
    the root program. The FLAGORGY command, probably an alert for erratic behavior,
    has a comment referencing Dionysus, the god of wine and fertility, who is also
    the antonym of Apollonian. The comment PLEASE CRANK THE SILLY THING AROUND describes
    the intent of the CODE500 message if the antenna isn’t in its proper position
    , and the SEE IF HE'S LYING verifies the position again. Just before ignition,
    we see OFF TO SEE THE WIZARD ...,  followed by the command BURNBABY and V06N43*
    references when the lunar lander should be on the moon, with the comment NOW LOOK
    WHERE TO ENDED UP. You can share this code with your students to highlight the
    human side of coding. Even when the code can be a matter of life and death in
    a mission to get astronauts safely to the moon, there is room for levity and personal
    expression.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表 3-3 中，隐藏着大量幽默。在其中的 GOTOP00H 命令是对“维尼熊”的引用，它是根程序的名称。FLAGORGY 命令，可能是一个关于不正常行为的警告，注释中提到了酒神狄俄尼索斯，他也是阿波罗式的反义词。注释“PLEASE
    CRANK THE SILLY THING AROUND”描述了当天线不在正确位置时，CODE500 信息的意图，而“SEE IF HE'S LYING”则再次验证了位置。在点火之前，我们看到了“OFF
    TO SEE THE WIZARD ...”，接着是命令 BURNBABY 和 V06N43*，这些命令指示月球着陆器何时应到达月球，注释“NOW LOOK
    WHERE TO ENDED UP”则说明了最终位置。你可以将这些代码分享给学生，以突出编码中的人性化一面。即便在任务中，代码可能关系到宇航员安全登月的生死存亡，但依然有空间表达幽默和个性。
- en: As cryptic as the assembly language code is, even it abstracts away complexity.
    The memory registers that the code references in the computer are labels, and
    the commands it executes are named for human understanding. Even these instructions
    must be further translated into information the computer can decipher.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管汇编语言代码如此晦涩，它依然能抽象出复杂性。代码中引用的内存寄存器在计算机中只是标签，而它执行的命令则是为了便于人类理解而命名的。即便这些指令也必须进一步翻译成计算机能解读的信息。
- en: Machine Code
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器码
- en: Although assembly code is hardware-specific and written to work with certain
    memory addresses in the computer architecture in which it runs, it’s still working
    with human-friendly abstractions and manipulating blocks of data. At the lowest
    level, programming code manipulates the most discrete units of information in
    the computer, the *bits*, which are either one or zero. *Machine code*, a strictly
    numerical programming language, is used at this level to work with these bits.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然汇编代码是硬件特定的，且写作时需与计算机架构中某些内存地址配合工作，但它仍然在处理人类友好的抽象，并操作数据块。在最低级别，编程代码操作计算机中最基本的信息单位——*位*，它们的值只能是1或0。*机器代码*，一种严格的数字编程语言，正是在这个层级用于与这些位进行操作。
- en: Reading machine language code is like reading the atoms in a DNA molecule. Listing 3-4
    shows an example of binary machine code used to store a text string. You can imagine
    the challenges of working in such an opaque syntax.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读机器语言代码就像阅读DNA分子中的原子。列表3-4展示了用于存储文本字符串的二进制机器代码示例。你可以想象，在如此不透明的语法下工作有多么具有挑战性。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 3-4: "Hello World" in ASCII binary code'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表3-4：用ASCII二进制代码表示的“Hello World”
- en: Bill Gates and Paul Allen wrote a version of the BASIC programming language
    for the 1975 MITS Altair 8800, an early microcomputer that was widely popular
    despite being meant only for hobbyists. Gates and Allen had to load their BASIC
    interpreter into the machine using a set of binary commands. In Figure 3-4, you
    can see that, instead of a monitor, the computer had only lights and switches
    for binary inputs and outputs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 比尔·盖茨和保罗·艾伦为1975年MITS Altair 8800编写了BASIC编程语言的一个版本，这是一款早期的微型计算机，尽管仅面向业余爱好者，但在当时非常流行。盖茨和艾伦必须通过一组二进制命令将他们的BASIC解释器加载到机器中。在图3-4中，你可以看到，计算机没有显示器，而只有用于二进制输入和输出的灯光和开关。
- en: '![](image/CitC03_04_Altair8800.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_04_Altair8800.png)'
- en: 'Figure 3-4: Altair 8800 computer (Photo: National Museum of American History)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-4：Altair 8800计算机（照片：美国历史国家博物馆）
- en: When describing the CPU as speaking in ones and zeros, yet another layer of
    complexity is abstracted away. Even the ones and zeros are abstractions representing
    the amount of electricity in a circuit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当描述CPU以一和零的形式工作时，又有一层复杂性被抽象化了。即使是一和零也只是表示电路中电量多少的抽象。
- en: Circuits
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电路
- en: Ones and zeros, the bits of data that make up the strings of machine code, represent
    “on” and “off” settings inside the computer. The computer’s CPU, which performs
    all calculations, is a microchip with one to many *integrated circuits (IC)*,
    which are microchips that contain sets of electronic circuits. Each IC is filled
    with billions of *transistors*. The electrical state of each transistor determines
    whether a bit is on or off—one or zero. If you look carefully, you’ll likely find
    a symbol on your computer that combines both values for a bit on one of its buttons,
    as in Figure 3-5.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一和零，构成机器代码字符串的数据位，代表计算机内部的“开”和“关”设置。计算机的中央处理器（CPU）执行所有计算，它是一个微芯片，包含一个或多个*集成电路（IC）*，即包含一组电子电路的微芯片。每个IC内充满了数十亿个*晶体管*。每个晶体管的电状态决定了一个位是开还是关——即一或零。如果你仔细观察，你可能会在计算机的某个按钮上看到一个符号，结合了这两个值，表示一个位，如图3-5所示。
- en: '![](image/CitC03_05_powerbuttonicon.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_05_powerbuttonicon.png)'
- en: 'Figure 3-5: Computer power button icon'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-5：计算机电源按钮图标
- en: Before the Nobel Prize–winning invention of the transistor, computers used *vacuum
    tubes*, which were circuits that resembled lightbulbs about the size of your thumb.
    They were large and energy-hungry produced a lot of heat, and burned out often.
    The first electronic general-purpose computer, the ENIAC, was made in 1946\. It
    used 20,000 vacuum tubes, occupied 1,800 square feet, and weighed 30 tons. In
    comparison, today’s cell phones, which use ICs, have thousands of times more processing
    power than the ENIAC.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在获得诺贝尔奖的晶体管发明之前，计算机使用的是*真空管*，这是一种类似于灯泡、大小约为你的拇指的电路。它们既大又耗电，产生大量热量，而且经常烧坏。第一台电子通用计算机ENIAC于1946年诞生。它使用了2万个真空管，占地1800平方英尺，重达30吨。相比之下，今天使用IC的手机，处理能力比ENIAC强大数千倍。
- en: 'The first computer program was written for ENIAC by six women mathematicians:
    Kathleen McNulty, Frances Bilas, Betty Jean Jennings, Elizabeth Snyder, Ruth Lichterman,
    and Marlyn Wescoff Meltzer. It involved setting switches and plugs for various
    binary commands and values. At the time, the word *computer* referred to the job
    title of someone who crunched numbers. Only later did it become the name of the
    tool that would replace this occupation.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一款计算机程序是由六位女性数学家为ENIAC编写的：Kathleen McNulty、Frances Bilas、Betty Jean Jennings、Elizabeth
    Snyder、Ruth Lichterman和Marlyn Wescoff Meltzer。它涉及为各种二进制命令和数值设置开关和插头。在当时，*计算机*一词指的是负责计算数字的职业头衔。直到后来，这个词才成为替代这一职业的工具名称。
- en: In Figure 3-6, you can get an idea of the size and complexity of the ENIAC’s
    interface with its many lights and switchboards representing the binary inputs
    and outputs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在图3-6中，你可以大致了解ENIAC接口的大小和复杂性，界面上有许多灯光和控制面板，代表着二进制的输入和输出。
- en: '![](image/CitC03_06_ENIAC.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_06_ENIAC.png)'
- en: 'Figure 3-6: Betty Jennings (left) and Frances Bilas (right) operating the ENIAC’s
    main control panel (Photo: ARL Technical Library, U. S. Army Photo)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-6：Betty Jennings（左）和Frances Bilas（右）正在操作ENIAC的主控制面板（照片：ARL技术图书馆，美国陆军照片）
- en: Even transistors are abstractions. They represent logical operations. The first
    digital computer wouldn’t have been possible without the 1936 paper “A Symbolic
    Analysis of Relay and Switching Circuits,” the master’s thesis of an MIT student
    named Claude Elwood Shannon. In this milestone document, Shannon demonstrates
    that electric switches could be used to perform *Boolean algebra*, a branch of
    algebra in which operations manipulate true and false values. Boolean algebra
    was introduced by George Boole in his 1847 book, *The Mathematical Analysis of
    Logic*, and discussed in his 1854 book, *An Investigation of the Laws of Thought
    on Which Are Founded the Mathematical Theories of Logic and Probabilities*. Figure
    3-7 shows some examples of *logic gates*, which model Boolean logic in a way that
    can be translated into circuitry.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至晶体管也是抽象的。它们代表逻辑运算。没有1936年由MIT学生Claude Elwood Shannon撰写的论文《继电器和开关电路的符号分析》，第一台数字计算机是不可能实现的。在这篇具有里程碑意义的文件中，Shannon证明了电开关可以用来执行*布尔代数*，这是一个在其中操作处理真假值的代数分支。布尔代数由George
    Boole在他的1847年著作《逻辑的数学分析》中引入，并在1854年出版的《思维法则的研究：其基础是逻辑和概率的数学理论》一书中讨论。图3-7展示了*逻辑门*的一些例子，它们以一种可以转化为电路的方式来模拟布尔逻辑。
- en: '![](image/CitC03_07_LogicGates.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_07_LogicGates.png)'
- en: 'Figure 3-7: Logic gates'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-7：逻辑门
- en: The lines on the left of the symbols represent binary inputs and those on the
    right binary outputs. For example, the AND gate accepts two inputs and both must
    be 1 for the output to be 1\. So 0 and 0, 1 and 0, and 0 and 1 will all output
    0, whereas 1 and 1 outputs 1\. The OR gate returns 1 if either input is 1\. So
    1 or 0, 0 or 1, and 1 or 1 will output 1, while 0 or 0 outputs 0\. The NOT gate
    inverts any input, so an input of not 1 outputs 0 and not 0 outputs 1\. Logic
    gates can be combined into complex configurations to model logical processes,
    which can then be constructed on a circuit board with the appropriate components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 符号左侧的线代表二进制输入，右侧的线代表二进制输出。例如，AND门接受两个输入，只有当两个输入都是1时，输出才为1。因此，0和0、1和0、0和1的输出都是0，而1和1的输出为1。OR门只要其中一个输入为1，输出就为1。因此，1或0、0或1、1或1的输出为1，而0或0的输出为0。NOT门会反转任何输入，所以下输入1时输出0，输入0时输出1。逻辑门可以组合成复杂的配置来模拟逻辑过程，进而在电路板上用适当的组件构建出来。
- en: This information explained the hardware piece of the computer puzzle. But before
    computer scientists could engineer machines that could automate logic, there were
    others who first imagined that such a thing was even possible.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息解释了计算机谜题的硬件部分。但在计算机科学家能够设计出能够自动化逻辑的机器之前，还有其他人首先设想了这样的事情是可能的。
- en: Envisioning Thought Machines
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构想思想机器
- en: Around the same time Claude Shannon was figuring out how to perform logical
    operations using electric circuits, Alan Turing, a polymath whose codebreaking
    skills saved millions of lives in World War II, was deciphering how discrete logical
    operations could combine into a computing system. In his paper “On Computable
    Numbers, with an Application to the Entscheidungsproblem,” Turing describes a
    hypothetical *Turing machine*. This machine could be a person or machine that
    reads symbols from a potentially infinite strip of tape; stores the *state* of
    the machine in a *register*, a reference to the human computer’s state of mind;
    looks up those symbols in an instruction table; prints an output; and moves to
    a new position along the tape according to the instructions. In other words, he
    described a very primitive CPU capable of processing a computer program. For this
    and other achievements, he is often regarded as the father of modern computer
    science.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，克劳德·香农正在研究如何利用电路执行逻辑运算，而阿兰·图灵，这位在第二次世界大战中凭借破译密码拯救了无数生命的博学家，则在研究如何将离散的逻辑操作结合成一个计算系统。在他的论文《可计算数及其在决策问题中的应用》中，图灵描述了一种假设的*图灵机*。这种机器可以是人类或机器，从一条潜在无限长的磁带上读取符号；将机器的*状态*存储在*寄存器*中，寄存器是对人类计算机思维状态的参考；根据指令表查找这些符号；打印输出；并根据指令沿着磁带移动到新的位置。换句话说，他描述了一种非常原始的CPU，能够处理计算机程序。凭借这一成就以及其他贡献，他常被视为现代计算机科学的奠基人。
- en: Inventors dreamed of having machines perform cognitively taxing tasks long before Turing.
    Over the course of several decades in the 1800s, English polymath Charles Babbage
    proposed and attempted the construction of a mechanical calculator, which he called
    the Difference Engine. Later he constructed a general-purpose mechanical computer,
    which he called the Analytical Engine. Neither invention was successfully constructed
    in his lifetime. But the Analytical Engine had a memory store, the equivalent
    of a CPU, and was programmable with punch cards.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 发明家们早在图灵之前就梦想着让机器完成认知负担重的任务。在19世纪的几十年间，英国博学家查尔斯·巴贝奇提出并尝试建造一台机械计算器，他称之为差分机。后来，他建造了一台通用的机械计算机，称之为分析机。尽管这两项发明在他有生之年都未能成功完成，但分析机具有内存存储、相当于现代CPU的功能，并且可以通过打孔卡片进行编程。
- en: Ada Lovelace, the daughter of the poet Lord Byron, was a mathematician and writer
    who described her approach as “poetical science.” She was also a longtime friend
    of Babbage’s, who called her “the Enchantress of Numbers.” Ada was fascinated
    by the Difference Engine. When translating a foreign paper on Babbage’s proposed
    Analytical Engine to English, she supplemented the paper with extensive notes,
    even including a detailed algorithm to calculate the Bernoulli number sequence
    in the engine. Because of this algorithm, Lovelace is widely considered the world’s
    first computer programmer. Figure 3-8 shows a watercolor portrait of her that
    was adopted by the Ada Initiative, an organization focused on increasing the participation
    of women in open source technology and culture.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 阿达·洛夫莱斯（Ada Lovelace），诗人拜伦勋爵的女儿，是一位数学家和作家，她将自己的方法称为“诗意科学”。她还是巴贝奇的长期朋友，巴贝奇称她为“数字女巫”。阿达对差分机（Difference
    Engine）非常着迷。在将一篇关于巴贝奇提出的分析机（Analytical Engine）的外文论文翻译成英文时，她在文中加入了大量注释，甚至包括了一个详细的算法，用以在该机器中计算伯努利数列。正因如此，洛夫莱斯被广泛认为是世界上第一位计算机程序员。图3-8展示了她的水彩肖像，这幅肖像被“阿达倡议”（Ada
    Initiative）采用，该组织致力于提高女性在开源技术和文化中的参与度。
- en: '![](image/CitC03_08_Ada_Lovelace_portrait.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_08_Ada_Lovelace_portrait.png)'
- en: 'Figure 3-8: Circa-1840 portrait of Ada Lovelace by Alfred Edward Chalon'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-8：阿尔弗雷德·爱德华·查隆（Alfred Edward Chalon）所作约1840年阿达·洛夫莱斯肖像
- en: In her writings, Lovelace is clearly enchanted with the Analytical Engine. She
    marvels at how it manifests abstract mental processes in machine operations. She
    envisions a powerful language in machine code that will produce faster, more accurate
    analysis for the human race. She also references the engine’s predecessor, the
    *Jacquard loom*, which used punch cards to program fabric designs, saying the
    Analytical Engine weaved algebraic expressions the way the loom weaved flowers
    and leaves. In fact, when we look further back in time, we find that the weaving
    of logical expressions shares some of the same challenges and frustrations as
    weaving fabrics.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在她的著作中，洛夫莱斯显然对分析引擎充满了热情。她惊叹于它如何将抽象的思维过程转化为机器操作。她设想了一种强大的机器语言代码，将为人类提供更快、更准确的分析。她还提到了该引擎的前身——*雅卡尔织布机*，它使用打孔卡片来编程织物设计，她表示分析引擎就像织布机织造花朵和叶子一样编织代数表达式。事实上，当我们回顾更远的历史时，会发现逻辑表达式的编织与织物的编织面临着一些相同的挑战和挫折。
- en: Ancient History
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 古代历史
- en: On a trip to Peru, I had the good fortune of visiting a mountain village where
    I learned of the importance of weaving in their culture. Without a written language,
    for thousands of years the people relied on *ideograms*, images used to communicate
    identifications of food, resources, warnings, or people. The local women wove
    the ideograms on tapestries, which we can think of as abstractions of the real-life
    things they represent, just like the icons in a computer’s UI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在一次前往秘鲁的旅行中，我有幸访问了一个山村，在那里我了解到织布在他们文化中的重要性。在没有书面语言的情况下，几千年来，这些人依赖于*象形文字*，这些图像用于传达食物、资源、警告或人物的标识。当地的妇女们在挂毯上编织这些象形文字，我们可以把它们看作是现实生活中事物的抽象，就像计算机UI中的图标一样。
- en: In the village, they had recently purchased two simple looms, which required
    programming by hand. Figure 3-9 shows the programming code for the loom in the
    string arrangements with inputs of string that will later become design outputs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在村庄里，他们最近购买了两台简单的织布机，需要手工编程。图3-9显示了织布机的编程代码，代码中的字符串排列将作为输入，最终成为设计输出。
- en: '![](image/CitC03_09_PeruLoom.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC03_09_PeruLoom.png)'
- en: 'Figure 3-9: A loom in Peru'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-9：秘鲁的织布机
- en: This loom image shows a lot of complexity, and we can imagine how daunting a
    challenge programming it would be. Watching the women weave by hand was like watching
    a computer lay down pixels line by line and bit by bit. One woman explained that
    the new looms were faster, but it was frustrating when they set them up incorrectly
    and the patterns came out wrong. This is similar to the frustrations of programming
    when the software executes quickly, but getting the programming logic correct
    can be a challenge. In this village without electricity or running water, people
    were successfully taking on complex challenges that involved computational thinking
    and abstraction without a computer anywhere in sight.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这幅织布机的图像展示了许多复杂性，我们可以想象编程它会是多么令人生畏的挑战。看着妇女们手工编织，就像看着一台计算机逐行逐位地排列像素。一位妇女解释说，新的织布机速度更快，但当它们设置不正确，图案出来错误时，非常令人沮丧。这就像编程中的挫折，软件执行速度很快，但正确编写程序逻辑却是一个挑战。在这个没有电力和自来水的村庄里，人们成功地应对着需要计算思维和抽象的复杂挑战，而周围并没有任何计算机的身影。
- en: Summary
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored the many layers and innovations that make modern
    computing systems possible. With the UI as the starting point, we traversed down
    through the layers that included high-level programming code, low-level assembly
    language code, machine code, circuits, conceptual innovations like Boolean logic,
    and precursors to the computer, like programmable looms. Concurrently, we traveled
    back through time and met a few of the many innovators in computer science, such
    as Margaret Hamilton and her team at NASA; the ENIAC programmers; Claude Shannon;
    Alan Turing; Charles Babbage; Ada Lovelace; and the weavers from indigenous villages.
    All of these individuals are human beings with whom your students can identify,
    providing models from which students can see themselves working in computer science.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探索了使现代计算系统成为可能的多层次和创新。从用户界面（UI）开始，我们逐层向下，涉及了高级编程代码、低级汇编语言代码、机器代码、电路、布尔逻辑等概念创新，以及计算机的前身——可编程织布机。同时，我们回顾了历史，遇到了一些计算机科学的创新者，如玛格丽特·汉密尔顿和她在NASA的团队；ENIAC程序员；克劳德·香农；艾伦·图灵；查尔斯·巴贝奇；阿达·洛夫莱斯；以及来自土著村庄的织布工。所有这些人都是与你的学生能产生共鸣的普通人，提供了学生可以从中看到自己从事计算机科学工作的榜样。
- en: Additionally, by making students aware of the vast number of experts and innovations
    it took to make modern computers possible, you’ll teach them to respect the subject
    matter and understand that no one person can hope to know it all. Students should
    realize that it’s best to engage the subject with a personal humility and sensitivity
    to others, recognizing that everyone has blind spots when it comes to computer
    technologies and innovations. When students understand that computer science is
    complex for everyone and that the history of the field is the story of making
    computers more accessible to others over time through abstraction, they’ll hopefully
    find the subject more approachable.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过让学生意识到为了使现代计算机成为可能，众多专家和创新付出了巨大的努力，你将教会他们尊重这一学科，并理解没有人能够掌握所有的知识。学生应该意识到，以个人谦逊和对他人的敏感态度去接触这一学科是最好的，认识到每个人在计算机技术和创新方面都有盲点。当学生理解计算机科学对每个人来说都是复杂的，而且这一领域的历史是通过抽象化使计算机逐步变得更容易接触的故事时，他们就会希望能更加亲近这一学科。
- en: In this history we saw how early computer science, which was built on circuit
    boards and abstract research papers, barely resembles the programming environments
    we work in today. Yet, as we will learn, the foundational elements of programming
    have remained the same over the intervening decades, and we don’t need modern
    computers to learn computer science.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一历史中，我们看到了早期的计算机科学，尽管它建立在电路板和抽象的研究论文上，但与我们今天使用的编程环境几乎没有相似之处。然而，正如我们将要学习的那样，编程的基础元素在这几十年间保持不变，我们并不需要现代计算机来学习计算机科学。
- en: In the next chapter, we will discover the many ways you can explore the basic
    building blocks of computer programming in the classroom without involving computers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将探索你可以在课堂上如何以不涉及计算机的方式探索计算机编程的基本构建块。
