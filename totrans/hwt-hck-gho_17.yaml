- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Final Cut
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Recapping our achievements so far, we have managed to retrieve political ads
    running on MXR Ads servers, complete with budget data, creatives, and the real
    organizations behind them. Also, we downloaded profiling data of hundreds of millions
    of individuals harvested by GP, with each profile reading like a personal diary
    that could be used to incriminate, blackmail, or subdue even the most powerful
    people. What more could we want?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, there is one thing missing from this list of awards: company emails.
    Hacking emails is just such a classic that I could not close this book without
    talking about it.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: When we acquire domain admin credentials in a Windows Active Directory, unlimited
    access to emails naturally follows. The infrastructure and the corporate directory
    are bound together in the Windows environment.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Things are different with AWS. It never intended to conquer the corporate IT
    market. That venue is already crowded with the likes of Active Directory and Google
    Workspace (formerly G Suite).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Most tech companies that exclusively rely on AWS or Google Cloud Platform (GCP)
    to build and host their business products will turn to Google Workspace for their
    corporate directory. You can hate Google all you want, but Gmail is still the
    most comprehensive email platform. (For managing emails, that is. The blow to
    privacy may not be worth it, but that’s another debate.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Oftentimes this leads to two separate IT teams: one in charge of the infrastructure
    delivering the core technical product and another handling the corporate side
    of IT (emails, printers, workstations, help desk, and so on).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: A quick lookup of the DNS Mail Exchange (MX) records reveals that GP is indeed
    using corporate Gmail, and therefore probably other tools in Google Workspace,
    like Drive, Contacts, Hangouts, and the rest (see [Listing 13-1](#listing13-1)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 13-1: Lookup of MX records confirming that GP is indeed using Google
    Workspace'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: There is not much in the way of literature or scripts for exploiting and abusing
    Google Workspace, so let’s give it a go ourselves.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Hacking Google Workspace
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are admin of GP’s AWS account and have unlimited access to all of its production
    resources, including the servers, users, GitHub account, and so on. Two strategies
    immediately come to mind for jumping over to the Google Workspace environment:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Find a corporate intranet application and replace the home page with a fake
    Google authentication page that steals credentials before redirecting users to
    the real app.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scour the codebase for applications that might interact with the Google Workspace
    environment and steal their credentials to establish a first foothold.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first option is a guaranteed winner, provided we do a good job of mimicking
    that Google authentication page. It’s also much riskier since it involves user
    interaction. Then again, we already have what we came for, so the heavens could
    fall down for all we care. This is just a bonus.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The second option, on the other hand, is way stealthier, but it assumes that
    the IT department shares some ties with the rest of the infrastructure that we
    can leverage, like a Lambda function, an IAM role, an S3 bucket, a user—basically
    a needle in a scattered haystack . . . or is it?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Come to think of it, there is actually something that has a high probability
    of being shared between the IT department and the infrastructure team: the GitHub
    account. Surely they did not register two accounts just to please the two tech
    teams, did they?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s load the GitHub token we retrieved from Jenkins and look for references
    to Google Workspace, Gmail, Google Drive, and so on. We write a brief Python script
    to load repository names:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A clear indication of cross-pollination 1. We clone the source code of it-gsuite-apps
    and . . . what do you know?! It’s a list of applications and services used to
    automate many Google Workspace admin actions, like user provisioning, organizational
    unit (OU) assignments, terminating accounts, and so on:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These are exactly the types of actions we need to use to achieve control over
    Google Workspace! Of course, this sensitive repo is not visible to regular users,
    but I guess impersonating Jenkins has its perks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: We start dreaming about pulling the CEO’s emails and exposing this fraudulent
    business, but we quickly realize that this repo does not contain a single cleartext
    password.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: While AWS relies on access keys to authenticate users and roles, Google opted
    for the OAuth2 protocol, which requires explicit user interaction. Essentially,
    a web browser will open up, authenticate the user, and produce a validation code
    that must be pasted back into the command line to generate a temporary private
    key to call Google Workspace APIs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Machines cannot follow this authentication flow, so Google also provides service
    accounts that can authenticate using private keys. Yet, when looking at the source
    code, we do not find the slightest hint of private keys:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, we dive into the code of it-gsuite-apps to understand how the app acquires
    its Google Workspace privileges and stumble upon the lines shown in [Listing 13-2](#listing13-2).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 13-2: A code excerpt that loads a service token from AWS Secrets Manager'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it makes sense. The secret is not hardcoded in the app but retrieved dynamically
    through Secrets Manager, an AWS service for centralizing and storing secrets.
    We don’t have the secret’s name, but lucky for us, we have full admin privileges,
    so we can easily search for it:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Unfortunately, no amount of grepping reveals anything remotely related to Google
    Workspace. We manually inspect every entry just in case, but the hard reality
    quietly dawns on us: the IT department must be using another AWS account. That’s
    the only rational explanation.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: No need to panic, though. Hopping over to the IT AWS account will not require
    the same stunt we pulled when jumping from MXR Ads to GP. Those two companies
    are different (though intertwined) legal entities. They have completely separate
    AWS accounts. The IT department, however, is part of GP just as much as the regular
    tech team. It’s the same entity that pays the bills in the end.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'The most probable configuration is that GP created an AWS organization, an
    entity that can house multiple AWS accounts: an account for the tech team, another
    for the IT department, another for testing, and so on. In such a configuration,
    one of the AWS accounts is promoted to the “master” status. This special account
    can be used to attach new accounts to the organization and apply global policies
    limiting the available set of services in each account.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The master account is usually devoid of any infrastructure and should—in an
    ideal world—delegate management tasks like log aggregation, billing reports, and
    such to other accounts. We can easily confirm our hypothesis by calling the `list-accounts`
    AWS API using our all-powerful rundeck role (see [Listing 13-3](#listing13-3)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 13-3: Listing the AWS accounts'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Looking good. We can see the admin account, as expected 1.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a member account, AWS automatically provisions a default role
    called *OrganizationAccountAccessRole*. This role’s default trust policy allows
    impersonation from any user of the management account capable of issuing the Security
    Token Service (STS) `assume-role` API call. Let’s see if we can get its credentials:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Darn it, we were so close! If even Rundeck is not authorized to impersonate
    the OrganizationAccountAccessRole, it means that either the role was deleted or
    its trust policy has been restricted to a select few. If only there were a central
    system that logged every API request on AWS so we could look up these privileged
    users . . . hello, CloudTrail!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Abusing CloudTrail
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every time a user or role assumes a role, that query is logged on CloudTrail
    and, in the case of GP, pushed to CloudWatch and S3\. We can leverage this ever-watchful
    system to single out those users and roles allowed to hop over to the IT account.
    CloudTrail’s API does not provide many filtering capabilities, so we will instead
    use CloudWatch’s powerful `filter-log-events` command.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we get the name of the log group that aggregates CloudTrail logs:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, as shown in [Listing 13-4](#listing13-4), it’s simply a matter of searching
    for occurrences of the IT account identifier 345673068670, which we got from [Listing
    13-3](#listing13-3).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 13-4: CloudTrail event showing *elis.skyler* impersonating a role inside
    the IT account'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Looks like *elis.skyler* 1 impersonated the OrganizationAccountAccessRole a
    few hours ago. Time to grace this account with an additional access key that we
    can use to assume the foreign role ourselves. Of course, we are going to temporarily
    blind CloudTrail for this maneuver, but I will omit the code since you are familiar
    with that technique already from Chapter 11:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Using these new credentials, we request temporary AWS keys belonging to the
    OrganizationAccountAccessRole:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'That was not so hard after all. Okay, let’s use these access credentials to
    look up the AWS Secrets Manager in this new account:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Brilliant. We fetch the secret’s content and decode it to retrieve the JSON
    file used to authenticate Google service accounts (see [Listing 13-5](#listing13-5)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 13-5: Retrieving the GCP service account key'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The service account is named *userprovisionning@gp-gsuite-262115.iam.gserviceaccount.com*
    and is attached to the Google Cloud project gp-gsuite-262115\. Not Google Workspace,
    mind you. Google Cloud. Since Google Workspace does not handle service tokens,
    anyone wanting to automate their Google Workspace administration must create a
    service token on Google Cloud and then assign scopes and permissions to that account
    on Google Workspace. It can’t get any messier than that!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: We already know that this service token has the necessary permissions to create
    a user, so let’s help ourselves to a super admin account on Google Workspace.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Google Workspace Super Admin Account
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find the full Python code in the book’s GitHub repository as *create_user.py*,
    so I’ll just highlight the key points.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to declare the scope of the actions our account will perform
    on Google Workspace. Since we will create a new account, we need the scope *admin.directory.user*.
    We follow this bit with the location of the service token file and the email we
    will impersonate to carry out our actions:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In Google’s security model, a service account cannot directly act on user accounts;
    it needs first to impersonate a real user using *domain-wide delegation* privileges,
    configured on the service account’s properties. Actions are then carried over
    with the privileges of the impersonated user, so we’d better find a super admin
    to impersonate.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'No problem. We try putting in the email of the owner of the AWS GP IT account
    we found in [Listing 13-3](#listing13-3) when enumerating existing AWS accounts:
    *admin-it@gretschpolitico.com*.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes boilerplate Python code to build the Google Workspace client and
    impersonate the IT admin:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We build a dictionary with our desired user attributes (name, password, and
    so on), then execute the query:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The final step is to make our user super admin over the entire organization:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we just run the file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: No errors. Did it really work? We open our browser and head to the Google Workspace
    Admin console, [https://admin.google.com/](https://admin.google.com/), as shown
    in [Figure 13-1](#figure13-1).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![f13001](image_fi/501263c13/f13001.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-1: Access to our newly created Google Workspace account'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'It bloody did! We have just achieved admin access to GP’s corporate directory.
    Nothing is beyond reach now: Gmails, Google Drive, you name it.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Sneaking a Peek
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To keep a low profile, we will avoid using the export features and data migration
    utilities of Google Workspace. Google automatically alerts other admins when anyone
    triggers these tasks. We will exclusively interact with Google Workspace the way
    we have so far: through API calls. We just need to upgrade the scope of the user-provisioning
    service account we grabbed from Secrets Manager to include Gmail and Google Drive
    access.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Google Workspace Admin console, we navigate to the **Security**▶**Advanced
    Settings**▶**Manage API Access** panel and enter the following two scopes in the
    **One or More API Scores** field, shown in [Figure 13-2](#figure13-2):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '**https://www.googleapis.com/auth/drive**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**https://www.googleapis.com/auth/gmail.readonly**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Client Name** field, we write the service account’s name, **userprovisionning@gp-gsuite-262115.iam.gserviceaccount.com**,
    which gets converted to a unique ID.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![f13002](image_fi/501263c13/f13002.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13-2: Google Workspace admin panel to update API scopes'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Contrary to the usual intuitive panels that Google is famous for, this admin
    panel is particularly dreadful. You cannot just append scopes, because they will
    overwrite old ones. You need to enter all the scopes assigned to a service account
    (old and new ones).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a new *gmail.py* Python script with the same boilerplate code previously
    used to create a user, except for a few alterations:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We update the scope to include Gmail 1 and then call the `users().messages()`
    API 2 to retrieve the CEO’s emails, whose name we gleefully take from LinkedIn.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Then it’s just a matter of looping through the messages, extracting the subject,
    sender, receiver, and email body. Check out the full code at [https://github.com/HackLikeAPornstar/GreschPolitico](https://github.com/HackLikeAPornstar/GreschPolitico).
    We run the full Python script and rifle through the emails at our leisure:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Gretsch Politico in all its glory, ladies and gentlemen! Time to dig out the
    dirt.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Closing Thoughts
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wow, we made it to the end. That was an intense journey filled with many esoteric
    technologies and new paradigms. The generalization of cloud computing may be one
    of the most disrupting events of the last decade. And while many tech companies
    and startups are already fully embracing the cloud, I feel that the security community
    is still lagging behind.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Every post I read about lateral movement, C2 communication, and so forth exclusively
    covers Active Directory—as if it’s the only possible configuration and as if the
    most valuable data is necessarily stored on a Windows share or SQL server. That
    certainly is not true for banks and airlines (mainframes, anyone?). In fact, as
    we saw just in this scenario, more and more tech companies are moving away from
    Windows environments.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我阅读的每一篇关于横向渗透、C2通信等的文章，几乎都只涉及Active Directory——仿佛这是唯一可能的配置，仿佛最有价值的数据一定存储在Windows共享或SQL服务器上。这显然对于银行和航空公司（谁需要主机系统？）并不成立。事实上，正如我们在这个场景中看到的，越来越多的科技公司正在远离Windows环境。
- en: Maybe it’s a bias introduced by consulting companies only working with old firms
    that are still neck-deep in Active Directory. Maybe it’s the number of Windows
    CVEs (Common Vulnerabilities and Exposures) that flood the market. Probably a
    little bit of both.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这是由只与老旧企业合作的咨询公司所引入的偏见，这些企业依然深陷于Active Directory。也许是市场上Windows CVE（常见漏洞和暴露）数量的影响。可能是两者的结合。
- en: 'In any case, I hope that the numerous examples in this book helped drive at
    least one message home: security is about thoroughly understanding a piece of
    technology, asking questions, and deconstructing the whole thing until it makes
    sense. The deeper you dig, the easier it is to toy with it afterward.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，我希望本书中的众多示例至少传递了一个信息：安全是关于彻底理解一项技术，提出问题，并将其解构，直到它变得有意义。你挖得越深，之后玩弄它就越容易。
- en: We wrote significant custom code to sneak past detection services or to simply
    circumvent tedious network restrictions. Download the codebase, play with it,
    try it out on a free tier AWS account, and extend it to new horizons. That’s the
    only proven road to success.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了大量定制代码，以绕过检测服务或简单地规避繁琐的网络限制。下载代码库，玩一玩，试试它在免费的AWS账户上，扩展到新的领域。这是通向成功的唯一可靠道路。
- en: Happy hacking!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你黑客愉快！
- en: Resources
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: Matthew Toussain’s interesting article about Google Workspace (formerly G Suite)
    hacking at [https://www.blackhillsinfosec.com/](https://www.blackhillsinfosec.com/).
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matthew Toussain关于Google Workspace（前身为G Suite）黑客攻击的有趣文章：[https://www.blackhillsinfosec.com/](https://www.blackhillsinfosec.com/)。
- en: 'Google’s guide to using OAuth2 to access its APIs: [http://bit.ly/2RAzYEx](http://bit.ly/2RAzYEx).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google使用OAuth2访问其API的指南：[http://bit.ly/2RAzYEx](http://bit.ly/2RAzYEx)。
- en: 'The Google Workspace User Accounts guide: [https://developers.google.com/admin-sdk/directory/v1/guides/manage-users/](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users/).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Workspace用户账户指南：[https://developers.google.com/admin-sdk/directory/v1/guides/manage-users/](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users/)。
- en: 'Instructions for performing Google Workspace domain-wide delegation: [https://developers.google.com/admin-sdk/directory/v1/guides/delegation/](https://developers.google.com/admin-sdk/directory/v1/guides/delegation/).'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行Google Workspace域级委托的说明：[https://developers.google.com/admin-sdk/directory/v1/guides/delegation/](https://developers.google.com/admin-sdk/directory/v1/guides/delegation/)。
- en: 'More on Google service accounts: [https://cloud.google.com/compute/docs/access/service-accounts/](https://cloud.google.com/compute/docs/access/service-accounts/).'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于Google服务账户的信息：[https://cloud.google.com/compute/docs/access/service-accounts/](https://cloud.google.com/compute/docs/access/service-accounts/)。
- en: 'More on AWS organizations and delegated admin members: [https://amzn.to/3766cAL](https://amzn.to/3766cAL).'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于AWS组织和委托管理员成员的信息：[https://amzn.to/3766cAL](https://amzn.to/3766cAL)。
