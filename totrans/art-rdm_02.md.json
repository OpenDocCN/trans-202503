["```\nalIce openeD thE Door anD foUNd ThaT iT LEd inTo a SmaLl passage\naabaa aaaaab aab baaa aab aabba baab ab bba aaba a baaba\n```", "```\nThree may keep a secret, if two of them are dead.\n```", "```\n> python3 steg_simple.py encode 2 message.txt alice.txt output.txt\n```", "```\nGET SCHOOLROOM VERY THERE ONE COME THAT SAYING LIKE THE\nSHE HAPPENED THAT WAS THE NECK WORDS THE LITTLE ALICE\nTOFFEE HOT NOW THOUGHT DOOR OFF INTO ASHAMED GREAT\nMOMENT TEARS LARGE DEEP AND THE HEARD AND\n```", "```\nGET SCHOOLROOM VERY THERE ONE COME THAT SAYING LIKE THE SHE HAPPENED\nTHAT WAS THE NECK WORDS THE LITTLE ALICE TOFFEE HOT NOW THOUGHT DOOR\nOFF INTO ASHAMED GREAT MOMENT TEARS LARGE DEEP AND THE HEARD AND\n```", "```\nTHREE MAY KEEP A SECRET IF TWO OF THEM ARE DEAD\n```", "```\nSITTING NOTHING THERE ITSELF LATE SEEMED STRAIGHT VERY LOOK TRIED\nMAKE DROP MANAGED HERSELF AFTER WHICH NEAR MILES SORT LATITUDE ROOF\nLITTLE FLOWERS THROUGH THROUGH HALF ANOTHER WITH WISE THEM USUALLY\nCHERRYTART PINEAPPLE SAID LIKE CHEATED FOND\n```", "```\n> python3 steg_simple.py decode 2 output.txt tmp.txt\n```", "```\nTHREEMAYKEEPASECRETIFTWOOFTHEMAREDEAD\n```", "```\ndef ProcessText(s):\n    s = s.upper().split()\n    text = []\n    for t in s:\n        z = \"\"\n        for c in t:\n            if (c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"):\n                z += c\n        text.append(z)\n    return text\n```", "```\noffset = int(sys.argv[2])\nif (sys.argv[1] == \"encode\"):\n    sfile = sys.argv[3]\n    pfile = sys.argv[4]\n    dfile = sys.argv[5]\n    Encode(offset, sfile, pfile, dfile)\nelif (sys.argv[1] == \"decode\"):\n    dfile = sys.argv[3]\n    sfile = sys.argv[4]\n    Decode(offset, dfile, sfile)\nelse:\n    print(\"Unknown option\")\n```", "```\ndef Encode(offset, sfile, pfile, dfile):\n ➊ msg = ProcessText(open(sfile).read())\n    pool= ProcessText(open(pfile).read())\n    enc = []\n    idx = 0\n ➋ for word in msg:\n        for c in word:\n            done = False\n            while (not done) and (idx < len(pool)):\n                if (len(pool[idx]) <= offset):\n                    pass\n                elif (pool[idx][offset] != c):\n                    pass\n                else:\n                    enc.append(pool[idx])\n                    done = True\n                idx += 1\n ➌ with open(dfile, \"w\") as f:\n        f.write(\" \".join(enc)+\"\\n\")\n```", "```\ndef Decode(offset, dfile, sfile):\n    enc = ProcessText(open(dfile).read())\n    plain = \"\"\n    for w in enc:\n        plain += w[offset]\n    with open(sfile, \"w\") as f:\n        f.write(plain+\"\\n\")\n```", "```\n> python3 steg_text.py message.txt alice.txt output.txt\nYour secret key is 499377\n```", "```\nIT WHAT THERE THE HEAR SEEMED NATURAL VERY SKURRIED HE ALICE UP\nDEAR THIS DIFFERENT VOICE CROCODILE WATERS IT THEIR BEFORE THAT\nRAILWAY WOODEN SOON HALF SITS CATCHING THE TREMBLING TAIL YOUARE\nWENT HUNDRED THE ANIMALS BIRDS\n```", "```\n1132131311412343131323422324231413243\nTHREEMAYKEEPASECRETIFTWOOFTHEMAREDEAD\n```", "```\n> python3 steg_text.py 499377 output.txt tmp.txt\n> cat tmp.txt\nTHREEMAYKEEPASECRETIFTWOOFTHEMAREDEAD\n```", "```\ndef Encode(mfile, pfile, ofile):\n    msg = ProcessText(open(mfile).read())\n    pool= ProcessText(open(pfile).read())\n  ➊ key = RE(mode='int', low=10000, high=1000000).random()\n    rng = RE(mode='int', low=1, high=5, seed=key)\n    enc = []\n    idx = 0\n    for word in msg:\n        for c in word:\n         ➋ offset = rng.random()\n            done = False\n            while (not done) and (idx < len(pool)):\n                if (len(pool[idx]) <= offset):\n                    pass\n                elif (pool[idx][offset] != c):\n                    pass\n                else:\n                    enc.append(pool[idx])\n                    done = True\n                idx += 1\n    with open(ofile, \"w\") as f:\n        f.write(\" \".join(enc)+\"\\n\")\n ➌ print(\"Your secret key is %d\" % key)\n```", "```\ndef Decode(key, ofile, mfile):\n    enc = ProcessText(open(ofile).read())\n    rng = RE(mode='int', low=1, high=5, seed=key)\n    plain = \"\"\n    for w in enc:\n        plain += w[rng.random()]\n    with open(mfile, \"w\") as f:\n        f.write(plain+\"\\n\")\n```", "```\nentropy: 7.999969\nchi2   : 84.34\nmean   : 127.4992\npi     : 3.140270649 (0.04)\ncorr   : 0.000322\n```", "```\n> python3 steg_random.py 12345 test_images/boat.png output.bin data/RandomDotOrg_sm.bin\n```", "```\nentropy: 7.999969\nchi2   : 86.38\nmean   : 127.4903\npi     : 3.140005417 (0.05)\ncorr   : 0.000403\n```", "```\n> python3 steg_random.py 12345 output.bin tmp.png\n```", "```\n> python3 make_random.py 5000000 none mt19937.bin mt19937\n```", "```\ndef MakeBit(byt):\n    b = np.zeros(8*len(byt), dtype=\"uint8\")\n    k = 0 \n    for v in byt:\n        s = format(v, \"08b\")\n        for c in s:\n            b[k] = int(c)\n            k += 1\n    return b\n```", "```\ndef MakeByte(b):\n    n = len(b)//8\n    t = b.reshape((n,8))\n    byt = np.zeros(n, dtype=\"uint8\")\n    for i in range(n):\n        v = (t[i] * np.array([128,64,32,16,8,4,2,1])).sum()\n        byt[i] = v\n    return byt\n```", "```\n11010101001011101101011001010100\n```", "```\n11010101\n00101110\n11010110\n01010100\n```", "```\ndef Encode(key, sfile, dfile, pfile):\n    src = np.fromfile(sfile, dtype=\"uint8\")\n    s = format(len(src), \"08x\")\n    b3 = int(s[0:2],16);  b2 = int(s[2:4],16)\n    b1 = int(s[4:6],16);  b0 = int(s[6:8],16)\n    src = MakeBit(np.hstack(([b3,b2,b1,b0],src)))\n\n    step = RE(mode=\"int\", low=1, high=16, seed=key).random(len(src))\n    idx = [step[0]]\n    for i in range(1, len(step)):\n        idx.append(idx[-1]+step[i])\n\n    pool = MakeBit(np.fromfile(pfile, dtype=\"uint8\"))\n    if (len(pool) <= idx[-1]):\n        print(\"Pool file is too small\")\n        exit(1)\n\n    for i in range(len(src)):\n        pool[idx[i]] = src[i]\n\n    dest = MakeByte(pool)\n    dest.tofile(dfile)\n```", "```\ndef Decode(key, sfile, dfile):\n    src = MakeBit(np.fromfile(sfile, dtype=\"uint8\"))\n\n    rng = RE(mode=\"int\", low=1, high=16, seed=key)\n    step = rng.random(32)\n    bits = []\n    idx = [step[0]]\n    for i in range(1, len(step)):\n        idx.append(idx[-1]+step[i])\n    for i in range(len(idx)):\n        bits.append(src[idx[i]])\n    n = MessageLength(bits)\n\n    offset = idx[-1]\n    step = rng.random(8*n)\n    idx = [offset + step[0]]\n    bits = []\n    for i in range(1, len(step)):\n        idx.append(idx[-1]+step[i])\n    for i in range(len(idx)):\n        bits.append(src[idx[i]])\n    dest = MakeByte(np.array(bits))\n    dest.tofile(dfile)\n```", "```\ndef MessageLength(bits):\n    b = MakeByte(np.array(bits))\n    n = 256**3*b[0] + 256**2*b[1] + 256*b[2] + b[3]\n    return n\n```", "```\n> python3 steg_audio.py 2718281828 test_images/tulips_gray.png tmp.wav Fireflies.wav\nUsing 3712480 samples to store the file\n```", "```\n> python3 steg_audio.py 2718281828 tmp.wav tmp.png\n```", "```\nFireflies: [5104781 5103286] 0.6398434737379124\nAttitude : [1863322 1860129] 0.09798008575083986\nFun-Key  : [1664208 1661616] 0.15522993473071336\nEncoded  : [5093639 5114428] 7.681149082012241e-11\n```", "```\ndef Encode(key, sfile, dfile, pfile):\n    src = np.fromfile(sfile, dtype=\"uint8\")\n    s = format(len(src), \"08x\")\n    b3 = int(s[0:2],16);  b2 = int(s[2:4],16)\n    b1 = int(s[4:6],16);  b0 = int(s[6:8],16)\n    src = MakeBit(np.hstack(([b3,b2,b1,b0],src)))\n\n    sample_rate, wav = wavread(pfile)\n    if (wav.ndim == 2): \n        samples = wav[:,0].astype(\"uint16\")\n    else:\n        samples = wav.astype(\"uint16\")\n\n    if (len(src) > len(samples)):\n        print(\"The input WAV file is too short\")\n        exit(1)\n    else:\n        print(\"Using %d samples to store the file\" % len(src))\n```", "```\n    step = RE(seed=key, mode=\"int\", low=1, high=5).random(len(src))\n    idx = [step[0]]\n    for i in range(1, len(src)):\n        idx.append(idx[-1]+step[i])\n\n    if (len(samples) <= idx[-1]):\n        print(\"Audio file too short\")\n        exit(1)\n\n    for i in range(len(src)):\n        if (src[i] == 0): \n            if ((samples[idx[i]] % 2) == 1): \n                samples[idx[i]] -= 1\n        else:\n            if ((samples[idx[i]] % 2) == 0):\n                samples[idx[i]] += 1\n\n    out = samples.astype(\"int16\")\n    if (wav.ndim == 2):\n        wav[:,0] = out\n        wavwrite(dfile, sample_rate, wav)\n    else:\n        wavwrite(dfile, sample_rate, out)\n```", "```\ndef Decode(key, sfile, dfile):\n    sample_rate, wav = wavread(sfile)\n    if (wav.ndim == 2):\n        samples = wav[:,0].astype(\"uint16\")\n    else:\n        samples = wav.astype(\"uint16\")\n\n    rng = RE(mode=\"int\", low=1, high=5, seed=key)\n    step = rng.random(32)\n    bits = []\n    idx = [step[0]]\n    for i in range(1, len(step)):\n        idx.append(idx[-1]+step[i])\n    for i in range(len(idx)):\n        bits.append(samples[idx[i]] % 2)\n    n = MessageLength(bits)\n\n    offset = idx[-1]\n    step = rng.random(8*n)\n    idx = [offset + step[0]]\n    bits = []\n    for i in range(1, len(step)):\n        idx.append(idx[-1]+step[i])\n    for i in range(len(idx)):\n        bits.append(samples[idx[i]] % 2)\n\n    msg = MakeByte(np.array(bits))\n    msg.tofile(dfile)\n```", "```\n> pip install pillow\n```", "```\n>>> import numpy as np\n>>> from PIL import Image\n>>> im = Image.open(\"apples.png\")\n>>> d = np.array(im)\n>>> d.shape\n(352, 375, 3)\n>>> im = Image.open(\"barbara.png\")\n>>> d = np.array(im)\n>>> d.shape\n(256, 256)\n>>> im = Image.open(\"barbara.png\").convert(\"RGB\")\n>>> d = np.array(im)\n>>> d.shape\n(256, 256, 3)\n```", "```\n>>> d = np.array(Image.open(\"apples.png\"))\n>>> t = d[:,:,0]\n>>> d[:,:,0] = d[:,:,1]\n>>> d[:,:,1] = t\n>>> im = Image.fromarray(d)\n>>> im.save(\"bad_apples.png\")\n```", "```\n> python3 steg_image.py encode test_images/cameraman.png test_images/apples.png tmp.png\n```", "```\n> python3 steg_image.py decode tmp.png test_images/apples.png output.png\n```", "```\necho \"Encoding...\"\npython3 steg_image.py encode kilroy.txt       test_images/apples_32.png   /tmp/encode0.png\npython3 steg_image.py encode /tmp/encode0.png test_images/peppers_128.png /tmp/encode1.png\npython3 steg_image.py encode /tmp/encode1.png test_images/fruit2.png      /tmp/encode2.png\npython3 steg_image.py encode /tmp/encode2.png test_images/tulips.png      russian_dolls.png\necho \"Decoding...\"\npython3 steg_image.py decode russian_dolls.png test_images/tulips.png      /tmp/decode0.png\npython3 steg_image.py decode /tmp/decode0.png  test_images/fruit2.png      /tmp/decode1.png\npython3 steg_image.py decode /tmp/decode1.png  test_images/peppers_128.png /tmp/decode2.png\npython3 steg_image.py decode /tmp/decode2.png  test_images/apples_32.png   output.txt\n```", "```\n> sh russian_dolls_example\n```", "```\ndef Encode(mfile, sfile, dfile):\n ➊ msg = MakeBit(np.fromfile(mfile, dtype=\"uint8\"))\n    simg = np.array(Image.open(sfile).convert(\"RGB\"))\n    simg[np.where(simg > 253)] = 253\n    row, col, channel = simg.shape\n ➋ simg = simg.ravel()\n    if (len(msg) > len(simg)):\n        print(\"Message file too long\")\n        exit(1)\n ➌ rng = RE(kind=\"mt19937\")\n    p = np.arange(len(simg))\n    np.random.shuffle(p)\n    p = p[:len(msg)]\n    p.sort()\n ➍ for i in range(len(p)):\n        simg[p[i]] += msg[i]+1\n    simg = simg.reshape((row, col, channel))\n    Image.fromarray(simg).save(dfile)\n```", "```\ndef Decode(dfile, sfile, mfile):\n    dimg = np.array(Image.open(dfile)).ravel()\n    simg = np.array(Image.open(sfile).convert(\"RGB\")).ravel()\n    simg[np.where(simg > 253)] = 253\n    i = np.where(dimg != simg)\n    d = dimg[i] - simg[i] - 1\n    b = MakeByte(d.astype(\"uint8\"))\n    b.tofile(mfile)\n```"]