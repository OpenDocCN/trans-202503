- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Measuring and Simulating Time
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 测量和模拟时间
- en: '![](Images/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/chapterart.png)'
- en: 'Sketch 86: Displaying a Clock'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 86：显示时钟
- en: Time in a computer program can mean many things. There is execution time, which
    is the number of CPU cycles used by a program to a particular point. There is
    process time, or the amount of time that a program has been active. There is real
    time, which is the time on your watch. We can also call that clock time. This
    sketch will acquire the clock time from the computer system and display it as
    the hands of a traditional clock.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机程序中，时间可以有很多含义。有执行时间，即程序在某一特定点上所消耗的CPU周期数；有进程时间，即程序已经运行的时间；还有实际时间，就是你手表上的时间。我们也可以称之为时钟时间。本草图将从计算机系统获取时钟时间，并将其显示为传统时钟的指针。
- en: 'Getting the time of day from Processing is easy. These are the basic functions:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从Processing获取时间非常简单。这些是基本的功能：
- en: '`hour()`: Returns the current hour in the day using a 24-hour clock.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`hour()`: 返回当前的小时，使用24小时制。'
- en: '`minute()`: Returns the number of minutes past the hour.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`minute()`: 返回已经过去的分钟数。'
- en: '`second()`: Returns the number of seconds into the current minute.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`second()`: 返回当前分钟内经过的秒数。'
- en: 'The clock will be a circle, and there will be three linear indicators (hands):
    a second hand, a minute hand, and an hour hand. Since there are 60 seconds in
    a minute, the second hand will rotate about its center point by 360/60, or 6 degrees
    each second. The same is true of the minute hand; since there are 60 seconds per
    minute and 60 minutes in an hour, it rotates 6 degrees per minute. The origin
    for drawing the second hand is the clock’s center, but the other endpoint is not
    known, only the angle. If the length of the second hand is *r*, then the second
    point can be determined with trigonometry, as seen in [Figure 86-1](#figure86-1).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 时钟将是一个圆形，并且将有三根指针（时针、分针、秒针）。由于一分钟有60秒，秒针每秒钟将围绕其中心点旋转360/60，即6度。分针也一样；由于每分钟有60秒，每小时有60分钟，因此它每分钟旋转6度。绘制秒针的原点是时钟的中心，但另一个端点是未知的，只有角度。如果秒针的长度是*r*，那么第二个点可以通过三角函数确定，如[图86-1](#figure86-1)所示。
- en: '![f086001](Images/f086001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![f086001](Images/f086001.png)'
- en: 'Figure 86-1: Determining the position of a clock hand'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图86-1：确定时钟指针的位置
- en: 'The angle as defined by Processing is not the same as that for a clock. On
    a clock, vertical represents 0, whereas in Processing that is −90 degrees. Drawing
    the second hand with (`cx`, `cy`) as the center point and with a length of `r`
    would be done as follows, where the variable `s` is the number of seconds 1:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Processing中定义的角度与时钟上的角度不同。在时钟上，垂直表示0度，而在Processing中是−90度。绘制秒针时，以(`cx`, `cy`)为中心点，长度为`r`，可以按如下方式绘制，其中变量`s`表示秒数1：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The same scheme works for the minute hand, which is shorter. The hour hand
    should be shorter still, and the `hour()` value is divided by 2 if it exceeds
    12\. Also, there are only 12 hours in the 360-degree cycle, not 60, so each hour
    amounts to 30 degrees. The hour hand moves continuously around the face and does
    not jump when the hour changes, so each minute that passes should move the hour
    hand a little bit; 30 degrees (1 hour) is 60 minutes, so each minute moves the
    hour hand by 0.5 degrees 2. This is the code:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的原理适用于较短的分钟针。小时针应该更短，如果`hour()`值超过12，则将其除以2。此外，360度的周期中只有12个小时，而不是60个，所以每个小时对应30度。小时针是连续旋转的，而不会在每小时变化时跳跃，所以每经过一分钟，小时针会稍微转动一点；30度（1小时）等于60分钟，因此每分钟使小时针转动0.5度2。以下是代码：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Sketch 87: Time Differences—Measuring Reaction Time'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 草图 87：时间差异——测量反应时间
- en: 'Measuring the time between two events is the subject of this sketch: in particular,
    the time between a prompt by the computer and a response by the user, the reaction
    time. A typical (average) reaction time for a human is about 0.215 seconds. That
    is, between the time that a light goes on and the time that someone can press
    a button in response, an average of 215 milliseconds will pass.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 测量两个事件之间的时间是本草图的主题：特别是计算机的提示和用户的反应之间的时间，即反应时间。一个典型的（平均）人类反应时间大约是0.215秒。也就是说，从灯光亮起到某人按下按钮作出反应之间，平均会过去215毫秒。
- en: This sketch measures reaction time by having the user click the mouse as quickly
    as they can when the background changes from grey to green. The background then
    changes back to grey, and the cycle repeats five times. The program measures the
    time between the screen turning green and the mouse click using the `millis()`
    function, and it averages the five trials to get a more precise measurement.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: We use `millis()` because the function used in the previous sketch to move the
    second hand, `second()`, only returns whole seconds. `millis()` returns the number
    of milliseconds (1/1,000 seconds) since the sketch started executing. On the face
    of it, that value does not seem to have much meaning, but it does mean that the
    time difference between two events can be measured pretty accurately. Simply call
    `millis()` 1 when the first event happens, save the value, call it again when
    the second event occurs 2, and subtract the two.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'The `millis()` function can be used for other purposes, not the least of which
    is to determine how long it takes for a particular loop or function to execute.
    This sort of measurement is important when a program takes too long and the programmer
    needs to find ways to speed it up. Measuring one call to a function would not
    likely work, because most functions execute too quickly to measure, even slow
    functions. Instead, we put a function to be tested within a loop and execute it
    many times. We divide the time required to execute the loop by the number of iterations
    to determine the time needed for a single execution. Here is how the function
    `get(12,100)` could be timed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The times obtained vary, so taking an average over many trials should give a
    more accurate result. Execution times may change depending on what other programs
    are executing at the same time or how many virtual memory page faults occurred.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Sketch 88: M/M/1 Queue—Time in Simulations'
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A single-server queuing system, or M/M/1 queuing system, is like a bank teller.
    Customers arrive at random times to the teller for service. The service requires
    some random amount of time, and then the customer departs. If the teller is busy
    with a customer when another one arrives, the new arrival waits in a queue or
    waiting line. When a departure occurs, the next customer in line is served; if
    there is no one in the queue, the teller (the server) becomes idle. This system
    resembles many that we see in real life: grocery checkouts, gas stations, waiting
    for a bus, even air traffic and ships arriving in a port.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: This sketch simulates one server and one queue, but it can be adapted to do
    more, and it calculates the average queue length. The value in doing a simulation
    of such a system is in finding out how long the queue becomes, how much time a
    client spends in the queue, what percentage of the time the server is busy, and
    so on. All of this concerns costs and wasted time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'In the real world, time is continuous, but on the computer, that is not possible.
    Instead, the time of the simulation takes on discrete values: time = 0, time =
    1.5, time = 3.99, and so on. When the simulation starts, we set the variable `time`
    to the time of the first arrival 1, and the time after that will be the time of
    the event being processed. This is known as a next event simulation: the current
    time in the simulation keeps jumping ahead to the time of the next event (arrival
    or departure) that occurs.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，时间是连续的，但在计算机中，这是不可能的。因此，模拟中的时间采用离散值：时间 = 0，时间 = 1.5，时间 = 3.99，依此类推。当模拟开始时，我们将变量`time`设置为第一次到达事件的时间
    1，之后的时间将是处理事件时的时间。这被称为下一事件模拟：模拟中的当前时间不断跳跃到下一个发生的事件（到达或离开）的时间。
- en: 'Arrivals happen at random times according to a particular probability distribution.
    When an arrival happens, it (the customer) enters the queue for the service (teller).
    If there is no queue, it gets served immediately; otherwise it must wait. When
    it gets to the server (the teller), it will require some random amount of time
    to be served, and then it will leave. Here are the steps to handle each event:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到达事件发生在随机时间，符合特定的概率分布。当一个到达事件发生时，它（客户）进入服务队列（柜台）。如果队列为空，它将立即接受服务；否则，它必须等待。当它到达服务器（柜台）时，它将需要一些随机时间来接受服务，然后离开。以下是处理每个事件的步骤：
- en: '| **Arrival** | **Departure** |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| **到达** | **离开** |'
- en: '| 1\. Place the arrival into the queue 2. | 1\. Remove the job from the queue
    3. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 1\. 将到达事件放入队列 2. | 1\. 从队列中移除工作任务 3. |'
- en: '| 2\. Is the server busy? | 2\. Queue empty? |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 2\. 服务器忙碌吗？ | 2\. 队列为空？ |'
- en: '| 3\. If not, start the server. | 3\. If so, the server becomes idle. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 3\. 如果不是，启动服务器。 | 3\. 如果是，服务器变为空闲状态。 |'
- en: '| 4\. Schedule the next arrival. | 4\. If not, schedule a departure. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 4\. 安排下一个到达事件。 | 4\. 如果不是，安排离开事件。 |'
- en: The queue is an array holding numbers. Adding to the queue means placing a new
    value (the randomly generated service time for the job) at the end of the queue.
    When a value departs the queue, it means removing the first element and moving
    each consecutive value forward by one place. The function `into(t)` 5 inserts
    time `t` into the queue, whereas `out()` 6 removes the front element from the
    queue. The queue is empty (or the system is idle) if there is nothing in the queue
    4.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 队列是一个存储数字的数组。加入队列意味着将一个新的值（工作任务的随机生成服务时间）放到队列的末尾。当一个值离开队列时，意味着移除队列中的第一个元素，并将每个后续的值向前移动一个位置。函数`into(t)`
    5 将时间`t`插入队列，而`out()` 6 则移除队列中的第一个元素。如果队列为空（或系统空闲），则表示队列中没有任何内容 4。
- en: 'The statistical distribution of times between arrivals and departures is according
    to the negative exponential distribution. If the average time between arrivals
    is μ, then this will be the time of the next arrival in the simulation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到达和离开之间的时间统计分布遵循负指数分布。如果到达的平均时间间隔是μ，则在模拟中下一个到达事件的时间将是：
- en: –μ * log(`random(1)`)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: –μ * log(`random(1)`)
- en: A similar situation exists for departures.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 离开事件也有类似的情况。
