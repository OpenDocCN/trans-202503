- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: E USEFUL C LANGUAGE FUNCTIONS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E 有用的 C 语言函数
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/opener.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener.jpg)'
- en: This appendix contains a list of several C functions from the C stdlib (and
    Unix system library) that may be useful to assembly language programmers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录包含了来自 C 标准库（以及 Unix 系统库）的几个 C 函数的列表，这些函数可能对汇编语言程序员有用。
- en: 'The macOS variants of these functions use an external name that begins with
    an underscore. For example, under macOS, strlen() becomes the _strlen() function.
    The *aoaa.inc* header file contains #define statements for many of these function
    names that add the underscore prefix in front of the unadorned names: #define
    strlen _strlen.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '这些函数在 macOS 中的变体使用一个以下划线开头的外部名称。例如，在 macOS 中，strlen() 变成了 _strlen() 函数。*aoaa.inc*
    头文件包含了许多这些函数名称的 #define 声明，在未修饰的名称前添加了下划线前缀：#define strlen _strlen。'
- en: '## E.1 String Functions'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '## E.1 字符串函数'
- en: 'Various chapters in this book have introduced many of the C stdlib string functions
    (declared in the *strings.h* header file). This section describes most of the
    available functions, including those this book has not used:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的各个章节介绍了许多 C 标准库字符串函数（在 *strings.h* 头文件中声明）。本节描述了大多数可用的函数，包括本书未使用的那些：
- en: char *strcat(char *dest, const char *src);
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: char *strcat(char *dest, const char *src);
- en: Concatenates the zero-terminated string at which X1 (src) points to the end
    of the string at which X0 (dest) points. Returns a pointer to the dest string
    in X0.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X1 (src) 指向的以零结尾的字符串连接到 X0 (dest) 指向的字符串的末尾。返回 X0 中指向 dest 字符串的指针。
- en: char *strchr(const char *str, int c);
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: char *strchr(const char *str, int c);
- en: Searches for the first occurrence of the character specified by c (X1) in the
    string at which str (X0) points. Returns a pointer into the string (in X0) where
    the character was found, or a NULL (0) pointer if c does not exist in str.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在由 str (X0) 指向的字符串中搜索字符 c (X1) 的第一次出现。返回指向字符串中找到该字符的位置的指针（在 X0 中），如果 c 在 str
    中不存在，则返回 NULL (0) 指针。
- en: char *strcpy(char *dest, const char *src);
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: char *strcpy(char *dest, const char *src);
- en: Copies the string pointed at by src (X1) to dest (X0), including the zero-terminating
    byte. Returns a pointer to dest in X0.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将 src (X1) 指向的字符串复制到 dest (X0)，包括零终止字节。返回指向 dest 的指针（在 X0 中）。
- en: char *strdup(char *str);
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: char *strdup(char *str);
- en: Duplicates a string on the heap. On entry, X0 contains a pointer to the string
    to duplicate. On return, X0 contains a pointer to a copy of the string allocated
    on the heap. When the application is done using the string, the application should
    call the C stdlib free() function to return the storage to the heap. Though strdup()
    is not defined in the C stdlib, most systems include it in their libraries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在堆上复制一个字符串。传入时，X0 包含要复制的字符串的指针。返回时，X0 包含指向在堆上分配的字符串副本的指针。当应用程序使用完该字符串后，应该调用
    C 标准库的 free() 函数将存储空间归还给堆。虽然 strdup() 在 C 标准库中未定义，但大多数系统在其库中包含了它。
- en: char *strncat(char *dest, const char *src, size_t n);
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: char *strncat(char *dest, const char *src, size_t n);
- en: Concatenates at most n characters from the zero-terminated string at which X1
    (src) points to the end of the string at which X0 (dest) points, plus a zero-terminating
    byte. Returns a pointer to the dest string in X0\. If the length of src is less
    than n, this string copies only the first n characters from src to dest (plus
    a zero-terminating byte).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将 X1 (src) 指向的以零结尾的字符串的最多 n 个字符连接到 X0 (dest) 指向的字符串的末尾，并加上一个零终止字节。返回 X0 中指向
    dest 字符串的指针。如果 src 的长度小于 n，则该字符串只会将 src 中的前 n 个字符复制到 dest（加上一个零终止字节）。
- en: char *strpbrk(const char *str1, const char *str2);
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: char *strpbrk(const char *str1, const char *str2);
- en: Finds the first character in the string str1 (passed in X0) that matches any
    character specified in str2 (passed in X1). Returns a pointer to the matching
    character in str1 in the X0 register (or NULL if no match).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 查找字符串 str1（由 X0 传入）中第一个与 str2（由 X1 传入）中任意字符匹配的字符。返回指向 str1 中匹配字符的指针（如果没有匹配，则返回
    NULL）。
- en: char *strrchr(const char *str, int c);
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: char *strrchr(const char *str, int c);
- en: Searches for the last occurrence of the character c (a char passed in X1) in
    the string pointed to by the argument str (passed in X0). Returns a pointer into
    str where the character was found in X0\. If the character was not found in str,
    this function returns NULL (0) in X0.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在由参数 str (传入 X0) 指向的字符串中搜索字符 c（在 X1 中传递）的最后一次出现。返回指向 str 中找到该字符的位置的指针（在 X0 中）。如果字符在
    str 中未找到，则此函数在 X0 中返回 NULL (0)。
- en: char *strstr(const char *inStr, const char *search4);
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: char *strstr(const char *inStr, const char *search4);
- en: Searches for the first occurrence of the string search4 (passed in X1) within
    inStr (passed in X0). It returns a pointer to the matching position in the X0
    register, returning NULL (0) if the search4 string is not present within inStr.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 inStr（传入 X0）中搜索字符串 search4（传入 X1）的第一个出现位置。如果在 inStr 中找不到 search4 字符串，则返回 NULL（0）。
- en: char *strtok(char *str, char *delim);
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: char *strtok(char *str, char *delim);
- en: Breaks string str (passed in X0) into a series of *tokens* (words) separated
    by characters found in the delim (passed in X1) string. On a first call, the function
    expects a C string as an argument for str, whose first character is used as the
    starting location to scan for tokens. In subsequent calls, the function expects
    a NULL (0) pointer and uses the position right after the end of the last token
    as the new starting location for scanning (skipping any leading delimiter characters).
    Each call returns a pointer (in X0) to the next token within the string. This
    function returns NULL when it exhausts all the tokens in the string.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串 str（传入 X0）按照分隔符 delim（传入 X1）中的字符分割成一系列*标记*（单词）。在第一次调用时，函数期望将 C 字符串作为 str
    的参数，其第一个字符用作扫描标记的起始位置。在后续调用中，函数期望一个空指针（NULL，0），并将上一个标记的末尾位置作为新的扫描起始位置（跳过任何前导分隔符字符）。每次调用返回一个指向字符串中下一个标记的指针（在
    X0 中）。当字符串中的所有标记耗尽时，此函数返回 NULL。
- en: This function modifies the contents of the string at which str (X0) points.
    If your program cannot tolerate this, make a copy of str before calling strtok().
    The strtok() function maintains internal state in a static variable and therefore
    is not safe to use in multithreaded applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数修改 str（X0 指向的字符串）的内容。如果您的程序不能容忍此操作，请在调用 strtok() 前复制 str。strtok() 函数在静态变量中维护内部状态，因此不适合在多线程应用程序中使用。
- en: int memcmp(void *mem1, void *mem2, size_t n);
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: int memcmp(void *mem1, void *mem2, size_t n);
- en: Compares the first n bytes of mem1 and mem2 (mem1 is passed in X0, mem2 is passed
    in X1, and n is passed in X2). Similar in operation to strcmp(), except that this
    function doesn’t end the comparison upon encountering a 0 byte; strcmp(), on the
    other hand, returns a negative value, 0, or a positive value to indicate the comparison
    status.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 mem1（传入 X0）和 mem2（传入 X1）的前 n 个字节。其操作类似于 strcmp()，但此函数在遇到 0 字节时不会结束比较；相比之下，strcmp()会根据比较结果返回负值、0
    或正值。
- en: int strcasecmp(const char *str1, const char *str2);
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: int strcasecmp(const char *str1, const char *str2);
- en: Compares the string at which str1 (X0) points against the string at which str2
    (X1) points using a case-insensitive comparison. Returns (in X0) a negative number
    if str1 < str2, 0 if str1 == str2, or a positive number if str1 > str2. Though
    strcasecmp() is not defined in the C stdlib, many systems include it in their
    libraries; some use the function name strcmpi() or stricmp() instead.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 str1（X0 指向的字符串）与 str2（X1 指向的字符串）的内容，采用不区分大小写的比较。如果 str1 < str2，则返回（在 X0 中）一个负数；如果
    str1 == str2，则返回 0；如果 str1 > str2，则返回一个正数。尽管 strcasecmp() 在 C 标准库中未定义，但许多系统在其库中包含它；有些系统使用
    strcmpi() 或 stricmp() 作为函数名。
- en: int strcmp(const char *str1, const char *str2);
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: int strcmp(const char *str1, const char *str2);
- en: Compares the string at which str1 (X0) points against the string at which str2
    (X1) points and returns (in X0) a negative number if str1 < str2, 0 if str1 ==
    str2, or a positive number if str1 > str2.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 比较 str1（X0 指向的字符串）和 str2（X1 指向的字符串）的内容，并返回（在 X0 中）一个负数、0 或正数。如果 str1 < str2，则返回一个负数；如果
    str1 == str2，则返回 0；如果 str1 > str2，则返回一个正数。
- en: int strncmp(char *str1, char *str2, size_t n);
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: int strncmp(char *str1, char *str2, size_t n);
- en: Compares two strings up to the first n characters, or until encountering the
    first zero-terminating byte (in either string). Pointer to str1 is passed in X0,
    pointer to str2 is passed in X1, and n is passed in X2\. Returns 0 if the strings
    were equal (through n characters, or less if both strings are equal and their
    length is less than n). Returns a negative value if str1 is less than str2. Returns
    a positive value if str1 is greater than str2. You can use this function to see
    if str1 is a prefix of str2 by setting n equal to the length of str1.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 比较两个字符串的前 n 个字符，或者直到遇到第一个零终止字节（在任一字符串中）。指针 str1 和 str2 分别传入 X0 和 X1，n 传入 X2。如果字符串通过前
    n 个字符相等（或者两个字符串都相等且长度小于 n），则返回 0。如果 str1 小于 str2，则返回一个负数。如果 str1 大于 str2，则返回一个正数。您可以使用此函数通过设置
    n 为 str1 的长度来判断 str1 是否是 str2 的前缀。
- en: size_t strcspn(const char *str1, const char *str2);
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: size_t strcspn(const char *str1, const char *str2);
- en: Calculates the length of the initial segment of str1 (passed in X0), which consists
    entirely of characters not in str2 (passed in X1). Returns this count in X0.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: size_t strlen(char *str);
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Computes the length of a zero-terminated string. X0 contains a pointer to the
    string upon entry, and this function returns the string length in X0 (not including
    the zero-terminating byte).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: size_t strspn(const char *str1, const char *str2);
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the length of the initial segment of str1 (passed in X0), which consists
    entirely of characters in str2 (passed in X1). Returns the count in X0.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: strlwr(str);
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Converts all the characters in a string to lowercase. On entry, X0 contains
    a pointer to the string to convert; on return, X0 points at this same string with
    the uppercase characters converted to lowercase. Though strlwr() is not defined
    in the C stdlib, many systems include it in their libraries.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: strncpy(char *dest, const char *src, size_t n);
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Copies, at most, n (passed in X2) characters from src (passed in X1) to dest
    (passed in X0). If n is less than or equal to the length of src, this function
    will not copy the zero-terminating byte, and the caller is responsible for adding
    this extra byte. This function has two primary uses. First, it prevents overwriting
    data beyond the end of dest (when n contains the size of the dest buffer, plus
    1, at which X0 points). Second, it serves as a substring function, allowing you
    to extract n characters from a particular position within a string.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: strupr(str);
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Converts all lowercase characters in a string to uppercase. On entry, X0 contains
    a pointer to the string to convert; on return, X0 points at this same string with
    the lowercase characters converted to uppercase. Though strupr() is not defined
    in the C stdlib, many systems include it in their libraries.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: void *memchr(void *mem, int c, size_t n);
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Searches for the first occurrence of the character c (an unsigned char passed
    in X1) in the first n (passed in X2) bytes of the memory block at which the argument
    mem (passed in X0) points. Very similar to strchr(), except this function will
    not stop scanning when it finds a 0 byte in str. Returns, in X0, a pointer into
    mem where it found the character, or NULL (0) if character c does not exist in
    mem.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: void *memcpy(void *dest, const void *src, size_t n);
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Copies n bytes from src to dest (passed in X2, X1, and X0, respectively). Returns
    a pointer to dest in X0\. If the memory block defined by dest overlaps the memory
    block defined by src, the results are undefined.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: void *memmove(void *dest, const void *src, size_t n);
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Copies n bytes from src to dest (passed in X2, X1, and X0, respectively). Returns
    a pointer to dest in X0.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The memmove() function correctly handles situations in which the source and
    destination blocks overlap. However, this function may run a little bit slower
    than memcpy(), so you should use it only when you cannot guarantee that the blocks
    do not overlap.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: void *memset(void *mem, int c, size_t n);
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Copies the LO byte of c (passed in X1) to the first n (passed in X2) bytes of
    the memory block at which the argument mem (passed in X0) points. Returns a pointer
    to the memory block in X0.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将传入 X1 的 c 的 LO 字节复制到由参数 mem（传入 X0）指向的内存块的前 n（传入 X2）字节中。返回指向该内存块的指针，存放在 X0 中。
- en: E.2 Other C Stdlib and Unix Functions
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: E.2 其他 C 标准库和 Unix 函数
- en: 'The string functions covered in this appendix are but a small sampling of the
    many functions available in the C stdlib. Other useful functions include the POSIX
    file I/O functions (declared in the *fcntl.h* and *unistd.h* header files), the
    math libraries (found in *math.h*), and many others. For more information on these
    header files, see the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录中介绍的字符串函数只是 C 标准库中众多函数的一小部分。其他有用的函数包括 POSIX 文件 I/O 函数（在 *fcntl.h* 和 *unistd.h*
    头文件中声明）、数学库（在 *math.h* 中找到）等。有关这些头文件的更多信息，请参见以下链接：
- en: '***fcntl.h***'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '***fcntl.h***'
- en: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/000095399<wbr>/basedefs<wbr>/fcntl<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/000095399/basedefs/fcntl.h.html)*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/000095399<wbr>/basedefs<wbr>/fcntl<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/000095399/basedefs/fcntl.h.html)*'
- en: '***math.h***'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '***math.h***'
- en: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/9699919799<wbr>/basedefs<wbr>/math<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/math.h.html)*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/9699919799<wbr>/basedefs<wbr>/math<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/math.h.html)*'
- en: '***unistd.h***'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '***unistd.h***'
- en: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/007908775<wbr>/xsh<wbr>/unistd<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/007908775/xsh/unistd.h.html)*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/007908775<wbr>/xsh<wbr>/unistd<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/007908775/xsh/unistd.h.html)*'
- en: You can easily call each of these functions by specifying its name (don’t forget
    to prepend an underscore when calling functions in macOS). You always pass parameters
    and retrieve function results by using the ARM ABI for Linux and the macOS ABI
    under macOS (remember that macOS differs when passing variable argument lists
    to a function, such as printf()).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定函数名称来轻松调用这些函数（在 macOS 中调用函数时不要忘记在函数名前加下划线）。你始终通过使用 Linux 的 ARM ABI 或
    macOS 的 macOS ABI 来传递参数和获取函数结果（请记住，macOS 在传递变长参数列表给函数时有所不同，例如 printf()）。
