- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: E USEFUL C LANGUAGE FUNCTIONS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This appendix contains a list of several C functions from the C stdlib (and
    Unix system library) that may be useful to assembly language programmers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The macOS variants of these functions use an external name that begins with
    an underscore. For example, under macOS, strlen() becomes the _strlen() function.
    The *aoaa.inc* header file contains #define statements for many of these function
    names that add the underscore prefix in front of the unadorned names: #define
    strlen _strlen.'
  prefs: []
  type: TYPE_NORMAL
- en: '## E.1 String Functions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Various chapters in this book have introduced many of the C stdlib string functions
    (declared in the *strings.h* header file). This section describes most of the
    available functions, including those this book has not used:'
  prefs: []
  type: TYPE_NORMAL
- en: char *strcat(char *dest, const char *src);
  prefs: []
  type: TYPE_NORMAL
- en: Concatenates the zero-terminated string at which X1 (src) points to the end
    of the string at which X0 (dest) points. Returns a pointer to the dest string
    in X0.
  prefs: []
  type: TYPE_NORMAL
- en: char *strchr(const char *str, int c);
  prefs: []
  type: TYPE_NORMAL
- en: Searches for the first occurrence of the character specified by c (X1) in the
    string at which str (X0) points. Returns a pointer into the string (in X0) where
    the character was found, or a NULL (0) pointer if c does not exist in str.
  prefs: []
  type: TYPE_NORMAL
- en: char *strcpy(char *dest, const char *src);
  prefs: []
  type: TYPE_NORMAL
- en: Copies the string pointed at by src (X1) to dest (X0), including the zero-terminating
    byte. Returns a pointer to dest in X0.
  prefs: []
  type: TYPE_NORMAL
- en: char *strdup(char *str);
  prefs: []
  type: TYPE_NORMAL
- en: Duplicates a string on the heap. On entry, X0 contains a pointer to the string
    to duplicate. On return, X0 contains a pointer to a copy of the string allocated
    on the heap. When the application is done using the string, the application should
    call the C stdlib free() function to return the storage to the heap. Though strdup()
    is not defined in the C stdlib, most systems include it in their libraries.
  prefs: []
  type: TYPE_NORMAL
- en: char *strncat(char *dest, const char *src, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Concatenates at most n characters from the zero-terminated string at which X1
    (src) points to the end of the string at which X0 (dest) points, plus a zero-terminating
    byte. Returns a pointer to the dest string in X0\. If the length of src is less
    than n, this string copies only the first n characters from src to dest (plus
    a zero-terminating byte).
  prefs: []
  type: TYPE_NORMAL
- en: char *strpbrk(const char *str1, const char *str2);
  prefs: []
  type: TYPE_NORMAL
- en: Finds the first character in the string str1 (passed in X0) that matches any
    character specified in str2 (passed in X1). Returns a pointer to the matching
    character in str1 in the X0 register (or NULL if no match).
  prefs: []
  type: TYPE_NORMAL
- en: char *strrchr(const char *str, int c);
  prefs: []
  type: TYPE_NORMAL
- en: Searches for the last occurrence of the character c (a char passed in X1) in
    the string pointed to by the argument str (passed in X0). Returns a pointer into
    str where the character was found in X0\. If the character was not found in str,
    this function returns NULL (0) in X0.
  prefs: []
  type: TYPE_NORMAL
- en: char *strstr(const char *inStr, const char *search4);
  prefs: []
  type: TYPE_NORMAL
- en: Searches for the first occurrence of the string search4 (passed in X1) within
    inStr (passed in X0). It returns a pointer to the matching position in the X0
    register, returning NULL (0) if the search4 string is not present within inStr.
  prefs: []
  type: TYPE_NORMAL
- en: char *strtok(char *str, char *delim);
  prefs: []
  type: TYPE_NORMAL
- en: Breaks string str (passed in X0) into a series of *tokens* (words) separated
    by characters found in the delim (passed in X1) string. On a first call, the function
    expects a C string as an argument for str, whose first character is used as the
    starting location to scan for tokens. In subsequent calls, the function expects
    a NULL (0) pointer and uses the position right after the end of the last token
    as the new starting location for scanning (skipping any leading delimiter characters).
    Each call returns a pointer (in X0) to the next token within the string. This
    function returns NULL when it exhausts all the tokens in the string.
  prefs: []
  type: TYPE_NORMAL
- en: This function modifies the contents of the string at which str (X0) points.
    If your program cannot tolerate this, make a copy of str before calling strtok().
    The strtok() function maintains internal state in a static variable and therefore
    is not safe to use in multithreaded applications.
  prefs: []
  type: TYPE_NORMAL
- en: int memcmp(void *mem1, void *mem2, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Compares the first n bytes of mem1 and mem2 (mem1 is passed in X0, mem2 is passed
    in X1, and n is passed in X2). Similar in operation to strcmp(), except that this
    function doesn’t end the comparison upon encountering a 0 byte; strcmp(), on the
    other hand, returns a negative value, 0, or a positive value to indicate the comparison
    status.
  prefs: []
  type: TYPE_NORMAL
- en: int strcasecmp(const char *str1, const char *str2);
  prefs: []
  type: TYPE_NORMAL
- en: Compares the string at which str1 (X0) points against the string at which str2
    (X1) points using a case-insensitive comparison. Returns (in X0) a negative number
    if str1 < str2, 0 if str1 == str2, or a positive number if str1 > str2. Though
    strcasecmp() is not defined in the C stdlib, many systems include it in their
    libraries; some use the function name strcmpi() or stricmp() instead.
  prefs: []
  type: TYPE_NORMAL
- en: int strcmp(const char *str1, const char *str2);
  prefs: []
  type: TYPE_NORMAL
- en: Compares the string at which str1 (X0) points against the string at which str2
    (X1) points and returns (in X0) a negative number if str1 < str2, 0 if str1 ==
    str2, or a positive number if str1 > str2.
  prefs: []
  type: TYPE_NORMAL
- en: int strncmp(char *str1, char *str2, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Compares two strings up to the first n characters, or until encountering the
    first zero-terminating byte (in either string). Pointer to str1 is passed in X0,
    pointer to str2 is passed in X1, and n is passed in X2\. Returns 0 if the strings
    were equal (through n characters, or less if both strings are equal and their
    length is less than n). Returns a negative value if str1 is less than str2. Returns
    a positive value if str1 is greater than str2. You can use this function to see
    if str1 is a prefix of str2 by setting n equal to the length of str1.
  prefs: []
  type: TYPE_NORMAL
- en: size_t strcspn(const char *str1, const char *str2);
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the length of the initial segment of str1 (passed in X0), which consists
    entirely of characters not in str2 (passed in X1). Returns this count in X0.
  prefs: []
  type: TYPE_NORMAL
- en: size_t strlen(char *str);
  prefs: []
  type: TYPE_NORMAL
- en: Computes the length of a zero-terminated string. X0 contains a pointer to the
    string upon entry, and this function returns the string length in X0 (not including
    the zero-terminating byte).
  prefs: []
  type: TYPE_NORMAL
- en: size_t strspn(const char *str1, const char *str2);
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the length of the initial segment of str1 (passed in X0), which consists
    entirely of characters in str2 (passed in X1). Returns the count in X0.
  prefs: []
  type: TYPE_NORMAL
- en: strlwr(str);
  prefs: []
  type: TYPE_NORMAL
- en: Converts all the characters in a string to lowercase. On entry, X0 contains
    a pointer to the string to convert; on return, X0 points at this same string with
    the uppercase characters converted to lowercase. Though strlwr() is not defined
    in the C stdlib, many systems include it in their libraries.
  prefs: []
  type: TYPE_NORMAL
- en: strncpy(char *dest, const char *src, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Copies, at most, n (passed in X2) characters from src (passed in X1) to dest
    (passed in X0). If n is less than or equal to the length of src, this function
    will not copy the zero-terminating byte, and the caller is responsible for adding
    this extra byte. This function has two primary uses. First, it prevents overwriting
    data beyond the end of dest (when n contains the size of the dest buffer, plus
    1, at which X0 points). Second, it serves as a substring function, allowing you
    to extract n characters from a particular position within a string.
  prefs: []
  type: TYPE_NORMAL
- en: strupr(str);
  prefs: []
  type: TYPE_NORMAL
- en: Converts all lowercase characters in a string to uppercase. On entry, X0 contains
    a pointer to the string to convert; on return, X0 points at this same string with
    the lowercase characters converted to uppercase. Though strupr() is not defined
    in the C stdlib, many systems include it in their libraries.
  prefs: []
  type: TYPE_NORMAL
- en: void *memchr(void *mem, int c, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Searches for the first occurrence of the character c (an unsigned char passed
    in X1) in the first n (passed in X2) bytes of the memory block at which the argument
    mem (passed in X0) points. Very similar to strchr(), except this function will
    not stop scanning when it finds a 0 byte in str. Returns, in X0, a pointer into
    mem where it found the character, or NULL (0) if character c does not exist in
    mem.
  prefs: []
  type: TYPE_NORMAL
- en: void *memcpy(void *dest, const void *src, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Copies n bytes from src to dest (passed in X2, X1, and X0, respectively). Returns
    a pointer to dest in X0\. If the memory block defined by dest overlaps the memory
    block defined by src, the results are undefined.
  prefs: []
  type: TYPE_NORMAL
- en: void *memmove(void *dest, const void *src, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Copies n bytes from src to dest (passed in X2, X1, and X0, respectively). Returns
    a pointer to dest in X0.
  prefs: []
  type: TYPE_NORMAL
- en: The memmove() function correctly handles situations in which the source and
    destination blocks overlap. However, this function may run a little bit slower
    than memcpy(), so you should use it only when you cannot guarantee that the blocks
    do not overlap.
  prefs: []
  type: TYPE_NORMAL
- en: void *memset(void *mem, int c, size_t n);
  prefs: []
  type: TYPE_NORMAL
- en: Copies the LO byte of c (passed in X1) to the first n (passed in X2) bytes of
    the memory block at which the argument mem (passed in X0) points. Returns a pointer
    to the memory block in X0.
  prefs: []
  type: TYPE_NORMAL
- en: E.2 Other C Stdlib and Unix Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The string functions covered in this appendix are but a small sampling of the
    many functions available in the C stdlib. Other useful functions include the POSIX
    file I/O functions (declared in the *fcntl.h* and *unistd.h* header files), the
    math libraries (found in *math.h*), and many others. For more information on these
    header files, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '***fcntl.h***'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/000095399<wbr>/basedefs<wbr>/fcntl<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/000095399/basedefs/fcntl.h.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: '***math.h***'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/9699919799<wbr>/basedefs<wbr>/math<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/math.h.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: '***unistd.h***'
  prefs: []
  type: TYPE_NORMAL
- en: '*[https://<wbr>pubs<wbr>.opengroup<wbr>.org<wbr>/onlinepubs<wbr>/007908775<wbr>/xsh<wbr>/unistd<wbr>.h<wbr>.html](https://pubs.opengroup.org/onlinepubs/007908775/xsh/unistd.h.html)*'
  prefs: []
  type: TYPE_NORMAL
- en: You can easily call each of these functions by specifying its name (don’t forget
    to prepend an underscore when calling functions in macOS). You always pass parameters
    and retrieve function results by using the ARM ABI for Linux and the macOS ABI
    under macOS (remember that macOS differs when passing variable argument lists
    to a function, such as printf()).
  prefs: []
  type: TYPE_NORMAL
