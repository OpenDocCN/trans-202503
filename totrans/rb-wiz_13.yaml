- en: Chapter 14. Where to Go Next
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章。接下来该做什么
- en: 'The Big Picture: What You Know'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局视角：你知道的
- en: Man, what a story. What intrigue! What suspense! It was so astounding, I barely
    talked at all toward the end there. You probably noticed that. I pop in and out
    a lot.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，这真是个故事。多么扣人心弦！多么悬疑！真是太令人震撼了，我在快结束时几乎都没怎么说话。你大概注意到了吧。我经常进进出出。
- en: It may seem like we haven’t come all that far, but if you remember back to when
    you first picked up this book, you didn’t know anything about Ruby at all. You’d
    probably never heard of Senior Apprentices to Royal Plumbers, Hasheries, or Dagrons,
    let alone strings, object IDs, or methods. Now you know about all those things
    and more!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们好像没有走得太远，但如果你回想一下当初刚开始读这本书的时候，你对 Ruby 完全一无所知。你可能从未听说过“皇家管道工的高级学徒”、“哈舍里”或“达格龙”，更不用说字符串、对象
    ID 或方法了。现在，你已经了解了这些内容，甚至更多！
- en: We’ve covered so much, I feel it’s only right to do one last quick review. For
    my own sake. Just to keep everything straight in my scattered mind. Don’t worry—it’ll
    be real quick; if you need a more in-depth refresher, thumb back to the earlier
    chapters and reread the [You Know This!](../Text/ch13.html#you_know_thisexclamation_mark-id00013
    "You Know This!") sections (because you totally do, even if you don’t always remember
    every last detail).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学了这么多，我觉得有必要做一个最后的快速回顾。为了我自己。只是为了整理一下我这个凌乱的大脑。别担心—这会很快；如果你需要更深入的复习，可以翻回前面的章节，重新阅读[你知道这些！](../Text/ch13.html#you_know_thisexclamation_mark-id00013
    "你知道这些！")部分（因为你完全知道，尽管你不总是记得每一个细节）。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160081.png.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160081.png.jpg)'
- en: We started out by learning how to install and set up Ruby. No small feat! We
    got Ruby up and running on our computer, learned how to run snippets of Ruby code
    with IRB, and discovered how to write files, called *scripts*, that let us collect
    a bunch of lines of code and run them all at once.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从学习如何安装和设置 Ruby 开始。可不是一件小事！我们成功地将 Ruby 安装并运行在我们的电脑上，学会了如何通过 IRB 运行 Ruby 代码片段，并且发现了如何编写文件，叫做*脚本*，让我们能够将一堆代码行收集在一起，一次性运行它们。
- en: Once we figured out how to run code, the next step involved writing something
    that was interesting to run. Remember back when you only knew how to print strings
    and add numbers? When the thrill of programming was all about `puts`ing phrases
    and multiplying things together? Those were the days! But once you start learning
    to write stories that you can make happen in real life—that is, programs—you want
    to write bigger and better ones as quickly as you can. So we moved on to control
    flow (using `if`, `elsif`, `else`, and `unless`) and Booleans (`true` and `false`),
    and in no time flat, we were controlling the way information moved through our
    programs, repairing the Mysterious Pipe, and guiding Haldo through an underground
    maze.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们弄清楚了如何运行代码，接下来的步骤就是编写一些有趣的东西来运行。还记得当你只会打印字符串和加数字的时候吗？那时候编程的乐趣就是在`puts`中输出短语，或者把东西相乘？那时候的日子真好！但一旦你开始学会编写可以在现实中发生的故事——也就是程序——你就会迫不及待地想写出更大更好的程序。所以我们继续学习了控制流程（使用`if`、`elsif`、`else`和`unless`）和布尔值（`true`和`false`），没多久，我们就能控制信息在程序中的流动，修复神秘的管道，并引导哈尔多穿过地下迷宫。
- en: 'Then we were really off to the races! We started talking about Ruby loops and
    iterators, using methods like `each` to print out all the values in an array (which
    is like a list of items: `[1, 2, 3]`), update a hash (which is like a short dictionary
    of items and values: `{ name: Lou, fancy: true }`), and help Hank and Squeaky
    Jim fix the Hashery computer. We learned about ranges, which are just a series
    of numbers or letters (like `(0..5)` or `(''a''..''z'')`), and symbols, which
    are simply names or labels we use in Ruby. For instance, we saw them used as hash
    keys, as in `{ hamburgers: ''delicious'' }`.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '然后我们真的是进入正题了！我们开始讨论 Ruby 循环和迭代器，使用 `each` 等方法打印数组中的所有值（数组就像一个物品列表：[1, 2, 3]），更新哈希（哈希就像一个包含项和值的简短字典：`{
    name: Lou, fancy: true }`），并帮助汉克和吱吱吉姆修复哈舍里计算机。我们学习了范围，它只是一系列数字或字母（例如 `(0..5)`
    或 `(''a''..''z'')`），以及符号，它们是我们在 Ruby 中使用的名字或标签。例如，我们看到它们作为哈希的键被使用，像 `{ hamburgers:
    ''delicious'' }`。'
- en: That’s when things started getting interesting! Scarlet found a python scale
    on the Hashery floor, leading the group on a voyage to the Carmine Pines. We met
    the Off-White Knight, who showed us how to create our very own methods using the
    `def` keyword. We also saw how to do all kinds of fancy method tricks, like setting
    default arguments, using splat parameters, and writing methods that can take blocks
    by using the `yield` keyword.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这时，事情开始变得有趣了！Scarlet在Hashery楼层发现了一个Python的音阶，带领我们前往Carmine Pines。在那里，我们遇见了Off-White
    Knight，他向我们展示了如何使用`def`关键字创建我们自己的方法。我们还看到了如何进行各种高级方法操作，比如设置默认参数、使用splat参数，并通过`yield`关键字编写可以接收代码块的方法。
- en: We went on to meet the Dagron, who explained Ruby objects and classes (which
    are just objects that create other objects). We learned about where in a program
    our variables could be seen and used, covering global, class, instance, and local
    variables. We even learned about a special Ruby value, `self`, that refers to
    the current object! As we dove deeper into Ruby class syntax, we covered `attr_reader`,
    `attr_writer`, and `attr_accessor`, which are shortcuts we can use so we don’t
    have to write methods to get and set instance variables every time we want to
    update them from outside our class.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续去见了Dagron，他解释了Ruby中的对象和类（类实际上就是创建其他对象的对象）。我们学习了程序中变量的作用域，包括全局变量、类变量、实例变量和局部变量。我们甚至了解了一个特殊的Ruby值——`self`，它指代当前对象！当我们深入学习Ruby类的语法时，我们了解了`attr_reader`、`attr_writer`和`attr_accessor`，这些是我们可以使用的快捷方式，让我们无需每次都编写方法来获取和设置实例变量，便可以从类外部更新它们。
- en: We also discovered (courtesy of the Queen) that some classes can *inherit* from
    others—that is, they take on some of the properties and abilities of other classes—and
    that classes can let us reuse code through inheritance. We saw that classes that
    inherit from other classes can *override* methods from their superclass—for example,
    a `GuardDog` that inherits from `Dog` can have its own version of a `bark` method
    that does something different from what `Dog`’s `bark` method does—and that we
    can always “reach up” to the superclass and call one of its methods using `super`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还发现（在女王的帮助下）一些类可以*继承*其他类——也就是说，它们可以获得其他类的一些属性和能力——并且类允许我们通过继承来重用代码。我们看到，从其他类继承的类可以*重写*父类的方法——例如，一个继承自`Dog`类的`GuardDog`可以有自己的`bark`方法版本，执行与`Dog`的`bark`方法不同的操作——而且我们始终可以“向上”调用父类的方法，使用`super`关键字。
- en: The Queen also taught us about *modules*, which are just like Ruby classes except
    we don’t create instances of them! They’re for mixing in behavior by using `include`
    or `extend`, which allow us to reuse code from lots of sources while still using
    only one superclass. Modules are also for *namespacing*, or organizing our code
    so that we don’t have to cram all of it into one file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 女王还教会了我们关于*模块*的知识，模块就像Ruby类一样，只不过我们不会创建它们的实例！它们用于通过`include`或`extend`来混入行为，这让我们能够从多个来源复用代码，同时仍然只使用一个父类。模块还用于*命名空间*，或者组织我们的代码，使得我们不必将所有代码都塞进一个文件里。
- en: By using modules, we can easily control where all our variables, constants,
    and methods are available in our Ruby programs, and we can create classes with
    one superclass that inherit behavior from a whole range of sources.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用模块，我们可以轻松地控制在Ruby程序中所有变量、常量和方法的可用范围，并且可以创建具有一个父类的类，继承来自多个来源的行为。
- en: Then we voyaged on to the Refactory, where we learned how to rewrite our code
    to make it clearer without changing the way it behaves. We saw a bunch of cool
    tricks for improving our Ruby, including breaking up big methods into smaller
    ones and removing duplicate code so that each method did one thing and did it
    well. We also learned about file input/output at the Refactory, including how
    to open, read, and write files with Ruby.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们来到了Refactory，学习了如何重写代码，使其更加清晰，而不改变其行为。我们看到了一些提升Ruby代码的技巧，包括将大方法拆分成小方法，并去除重复代码，使每个方法只做一件事且做得很好。我们还在Refactory学习了文件的输入/输出，包括如何用Ruby打开、读取和写入文件。
- en: Finally, we covered Ruby and the Internet, learning about Ruby gems, and web
    servers like WEBrick, and useful websites like the RubyGems site and GitHub. We
    saw the King, the Queen, Scarlet, and Ruben use their Ruby knowledge to catch
    the pythons and ultimately show them that Ruby and Python are both excellent programming
    languages, and you used your Ruby knowledge to arrive here, at the end of this
    book, chockfull of wisdom. I couldn’t be prouder! That’s the honest-to-gravy truth.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了 Ruby 和互联网，学习了 Ruby gems、像 WEBrick 这样的 web 服务器，以及像 RubyGems 网站和 GitHub
    这样的有用网站。我们看到了国王、王后、Scarlet 和 Ruben 如何运用他们的 Ruby 知识抓住 Python，并最终向它们展示 Ruby 和 Python
    都是优秀的编程语言，而你通过 Ruby 知识走到了这里，结束了本书，充满了智慧。我为此感到无比自豪！这就是诚实的真相。
- en: Additional Resources and Further Reading
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外资源与进一步阅读
- en: While there’s a lot of Ruby magic in these pages, we didn’t cover *everything*
    there is to know about Ruby. There is a huge number of amazing books and websites
    that will help you learn even more about Ruby and programming, and I’ve listed
    a bunch here! Don’t feel pressured to read all (or any) of these books or sites—they’re
    just new places to keep learning Ruby now that you’ve finished this book.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些页面中包含了大量 Ruby 魔法，但我们并没有涵盖 *Ruby 所有的知识*。有大量惊人的书籍和网站可以帮助你进一步学习 Ruby 和编程，我在这里列出了一些！不要觉得必须阅读所有（或任何）这些书籍或网站——它们只是你在完成本书后，继续学习
    Ruby 的新途径。
- en: Beginner Books
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初学者书籍
- en: These books are great for beginners.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些书非常适合初学者。
- en: '***Beginning Ruby, 2nd Edition,*** by Peter Cooper (Apress, 2009). This is
    just what it sounds like! A fantastic introduction to Ruby.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '***《Ruby 入门（第二版）》*** 作者：Peter Cooper（Apress，2009年）。这本书听起来就是这个意思！一本出色的 Ruby
    入门书籍。'
- en: '***Programming Ruby, 4th Edition,*** by Dave Thomas, Andy Hunt, and Chad Fowler
    (The Pragmatic Bookshelf, 2013). This is sometimes called the “pickaxe book,”
    because it has a huge picture of a pickaxe on the cover. Lots of Ruby programmers
    say this is their go-to Ruby book, and I can promise there’s not a single question
    about Ruby you might have that isn’t covered in here.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '***《Ruby 编程（第四版）》*** 作者：Dave Thomas、Andy Hunt 和 Chad Fowler（The Pragmatic Bookshelf，2013年）。这本书有时被称为“鹤嘴锄书”，因为封面上有一张巨大的鹤嘴锄图像。许多
    Ruby 程序员说这是他们的 Ruby 必备书籍，我可以保证，在这里你不会有任何一个 Ruby 问题没有答案。'
- en: '***The Ruby Programming Language*** by David Flanagan and Yukihiro Matsumoto
    (O’Reilly Media, 2008). Yukihiro “Matz” Matsumoto is the creator of the Ruby language,
    so he’s got lots of great insights into what Ruby can do and what makes it great.
    This is another awesome introductory Ruby book.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '***《Ruby 编程语言》*** 作者：David Flanagan 和 Yukihiro Matsumoto（O’Reilly Media，2008年）。Yukihiro
    “Matz” Matsumoto 是 Ruby 语言的创始人，所以他对 Ruby 能做什么以及它的伟大之处有着许多宝贵的见解。这是另一本非常棒的 Ruby
    入门书籍。'
- en: '***Why’s (Poignant) Guide to Ruby*** by why the lucky stiff (*[http://en.wikipedia.org/wiki/Why’s_(poignant)_Guide_to_Ruby](http://en.wikipedia.org/wiki/Why%E2%80%99s_(poignant)_Guide_to_Ruby)*).
    This is the Ruby book I first learned from, and if you read it carefully, you’ll
    see I snuck a few of why’s tricks and jokes into this very book. why’s guide is
    a magical, manic, illustrated guide to Ruby. When you’re done with this book,
    pick up that one! I promise you’ll be glad you did.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '***Why’s (Poignant) Guide to Ruby*** 作者：why the lucky stiff（*[http://en.wikipedia.org/wiki/Why’s_(poignant)_Guide_to_Ruby](http://en.wikipedia.org/wiki/Why%E2%80%99s_(poignant)_Guide_to_Ruby)*）。这是我第一次学习
    Ruby 时阅读的书，如果你仔细阅读，你会发现我偷偷把 why 的一些技巧和笑话融入到了这本书中。why 的指南是一本充满魔力、疯狂、图文并茂的 Ruby
    入门书。当你读完这本书后，拿起那本！我保证你会很高兴你这么做了。'
- en: Intermediate Books
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中级书籍
- en: These books are a bit more advanced.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些书籍有些内容更为深入。
- en: '***Design Patterns in Ruby*** by Russ Olsen (Addison-Wesley Professional, 2007).
    This book is about good patterns for writing your Ruby code. You’ll learn from
    the pros!'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '***《Ruby 设计模式》*** 作者：Russ Olsen（Addison-Wesley Professional，2007年）。本书讲解了编写
    Ruby 代码的优秀设计模式。你将从专业人士那里学到技巧！'
- en: '***Eloquent Ruby*** by Russ Olsen (Addison-Wesley Professional, 2011). Want
    to learn to write code like a native Rubyist? Read this book!'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '***《优雅的 Ruby》*** 作者：Russ Olsen（Addison-Wesley Professional，2011年）。想学习像本地 Ruby
    程序员那样编写代码吗？阅读这本书！'
- en: '***The Well-Grounded Rubyist*** by David Black (Manning Publications, 2009).
    Imagine a book just like this one, only with fewer magical creatures and more
    stuff about fancy Ruby topics like threads and error handling. All imagined? Congratulations!
    You’ve imagined *The Well-Grounded Rubyist*. (Imagine that!)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '***《扎实的 Ruby 程序员》*** 作者：David Black（Manning Publications，2009年）。想象一本像这样书的书，少一些魔法生物，多一些关于高级
    Ruby 话题的内容，比如线程和错误处理。想象好了吗？恭喜！你已经想象到了 *《扎实的 Ruby 程序员》*。（想象一下吧！）'
- en: '***Wicked Cool Ruby Scripts*** by Steve Pugh (No Starch Press, 2008). If you’re
    looking for a fanciful cookbook, a veritable cornucopia of Ruby script recipes
    for everything from games to web servers, pluck this book off your nearest store
    shelf (or ask your folks to order it off the Internet).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '***酷炫的 Ruby 脚本*** 由 Steve Pugh 编写（No Starch Press，2008年）。如果你在寻找一本有趣的食谱书，一本包含从游戏到
    Web 服务器的各种 Ruby 脚本的真正大餐，那就把这本书从最近的书店架子上拿走（或者请你的父母从网上订购）。'
- en: Advanced Books
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级书籍
- en: These books are the most complex of all!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些书籍是所有书中最为复杂的！
- en: '***Metaprogramming Ruby 2*** by Paolo Perrotta (The Pragmatic Bookshelf, 2014).
    This book explores the deep, dark secrets of how Ruby can read its own code and
    change it while it runs! Not for the faint of heart.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '***元编程 Ruby 2*** 由 Paolo Perrotta 编写（The Pragmatic Bookshelf，2014年）。这本书探索了
    Ruby 如何读取并在运行时改变其自身代码的深奥秘密！不适合心脏脆弱的人。'
- en: '***Practical Object-Oriented Design in Ruby*** by Sandi Metz (Addison-Wesley
    Professional, 2012). If you want to write Ruby like a pro, you can’t do better
    than this book. Your objects will sparkle and your classes will gleam when you’re
    done!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '***实用的面向对象设计在 Ruby 中*** 由 Sandi Metz 编写（Addison-Wesley Professional，2012年）。如果你想像专家一样编写
    Ruby 代码，这本书无疑是最佳选择。完成后，你的对象将闪闪发光，类将熠熠生辉！'
- en: '***Ruby Under a Microscope*** by Pat Shaughnessy (No Starch Press, 2013). This
    book goes straight to the core of what makes Ruby . . . well, Ruby! It covers
    all the details of how all those little bits and bytes, zeros and ones, turn into
    Ruby code. If you read this book and understand every bit of it, please call me
    up and explain it.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '***Ruby 在显微镜下*** 由 Pat Shaughnessy 编写（No Starch Press，2013年）。这本书直击 Ruby 的核心，探讨了所有那些零与一、比特与字节是如何转化为
    Ruby 代码的。如果你读完这本书并完全理解其中的每个细节，请打电话给我并向我解释一下。'
- en: Online and Multimedia
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在线与多媒体
- en: Railscasts
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Railscasts
- en: (*[http://railscasts.com/](http://railscasts.com/)*)
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: (*[http://railscasts.com/](http://railscasts.com/)*)
- en: Ruby on Rails is a popular framework, or set of tools, that Ruby programmers
    use to make web applications. These screencasts by Ryan Bates show you how Ruby
    code powers Rails applications, and Ryan’s instructions make it easy to follow
    along at home. As with Ruby Tapas, not all these screencasts are free, so you’ll
    need your local adult’s help to sign up if you want to be able to watch them all.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby on Rails 是一个流行的框架，或者说是 Ruby 程序员用来创建 Web 应用程序的一套工具。Ryan Bates 的这些录屏演示展示了
    Ruby 代码如何驱动 Rails 应用程序，而 Ryan 的讲解使得你在家也能轻松跟随学习。与 Ruby Tapas 类似，并非所有这些录屏都免费，所以如果你想观看全部内容，你可能需要得到身边成年人的帮助来注册。
- en: Ruby5 podcast
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby5 播客
- en: (*[http://ruby5.envylabs.com/](http://ruby5.envylabs.com/)*)
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: (*[http://ruby5.envylabs.com/](http://ruby5.envylabs.com/)*)
- en: This is more Ruby news, but in podcast form! If you like listening more than
    reading, this one’s for you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更多关于 Ruby 的新闻，但以播客形式呈现！如果你更喜欢听而不是读，这个适合你。
- en: Ruby Rogues
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby Rogues
- en: (*[http://rubyrogues.com/](http://rubyrogues.com/)*)
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: (*[http://rubyrogues.com/](http://rubyrogues.com/)*)
- en: This is another podcast, though I think this one is more like listening to blog
    posts than it is like listening to the news. If you’re interested in hearing more
    about the ins and outs of Ruby, its gems, and its tools, give the Ruby Rogues
    a listen.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个播客，尽管我认为它更像是在听博客文章，而不像听新闻。如果你有兴趣了解更多关于 Ruby 的方方面面、其宝石和工具，听一听 Ruby Rogues
    吧。
- en: Ruby Tapas
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby Tapas
- en: (*[http://www.rubytapas.com/](http://www.rubytapas.com/)*)
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: (*[http://www.rubytapas.com/](http://www.rubytapas.com/)*)
- en: For those of you who like to watch videos instead of read or listen, these screencasts
    by Avdi Grimm give you short introductions to different parts of Ruby that you
    might not know about. Only a few of the screencasts are free, though, so if you
    want to watch them all, you’ll need your local adult’s help.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些喜欢看视频而非阅读或听的朋友，Avdi Grimm 的这些录屏短片为你介绍了 Ruby 的不同部分，这些部分你可能还不了解。不过，只有少部分录屏是免费的，因此如果你想看完整的内容，你需要得到身边成年人的帮助。
- en: Ruby Weekly
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby Weekly
- en: (*[http://rubyweekly.com/](http://rubyweekly.com/)*)
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: (*[http://rubyweekly.com/](http://rubyweekly.com/)*)
- en: Curated by the very same Peter Cooper who wrote *Beginning Ruby*, this once-a-week
    email is packed with helpful Ruby articles, tutorials, and videos. It’s pretty
    advanced stuff, but after you’ve been writing Ruby for a while, it’ll be the first
    place you look for Ruby news.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由同样编写了 *Ruby 入门* 的 Peter Cooper 精心策划的每周一次电子邮件，里面充满了有用的 Ruby 文章、教程和视频。这些内容相当进阶，但在你开始写
    Ruby 一段时间后，这将是你寻找 Ruby 新闻的第一个地方。
- en: Interactive Resources
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互动资源
- en: Codecademy
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Codecademy
- en: (*[http://www.codecademy.com/tracks/ruby/](http://www.codecademy.com/tracks/ruby/)*)
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: (*[http://www.codecademy.com/tracks/ruby/](http://www.codecademy.com/tracks/ruby/)*)
- en: 'If you ever want to practice running Ruby in the comfort of your own web browser,
    you can do the Ruby lessons over at Codecademy. Fun fact: I wrote all these courses,
    so they should seem pretty familiar! The only downside is that they cover a lot
    of the same information you’ve learned here, so they might be a little *too* familiar.
    If you want to practice writing code and reviewing what you’ve learned, though,
    head on over and start typing—it’s free! (You must be 13 or older to create an
    account.)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在自己舒适的网页浏览器中练习运行 Ruby，可以去 Codecademy 完成 Ruby 课程。有个有趣的事实：这些课程都是我写的，所以应该会感觉很熟悉！唯一的缺点是，它们涵盖了你在这里已经学过的很多内容，因此可能会显得有点*过于熟悉*。不过，如果你想练习编写代码并复习你学过的内容，可以去那里开始敲代码——而且它是免费的！（你必须年满13岁才能创建账户。）
- en: Code School
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Code School
- en: (*[https://www.codeschool.com/paths/ruby/](https://www.codeschool.com/paths/ruby/)*)
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: (*[https://www.codeschool.com/paths/ruby/](https://www.codeschool.com/paths/ruby/)*)
- en: Code School is another great website for learning Ruby. Like Codecademy, it
    requires that you be 13 or older to create an account, and unlike Codecademy,
    it isn’t free. It’s got lots of good videos, though, so if you learn best by watching
    someone else work, this might be the site for you.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Code School 是另一个学习 Ruby 的好网站。像 Codecademy 一样，它要求你年满 13 岁才能创建账户，不同的是，它并不是免费的。不过它有很多优秀的视频，如果你通过观看别人操作来学习最有效，那这个网站可能很适合你。
- en: Ruby Koans
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ruby Koans
- en: (*[http://rubykoans.com/](http://rubykoans.com/)*)
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: (*[http://rubykoans.com/](http://rubykoans.com/)*)
- en: Imagine if you took all the knowledge of this book and divided it up into a
    bajillion wise little sayings in the form of Ruby programs. Those are the Ruby
    koans! If you’re looking for more practice and love to learn by doing, go ahead
    and download the koans and start programming. They also do a great job of teaching
    you about testing, since each koan is like a failing test that you have to fix
    to get it to pass; the more lines of code you repair, the greater your Ruby enlightenment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果你将本书中的所有知识分成一亿个小而智慧的格言，这些格言的形式是 Ruby 程序。那些就是 Ruby koans！如果你需要更多的练习，并且喜欢通过实践来学习，赶紧下载这些
    koans 开始编程吧。它们还非常擅长教你如何进行测试，因为每个 koan 都像是一个失败的测试，你需要修复它才能通过；你修复的代码行越多，你的 Ruby
    启蒙就越深。
- en: Ruby Monk
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ruby Monk
- en: (*[https://rubymonk.com/](https://rubymonk.com/)*)
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: (*[https://rubymonk.com/](https://rubymonk.com/)*)
- en: This is sort of like a mix between Codecademy’s courses and the Ruby Koans.
    The more exercises you complete, the further along the path to Ruby mastery you’ll
    progress!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点像 Codecademy 的课程和 Ruby Koans 的结合。你完成的练习越多，掌握 Ruby 的进度就越远！
- en: Additional Topics
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外主题
- en: We talked about tons and tons of Ruby goodness, but there are a few bits and
    trinkets of the language we didn’t get to—mostly because they’re not quite as
    much fun as what we covered, plus these topics are a bit on the trickier side.
    If you’re curious and want to learn more about them, though, I’ve dashed off a
    quick list here.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了大量的 Ruby 知识，但也有一些语言特性我们没来得及涉及——主要是因为它们不像我们讨论的内容那样有趣，而且这些话题相对有点复杂。不过，如果你感兴趣并想了解更多，我在这里列出了一个简短的清单。
- en: The `Enumerable` module
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Enumerable` 模块'
- en: 'You might have wondered during our adventures how both arrays *and* hashes
    know how to use the `each` method. It’s because they both mix in the `Enumerable`
    module, which you can use directly in your own classes to simplify your code!
    It includes all kinds of handy methods like `all?`, `any?`, `include?`, and `find`.
    You can read all about it in the official docs: *[http://ruby-doc.org/core-2.0.0/Enumerable.html](http://ruby-doc.org/core-2.0.0/Enumerable.html)*.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在我们的学习过程中好奇，为什么数组*和*哈希都知道如何使用 `each` 方法。这是因为它们都包含了 `Enumerable` 模块，你也可以在自己的类中直接使用这个模块来简化代码！它包含了很多实用的方法，比如
    `all?`、`any?`、`include?` 和 `find`。你可以在官方文档中阅读所有相关内容：*[http://ruby-doc.org/core-2.0.0/Enumerable.html](http://ruby-doc.org/core-2.0.0/Enumerable.html)*。
- en: Regular expressions
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正则表达式
- en: Regular expressions are like a mini-language inside Ruby that lets you match
    patterns in words or phrases. For example, you could use them to find strings
    that contain only uppercase letters or check whether a string is a valid email
    address. Regular expressions exist in many languages, but you can find some Ruby-specific
    information at *[http://www.regular-expressions.info/ruby.html](http://www.regular-expressions.info/ruby.html)*.
    You can also use a free tool called Rubular at *[http://rubular.com/](http://rubular.com/)*.
    Rubular lets you test out your regular expressions in real time, so you can see
    what your patterns match and what they don’t.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式就像 Ruby 内部的一个迷你语言，它让你能够匹配单词或短语中的模式。例如，你可以用它们查找只包含大写字母的字符串，或者检查一个字符串是否是有效的电子邮件地址。正则表达式在许多编程语言中都有，但你可以在
    *[http://www.regular-expressions.info/ruby.html](http://www.regular-expressions.info/ruby.html)*
    找到一些 Ruby 特定的信息。你还可以使用一个名为 Rubular 的免费工具，访问 *[http://rubular.com/](http://rubular.com/)*。Rubular
    让你可以实时测试你的正则表达式，这样你可以看到你的模式匹配了什么，没匹配到什么。
- en: Procs and lambdas
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Procs 和 Lambdas
- en: These are not quite blocks and they’re not quite methods—they’re somewhere in
    between! You can think of them either as methods without names or as “saved” blocks
    you can run over and over. You can learn more about them in the Ruby Monk exercises
    (see [Interactive Resources](../Text/ch14.html#interactive_resources "Interactive
    Resources")).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不完全是块，也不完全是方法——它们介于两者之间！你可以将它们看作是没有名称的方法，或者看作是可以反复执行的“保存”块。你可以在 Ruby Monk
    练习中了解更多关于它们的信息（请参见 [交互式资源](../Text/ch14.html#interactive_resources "Interactive
    Resources")）。
- en: Information hiding
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息隐藏
- en: 'You can keep information in your Ruby classes more secure by using the `private`
    and `protected` methods. These come in handy when you’re writing Ruby as part
    of a group or team, and while they don’t completely prevent other programmers
    from using methods they shouldn’t, they can help your teammates understand which
    methods they can rely on and which ones are still “under construction.” You can
    read more about the `public` and `protected` methods in the Ruby docs: *[http://www.ruby-doc.org/core-2.0.0/Module.html#method-i-private](http://www.ruby-doc.org/core-2.0.0/Module.html#method-i-private)*.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `private` 和 `protected` 方法，使你的 Ruby 类中的信息更安全。这在你作为团队的一部分编写 Ruby 代码时非常有用，尽管它们不能完全阻止其他程序员使用不应该使用的方法，但它们可以帮助你的队友理解哪些方法是可以依赖的，哪些方法仍在“开发中”。你可以在
    Ruby 文档中阅读更多关于 `public` 和 `protected` 方法的内容： *[http://www.ruby-doc.org/core-2.0.0/Module.html#method-i-private](http://www.ruby-doc.org/core-2.0.0/Module.html#method-i-private)*。
- en: Handling exceptions
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理异常
- en: Every now and then, we saw our Ruby code throw an error. Usually I explained
    why it happened and we went on our merry way, but if you think about it, that’s
    not always the best way to do things. Sometimes when an error (also called an
    *exception*) happens, we want to do something about it, like set a default value
    or print a message to the screen. Handling exceptions in Ruby is called—you guessed
    it—*exception handling*, and if you want to learn more about it, you can read
    Avdi Grimm’s *Exceptional Ruby* (*[http://exceptionalruby.com/](http://exceptionalruby.com/)*).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们看到 Ruby 代码抛出错误时，通常我会解释为什么会发生错误，然后我们继续前进，但如果仔细想想，这并不总是最好的处理方式。有时候，当发生错误（也叫做*异常*）时，我们希望做些什么来处理它，比如设置一个默认值或打印一条消息到屏幕上。Ruby
    中的异常处理称为——你猜对了——*异常处理*，如果你想了解更多关于它的信息，可以阅读 Avdi Grimm 的《*Exceptional Ruby*》 (*[http://exceptionalruby.com/](http://exceptionalruby.com/)*).
- en: Reflection/metaprogramming
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反射/元编程
- en: Remember when we talked about file I/O, we saw it was possible to write Ruby
    code that writes Ruby code? This means that Ruby has the ability to look at its
    own code and change it! The inward-looking part is called *reflection*, and the
    ability for Ruby to change its own programming is called *metaprogramming*. This
    is some of the hardest Ruby code to write, but if you’re feeling up to it, you
    can learn all about it from Paolo Perrotta’s book *Metaprogramming Ruby*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们之前讨论文件输入输出时，我们看到可以编写 Ruby 代码来写 Ruby 代码吗？这意味着 Ruby 有能力查看并修改自己的代码！这种内省的部分称为*反射*，而
    Ruby 改变自己编程能力的过程称为*元编程*。这是一种非常难写的 Ruby 代码，但如果你有兴趣，你可以通过 Paolo Perrotta 的《*Metaprogramming
    Ruby*》一书深入了解它。
- en: Debugging
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试
- en: We talked a little bit about fixing errors in our code, but we didn’t talk about
    writing tests for it or *debugging* (that is, fixing) it in a systematic way.
    Writing tests to prove your code is correct and becoming good at debugging it
    are very important skills for any programmer to have. If you’re interested in
    learning more about both, you can read about the built-in Ruby testing library,
    MiniTest, in the Ruby documentation at *[http://ruby-doc.org/stdlib-1.9.3/libdoc/minitest/spec/rdoc/MiniTest/Spec.html](http://ruby-doc.org/stdlib-1.9.3/libdoc/minitest/spec/rdoc/MiniTest/Spec.html)*.
    If you’re feeling particularly adventurous, you can read about my favorite testing
    library, RSpec, at *[http://rspec.info/](http://rspec.info/)*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈了一点修复代码中的错误，但我们没有谈论如何为其编写测试，或者*调试*（即修复）它的系统化方法。编写测试以证明你的代码是正确的，并且成为一个擅长调试的程序员，这些都是任何程序员必备的重要技能。如果你有兴趣了解更多，你可以阅读
    Ruby 文档中关于内置 Ruby 测试库 MiniTest 的内容，网址是 *[http://ruby-doc.org/stdlib-1.9.3/libdoc/minitest/spec/rdoc/MiniTest/Spec.html](http://ruby-doc.org/stdlib-1.9.3/libdoc/minitest/spec/rdoc/MiniTest/Spec.html)*。如果你感到特别冒险，你还可以阅读我最喜欢的测试库
    RSpec，网址是 *[http://rspec.info/](http://rspec.info/)*。
- en: Threads and processes
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线程与进程
- en: 'In all our Ruby programs, we really only did one thing at time: we’d set a
    variable and then use it, or maybe we’d iterate over an array and print each item
    to the screen. We never really did two things at *exactly* the same time. With
    Ruby threads and processes, it’s possible to do two things at once! As you might
    imagine, juggling multiple things at once is many times harder than handling just
    one process at a time, so learning to use Ruby threads and processes takes some
    practice. If you want to learn more, you can read Jesse Storimer’s *Working with
    Ruby Threads* (*[http://www.jstorimer.com/products/working-with-ruby-threads/](http://www.jstorimer.com/products/working-with-ruby-threads/)*).
    Careful—this one’s really advanced!'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们所有的 Ruby 程序中，我们实际上只做了一件事：我们设置一个变量然后使用它，或者我们可能会遍历一个数组并将每个项打印到屏幕上。我们从来没有真正做到过*完全*同时做两件事。使用
    Ruby 线程和进程时，实际上可以同时做两件事！正如你可能想象的那样，同时处理多个任务比每次只处理一个进程要困难得多，因此学习如何使用 Ruby 线程和进程需要一些实践。如果你想了解更多，你可以阅读
    Jesse Storimer 的*《与 Ruby 线程一起工作》*（* [http://www.jstorimer.com/products/working-with-ruby-threads/](http://www.jstorimer.com/products/working-with-ruby-threads/)
    *）。小心——这本书真的很高级！
- en: Creating websites
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建网站
- en: Finally, while we did talk about Ruby web servers like WEBrick, we didn’t talk
    much about creating entire websites with Ruby. You may have heard of Ruby on Rails
    (I mentioned it when describing Railscasts in [Online and Multimedia](../Text/ch14.html#online_and_multimedia
    "Online and Multimedia")), which is a big library of code made up of many gems
    that helps make writing websites with Ruby easier. It’s a good way to build websites
    and very popular, but sometimes newer Ruby programmers have trouble understanding
    all the things it does and decisions that went into making it. If you want to
    make websites with Ruby, you might want to start with a smaller, simpler program
    (and one of my favorites) called *Sinatra*. You can find it online at *[http://www.sinatrarb.com/](http://www.sinatrarb.com/)*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，虽然我们讨论过 Ruby 的 Web 服务器，如 WEBrick，但我们并没有深入讨论如何用 Ruby 创建整个网站。你可能听说过 Ruby on
    Rails（我在描述 Railscasts 时提到过它，在 [在线与多媒体](../Text/ch14.html#online_and_multimedia
    "在线与多媒体") 一章），它是一个由许多 gem 组成的大型代码库，帮助简化用 Ruby 编写网站的过程。它是构建网站的一种好方式，且非常流行，但有时较新的
    Ruby 程序员会难以理解它做了哪些事情以及它的设计决策。如果你想用 Ruby 来创建网站，你可能想从一个较小、较简单的程序开始（而且是我最喜欢的之一），它叫做*Sinatra*。你可以在网上找到它，网址是
    *[http://www.sinatrarb.com/](http://www.sinatrarb.com/)*。
- en: 'I admit it: I’ve been dragging my feet. I don’t want the book to end! But alas,
    I’ve dispensed all my Ruby wisdom. Now you know everything I know, plus you’ve
    got all the smarts and experience of the King, the Queen, Ruben, Scarlet, and
    all of their friends combined. I knew you could do it! I believed in you from
    the start. So even if the book has to end, at least it ends with me being right!'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我承认：我一直在拖延。我不想让这本书结束！但可惜的是，我已经把所有 Ruby 的智慧都传授给你了。现在你知道我所知道的一切，而且你还拥有国王、女王、Ruben、Scarlet
    和他们所有朋友们的聪明才智与经验。我知道你能做到！从一开始我就相信你。所以即使书必须结束，至少它以我正确的结尾！
- en: 'When you close this book, I want you to do one thing: fire up your own personal
    Computing Contraption and write yourself a Ruby program. It can do anything you
    want, big or small, silly or serious. Don’t worry if it breaks! The only way we
    learn is by writing programs and breaking them and fixing them and making them
    better, so it’s perfectly okay if your program breaks or doesn’t do what you want
    at first. You’re writing stories and poems for a machine, and the biggest part
    of the adventure isn’t having a finished, perfectly working program—it’s all the
    crazy things that happen along the way.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当你合上这本书时，我希望你做一件事：启动你自己的个人计算机设备，编写一个 Ruby 程序。它可以做任何你想做的事情，无论是大是小，无论是愚蠢还是严肃。别担心它会坏掉！我们学习的唯一方法就是编写程序、破坏它们、修复它们并使它们更好，所以如果你的程序坏掉或最初没有按预期工作，也完全没问题。你是在为机器编写故事和诗歌，冒险的最大部分并不是拥有一个完成并完美运行的程序，而是沿途发生的所有疯狂事物。
- en: So go! Go write the best program you can, and have *fun*. I’ll be seeing you.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，去吧！去写你能写出的最棒程序，享受*乐趣*吧。我会再见的。
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160083.png.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](../Images/httpatomoreillycomsourcenostarchimages2160083.png.jpg)'
- en: Appendix A. Installing Ruby on Mac and Linux
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. 在 Mac 和 Linux 上安装 Ruby
- en: Installing on Mac
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac 上安装
- en: New Macs ship with Ruby 2.0 already installed, so if you’re here, you’re likely
    using an older Mac that has Ruby 1.8.7\. Not to worry! We’ll get you upgraded
    in a jiffy.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 新款 Mac 自带 Ruby 2.0，因此如果你在这里，可能是使用了一个较旧的 Mac，它装的是 Ruby 1.8.7。别担心！我们会很快帮你升级。
- en: Open up your terminal and type the following code. (The `$` just shows you where
    to start typing—don’t type the `$`!) This will install a tool called RVM (Ruby
    Version Manager) as well as Ruby 2.0.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的终端并输入以下代码。（`$` 只是显示你开始输入的位置——不要输入`$`！）这将安装一个名为 RVM（Ruby 版本管理器）的工具以及 Ruby
    2.0。
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once you do this, you’ll see a whole bunch of text pop up to tell you that your
    computer is downloading Ruby. When it’s all done, close your terminal, reopen
    it, and enter **`ruby -v`**. You should see your computer print a response with
    `ruby 2.0.0` in it!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你会看到一大堆文本弹出，告诉你你的计算机正在下载 Ruby。下载完成后，关闭终端，重新打开终端，然后输入**`ruby -v`**。你应该看到计算机输出带有`ruby
    2.0.0`的响应！
- en: 'If your Ruby version still isn’t Ruby 2.0, you can try installing it using
    the Homebrew package manager. First, install Homebrew:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 Ruby 版本仍然不是 Ruby 2.0，你可以尝试使用 Homebrew 包管理器来安装它。首先，安装 Homebrew：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once that command completes successfully, you can simply type this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦命令成功执行完成，你可以直接输入以下内容：
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: At the time of this writing, Homebrew automatically installs Ruby 2.1.3\. This
    is just a slightly newer version than Ruby 2.0, and it will work with the code
    examples in this book.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Homebrew 会自动安装 Ruby 2.1.3。这个版本比 Ruby 2.0 新一点，它将能够与本书中的代码示例兼容。
- en: Installing on Linux
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 上安装
- en: Open up your terminal and type the following code. (The `$` just shows you where
    to start typing—don’t type the `$`!) This will install a tool called RVM (Ruby
    Version Manager) as well as Ruby 2.0.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的终端并输入以下代码。（`$` 只是显示你开始输入的位置——不要输入`$`！）这将安装一个名为 RVM（Ruby 版本管理器）的工具以及 Ruby
    2.0。
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once you do this, you’ll see a whole bunch of text pop up to tell you that your
    computer is downloading Ruby. When it’s all done, close your terminal, reopen
    it, and enter **`ruby -v`**. You should see your computer print a response with
    `ruby 2.0.0` in it!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你会看到一大堆文本弹出，告诉你你的计算机正在下载 Ruby。下载完成后，关闭终端，重新打开终端，然后输入**`ruby -v`**。你应该看到计算机输出带有`ruby
    2.0.0`的响应！
- en: 'If you get an error or your computer tells you that Ruby isn’t installed, grab
    your trusty adult and check out the Ruby installation page at *[https://www.ruby-lang.org/en/installation/](https://www.ruby-lang.org/en/installation/)*.
    There may be a recent package designed especially for your version of Linux, and
    it may be easier to use that package to install Ruby, rather than using RVM. You
    can also ask your adult to go on IRC and get help from the folks in the #ruby
    channel.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你遇到错误或计算机告诉你 Ruby 没有安装，找一个可靠的成年人并查看 Ruby 安装页面 *[https://www.ruby-lang.org/en/installation/](https://www.ruby-lang.org/en/installation/)*。可能有一个专为你版本的
    Linux 设计的最新安装包，使用该安装包安装 Ruby 可能会更加方便，而不是使用 RVM。你也可以请你的成年人去 IRC 上询问 #ruby 频道的朋友们帮助。'
- en: Appendix B. Troubleshooting
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 B. 故障排除
- en: When running your Ruby scripts or using IRB, you may run into some common errors.
    I’ve listed a few of them here, along with tips for fixing them!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Ruby 脚本或使用 IRB 时，你可能会遇到一些常见的错误。我在这里列出了一些错误以及修复它们的小贴士！
- en: Errors Running Ruby Scripts
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Ruby 脚本时出错
- en: 'There are two common errors that you might see when running Ruby scripts from
    the command line: [Command Not Found](../Text/apb.html#command_not_found "Command
    Not Found") and “no such file or directory.” Here are some suggestions for how
    to resolve them.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行运行 Ruby 脚本时，你可能会遇到两种常见的错误： [命令未找到](../Text/apb.html#command_not_found "命令未找到")
    和 “没有此文件或目录”。以下是解决这些问题的一些建议。
- en: Command Not Found
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 找不到命令
- en: 'If you’re running a Ruby script and you get some output that looks like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行一个 Ruby 脚本，并且得到如下输出：
- en: '[PRE4]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: it probably means you accidentally typed a `$` before your `ruby` command. I
    use the `$` symbol to show you that you’re running a Ruby script from the command
    line with a filename (like `ruby my_fancy_script.rb`); you shouldn’t type the
    `$` itself!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这很可能意味着你不小心在 `ruby` 命令前输入了一个 `$`。我使用 `$` 符号来表示你正在从命令行运行 Ruby 脚本，并带有文件名（例如 `ruby
    my_fancy_script.rb`）；你不应该输入 `$` 符号本身！
- en: No Such File or Directory
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 没有此文件或目录
- en: 'If you get an error that looks like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到类似下面的错误：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: it means you tried to run `ruby some_filename.rb`, but that file didn’t exist
    in the folder you’re currently in.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你尝试运行`ruby some_filename.rb`，但是该文件在你当前所在的文件夹中并不存在。
- en: To fix this, first make sure you’re in the folder where you saved your Ruby
    script. You can change from one folder to another using the `cd` command (for
    “change directory”). See [Creating Your First Script](../Text/ch01.html#creating_your_first_script
    "Creating Your First Script") for help using the `cd` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，首先确保你在保存 Ruby 脚本的文件夹中。你可以使用 `cd` 命令（“change directory”）从一个文件夹切换到另一个文件夹。查看
    [创建你的第一个脚本](../Text/ch01.html#creating_your_first_script "创建你的第一个脚本") 获取有关如何使用
    `cd` 命令的帮助。
- en: If you’re in the correct folder and your command still gives you an error, double-check
    the spelling of your file! (I mistype the names of Ruby files all the time.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在正确的文件夹中，且命令仍然给出错误，检查你的文件名拼写！(我经常会打错 Ruby 文件名。)
- en: Errors Using IRB
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IRB 时的错误
- en: There are a few common errors that you might see when using IRB. Here’s how
    to fix them, along with some other handy tips for fixing typos and mistakes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IRB 时，你可能会遇到一些常见错误。下面是如何解决它们的办法，以及修正拼写错误和其他错误的一些实用技巧。
- en: Undefined Local Variable or Method
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未定义的本地变量或方法
- en: 'If you try to call a method in IRB and get something like this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 IRB 中尝试调用一个方法，并且得到类似的错误：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: it means you tried to use a method that Ruby doesn’t know about. When you exit
    and restart IRB, Ruby forgets everything you were previously doing—so if you defined
    a method, exited IRB, and started it again, you’ll need to redefine that method
    to keep using it. (See [Defining Your Own Methods](../Text/ch07.html#defining_your_own_methods
    "Defining Your Own Methods") if you need a refresher on how to define methods.)
    If your method is from a file, make sure you load that file using the command
    `load 'your_file.rb'`, and if all else fails, double-check that you’ve spelled
    your method name correctly.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你尝试使用一个 Ruby 不认识的方法。当你退出并重新启动 IRB 时，Ruby 会忘记你之前的所有操作——所以如果你定义了一个方法，退出 IRB
    后重新启动，你需要重新定义该方法才能继续使用它。（如果你需要复习如何定义方法，请查看 [定义你自己的方法](../Text/ch07.html#defining_your_own_methods
    "定义你自己的方法")。）如果你的方法来自某个文件，请确保使用命令 `load 'your_file.rb'` 加载该文件，如果一切都失败了，再检查一下方法名称的拼写是否正确。
- en: Syntax Error
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法错误
- en: 'If you get an error that looks like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到类似下面的错误：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: it means you wrote Ruby code that’s not quite right, and IRB doesn’t know what
    to do with it. Double-check your code for tiny errors, like typos, missing commas
    between elements in arrays, or missing hash rockets (`=>`) or colons in hashes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你写的 Ruby 代码有些地方不太对，IRB 不知道该怎么处理它。检查代码中是否有小错误，例如拼写错误、数组元素之间缺少逗号，或是哈希中的 `=>`
    或冒号丢失。
- en: Can’t Convert nil into String
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无法将 nil 转换为字符串
- en: 'If you get an error like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到类似下面的错误：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: it means you tried to do something with one Ruby type (like a string, integer,
    or `nil`), but Ruby expected a different type. This often happens when something
    is `nil` and you don’t know it; if you see this error, try `puts`ing out the values
    of all your variables to make sure each one is the type of thing (string, integer,
    array, and so on) that you expect! (See [Getting to Know IRB](../Text/ch01.html#getting_to_know_irb
    "Getting to Know IRB") for help with the `puts` command and [A Bit More About
    Variables](../Text/ch02.html#bit_more_about_variables "A Bit More About Variables")
    for a refresher on the types of variables.)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你试图用一种 Ruby 类型（如字符串、整数或`nil`）做某件事，但 Ruby 期待的是另一种类型。这通常发生在某个值是`nil`，但你并不知道；如果你看到这个错误，试着用`puts`输出所有变量的值，确保每个变量的类型（字符串、整数、数组等）符合你的预期！(有关`puts`命令的帮助，请参见[了解
    IRB](../Text/ch01.html#getting_to_know_irb "了解 IRB")，有关变量类型的复习，请参见[更多关于变量](../Text/ch02.html#bit_more_about_variables
    "更多关于变量")。)
- en: You Were Saying . . . ?
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你刚才说的是什么 . . . ?
- en: 'From time to time, you might see Ruby print something like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能会看到 Ruby 打印出类似下面的内容：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This means that Ruby expects you to “finish your thought.” Usually it means
    you pressed ENTER without closing a string, or maybe the last thing you typed
    was a `+` or `-` sign. All you need to do is finish that thought—complete the
    expression you started to type, close the string or array you opened, or whatever
    it is Ruby is waiting for—and you’ll be all set. For example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 Ruby 期待你“完成你的想法”。通常情况下，它意味着你按了 ENTER 却没有闭合一个字符串，或者你输入的最后一个符号是 `+` 或 `-`。你只需要完成那个想法——完成你开始输入的表达式，闭合你打开的字符串或数组，或者
    Ruby 等待的其他内容——这样就可以了。例如：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you have no idea what Ruby is waiting for, or you simply mistyped and want
    to start over, you can press CTRL-C to tell IRB not to wait for you. You’ll get
    your regular IRB prompt back and can continue from there. (For more about CTRL-C,
    see [Investigating the Kingdom’s Web Server](../Text/ch13.html#investigating_the_kingdomapostrophes_web
    "Investigating the Kingdom’s Web Server").)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道 Ruby 正在等待什么，或者你只是输入错了想重新开始，你可以按 CTRL-C 告诉 IRB 不要再等待你。你会返回到常规的 IRB 提示符，并可以从那里继续。(有关
    CTRL-C 的更多信息，请参见[调查王国的 Web 服务器](../Text/ch13.html#investigating_the_kingdomapostrophes_web
    "调查王国的 Web 服务器").)
- en: Clear the Screen
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清除屏幕
- en: Sometimes you’ll type a whole bunch in IRB and will want to clear the screen.
    You can do this in several ways, depending on which operating system you’re using.
    On a Mac, you can press ⌘-K or CTRL-L, or you can type `system 'clear'` into IRB
    and then press ENTER. If you’re using Linux, typing CTRL-L or entering `system
    'clear'` should work. If you’re using Windows, typing CTRL-L or entering `system
    'cls'` (not `'clear'`!) should do the trick.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会在 IRB 中输入很多内容，想要清除屏幕。根据你使用的操作系统，有几种方法可以做到这一点。在 Mac 上，你可以按 ⌘-K 或 CTRL-L，或者在
    IRB 中输入`system 'clear'`然后按 ENTER。如果你使用的是 Linux，按 CTRL-L 或输入`system 'clear'`应该有效。如果你使用的是
    Windows，按 CTRL-L 或输入`system 'cls'`（不是`'clear'`！）应该可以清除屏幕。
- en: Go Back to a Previous Command
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 返回到上一个命令
- en: If at any point you want to go back to a previous command you typed into IRB,
    just hit the up arrow on your keyboard! This is great if you just cleared the
    screen and then realize you need to retype a command, or if you mistyped a command
    and want to try again without retyping everything you just did.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在任何时候想返回到你在 IRB 中输入的上一个命令，只需按键盘上的上箭头！这非常方便，尤其是在你刚清除屏幕，然后意识到需要重新输入某个命令，或者你输入错了命令，想要在不重新输入所有内容的情况下重试。
- en: Look It Up!
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找答案！
- en: Finally, if you ever see an error that you don’t know how to handle, go ahead
    and search for it on the Internet (after you get your local adult’s permission!).
    Everyone gets errors, so it’s likely that someone else has already figured out
    how to handle any error you might run into. Even the best programmers look up
    things they don’t know on a daily basis. The more comfortable you get hunting
    for answers when you’re stuck, the happier and more productive you’ll be when
    writing Ruby.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果你遇到一个不知道如何处理的错误，去互联网上搜索一下（记得先征得你本地成年人的许可！）。每个人都会遇到错误，所以很可能已经有人找到了解决你可能遇到的错误的方法。即使是最优秀的程序员，也每天都需要查找自己不知道的东西。你越是习惯在遇到困惑时寻找答案，你在编写
    Ruby 代码时就会越高效、越快乐。
- en: Updates
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新
- en: Visit *[http://nostarch.com/rubywizardry/](http://nostarch.com/rubywizardry/)*
    for updates, errata, and other information.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 *[http://nostarch.com/rubywizardry/](http://nostarch.com/rubywizardry/)*
    获取更新、勘误和其他信息。
- en: More Smart Books for Curious Kids!
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多有趣的书籍，专为好奇的孩子们！
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160085.png.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160085.png.jpg)'
- en: '**JAVASCRIPT FOR KIDS**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**儿童JavaScript编程**'
- en: '**A Playful Introduction to Programming**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**编程的趣味入门**'
- en: by NICK MORGAN
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由 NICK MORGAN 编写
- en: DECEMBER 2014, 336 PP., $34.95
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年12月，336页，$34.95
- en: ISBN 978-1-59327-408-5
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN 978-1-59327-408-5
- en: '*full color*'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '*全彩*'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160087.png.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160087.png.jpg)'
- en: '**LAUREN IPSUM**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**洛伦·伊普苏姆**'
- en: '**A Story About Computer Science and Other Improbable Things**'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于计算机科学及其他不太可能的事物的故事**'
- en: '*by* CARLOS BUENO'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '*由* CARLOS BUENO 编写'
- en: DECEMBER 2014, 192 PP., $16.95
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年12月，192页，$16.95
- en: ISBN 978-1-59327-574-7
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN 978-1-59327-574-7
- en: '*full color*'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '*全彩*'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160089.png.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160089.png.jpg)'
- en: '**PYTHON FOR KIDS**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**儿童Python编程**'
- en: '**A Playful Introduction to Programming**'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**编程的趣味入门**'
- en: '*by* JASON BRIGGS'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '*由* JASON BRIGGS 编写'
- en: DECEMBER 2012, 344 PP., $34.95
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 2012年12月，344页，$34.95
- en: ISBN 978-1-59327-407-8
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN 978-1-59327-407-8
- en: '*full color*'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*全彩*'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160091.png.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160091.png.jpg)'
- en: '**LEARN TO PROGRAM WITH SCRATCH**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**学习Scratch编程**'
- en: '**A Visual Introduction to Programming with Games, Art, Science, and Math**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过游戏、艺术、科学和数学的视觉编程入门**'
- en: '*by* MAJED MARJI'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*由* MAJED MARJI 编写'
- en: FEBRUARY 2014, 288 PP., $34.95
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年2月，288页，$34.95
- en: ISBN 978-1-59327-543-3
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN 978-1-59327-543-3
- en: '*full color*'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '*全彩*'
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160093.png.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160093.png.jpg)'
- en: '**RAILS CRASH COURSE**'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**Rails快速入门**'
- en: '**A No-Nonsense Guide to Rails Development**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**Rails开发的实用指南**'
- en: '*by* ANTHONY LEWIS'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '*由* ANTHONY LEWIS 编写'
- en: OCTOBER 2014, 296 PP., $34.95
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年10月，296页，$34.95
- en: ISBN 978-1-59327-572-3
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN 978-1-59327-572-3
- en: '![image with no caption](../Images/httpatomoreillycomsourcenostarchimages2160095.png.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明文字的图片](../Images/httpatomoreillycomsourcenostarchimages2160095.png.jpg)'
- en: '**THE MANGA GUIDE™ TO DATABASES**'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**漫画指南™：数据库**'
- en: '*by* MANA TAKAHASHI, SHOKO AZUMA, *and* TREND-PRO CO., LTD.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '*由* MANA TAKAHASHI、SHOKO AZUMA 和 TREND-PRO CO., LTD. 编写'
- en: JANUARY 2009, 224 PP., $19.95
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年1月，224页，$19.95
- en: ISBN 978-1-59327-190-9
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: ISBN 978-1-59327-190-9
- en: '**800.420.7240 or 415.863.9900 | [sales@nostarch.com](mailto:sales@nostarch.com)
    | [www.nostarch.com](http://www.nostarch.com)**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**800.420.7240 或 415.863.9900 | [sales@nostarch.com](mailto:sales@nostarch.com)
    | [www.nostarch.com](http://www.nostarch.com)**'
