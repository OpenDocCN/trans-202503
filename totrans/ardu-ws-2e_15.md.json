["```\n// Project 46 - Creating a Wireless Remote Control, Transmitter Sketch1 #include <VirtualWire.h> \nuint8_t buf[VW_MAX_MESSAGE_LEN]; \nuint8_t buflen = VW_MAX_MESSAGE_LEN;2 const char *on2 = \"a\"; \nconst char *off2 = \"b\"; \nconst char *on3 = \"c\"; \nconst char *off3 = \"d\"; \nvoid setup()\n{3     vw_set_ptt_inverted(true);      // Required for RF Link modules  vw_setup(300);                  // set data speed 4     vw_set_tx_pin(8);              pinMode(2, INPUT); pinMode(3, INPUT);\n}\nvoid loop()\n{5   if (digitalRead(2)==HIGH) {   vw_send((uint8_t *)on2, strlen(on2));  // send data out to the world vw_wait_tx();                          // wait a moment  delay(200); } if (digitalRead(2)==LOW) {6        vw_send((uint8_t *)off2, strlen(off2));    vw_wait_tx();                            delay(200); } if (digitalRead(3)==HIGH) { vw_send((uint8_t *)on3, strlen(on3));    vw_wait_tx();                            delay(200); }  if (digitalRead(3)==LOW) { vw_send((uint8_t *)off3, strlen(off3));  vw_wait_tx();                            delay(200); }\n}\n```", "```\nvw_send((uint8_t *)on2, strlen(on2)); \n```", "```\n// Project 46 - Creating a Wireless Remote Control, Receiver Sketch\n#include <VirtualWire.h> \nuint8_t buf[VW_MAX_MESSAGE_LEN]; \nuint8_t buflen = VW_MAX_MESSAGE_LEN;\nvoid setup()\n{1   vw_set_ptt_inverted(true);    // Required for RF Link modules  vw_setup(300); 2   vw_set_rx_pin(8);             vw_rx_start();                 pinMode(6, OUTPUT);  pinMode(7, OUTPUT);\n}\nvoid loop()\n{3   if (vw_get_message(buf, &buflen))  {4     switch(buf[0])   { case 'a': digitalWrite(6, HIGH); break; case 'b':  digitalWrite(6, LOW); break; case 'c':  digitalWrite(7, HIGH); break; case 'd':  digitalWrite(7, LOW); break; } }\n}\n```", "```\n// Project 47 - Remote Control over LoRa Wireless, Transmitter Sketch1 #define LORAFREQ (915000000L)2 #include <LoRa.h>\n#include <SPI.h>3 void loraSend(int controlCode)\n{4   LoRa.beginPacket();      // start sending data LoRa.print(\"ABC\");       // \"ABC\" is our three-character code for receiver LoRa.print(controlCode); // send our instructions (controlCode codes)5   LoRa.endPacket();        // finished sending data5   LoRa.receive();          // start listening\n}\nvoid setup()\n{ pinMode(4, INPUT);    // on button pinMode(3, INPUT);    // off button6   LoRa.begin(LORAFREQ); // start up LoRa at specified frequency\n}\nvoid loop()\n{ // check for button presses to control receiver if (digitalRead(4) == HIGH) { loraSend(1); // '1' is code for turn receiver digital pin 5 HIGH delay(500);  // allow time to send } if (digitalRead(3) == HIGH) { loraSend(0); // '0' is code for turn receiver digital pin 5 LOW delay(500);  // allow time to send }\n}\n```", "```\n// Project 47 - Remote Control over LoRa Wireless, Receiver Sketch1 #define LORAFREQ (915000000L)2 #include <LoRa.h>\n#include <SPI.h>\nvoid takeAction(int packetSize)\n// things to do when data received over LoRa wireless\n{3   char incoming[4] = \"\"; int k; for (int i = 0; i < packetSize; i++) { k = i; if (k > 6) { k = 6; // make sure we don't write past end of string } incoming[k] = (char)LoRa.read();4   } // check the three-character code sent from transmitter is correct5   if (incoming[0] != 'A') { return; // if not 'A', stop function and go back to void loop() }5   if (incoming[1] != 'B') { return; // if not 'B', stop function and go back to void loop() }5   if (incoming[2] != 'C') { return; // if not 'C', stop function and go back to void loop() } // If made it this far, correct code has been received from transmitter.  // Now to do something... if (incoming[3] == '1') { digitalWrite(7, HIGH); } if (incoming[3] == '0') { digitalWrite(7, LOW); }}\nvoid setup()\n{ pinMode(7, OUTPUT);6   LoRa.begin(LORAFREQ);       // start up LoRa at specified frequency7   LoRa.onReceive(takeAction); // call function \"takeAction\" when data received 8   LoRa.receive();             // start receiving\n}\nvoid loop()\n{\n}\n```", "```\n// Project 48 - Remote Control over LoRa Wireless with Confirmation, \n// Transmitter Sketch\n#define LORAFREQ (915000000L)\n#include <SPI.h>\n#include <LoRa.h>\nvoid loraSend(int controlCode)\n{ LoRa.beginPacket(); // start sending data LoRa.print(\"DEF\");  // \"DEF\" is our three-character code for the receiver.  // Needs to be matched on RX. LoRa.print(controlCode); // send our instructions (controlCode codes) LoRa.endPacket();   // finished sending data LoRa.receive();     // start listening\n}1 void takeAction(int packetSize)\n// things to do when data received over LoRa wireless\n{ char incoming[4] = \"\"; int k; for (int i = 0; i < packetSize; i++) { k = i; if (k > 6) { k = 18; // make sure we don't write past end of string } incoming[k] = (char)LoRa.read(); } // check the three-character code sent from receiver is correct if (incoming[0] != 'D') { return; // if not 'D', stop function and go back to void loop() } if (incoming[1] != 'E') { return; // if not 'E', stop function and go back to void loop() } if (incoming[2] != 'F') { return; // if not 'F', stop function and go back to void loop() } // If made it this far, correct code has been received from receiver.  // Now to do something...2   if (incoming[3] == '1') { digitalWrite(6, HIGH); // receiver has turned output on and has sent a signal confirming this }2   if (incoming[3] == '0') { digitalWrite(6, LOW); // receiver has turned output off and has sent a signal confirming this }\n}\nvoid setup()\n{ pinMode(4, INPUT);          // on button pinMode(3, INPUT);          // off button pinMode(6, OUTPUT);         // status LED LoRa.begin(LORAFREQ);       // start up LoRa at specified frequency LoRa.onReceive(takeAction); // call function \"takeAction\" when data received // over LoRa wireless\n}\nvoid loop()\n{ // check for button presses to control receiver if (digitalRead(4) == HIGH) { loraSend(1); // '1' is code for turn receiver digital pin 7 HIGH delay(500);  // button debounce } if (digitalRead(3) == HIGH) { loraSend(0); // '0' is code for turn receiver digital pin 7 LOW delay(500);  // button debounce }\n}\n```", "```\n// Project 48 - Remote Control over LoRa Wireless with Confirmation, Receiver \n// Sketch\n#define LORAFREQ (915000000L)\n#include <SPI.h>\n#include <LoRa.h>\nvoid loraSend(int controlCode){ LoRa.beginPacket();      // start sending data LoRa.print(\"DEF\");       // \"DEF\" is our three-character code for the // transmitter LoRa.print(controlCode); // send our instructions (controlCode codes) LoRa.endPacket();        // finished sending data LoRa.receive();          // start listening\n}\nvoid takeAction(int packetSize)\n// things to do when data received over LoRa wireless\n{ char incoming[4] = \"\"; int k; for (int i = 0; i < packetSize; i++) { k = i; if (k > 6) { k = 18; // make sure we don't write past end of string } incoming[k] = (char)LoRa.read(); } // check the three-character code sent from transmitter is correct if (incoming[0] != 'A') { return; // if not 'A', stop function and go back to void loop() } if (incoming[1] != 'B') { return; // if not 'B', stop function and go back to void loop() } if (incoming[2] != 'C') { return; // if not 'C', stop function and go back to void loop() } // If made it this far, correct code has been received from transmitter.  // Now to do something... if (incoming[3] == '1') { digitalWrite(7, HIGH);1     loraSend(1); // tell the transmitter that the output has been turned on } if (incoming[3] == '0') { digitalWrite(7, LOW);1     loraSend(0); // tell the transmitter that the output has been turned off }\n}\nvoid setup()\n{ pinMode(7, OUTPUT); LoRa.begin(LORAFREQ);       // start up LoRa at specified frequency LoRa.onReceive(takeAction); // call function \"takeAction\" when data received // over LoRa wireless LoRa.receive(); // start receiving\n}\nvoid loop()\n{\n}\n```", "```\n// Project 49 - Sending Remote Sensor Data Using LoRa Wireless, Transmitter \n// Sketch\n#define LORAFREQ (915000000L)\n#include <SPI.h>\n#include <LoRa.h>\nchar command;\nvoid loraSend(int controlCode)\n{ LoRa.beginPacket();      // start sending data1   LoRa.print(\"ABC\");       // \"ABC\" is our three-character code for the // transmitter LoRa.print(controlCode); // send our instructions (controlCode codes) LoRa.endPacket();        // finished sending data LoRa.receive();          // start listening\n}\nvoid takeAction(int packetSize)\n// send text received from sensor Arduino via LoRa to Serial Monitor{ char incoming[31] = \"\"; int k; for (int i = 0; i < packetSize; i++) { k = i; if (k > 31) { k = 31; // make sure we don't write past end of string } incoming[k] = (char)LoRa.read(); Serial.print(incoming[k]); // display temp information from sensor board } Serial.println();\n}\nvoid setup()\n{2   LoRa.begin(LORAFREQ);       // start up LoRa at specified frequency LoRa.onReceive(takeAction); // call function \"takeAction\" when data received // over LoRa wireless LoRa.receive();             // start receiving Serial.begin(9600);\n}\nvoid loop()\n{3   Serial.print(\"Enter 1 for Celsius or 2 for Fahrenheit then Enter: \"); Serial.flush(); // clear any \"junk\" out of the serial buffer before waiting4   while (Serial.available() == 0) { // do nothing until something enters the serial buffer } while (Serial.available() > 0) { command = Serial.read() - '0'; // read the number in the serial buffer, // remove the ASCII text offset for zero: '0' } Serial.println();5   loraSend(command); delay(2000);\n}\n```", "```\n// Project 49 - Sending Remote Sensor Data Using LoRa Wireless, Receiver\n// Sketch\n#define LORAFREQ (915000000L)\n#include <SPI.h>\n#include <LoRa.h>\nfloat sensor = 0;\nfloat voltage = 0;\nfloat celsius = 0;\nfloat fahrenheit = 0;\nvoid loraSendC()\n{ LoRa.beginPacket(); // start sending data sensor = analogRead(0); voltage = ((sensor * 5000) / 1024); voltage = voltage - 500; celsius = voltage / 10; fahrenheit = ((celsius * 1.8) + 32);1   LoRa.print(\"Temperature: \"); LoRa.print(celsius, 2); LoRa.print(\" degrees C\");2   LoRa.endPacket(); // finished sending data LoRa.receive();   // start listening\n}\nvoid loraSendF()\n// send temperature in Fahrenheit\n{ LoRa.beginPacket(); // start sending data sensor = analogRead(0); voltage = ((sensor * 5000) / 1024); voltage = voltage - 500; celsius = voltage / 10; fahrenheit = ((celsius * 1.8) + 32);1   LoRa.print(\"Temperature: \"); LoRa.print(fahrenheit, 2); LoRa.print(\" degrees F\");2   LoRa.endPacket(); // finished sending data LoRa.receive();   // start listening\n}\nvoid takeAction(int packetSize)\n// things to do when data received over LoRa wireless\n{ char incoming[6] = \"\"; int k; for (int i = 0; i < packetSize; i++) { k = i; if (k > 6) { k = 6; // make sure we don't write past end of string } incoming[k] = (char)LoRa.read(); }3   // check the three-character code sent from transmitter is correct if (incoming[0] != 'A') { return; // if not 'A', stop function and go back to void loop() } if (incoming[1] != 'B') { return; // if not 'B', stop function and go back to void loop() } if (incoming[2] != 'C') { return; // if not 'C', stop function and go back to void loop() } // If made it this far, correct code has been received from transmitter  if (incoming[3] == '1') {4     loraSendC(); } if (incoming[3] == '2') {5     loraSendF(); }\n}\nvoid setup()\n{ LoRa.begin(LORAFREQ);       // start up LoRa at specified frequency LoRa.onReceive(takeAction); // call function \"takeAction\" when data received  LoRa.receive();             // start receiving\n}\nvoid loop()\n{\n}\n```"]