- en: '**B'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ENOUGH CALCULUS TO GET BY**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: In this book, we’ll occasionally use ideas from calculus, though no actual manual
    solving of calculus problems will be required! What *will* be required is an understanding
    of some of the basics of calculus, such as the derivative and (especially) the
    integral. This appendix is by no means an attempt to teach these concepts deeply
    or show you how to solve them; instead, it offers a brief overview of these ideas
    and how they’re represented in mathematical notation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '**Functions**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A *function* is just a mathematical “machine” that takes one value, does something
    with it, and returns another value. This is very similar to how functions in R
    work (see [Appendix A](app01.xhtml#app01)): they take in a value and return a
    result. For example, in calculus we might have a function called *f* defined like
    this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '*f*(*x*) = *x*²'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, *f* takes a value, *x*, and squares it. If we input the value
    3 into *f*, for example, we get:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '*f*(3) = 9'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: This is a little different than how you might have seen it in high school algebra,
    where you’d usually have a value *y* and some equation involving *x*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '*y* = *x*²'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: One reason why functions are important is that they allow us to abstract away
    the actual calculations we’re doing. That means we can say something like *y*
    = *f*(*x*), and just concern ourselves with the abstract behavior of the function
    itself, not necessarily how it’s defined. That’s the approach we’ll take for this
    appendix.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: As an example, say you’re training to run a 5 km race and you’re using a smartwatch
    to keep track of your distance, speed, time, and other factors. You went out for
    a run today and ran for half an hour. However, your smartwatch malfunctioned and
    recorded only your speed in miles per hour (mph) throughout your 30-minute run.
    [Figure B-1](app02.xhtml#app02fig01) shows the data you were able to recover.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: For this appendix, think of your running speed as being created by a function,
    *s*, that takes an argument *t*, the time in hours. A function is typically written
    in terms of the argument it takes, so we would write *s*(*t*), which results in
    a value that gives your current speed at time *t*. You can think of the function
    *s* as a machine that takes the current time and returns your speed at that time.
    In calculus, we’d usually have a specific definition of *s*(*t*), such as *s*(*t*)
    = *t*² + 3*t* + 2, but here we’re just talking about general concepts, so we won’t
    worry about the exact definition of *s*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '*Throughout the book we’ll be using R to handle all our calculus needs, so
    it’s really only important that you understand the fundamental ideas behind it,
    rather than the mechanics of solving calculus problems.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: From this function alone, we can learn a few things. It’s clear that your pace
    was a little uneven during this run, going up and down from a high of nearly 8
    mph near the end and a low of just under 4.5 mph in the beginning.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/bfig01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: '*Figure B-1: The speed for a given time in your run*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-1：你跑步时在某一时刻的速度*'
- en: 'However, there are still a lot of interesting questions you might want to answer,
    such as:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然有许多有趣的问题你可能想回答，比如：
- en: How far did you run?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你跑了多远？
- en: When did you lose the most speed?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你什么时候减速最多？
- en: When did you gain the most speed?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你什么时候加速最快？
- en: During what times was your speed relatively consistent?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在什么时间段内你的速度比较稳定？
- en: We can make a fairly accurate estimate of the last question from this plot,
    but the others seem impossible to answer from what we have. However, it turns
    out that we can answer *all* of these questions with the power of calculus! Let’s
    see how.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过这个图表对最后一个问题做出相当准确的估计，但其他问题似乎无法仅凭现有数据回答。然而，事实证明，我们可以利用微积分的力量回答*所有*这些问题！让我们看看怎么做。
- en: '***Determining How Far You’ve Run***'
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***确定你跑了多远***'
- en: So far our chart just shows your running speed at a certain time, so how do
    we find out how far you’ve run?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的图表只显示你在某一时刻的跑步速度，那么我们如何得知你跑了多远呢？
- en: This doesn’t sound too difficult in theory. Suppose, for example, you ran 5
    mph consistently for the whole run. In that case, you ran 5 mph for 0.5 hour,
    so your total distance was 2.5 miles. This intuitively makes sense, since you
    would have run 5 miles each hour, but you ran for only half an hour, so you ran
    half the distance you would have run in an hour.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上这听起来不太难。例如，假设你整个过程中的速度都保持在5英里每小时，那么你在0.5小时内跑了5英里每小时的速度，因此你跑的总距离是2.5英里。这直观上是有道理的，因为你每小时跑5英里，但你只跑了半小时，所以你跑的距离是你一个小时跑的距离的一半。
- en: But our problem involves a different speed at nearly every moment that you were
    running. Let’s look at the problem another way. [Figure B-2](app02.xhtml#app02fig02)
    shows the plotted data for a constant running speed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们的问题涉及到你跑步时几乎每一刻的速度都是不同的。让我们换个角度看这个问题。[图 B-2](app02.xhtml#app02fig02)展示了恒定跑步速度下的数据图。
- en: '![Image](../images/bfig02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/bfig02.jpg)'
- en: '*Figure B-2: Visualizing distance as the area of the speed/time plot*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-2：将距离可视化为速度/时间图的面积*'
- en: You can see that this data creates a straight line. If we think about the space
    under this line, we can see that it’s a big block that actually represents the
    distance you’ve run! The block is 5 high and 0.5 long, so the area of this block
    is 5 × 0.5 = 2.5, which gives us the 2.5 miles result!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这些数据生成了一条直线。如果我们考虑这条线下的空间，我们可以看到它是一个大块，实际上代表了你跑的距离！这个块高5，长0.5，所以这个块的面积是5
    × 0.5 = 2.5，这就给出了2.5英里的结果！
- en: Now let’s look at a simplified problem with varying speeds, where you ran 4.5
    mph from 0.0 to 0.3 hours, 6 mph from 0.3 to 0.4 hours, and 3 mph the rest of
    the way to 0.5 miles. If we visualize these results as blocks, or *towers*, as
    in [Figure B-3](app02.xhtml#app02fig03), we can solve our problem the same way.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一个简化的问题，假设你的速度在不同的时间段内变化：你在0.0到0.3小时之间以4.5英里的速度跑步，在0.3到0.4小时之间以6英里的速度跑步，剩下的0.1小时以3英里的速度跑步。如果我们像在[图
    B-3](app02.xhtml#app02fig03)中一样将这些结果可视化为块或*塔形*区域，我们就可以用同样的方法解决这个问题。
- en: 'The first tower is 4.5 × 0.3, the second is 6 × 0.1, and the third is 3 × 0.1,
    so that:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第一座塔是4.5 × 0.3，第二座是6 × 0.1，第三座是3 × 0.1，所以：
- en: 4.5 × 0.3 + 6 × 0.1 + 3 × 0.1 = 2.25
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 4.5 × 0.3 + 6 × 0.1 + 3 × 0.1 = 2.25
- en: 'By looking at the area under the tower, then, we get the total distance you
    traveled: 2.25 miles.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看这些塔形区域下的面积，我们得到了你跑的总距离：2.25英里。
- en: '![Image](../images/bfig03.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/bfig03.jpg)'
- en: '*Figure B-3: We can easily calculate your total distance traveled by adding
    together these towers.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-3：我们可以通过将这些塔形区域加在一起，轻松计算出你跑的总距离。*'
- en: '***Measuring the Area Under the Curve: The Integral***'
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***计算曲线下的面积：积分***'
- en: 'You’ve now seen that we can figure out the area under the line to tell us how
    far you traveled. Unfortunately, the line for our original data is curved, which
    makes our problem a bit difficult: how can we calculate the towers under our curvy
    line?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经看到，我们可以通过计算线下的面积来得出你跑了多远。不幸的是，我们原始数据的线是弯曲的，这让问题变得有点困难：我们怎么计算弯曲线下的塔形区域呢？
- en: We can start this process by imagining some large towers that are fairly close
    to the pattern of our curve. If we start with just three towers, as we can see
    in [Figure B-4](app02.xhtml#app02fig04), it isn’t a bad estimate.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过想象一些与我们曲线模式相近的大塔来开始这个过程。如果我们从三座塔开始，就像在[图 B-4](app02.xhtml#app02fig04)中看到的那样，这并不是一个坏的估计。
- en: '![Image](../images/bfig04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/bfig04.jpg)'
- en: '*Figure B-4: Approximating the curve with three towers*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-4：用三座塔近似曲线*'
- en: By calculating the area under each of these towers, we get a value of 3.055
    miles for your estimated total miles traveled. But we could clearly do better
    by making more, smaller towers, as shown in [Figure B-5](app02.xhtml#app02fig05).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算这些塔的面积，我们得到一个估算的总旅行距离为3.055英里。但显然，通过使用更多、更小的塔，我们可以得到更好的估算，如[图 B-5](app02.xhtml#app02fig05)所示。
- en: '![Image](../images/bfig05.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig05.jpg)'
- en: '*Figure B-5: Approximating the curve better by using 10 towers instead of 3*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-5：通过使用10个塔代替3个塔更好地逼近曲线*'
- en: Adding up the areas of these towers, we get 3.054 miles, which is a more accurate
    estimate.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些塔的面积加起来，我们得到3.054英里，这是一个更精确的估算。
- en: If we imagine repeating this process forever, using more and thinner towers,
    eventually we would get the full area under the curve, as in [Figure B-6](app02.xhtml#app02fig06).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想象永远重复这个过程，使用更多、更薄的塔，最终我们将得到曲线下的完整面积，如[图 B-6](app02.xhtml#app02fig06)所示。
- en: '![Image](../images/bfig06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig06.jpg)'
- en: '*Figure B-6: Completely capturing the area under the curve*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-6：完全捕获曲线下的面积*'
- en: 'This represents the exact area traveled for your half-hour run. If we could
    add up infinitely many towers, we would get a total of 3.053 miles. Our estimates
    were pretty close, and as we use more and smaller towers, our estimate gets closer.
    The power of calculus is that it allows us to calculate this *exact* area under
    the curve, or the *integral*. In calculus, we’d represent the integral for our
    *s*(*t*) from 0 to 0.5 in mathematical notation as:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示你半小时跑步的准确行进面积。如果我们能够加上无数个塔，我们将得到3.053英里的总距离。我们的估算已经非常接近，而随着我们使用更多、更小的塔，估算会变得更加精确。微积分的力量在于它能够计算出曲线下的*精确*面积，或称为*积分*。在微积分中，我们将*距离*函数s(*t*)从0到0.5的积分表示为数学符号如下：
- en: '![Image](../images/f0221-01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0221-01.jpg)'
- en: That ∫ is just a fancy S, meaning the sum (or total) of the area of all the
    little towers in *s*(*t*). The *dt* notation reminds us that we’re talking about
    little bits of the variable *t*; the *d* is a mathematical way to refer to these
    little towers. Of course, in this bit of notation, there’s only one variable,
    *t*, so we aren’t likely to get confused. Likewise, in this book, we typically
    drop the *dt* (or its equivalent for the variable being used) since it’s obvious
    in the examples.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这个∫只是一个花哨的S，表示所有小塔在*s*(*t*)中的面积的总和。*dt*符号提醒我们这里讨论的是变量*t*的微小部分；*d*是数学中用来表示这些小塔的方式。当然，在这个符号中，只有一个变量*t*，所以我们不容易混淆。同样，在这本书中，我们通常省略*dt*（或其等效的变量符号），因为在例子中已经很明显了。
- en: 'In our last notation we set the beginning and end of our integral, which means
    we can find the distance not just for the whole run but also for a section of
    it. Suppose we wanted to know how far you ran between 0.1 to 0.2 of an hour. We
    would note this as:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们最后的符号中，我们设定了积分的开始和结束，这意味着我们不仅可以计算整个跑步过程的距离，也可以计算其中的一段距离。假设我们想知道你在0.1到0.2小时之间跑了多远。我们可以表示为：
- en: '![Image](../images/f0222-01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0222-01.jpg)'
- en: We can visualize this integral as shown in [Figure B-7](app02.xhtml#app02fig07).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像[图 B-7](app02.xhtml#app02fig07)所示那样可视化这个积分。
- en: '![Image](../images/bfig07.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig07.jpg)'
- en: '*Figure B-7: Visualizing the area under the curve for the region from 0.1 to
    0.2*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-7：可视化从0.1到0.2区间下的曲线面积*'
- en: The area of just this shaded region is 0.556 miles.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 仅这个阴影区域的面积为0.556英里。
- en: 'We can even think of the integral of our function as another function. Suppose
    we define a new function, dist(*T*), where *T* is our “total time run”:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将我们的函数的积分视为另一个函数。假设我们定义了一个新函数，dist(*T*)，其中*T*表示我们的“总跑步时间”：
- en: '![Image](../images/f0222-02.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0222-02.jpg)'
- en: This gives us a function that tells us the *distance* you’ve traveled at time
    *T*. We can also see why we want to use *dt* because we can see that our integral
    is being applied to the lowercase *t* argument rather than the capital *T* argument.
    [Figure B-8](app02.xhtml#app02fig08) plots this out to the total distance you’ve
    run at any given time *T* during your run.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们提供了一个函数，告诉我们在时间*T*时你已经旅行的*距离*。我们还可以看到为什么我们想要使用*dt*，因为我们可以看到我们的积分应用于小写的*t*参数，而不是大写的*T*参数。[图
    B-8](app02.xhtml#app02fig08)绘制了你在跑步过程中任意时刻*T*的总距离。
- en: '![Image](../images/bfig08.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig08.jpg)'
- en: '*Figure B-8: Plotting out the integral transforms a time and speed plot to
    a time and distance plot.*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-8：积分图将时间与速度的图转化为时间与距离的图。*'
- en: In this way, the integral has transformed our function *s*, which was “speed
    at a time,” to a function *dist*, “distance covered at a time.” As shown earlier,
    the integral of our function between two points represents the distance traveled
    between two different times. Now we’re looking at the total distance traveled
    at any given time *t* from the beginning time of 0.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，积分将我们的函数 *s*（“某时的速度”）转换为一个函数 *dist*（“某时的行驶距离”）。如前所示，我们函数在两个点之间的积分代表了两个不同时间之间行驶的距离。现在，我们正在查看从起始时间0到任意给定时间
    *t* 的总行驶距离。
- en: The integral is important because it allows us to calculate the area under curves,
    which is much trickier to calculate than if we have straight lines. In this book,
    we’ll use the concept of the integral to determine the probabilities that events
    are between two ranges of values.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 积分很重要，因为它使我们能够计算曲线下的面积，而这比计算直线下的面积要复杂得多。在本书中，我们将使用积分的概念来确定事件在两个数值范围之间的概率。
- en: '***Measuring the Rate of Change: The Derivative***'
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***测量变化率：导数***'
- en: 'You’ve seen how we can use the integral to figure out the distance traveled
    when all we have is a recording of your speed at various times. But with our varying
    speed measurements, we might also be interested in figuring out the *rate of change*
    for your speed at various times. When we talk about the rate at which speed is
    changing, we’re referring to *acceleration*. In our chart, there are a few interesting
    points regarding the rate of change: the points when you’re losing speed the fastest,
    when you’re gaining speed the fastest, and when the speed is the most steady (i.e.,
    the rate of change is near 0).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到我们如何利用积分来计算行驶的距离，当我们只有记录的各个时间点的速度数据时。但在我们的速度变化测量下，我们也许会感兴趣于计算各个时间点的*变化率*。当我们谈论速度变化的速率时，我们指的是*加速度*。在我们的图表中，有几个关于变化率的有趣点：你减速最快的时候、加速最快的时候，以及速度最稳定的时候（即变化率接近0）。
- en: Just as with integration, the main challenge of figuring out your acceleration
    is that it seems to always be changing. If we had a constant rate of change, calculating
    the acceleration isn’t that difficult, as shown in [Figure B-9](app02.xhtml#app02fig09).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 就像积分一样，计算加速度的主要挑战是它似乎总在变化。如果我们有一个恒定的变化率，那么计算加速度并不困难，如[图B-9](app02.xhtml#app02fig09)所示。
- en: '![Image](../images/bfig09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig09.jpg)'
- en: '*Figure B-9: Visualizing a constant rate of change (compared with your actual
    changing rate)*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图B-9：可视化恒定变化率（与实际变化率的比较）*'
- en: 'You might remember from basic algebra that we can draw any line using this
    formula:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得基础代数中我们可以使用这个公式画任何一条直线：
- en: '*y* = *mx* + *b*'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = *mx* + *b*'
- en: 'where *b* is the point at which the line crosses the y-axis and *m* is the
    slope of the line. The *slope* represents the rate of change of a straight line.
    For the line in [Figure B-9](app02.xhtml#app02fig09), the full formula is:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 *b* 是直线与y轴交点的点，*m* 是直线的斜率。*斜率* 表示直线的变化率。对于[图B-9](app02.xhtml#app02fig09)中的直线，完整的公式是：
- en: '*y* = 5*x* + 4.8'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = 5*x* + 4.8'
- en: 'The slope of 5 means that for every time *x* grows by 1, *y* grows by 5; 4.8
    is the point at which the line crosses the x-axis. In this example, we’d interpret
    this formula as *s*(*t*) = 5*t* + 4.8, meaning that for every mile you travel
    you accelerate by 5 mph, and that you started off at 4.8 mph. Since you’ve run
    half a mile, using this simple formula, we can figure out:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 斜率为5意味着每当 *x* 增加1时，*y* 增加5；4.8是该直线与x轴的交点。在这个例子中，我们可以将这个公式理解为 *s*(*t*) = 5*t*
    + 4.8，意思是每行进一英里，你的速度加速5英里/小时，并且你从4.8英里/小时的速度开始。由于你已经跑了半英里，利用这个简单的公式，我们可以计算出：
- en: '*s*(*t*) = 5 × 0.5 + 4.8 = 7.3'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*s*(*t*) = 5 × 0.5 + 4.8 = 7.3'
- en: which means at the end of your run, you would be traveling 7.3 mph. We could
    similarly determine your exact speed at any point in the run, as long as the acceleration
    is constant!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在你跑步结束时，你的速度将是7.3英里/小时。我们也可以通过类似的方法，计算你在跑步中的任何时刻的确切速度，只要加速度是恒定的！
- en: For our actual data, because the line is curvy it’s not easy to determine the
    slope at a single point in time. Instead, we can figure out the slopes of parts
    of the line. If we divide our data into three subsections, we could draw lines
    between each part as in [Figure B-10](app02.xhtml#app02fig10).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的实际数据，因为曲线是弯曲的，所以很难在单一时刻确定斜率。相反，我们可以计算出直线的各个部分的斜率。如果我们将数据分成三个子区段，就可以在每个部分之间画出直线，如[图B-10](app02.xhtml#app02fig10)所示。
- en: '![Image](../images/bfig10.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig10.jpg)'
- en: '*Figure B-10: Using multiple slopes to get a better estimate of your rate of
    change*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-10：使用多个斜率来更好地估算你的变化率*'
- en: Now, clearly these lines aren’t a perfect fit to our curvy line, but they allow
    us to see the parts where you accelerated the fastest, slowed down the most, and
    were relatively stable.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显然这些直线并不能完全匹配我们的曲线，但它们可以帮助我们看到你加速最快、减速最慢以及相对稳定的部分。
- en: If we split our function up into even more pieces we can get even better estimates,
    as in [Figure B-11](app02.xhtml#app02fig11).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将函数进一步分成更多的部分，我们可以得到更精确的估算，如[图 B-11](app02.xhtml#app02fig11)所示。
- en: '![Image](../images/bfig11.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig11.jpg)'
- en: '*Figure B-11: Adding more slopes allows us to better approximate your curve.*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-11：增加更多的斜率可以更好地逼近你的曲线。*'
- en: 'Here we have a similar pattern to when we found the integral, where we split
    the area under the curve into smaller and smaller towers until we were adding
    up infinitely many small towers. Now we want to break up our line into infinitely
    many small line segments. Eventually, rather than a single *m* representing our
    slope, we have a new function representing the rate of change at each point in
    our original function. This is called the *derivative*, represented in mathematical
    notation like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到的模式类似于我们求积分时的做法，那个时候我们将曲线下方的面积分成越来越小的塔楼，直到我们把无数小塔楼加在一起。现在我们要做的是把直线分成无数小线段。最终，代替单一的
    *m* 来表示斜率的是一个新函数，表示我们原始函数中每一点的变化率。这就是所谓的*导数*，其数学表示形式如下：
- en: '![Image](../images/f0226-01.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0226-01.jpg)'
- en: Again, the *dx* just reminds us that we’re looking at very small pieces of our
    argument *x*. [Figure B-12](app02.xhtml#app02fig12) shows the plot of the derivative
    for our *s*(*t*) function, which allows us to see the exact rate of speed change
    at each moment in your run. In other words, this is a plot of your acceleration
    during your run. Looking at the y-axis, you can see that you rapidly lost speed
    in the beginning, and at around 0.3 hours you had a period of 0 acceleration,
    meaning your pace did not change (this is usually a good thing when practicing
    for a race!). We can also see exactly when you gained the most speed. Looking
    at the original plot, we couldn’t easily tell if you were gaining speed faster
    around 0.1 hours (just after your first speedup) or at the end of your run. With
    the derivative, though, it’s clear that the final burst of speed at the end was
    indeed faster than at the beginning.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，*dx*只是提醒我们，我们正在观察非常小的自变量 *x* 的部分。[图 B-12](app02.xhtml#app02fig12)展示了我们 *s*(*t*)
    函数的导数图，它让我们能够看到你在跑步时每一刻的速度变化率。换句话说，这就是你跑步过程中加速度的图像。看着y轴，你可以看到在一开始你迅速减速，而在大约0.3小时时你经历了一个加速度为0的阶段，这意味着你的配速没有变化（通常在练习比赛时这是好事！）。我们还可以清楚地看到你在哪一时刻获得了最快的速度。通过原始的图像，我们很难看出你是在0.1小时左右（第一次加速后）还是在跑步结束时获得了更快的速度。然而，通过导数，我们可以清楚地看到，在结束时的最后一波加速确实比开始时要快。
- en: '![Image](../images/bfig12.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/bfig12.jpg)'
- en: '*Figure B-12: The derivative is another function that describes the slope of*
    s(x) *at each point.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 B-12：导数是另一个函数，描述了*s(x)*在每个点的斜率。*'
- en: The derivative works just like the slope of a straight line, only it tells us
    how much a curvy line is sloping at a certain point.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 导数就像是直线的斜率，只不过它告诉我们曲线在某一点的倾斜程度。
- en: '**The Fundamental Theorem of Calculus**'
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**微积分基本定理**'
- en: 'We’ll look at one last truly remarkable calculus concept. There’s a very interesting
    relationship between the integral and the derivative. (Proving this relationship
    is far beyond the scope of this book, so we’ll focus only on the relationship
    itself here.) Suppose we have a function *F*(*x*), with a capital *F*. What makes
    this function special is that *its derivative* is *f*(*x*). For example, the derivative
    of our `dist` function is our *s* function; that is, your change in distance at
    each point in time is your speed. The derivative of speed is acceleration. We
    can describe this mathematically as:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论一个最后非常引人注目的微积分概念。积分和导数之间有一个非常有趣的关系。（证明这个关系超出了本书的范围，因此我们这里只关注关系本身。）假设我们有一个函数
    *F*(*x*)，其中 *F* 是大写的 *F*。这个函数特别之处在于它的导数是 *f*(*x*)。例如，我们的 `dist` 函数的导数就是我们的 *s*
    函数；也就是说，任意时刻的位移变化就是你的速度。速度的导数是加速度。我们可以用数学公式描述为：
- en: '![Image](../images/f0227-01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0227-01.jpg)'
- en: 'In calculus terms we call *F* the *antiderivative* of *f*, because *f* is *F*’s
    derivative. Given our examples, the antiderivative of acceleration would be speed,
    and the antiderivative of speed would be distance. Now suppose for any value of
    *f*, we want to take its integral between 10 and 50; that is, we want:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在微积分中，我们称*F*为*f*的*反导数*，因为*f*是*F*的导数。根据我们的例子，加速度的反导数是速度，而速度的反导数是距离。现在假设对于任何值的*f*，我们想要在10和50之间进行积分；也就是说，我们想要：
- en: '![Image](../images/f0227-02.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0227-02.jpg)'
- en: 'We can get this simply by subtracting *F*(10) from *F*(50), so that:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过从*F*(50)中减去*F*(10)来简单地得到这个结果，因此：
- en: '![Image](../images/f0228-01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0228-01.jpg)'
- en: The relationship between the integral and the derivative is called the *fundamental
    theorem of calculus*. It’s a pretty amazing tool, because it allows us to solve
    integrals mathematically, which is often much more difficult than finding derivatives.
    Using the fundamental theorem, if we can find the antiderivative of the function
    we want to find the integral of, we can easily perform integration. Figuring this
    out is the heart of performing integration by hand.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 积分与导数之间的关系被称为*微积分基本定理*。这是一个非常令人惊讶的工具，因为它让我们能够以数学方式求解积分，而这通常比求导数要困难得多。通过基本定理，如果我们能找到我们想要求积分的函数的反导数，我们就能轻松地进行积分。理解这一点是手动进行积分的核心。
- en: A full course on calculus (or two) typically explores the topics of integrals
    and derivatives in much greater depth. However, as mentioned, in this book we’ll
    only be making occasional use of calculus, and we’ll be using R for all of the
    calculations. Still, it’s helpful to have a rough understanding of what calculus
    and those unfamiliar ∫ symbols are all about!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一门完整的微积分课程（或两门）通常会更深入地探讨积分和导数的相关话题。然而，正如前面提到的，在本书中我们只会偶尔使用微积分，并且所有的计算都将使用R语言。尽管如此，了解微积分和那些不熟悉的∫符号的大致含义还是很有帮助的！
