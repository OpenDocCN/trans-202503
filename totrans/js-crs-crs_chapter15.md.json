["```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>GitHub</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n  </head>\n  <body>\n    <script src=\"https://unpkg.com/d3@7.4.4/dist/d3.js\"></script>\n    <script src=\"script.js\"></script>\n  </body>\n</html> \n```", "```\nhttps://api.github.com/search/repositories?q=language%3Ajavascript%20stars%3A\n%3E10000&per_page=20&sort=stars \n```", "```\nfunction getUrl() {\n❶ let baseUrl = \"https://api.github.com/search/repositories\";\n\n❷ let params = {\n    q: \"language:javascript stars:>10000\",\n    per_page: 20,\n    sort: \"stars\"\n  };\n\n❸ let queryString = Object.entries(params).map(pair => {\n    return `${pair[0]}=${encodeURIComponent(pair[1])}`;\n  }).join(\"&\");\n\n❹ return `${baseUrl}?${queryString}`;\n}\n\nlet url = getUrl();\n\nconsole.log(url); \n```", "```\n`--snip--`\nlet url = getUrl();\n\nd3.json(url).then(data => {\n  console.log(data);\n}); \n```", "```\nconst width = 600;\nconst height = 400;\n\nlet svg = d3\n  .select(\"body\")\n❶ .append(\"svg\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\n❷ let margin = {top: 20, right: 10, bottom: 20, left: 50};\n\n// Bottom axis container\nlet bottomContainer = svg\n❸ .append(\"g\")\n  .attr(\"id\", \"bottom\")\n  .attr(\"transform\", `translate(0, ${height - margin.bottom})`);\n\n// Left axis container\nlet leftContainer = svg\n❹ .append(\"g\")\n  .attr(\"id\", \"left\")\n  .attr(\"transform\", `translate(${margin.left}, 0)`);\n\nfunction getUrl() {\n`--snip--` \n```", "```\n`--snip--`\n// Left axis container\nlet leftContainer = svg\n .append(\"g\")\n .attr(\"id\", \"left\")\n .attr(\"transform\", `translate(${margin.left}, 0)`);\n\nfunction update(items) {\n❶ let xScale = d3.scaleBand()\n    .domain(items.map(d => d.full_name))\n    .range([margin.left, width - margin.right])\n    .padding(0.3);\n\n  let yScale = d3.scaleLinear()\n  ❷ .domain([0, d3.max(items, d => d.stargazers_count)])\n    .range([height - margin.bottom, margin.top])\n    .nice();\n\n❸ let bottomAxis = d3.axisBottom(xScale);\n  let leftAxis = d3.axisLeft(yScale);\n\n❹ bottomContainer.call(bottomAxis);\n  leftContainer.call(leftAxis);\n}\n\nfunction getUrl() {\n--snip--\n\nd3.json(url).then(data => {\n❺ update(data.items);\n}); \n```", "```\n`--snip--`\n let yScale = d3.scaleLinear()\n .domain([0, d3.max(items, d => d.stargazers_count)])\n .range([height - margin.bottom, margin.top])\n .nice();\n\n  let bottomAxis = d3\n    .axisBottom(xScale)\n  ❶ .tickValues([]);\n\n  let leftAxis = d3\n    .axisLeft(yScale)\n  ❷ .tickFormat(d3.format(\"~s\"));\n\n bottomContainer.call(bottomAxis);\n leftContainer.call(leftAxis);\n`--snip--` \n```", "```\n`--snip--`\n bottomContainer.call(bottomAxis);\n leftContainer.call(leftAxis);\n\n  svg\n    .selectAll(\"rect\")\n    .data(items, ❶ d => d.full_name)\n    .join(\"rect\")\n    .attr(\"x\", d => xScale(d.full_name))\n  ❷ .attr(\"y\", d => yScale(d.stargazers_count))\n    .attr(\"width\", xScale.bandwidth())\n  ❸ .attr(\"height\", d => yScale(0) - yScale(d.stargazers_count));\n}\n\nfunction getUrl() {\n`--snip--` \n```", "```\n`--snip--`\n <body>\n    <div id=\"sidebar\">\n      <div id=\"info\" class=\"box\">\n        <p class=\"repo\">\n          <span class=\"label\">Repository</span>\n        ❶ <span class=\"value\"><a target=\"_blank\"></a></span>\n        </p>\n        <p class=\"license\">\n          <span class=\"label\">License</span>\n          <span class=\"value\"></span>\n        </p>\n        <p class=\"stars\">\n          <span class=\"label\">Stars</span>\n          <span class=\"value\"></span>\n        </p>\n      </div>\n    </div>\n\n <script src=\"https://unpkg.com/d3@7.4.4/dist/d3.js\"></script>\n <script src=\"script.js\"></script>\n </body>\n`--snip--` \n```", "```\nbody {\n❶ display: flex;\n  align-items: flex-start;\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n.box {\n  padding: 0px 15px 0px 15px;\n  border: 1px solid #888;\n  margin-bottom: 15px;\n}\n\n#info .label {\n  font-weight: bold;\n  display: block;\n}\n\n#info a {\n  text-decoration: none;\n}\n\n#info a:hover {\n  text-decoration: underline;\n} \n```", "```\n`--snip--`\nlet svg = d3\n .select(\"body\")\n  .insert(\"svg\", \"#sidebar\")\n .attr(\"width\", width)\n .attr(\"height\", height);\n`--snip--` \n```", "```\n`--snip--`\n// Left axis container\nlet leftContainer = svg\n .append(\"g\")\n .attr(\"id\", \"left\")\n .attr(\"transform\", `translate(${margin.left}, 0)`);\n\nfunction getLicense(d) {\n❶ let license = d.license?.name;\n\n❷ if (!license) {\n    return \"No License\";\n  } else {\n    return license;\n  }\n}\n\nfunction update(items) {\n`--snip--` \n```", "```\n`--snip--`\n    .attr(\"width\", xScale.bandwidth())\n    .attr(\"height\", d => yScale(0) - yScale(d.stargazers_count))\n    .on(\"mouseover\", (e, d) => {\n      let info = d3.select(\"#info\");\n      info.select(\".repo .value a\").text(d.full_name).attr(\"href\", d.html_url); 1\n      info.select(\".license .value\").text(getLicense(d));\n      info.select(\".stars .value\").text(d.stargazers_count);\n    });\n}\n\nfunction getUrl() {\n`--snip--` \n```", "```\n`--snip--`\nfunction update(items) {\n❶ let licenses = new Set(items.map(d => getLicense(d)));\n\n❷ let colorScale = d3.scaleOrdinal()\n    .domain(licenses)\n .range(d3.schemeCategory10);\n\n let xScale = d3.scaleBand()\n`--snip--` \n```", "```\n**d3.schemeCategory10;**\n`(10) ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b',` \n `'#e377c2', '#7f7f7f', '#bcbd22', '#17becf']` \n```", "```\n`--snip--`\n svg\n .selectAll(\"rect\")\n .data(items, d => d.full_name)\n .join(\"rect\")\n .attr(\"x\", d => xScale(d.full_name))\n .attr(\"y\", d => yScale(d.stargazers_count))\n    .attr(\"fill\", d => colorScale(getLicense(d)))\n .attr(\"width\", xScale.bandwidth())\n .attr(\"height\", d => yScale(0) - yScale(d.stargazers_count))\n`--snip--` \n```", "```\n`--snip--`\n <p class=\"stars\">\n <span class=\"label\">Stars</span>\n <span class=\"value\"></span>\n </p>\n </div>\n\n      <div id=\"key\" class=\"box\">\n        <h1>Key</h1>\n      </div>\n </div>\n`--snip--` \n```", "```\n`--snip--`\n#info a:hover {\n text-decoration: underline;\n}\n\n#key h1 {\n  font-size: 1.5em;\n}\n\n#key .color {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 0px 10px 0px 10px;\n} \n```", "```\n`--snip--`\n .on(\"mouseover\", (e, d) => {\n let info = d3.select(\"#info\");\n info.select(\".repo .value a\").text(d.full_name).attr(\"href\", d.html_url);\n info.select(\".license .value\").text(getLicense(d));\n info.select(\".stars .value\").text(d.stargazers_count);\n });\n\n  d3.select(\"#key\")\n    .selectAll(\"p\")\n    .data(licenses)\n    .join(\n      enter => {\n      ❶ let p = enter.append(\"p\");\n\n❷ p.append(\"div\")\n          .attr(\"class\", \"color\")\n        ❸ .style(\"background-color\", d => colorScale(d));\n\n      ❹ p.append(\"span\")\n          .text(d => d)\n\n        return p;\n      }\n    ); \n}\n\nfunction getUrl() {\n`--snip--` \n```", "```\n`--snip--`\n// Left axis container\nlet leftContainer = svg\n .append(\"g\")\n .attr(\"id\", \"left\")\n .attr(\"transform\", `translate(${margin.left}, 0)`);\n\nlet chartHeight = (height - margin.bottom) - margin.top;\nlet midPoint = margin.top + chartHeight / 2;\n\nsvg\n  .append(\"text\")\n  .text(\"Stars\")\n  .style(\"font-size\", \"14px\")\n❶ .attr(\"text-anchor\", \"middle\")\n❷ .attr(\"transform\", `translate(12, ${midPoint}) rotate(270)`);\n\nfunction getLicense(d) {\n`--snip--` \n```", "```\n`--snip--`\n d3.select(\"#key\")\n .selectAll(\"p\")\n .data(licenses)\n .join(\n enter => {\n let p = enter.append(\"p\");\n\n        p.append(\"input\")\n         .attr(\"type\", \"checkbox\")\n         .attr(\"checked\", true)\n         .attr(\"title\", \"Include in chart\");\n\n p.append(\"div\")\n .attr(\"class\", \"color\")\n .style(\"background-color\", d => colorScale(d));\n`--snip--` \n```", "```\n`--snip--`\nfunction getLicense(d) {\n let license = d.license?.name;\n\n if (!license) {\n return \"No License\";\n } else {\n return license;\n }\n}\n\n❶ let hiddenLicenses = new Set();\n\nfunction update(items) {\n let licenses = new Set(items.map(d => getLicense(d))); \n\n`--snip--`\n\n p.append(\"span\")\n .text(d => d)\n\n return p;\n }\n );\n\n❷ d3.selectAll(\"#key input\").on(\"change\", (e, d) => {\n    if (e.target.checked) {\n    ❸ hiddenLicenses.delete(d);\n    } else {\n    ❹ hiddenLicenses.add(d);\n    }\n\n    console.log(hiddenLicenses);\n  ❺ update(items);\n  });\n}\n\nfunction getUrl() {\n`--snip--` \n```", "```\n`--snip--`\nlet hiddenLicenses = new Set();\n\nfunction update(items) {\n  // Items with the hidden licenses removed\n  let filtered = items.filter(d => !hiddenLicenses.has(getLicense(d)));\n\n let licenses = new Set(items.map(d => getLicense(d)));\n`--snip--` \n```", "```\n`--snip--`\n let xScale = d3.scaleBand()\n  ❶ .domain(filtered.map(d => d.full_name))\n .range([margin.left, width - margin.right])\n .padding(0.3);\n\n let yScale = d3.scaleLinear()\n  ❷ .domain([0, d3.max(filtered, d => d.stargazers_count)])\n .range([height - margin.bottom, margin.top])\n .nice();\n\n`--snip--`\n\n svg\n .selectAll(\"rect\")\n  ❸ .data(filtered, d => d.full_name)\n .join(\"rect\")\n .attr(\"x\", d => xScale(d.full_name))\n .attr(\"y\", d => yScale(d.stargazers_count))\n`--snip--` \n```", "```\n`--snip--`\n let leftAxis = d3\n .axisLeft(yScale)\n .tickFormat(d3.format(\"~s\"));\n\n bottomContainer.call(bottomAxis);\n\n  leftContainer\n  ❶ .transition()\n    .call(leftAxis);\n\n svg\n .selectAll(\"rect\")\n .data(filtered, d => d.full_name)\n .join(\n      enter => enter\n        .append(\"rect\")\n        .attr(\"x\", d => xScale(d.full_name))\n        .attr(\"y\", d => yScale(d.stargazers_count))\n        .attr(\"fill\", d => colorScale(getLicense(d)))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"height\", d => yScale(0) - yScale(d.stargazers_count))\n      ❷ .style(\"opacity\", 0)\n        .transition()\n      ❸ .style(\"opacity\", 1),\n      update => update\n        .transition()\n      ❹ .attr(\"x\", d => xScale(d.full_name))\n        .attr(\"y\", d => yScale(d.stargazers_count))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"height\", d => yScale(0) - yScale(d.stargazers_count)),\n      exit => exit\n        .transition()\n      ❺ .style(\"opacity\", 0)\n      ❻ .remove()\n    )\n .on(\"mouseover\", (e, d) => {\n let info = d3.select(\"#info\");\n info.select(\".repo .value a\").text(d.full_name).attr(\"href\", d.html_url);\n info.select(\".license .value\").text(getLicense(d));\n info.select(\".stars .value\").text(d.stargazers_count);\n });\n`--snip--` \n```", "```\nconst width = 600;\nconst height = 400;\n\nlet svg = d3\n  .select(\"body\")\n  .insert(\"svg\", \"#sidebar\")\n  .attr(\"width\", width)\n  .attr(\"height\", height);\n\nlet margin = {top: 20, right: 10, bottom: 20, left: 50};\n\n// Bottom axis container\nlet bottomContainer = svg\n  .append(\"g\")\n  .attr(\"id\", \"bottom\")\n  .attr(\"transform\", `translate(0, ${height - margin.bottom})`);\n\n// Left axis container\nlet leftContainer = svg\n  .append(\"g\")\n  .attr(\"id\", \"left\")\n  .attr(\"transform\", `translate(${margin.left}, 0)`);\n\nlet chartHeight = (height - margin.bottom) - margin.top;\nlet midPoint = margin.top + chartHeight / 2;\n\nsvg\n  .append(\"text\")\n .text(\"Stars\")\n  .style(\"font-size\", \"14px\")\n  .attr(\"text-anchor\", \"middle\")\n  .attr(\"transform\", `translate(12, ${midPoint}) rotate(270)`);\n\nfunction getLicense(d) {\n  let license = d.license?.name;\n\n  if (!license) {\nreturn \"No License\";\n  } else {\nreturn license;\n  }\n}\n\nlet hiddenLicenses = new Set();\n\nfunction update(items) {\n  // Items with the hidden licenses removed\n  let filtered = items.filter(d => !hiddenLicenses.has(getLicense(d)));\n\n  let licenses = new Set(items.map(d => getLicense(d)));\n  let colorScale = d3.scaleOrdinal()\n.domain(licenses)\n.range(d3.schemeCategory10);\n\n  let xScale = d3.scaleBand()\n.domain(filtered.map(d => d.full_name))\n.range([margin.left, width - margin.right])\n.padding(0.3);\n\n  let yScale = d3.scaleLinear()\n.domain([0, d3.max(filtered, d => d.stargazers_count)])\n.range([height - margin.bottom, margin.top])\n.nice();\n\n  let bottomAxis = d3\n.axisBottom(xScale)\n.tickValues([]);\n\n  let leftAxis = d3\n.axisLeft(yScale)\n.tickFormat(d3.format(\"~s\"));\n\n  bottomContainer.call(bottomAxis);\n\n  leftContainer\n.transition()\n.call(leftAxis);\n\n  svg\n.selectAll(\"rect\")\n.data(filtered, d => d.full_name)\n.join(\nenter => enter\n.append(\"rect\")\n.attr(\"x\", d => xScale(d.full_name))\n.attr(\"y\", d => yScale(d.stargazers_count))\n.attr(\"fill\", d => colorScale(getLicense(d)))\n.attr(\"width\", xScale.bandwidth())\n.attr(\"height\", d => yScale(0) - yScale(d.stargazers_count))\n        .style(\"opacity\", 0)\n        .transition()\n        .style(\"opacity\", 1),\nupdate => update\n        .transition()\n        .attr(\"x\", d => xScale(d.full_name))\n        .attr(\"y\", d => yScale(d.stargazers_count))\n        .attr(\"width\", xScale.bandwidth())\n        .attr(\"height\", d => yScale(0) - yScale(d.stargazers_count)),\nexit => exit\n        .transition()\n        .style(\"opacity\", 0)\n        .remove()\n)\n.on(\"mouseover\", (e, d) => {\nlet info = d3.select(\"#info\");\ninfo.select(\".repo .value a\").text(d.full_name).attr(\"href\", d.html_url);\ninfo.select(\".license .value\").text(getLicense(d));\ninfo.select(\".stars .value\").text(d.stargazers_count);\n});\n\n  d3.select(\"#key\")\n.selectAll(\"p\")\n.data(licenses)\n.join(\nenter => {\n        let p = enter.append(\"p\");\n\np.append(\"input\")\n.attr(\"type\", \"checkbox\")\n.attr(\"checked\", true)\n.attr(\"title\", \"Include in chart\");\n\np.append(\"div\")\n.attr(\"class\", \"color\")\n  .style(\"background-color\", d => colorScale(d));\n\np.append(\"span\")\n.text(d => d)\n\nreturn p;\n}\n);\n\n  d3.selectAll(\"#key input\").on(\"change\", (e, d) => {\nif (e.target.checked) {\nhiddenLicenses.delete(d);\n} else {\nhiddenLicenses.add(d);\n}\n\nconsole.log(hiddenLicenses);\nupdate(items);\n  });\n}\n\nfunction getUrl() {\n  let baseUrl = \"https://api.github.com/search/repositories\";\n\n  let params = {\nq: \"language:javascript stars:>10000\",\nper_page: 20,\nsort: \"stars\"\n  };\n\n  let queryString = Object.entries(params).map(pair => {\nreturn `${pair[0]}=${encodeURIComponent(pair[1])}`;\n  }).join(\"&\");\n\n  return `${baseUrl}?${queryString}`;\n}\n\nlet url = getUrl();\nlet backupUrl = \"https://skilldrick-jscc.s3.us-west-2.amazonaws.com/gh-js-repos.json\";\n\n// Replace url with backupUrl in following line if needed\nd3.json(url).then(data => {\n  update(data.items);\n}); \n```"]