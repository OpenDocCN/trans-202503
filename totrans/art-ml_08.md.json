["```\nqeRF(data, yName, nTree = 500, minNodeSize = 10,\n   holdout = floor(min(1000,0.1 * nrow(data))))\n```", "```\n# fit RF model\n> rfout <- qeRF(vert,'V7',holdout=NULL)\n# new case to predict\n> z <- vert[1,-7]\n> z$V2 <- 18\n# predict\n> predict(rfout,z)\n$predClasses\n[1] \"DH\"\n\n$probs\n     DH    NO   SL\n2 0.532 0.378 0.09\nattr(,\"class\")\n[1] \"matrix\" \"array\"  \"votes\"\n```", "```\n> predict(kout,z)\n$predClasses\n[1] \"DH\"\n\n$probs\n      DH  NO  SL\n[1,] 0.6 0.2 0.2\n```", "```\n> dim(afrsoil)\n[1] 1157 3599\n```", "```\n> names(afrsoil)\n...\n[3547] \"m659.543\" \"m657.615\" \"m655.686\" \"m653.758\" \"m651.829\" \"m649.901\"\n[3553] \"m647.972\" \"m646.044\" \"m644.115\" \"m642.187\" \"m640.258\" \"m638.33\"\n[3559] \"m636.401\" \"m634.473\" \"m632.544\" \"m630.616\" \"m628.687\" \"m626.759\"\n[3565] \"m624.83\"  \"m622.902\" \"m620.973\" \"m619.045\" \"m617.116\" \"m615.188\"\n[3571] \"m613.259\" \"m611.331\" \"m609.402\" \"m607.474\" \"m605.545\" \"m603.617\"\n[3577] \"m601.688\" \"m599.76\"  \"BSAN\"     \"BSAS\"     \"BSAV\"     \"CTI\"\n[3583] \"ELEV\"     \"EVI\"      \"LSTD\"     \"LSTN\"     \"REF1\"     \"REF2\"\n[3589] \"REF3\"     \"REF7\"     \"RELI\"     \"TMAP\"     \"TMFI\"     \"Depth\"\n[3595] \"Ca\"       \"P\"        \"pH\"       \"SOC\"      \"Sand\"\n```", "```\n> set.seed(9999)\n> rfo <- qeRF(afrsoil[,c(1:3578,3597)],'pH',holdout=500)\n> rfo$testAcc\n[1] 0.3894484\n> rfo$baseAcc\n[1] 0.6858574\n```", "```\n> range(afrsoil$pH)\n[1] -1.886946  3.416117\n```", "```\n> predict(rfo,afrsoil[88,1:3594])\n       88\n0.6068828\n```", "```\nctboost <- function(d,s) {\n   # uniform weights to begin\n   wts <- rep(1/n,n)\n   trees <- list()\n   alpha <- vector(length=s)  # alpha[i] = coefficient for tree i\n   for(treeNum in 1:s) {\n      trees[[i]] <- ctree(y ~ x,data=d,weights=wts)\n      preds <- predict(trees[[i]],dx)\n      # update wts, placing larger weight on data points on which\n      # we had the largest errors (regression case) or which we\n      # misclassified (classification case)\n      wts <- (computation not shown)\n      # find latest tree weight\n      alpha[i] <- (computation not shown)\n   }\n   l <- list(trees=trees,treeWts=alpha)\n   class(l) <- 'ctboost'\n   return(l)\n}\n```", "```\npredict.ctboost <- function(ctbObject,newx)\n{\n   trees <- ctbObject$trees\n   alpha <- ctbObject$alpha\n   pred <- 0.0\n   for (i in 1:s) {\n      pred <- pred + alpha[i] * predict(trees[[i]],newx)\n   }\n   return(pred)\n}\n```", "```\nqeGBoost(data, yName, nTree = 100, minNodeSize = 10, learnRate = 0.1,\n    holdout = floor(min(1000, 0.1 * nrow(data))))\n```", "```\n> ds <- read.csv('dataset.csv',stringsAsFactors=TRUE)\n> names(ds)\n[1] \"Date.Of.Test\"             \"Signal..dBm.\"\n[3] \"Speed..m.s.\"              \"Distance.from.site..m.\"\n[5] \"Call.Test.Duration..s.\"   \"Call.Test.Result\"\n[7] \"Call.Test.Technology\"     \"Call.Test.Setup.Time..s.\"\n[9] \"MOS\"\n> ds <- ds[,-1]\n> head(ds)\n  Signal..dBm. Speed..m.s. Distance.from.site..m. Call.Test.Duration..s.\n1          -61       68.80                1048.60                     90\n2          -61       68.77                1855.54                     90\n3          -71       69.17                1685.62                     90\n4          -65       69.28                1770.92                     90\n5         -103        0.82                 256.07                     60\n6          -61       68.86                 452.50                     90\n  Call.Test.Result Call.Test.Technology Call.Test.Setup.Time..s. MOS\n1          SUCCESS                 UMTS                     0.56 2.1\n2          SUCCESS                 UMTS                     0.45 3.2\n3          SUCCESS                 UMTS                     0.51 2.1\n4          SUCCESS                 UMTS                     0.00 1.0\n5          SUCCESS                 UMTS                     3.35 3.6\n6          SUCCESS                 UMTS                     0.00 1.0\n...\n```", "```\n> dim(ds)\n[1] 105828      8\n```", "```\n> set.seed(9999)\n> gbout <- qeGBoost(ds,'MOS',nTree=750,holdout=NULL)\n```", "```\n> ds3 <- ds[3,-8]\n> ds3[,3] <- 1500\n> ds3[,4] <- 62\n> predict(gbout,ds3)\n[1] 2.462538\n```", "```\n> gbm.perf(gbout$gbmOuts)\n```", "```\n> predict(gbout,ds3,newNTree=382)\n[1] 2.45214\n```", "```\n> mean(abs(preds - ds[,8]))\n[1] 0.6142699\n```", "```\n> set.seed(9999)\n> gbout <- qeGBoost(vert,'V7')\n```", "```\n> predict(gbout,vert[12,-7])\n$predClasses\n[1] \"DH\"\n\n$probs\n            DH        NO          SL\n[1,] 0.6283904 0.3694108 0.002198735\n\nattr(,\"class\")\n[1] \"qeGBoost\"\n```"]