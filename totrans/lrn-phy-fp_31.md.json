["```\n{-# OPTIONS -Wall #-}\n{-# LANGUAGE MultiParamTypeClasses #-}\n\nmodule Lorentz where\n\nimport SimpleVec ( R, Vec, (^+^), (*^), (^*), (^/), (><), zeroV, magnitude )\nimport Mechanics1D ( RealVectorSpace(..), Diff(..), rungeKutta4 )\nimport Mechanics3D ( HasTime(..), simulateVis )\nimport CoordinateSystems ( Position(..), VectorField, cart, v3FromPos, origin\n                         , shiftPosition, addVectorFields, visVec )\nimport qualified Vis as V\n```", "```\ndata ParticleFieldState = ParticleFieldState { mass          :: R\n                                             , charge        :: R\n                                             , time          :: R\n                                             , position      :: Position\n                                             , velocity      :: Vec\n                                             , electricField :: VectorField\n                                             , magneticField :: VectorField }\n```", "```\ndata DParticleFieldState = DParticleFieldState { dmdt :: R\n                                               , dqdt :: R\n                                               , dtdt :: R\n                                               , drdt :: Vec\n                                               , dvdt :: Vec\n                                               , dEdt :: VectorField\n                                               , dBdt :: VectorField }\n```", "```\ninstance RealVectorSpace DParticleFieldState where\n    dst1 +++ dst2\n        = DParticleFieldState { dmdt = dmdt dst1  +  dmdt dst2\n                              , dqdt = dqdt dst1  +  dqdt dst2\n                              , dtdt = dtdt dst1  +  dtdt dst2\n                              , drdt = drdt dst1 ^+^ drdt dst2\n                              , dvdt = dvdt dst1 ^+^ dvdt dst2\n                              , dEdt = addVectorFields [dEdt dst1, dEdt dst2]\n                              , dBdt = addVectorFields [dBdt dst1, dBdt dst2]\n                              }\n    scale w dst\n        = DParticleFieldState { dmdt = w *  dmdt dst\n                              , dqdt = w *  dqdt dst\n                              , dtdt = w *  dtdt dst\n                              , drdt = w *^ drdt dst\n                              , dvdt = w *^ dvdt dst\n                              , dEdt = (w *^) . (dEdt dst)\n                              , dBdt = (w *^) . (dBdt dst)\n                              }\n```", "```\ninstance Diff ParticleFieldState DParticleFieldState where\n    shift dt dst st\n        = ParticleFieldState\n          { mass          = mass     st  +  dmdt dst  * dt\n          , charge        = charge   st  +  dqdt dst  * dt\n          , time          = time     st  +  dtdt dst  * dt\n          , position      = shiftPosition (drdt dst ^* dt) (position st)\n          , velocity      = velocity st ^+^ dvdt dst ^* dt\n          , electricField = \\r -> electricField st r ^+^ dEdt dst r ^* dt\n          , magneticField = \\r -> magneticField st r ^+^ dBdt dst r ^* dt\n          }\n```", "```\ninstance HasTime ParticleFieldState where\n    timeOf = time\n```", "```\nlorentzForce :: ParticleFieldState -> Vec\nlorentzForce (ParticleFieldState _m q _t r v eF bF)\n    = q *^ (eF r ^+^ v >< bF r)\n```", "```\nnewtonSecondPFS :: ParticleFieldState -> DParticleFieldState\nnewtonSecondPFS st\n    = let v = velocity st\n          a = lorentzForce st ^/ mass st\n      in DParticleFieldState { dmdt = 0           -- dm/dt\n                             , dqdt = 0           -- dq/dt\n                             , dtdt = 1           -- dt/dt\n                             , drdt = v           -- dr/dt\n                             , dvdt = a           -- dv/dt\n                             , dEdt = const zeroV -- dE/dt\n                             , dBdt = const zeroV -- dB/dt\n                             }\n```", "```\npfsUpdate :: R  -- time step\n          -> ParticleFieldState -> ParticleFieldState\npfsUpdate dt = rungeKutta4 dt newtonSecondPFS\n```", "```\ndefaultPFS :: ParticleFieldState\ndefaultPFS = ParticleFieldState { mass          = 0\n                                , charge        = 0\n                                , time          = 0\n                                , position      = origin\n                                , velocity      = zeroV\n                                , electricField = const zeroV\n                                , magneticField = const zeroV }\n```", "```\npfsVisObject :: R  -- cube width\n             -> ParticleFieldState -> V.VisObject R\npfsVisObject width st\n    = let r = position st\n          xs = [-width/2, width/2]\n          es :: [(Position,Vec)]\n          es = [(cart x y z, electricField st (cart x y z))\n                    | x <- xs, y <- xs, z <- xs]\n          maxE = maximum $ map (magnitude . snd) es\n          bs :: [(Position,Vec)]\n          bs = [(cart x y z, magneticField st (cart x y z))\n                    | x <- xs, y <- xs, z <- xs]\n          maxB = maximum $ map (magnitude . snd) bs\n          metersPerVis = width/2\n      in V.VisObjects [ vectorsVisObject metersPerVis (2*maxE) es V.blue\n                      , vectorsVisObject metersPerVis (2*maxB) bs V.red\n                      , V.Trans (v3FromPos (scalePos metersPerVis r))\n                            (V.Sphere 0.1 V.Solid V.green)\n                      ]\n```", "```\nvectorsVisObject :: R  -- scale factor, meters per Vis unit\n                 -> R  -- scale factor, vector field units per Vis unit\n                 -> [(Position,Vec)]  -- positions to show the field\n                 -> V.Color\n                 -> V.VisObject R\nvectorsVisObject metersPerVis unitsPerVis pvs color\n    = V.VisObjects [V.Trans (v3FromPos (scalePos metersPerVis r)) $\n                     visVec color (v ^/ unitsPerVis) | (r,v) <- pvs]\n```", "```\nscalePos :: R -> Position -> Position\nscalePos metersPerVis (Cart x y z)\n    = Cart (x/metersPerVis) (y/metersPerVis) (z/metersPerVis)\n```", "```\nanimatePFS :: R                   -- time scale factor\n           -> Int                 -- animation rate\n           -> R                   -- display width\n           -> ParticleFieldState  -- initial state\n           -> IO ()\nanimatePFS tsf ar width st\n    = simulateVis tsf ar st (pfsVisObject width) pfsUpdate\n```", "```\n{-# OPTIONS -Wall #-}\n\nimport SimpleVec ( vec )\nimport Electricity ( elementaryCharge )\nimport Lorentz ( ParticleFieldState(..), animatePFS, defaultPFS )\n\nmain :: IO ()\nmain = animatePFS 1e-5 30 0.05\n       ( defaultPFS { mass          = 1.673e-27  -- proton in kg\n                    , charge        = elementaryCharge\n                    , velocity      = vec 0 2000 0\n                    , electricField = \\_ -> vec 0 20 0\n                    , magneticField = \\_ -> vec 0  0 0.01 } )\n```", "```\n{-# OPTIONS -Wall #-}\n\nimport SimpleVec ( vec )\nimport Electricity ( elementaryCharge )\nimport CoordinateSystems ( cart )\nimport Charge ( protonOrigin )\nimport ElectricField ( eField, epsilon0 )\nimport Lorentz ( ParticleFieldState(..), animatePFS, defaultPFS )\n\nmain :: IO ()\nmain = animatePFS period 30 (4*bohrRadius)\n       ( defaultPFS { mass          = electronMass\n                    , charge        = -elementaryCharge  -- electron charge\n                    , position      = cart bohrRadius 0 0\n                    , velocity      = vec 0 v0 0\n                    , electricField = eField protonOrigin } )\n           where electronMass = 9.109e-31  -- kg\n                 bohrRadius   = 0.529e-10  -- meters\n                 v0 = elementaryCharge\n                      / sqrt (4 * pi * epsilon0 * electronMass * bohrRadius)\n                 period = 2 * pi * bohrRadius / v0\n```", "```\nnewtonSecondPFS' :: [ParticleFieldState -> Vec]\n                 -> ParticleFieldState -> DParticleFieldState\nnewtonSecondPFS' fs st = undefined fs st\n```"]