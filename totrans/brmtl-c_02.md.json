["```\n$ **xcode-select --install**\n```", "```\n$ **sudo apt-get install build-essential**\n$ **sudo apt-get install manpages-dev**\n```", "```\n$ **dnf groupinstall \"Development Tools\"**\n```", "```\n$ **gcc**\ngcc: fatal error: no input files\ncompilation terminated.\n```", "```\n$ **mkdir hello**\n$ **cd hello**\n```", "```\n#include <stdio.h>\nint main()\n{\n    printf(\"Hello World!\\n\");\n    return (0);\n}\n```", "```\n$ **gcc -o hello hello.c**\n```", "```\n$ **gcc -o hello.exe hello.c**\n```", "```\n$ **./hello**\nHello World!\n```", "```\n$ **hello**\nHello World!\n```", "```\n**intxxx main()**\n```", "```\n$ **gcc -o hello hello.c**\nhello.c:2:1: error: unknown type name 'intxxx'\n intxxx main()\n ^\n```", "```\n**printf(\"Hello World!\\n\")**\n```", "```\n$ **gcc -o hello hello.c**\nhello.c: In function 'main':\nhello.c:5:5: error: expected ';' before 'return'\n return (0);\n ^\n```", "```\n#include <stdio.h>\n```", "```\nint main()\n```", "```\n{\n...\n}\n```", "```\n printf(\"Hello World!\\n\");\n```", "```\n return (0);\n```", "```\n/* Hello World â€“ A nothing program */\n```", "```\n/*\n * Hello World -- not the most complicated program in\n *      the universe but useful as a starting point.\n *\n * Usage:\n *      1\\. Run the program.\n *      2\\. See the world.\n */\n```", "```\nCFLAGS=-ggdb -Wall -Wextra\n\nall: hello\n\nhello: hello.c\n       gcc $(CFLAGS) -o hello hello.c\n```", "```\nCFLAGS=-ggdb -Wall -Wextra\n\nall: hello.exe\n\nhello.exe: hello.c\n       gcc $(CFLAGS) -o hello.exe hello.c\n```", "```\n$ **make**\ngcc -ggdb -Wall -Wextra -o hello hello.c\n```", "```\nmake: Nothing to be done for 'all'.\n```", "```\n$ **gcc -E hello.c >hello.i**\n```", "```\nextern int printf (const char *__restrict __format, ...);\n\nextern int sprintf (char *__restrict __s,\n      const char *__restrict __format, ...) __attribute__ ((__nothrow__));\n```", "```\n$ **gcc -S hello.c**\n```", "```\n .file   \"hello.c\"\n        .section        .rodata\n.LC0:\n        .string \"Hello World!\"\n```", "```\n$ **gcc -Wall -Wextra -g -Wextra -Wa,-a=hello.lst -c hello.c**\n```", "```\n4                            .section        .rodata\n5                    .LC0:\n6 0000 48656C6C              .string \"Hello World!\"\n6      6F20776F\n6      726C6421\n6      00\n```", "```\n15 0000 55                    pushq   %rbp\n16                            .cfi_def_cfa_offset 16\n17                            .cfi_offset 6, -16\n18 0001 4889E5                movq    %rsp, %rbp\n19                            .cfi_def_cfa_register 6\n12:hello.c       ****     printf(\"Hello World!\\n\");\n20                            .loc 1 12 0\n21 0004 BF000000              movl    $.LC0, %edi\n21      00\n22 0009 E8000000              call    puts\n22      00\n```", "```\nputs(\"Hello World!\");\n```", "```\n$ **gcc -Wall -Wextra -static -Wl,-Map=hello.map -o hello hello.o**\n```", "```\n .text          0x000000000040fa90      0x1c8 /usr/lib/gcc/x86_64-linux-gnu/5/../../../                x86_64-linux-gnu/libc.a(ioputs.o)\n                0x000000000040fa90                puts\n                0x000000000040fa90                _IO_puts\n *fill*         0x000000000040fc58        0x8\n```", "```\nCFLAGS=-Wall -Wextra -ggdb\n\nall: hello hello.i hello.s\n\nhello.o: hello.c\n        gcc $(CFLAGS) -Wa,-a=hello.lst -c hello.c\n\nhello: hello.o\n        gcc $(CFLAGS) -static -Wl,-Map=hello.map -o hello hello.o\n\nhello.i: hello.c\n        gcc -E hello.c >hello.i\n\nhello.s: hello.c\n        gcc -S hello.c\n\n# Type \"make verbose\" to see the whole command line\nverbose:\n        gcc -v $(CFLAGS) -Wextra -c hello.c\n\nclean:\n        rm -f hello hello.i hello.s hello.o\n```", "```\n$ **make**\n```", "```\ngcc -E hello.c >hello.i\n```", "```\n$ `(Change hello.c)`\n$ **make hello.i**\ngcc =E hello.c > hello.i\n```", "```\n$ **make clean**\n```"]