- en: '**14'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SUBDOMAIN TAKEOVER**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A *subdomain takeover* vulnerability occurs when a malicious attacker is able
    to claim a subdomain from a legitimate site. Once the attacker controls the subdomain,
    they either serve their own content or intercept traffic.
  prefs: []
  type: TYPE_NORMAL
- en: '**Understanding Domain Names**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To understand how a subdomain takeover vulnerability works, we’ll first need
    to look at how you register and use domain names. Domains are the URLs that access
    websites, and they’re mapped to IP addresses by Domain Name Servers (DNS). Domains
    are organized as a hierarchy, and each part is separated by a period. The final
    part of a domain—the rightmost part—is a *top-level domain*. Examples of top-level
    domains include *.com*, *.ca*, *.info*, and so on. The next level up in the domain
    hierarchy is the domain name that people or companies register. This part of the
    hierarchy accesses websites. For example, let’s say *<example>.com* is a registered
    domain with a *.com* top-level domain. The next step in the hierarchy is the focus
    of this chapter: *subdomains*. Subdomains comprise the leftmost part of URLs and
    can host separate websites on the same registered domain. For example, if Example
    Company had a customer-facing website but also needed a separate email website,
    it could have separate *www.<example>.com* and *webmail.<example>.com* subdomains.
    Each of these subdomains could serve its own site content.'
  prefs: []
  type: TYPE_NORMAL
- en: Site owners can create subdomains using several methods, but the two most common
    methods are adding an A record or a CNAME record in a site’s DNS records. An *A
    record* maps a site name to one or more IP addresses. A *CNAME* should be a unique
    record that maps a site name to another site name. Only site administrators can
    create DNS records for a site (unless you find a vulnerability, of course).
  prefs: []
  type: TYPE_NORMAL
- en: '**How Subdomain Takeovers Work**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A subdomain takeover occurs when a user can control the IP addresses or URLs
    that an A record or a CNAME record points to. A common example of this vulnerability
    involves the website hosting platform Heroku. In a typical workflow, a site developer
    creates a new application and hosts it on Heroku. Then the developer creates a
    CNAME record for a subdomain of their main site and points that subdomain to Heroku.
    Here’s a hypothetical example where this situation can go wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: Example Company registers an account on the Heroku platform and doesn’t use
    SSL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Heroku assigns Example Company the subdomain *[unicorn457.herokuapp.com](http://unicorn457.herokuapp.com)*
    for its new application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Example Company creates a CNAME record with its DNS provider pointing the subdomain
    *test.<example>.com* to *[unicorn457.herokuapp.com](http://unicorn457.herokuapp.com)*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a couple of months, Example Company decides to remove its *test.<example>.com*
    subdomain. It closes its Heroku account and deletes the site content from its
    servers. But it doesn’t delete the CNAME record.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A malicious person notices the CNAME record pointing to an unregistered URL
    on Heroku and claims the domain *unicorn457.heroku.com*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The attacker can now serve their own content from *test.<example>.com*, which
    appears to be a legitimate Example Company site because of the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, this vulnerability often occurs when a site doesn’t delete a
    CNAME (or an A record) pointing to an external site that an attacker can claim.
    Commonly used external services that have been associated with subdomain takeovers
    include Zendesk, Heroku, GitHub, Amazon S3, and SendGrid.
  prefs: []
  type: TYPE_NORMAL
- en: 'The impact of a subdomain takeover depends on the configuration of the subdomain
    and parent domain. For example, in “Web Hacking Pro Tips #8” (*[https://www.youtube.com/watch?v=76TIDwaxtyk](https://www.youtube.com/watch?v=76TIDwaxtyk)*),
    Arne Swinnen describes how cookies can be scoped so browsers send stored cookies
    to only the appropriate domain. But a cookie can be scoped so browsers send cookies
    to all subdomains by specifying the subdomain only as a period, such as in the
    value *.<example>.com*. When a site has this configuration, browsers will send
    *<example>.com* cookies to any Example Company subdomain a user visits. If an
    attacker controls *test.<example>.com*, they could steal *<example>.com* cookies
    from targets who visit the malicious *test.<example>.com* subdomain.'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, if the cookies aren’t scoped this way, a malicious attacker could
    still create a site on the subdomain that mimics the parent domain. If the attacker
    includes a login page on the subdomain, they could potentially phish users into
    submitting their credentials. Two common attacks are made possible by subdomain
    takeovers. But in the following examples, we’ll also look at other attacks, such
    as email intercepts.
  prefs: []
  type: TYPE_NORMAL
- en: Finding subdomain takeover vulnerabilities involves looking up the DNS records
    for a site. A great way to do this is to use the KnockPy tool, which enumerates
    subdomains and searches for common subdomain takeover related error messages from
    services like S3\. KnockPy comes with a list of common subdomains to test, but
    you can also provide your own list of subdomains. The GitHub repository SecLists
    (*[https://github.com/danielmiessler/SecLists/](https://github.com/danielmiessler/SecLists/)*)
    also lists commonly found subdomains among its many other security-related lists.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ubiquiti Subdomain Takeover**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Difficulty:** Low'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL:** *http://assets.goubiquiti.com/*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source:** *[https://hackerone.com/reports/109699/](https://hackerone.com/reports/109699/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date reported:** January 10, 2016'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounty paid:** $500'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Simple Storage, or S3, is a file hosting service provided by Amazon Web
    Services (AWS). An account on S3 is a *bucket* that you can access using a special
    AWS URL, which begins with the bucket name. Amazon uses a global namespace for
    its bucket URLs, which means that once someone registers a bucket, no one else
    can register it. For example, if I registered the bucket *<example>*, it would
    have the URL *<example>.s3.amazonaws.com* and I would own it. Amazon also allows
    users to register any name they want as long as it hasn’t already been claimed,
    meaning an attacker can claim any unregistered S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: In this report, Ubiquiti created a CNAME record for *assets.goubiquiti.com*
    and pointed it to the S3 bucket *uwn-images*. This bucket was accessible via the
    URL *uwn-images.s3.website.us-west-1.amazonaws.com*. Because Amazon has servers
    around the world, the URL includes information about the Amazon geographical region
    where the bucket is located. In this case, *us-west-1* is Northern California.
  prefs: []
  type: TYPE_NORMAL
- en: But Ubiquiti either hadn’t registered the bucket or had removed it from its
    AWS account without deleting the CNAME record. So, visiting *assets.goubiquiti.com*
    would still attempt to serve content from S3\. As a result, a hacker claimed the
    S3 bucket and reported the vulnerability to Ubiquiti.
  prefs: []
  type: TYPE_NORMAL
- en: '***Takeaways***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Keep an eye out for DNS entries that point to third-party services like S3\.
    When you find such entries, confirm whether the company has properly configured
    that service. In addition to doing an initial check on a website’s DNS records,
    you can continually monitor entries and services using automated tools like KnockPy.
    It’s best to do so just in case a company removes a subdomain but forgets to update
    its DNS records.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scan.me Pointing to Zendesk**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Difficulty:** Low'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL:** *http://support.scan.me/*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source:** *[https://hackerone.com/reports/114134/](https://hackerone.com/reports/114134/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date reported:** February 2, 2016'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounty paid:** $1,000'
  prefs: []
  type: TYPE_NORMAL
- en: The Zendesk platform offers customer support service on a website’s subdomain.
    For instance, if Example Company used Zendesk, its associated subdomain might
    be *support.<example>.com*.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the previous Ubiquiti example, owners of the site *scan.me* created
    a CNAME record pointing *support.scan.me* to *[scan.zendesk.com](http://scan.zendesk.com)*.
    Later, Snapchat acquired *scan.me*. Close to the time of acquisition, *support.scan.me*
    released the subdomain on Zendesk but forgot to delete the CNAME record. The hacker
    harry_mg found the subdomain, claimed *[scan.zendesk.com](http://scan.zendesk.com)*,
    and served his own content from Zendesk on it.
  prefs: []
  type: TYPE_NORMAL
- en: '***Takeaways***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Keep an eye out for company acquisitions that can change how a company provides
    services. As optimizations take place between the parent company and the acquisition,
    some subdomains might be deleted. Such changes could result in subdomain takeovers
    if companies don’t update DNS entries. Again, because subdomains can change at
    any time, it’s best to continually check records over time after a company announces
    an acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shopify Windsor Subdomain Takeover**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Difficulty:** Low'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL:** *http://windsor.shopify.com/*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source:** *[https://hackerone.com/reports/150374/](https://hackerone.com/reports/150374/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date reported:** July 10, 2016'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounty paid:** $500'
  prefs: []
  type: TYPE_NORMAL
- en: Not all subdomain takeovers involve registering an account on a third-party
    service. In July 2016, the hacker zseano found that Shopify had created a CNAME
    for *windsor.shopify.com* that pointed to *aislingofwindsor.com*. He discovered
    this by searching for all Shopify subdomains on the site *[crt.sh](http://crt.sh)*,
    which tracks all SSL certificates registered by a site and the subdomains the
    certificates are associated with. This information is available because all SSL
    certificates must register with a certificate authority for browsers to confirm
    the certificate’s authenticity when you visit their sites. The site *[crt.sh](http://crt.sh)*
    tracks these registrations over time and makes the information available to visitors.
    Sites can also register wildcard certificates, which provide SSL protections to
    any subdomain of the site. On *[crt.sh](http://crt.sh)*, this is denoted by an
    asterisk in the place of the subdomain.
  prefs: []
  type: TYPE_NORMAL
- en: When a site registers a wildcard certificate, *[crt.sh](http://crt.sh)* can’t
    identify the subdomains where the certificate is used, but each certificate includes
    a unique hash value. Another site, *[censys.io](http://censys.io)*, tracks certificate
    hashes and the subdomains they’re used on by scanning the internet. Searching
    *[censys.io](http://censys.io)* for a wildcard certificate hash might allow you
    to identify new subdomains.
  prefs: []
  type: TYPE_NORMAL
- en: By browsing through the list of subdomains on *[crt.sh](http://crt.sh)* and
    visiting each, zseano noticed that *windsor.shopify.com* was returning a 404 page
    not found error. This meant Shopify was either serving no content from the subdomain
    or it no longer owned *aislingofwindsor.com*. Testing the latter, zseano visited
    a domain registration site, searched for *aislingofwindsor.com*, and found he
    could buy it for $10\. He did and reported the vulnerability to Shopify as a subdomain
    takeover.
  prefs: []
  type: TYPE_NORMAL
- en: '***Takeaways***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not all subdomains involve the use of third-party services. If you find a subdomain
    that is pointed to another domain and is returning a 404 page, check whether you
    can register that domain. The site *[crt.sh](http://crt.sh)* provides a great
    reference of SSL certificates registered by sites as an initial step to identifying
    subdomains. If wildcard certificates have been registered on *[crt.sh](http://crt.sh)*,
    search for the certificate hash on *[censys.io](http://censys.io)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Snapchat Fastly Takeover**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Difficulty:** Medium'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL:** *http://fastly.sc-cdn.net/takeover.html*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source:** *[https://hackerone.com/reports/154425/](https://hackerone.com/reports/154425/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date reported:** July 27, 2016'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounty paid:** $3,000'
  prefs: []
  type: TYPE_NORMAL
- en: Fastly is a *content delivery network (CDN)*. A CDN stores copies of content
    on servers across the world so content can be delivered in a shorter time and
    distance for users requesting it.
  prefs: []
  type: TYPE_NORMAL
- en: 'On July 27, 2016, the hacker Ebrietas reported to Snapchat that it had a DNS
    misconfiguration on its domain *sc-cdn.net*. The URL *http://fastly.sc-cdn.net*
    had a CNAME record that pointed to a Fastly subdomain that Snapchat had not properly
    claimed. At the time, Fastly allowed users to register custom subdomains if users
    were encrypting their traffic with Transport Layer Security (TLS) and using the
    Fastly shared wildcard certificate to do so. Misconfiguring the custom subdomain
    resulted in an error message on the domain that read “Fastly error: unknown domain:
    *<misconfigured domain>*. Please check that this domain has been added to a service.”'
  prefs: []
  type: TYPE_NORMAL
- en: Before reporting the bug, Ebrietas looked up the domain *sc-cdn.net* on *[censys.io](http://censys.io)*
    and confirmed Snapchat’s ownership of the domain by using the registration information
    on the domain’s SSL certificate. This is significant because the domain *sc-cdn.net*
    doesn’t explicitly include any identifying information about Snapchat the way
    *[snapchat.com](http://snapchat.com)* does. He also configured a server to receive
    traffic from the URL to confirm the domain was actually in use.
  prefs: []
  type: TYPE_NORMAL
- en: When resolving the report, Snapchat confirmed that a very small subset of users
    were using an old version of their app, which made requests to this subdomain
    for unauthenticated content. The users’ configuration was later refreshed and
    pointed to another URL. In theory, an attacker could have served malicious files
    to users for that limited amount of time through the subdomain.
  prefs: []
  type: TYPE_NORMAL
- en: '***Takeaways***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Be on the lookout for sites pointing to services that return error messages.
    When you find an error, confirm how those services are used by reading their documentation.
    Then check whether you can find misconfigurations that allow you to take over
    the subdomain. Additionally, always go the extra steps to confirm what you think
    are vulnerabilities. In this case, Ebrietas looked up the SSL certificate information
    to confirm that Snapchat owned the domain before reporting. Then he configured
    his server to receive requests, making sure Snapchat was using the domain.
  prefs: []
  type: TYPE_NORMAL
- en: '**Legal Robot Takeover**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Difficulty:** Medium'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL:** *https://api.legalrobot.com/*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source:** *[https://hackerone.com/reports/148770/](https://hackerone.com/reports/148770/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date reported:** July 1, 2016'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounty paid:** $100'
  prefs: []
  type: TYPE_NORMAL
- en: Even when sites configure their subdomains correctly on third-party services,
    those services may themselves be vulnerable to misconfigurations. This is what
    Frans Rosen found on July 1, 2016, when he submitted a report to Legal Robot.
    He notified the company that he had a DNS CNAME entry for *api.legalrobot.com*
    pointing to *[Modulus.io](http://Modulus.io)*, which he could take over.
  prefs: []
  type: TYPE_NORMAL
- en: As you likely recognize by now, after seeing such an error page, a hacker’s
    next step should be to visit the service to claim the subdomain. But attempting
    to claim *api.legalrobot.com* resulted in an error because Legal Robot had already
    claimed it.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of walking away, Rosen tried to claim the wildcard subdomain for Legal
    Robot, **.legalrobot.com*, which was available. Modulus’s configuration allowed
    for wildcard subdomains to override more specific subdomains, which included *api.legalrobot.com*
    in this case. After claiming the wildcard domain, Rosen was able to host his own
    content at *api.legalrobot.com*, as shown in [Figure 14-1](ch14.xhtml#ch14fig01).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/14fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-1: HTML page source provided as a proof of concept for the subdomain
    takeover claimed by Frans Rosen*'
  prefs: []
  type: TYPE_NORMAL
- en: Note the content Rosen hosted in [Figure 14-1](ch14.xhtml#ch14fig01). Rather
    than publishing an embarrassing page stating the subdomain had been taken over,
    he used a nonintrusive text page with an HTML comment verifying that he was responsible
    for the content.
  prefs: []
  type: TYPE_NORMAL
- en: '***Takeaways***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When sites rely on third-party services to host a subdomain, they’re relying
    on the security of that service as well. In this case, Legal Robot thought it
    had properly claimed its subdomain on Modulus when in fact the service had a vulnerability
    that allowed wildcard subdomains to override all other subdomains. Also keep in
    mind that if you’re able to claim a subdomain, it’s best to use a nonintrusive
    proof of concept to avoid embarrassing the company you’re reporting to.
  prefs: []
  type: TYPE_NORMAL
- en: '**Uber SendGrid Mail Takeover**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Difficulty:** Medium'
  prefs: []
  type: TYPE_NORMAL
- en: '**URL:** *https://em.uber.com/*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source:** *[https://hackerone.com/reports/156536/](https://hackerone.com/reports/156536/)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Date reported:** August 4, 2016'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bounty paid:** $10,000'
  prefs: []
  type: TYPE_NORMAL
- en: SendGrid is a cloud-based email service. At the time of this writing, Uber was
    one of its customers. As the hacker Rojan Rijal was reviewing Uber’s DNS records,
    he noticed a CNAME record for *em.uber.com* pointing to SendGrid.
  prefs: []
  type: TYPE_NORMAL
- en: Because Uber had a SendGrid CNAME, Rijal decided to poke around the service
    to confirm how Uber was configured. His first step was to confirm the services
    provided by SendGrid and whether it allowed for content hosting. It didn’t. Digging
    into the SendGrid documentation, Rijal came across a different option called white
    labeling. White labeling is a functionality that allows internet service providers
    to confirm that SendGrid has a domain’s permission to send an email on the domain’s
    behalf. This permission is granted by creating *mail exchanger (MX)*, records
    for a site that points to SendGrid. An MX record is a type of DNS record that
    specifies a mail server responsible for sending and receiving email on behalf
    of a domain. Recipient email servers and services query DNS servers for these
    records to verify an email’s authenticity and to prevent spam.
  prefs: []
  type: TYPE_NORMAL
- en: 'The white labeling functionality caught Rijal’s eye because it involved trusting
    a third-party service provider to manage an Uber subdomain. When Rijal reviewed
    the DNS entries for *em.uber.com*, he confirmed that an MX record was pointing
    to *mx.sendgrid.net*. But only site owners can create DNS records (assuming there’s
    no other vulnerability to abuse), so Rijal couldn’t modify Uber’s MX records directly
    to takeover the subdomain. Instead, he turned to SendGrid’s documentation, which
    described another service called Inbound Parse Webhook. This service allows customers
    to parse attachments and contents of incoming emails, then send the attachments
    to a specified URL. To use the functionality, sites need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an MX record of a domain/hostname or subdomain and point it to *mx.sendgrid.net*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Associate the domain/hostname and a URL in the parse API settings page with
    the Inbound Parse Webhook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bingo. Rijal already confirmed that the MX record existed, but Uber hadn’t set
    up the second step. Uber hadn’t claimed the *em.uber.com* subdomain as an Inbound
    Parse Webhook. Rijal claimed the domain as his own and set up a server to receive
    the data sent by the SendGrid parse API. After confirming he could receive emails,
    he stopped intercepting them and reported the issue to Uber and SendGrid. As part
    of the fix, SendGrid confirmed that it had added an additional security check,
    requiring accounts to verify their domain before allowing an Inbound Parse Webhook.
    As a result, the security check should protect other sites from a similar exploit.
  prefs: []
  type: TYPE_NORMAL
- en: '***Takeaways***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This report demonstrates how valuable third-party documentation can be. By reading
    the developer documentation, learning what services SendGrid provides, and identifying
    how those services are configured, Rijal found a vulnerability in the third-party
    service that impacted Uber. It’s incredibly important to explore all functionality
    that third-party services offer when a target site is using their services. EdOverflow
    maintains a list of vulnerable services, which you can find at *[https://github.com/EdOverflow/can-i-take-over-xyz/](https://github.com/EdOverflow/can-i-take-over-xyz/)*.
    But even if his list identifies a service as protected, be sure to double check
    or look for alternative methods, like Rijal did.
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Subdomain takeovers can simply be caused by a site with an unclaimed DNS entry
    pointing to a third-party service. Examples in this chapter include Heroku, Fastly,
    S3, Zendesk, SendGrid, and unregistered domains, but other services are also vulnerable
    to this type of bug. You can find these vulnerabilities using tools like KnockPy,
    *[crt.sh](http://crt.sh)*, and *[censys.io](http://censys.io)* as well as other
    tools in [Appendix A](app01.xhtml#app01).
  prefs: []
  type: TYPE_NORMAL
- en: Managing a takeover might require additional ingenuity, such as when Rosen claimed
    a wildcard domain and Rijal registered a custom webhook. When you’ve found a potential
    vulnerability, but the basic methods to exploit it don’t work, be sure to read
    the service documentation. Additionally, explore all functionality offered regardless
    of whether the target site is using it or not. When you do find a takeover, be
    sure to provide proof of the vulnerability, but do so in a respectful and unobtrusive
    way.
  prefs: []
  type: TYPE_NORMAL
