["```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Program(top_level_defs)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Program(top_level_defs)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global, params,\n         instructions)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global,\n         [Mov(Reg(DI), param1),\n          Mov(Reg(SI), param2),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy next four parameters from registers>,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Stack(16), param7),\n          Mov(Stack(24), param8),</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">\n          <copy remaining parameters from stack></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">]</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+\n         instructions)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global, init)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global, init)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Program(top_levels)</samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Book_11\">Print out each top-level construct. On Linux, add at end of file:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.section .note.GNU-stack,\"\",@progbits</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global, instructions)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.text</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n    pushq    %rbp\n    movq     %rsp, %rbp</samp> \n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><instructions></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global, init)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.bss</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment-directive>\n<name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n    .zero 4</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.data</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment-directive>\n<name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n    .long</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><init></samp></samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Book_11\">If</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">global</samp> <samp class=\"SANS_Futura_Std_Book_11\">is true:</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.globl</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><identifier></samp>\n<samp class=\"SANS_Futura_Std_Book_11\">Otherwise, omit this directive.</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movl   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Ret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movq    %rbp, %rsp\npopq    %rbp\nret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Unary(unary_operator, operand)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><unary_operator>     <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(binary_operator, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><binary_operator>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Idiv(operand)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">idivl  </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cdq</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cdq</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">AllocateStack(int)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">subq    $</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, %rsp</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">DeallocateStack(int)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">addq    $</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, %rsp</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Push(operand)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">pushq  </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Call(label)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n<samp class=\"SANS_Futura_Std_Book_11\">or</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">@PLT</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(operand, operand)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cmpl   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Jmp(label)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">jmp     .L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">JmpCC(cond_code, label)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">j</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code>     </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">SetCC(cond_code, operand)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">set</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code>    <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Label(label)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Program(top_level_defs</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><all StaticConstant constructs for\n       floating-point constants></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name,\n         global,\n         params,\n         instructions)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global, \n  [</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy Reg(DI) into first int param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy Reg(SI) into second int param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy next four int params/eightbytes from registers></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n    Mov(Double,\n        Reg(XMM0),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">       <first double param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Double,\n        Reg(XMM1),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">       <second double param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy next six double params/eightbytes from registers></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy Memory(BP, 16) into first stack param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy Memory(BP, 24) into second stack param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy remaining params/eightbytes from stack></samp><samp class=\"SANS_Futura_Std_Book_11\">]</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+\n  instructions)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Function(name, global,\n    [Mov(Quadword,\n        Reg(DI),\n        Memory(BP, -8)),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy Reg(SI) into first int param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy Reg(DX) into second int param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy next three int params/eightbytes from registers></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n    Mov(Double,\n        Reg(XMM0),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">       <first double param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),\n    Mov(Double,\n        Reg(XMM1),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">       <second double param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy next six double params/eightbytes from registers></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy Memory(BP, 16) into first stack param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy Memory(BP, 24) into second stack param/eightbyte></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">   <copy remaining params/eightbytes from stack></samp><samp class=\"SANS_Futura_Std_Book_11\">]</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+\n  instructions)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global, t,\n               init_list)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment of t></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n               init_list)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticConstant(name, t, init)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticConstant(name,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment of t></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, init)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, Memory(BP, -8), Reg(AX))\nMov(Quadword,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <first eightbyte of return value></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     Memory(AX, 0))\n Mov(Quadword,</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <second eightbyte of return value></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     Memory(AX, 8))</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy rest of return value></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Ret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><move integer parts of return value into RAX, RDX>\n<move double parts of return value into XMM0, XMM1></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Ret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Ret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), src)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), dst)\nSetCC(E, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(Xor, Double, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCmp(Double, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), dst)\nSetCC(E, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Unary(Negate, src, dst)</samp>\n<samp class=\"SANS_Futura_Std_Book_11\">(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">double</samp> <samp class=\"SANS_Futura_Std_Book_11\">negation)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Double, src, dst)\nBinary(Xor, Double, Data(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><negative-zero></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0), dst)</samp>\n<samp class=\"SANS_Futura_Std_Book_11\">And add a top-level constant:</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticConstant(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><negative-zero></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 16,\n                DoubleInit(-0.0))</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, dst)\nUnary(unary_operator,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, dst)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(Divide, src1,\n       src2, dst)</samp>\n<samp class=\"SANS_Futura_Std_Book_11\">(integer division)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, Reg(AX))\nCdq(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nIdiv(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Reg(AX), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, Reg(AX))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), Reg(DX))\nDiv(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Reg(AX), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(Remainder, src1,\n       src2, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, Reg(AX))\nCdq(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">) \ndiv(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Reg(DX), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, Reg(AX))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), Reg(DX))\nDiv(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Reg(DX), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(arithmetic_operator, src1,\n       src2, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src1, dst)\nBinary(arithmetic_operator,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(relational_operator, src1,\n      src2, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src1 type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src2, src1)\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), dst)\nSetCC(relational_operator, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Jmp(target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">JumpIfZero(condition,\n           target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><condition type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), condition)\nJmpCC(E, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(Xor, Double, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCmp(Double, condition, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nJmpCC(E, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">JumpIfNotZero(condition,\n              target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><condition type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Imm(0), condition)\nJmpCC(NE, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Binary(Xor, Double, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCmp(Double, condition, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nJmpCC(NE, target)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src, 0),\n     PseudoMem(dst, 0))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><next chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),\n     PseudoMem(dst,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy remaining chunks></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0),\n     PseudoMem(dst, 0))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><next chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),\n     PseudoMem(dst,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy remaining chunks></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0))</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src, 0),\n     Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><next chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),\n     Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy remaining chunks></samp></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Lea(src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">AddPtr(ptr, index, scale,\n        dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nLea(Memory(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, index * scale), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(Quadword, index, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nLea(Indexed(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, scale), dst)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(Quadword, ptr, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(Quadword, index, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nBinary(Mult, Quadword, Imm(scale), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nLea(Indexed(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 1), dst)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">CopyToOffset(src, dst,\n             offset)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, PseudoMem(dst, offset))</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src, 0),\n     PseudoMem(dst, offset))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><next chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),\n     PseudoMem(dst, offset</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy remaining chunks></samp></samp></samp></samp>\n```", "``` <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">CopyFromOffset(src,\n               offset,\n               dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, PseudoMem(src, offset), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src, offset),\n     PseudoMem(dst, 0))\nMov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><next chunk type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,\n     PseudoMem(src, offset</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">),\n     PseudoMem(dst,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><first chunk size></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><copy remaining chunks></samp></samp></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Label(identifier)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">FunCall(fun_name, args,\n         dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Lea(dst, Reg(DI))</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><fix stack alignment></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><move arguments to general-purpose registers, starting with RSI></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><move arguments to XMM registers>\n<push arguments onto the stack></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Call(fun_name)</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><deallocate arguments/padding></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><fix stack alignment>\n<move arguments to general-purpose registers>\n<move arguments to XMM registers>\n<push arguments onto the stack></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Call(fun_name)</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><deallocate arguments/padding>\n<move integer parts of return value from RAX, RDX into dst>\n<move double parts of return value from XMM0, XMM1 into dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><fix stack alignment>\n<move arguments to general-purpose registers>\n<move arguments to XMM registers>\n<push arguments onto the stack></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Call(fun_name)</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><deallocate arguments/padding></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">MovZeroExtend(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type>, <dst type>,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">src, dst)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Movsx(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type>, <dst type>,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">src, dst)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Mov(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Movsx(Byte, Longword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCvtsi2sd(Longword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cvtsi2sd(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cvttsd2si(Longword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(Byte, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cvttsd2si(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst type></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, src, dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">MovZeroExtend(Byte, Longword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCvtsi2sd(Longword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">MovZeroExtend(Longword, Quadword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCvtsi2sd(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(Quadword, Imm(0), src)\nJmpCC(L,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nCvtsi2sd(Quadword, src, dst)\nJmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nMov(Quadword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nUnary(Shr, Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nBinary(And, Quadword, Imm(1), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nBinary(Or, Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCvtsi2sd(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)\nBinary(Add, Double, dst, dst) Label(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cvttsd2si(Longword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(Byte, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cvttsd2si(Quadword, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nMov(Longword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">Cmp(Double, Data(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><upper-bound></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0), src)\nJmpCC(AE,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nCvttsd2si(Quadword, src, dst)\nJmp(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)\nMov(Double, src, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nBinary(Sub, Double, Data(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><upper-bound></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 0), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nCvttsd2si(Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><X></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)\nMov(Quadword, Imm(9223372036854775808), Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">))\nBinary(Add, Quadword, Reg(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><R></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">), dst)\nLabel(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)</samp>\n<samp class=\"SANS_Futura_Std_Book_11\">And add a top-level constant:</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticConstant(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><upper-bound></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, 8,\n                DoubleInit(9223372036854775808.0))</samp></samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Book_11\">Print out each top-level construct.\nOn Linux, add at end of file:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .section .note.GNU-stack,\"\",@progbits</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .text</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n     pushq    %rbp\n     movq     %rsp, %rbp</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <instructions></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global,\n               alignment,\n               init_list)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .bss</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init_list></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .data</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init_list></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticConstant(name, alignment,\n               init)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.section .rodata</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.literal8\n    .balign 8</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.literal16\n    .balign 16</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .quad 0</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.cstring</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n```", "```\n <samp class=\"SANS_Futura_Std_Book_11\">If</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">global</samp> <samp class=\"SANS_Futura_Std_Book_11\">is true:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.globl</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><identifier></samp>\n <samp class=\"SANS_Futura_Std_Book_11\">Otherwise, omit this directive.</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.align</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.balign</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.double</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><d></samp>\n <samp class=\"SANS_Futura_Std_Book_11\">or</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.quad</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><d-interpreted-as-long></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">mov</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>   <src></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movs</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src_t><dst_t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movz</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src_t><dst_t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">leaq    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cvtsi2sd</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>     <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cvttsd2si</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movq     %rbp, %rsp\npopq     %rbp\nret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><unary_operator><t>     <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">xorpd   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src>,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">mulsd   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src>,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><binary_operator><t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">idiv</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">div</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cdq</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cqo</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">pushq   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n<samp class=\"SANS_Futura_Std_Book_11\">or</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">@PLT</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">comisd  </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand>, <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cmp</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>   <operand></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">jmp      .L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">j</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">set</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code>    <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">(</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><reg1></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><reg2></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">)</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">$</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><identifier></samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">+</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">(%rip)</samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Book_11\">Print out each top-level construct.\nOn Linux, add at end of file:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .section .note.GNU-stack,\"\",@progbits</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .text</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n     pushq    %rbp\n     movq     %rsp, %rbp</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <instructions></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .bss</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n<name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n     .zero 4</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .data</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n     .long</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><init></samp></samp>\n```", "```\n <samp class=\"SANS_Futura_Std_Book_11\">If</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">global</samp> <samp class=\"SANS_Futura_Std_Book_11\">is true:</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.globl</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><identifier></samp>\n <samp class=\"SANS_Futura_Std_Book_11\">Otherwise, omit this directive.</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.align 4</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.balign 4</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movl    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movq     %rbp, %rsp\npopq     %rbp\nret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><unary_operator>     <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><binary_operator>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">idivl   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cdq</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">subq     $</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, %rsp</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">addq     $</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><int></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">, %rsp</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">pushq   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">popq    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><reg></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n<samp class=\"SANS_Futura_Std_Book_11\">or</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">@PLT</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cmpl   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">jmp     .L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">j</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">set</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code>    <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n```", "```\n<samp class=\"SANS_Futura_Std_Book_11\">Print out each top-level construct.\nOn Linux, add at end of file:</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">\n    .section .note.GNU-stack,\"\",@progbits</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.text</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:\n     pushq    %rbp\n     movq     %rsp, %rbp</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><instructions></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticVariable(name, global,\n               alignment,\n               init_list)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .bss</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init_list></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><global-directive></samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">    .data</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init_list></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">StaticConstant(name, alignment,\n               init)</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.section .rodata</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <alignment-directive>\n <name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.literal8\n    .balign 8</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.literal16\n    .balign 16</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"> \n     .quad 0</samp>\n```", "```\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.cstring</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><name></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">    <init></samp>\n```", "```\n <samp class=\"SANS_Futura_Std_Book_11\">If</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">global</samp> <samp class=\"SANS_Futura_Std_Book_11\">is true:</samp>\n <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.globl</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><identifier></samp>\n <samp class=\"SANS_Futura_Std_Book_11\">Otherwise, omit this directive.</samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.align</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.balign</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><alignment></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.double</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><d></samp>\n<samp class=\"SANS_Futura_Std_Book_11\">or</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.quad</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><d-interpreted-as-long></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">mov</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>   <src></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_Futura_Std_Book_11\"><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movs</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src_t><dst_t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movz</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src_t><dst_t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">leaq    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cvtsi2sd</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>     <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cvttsd2si</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>    <src>, <dst></samp> <samp class=\"SANS_Futura_Std_Book_11\"></samp> \n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">movq     %rbp, %rsp\npopq     %rbp\nret</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><unary_operator><t>     <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">xorpd   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">mulsd   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><binary_operator><t>    <src>, <dst></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">idiv</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>  <operand></samp> \n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">div</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t>   <operand></samp> \n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cdq</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cqo</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">pushq   </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">popq    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><reg></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n<samp class=\"SANS_Futura_Std_Book_11\">or</samp>\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">call    </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">@PLT</samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">comisd  </samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand>, <operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">cmp</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><t></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">,</samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">jmp      .L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">j</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">set</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><cond_code></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_11\"></samp> <samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><operand></samp>\n```", "```\n<samp class=\"SANS_TheSansMonoCd_W5Regular_11\">.L</samp><samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\"><label></samp><samp class=\"SANS_TheSansMonoCd_W5Regular_11\">:</samp>\n```"]