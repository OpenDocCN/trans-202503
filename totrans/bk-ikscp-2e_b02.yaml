- en: B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Import and Export
  prefs: []
  type: TYPE_NORMAL
- en: This appendix is a collection of notes on the capabilities, limitations, and
    prerequisites of the major import and export formats that Inkscape supports.
  prefs: []
  type: TYPE_NORMAL
- en: You need to download and install external software if you want Inkscape to import
    certain formats. As a rule, if you don't have the necessary external software
    installed (or if it is not in `PATH`), Inkscape simply omits this format from
    the list of supported formats in the Open or Import dialogs.
  prefs: []
  type: TYPE_NORMAL
- en: If Inkscape doesn’t support your favorite vector format, check whether an open
    source utility exists that can bridge the gap between that format and one of the
    known formats (ideally SVG, but PDF would work too). If such a converter exists,
    adding support for a new format to Inkscape is a matter of writing an input or
    output extension ([Chapter 19](c19.xhtml#ch19)).
  prefs: []
  type: TYPE_NORMAL
- en: B.1 Save vs. Export
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A note on terminology: Inkscape uses the term *export* only for theExport PNG
    Image dialog ([18.6.1](c18.xhtml#section18.6.1)). The vector formats it supports,
    including the default Inkscape SVG format, are listed in the Save as type list
    in the Save, Save As, and Save a Copy dialogs. In other words, you don''t *export*
    to these formats, you *save* to them. Since all vector formats except Inkscape
    SVG lose some editability features or even drop some classes of objects, saving
    in such a format and then trying to close the document displays a warning, as
    shown in [Figure B-1](#figB-1).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](app/app-warn.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure B-1: Careful! You are closing a document last saved as something other
    than Inkscape SVG!'
  prefs: []
  type: TYPE_NORMAL
- en: If you make any changes after saving a non-SVG file, you may have to Save As
    the original SVG file again. To avoid this annoyance, use the **Save a Copy**
    command (Shift-Ctrl-Alt-S) for saving to a non-SVG format. After saving a copy,
    the opened document remains associated with the original SVG file, and any further
    changes are saved to it.
  prefs: []
  type: TYPE_NORMAL
- en: B.2 SVG Variants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inkscape uses the *Inkscape SVG* vector format. As explained in [1.4](c01.xhtml#section1.4),
    this format is standard-compliant SVG with some Inkscape-specific extensions that
    affect only whether you can edit various object types in Inkscape. These extensions
    never change those object types’ appearance. It does not make much sense to save
    as *Plain SVG* except for a (modest) file size gain or when you encounter some
    buggy software having problems with Inkscape SVG. Both SVG flavors have *compressed*
    varieties (using the .svgz filename extension), which produce much smaller non-human-readable
    files but are otherwise the same and should be understood by most SVG software.
  prefs: []
  type: TYPE_NORMAL
- en: You can open SVG files exported from Adobe Illustrator as usual. These files
    usually contain a lot of AI-specific elements, which are useless for Inkscape
    but blow up the size of the SVG file. Inkscape has an import filter that removes
    the AI-specific binary chunks and converts AI layers into Inkscape layers; to
    trigger it, the SVG file needs to have a filename extension of .ai.svg instead
    of simply .svg.
  prefs: []
  type: TYPE_NORMAL
- en: B.3 PDF
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After SVG, PDF is the most powerful and widely recognized vector format that
    Inkscape supports ([1.5.1.1](c01.xhtml#section1.5.1.1)). While Inkscape is not
    the best tool for *roundtrip* PDF editing (that is, opening a PDF, editing its
    content, and saving back as PDF), PDF is by far the best option for connecting
    Inkscape with software that does not support SVG. Inkscape supports most of the
    latest versions of PDF’s static features (shapes, text, images, gradients, opacity,
    meshes) but not PDF’s interactive features (such as forms).
  prefs: []
  type: TYPE_NORMAL
- en: B.3.1 Import
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The biggest stumbling block is that PDF supports multiple pages in a document,
    while SVG does not. The first thing you see in the PDF import dialog ([Figure B-2](#figB-2))
    is therefore a page selector. The dialog shows you a preview of the selected page
    before you click OK to import it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](app/app-pdfimport.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure B-2: PDF import dialog when opening or importing a PDF file'
  prefs: []
  type: TYPE_NORMAL
- en: You can also clip ([18.3](c18.xhtml#section18.3)) the imported artwork to the
    various boxes that may be defined in the PDF document. For example, clipping to
    the*media box* (that is, the page size) hides any objects that the PDF might contain
    outside the page area; most PDF viewers won't show them anyway, but Inkscape allows
    you to discover them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inkscape''s PDF import comes in two types: *Poppler/Cairo* and *Internal* import.
    The import dialog claims that the Poppler/Cairo import is done "via an external
    library," but that is misleading; Inkscape users don’t need to install anything
    external for either of these import types. Which type to choose depends on its
    features and the different ways it treats text in PDF.'
  prefs: []
  type: TYPE_NORMAL
- en: B.3.1.1 Text and Fonts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A PDF file can—and usually does—have its own fonts embedded into it; SVG does
    not (see [15.8](c15.xhtml#section15.8) for the backstory). Inkscape can deal with
    this limitation in two different ways.
  prefs: []
  type: TYPE_NORMAL
- en: If you mostly care about how your document looks, choose the **Poppler/Cairo
    import** option ([Figure B-3](#figB-3), left). With it, each text character becomes
    a symbol ([16.7](c16.xhtml#section16.7)) that you can unlink ([16.5](c16.xhtml#section16.5))
    to convert to an editable path. This option fully preserves the appearance but,
    obviously, the text is no longer editable as text.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, Internal import preserves text as text—but it will look correct
    only if you have the corresponding font installed in the system ([Figure B-3](#figB-3),
    right). For example, if a PDF file uses the font FancyShmancy for text, you don't
    need to care (or even know) when you just view that PDF file in Adobe Acrobat
    Reader or another PDF viewer, because the font is embedded into the file and the
    PDF viewer uses it. However, if you want to import that file into Inkscape using
    the Internal import option, you need to get the FancyShmancy font somewhere and
    install it on your computer before attempting the import. Without that, the FancyShmancy
    text will look all wrong.
  prefs: []
  type: TYPE_NORMAL
- en: '![](app/app-pdfimport-compare.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure B-3: A PDF page of this book imported with Poppler/Cairo (left) and
    with the internal importer but without the main text font installed on the computer
    (right)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if you do have the exact font that the PDF document uses, editing texts
    in an imported file is not very natural. A paragraph of PDF text is never converted
    into a single text object with automatic line wrap. Instead, each line becomes
    a text object of its own. Often, it is even worse than that: you will see lines
    broken into text-object fragments at seemingly random points (as the right side
    of shows). This happens because PDF is fundamentally a visual format that doesn''t
    provide any higher-level logical structures—even as simple as paragraphs.'
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape offers the Replace PDF fonts by closest-named installed fonts option
    that may help with this issue. With it, if you don't have the FancyShmancy font
    installed but have FancyPancy, Inkscape will use that font, which may even work
    if that font is a close enough replica.
  prefs: []
  type: TYPE_NORMAL
- en: An additional complication is that most PDFs refer to the fonts they use by
    their *PostScript names*, which may differ from the names of fonts your operating
    system shows. For example, a PDF may refer to a font called `AlbertusMT-Light`,
    whereas the same font in your Inkscape font list is called `Albertus MT Lt`. Inkscape
    does its best to convert PostScript names to regular names, but it can do that
    only for the fonts you have installed—and even then it sometimes fails and chooses
    the wrong installed font.
  prefs: []
  type: TYPE_NORMAL
- en: You can always look up the original PostScript name of any text object’s font
    in an imported PDF by looking at its style in the Selectors and CSS dialog ([8.1](c08.xhtml#section8.1)).
    The property you need is`-inkscape-font-specification`. For example, that property
    may contain `AlbertusMT-Light`, whereas the standard `font-family` property is
    `Albertus MT Lt`.
  prefs: []
  type: TYPE_NORMAL
- en: B.3.1.2 Meshes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Like SVG, PDF supports mesh gradients ([10.7](c10.xhtml#section10.7)). However,
    Inkscape does not attempt to translate PDF meshes into SVG meshes; instead, it
    approximates them with grids of flat-color tiles. At the bottom of the dialog
    ([Figure B-2](#figB-2)), you can select how precise you want this approximation
    to be, from rough to very fine. Typically, you’d need to experiment to figure
    out the best value for your mesh-using PDF file, but the dialog will warn you
    that requesting too high a precision will make your file too big and slow to work
    with.
  prefs: []
  type: TYPE_NORMAL
- en: B.3.2 Export
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, Inkscape does not have a separate "Export" command for vector
    formats; instead, go to **File ▶ Save As** or **File ▶ Save a Copy** and choose
    the PDF format in the **Save as type** list. After you type the filename and click
    **OK**, you will be presented with a dialog for setting PDF export options ([Figure B-4](#figB-4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](app/app-pdfexport.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure B-4: PDF export options'
  prefs: []
  type: TYPE_NORMAL
- en: You can export PDF version 1.4 or 1.5. For the fonts your document uses, you
    can either embed them into the PDF or convert all text objects to paths on export.
  prefs: []
  type: TYPE_NORMAL
- en: Filters ([Chapter 17](c17.xhtml#ch17)) are SVG features that have no counterpart
    in PDF. You have the option of converting any filtered objects to bitmaps on export
    (Rasterize filter effects). If you uncheck this, filters will be simply ignored
    (for example, any blurred object will lose blur). Rasterization inflates the file
    size and loses the vector editability of the objects affected, but it preserves
    the objects’ filtered appearance. The Resolution for rasterization parameter can
    be the default 96 dpi for PDFs intended for viewing onscreen, but it needs to
    be at least 300 dpi for PDFs intended for print.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the entire document is exported to PDF, but you can limit your export
    to a single element by entering its ID ([4.1](c04.xhtml#section4.1)). For example,
    in a file with several logos, you can export each logo to its own PDF file using
    this option. The PDF’s page size is, by default, the same as that of your SVG,
    so any objects outside the page are hidden (but still present in the PDF code);
    with Output page size set to Use exported object's size, the PDF page will be
    as big as the bounding box of the object you're exporting.
  prefs: []
  type: TYPE_NORMAL
- en: B.4 PostScript and EPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A couple decades ago, PostScript was *the* exchange format for vector data.
    Now it has largely ceded its position to PDF, which is much richer and better
    supported by all kinds of software. If you have the choice, you should use PDF
    instead of PostScript. However, a lot of old projects and clipart exist as PostScript
    files, and you still may need to deal with them.
  prefs: []
  type: TYPE_NORMAL
- en: EPS is PostScript with some additional limitations that allow you to import
    and insert it into other documents. An EPS file is always a single page, always
    has all fonts and bitmap images embedded (regular PS files are not obliged to
    embed anything), and its page size is always clipped to its contents.
  prefs: []
  type: TYPE_NORMAL
- en: B.4.1 Import
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To import PS and EPS, you need to install the Ghostscript interpreter that Inkscape
    runs automatically. Ghostscript converts PS or EPS files to PDF format, which
    are then fed into Inkscape. Versions for all major operating systems are available
    at [https://www.ghostscript.com/](https://www.ghostscript.com/). Make sure the
    ps2pdf (on Linux) or ps2pdf.bat (on Windows) file of Ghostscript is in your `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: Because PS and EPS files end up as PDF imports from Inkscape’s viewpoint, you
    will see the same PDF import dialog ([Figure B-2](#figB-2)). In particular, if
    a PS file contains more than one page, this dialog will allow you to choose which
    page to import.
  prefs: []
  type: TYPE_NORMAL
- en: B.4.2 Export
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inkscape supports PS and EPS export natively. The dialog has many of the same
    options as the PDF export dialog, as shown in [Figure B-5](#figB-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](app/app-psexport.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure B-5: PS or EPS export options'
  prefs: []
  type: TYPE_NORMAL
- en: You can choose the level (that is, version) of PostScript; most modern software
    and printers support Level 3. Just as in PDF export, fonts are either embedded
    or converted to paths, and filters can be rasterized. Objects with nonzero opacity
    are also rasterized (you cannot suppress it), because unlike PDF, PostScript does
    not support vector transparency.
  prefs: []
  type: TYPE_NORMAL
- en: B.5 AI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Up to version 8, Adobe Illustrator's (AI's) native format was based on PostScript
    ([1.5.1.1](c01.xhtml#section1.5.1.1)). It was not fully standard PostScript, however,
    and importing it into other software has always been a pain. Various scripts on
    the web claim to convert this old AI format into something more tractable, but
    they are all rather limited and unreliable. While you can try using them, Inkscape
    doesn’t officially support import or export of the old AI format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with version 9, Adobe switched to PDF for the base of its new Illustrator
    format. While the AI files saved by Illustrator contain a lot of AI-specific extensions,
    they are standard PDF that any PDF-capable software can open and view. This is
    what Inkscape does: it treats any file with the .ai extension as a PDF file and
    presents its standard PDF Import Settings dialog to you ([B.3](#sectionB.3)).
    On import, Inkscape loses the AI-specific metadata (such as layers), but at least
    you get your vector objects as vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: There's no support for AI export in Inkscape because recent versions of Adobe
    Illustrator can import SVG and PDF files without problems.
  prefs: []
  type: TYPE_NORMAL
- en: B.6 CorelDRAW
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inkscape can import various kinds of files created by the CorelDRAW vector editor
    (with the extensions .cdr, .cdt, .ccx, and .cmx) natively. Export to CorelDRAW
    is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: B.7 WMF, EMF, and EMF+
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WMF (Windows MetaFile), EMF (Enhanced MetaFile), and EMF+ (Enhanced MetaFile
    Plus) are Windows-specific vector formats used by some Windows-only software (such
    as Microsoft Office) for data exchange and vector clipart. Of these, EMF is the
    most capable and widely supported, so it’s generally preferable (if you have a
    choice). Inkscape supports these formats for import and export natively.
  prefs: []
  type: TYPE_NORMAL
- en: B.8 XAML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inkscape can both import and export the XAML (Extensible Application Markup
    Language) format used by Microsoft in its .NET and Silverlight technologies. No
    additional software is needed.
  prefs: []
  type: TYPE_NORMAL
- en: B.9 WPG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WPG (WordPerfect Graphics) is an old vector format that the WordPerfect text
    processor used; collections of clipart in this format still exist. Inkscape imports
    WPG natively (no external software is needed).
  prefs: []
  type: TYPE_NORMAL
- en: B.10 VSD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VSD is the native format of Microsoft Visio. Inkscape has limited native support
    for VSD file import.
  prefs: []
  type: TYPE_NORMAL
- en: B.11 DXF and HPGL (Export)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DXF (Drawing Exchange Format) is a common CAD (Computer-Aided Design) format
    used for plans and technical drawings in software such as AutoCAD. HPGL is a vector
    format used by some Hewlett-Packard plotters. Inkscape has limited support for
    importing from and exporting to these formats.
  prefs: []
  type: TYPE_NORMAL
- en: B.12 ODG
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenDocument Graphics (ODG) is the format used by, among others, the OpenOffice
    and LibreOffice suites. Inkscape has limited support for ODG export; with recent
    versions of the office suites, it's better to use SVG for graphics exchange.
  prefs: []
  type: TYPE_NORMAL
- en: B.13 POV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: POVRay ([http://povray.org/](http://povray.org/)) is a popular open source 3D
    raytracer, not a vector application. However, Inkscape can export the paths and
    shapes as 3D scenes that POVRay will then render; you can manually edit the text-based
    .pov file to adjust angles, cameras, lighting, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: B.14 LaTeX (Export)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LaTeX is an old and powerful open source document formatting system. Inkscape
    can output its drawings directly into a LaTeX document. You will need the PSTricks
    package ([http://tug.org/PSTricks/](http://tug.org/PSTricks/)) installed in your
    LaTeX system to render that file.
  prefs: []
  type: TYPE_NORMAL
- en: B.15 Bitmap Formats (Import/Export)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw in [18.6](c18.xhtml#section18.6), Inkscape can export to PNG, JPG,
    TIFF, and WebP formats natively. It has built-in import support for a lot more
    bitmap formats, including all the major ones (PNG, JPG, TIFF, GIF, and others).
  prefs: []
  type: TYPE_NORMAL
- en: The GIMP bitmap editor uses the XCF format. Inkscape can export to this format
    via an extension, preserving the layers (that is, layers in the SVG file become
    layers in the XCF file). You need to have GIMP installed and in `PATH` for this
    extension to work.
  prefs: []
  type: TYPE_NORMAL
- en: B.16 Printing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can think of printing of as exporting—if only because, to print a document,
    Inkscape exports it to the format that the printer understands. Depending on the
    printer driver, this is likely either PostScript or PDF, not SVG. If you select
    the Print to file option from the Print dialog, you will get a PS or PDF file
    that looks exactly as if you saved your document with this file type.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not going to describe the Print dialog that you get when you select File ▶ Print
    (Ctrl-P) because it is created by your operating system, not by Inkscape, and
    its options—paper size, margins, print quality, and so on—reflect your printer's
    capabilities. The only thing Inkscape adds to this dialog is the Rendering tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Inkscape prints by exporting the document to a vector format (PostScript
    or PDF). As explained earlier, Inkscape is smart enough to rasterize those objects
    using the features these formats don''t support: filters and meshes (both PS and
    PDF) and transparency (PS only). Alternatively, you can render the entire document
    into bitmap by switching from Vector toBitmap on the Rendering tab and setting
    the bitmap resolution. This option is generally safer, as it avoids any kinds
    of surprises that format conversion may hold, but it may result in large print
    files and slow printing.'
  prefs: []
  type: TYPE_NORMAL
