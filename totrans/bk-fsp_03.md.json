["```\n//C#\nusing System;\nusing System.Linq;\n\nclass Example\n{\n  public static int multiplier = 1;\n\n  private static void ① Multiply(int value)\n  {\n    var result = value * multiplier;\n    Console.WriteLine(\"{0} x {1} = {2}\", value, ②multiplier++, result);\n  }\n\n  static void Main()\n  {\n    var range = Enumerable.Range(1, 100);\n    foreach(var i in range)\n    {\n      Multiply(i);\n    }\n  }\n}\n\n// First 10 results\n// 1 x 1 = 1\n// 2 x 2 = 4\n// 3 x 3 = 9\n// 4 x 4 = 16\n// 5 x 5 = 25\n// 6 x 6 = 36\n// 7 x 7 = 49\n// 8 x 8 = 64\n// 9 x 9 = 81\n// 10 x 10 = 100\n```", "```\n//C#\nstatic void Main()\n{\n  var range = Enumerable.Range(1, 100);\n  System.Threading.Tasks.Parallel.ForEach(range, i => Multiply(i));\n}\n\n// First 10 results\n// 1 x 1 = 1\n// 6 x 3 = 18\n// 7 x 4 = 28\n// 5 x 2 = 10\n// 10 x 6 = 60\n// 11 x 7 = 77\n// 12 x 8 = 96\n// 13 x 9 = 117\n// 14 x 10 = 140\n// 15 x 11 = 165\n```", "```\nlet intValue = 1\n```", "```\nlet strValue = \"hello\"\n```", "```\nlet add a b = a + b\nlet sum = add 1 2\n```", "```\n**[<Literal>]**\nlet FahrenheitBoilingPoint = 212\n```", "```\nlet name = \"Dave\"\n\nname <- \"Nadia\"\n// Error – immutable binding\n```", "```\nlet mutable name = \"Dave\"\n\nname <- \"Nadia\"\n// OK – mutable binding\n```", "```\n// Horrible, invalid code\nlet addSomeNumbers nums =\n  let ① mutable sum = 0\n  let add = ② (fun num -> sum <- sum + num)\n  Array.iter (fun num -> add num) [| 1..10 |]\n```", "```\nlet cell = **ref** 0\n```", "```\n① cell := 100\n  printf \"%i\" ②! cell\n```", "```\nopen System\n\nlet ① createDisposable name =\n  printfn \"creating: %s\" name\n  ②{ new IDisposable with\n   member x.Dispose() =\n     printfn \"disposing: %s\" name\n  }\n\nlet ③testDisposable() =\n  use root = createDisposable \"outer\"\n  for i in [1..2] do\n    use nested = createDisposable (sprintf \"inner %i\" i)\n    printfn \"completing iteration %i\" i\n  printfn \"leaving function\"\n```", "```\ncreating: outer\ncreating: inner 1\ncompleting iteration 1\ndisposing: inner 1\ncreating: inner 2\ncompleting iteration 2\ndisposing: inner 2\nleaving function\ndisposing: outer\n```", "```\n  open System.IO\n① let writeToFile filename buffer =\n    ②use fs = ③new FileStream(filename, FileMode.CreateNew, FileAccess.Write)\n    fs.Write(buffer, 0, buffer.Length)\n```", "```\nwarning FS0524: 'use' bindings are not permitted in modules and are\ntreated as 'let' bindings\n```", "```\nopen System.Drawing\nusing (Image.FromFile(@\"C:\\Windows\\Web\\Screen\\img100.jpg\"))\n      (fun img -> printfn \"%i x %i\" img.Width img.Height)\n```", "```\n  open System.Drawing\n① let w, h = using (Image.FromFile(@\"C:\\Windows\\Web\\Screen\\img100.jpg\"))\n                   (fun img -> ②(img.Width, img.Height))\n③ printfn \"Dimensions: %i x %i\" w h\n```", "```\n// C#\npublic static class IDisposableHelper\n{\n  public static TResult Using<TResource, TResult>\n    (TResource resource, Func<TResource, TResult> action)\n      where TResource : IDisposable\n  {\n    using(resource) return action(resource);\n  }\n\n  public static void Using<TResource>\n    (TResource resource, Action<TResource> action)\n      where TResource : IDisposable\n  {\n    using(resource) action(resource);\n  }\n}\n```", "```\n// C#\n// using System.Drawing\nIDisposableHelper.Using(\n  Image.FromFile(@\"C:\\Windows\\Web\\Screen\\img100.jpg\"),\n  img => Console.WriteLine(\"Dimensions: {0} x {1}\", img.Width, img.Height)\n);\n\nvar dims =\n  IDisposableHelper.Using(\n    Image.FromFile(@\"C:\\Windows\\Web\\Screen\\img100.jpg\"),\n    img => Tuple.Create(img.Width, img.Height)\n  );\n\nConsole.WriteLine(\"Dimensions: {0} x {1}\", dims.Item1, dims.Item2);\n```", "```\nlet myIdentifier = \"\"\nlet _myIdentifier1 = \"\"\n```", "```\nlet \"This is a valid F# identifier\" = \"\"\n```", "```\n> **let x = 0.33333**\n**let y = 1.0 / 3.0**\n**x = y;;**\n\nval x : float = 0.33333\nval y : float = 0.3333333333\nval it : bool = false\n```", "```\n> **open System**\n**let approximatelyEqual (x : float) (y : float) (threshold : float) =**\n  **Math.Abs(x - y) <= Math.Abs(threshold)**\n**approximatelyEqual 0.33333 (1.0 / 3.0) 0.001;;**\n\nval approximatelyEqual : x:float -> y:float -> threshold:float -> bool\nval it : bool = true\n```", "```\nlet marchHighTemps = [ 33.0; 30.0; 33.0; 38.0; 36.0; 31.0; 35.0;\n                       42.0; 53.0; 65.0; 59.0; 42.0; 31.0; 41.0;\n                       49.0; 45.0; 37.0; 42.0; 40.0; 32.0; 33.0;\n                       42.0; 48.0; 36.0; 34.0; 38.0; 41.0; 46.0;\n                       54.0; 57.0; 59.0 ]\nlet totalMarchHighTemps = List.sum marchHighTemps\nlet average = totalMarchHighTemps / float marchHighTemps.Length\n```", "```\n> **let letterA = 'a'**\n**let copyrightSign = '\\u00A9';;**\n\nval letterA : char = 'a'\nval copyrightSign : char = '©'\n```", "```\n> **let myString = \"hello world!\";;**\nval myString : string = \"hello world!\"\n```", "```\n> **let verbatimString = @\"Hello, my name is \"\"Dave\"\"\";;**\nval verbatimString : string = \"Hello, my name is \"Dave\"\"\n```", "```\n> **let tripleQuoted = \"\"\"<person name=\"Dave\" age=\"33\" />\"\"\";;**\nval tripleQuoted : string = \"<person name=\"Dave\" age=\"33\" />\"\n```", "```\n> **System.String.Concat(\"abc\", \"123\");;**\nval it : string = \"abc123\"\n```", "```\n> **\"abc\" + \"123\";;**\nval it : string = \"abc123\"\n```", "```\n// C#\nusing System;\n\npublic class Person\n{\n  public Person(Guid id, string name, int age)\n  {\n    Id = id;\n    Name = name;\n    Age = age;\n  }\n\n  public Guid Id { get; private set; }\n  public string Name { get; private set; }\n  public int Age { get; private set; }\n}\n```", "```\ntype Person (id : System.Guid, name : string, age : int) =\n  member x.Id = id\n  member x.Name = name\n  member x.Age = age\n```", "```\nlet **i : int** = 42;;\n```", "```\nlet add **(a : int) (b : int) : int** = a + b\n```", "```\n> **let middleName : string option = None;;**\nval middleName : string option = None\n\n> **let middleName = Some(\"William\");;**\nval middleName : string option = Some \"William\"\n```", "```\ntype Container() =\n  member x.Fill ①?stopAtPercent =\n    printfn \"%s\" <| match (②defaultArg stopAtPercent 0.5) with\n                    | 1.0 -> \"Filled it up\"\n                    | stopAt -> sprintf \"Filled to %s\" (stopAt.ToString(\"P2\"))\nlet bottle = Container()\n```", "```\n**let add a b = a + b**\n// Compiler warning\nadd 2 3\n```", "```\n**let add a b = a + b**\n// No warning\nadd 2 3 |> ignore\n```", "```\ntype enum-name =\n   | value1 = integer-literal1\n   | value2 = integer-literal2\n   -- *snip* --\n```", "```\ntype DayOfWeek =\n| Sunday = 0\n| Monday = 1\n| Tuesday = 2\n| Wednesday = 3\n| Thursday = 4\n| Friday = 5\n| Saturday = 6\n```", "```\ntype DayOfWeekByte =\n| Sunday = **0y**\n| Monday = **1y**\n| Tuesday = **2y**\n-- *snip* --\n```", "```\nopen System.Text.RegularExpressions\nlet re = new Regex(\"^(Didactic Code)$\",\n                   RegexOptions.Compiled ||| RegexOptions.IgnoreCase)\n```", "```\nopen System\n\n**[<Flags>]**\ntype DayOfWeek =\n| None = 0\n| Sunday = 1\n| Monday = 2\n| Tuesday = 4\n| Wednesday = 8\n| Thursday = 16\n| Friday = 32\n| Saturday = 64\n```", "```\nlet weekend = DayOfWeek.Saturday ||| DayOfWeek.Sunday\n```", "```\nopen System\n\n[<Flags>]\ntype DayOfWeek =\n-- *snip* --\n| **Weekdays = 62**\n| **WeekendDays = 65**\n```", "```\n> **DayOfWeek.Weekdays.HasFlag DayOfWeek.Monday;;**\nval it : bool = true\n> **DayOfWeek.Weekdays.HasFlag DayOfWeek.Thursday;;**\nval it : bool = true\n> **DayOfWeek.Weekdays.HasFlag DayOfWeek.Sunday;;**\nval it : bool = false\n```", "```\n> **enum<DayOfWeek> 16;;**\nval it : DayOfWeek = Thursday\n```", "```\n> **open Microsoft.FSharp.Core.LanguagePrimitives**\n**EnumOfValue<sbyte, DayOfWeek> 16y;;**\nval it : DayOfWeek = Thursday\n```", "```\nlet echoUserInput (getInput : unit -> string) =\n  let mutable input = getInput()\n  while not (input.ToUpper().Equals(\"QUIT\")) do\n    printfn \"You entered: %s\" input\n    input <- getInput()\n\nechoUserInput (fun () -> printfn \"Type something and press enter\"\n                         System.Console.ReadLine())\n```", "```\nfor i = 0 to 100 do printfn \"%i\" i\n```", "```\nfor i = 100 **downto** 0 do printfn \"%A\" i\n```", "```\nfor i in [0..10] do\n  printfn \"%A\" i\n```", "```\n① type MpaaRating =\n  | G\n  | PG\n  | PG13\n  | R\n  | NC17\n\n② type Movie = { Title : string; Year : int; Rating : MpaaRating option }\n\n③ let movies = [ { Title = \"The Last Witch Hunter\"; Year = 2014; Rating = None }\n                 { Title = \"Riddick\"; Year = 2013; Rating = Some(R) }\n                 { Title = \"Fast Five\"; Year = 2011; Rating = Some(PG13) }\n                 { Title = \"Babylon A.D.\"; Year = 2008; Rating = Some(PG13) } ]\n\n④ for { Title = t; Year = y; Rating = Some(r) } in movies do\n    printfn \"%s (%i) - %A\" t y r\n```", "```\nlet isEven number =\n  if number % 2 = 0 then\n    printfn \"%i is even\" number\n  else\n    printfn \"%i is odd\" number\n```", "```\nlet isEven number =\n  if number = 0 then\n    printfn \"zero\"\n  **elif** number % 2 = 0 then\n    printfn \"%i is even\" number\n  else\n    printfn \"%i is odd\" number\n```", "```\nlet **isEven** number =\n  if number = 0 then\n    **sprintf** \"zero\"\n  elif number % 2 = 0 then\n    **sprintf** \"%i is even\" number\n  else\n    **sprintf** \"%i is odd\" number\n```", "```\n> **isEven 0;;**\nval it : string = \"zero\"\n> **isEven 1;;**\nval it : string = \"1 is odd\"\n> **isEven 2;;**\nval it : string = \"2 is even\"\n```", "```\n> **let toTriple a b c = (a, b, c);;**\nval toTriple : a:'a -> b:'b -> c:'c -> 'a * 'b * 'c\n```", "```\n> **let toTriple (a : 'A) (b : 'B) (c : 'C) = (a, b, c);;**\nval toTriple : a:'A -> b:'B -> c:'C -> 'A * 'B * 'C\n```", "```\n    let myFunc (stream : 'T when 'T :> System.IO.Stream) = ()\n    ```", "```\n    let inline myFunc (a : ^T when ^T : null) = ()\n    ```", "```\n    // instance member\n    let inline myFunc\n      (a : ^T when ^T : (member ReadLine : unit -> string)) = ()\n\n    // static member\n    let inline myFunc\n      (a : ^T when ^T : (static member Parse : string -> ^T)) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : (new : unit -> 'T)) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : struct) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : not struct) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : enum<int32>) = ()\n    ```", "```\n    open Systemlet\n    myFunc (stream : 'T when 'T : delegate<obj * EventArgs, unit>) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : unmanaged) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : equality) = ()\n    ```", "```\n    let myFunc (stream : 'T when 'T : comparison) = ()\n    ```", "```\nlet myFunc (stream : #System.IO.Stream) = ()\n```", "```\nlet printList (l : List<**_**>) = l |> List.iter (fun i -> printfn \"%O\" i)\n```", "```\nlet inline (!**) x = x ** 2.0\n```", "```\nval inline ( !** ) :\n  x: **^a** -> **^a** when **^a** : (static member **Pow** : **^a** * float -> **^a**)\n```", "```\nopen System.IO\n\n**try**\n  use file = File.OpenText \"somefile.txt\"\n  file.ReadToEnd() |> printfn \"%s\"\n**with**\n| ①:? FileNotFoundException -> printfn \"File not found\"\n| ②_ -> printfn \"Error loading file\"\n```", "```\ntry\n-- *snip* --\nwith\n| :? FileNotFoundException **as** ①ex ->\n ②printfn \"% was not found\" ex.FileName\n| _ -> printfn \"Error loading file\"\n```", "```\ntry\n-- *snip* --\nwith\n| :? FileNotFoundException as ex ->\n  printfn \"%s was not found\" ex.FileName\n**| :? PathTooLongException**\n**| :? ArgumentNullException**\n**| :? ArgumentException ->**\n  **printfn \"Invalid filename\"**\n| _ -> printfn \"Error loading file\"\n```", "```\ntry\n-- *snip* --\nwith\n| :? FileNotFoundException as ex ->\n  printfn \"%s was not found\" ex.FileName\n| _ ->\n  printfn \"Error loading file\"\n  **reraise()**\n```", "```\nopen System\nopen System.Diagnostics\nopen System.IO\n\nlet fileContents =\n  try\n    use file = File.OpenText \"somefile.txt\"\n  ①Some <| file.ReadToEnd()\n  with\n  | :? FileNotFoundException as ex ->\n    printfn \"%s was not found\" ex.FileName\n  ②None\n  | _ ->\n    printfn \"Error loading file\"\n    reraise()\n```", "```\ntry\n  use file = File.OpenText \"somefile.txt\"\n  Some <| file.ReadToEnd()\nfinally\n  printfn \"cleaning up\"\n```", "```\nlet filename = \"x\"\nif not (File.Exists filename) then\n  **raise** <| FileNotFoundException(\"filename was null or empty\")\n```", "```\n// failwith\nif not (File.Exists filename) then\n  **failwith \"File not found\"**\n\n// failwithf\nif not (String.IsNullOrEmpty filename) then\n  **failwithf \"%s could not be found\" filename**\n```", "```\nif not (String.IsNullOrEmpty filename) then\n  **invalidArg** \"filename\" (sprintf \"%s is not a valid file name\" filename)\n```", "```\ntype MyException(message, category) =\n  inherit exn(message)\n  member x.Category = category\n  override x.ToString() = sprintf \"[%s] %s\" category message\n```", "```\ntry\n  **raise** <| MyException(\"blah\", \"debug\")\nwith\n  | **:? MyException as ex** -> printfn \"My Exception: %s\" <| ex.ToString()\n  | _ as ex -> printfn \"General Exception: %s\" <| ex.ToString()\n```", "```\n**exception** RetryAttemptFailed of string * int\n**exception** RetryCountExceeded of string\n```", "```\nlet ①retry maxTries action =\n  let ②rec retryInternal attempt =\n    try\n      if not (action()) then\n        raise <| if attempt > maxTries then\n                    ③RetryCountExceeded(\"Maximum attempts exceeded.\")\n                 else\n                    ④RetryAttemptFailed(sprintf \"Attempt %i failed.\" attempt, attempt)\n\n   with\n   | ⑤RetryAttemptFailed(msg, count) as ex -> Console.WriteLine(msg)\n                                             retryInternal (count + 1)\n   | ⑥RetryCountExceeded(msg) -> Console.WriteLine(msg)\n                                reraise()\n  ⑦retryInternal 1\n\nretry 5 (fun() -> false)\n```", "```\n> **sprintf \"%d\" 123;;**\nval it : string = \"123\"\n```", "```\n> **printfn \"%5s\" \"ABC\";;**\nABC\n\n> **printfn \"%5s\" \"ABCDEFGHI\";;**\nABCDEFGHI\n```", "```\ntype fs = System.IO.FileStream\n```", "```\n// This is an end-of-line comment\nlet x = 42 // Answer to the Ultimate Question of Life, The Universe, and Everything\n```", "```\n(* This is a block comment *)\n\n(*\n  So is this\n*)\n```", "```\nlet x (* : int *) = 42\n```", "```\n(* \"This is ok\" *)\n(* \"\"\"This is not *)\n```", "```\n**/// <summary>**\n**/// Given a radius, calculate the diameter, area, and circumference**\n**/// of a circle**\n**/// </summary>**\n**/// <param name=\"radius\">The circle's radius</param>**\n**/// <returns>**\n**/// A triple containing the diameter, area, and circumference**\n**/// </returns>**\nlet measureCircle radius =\n    let diameter = radius * 2.0\n    let area = Math.PI * (radius ** 2.0)\n    let circumference = 2.0 * Math.PI * radius\n    (diameter, area, circumference)\n```", "```\n/// Given a radius, calculate the diameter, area, and circumference\n/// of a circle\nlet measureCircle radius =\n-- *snip* --\n```"]