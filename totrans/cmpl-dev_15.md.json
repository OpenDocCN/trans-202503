["```\n$ **docker exec -it foodfinder-application npm install @apollo/server graphql graphql-tag**\n**@as-integrations/next \\** \n```", "```\nexport default `\n    directive @cacheControl(maxAge: Int) on FIELD_DEFINITION | OBJECT\n    type Location @cacheControl(maxAge: 86400) {\n        address: String\n        street: String\n        zipcode: String\n        borough: String\n        cuisine: String\n        grade: String\n        name: String\n        on_wishlist: [String] @cacheControl(maxAge: 60)\n        location_id: String\n    }\n`; \n```", "```\nexport default `\n    allLocations: [Location]!\n    locationsById(location_ids: [String]!): [Location]!\n    onUserWishlist(user_id: String!): [Location]!\n`; \n```", "```\nexport default `\n    addWishlist(location_id: String!, user_id: String!): Location!\n    removeWishlist(location_id: String!, user_id: String!): Location!\n`; \n```", "```\nimport gql from \"graphql-tag\";\n\nimport locationTypeDefsCustom from \"graphql/locations/custom.gql\";\nimport locationTypeDefsQueries from \"graphql/locations/queries.gql\";\nimport locationTypeDefsMutations from \"graphql/locations/mutations.gql\";\n\nexport const typeDefs = gql`\n\n    ${locationTypeDefsCustom}\n\n    type Query {\n      ${locationTypeDefsQueries}\n    }\n\n    type Mutation {\n        ${locationTypeDefsMutations}\n    }\n\n`; \n```", "```\nimport {\n    findAllLocations,\n    findLocationsById,\n    onUserWishlist,\n} from \"mongoose/locations/services\";\n\nexport const locationQueries = {\n    allLocations: async (_: any) => {\n        return await findAllLocations();\n    },\n    locationsById: async (_: any, param: {location_ids: string[]}) => {\n        return await findLocationsById(param.location_ids);\n    },\n    onUserWishlist: async (_: any, param: {user_id: string}) => {\n        return await onUserWishlist(param.user_id);\n    },\n}; \n```", "```\nimport {updateWishlist} from \"mongoose/locations/services\";\n\ninterface UpdateWishlistInterface {\n    user_id: string;\n    location_id: string;\n}\n\nexport const locationMutations = {\n    removeWishlist: async (\n        _: any,\n        param: UpdateWishlistInterface,\n        context: {}\n    ) => {\n        return await updateWishlist(param.location_id, param.user_id,\n            \"remove\"\n        );\n    },\n    addWishlist: async (_: any, param: UpdateWishlistInterface, context: {}) => {\n        return await updateWishlist(param.location_id, param.user_id, \"add\");\n    },\n}; \n```", "```\nimport {locationQueries} from \"graphql/locations/queries\";\nimport {locationMutations} from \"graphql/locations/mutations\";\n\nexport const resolvers = {\n    Query: {\n...locationQueries,\n    },\n    Mutation: {\n...locationMutations,\n    },\n}; \n```", "```\nimport {ApolloServer, BaseContext} from \"@apollo/server\";\nimport {startServerAndCreateNextHandler} from \"@as-integrations/next\";\n\nimport {resolvers} from \"graphql/resolvers\";\nimport {typeDefs} from \"graphql/schema\";\nimport dbConnect from \"middleware/db-connect\";\n\nimport {NextApiHandler, NextApiRequest, NextApiResponse} from \"next\";\n\n❶ const server = new ApolloServer<BaseContext>({\n    resolvers,\n    typeDefs,\n});\n\n❷ const handler = startServerAndCreateNextHandler(server, {\n    context: async () => {\n        const token = {};\n        return {token};\n    },\n});\n\n❸ const allowCors =\n    (fn: NextApiHandler) =>\n    async (req: NextApiRequest, res: NextApiResponse) => {\n        res.setHeader(\"Allow\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Methods\", \"POST\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n\n        if (req.method === \"OPTIONS\") {\n            res.status(200).end();\n        }\n        return await fn(req, res);\n    };\n\n❹ const connectDB =\n    (fn: NextApiHandler) =>\n    async (req: NextApiRequest, res: NextApiResponse) => {\n        await dbConnect();\n        return await fn(req, res);\n    };\n\nexport default connectDB(allowCors(handler)); \n```"]