- en: '**PART 7**'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**第7部分**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: '**ADVANCED**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**高级**'
- en: 'PROJECT 24: RAINBOW LIGHT SHOW'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目24：彩虹灯光秀
- en: '**IN THIS PROJECT, WE’LL CREATE A RAINBOW LIGHT SHOW USING AN 8×8 RGB LED MATRIX.
    WE’LL ALSO USE SHIFT REGISTERS TO EXTEND THE ARDUINO AND CONTROL THE MATRIX.**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**在这个项目中，我们将使用8×8 RGB LED矩阵创建彩虹灯光秀。我们还将使用移位寄存器扩展Arduino并控制矩阵。**'
- en: '![image](../images/f0208-01.jpg)![image](../images/f0209-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0208-01.jpg)![image](../images/f0209-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需零件**'
- en: • Arduino board
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • Arduino板
- en: • 2 full-size breadboards
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 2块全尺寸面包板
- en: • Jumper wires
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 跳线
- en: • 8×8 RGB LED matrix
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 8×8 RGB LED矩阵
- en: • 4 74HC595 shift registers
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 4个74HC595移位寄存器
- en: • 16 220-ohm resistors
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 16个220欧姆电阻
- en: • 8 330-ohm resistors
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 8个330欧姆电阻
- en: '**HOW IT WORKS**'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: An RGB LED matrix ([Figure 24-1](ch24.xhtml#ch24fig1)) is a grid of 64 red,
    green, and blue LEDs. You can create the colors of the rainbow by controlling
    each LED individually and by mixing colors together.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个RGB LED矩阵（[图24-1](ch24.xhtml#ch24fig1)）是一个由64个红、绿、蓝LED组成的网格。你可以通过分别控制每个LED并将颜色混合在一起，创造出彩虹的颜色。
- en: '**FIGURE 24-1:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**图24-1：**'
- en: An RGB LED matrix
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个RGB LED矩阵
- en: '![image](../images/f24-01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f24-01.jpg)'
- en: The LED matrix has a total of 32 pins ([Figure 24-2](ch24.xhtml#ch24fig2));
    8 pins control the common-anode positive leg of each LED, and 8 pins apiece control
    the level of red, green, and blue. In the matrix we’ve used here, pins 17–20 and
    29–32 are the anode pins, 9–16 are for red, 21–28 for green, and 1–8 for blue,
    but your matrix may have different connections. Pin number 1 will be identified
    as shown in the bottom-left corner of [Figure 24-2](ch24.xhtml#ch24fig2)—the pin
    numbers run clockwise in this image.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该LED矩阵共有32个引脚（[图24-2](ch24.xhtml#ch24fig2)）；8个引脚控制每个LED的公共阳极正极，另外8个引脚分别控制红、绿、蓝的亮度。在我们这里使用的矩阵中，17到20和29到32为阳极引脚，9到16控制红色，21到28控制绿色，1到8控制蓝色，但你的矩阵可能有不同的连接方式。引脚编号1将在[图24-2](ch24.xhtml#ch24fig2)的左下角标出——引脚编号按顺时针方向排列。
- en: '**FIGURE 24-2:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**图24-2：**'
- en: The pins of an RGB LED matrix
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED矩阵的引脚
- en: '![image](../images/f24-02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f24-02.jpg)'
- en: Your matrix should have come with a data sheet that tells you which pins control
    the red, green, and blue LEDs. If the pin numbers on your data sheet are different
    from those listed in [Table 24-1](ch24.xhtml#ch24tab1), follow your data sheet
    to make the connections to the shift registers and the Arduino. Each color pin
    requires a resistor to prevent it from overloading and burning out, but the values
    are slightly different—use 220-ohm resistors for the blue and green, and 330-ohm
    resistors for the red.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你的矩阵应该带有一份数据表，告诉你哪些引脚控制红、绿、蓝LED。如果数据表中的引脚编号与[表24-1](ch24.xhtml#ch24tab1)中列出的不同，请按照数据表的说明连接移位寄存器和Arduino。每个颜色的引脚都需要一个电阻，以防止过载和烧坏，但它们的电阻值略有不同——蓝色和绿色使用220欧姆电阻，红色使用330欧姆电阻。
- en: '**TABLE 24-1:**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**表24-1：**'
- en: Pin configuration for an RGB LED matrix
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: RGB LED矩阵的引脚配置
- en: '| **MATRIX PIN FUNCTION** | **MATRIX PIN NUMBER** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| **矩阵引脚功能** | **矩阵引脚编号** |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Common anode (+) | 17, 18, 19, 20, 29, 30, 31, 32 |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 公共阳极 (+) | 17, 18, 19, 20, 29, 30, 31, 32 |'
- en: '| Red LEDs | 9, 10, 11, 12, 13, 14, 15, 16 |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 红LED | 9, 10, 11, 12, 13, 14, 15, 16 |'
- en: '| Green LEDs | 21, 22, 23, 24, 25, 26, 27, 28 |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 绿LED | 21, 22, 23, 24, 25, 26, 27, 28 |'
- en: '| Blue LEDs | 1, 2, 3, 4, 5, 6, 7, 8 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 蓝LED | 1, 2, 3, 4, 5, 6, 7, 8 |'
- en: The layout may look complicated, but that’s simply because we’re using so many
    different wires. Just remember to take the project one step at a time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 布局看起来可能很复杂，但那只是因为我们使用了这么多不同的电线。只需记住，一步一步地完成项目。
- en: Because there are so many connections, we’ll run out of pins on the Arduino
    board, so we’ll extend the board using *shift registers*. A shift register is
    a digital memory circuit found in calculators, computers, and data-processing
    systems. This project uses the 74HC595 shift register to control eight outputs
    at a time, while taking up only three pins on your Arduino. We’ll link multiple
    registers together to control more pins at once, using one for the common anode
    and one for each LED color.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于连接非常多，我们将在Arduino板上用尽引脚，因此我们将使用*移位寄存器*扩展板。移位寄存器是一种数字存储电路，广泛应用于计算器、计算机和数据处理系统中。本项目使用74HC595移位寄存器，每次控制8个输出，只占用Arduino上的3个引脚。我们将多个寄存器连接在一起，以同时控制更多引脚，一个控制公共阳极，另外的每个控制LED的不同颜色。
- en: The pin layout for the shift register is shown in [Figure 24-3](ch24.xhtml#ch24fig3),
    and the functions are described in [Table 24-2](ch24.xhtml#ch24tab2). When building
    the project, we’ll refer to the pin number of the shift register and function
    to assist identification.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 移位寄存器的引脚布局见[图 24-3](ch24.xhtml#ch24fig3)，功能描述见[表 24-2](ch24.xhtml#ch24tab2)。在构建项目时，我们将参考移位寄存器的引脚编号和功能，帮助识别。
- en: '**FIGURE 24-3:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 24-3：**'
- en: Pin layout for the shift register
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 移位寄存器引脚布局
- en: '![image](../images/f24-03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f24-03.jpg)'
- en: '**TABLE 24-2:**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**表 24-2：**'
- en: Shift register pins
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 移位寄存器引脚
- en: '| **SHIFT REGISTER** | **CONNECTIONS** | **PIN FUNCTION** |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| **移位寄存器** | **连接** | **引脚功能** |'
- en: '| --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Pins 1–7, 15 | Q0–Q7 | Output pins |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 1–7, 15 | Q0–Q7 | 输出引脚 |'
- en: '| Pin 8 | GND | Ground, VSS |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 8 | GND | 地，VSS |'
- en: '| Pin 9 | SO | Serial out |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 9 | SO | 串行输出 |'
- en: '| Pin 10 | MR | Master Reclear, active low |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 10 | MR | 主复位，低电平有效 |'
- en: '| Pin 11 | SH_CP | Shift register clock pin (CLOCK pin) |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 11 | SH_CP | 移位寄存器时钟引脚（时钟引脚） |'
- en: '| Pin 12 | ST_CP | Storage register clock pin (LATCH pin) |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 12 | ST_CP | 存储寄存器时钟引脚（锁存引脚） |'
- en: '| Pin 13 | OE | Output Enable, active low |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 13 | OE | 输出使能，低电平有效 |'
- en: '| Pin 14 | DS | Serial data input (DATA pin) |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 14 | DS | 串行数据输入（数据引脚） |'
- en: '| Pin 16 | VCC | Positive power |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 引脚 16 | VCC | 正电源 |'
- en: '**THE BUILD**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建过程**'
- en: Insert the 8×8 RGB LED matrix across two full-size breadboards.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 8×8 RGB LED 矩阵插入两块全尺寸面包板。
- en: Insert a 330-ohm resistor for each red LED pin and a 220-ohm resistor for each
    green or blue LED pin.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 插入一个 330 欧姆电阻到每个红色 LED 引脚，插入一个 220 欧姆电阻到每个绿色或蓝色 LED 引脚。
- en: Insert the first shift register into one of the breadboards near the common-anode
    pins on the LED matrix. Place the register so that it straddles the center break,
    as shown in [Figure 24-4](ch24.xhtml#ch24fig4). Connect the common-anode pins
    of the LED matrix to shift register 1 as follows. These pins do not need resistors.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个移位寄存器插入其中一块面包板，靠近 LED 矩阵的共阳引脚。按照[图 24-4](ch24.xhtml#ch24fig4)所示，使寄存器跨越中央断裂处。将
    LED 矩阵的共阳引脚连接到移位寄存器 1，如下所示。这些引脚不需要电阻。
- en: '| **COMMON-ANODE PINS** | **SHIFT REGISTER 1 PINS** |'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **共阳引脚** | **移位寄存器 1 引脚** |'
- en: '| --- | --- |'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED 矩阵** | **移位寄存器** | **移位寄存器** | **Arduino** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 32 | 15: Q0 | 8: GND | GND |'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 32 | 15: Q0 | 8: GND | GND |'
- en: '| 31 | 1: Q1 | 9: SO | Shift 3 DS |'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 31 | 1: Q1 | 9: SO | Shift 3 DS |'
- en: '| 30 | 2: Q2 | 10: MR | +5V |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 30 | 2: Q2 | 10: MR | +5V |'
- en: '| 29 | 3: Q3 | 11: SH-CP | 13 |'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 29 | 3: Q3 | 11: SH-CP | 13 |'
- en: '| 20 | 4: Q4 | 12: ST-CP | 10 |'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 20 | 4: Q4 | 12: ST-CP | 10 |'
- en: '| 19 | 5: Q5 | 13: OE | GND |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 19 | 5: Q5 | 13: OE | GND |'
- en: '| 18 | 6: Q6 | 14: DS | Shift 2 SO |'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 18 | 6: Q6 | 14: DS | Shift 2 SO |'
- en: '| 17 | 7: Q7 | 16: VCC | +5V |'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 17 | 7: Q7 | 16: VCC | +5V |'
- en: '**FIGURE 24-4:**'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 24-4：**'
- en: The shift registers should straddle the break of the breadboard.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 移位寄存器应跨越面包板的断裂处。
- en: '![image](../images/f24-04.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f24-04.jpg)'
- en: Now insert the remaining three shift registers into the breadboard. Shift register
    2 controls the green LEDs, shift register 3 controls the blue LEDs, and shift
    register 4 controls the red LEDs. Connect the wires for each shift register as
    shown in the following tables. All color LED pins will need resistors.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在插入其余的三个移位寄存器到面包板中。移位寄存器 2 控制绿色 LED，移位寄存器 3 控制蓝色 LED，移位寄存器 4 控制红色 LED。按照以下表格连接每个移位寄存器的电线。所有颜色的
    LED 引脚都需要电阻。
- en: '| **GREEN LED PINS** | **SHIFT REGISTER 2 PINS** |'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **绿色 LED 引脚** | **移位寄存器 2 引脚** |'
- en: '| --- | --- |'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED 矩阵** | **移位寄存器** | **移位寄存器** | **Arduino** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 28 | 15: Q0 | 8: GND | GND |'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 28 | 15: Q0 | 8: GND | GND |'
- en: '| 27 | 1: Q1 | 9: SO | Shift 1 DS |'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 27 | 1: Q1 | 9: SO | Shift 1 DS |'
- en: '| 26 | 2: Q2 | 10: MR | +5V |'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 26 | 2: Q2 | 10: MR | +5V |'
- en: '| 25 | 3: Q3 | 11: SH-CP | 13 |'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 25 | 3: Q3 | 11: SH-CP | 13 |'
- en: '| 24 | 4: Q4 | 12: ST-CP | 10 |'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 24 | 4: Q4 | 12: ST-CP | 10 |'
- en: '| 23 | 5: Q5 | 13: OE | GND |'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 23 | 5: Q5 | 13: OE | GND |'
- en: '| 22 | 6: Q6 | 14: DS | 11 |'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 22 | 6: Q6 | 14: DS | 11 |'
- en: '| 21 | 7: Q7 | 16: VCC | +5V |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 21 | 7: Q7 | 16: VCC | +5V |'
- en: '| **BLUE LED PINS** | **SHIFT REGISTER 3 PINS** |'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **蓝色 LED 引脚** | **移位寄存器 3 引脚** |'
- en: '| --- | --- |'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED 矩阵** | **移位寄存器** | **移位寄存器** | **Arduino** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 1 | 15: Q0 | 8: GND | GND |'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 1 | 15: Q0 | 8: GND | GND |'
- en: '| 2 | 1: Q1 | 9: SO | Shift 4 DS |'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 2 | 1: Q1 | 9: SO | Shift 4 DS |'
- en: '| 3 | 2: Q2 | 10: MR | +5V |'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 3 | 2: Q2 | 10: MR | +5V |'
- en: '| 4 | 3: Q3 | 11: SH-CP | 13 |'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 4 | 3: Q3 | 11: SH-CP | 13 |'
- en: '| 5 | 4: Q4 | 12: ST-CP | 10 |'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 5 | 4: Q4 | 12: ST-CP | 10 |'
- en: '| 6 | 5: Q5 | 13: OE | GND |'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 6 | 5: Q5 | 13: OE | GND |'
- en: '| 7 | 6: Q6 | 14: DS | Shift 1 SO |'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 7 | 6：Q6 | 14：DS | 移位 1 SO |'
- en: '| 8 | 7: Q7 | 16: VCC | +5V |'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 8 | 7：Q7 | 16：VCC | +5V |'
- en: '| **RED LED PINS** | **SHIFT REGISTER 4 PINS** |'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **红色 LED 引脚** | **移位寄存器 4 引脚** |'
- en: '| --- | --- |'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **LED 矩阵** | **移位寄存器** | **移位寄存器** | **Arduino** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 9 | 15: Q0 | 8: GND | GND |'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 9 | 15：Q0 | 8：GND | GND |'
- en: '| 10 | 1: Q1 | 9: SO | Shift 3 DS |'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 10 | 1：Q1 | 9：SO | 移位 3 DS |'
- en: '| 11 | 2: Q2 | 10: MR | +5V |'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 11 | 2：Q2 | 10：MR | +5V |'
- en: '| 12 | 3: Q3 | 11: SH-CP | 13 |'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 12 | 3：Q3 | 11：SH-CP | 13 |'
- en: '| 13 | 4: Q4 | 12: ST-CP | 10 |'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 13 | 4：Q4 | 12：ST-CP | 10 |'
- en: '| 14 | 5: Q5 | 13: OE | GND |'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 14 | 5：Q5 | 13：OE | GND |'
- en: '| 15 | 6: Q6 | 14: DS | Shift 2 SO |'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 15 | 6：Q6 | 14：DS | 移位 2 SO |'
- en: '| 16 | 7: Q7 | 16: VCC | +5V |'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 16 | 7：Q7 | 16：VCC | +5V |'
- en: The Arduino controls the LEDs through three PWM pins, one each for clock, data,
    and latch. Each pin is connected to the Arduino as follows.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Arduino 通过三个 PWM 引脚控制 LED，每个引脚分别用于时钟、数据和锁存。每个引脚的连接如下。
- en: '| **SHIFT REGISTER** | **ARDUINO** | **FUNCTION** |'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **移位寄存器** | **Arduino** | **功能** |'
- en: '| --- | --- | --- |'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Pin 9 (shift reg 2) | Pin 11 | Data |'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 9（移位寄存器 2） | 引脚 11 | 数据 |'
- en: '| Pin 12 (all shift reg) | Pin 10 | Latch |'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 12（所有移位寄存器） | 引脚 10 | 锁存 |'
- en: '| Pin 11 (all shift reg) | Pin 13 | Clock |'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 引脚 11（所有移位寄存器） | 引脚 13 | 时钟 |'
- en: Check that your setup matches the circuit diagram in [Figure 24-5](ch24.xhtml#ch24fig5),
    and then upload the code in “[The Sketch](ch24.xhtml#ch24lev1sec03)” below.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查你的设置是否与[图 24-5](ch24.xhtml#ch24fig5)中的电路图一致，然后上传下面的代码“[草图](ch24.xhtml#ch24lev1sec03)”。
- en: '**FIGURE 24-5:**'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 24-5：**'
- en: The circuit diagram for the rainbow maker
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 彩虹制造器的电路图
- en: '![image](../images/f24-05.jpg)'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f24-05.jpg)'
- en: '**THE SKETCH**'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**草图**'
- en: The sketch first defines the three Arduino pins that control the shift registers.
    The latch pin is defined as Arduino pin 10, the clock pin as 13, and the data
    pin as 11\. We define a number of variables between 0 and 255 to control the brightness
    of the LED colors. The sketch then turns on each LED fully in turn and combines
    the three colors to create the colors of the rainbow. For instance, with green
    on, blue off, and red on, the color yellow is displayed. The sketch then finishes
    by cycling though random colors.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 草图首先定义了控制移位寄存器的三个 Arduino 引脚。锁存引脚定义为 Arduino 引脚 10，时钟引脚为 13，数据引脚为 11。我们定义了一些变量，范围从
    0 到 255，用来控制 LED 颜色的亮度。草图随后逐个打开每个 LED，并将三种颜色组合在一起，创建彩虹的颜色。例如，当绿色亮起、蓝色熄灭、红色亮起时，显示的是黄色。草图最终通过循环随机颜色结束。
- en: '[PRE0]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'PROJECT 25: BUILD YOUR OWN ARDUINO!'
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目 25：构建你自己的 Arduino！
- en: '**THIS PROJECT WILL TEACH YOU HOW TO BUILD YOUR OWN ARDUINO USING MINIMAL INDIVIDUAL
    COMPONENTS.**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**这个项目将教你如何使用最少的单独组件构建你自己的 Arduino。**'
- en: '![image](../images/f0220-01.jpg)![image](../images/f0221-01.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0220-01.jpg)![image](../images/f0221-01.jpg)'
- en: '**PARTS REQUIRED**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需组件**'
- en: • ATMEL ATmega328p chip
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: • ATMEL ATmega328p 芯片
- en: • Breadboard
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: • 面包板
- en: • Green LED
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: • 绿色 LED
- en: • Red LED
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: • 红色 LED
- en: • 3 220-ohm resistors
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: • 3 个 220 欧姆电阻
- en: • 16 MHz crystal oscillator (HC-495)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: • 16 MHz 晶振（HC-495）
- en: • L7805cv 5V regulator
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: • L7805cv 5V 稳压器
- en: • 2 100 μF electrolytic capacitors
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: • 2 个 100 μF 电解电容
- en: • PP3 9V battery clip
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: • PP3 9V 电池夹
- en: • Momentary tactile four-pin pushbutton
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: • 瞬时触觉四脚按钮
- en: • 2 22 pF disc capacitors
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: • 2 个 22 pF 磁盘电容
- en: • Jumper wires
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: • 跳线
- en: • 9V battery
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: • 9V 电池
- en: This is a fun and inexpensive little board with the same functionality as an
    Arduino, so it can be used as part of a permanent project in place of the pricier
    Arduino board.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣且廉价的小板，其功能与 Arduino 相同，因此可以作为永久项目的一部分，代替更贵的 Arduino 板。
- en: '**HOW IT WORKS**'
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**工作原理**'
- en: Our project board works exactly the same as an Arduino board. At its heart is
    the ATMEL ATmega328p chip ([Figure 25-1](ch25.xhtml#ch25fig1)), to which we’ll
    connect additional components. The ATmega chip is the brain of the Arduino and
    carries out the instructions from an uploaded sketch.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目板与 Arduino 板的工作方式完全相同。它的核心是 ATMEL ATmega328p 芯片（见[图 25-1](ch25.xhtml#ch25fig1)），我们将在其上连接其他组件。ATmega
    芯片是 Arduino 的大脑，负责执行上传的草图中的指令。
- en: '**FIGURE 25-1:**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25-1：**'
- en: The ATMEL ATmega328p chip
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: ATMEL ATmega328p 芯片
- en: '![image](../images/f25-01.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f25-01.jpg)'
- en: The L7805cv 5V regulator regulates the voltage and limits the current of the
    9V battery to 5V, the level at which the ATmega chip operates, thereby protecting
    the chip and additional components. The 16 MHz crystal oscillator ([Figure 25-2](ch25.xhtml#ch25fig2))
    allows the Arduino to calculate time, and the capacitors act as a filter to smooth
    voltage.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 25-2:**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: The 16 MHz crystal oscillator
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-02.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: '[Table 25-1](ch25.xhtml#ch25tab1) details the pins of the ATmega328p chip and
    how they correspond to the Arduino pins. For example, pin 13 on the Arduino, which
    we used to test our Arduino in “[Testing Your Arduino: Blinking an LED](ch00.xhtml#ch00lev1sec03)”
    on [page 9](ch00.xhtml#page_9), would be pin 19 on the actual chip. The top of
    the chip can be identified by the small semicircle indentation ([Figure 25-3](ch25.xhtml#ch25fig3)).
    Pin 1 is below this indentation, and the pins are numbered 1–28 counterclockwise
    from there.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 25-1:**'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: The ATmega chip’s pins and their corresponding Arduino pins
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '| **ATMEGA PIN** | **ARDUINO FUNCTION** | **ATMEGA PIN** | **ARDUINO FUNCTION**
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| 1 | Reset | 15 | Pin 9 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| 2 | Pin 0 | 16 | Pin 10 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| 3 | Pin 1 | 17 | Pin 11 |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| 4 | Pin 2 | 18 | Pin 12 |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '| 5 | Pin 3 | 19 | Pin 13 |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| 6 | Pin 4 | 20 | BCC |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| 7 | VCC | 21 | AREF |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| 8 | GND | 22 | GND |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| 9 | Crystal | 23 | A0 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| 10 | Crystal | 24 | A1 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| 11 | Pin 5 | 25 | A2 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| 12 | Pin 6 | 26 | A3 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| 13 | Pin 7 | 27 | A4 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| 14 | Pin 8 | 28 | A5 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '**FIGURE 25-3:**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The top of the chip is marked with a semicircle indentation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-03.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: '**PREPARING THE CHIP**'
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure to buy an ATmega chip with the Arduino bootloader installed, as it
    will also come preloaded with the blinking LED sketch, which you’ll need for this
    project.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Our homemade Arduino does not have a USB connector for the chip to connect
    directly to your PC, so if you want to use this Arduino breadboard with a different
    sketch (or ir your chip didn’t come with the bootloader installed), you’ll need
    to use an existing Arduino board as a host and upload the sketch to your ATmega
    chip as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Carefully pry the Arduino ATmega chip from your existing Arduino board ([Figure
    25-4](ch25.xhtml#ch25fig4)), and replace it with your ATmega chip.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-4:**'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Removing the ATmega chip from the Arduino
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-04.jpg)'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the Arduino to your PC using a USB cable.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Arduino IDE on your PC.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the sketch onto the chip.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the sketch is uploaded, disconnect the Arduino from your PC, gently remove
    this chip from the board, and replace the original Arduino ATmega chip.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new ATmega chip should be loaded with the desired sketch. Generally you’d
    want to build your own Arduino as part of a permanent project, so the ability
    to easily load new sketches is not usually required; you’d just load one sketch
    at the beginning of the project and use that sketch from then on.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to prepare your own board.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING THE ARDUINO CIRCUIT**'
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建 Arduino 电路**'
- en: I normally show the circuit diagram at the end of the chapter, but in this instance
    it’s helpful to look at it first to reference the layout and identify the components
    being used ([Figure 25-5](ch25.xhtml#ch25fig5)).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常在章节末尾展示电路图，但在这个实例中，先看电路图有助于参考布局并识别正在使用的组件（[图 25-5](ch25.xhtml#ch25fig5)）。
- en: '**FIGURE 25-5:**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 25-5：**'
- en: The complete circuit diagram
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 完整电路图
- en: '![image](../images/f25-05.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f25-05.jpg)'
- en: Insert the ATmega chip into the breadboard with its legs straddling either side
    of the center break. You need a little space at either end for components, so
    place it roughly as shown in [Figure 25-6](ch25.xhtml#ch25fig6). Remember, pin
    1 of the ATmega328p is directly below the small semicircle indentation on the
    chip. From here, pins are numbered 1–28 counterclockwise. Use this to position
    your chip correctly. The semicircle should be on the left side of your circuit.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ATmega 芯片插入面包板，使其引脚跨越面包板中心的间隔。你需要在两端留出一些空间以放置其他组件，因此大致按照[图 25-6](ch25.xhtml#ch25fig6)所示放置。记住，ATmega328p
    的第 1 引脚位于芯片上方小半圆形凹陷的正下方。从这里开始，引脚按逆时针方向编号为 1 到 28。用这个信息来正确定位芯片。半圆形应位于电路的左侧。
- en: '**FIGURE 25-6:**'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 25-6：**'
- en: Placing the ATmega chip so it straddles the center break
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放置 ATmega 芯片，使其跨越中心间隔
- en: '![image](../images/f25-06.jpg)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f25-06.jpg)'
- en: Connect pins 7, 20, and 21 of the ATmega to their closest positive power rail
    on the breadboard, and pins 8 and 23 to the negative power rails. Use jumper wires
    to connect the positive and GND power rails on either side of the board, as shown
    in [Figure 25-7](ch25.xhtml#ch25fig7).
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 ATmega 的第 7、20 和 21 引脚连接到面包板上最接近的正电源轨，将第 8 和 23 引脚连接到负电源轨。使用跳线将电路板两侧的正电源轨和
    GND 电源轨连接，如[图 25-7](ch25.xhtml#ch25fig7)所示。
- en: '**FIGURE 25-7:**'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 25-7：**'
- en: Connecting to the power rails
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接到电源轨
- en: '![image](../images/f25-07.jpg)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f25-07.jpg)'
- en: Connect one leg of the crystal oscillator to pin 9 on the ATmega chip, and connect
    the other leg to pin 10\. Connect the legs of one of the 22 pF disc capacitors
    to pin 9 and GND, and the legs of the other disc capacitor to pin 10 and GND,
    as shown in [Figure 25-8](ch25.xhtml#ch25fig8).
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将晶体振荡器的一只引脚连接到 ATmega 芯片的第 9 引脚，另一只引脚连接到第 10 引脚。将其中一个 22 pF 磁盘电容器的引脚连接到第 9 引脚和
    GND，将另一个磁盘电容器的引脚连接到第 10 引脚和 GND，如[图 25-8](ch25.xhtml#ch25fig8)所示。
- en: '**FIGURE 25-8:**'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 25-8：**'
- en: Inserting the crystal oscillator and 22pf disc capacitors
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入晶体振荡器和 22pF 磁盘电容器
- en: '![image](../images/f25-08.jpg)'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f25-08.jpg)'
- en: Insert the pushbutton into the breadboard to the left of the ATmega chip, with
    the legs straddling the center break in the breadboard. Using jumper wires, connect
    the lower-right pin of the pushbutton to pin 1 on the ATmega, and the lower-left
    pin to GND, as shown in [Figure 25-9](ch25.xhtml#ch25fig9). Connect a 220-ohm
    resistor to the lower-right pin, and connect the other side of this resistor to
    the GND rail. This pushbutton will act as our reset button.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复位按钮插入面包板，位置在 ATmega 芯片的左侧，使其引脚跨越面包板的中心间隔。使用跳线将复位按钮的右下引脚连接到 ATmega 的第 1 引脚，左下引脚连接到
    GND，如[图 25-9](ch25.xhtml#ch25fig9)所示。将一只 220 欧姆电阻连接到右下引脚，并将电阻的另一端连接到 GND 电源轨。这个按钮将作为我们的复位按钮。
- en: '**FIGURE 25-9:**'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 25-9：**'
- en: Inserting the reset button
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入复位按钮
- en: '![image](../images/f25-09.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f25-09.jpg)'
- en: Insert the L7805cv 5V regulator into the top-left corner of the breadboard with
    the printed number of the component facing you, as shown in [Figure 25-10](ch25.xhtml#ch25fig10)—the
    pins are numbered 1–3 from left to right. Insert one 100 μF electrolytic capacitor
    into the top power rail of the breadboard, with one pin in the positive rail and
    the other pin in the negative rail. Connect the second 100 μF electrolytic capacitor
    to pins 1 and 2 of the 5V regulator. Then connect pin 2 of the regulator to the
    negative power rail and pin 3 to the positive power rail.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 L7805cv 5V 稳压器插入面包板的左上角，组件上的打印数字朝向你，按[图 25-10](ch25.xhtml#ch25fig10)所示放置——引脚从左到右编号为
    1 到 3。将一只 100 μF 电解电容器插入面包板的上方电源轨，一只引脚连接到正电源轨，另一只引脚连接到负电源轨。将第二只 100 μF 电解电容器连接到
    5V 稳压器的第 1 和第 2 引脚。然后将稳压器的第 2 引脚连接到负电源轨，第 3 引脚连接到正电源轨。
- en: '**FIGURE 25-10:**'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图 25-10：**'
- en: Connecting the electrolytic capacitors and the L7805cv 5V regulator
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 连接电解电容器和 L7805cv 5V 稳压器
- en: '![image](../images/f25-10.jpg)'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f25-10.jpg)'
- en: Insert the red LED into the breadboard, connecting the long, positive leg to
    the positive rail via a 220-ohm resistor, and the short, negative leg to GND.
    Then insert the green LED, connecting the short leg to pin 21 on the ATmega, and
    the long leg to the positive power rail via a 220-ohm resistor, as shown in [Figure
    25-11](ch25.xhtml#ch25fig11). Add positive power from the battery to pin 1 on
    the 5V regulator and GND to pin 2 on the regulator.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将红色LED插入面包板，将长的正极引脚通过一个220欧姆电阻连接到正电源轨，将短的负极引脚连接到GND。然后插入绿色LED，将短的引脚连接到ATmega的21号引脚，长的引脚通过一个220欧姆电阻连接到正电源轨，如[图25-11](ch25.xhtml#ch25fig11)所示。将电池的正电源接到5V调节器的1号引脚，GND接到调节器的2号引脚。
- en: '**FIGURE 25-11:**'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图25-11：**'
- en: Inserting the LEDs and connecting the battery
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 插入LED并连接电池
- en: '![image](../images/f25-11.jpg)'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![image](../images/f25-11.jpg)'
- en: Your board is now complete and should look like [Figure 25-12](ch25.xhtml#ch25fig12).
    The red LED lights when power is added to the breadboard rails to indicate that
    the Arduino is on and working, and the green LED lights in response to the “Blinking
    an LED” sketch loaded on the ATmega chip.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你的电路板现在已经完成，应该像[图25-12](ch25.xhtml#ch25fig12)所示那样。红色LED在面包板的电源轨接通时亮起，表示Arduino已开机并在正常工作，而绿色LED则响应加载到ATmega芯片上的“闪烁LED”示例程序而亮起。
- en: '**FIGURE 25-12:**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**图25-12：**'
- en: The completed circuit
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的电路
- en: '![image](../images/f25-12.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f25-12.jpg)'
- en: Using the reference in [Table 25-1](ch25.xhtml#ch25tab1), you can use this board
    just like an Arduino Uno by connecting components to the ATmega chip pins instead
    of the Arduino pins. If you want to make any of the projects from this book permanent,
    consider building your own Arduino to power it! Remember to load the sketch to
    the ATmega chip through the real Arduino board first.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[表25-1](ch25.xhtml#ch25tab1)中的参考，你可以像使用Arduino Uno一样使用这个电路板，通过将组件连接到ATmega芯片的引脚，而不是Arduino的引脚。如果你想将本书中的某个项目做成永久性的，可以考虑自己构建一个Arduino来为其供电！记得首先通过真实的Arduino板将程序加载到ATmega芯片上。
