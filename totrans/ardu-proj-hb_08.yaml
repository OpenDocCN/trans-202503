- en: '**PART 7**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](../images/common-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**ADVANCED**'
  prefs: []
  type: TYPE_NORMAL
- en: 'PROJECT 24: RAINBOW LIGHT SHOW'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**IN THIS PROJECT, WE’LL CREATE A RAINBOW LIGHT SHOW USING AN 8×8 RGB LED MATRIX.
    WE’LL ALSO USE SHIFT REGISTERS TO EXTEND THE ARDUINO AND CONTROL THE MATRIX.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0208-01.jpg)![image](../images/f0209-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • Arduino board
  prefs: []
  type: TYPE_NORMAL
- en: • 2 full-size breadboards
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 8×8 RGB LED matrix
  prefs: []
  type: TYPE_NORMAL
- en: • 4 74HC595 shift registers
  prefs: []
  type: TYPE_NORMAL
- en: • 16 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: • 8 330-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An RGB LED matrix ([Figure 24-1](ch24.xhtml#ch24fig1)) is a grid of 64 red,
    green, and blue LEDs. You can create the colors of the rainbow by controlling
    each LED individually and by mixing colors together.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 24-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: An RGB LED matrix
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f24-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The LED matrix has a total of 32 pins ([Figure 24-2](ch24.xhtml#ch24fig2));
    8 pins control the common-anode positive leg of each LED, and 8 pins apiece control
    the level of red, green, and blue. In the matrix we’ve used here, pins 17–20 and
    29–32 are the anode pins, 9–16 are for red, 21–28 for green, and 1–8 for blue,
    but your matrix may have different connections. Pin number 1 will be identified
    as shown in the bottom-left corner of [Figure 24-2](ch24.xhtml#ch24fig2)—the pin
    numbers run clockwise in this image.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 24-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: The pins of an RGB LED matrix
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f24-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your matrix should have come with a data sheet that tells you which pins control
    the red, green, and blue LEDs. If the pin numbers on your data sheet are different
    from those listed in [Table 24-1](ch24.xhtml#ch24tab1), follow your data sheet
    to make the connections to the shift registers and the Arduino. Each color pin
    requires a resistor to prevent it from overloading and burning out, but the values
    are slightly different—use 220-ohm resistors for the blue and green, and 330-ohm
    resistors for the red.
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 24-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Pin configuration for an RGB LED matrix
  prefs: []
  type: TYPE_NORMAL
- en: '| **MATRIX PIN FUNCTION** | **MATRIX PIN NUMBER** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Common anode (+) | 17, 18, 19, 20, 29, 30, 31, 32 |'
  prefs: []
  type: TYPE_TB
- en: '| Red LEDs | 9, 10, 11, 12, 13, 14, 15, 16 |'
  prefs: []
  type: TYPE_TB
- en: '| Green LEDs | 21, 22, 23, 24, 25, 26, 27, 28 |'
  prefs: []
  type: TYPE_TB
- en: '| Blue LEDs | 1, 2, 3, 4, 5, 6, 7, 8 |'
  prefs: []
  type: TYPE_TB
- en: The layout may look complicated, but that’s simply because we’re using so many
    different wires. Just remember to take the project one step at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Because there are so many connections, we’ll run out of pins on the Arduino
    board, so we’ll extend the board using *shift registers*. A shift register is
    a digital memory circuit found in calculators, computers, and data-processing
    systems. This project uses the 74HC595 shift register to control eight outputs
    at a time, while taking up only three pins on your Arduino. We’ll link multiple
    registers together to control more pins at once, using one for the common anode
    and one for each LED color.
  prefs: []
  type: TYPE_NORMAL
- en: The pin layout for the shift register is shown in [Figure 24-3](ch24.xhtml#ch24fig3),
    and the functions are described in [Table 24-2](ch24.xhtml#ch24tab2). When building
    the project, we’ll refer to the pin number of the shift register and function
    to assist identification.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 24-3:**'
  prefs: []
  type: TYPE_NORMAL
- en: Pin layout for the shift register
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f24-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**TABLE 24-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: Shift register pins
  prefs: []
  type: TYPE_NORMAL
- en: '| **SHIFT REGISTER** | **CONNECTIONS** | **PIN FUNCTION** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Pins 1–7, 15 | Q0–Q7 | Output pins |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 8 | GND | Ground, VSS |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 9 | SO | Serial out |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 10 | MR | Master Reclear, active low |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 11 | SH_CP | Shift register clock pin (CLOCK pin) |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 12 | ST_CP | Storage register clock pin (LATCH pin) |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 13 | OE | Output Enable, active low |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 14 | DS | Serial data input (DATA pin) |'
  prefs: []
  type: TYPE_TB
- en: '| Pin 16 | VCC | Positive power |'
  prefs: []
  type: TYPE_TB
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Insert the 8×8 RGB LED matrix across two full-size breadboards.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a 330-ohm resistor for each red LED pin and a 220-ohm resistor for each
    green or blue LED pin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the first shift register into one of the breadboards near the common-anode
    pins on the LED matrix. Place the register so that it straddles the center break,
    as shown in [Figure 24-4](ch24.xhtml#ch24fig4). Connect the common-anode pins
    of the LED matrix to shift register 1 as follows. These pins do not need resistors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **COMMON-ANODE PINS** | **SHIFT REGISTER 1 PINS** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 32 | 15: Q0 | 8: GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 31 | 1: Q1 | 9: SO | Shift 3 DS |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 30 | 2: Q2 | 10: MR | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 29 | 3: Q3 | 11: SH-CP | 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 20 | 4: Q4 | 12: ST-CP | 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 19 | 5: Q5 | 13: OE | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 18 | 6: Q6 | 14: DS | Shift 2 SO |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 17 | 7: Q7 | 16: VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 24-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The shift registers should straddle the break of the breadboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f24-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now insert the remaining three shift registers into the breadboard. Shift register
    2 controls the green LEDs, shift register 3 controls the blue LEDs, and shift
    register 4 controls the red LEDs. Connect the wires for each shift register as
    shown in the following tables. All color LED pins will need resistors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **GREEN LED PINS** | **SHIFT REGISTER 2 PINS** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 28 | 15: Q0 | 8: GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 27 | 1: Q1 | 9: SO | Shift 1 DS |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 26 | 2: Q2 | 10: MR | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 25 | 3: Q3 | 11: SH-CP | 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 24 | 4: Q4 | 12: ST-CP | 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 23 | 5: Q5 | 13: OE | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 22 | 6: Q6 | 14: DS | 11 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 21 | 7: Q7 | 16: VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **BLUE LED PINS** | **SHIFT REGISTER 3 PINS** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 1 | 15: Q0 | 8: GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 2 | 1: Q1 | 9: SO | Shift 4 DS |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 3 | 2: Q2 | 10: MR | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 4 | 3: Q3 | 11: SH-CP | 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 5 | 4: Q4 | 12: ST-CP | 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 6 | 5: Q5 | 13: OE | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 7 | 6: Q6 | 14: DS | Shift 1 SO |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 8 | 7: Q7 | 16: VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **RED LED PINS** | **SHIFT REGISTER 4 PINS** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **LED MATRIX** | **SHIFT REGISTER** | **SHIFT REGISTER** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 9 | 15: Q0 | 8: GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 10 | 1: Q1 | 9: SO | Shift 3 DS |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 11 | 2: Q2 | 10: MR | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 12 | 3: Q3 | 11: SH-CP | 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 13 | 4: Q4 | 12: ST-CP | 10 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 14 | 5: Q5 | 13: OE | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 15 | 6: Q6 | 14: DS | Shift 2 SO |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| 16 | 7: Q7 | 16: VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The Arduino controls the LEDs through three PWM pins, one each for clock, data,
    and latch. Each pin is connected to the Arduino as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SHIFT REGISTER** | **ARDUINO** | **FUNCTION** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 9 (shift reg 2) | Pin 11 | Data |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 12 (all shift reg) | Pin 10 | Latch |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Pin 11 (all shift reg) | Pin 13 | Clock |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Check that your setup matches the circuit diagram in [Figure 24-5](ch24.xhtml#ch24fig5),
    and then upload the code in “[The Sketch](ch24.xhtml#ch24lev1sec03)” below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 24-5:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The circuit diagram for the rainbow maker
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f24-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first defines the three Arduino pins that control the shift registers.
    The latch pin is defined as Arduino pin 10, the clock pin as 13, and the data
    pin as 11\. We define a number of variables between 0 and 255 to control the brightness
    of the LED colors. The sketch then turns on each LED fully in turn and combines
    the three colors to create the colors of the rainbow. For instance, with green
    on, blue off, and red on, the color yellow is displayed. The sketch then finishes
    by cycling though random colors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'PROJECT 25: BUILD YOUR OWN ARDUINO!'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**THIS PROJECT WILL TEACH YOU HOW TO BUILD YOUR OWN ARDUINO USING MINIMAL INDIVIDUAL
    COMPONENTS.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0220-01.jpg)![image](../images/f0221-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: • ATMEL ATmega328p chip
  prefs: []
  type: TYPE_NORMAL
- en: • Breadboard
  prefs: []
  type: TYPE_NORMAL
- en: • Green LED
  prefs: []
  type: TYPE_NORMAL
- en: • Red LED
  prefs: []
  type: TYPE_NORMAL
- en: • 3 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: • 16 MHz crystal oscillator (HC-495)
  prefs: []
  type: TYPE_NORMAL
- en: • L7805cv 5V regulator
  prefs: []
  type: TYPE_NORMAL
- en: • 2 100 μF electrolytic capacitors
  prefs: []
  type: TYPE_NORMAL
- en: • PP3 9V battery clip
  prefs: []
  type: TYPE_NORMAL
- en: • Momentary tactile four-pin pushbutton
  prefs: []
  type: TYPE_NORMAL
- en: • 2 22 pF disc capacitors
  prefs: []
  type: TYPE_NORMAL
- en: • Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: • 9V battery
  prefs: []
  type: TYPE_NORMAL
- en: This is a fun and inexpensive little board with the same functionality as an
    Arduino, so it can be used as part of a permanent project in place of the pricier
    Arduino board.
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our project board works exactly the same as an Arduino board. At its heart is
    the ATMEL ATmega328p chip ([Figure 25-1](ch25.xhtml#ch25fig1)), to which we’ll
    connect additional components. The ATmega chip is the brain of the Arduino and
    carries out the instructions from an uploaded sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 25-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The ATMEL ATmega328p chip
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The L7805cv 5V regulator regulates the voltage and limits the current of the
    9V battery to 5V, the level at which the ATmega chip operates, thereby protecting
    the chip and additional components. The 16 MHz crystal oscillator ([Figure 25-2](ch25.xhtml#ch25fig2))
    allows the Arduino to calculate time, and the capacitors act as a filter to smooth
    voltage.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 25-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: The 16 MHz crystal oscillator
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Table 25-1](ch25.xhtml#ch25tab1) details the pins of the ATmega328p chip and
    how they correspond to the Arduino pins. For example, pin 13 on the Arduino, which
    we used to test our Arduino in “[Testing Your Arduino: Blinking an LED](ch00.xhtml#ch00lev1sec03)”
    on [page 9](ch00.xhtml#page_9), would be pin 19 on the actual chip. The top of
    the chip can be identified by the small semicircle indentation ([Figure 25-3](ch25.xhtml#ch25fig3)).
    Pin 1 is below this indentation, and the pins are numbered 1–28 counterclockwise
    from there.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TABLE 25-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The ATmega chip’s pins and their corresponding Arduino pins
  prefs: []
  type: TYPE_NORMAL
- en: '| **ATMEGA PIN** | **ARDUINO FUNCTION** | **ATMEGA PIN** | **ARDUINO FUNCTION**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Reset | 15 | Pin 9 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Pin 0 | 16 | Pin 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | Pin 1 | 17 | Pin 11 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Pin 2 | 18 | Pin 12 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Pin 3 | 19 | Pin 13 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Pin 4 | 20 | BCC |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | VCC | 21 | AREF |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | GND | 22 | GND |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | Crystal | 23 | A0 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | Crystal | 24 | A1 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | Pin 5 | 25 | A2 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | Pin 6 | 26 | A3 |'
  prefs: []
  type: TYPE_TB
- en: '| 13 | Pin 7 | 27 | A4 |'
  prefs: []
  type: TYPE_TB
- en: '| 14 | Pin 8 | 28 | A5 |'
  prefs: []
  type: TYPE_TB
- en: '**FIGURE 25-3:**'
  prefs: []
  type: TYPE_NORMAL
- en: The top of the chip is marked with a semicircle indentation.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PREPARING THE CHIP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure to buy an ATmega chip with the Arduino bootloader installed, as it
    will also come preloaded with the blinking LED sketch, which you’ll need for this
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our homemade Arduino does not have a USB connector for the chip to connect
    directly to your PC, so if you want to use this Arduino breadboard with a different
    sketch (or ir your chip didn’t come with the bootloader installed), you’ll need
    to use an existing Arduino board as a host and upload the sketch to your ATmega
    chip as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Carefully pry the Arduino ATmega chip from your existing Arduino board ([Figure
    25-4](ch25.xhtml#ch25fig4)), and replace it with your ATmega chip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-4:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Removing the ATmega chip from the Arduino
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the Arduino to your PC using a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Arduino IDE on your PC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the sketch onto the chip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the sketch is uploaded, disconnect the Arduino from your PC, gently remove
    this chip from the board, and replace the original Arduino ATmega chip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new ATmega chip should be loaded with the desired sketch. Generally you’d
    want to build your own Arduino as part of a permanent project, so the ability
    to easily load new sketches is not usually required; you’d just load one sketch
    at the beginning of the project and use that sketch from then on.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to prepare your own board.
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILDING THE ARDUINO CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I normally show the circuit diagram at the end of the chapter, but in this instance
    it’s helpful to look at it first to reference the layout and identify the components
    being used ([Figure 25-5](ch25.xhtml#ch25fig5)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 25-5:**'
  prefs: []
  type: TYPE_NORMAL
- en: The complete circuit diagram
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Insert the ATmega chip into the breadboard with its legs straddling either side
    of the center break. You need a little space at either end for components, so
    place it roughly as shown in [Figure 25-6](ch25.xhtml#ch25fig6). Remember, pin
    1 of the ATmega328p is directly below the small semicircle indentation on the
    chip. From here, pins are numbered 1–28 counterclockwise. Use this to position
    your chip correctly. The semicircle should be on the left side of your circuit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-6:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Placing the ATmega chip so it straddles the center break
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect pins 7, 20, and 21 of the ATmega to their closest positive power rail
    on the breadboard, and pins 8 and 23 to the negative power rails. Use jumper wires
    to connect the positive and GND power rails on either side of the board, as shown
    in [Figure 25-7](ch25.xhtml#ch25fig7).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-7:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting to the power rails
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect one leg of the crystal oscillator to pin 9 on the ATmega chip, and connect
    the other leg to pin 10\. Connect the legs of one of the 22 pF disc capacitors
    to pin 9 and GND, and the legs of the other disc capacitor to pin 10 and GND,
    as shown in [Figure 25-8](ch25.xhtml#ch25fig8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-8:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inserting the crystal oscillator and 22pf disc capacitors
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the pushbutton into the breadboard to the left of the ATmega chip, with
    the legs straddling the center break in the breadboard. Using jumper wires, connect
    the lower-right pin of the pushbutton to pin 1 on the ATmega, and the lower-left
    pin to GND, as shown in [Figure 25-9](ch25.xhtml#ch25fig9). Connect a 220-ohm
    resistor to the lower-right pin, and connect the other side of this resistor to
    the GND rail. This pushbutton will act as our reset button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-9:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inserting the reset button
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the L7805cv 5V regulator into the top-left corner of the breadboard with
    the printed number of the component facing you, as shown in [Figure 25-10](ch25.xhtml#ch25fig10)—the
    pins are numbered 1–3 from left to right. Insert one 100 μF electrolytic capacitor
    into the top power rail of the breadboard, with one pin in the positive rail and
    the other pin in the negative rail. Connect the second 100 μF electrolytic capacitor
    to pins 1 and 2 of the 5V regulator. Then connect pin 2 of the regulator to the
    negative power rail and pin 3 to the positive power rail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-10:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connecting the electrolytic capacitors and the L7805cv 5V regulator
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Insert the red LED into the breadboard, connecting the long, positive leg to
    the positive rail via a 220-ohm resistor, and the short, negative leg to GND.
    Then insert the green LED, connecting the short leg to pin 21 on the ATmega, and
    the long leg to the positive power rail via a 220-ohm resistor, as shown in [Figure
    25-11](ch25.xhtml#ch25fig11). Add positive power from the battery to pin 1 on
    the 5V regulator and GND to pin 2 on the regulator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 25-11:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inserting the LEDs and connecting the battery
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f25-11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Your board is now complete and should look like [Figure 25-12](ch25.xhtml#ch25fig12).
    The red LED lights when power is added to the breadboard rails to indicate that
    the Arduino is on and working, and the green LED lights in response to the “Blinking
    an LED” sketch loaded on the ATmega chip.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 25-12:**'
  prefs: []
  type: TYPE_NORMAL
- en: The completed circuit
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f25-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the reference in [Table 25-1](ch25.xhtml#ch25tab1), you can use this board
    just like an Arduino Uno by connecting components to the ATmega chip pins instead
    of the Arduino pins. If you want to make any of the projects from this book permanent,
    consider building your own Arduino to power it! Remember to load the sketch to
    the ATmega chip through the real Arduino board first.
  prefs: []
  type: TYPE_NORMAL
