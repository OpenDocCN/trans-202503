- en: '**7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7'
- en: BOOTKIT INFECTION TECHNIQUES**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**引导病毒感染技术**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: 'Having explored the Windows boot process, let’s now discuss bootkit infection
    techniques that target modules involved in system startup. These techniques are
    split into two groups according to the boot components they target: MBR infection
    techniques and VBR/Initial Program Loader (IPL) infection techniques. We’ll look
    at the TDL4 bootkit to demonstrate MBR infection, and then at the Rovnix and Gapz
    bootkits to demonstrate two different VBR infection techniques.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了Windows启动过程后，我们接下来讨论一下针对系统启动过程中涉及的模块的引导病毒感染技术。这些技术根据其目标启动组件的不同，分为两类：MBR感染技术和VBR/初始程序加载器（IPL）感染技术。我们将通过分析TDL4引导病毒来展示MBR感染技术，再通过分析Rovnix和Gapz引导病毒来展示两种不同的VBR感染技术。
- en: '**MBR Infection Techniques**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**MBR感染技术**'
- en: Approaches based on MBR modifications are the most common infection techniques
    used by bootkits to attack the Windows boot process. Most MBR infection techniques
    directly modify either the MBR code or MBR data (such as the partition table)
    or, in some cases, both.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 基于MBR修改的方法是引导病毒攻击Windows启动过程时最常见的感染技术。大多数MBR感染技术直接修改MBR代码或MBR数据（如分区表），或者在某些情况下，二者都修改。
- en: MBR code modification changes *only* the MBR boot code, leaving the partition
    table untouched. This is the most straightforward infection method. It involves
    overwriting the system MBR code with malicious code while saving the original
    content of the MBR in some way, such as by storing it in a hidden location on
    the hard drive.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MBR代码修改仅*更改*MBR引导代码，而保持分区表不变。这是最直接的感染方法。它通过将恶意代码覆盖系统MBR代码，同时以某种方式保存MBR的原始内容，例如将其存储在硬盘上的隐藏位置。
- en: Conversely, the MBR data modification method involves altering the MBR partition
    table, *without* changing the MBR boot code. This method is more advanced because
    the contents of the partition table differ from system to system, making it difficult
    for analysts to find a pattern that will definitively identify the infection.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，MBR数据修改方法涉及改变MBR分区表，*而不*改变MBR引导代码。由于分区表的内容因系统而异，这种方法更为先进，因为这使得分析人员很难找到可以明确识别感染的模式。
- en: Finally, hybrid methods that combine these two techniques are also possible
    and have been used in the wild.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，结合这两种技术的混合方法也是可能的，并且在实际应用中已有使用。
- en: Next, we’ll look in more detail at the two MBR infection techniques.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更详细地分析两种MBR感染技术。
- en: '***MBR Code Modification: The TDL4 Infection Technique***'
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***MBR代码修改：TDL4感染技术***'
- en: 'To illustrate the MBR code-modification infection technique, we’ll take an
    in-depth look at the first real-world bootkit to target the Microsoft Windows
    64-bit platform: TDL4\. TDL4 reuses the notoriously advanced evasion and anti-forensic
    techniques of its rootkit predecessor, TDL3 (discussed in [Chapter 1](ch01.xhtml#ch01)),
    but has the added ability to bypass the Kernel-Mode Code Signing Policy (discussed
    in [Chapter 6](ch06.xhtml#ch06)) and infect 64-bit Windows systems.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明MBR代码修改感染技术，我们将深入分析第一个真正针对Microsoft Windows 64位平台的引导病毒：TDL4。TDL4延续了其前代rootkit
    TDL3（在[第1章](ch01.xhtml#ch01)中讨论过）那些广为人知的先进规避和反取证技术，并且具有绕过内核模式代码签名策略（在[第6章](ch06.xhtml#ch06)中讨论）并感染64位Windows系统的能力。
- en: On 32-bit systems, the TDL3 rootkit was able to persist through a system reboot
    by modifying a boot-start kernel-mode driver. However, the mandatory signature
    checks introduced in 64-bit systems prevented the infected driver from being loaded,
    rendering TDL3 ineffective.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在32位系统中，TDL3 rootkit能够通过修改引导启动的内核模式驱动程序，在系统重启后仍能保持持久性。然而，在64位系统中引入的强制签名检查防止了感染的驱动程序被加载，从而使得TDL3失效。
- en: In an effort to bypass 64-bit Microsoft Windows, the developers of TDL3 moved
    the infection point to earlier in the boot process, implementing a bootkit as
    a means of persistence. Thus, the TDL3 rootkit evolved into the TDL4 bootkit.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过64位的Microsoft Windows，TDL3的开发者将感染点移至启动过程的更早阶段，实施了引导病毒作为一种持久性手段。因此，TDL3 rootkit演变为TDL4引导病毒。
- en: '**Infecting the System**'
  id: totrans-14
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**感染系统**'
- en: TDL4 infects the system by overwriting the MBR of the bootable hard drive with
    a malicious MBR (which, as we discussed, is executed *before* the Windows kernel
    image), so it’s able to tamper with the kernel image and disable integrity checks.
    (Other MBR-based bootkits are described in detail in [Chapter 10](ch10.xhtml#ch10).)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TDL4通过将启动硬盘的MBR覆盖为恶意MBR来感染系统（正如我们所讨论的，它会在Windows内核镜像*之前*执行），因此它能够篡改内核镜像并禁用完整性检查。（其他基于MBR的引导程序将在[第10章](ch10.xhtml#ch10)中详细描述。）
- en: Like TDL3, TDL4 creates a hidden storage area at the end of the hard drive,
    into which it writes the original MBR and some modules of its own, as listed in
    [Table 7-1](ch07.xhtml#ch07tab01). TDL4 stores the original MBR so that it can
    be loaded later, once infection has taken place, and the system will seemingly
    boot as normal. The *mbr*, *ldr16*, *ldr32*, and *ldr64* modules are used by the
    bootkit at boot time to sidestep Windows integrity checks and to ultimately load
    the unsigned malicious drivers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与TDL3类似，TDL4在硬盘的末尾创建了一个隐藏的存储区域，向其中写入了原始的MBR以及一些自己的模块，具体见[表7-1](ch07.xhtml#ch07tab01)。TDL4存储原始MBR，以便在感染发生后能够重新加载，并且系统看似会正常启动。引导程序在启动时使用*mbr*、*ldr16*、*ldr32*和*ldr64*模块来绕过Windows完整性检查，并最终加载未签名的恶意驱动程序。
- en: '**Table 7-1:** Modules Written to TDL4’s Hidden Storage upon Infecting the
    System'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**表7-1：** TDL4感染系统时写入隐藏存储的模块'
- en: '| **Module name** | **Description** |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **模块名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| *mbr* | Original contents of the infected hard drive boot sector |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| *mbr* | 感染硬盘启动扇区的原始内容 |'
- en: '| *ldr16* | 16-bit real-mode loader code |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| *ldr16* | 16位实模式加载程序代码 |'
- en: '| *ldr32* | Fake *kdcom.dll* library for x86 systems |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| *ldr32* | 伪造的*x86系统上的kdcom.dll*库 |'
- en: '| *ldr64* | Fake *kdcom.dll* library for x64 systems |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| *ldr64* | 伪造的*x64系统上的kdcom.dll*库 |'
- en: '| *drv32* | The main bootkit driver for x86 systems |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| *drv32* | x86系统的主要引导程序驱动程序 |'
- en: '| *drv64* | The main bootkit driver for x64 systems |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| *drv64* | x64系统的主要引导程序驱动程序 |'
- en: '| *cmd.dll* | Payload to inject into 32-bit processes |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| *cmd.dll* | 注入到32位进程中的有效负载 |'
- en: '| *cmd64.dll* | Payload to inject into 64-bit processes |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| *cmd64.dll* | 注入到64位进程中的有效负载 |'
- en: '| *cfg.ini* | Configuration information |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| *cfg.ini* | 配置信息 |'
- en: '| *bckfg.tmp* | Encrypted list of command and control (C&C) URLs |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| *bckfg.tmp* | 加密的命令与控制（C&C）URL列表 |'
- en: TDL4 writes data onto the hard drive by sending I/O control code `IOCTL_SCSI_PASS_THROUGH_DIRECT`
    requests directly to the disk miniport driver—the lowest driver in the hard drive
    driver stack. This enables TDL4 to bypass the standard filter kernel drivers and
    any defensive measures they might include. TDL4 sends these control code requests
    using the `DeviceIoControl` API, passing as a first parameter the handle opened
    for the symbolic link *\??\PhysicalDriveXX*, where *XX* is the number of the hard
    drive being infected.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: TDL4通过直接向硬盘迷你端口驱动程序发送I/O控制代码`IOCTL_SCSI_PASS_THROUGH_DIRECT`请求来向硬盘写入数据，这个驱动程序是硬盘驱动堆栈中的最低层驱动程序。这使得TDL4能够绕过标准的过滤内核驱动程序及其可能包含的任何防御措施。TDL4使用`DeviceIoControl`
    API发送这些控制代码请求，传递第一个参数为打开的符号链接*\??\PhysicalDriveXX*的句柄，其中*XX*是正在感染的硬盘编号。
- en: Opening this handle with write access requires administrative privileges, so
    TDL4 exploits the MS10-092 vulnerability in the Windows Task Scheduler service
    (first seen in Stuxnet) to elevate its privileges. In a nutshell, this vulnerability
    allows an attacker to perform an unauthorized elevation of privileges for a particular
    task. To gain administrative privileges, then, TDL4 registers a task for Windows
    Task Scheduler to execute with its current privileges. The malware modifies the
    scheduled task XML file to run as Local System account, which includes administrative
    privileges and ensures that the checksum of the modified XML file is the same
    as before. As a result, this tricks the Task Scheduler into running the task as
    Local System instead of the normal user, allowing TDL4 to successfully infect
    the system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 打开此句柄并进行写访问需要管理员权限，因此TDL4利用Windows任务计划程序服务中的MS10-092漏洞（首次出现在Stuxnet中）来提升其权限。简而言之，此漏洞允许攻击者对特定任务进行未经授权的权限提升。为了获取管理员权限，TDL4注册一个任务，让Windows任务计划程序使用当前权限执行该任务。恶意软件修改了计划任务的XML文件，使其以本地系统帐户运行，该帐户包括管理员权限，并确保修改后的XML文件的校验和与之前相同。这样，任务计划程序会被欺骗，按照本地系统而不是正常用户的身份来运行任务，从而使TDL4成功感染系统。
- en: By writing data in this way, the malware is able to bypass defensive tools implemented
    at the filesystem level because the *I/O Request Packet (IRP)*, a data structure
    describing an I/O operation, goes directly to a disk-class driver handler.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式写入数据，恶意软件能够绕过在文件系统层面实现的防御工具，因为 *I/O 请求包（IRP）*，描述 I/O 操作的数据结构，直接传递到磁盘类驱动程序处理程序。
- en: Once all of its components are installed, TDL4 forces the system to reboot by
    executing the `NtRaiseHardError` native API (shown in [Listing 7-1](ch07.xhtml#ch07list01)).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有组件安装完成，TDL4 通过执行 `NtRaiseHardError` 本地 API（如 [列表 7-1](ch07.xhtml#ch07list01)
    中所示）强制系统重启。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 7-1: Prototype of the `NtRaiseHardError` routine*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 7-1：`NtRaiseHardError` 例程的原型*'
- en: The code passes `OptionShutdownSystem` ➊ as its fifth parameter, which puts
    the system into a *Blue Screen of Death (BSoD)*. The BSoD automatically reboots
    the system and ensures that the rootkit modules are loaded at the next boot without
    alerting the user to the infection (the system appears to have simply crashed).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将 `OptionShutdownSystem` ➊ 作为其第五个参数传递，这会将系统置于 *蓝屏死机（BSoD）* 状态。BSoD 会自动重启系统，并确保在下次启动时加载根工具包模块，而不会提醒用户感染（系统看起来像是简单崩溃了）。
- en: '**Bypassing Security in the Boot Process of a TDL4-Infected System**'
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**绕过 TDL4 感染系统启动过程中的安全性**'
- en: '[Figure 7-1](ch07.xhtml#ch07fig01) shows the boot process on a machine infected
    with TDL4\. This diagram represents a high-level view of the steps the malware
    takes to evade code integrity checks and load its components onto the system.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-1](ch07.xhtml#ch07fig01) 显示了感染了 TDL4 的机器的启动过程。该图表展示了恶意软件绕过代码完整性检查并将其组件加载到系统中的高层次步骤。'
- en: '![image](../images/07fig01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/07fig01.jpg)'
- en: '*Figure 7-1: TDL4 bootkit boot process workflow*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7-1：TDL4 启动工具包启动过程工作流*'
- en: After the BSoD and subsequent system restart, the BIOS reads the infected MBR
    into memory and executes it, loading the first part of the bootkit (➊ in [Figure
    7-1](ch07.xhtml#ch07fig01)). Next, the infected MBR locates the bootkit’s filesystem
    at the end of the bootable hard drive and loads and executes a module called *ldr16*.
    The *ldr16* module contains the code responsible for hooking the BIOS’s 13h interrupt
    handler (disk service), reloading the original MBR (➋ and ➌ in [Figure 7-1](ch07.xhtml#ch07fig01)),
    and passing execution to it. This way, booting can continue as normal, but now
    with the hooked 13h interrupt handler. The original MBR is stored in the *mbr*
    module in the hidden filesystem (see [Table 7-1](ch07.xhtml#ch07tab01)).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在蓝屏死机（BSoD）和随后的系统重启之后，BIOS 将感染的 MBR 读入内存并执行，加载启动工具包的第一部分（[图 7-1](ch07.xhtml#ch07fig01)中的➊）。接下来，感染的
    MBR 在可启动硬盘的末尾定位启动工具包的文件系统，并加载并执行一个名为 *ldr16* 的模块。*ldr16* 模块包含负责挂钩 BIOS 13h 中断处理程序（磁盘服务）、重新加载原始
    MBR（[图 7-1](ch07.xhtml#ch07fig01)中的➋和➌），并将执行权转交给它的代码。这样，启动过程可以继续正常进行，但现在带有挂钩的
    13h 中断处理程序。原始的 MBR 存储在隐藏文件系统中的 *mbr* 模块中（见 [表 7-1](ch07.xhtml#ch07tab01)）。
- en: The BIOS interrupt 13h service provides an interface for performing disk I/O
    operations in the preboot environment. This is crucial, because at the very beginning
    of the boot process the storage device drivers have not yet been loaded in the
    OS, and the standard boot components (namely, *bootmgr*, *winload.exe*, and *winresume.exe*)
    rely on the 13h service to read system components from the hard drive.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: BIOS 中断 13h 服务提供了在预启动环境中执行磁盘 I/O 操作的接口。这非常关键，因为在启动过程的最初阶段，操作系统中的存储设备驱动尚未加载，而标准的启动组件（即
    *bootmgr*、*winload.exe* 和 *winresume.exe*）依赖于 13h 服务从硬盘读取系统组件。
- en: Once control has been transferred to the original MBR, the boot process proceeds
    as usual, loading the VBR and *bootmgr* (➍ and ➎ in [Figure 7-1](ch07.xhtml#ch07fig01)),
    but the bootkit residing in memory now controls all I/O operations to and from
    the hard drive.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦控制权转交给原始的 MBR，启动过程照常进行，加载 VBR 和 *bootmgr*（[图 7-1](ch07.xhtml#ch07fig01)中的➍和➎），但现在驻留在内存中的启动工具包控制着所有从硬盘到系统的
    I/O 操作。
- en: The most interesting part of *ldr16* lies in the routine that implements the
    hook for the 13h disk services interrupt handler. The code that reads data from
    the hard drive during boot relies on the BIOS 13h interrupt handler, which is
    now being intercepted by the bootkit, meaning the bootkit can *counterfeit* any
    data read from the hard drive during the boot process. The bootkit takes advantage
    of this ability by replacing the *kdcom.dll* library with *ldr32* or *ldr64* ➑
    (depending on the operating system) drawn from the hidden filesystem, substituting
    its content in the memory buffer during the read operation. As we’ll see soon,
    replacing *kdcom.dll* with a malicious *dynamic-link library (DLL)* allows the
    bootkit to load its own driver and disable the kernel-mode debugging facilities
    at the same time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*ldr16*中最有趣的部分在于它实现了13h磁盘服务中断处理程序的钩子。启动过程中读取硬盘数据的代码依赖于BIOS的13h中断处理程序，而现在这一处理程序被bootkit所拦截，这意味着bootkit可以*伪造*从硬盘读取的任何数据。bootkit利用这一能力，通过用*ldr32*或*ldr64*
    ➑（取决于操作系统）替换*kdcom.dll*库，这些库来自隐藏的文件系统，在读取操作时将其内容替换到内存缓冲区中。正如我们很快会看到的，替换*kdcom.dll*为恶意的*动态链接库（DLL）*使得bootkit能够加载自己的驱动程序，同时禁用内核模式调试功能。'
- en: '**RACE TO THE BOTTOM**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**竞争底层**'
- en: In hijacking the BIOS’s disk interrupt handler, TDL4 mirrors the strategy of
    rootkits, which tend to migrate down the stack of service interfaces. As a general
    rule of thumb, the deeper infiltrator wins. For this reason, some defensive software
    occasionally ends up fighting other defensive software for control of the lower
    layers of the stack! This race to hook the lower layers of the Windows system,
    using techniques indistinguishable from rootkit techniques, has led to issues
    with system stability. A thorough analysis of these issues was published in two
    articles in *Uninformed*.^([1](ch07.xhtml#ch07sfn1))
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在劫持BIOS的磁盘中断处理程序时，TDL4采用了类似rootkit的策略，rootkit通常会沿着服务接口栈向下迁移。一般来说，越深层的入侵者越能成功。因此，一些防御软件有时会与其他防御软件争夺控制栈底层的权限！这种使用与rootkit技术难以区分的技术来挂钩Windows系统底层的竞争，导致了系统稳定性的问题。对此问题的详细分析已经在*Uninformed*期刊的两篇文章中发表。^([1](ch07.xhtml#ch07sfn1))
- en: '[1](ch07.xhtml#ch07sfn1a). skape, “What Were They Thinking? Annoyances Caused
    by Unsafe Assumptions,” *Uninformed* 1 (May 2005), *[http://www.uninformed.org/?v=1&a=5&t=pdf](http://www.uninformed.org/?v=1&a=5&t=pdf)*;
    Skywing, “What Were They Thinking? Anti-Virus Software Gone Wrong,” *Uninformed*
    4 (June 2006), *[http://www.uninformed.org/?v=4&a=4&t=pdf](http://www.uninformed.org/?v=4&a=4&t=pdf)*.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[1](ch07.xhtml#ch07sfn1a). skape, “他们在想什么？由不安全假设引起的烦恼，”*Uninformed* 1（2005年5月），*[http://www.uninformed.org/?v=1&a=5&t=pdf](http://www.uninformed.org/?v=1&a=5&t=pdf)*;
    Skywing, “他们在想什么？反病毒软件的失败，”*Uninformed* 4（2006年6月），*[http://www.uninformed.org/?v=4&a=4&t=pdf](http://www.uninformed.org/?v=4&a=4&t=pdf)*。'
- en: To conform to the requirements of the interface used to communicate between
    the Windows kernel and the serial debugger, the modules *ldr32* and *ldr64* (depending
    on the operating system) export the same symbols as the original *kdcom.dll* library
    (as shown in [Listing 7-2](ch07.xhtml#ch07list02)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了符合Windows内核与串行调试器之间通信所使用接口的要求，模块*ldr32*和*ldr64*（取决于操作系统）导出了与原始*kdcom.dll*库相同的符号（如[Listing
    7-2](ch07.xhtml#ch07list02)所示）。
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 7-2: Export address table of* ldr32/ldr64'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-2：ldr32/ldr64的导出地址表*'
- en: Most of the functions exported from the malicious version of *kdcom.dll* do
    nothing but return `0`, except for the `KdDebuggerInitialize1` function, which
    is called by the Windows kernel image during the kernel initialization (at ➒ in
    [Figure 7-1](ch07.xhtml#ch07fig01)). This function contains code that loads the
    bootkit’s driver on the system. It calls to `PsSetCreateThreadNotifyRoutine` to
    register a callback `CreateThreadNotifyRoutine` whenever a thread is created or
    destroyed; when the callback is triggered, it creates a malicious `DRIVER_OBJECT`
    to hook onto system events and waits until the driver stack for the hard disk
    device has been built up in the course of the boot process.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从恶意版本的*kdcom.dll*导出的多数功能除了返回`0`外什么都不做，只有`KdDebuggerInitialize1`函数在Windows内核映像的内核初始化过程中被调用（见[Figure
    7-1](ch07.xhtml#ch07fig01)中的➒）。这个函数包含加载bootkit驱动程序的代码。它调用`PsSetCreateThreadNotifyRoutine`来注册回调函数`CreateThreadNotifyRoutine`，每当创建或销毁一个线程时触发该回调；当回调被触发时，它会创建一个恶意的`DRIVER_OBJECT`来挂钩系统事件，并等待硬盘设备的驱动栈在启动过程中构建完成。
- en: Once the disk-class driver is loaded, the bootkit can access data stored on
    the hard drive, so it loads its kernel-mode driver from the *drv32* or *drv64*
    module it replaced the *kdcom.dll* library with, stored in the hidden filesystem,
    and calls the driver’s entry point.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦磁盘类驱动程序加载完成，bootkit就可以访问存储在硬盘上的数据，因此它会从隐藏的文件系统中加载它替换了*kdcom.dll*库的*drv32*或*drv64*模块中的内核模式驱动程序，并调用该驱动程序的入口点。
- en: '**Disabling the Code Integrity Checks**'
  id: totrans-53
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**禁用代码完整性检查**'
- en: In order to replace the original version of *kdcom.dll* with the malicious DLL
    on Windows Vista and later versions, the malware needs to disable the kernel-mode
    code integrity checks, as discussed previously (to avoid detection, it only temporarily
    disables the checks). If the checks are not disabled, *winload.exe* will report
    an error and refuse to continue the boot process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将Windows Vista及以后版本中*kdcom.dll*的原始版本替换为恶意DLL，恶意软件需要禁用内核模式代码完整性检查，如前所述（为了避免被检测，它只会暂时禁用检查）。如果检查没有被禁用，*winload.exe*将报告错误并拒绝继续启动过程。
- en: The bootkit turns off code integrity checks by telling *winload.exe* to load
    the kernel in preinstallation mode (see “[The Legacy Code Integrity Weakness](ch06.xhtml#ch06lev2sec5)”
    on [page 74](ch06.xhtml#page_74)), which doesn’t have the checks enabled. The
    *winload.exe* module does this by replacing the `BcdLibraryBoolean_EmsEnabled`
    element (encoded as `16000020` in the Boot Configuration Data, or BCD) with `BcdOSLoaderBoolean_WinPEMode`
    (encoded as `26000022` in BCD; see ➏ in [Figure 7-1](ch07.xhtml#ch07fig01)) when
    *bootmgr* reads the BCD from the hard drive, using the same methods TDL4 used
    to spoof *kdcom.dll*. (`BcdLibraryBoolean_EmsEnabled` is an inheritable object
    that indicates whether global emergency management services redirection should
    be enabled and is set to `TRUE` by default.) [Listing 7-3](ch07.xhtml#ch07list03)
    shows the assembly code implemented in *ldr16* that spoofs the `BcdLibraryBoolean_EmsEnabled`
    option ➊ ➋ ➌.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: bootkit通过告诉*winload.exe*以预安装模式加载内核（参见[《遗留代码完整性弱点》](ch06.xhtml#ch06lev2sec5)在[第74页](ch06.xhtml#page_74)），来关闭代码完整性检查，该模式下没有启用检查。*winload.exe*模块通过将`BcdLibraryBoolean_EmsEnabled`元素（在启动配置数据（BCD）中编码为`16000020`）替换为`BcdOSLoaderBoolean_WinPEMode`（在BCD中编码为`26000022`；见[图7-1](ch07.xhtml#ch07fig01)中的➏）来完成此操作，当*bootmgr*从硬盘读取BCD时，使用与TDL4伪造*kdcom.dll*相同的方法。(`BcdLibraryBoolean_EmsEnabled`是一个可继承对象，指示是否应启用全局紧急管理服务重定向，默认设置为`TRUE`。)[列表
    7-3](ch07.xhtml#ch07list03)展示了*ldr16*中实现的伪造`BcdLibraryBoolean_EmsEnabled`选项的汇编代码➊
    ➋ ➌。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 7-3: Part of the* ldr16 *code responsible for spoofing the `BcdLibraryBoolean_EmsEnabled`
    and `/MININT` options*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 7-3：* ldr16 *代码的一部分，负责伪造`BcdLibraryBoolean_EmsEnabled`和`/MININT`选项*'
- en: Next, the bootkit turns on preinstallation mode long enough to load the malicious
    version of *kdcom.dll*. Once it is loaded, the malware disables preinstallation
    mode as if were never enabled in order to remove any traces from the system. Note
    that attackers can disable preinstallation mode only while it is on—by corrupting
    the `/MININT` string option in the *winload.exe* image while reading the image
    from the hard drive ➍ (see ➐ in [Figure 7-1](ch07.xhtml#ch07fig01)). During initialization,
    the kernel receives a list of parameters from *winload.exe* to enable specific
    options and specify characteristics of the boot environment, such as the number
    of processors in the system, whether to boot in preinstallation mode, and whether
    to display a progress indicator at boot time. Parameters described by string literals
    are stored in *winload.exe*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，bootkit会开启预安装模式，足够长的时间来加载恶意版本的*kdcom.dll*。一旦加载完成，恶意软件会禁用预安装模式，就像从未启用过一样，以便清除系统中的任何痕迹。请注意，攻击者只能在预安装模式开启时禁用它——通过在从硬盘读取*winload.exe*映像时破坏`/MININT`字符串选项
    ➍（参见[图7-1](ch07.xhtml#ch07fig01)中的➐）。在初始化过程中，内核会从*winload.exe*接收一组参数，以启用特定选项并指定启动环境的特性，例如系统中的处理器数量、是否以预安装模式启动以及是否在启动时显示进度指示器。由字符串字面值描述的参数存储在*winload.exe*中。
- en: The *winload.exe* image uses the `/MININT` option to notify the kernel that
    preinstallation mode is enabled, and as a result of the malware’s manipulations,
    the kernel receives an invalid `/MININT` option and continues initialization as
    if preinstallation mode weren’t enabled. This is the final step in the bootkit-infected
    boot process (see ➓ in [Figure 7-1](ch07.xhtml#ch07fig01)). A malicious kernel-mode
    driver is successfully loaded into the operating system, bypassing code integrity
    checks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*winload.exe*映像使用`/MININT`选项通知内核预安装模式已启用，然而，由于恶意软件的操控，内核接收到一个无效的`/MININT`选项，并继续初始化，就好像预安装模式没有启用一样。这是引导工具感染过程中的最后一步（见[图7-1](ch07.xhtml#ch07fig01)中的➓）。恶意的内核模式驱动程序成功加载到操作系统中，绕过了代码完整性检查。'
- en: '**Encrypting the Malicious MBR Code**'
  id: totrans-60
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**加密恶意MBR代码**'
- en: '[Listing 7-4](ch07.xhtml#ch07list04) shows a part of the malicious MBR code
    in the TDL4 bootkit. Notice that the malicious code is encrypted (beginning at
    ➌) in order to avoid detection by static analysis, which uses static signatures.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单7-4](ch07.xhtml#ch07list04)展示了TDL4引导工具中恶意MBR代码的一部分。注意，恶意代码从➌开始被加密，以避免通过静态分析检测，静态分析依赖静态签名。'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 7-4: TDL4 code for decrypting malicious MBR*'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单7-4：TDL4解密恶意MBR的代码*'
- en: The registers `cx` and `bp` ➊ are initialized with the size and offset of the
    encrypted code, respectively. The value of the `cx` register is used as a counter
    in the loop ➋ that runs the bitwise logical operation `ror` (rotate-right instruction)
    to decrypt the code (marked by ➌ and pointed by the `bp` register). Once decrypted,
    the code will hook the INT 13h handler to patch other OS modules in order to disable
    OS code integrity verification and load malicious drivers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 寄存器`cx`和`bp` ➊分别初始化为加密代码的大小和偏移量。`cx`寄存器的值作为循环中的计数器 ➋，执行按位逻辑操作`ror`（右旋指令）以解密代码（由➌标记并由`bp`寄存器指向）。一旦解密，代码将挂钩INT
    13h处理程序，修补其他操作系统模块，以禁用操作系统的代码完整性验证并加载恶意驱动程序。
- en: '***MBR Partition Table Modification***'
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***MBR分区表修改***'
- en: 'One variant of TDL4, known as Olmasco, demonstrates another approach to MBR
    infection: modifying the partition table rather than the MBR code. Olmasco first
    creates an unallocated partition at the end of the bootable hard drive, then creates
    a hidden partition in the same place by modifying a free partition table entry,
    #2, in the MBR partition table (see [Figure 7-2](ch07.xhtml#ch07fig02)).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: TDL4的一个变种，称为Olmasco，展示了另一种MBR感染方式：修改分区表，而不是MBR代码。Olmasco首先在可引导硬盘的末尾创建一个未分配的分区，然后通过修改MBR分区表中的空闲分区表条目#2，在同一位置创建一个隐藏分区（见[图7-2](ch07.xhtml#ch07fig02)）。
- en: This route of infection is possible because the MBR contains a partition table
    with entries beginning at offset 0x1BE consisting of four 16-byte entries, each
    describing a corresponding partition (the array of `MBR_PARTITION_TABLE_ENTRY`
    is shown back in [Listing 5-2](ch05.xhtml#ch05list02)) on the hard drive. Thus,
    the hard drive can have no more than four primary partitions, with only one marked
    as active. The operating system boots from the active partition. Olmasco overwrites
    an empty entry in the partition table with the parameters for its own malicious
    partition, marks the partition active, and initializes the VBR of the newly created
    partition. ([Chapter 10](ch10.xhtml#ch10) provides more detail on Olmasco’s mechanism
    of infection.)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这种感染方式之所以可能，是因为MBR包含一个分区表，其中的条目从偏移0x1BE开始，包含四个16字节的条目，每个条目描述硬盘上的一个分区（`MBR_PARTITION_TABLE_ENTRY`数组在[清单5-2](ch05.xhtml#ch05list02)中有展示）。因此，硬盘最多可以有四个主分区，并且只有一个被标记为活动分区。操作系统从活动分区启动。Olmasco会用其恶意分区的参数覆盖分区表中的一个空条目，标记该分区为活动分区，并初始化新创建分区的VBR。（[第10章](ch10.xhtml#ch10)提供了更多关于Olmasco感染机制的细节。）
- en: '![image](../images/07fig02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/07fig02.jpg)'
- en: '*Figure 7-2: MBR partition table modification by Olmasco*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-2：Olmasco的MBR分区表修改*'
- en: '**VBR/IPL Infection Techniques**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**VBR/IPL感染技术**'
- en: Sometimes security software checks only for unauthorized modifications on the
    MBR, leaving the VBR and IPL uninspected. VBR/IPL infectors, like the first VBR
    bootkits, take advantage of this to improve their chances of remaining undetected.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有时安全软件只检查MBR上的未经授权的修改，而忽略了VBR和IPL的检查。VBR/IPL感染者，如最初的VBR引导工具，利用这一点来提高保持未被检测到的机会。
- en: 'All known VBR infection techniques fall into one of two groups: IPL modifications
    (like the Rovnix bootkit) and BIOS parameter block (BPB) modifications (like the
    Gapz bootkit).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有已知的VBR感染技术可分为两类：IPL修改（如Rovnix bootkit）和BIOS参数块（BPB）修改（如Gapz bootkit）。
- en: '***IPL Modifications: Rovnix***'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***IPL修改：Rovnix***'
- en: Consider the IPL modification infection technique of the Rovnix bootkit. Instead
    of overwriting the MBR sector, Rovnix modifies the IPL on the bootable hard drive’s
    active partition and the NTFS bootstrap code. As shown in [Figure 7-3](ch07.xhtml#ch07fig03),
    Rovnix reads the 15 sectors following the VBR (which contain the IPL), compresses
    them, prepends the malicious bootstrap code, and writes the modified code back
    to those 15 sectors. Thus, on the next system startup, the malicious bootstrap
    code receives control.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下Rovnix bootkit的IPL修改感染技术。Rovnix并不覆盖MBR扇区，而是修改可启动硬盘的活动分区上的IPL和NTFS引导代码。如[图7-3](ch07.xhtml#ch07fig03)所示，Rovnix读取紧随VBR之后的15个扇区（其中包含IPL），对其进行压缩，在前面插入恶意引导代码，然后将修改后的代码写回这15个扇区。因此，在下次系统启动时，恶意引导代码获得控制权。
- en: When the malicious bootstrap code is executed, it hooks the INT 13h handler
    in order to patch *bootmgr*, *winload.exe*, and the kernel so that it can gain
    control once the bootloader components are loaded. Finally, Rovnix decompresses
    the original IPL code and returns control to it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当恶意引导代码被执行时，它会挂钩INT 13h处理程序，以便修补*bootmgr*、*winload.exe*和内核，从而一旦引导加载程序组件加载，它就能获得控制权。最后，Rovnix解压缩原始IPL代码并将控制权交还给它。
- en: The Rovnix bootkit follows the operating system’s execution flow from boot through
    processor execution mode switching until the kernel is loaded. Further, by using
    the debugging registers `DR0` through `DR7` (an essential part of the x86 and
    x64 architectures), Rovnix retains control during kernel initialization and loads
    its own malicious driver, bypassing the kernel-mode code integrity check. These
    debugging registers allow the malware to set hooks on the system code without
    actually patching it, thus maintaining the integrity of the code being hooked.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Rovnix bootkit遵循操作系统的执行流程，从启动到处理器执行模式切换，直到加载内核。此外，Rovnix通过使用调试寄存器`DR0`至`DR7`（这是x86和x64架构的关键部分），在内核初始化期间保持控制，并加载其自身的恶意驱动程序，从而绕过内核模式代码完整性检查。这些调试寄存器允许恶意软件在不实际修补系统代码的情况下设置钩子，从而保持被钩住的代码的完整性。
- en: '![image](../images/07fig03.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/07fig03.jpg)'
- en: '*Figure 7-3: IPL modifications by Rovnix*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-3：Rovnix的IPL修改*'
- en: The Rovnix boot code works closely with the operating system’s boot loader components
    and relies heavily on their platform-debugging facilities and binary representation.
    (We’ll discuss Rovnix in more detail in [Chapter 11](ch11.xhtml#ch11).)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Rovnix引导代码与操作系统的引导加载程序组件紧密协作，并且在很大程度上依赖于它们的平台调试设施和二进制表示形式。（我们将在[第11章](ch11.xhtml#ch11)中更详细地讨论Rovnix。）
- en: '***VBR Infection: Gapz***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***VBR感染：Gapz***'
- en: The Gapz bootkit infects the VBR of the active partition rather than the IPL.
    Gapz is a remarkably stealthy bootkit because it infects only a few bytes of the
    original VBR, modifying the `HiddenSectors` field (see [Listing 5-3](ch05.xhtml#ch05list03)
    on [page 63](ch05.xhtml#page_63)) and leaving all other data and code in the VBR
    and IPL untouched.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Gapz bootkit感染的是活动分区的VBR，而不是IPL。Gapz是一个非常隐蔽的bootkit，因为它只感染了原始VBR的几个字节，修改了`HiddenSectors`字段（见[清单5-3](ch05.xhtml#ch05list03)在[第63页](ch05.xhtml#page_63)），并且保持VBR和IPL中的所有其他数据和代码不变。
- en: In the case of Gapz, the most interesting block for analysis is the BPB (`BIOS_PARAMETER_BLOCK`),
    particularly its `HiddenSectors` field. The value in this field specifies the
    number of sectors stored on the NTFS volume that precedes the IPL, as shown in
    [Figure 7-4](ch07.xhtml#ch07fig04).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在Gapz的案例中，最有趣的分析模块是BPB（`BIOS_PARAMETER_BLOCK`），特别是它的`HiddenSectors`字段。该字段中的值指定了在IPL之前存储在NTFS卷上的扇区数量，如[图7-4](ch07.xhtml#ch07fig04)所示。
- en: '![image](../images/07fig04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/07fig04.jpg)'
- en: '*Figure 7-4: The location of IPL*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-4：IPL的位置*'
- en: Gapz overwrites the `HiddenSectors` field with the value for the offset in sectors
    of the malicious bootkit code stored on the hard drive, as shown in [Figure 7-5](ch07.xhtml#ch07fig05).
    When the VBR code runs again, it loads and executes the bootkit code instead of
    the legitimate IPL. The Gapz bootkit image is written either before the first
    partition or after the last one on the hard drive. (We’ll discuss Gapz in more
    detail in [Chapter 12](ch12.xhtml#ch12).)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Gapz通过覆盖`HiddenSectors`字段，将硬盘上存储的恶意启动引导程序代码的扇区偏移量值写入其中，如[图7-5](ch07.xhtml#ch07fig05)所示。当VBR代码再次运行时，它会加载并执行启动引导程序代码，而不是合法的IPL。Gapz启动引导程序镜像被写入硬盘的第一个分区之前或最后一个分区之后。（我们将在[第12章](ch12.xhtml#ch12)中更详细地讨论Gapz。）
- en: '![image](../images/07fig05.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/07fig05.jpg)'
- en: '*Figure 7-5: The Gapz VBR infection*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-5：Gapz VBR感染*'
- en: '**Conclusion**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: In this chapter, you learned about the MBR and VBR bootkit infection techniques.
    We followed the evolution of the advanced TDL3 rootkit into the modern TDL4 bootkit,
    and you saw how TDL4 takes control of the system boot, infecting the MBR by replacing
    it with malicious code. As you’ve seen, the integrity protections in Microsoft
    64-bit operating systems (in particular, the Kernel-Mode Code Signing Policy)
    initiated a new race in bootkit development to target x64 platforms. TDL4 was
    the first example of a bootkit in the wild to successfully overcome this obstacle,
    using certain design features that have since been adopted by other bootkits.
    We also looked at VBR infection techniques, illustrated by the Rovnix and Gapz
    bootkits, which are the respective subjects of [Chapters 11](ch11.xhtml#ch11)
    and [12](ch12.xhtml#ch12).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了MBR和VBR启动引导程序的感染技术。我们跟踪了高级TDL3根套件的演变，直到现代的TDL4启动引导程序，你看到TDL4如何控制系统启动，通过用恶意代码替换MBR来感染它。正如你所看到的，微软64位操作系统中的完整性保护（特别是内核模式代码签名策略）启动了一场新的启动引导程序开发竞赛，目标是x64平台。TDL4是第一个在野外成功克服这一障碍的启动引导程序，它采用了一些设计特点，这些特点后来被其他启动引导程序采纳。我们还看了VBR感染技术，具体由Rovnix和Gapz启动引导程序展示，这两个启动引导程序分别是[第11章](ch11.xhtml#ch11)和[第12章](ch12.xhtml#ch12)的主题。
