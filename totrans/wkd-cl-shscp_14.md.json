["```\n   #!/bin/bash\n   # startdropbox--Makes sure Dropbox is running on OS X\n\n   app=\"Dropbox.app\"\n   verbose=1\n\n   running=\"$(➊ps aux | grep -i $app | grep -v grep)\"\n\n   if [ \"$1\" = \"-s\" ] ; then         # -s is for silent mode.\n     verbose=0\n   fi\n\n   if [ ! -z \"$running\" ] ; then\n     if [ $verbose -eq 1 ] ; then\n       echo \"$app is running with PID $(echo $running | cut -d\\  -f2)\"\n     fi\n   else\n     if [ $verbose -eq 1 ] ; then\n       echo \"Launching $app\"\n     fi\n➋   open -a $app\n   fi\n\n   exit 0\n```", "```\n$ startdropbox\nLaunching Dropbox.app\n$ startdropbox\nDropbox.app is running with PID 22270\n```", "```\n   #!/bin/bash\n   # syncdropbox--Synchronize a set of files or a specified folder with Dropbox.\n   #   This is accomplished by copying the folder into ~/Dropbox or the set of\n   #   files into the sync folder in Dropbox and then launching Dropbox.app\n   #   as needed.\n\n name=\"syncdropbox\"\n   dropbox=\"$HOME/Dropbox\"\n   sourcedir=\"\"\n   targetdir=\"sync\"    # Target folder on Dropbox for individual files\n\n   # Check starting arguments.\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $0 [-d source-folder] {file, file, file}\" >&2\n     exit 1\n   fi\n\n   if [ \"$1\" = \"-d\" ] ; then\n     sourcedir=\"$2\"\n     shift; shift\n   fi\n\n   # Validity checks\n\n   if [ ! -z \"$sourcedir\" -a $# -ne 0 ] ; then\n     echo \"$name: You can't specify both a directory and specific files.\" >&2\n     exit 1\n   fi\n\n   if [ ! -z \"$sourcedir\" ] ; then\n     if [ ! -d \"$sourcedir\" ] ; then\n       echo \"$name: Please specify a source directory with -d.\" >&2\n       exit 1\n     fi\n   fi\n\n   #######################\n   #### MAIN BLOCK\n   #######################\n\n   if [ ! -z \"$sourcedir\" ] ; then\n➊   if [ -f \"$dropbox/$sourcedir\" -o -d \"$dropbox/$sourcedir\" ] ; then\n       echo \"$name: Specified source directory $sourcedir already exists.\" >&2\n       exit 1\n     fi\n\n     echo \"Copying contents of $sourcedir to $dropbox...\"\n     # -a does a recursive copy, preserving owner info, etc.\n     cp -a \"$sourcedir\" $dropbox\n   else\n     # No source directory, so we've been given individual files.\n     if [ ! -d \"$dropbox/$targetdir\" ] ; then\n       mkdir \"$dropbox/$targetdir\"\n       if [ $? -ne 0 ] ; then\n         echo \"$name: Error encountered during mkdir $dropbox/$targetdir.\" >&2\n         exit 1\n       fi\n     fi\n     # Ready! Let's copy the specified files.\n\n➋ cp -p -v \"$@\" \"$dropbox/$targetdir\"\n   fi\n\n   # Now let's launch the Dropbox app to let it do the actual sync, if needed.\n   exec startdropbox -s\n```", "```\n$ syncdropbox\nUsage: syncdropbox [-d source-folder] {file, file, file}\n```", "```\n$ syncdropbox test.html\ntest.html -> /Users/taylor/Dropbox/sync/test.html\n$\n```", "```\n$ brew install imagemagick --with-x11\n```", "```\n   #!/bin/bash\n   # slideshow--Displays a slide show of photos from the specified directory.\n   #   Uses ImageMagick's \"display\" utility.\n\n   delay=2              # Default delay in seconds\n➊ psize=\"1200x900>\"    # Preferred image size for display\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $(basename $0) watch-directory\" >&2\n     exit 1\n   fi\n\n   watch=\"$1\"\n\n   if [ ! -d \"$watch\" ] ; then\n     echo \"$(basename $0): Specified directory $watch isn't a directory.\" >&2\n     exit 1\n   fi\n\n   cd \"$watch\"\n\n   if [ $? -ne 0 ] ; then\n     echo \"$(basename $0): Failed trying to cd into $watch\" >&2\n     exit 1\n   fi\n\n   suffixes=\"$(➋file * | grep image | cut -d: -f1 | rev | cut -d. -f1 | \\\n      rev | sort | uniq | sed 's/^/\\*./')\"\n\n   if [ -z \"$suffixes\" ] ; then\n     echo \"$(basename $0): No images to display in folder $watch\" >&2\n     exit 1\n   fi\n\n   /bin/echo -n \"Displaying $(ls $suffixes | wc -l) images from $watch \"\n➌ set -f ; echo \"with suffixes $suffixes\" ; set +f\n\n   display -loop 0 -delay $delay -resize $psize -backdrop $suffixes\n\n   exit 0\n```", "```\n$ slideshow ~/SkyDrive/Pictures/\nDisplaying 2252 images from ~/Skydrive/Pictures/ with suffixes *.gif *.jpg *.png\n```", "```\n$ cat M3\\ Speaker\\ Proposals\\ \\(voting\\).gsheet\n{\"url\": \"https://docs.google.com/spreadsheet/ccc?key=0Atax7Q4SMjEzdGdxYVVzdXRQ\nWVpBUFh1dFpiYlpZS3c&usp=docslist_api\", \"resource_id\": \"spreadsheet:0Atax7Q4SMj\nEzdGdxYVVzdXRQWVpBUFh1dFpiYlpZS3c\"}\n```", "```\n   #!/bin/bash\n   # syncgdrive--Lets you specify one or more files to automatically copy\n   #   to your Google Drive folder, which syncs with your cloud account\n\n   gdrive=\"$HOME/Google Drive\"\n   gsync=\"$gdrive/gsync\"\n   gapp=\"Google Drive.app\"\n\n   if [ $# -eq 0 ] ; then\n     echo \"Usage: $(basename $0) [file or files to sync]\" >&2\n     exit 1\n   fi\n\n   # First, is Google Drive running? If not, launch it.\n➊ if [ -z \"$(ps -ef | grep \"$gapp\" | grep -v grep)\" ] ; then\n     echo \"Starting up Google Drive daemon...\"\n     open -a \"$gapp\"\n   fi\n\n   # Now, does the /gsync folder exist?\n   if [ ! -d \"$gsync\" ] ; then\n     mkdir \"$gsync\"\n     if [ $? -ne 0 ] ; then\n       echo \"$(basename $0): Failed trying to mkdir $gsync\" >&2\n       exit 1\n     fi\n   fi\n\n   for name  # Loop over the arguments passed to the script.\n   do\n     echo \"Copying file $name to your Google Drive\"\n     cp -a \"$name\" \"$gdrive/gsync/\"\n   done\n\n   exit 0\n```", "```\n$ syncgdrive sample.crontab\nStarting up Google Drive daemon...\nCopying file sample.crontab to your Google Drive\n$ syncgdrive ~/Documents/what-to-expect-op-ed.doc\nCopying file /Users/taylor/Documents/what-to-expect-op-ed.doc to your Google\nDrive\n```", "```\n$ say \"You never knew I could talk to you, did you?\"\n```", "```\n   #!/bin/bash\n   # sayit--Uses the \"say\" command to read whatever's specified (OS X only)\n\n   dosay=\"$(which say) --quality=127\"\n   format=\"$(which fmt) -w 70\"\n\n   voice=\"\"                # Default system voice\n   rate=\"\"                 # Default to the standard speaking rate\n\n   demovoices()\n   {\n     # Offer up a sample of each available voice.\n\n➊   voicelist=$( say -v \\? | grep \"en_\" | cut -c1-12 \\\n       | sed 's/ /_/;s/ //g;s/_$//')\n\n     if [ \"$1\" = \"list\" ] ; then\n       echo \"Available voices: $(echo $voicelist | sed 's/ /, /g;s/_/ /g') \\\n         | $format\"\n       echo \"HANDY TIP: use \\\"$(basename $0) demo\\\" to hear all the voices\"\n       exit 0\n     fi\n\n➋   for name in $voicelist ; do\n       myname=$(echo $name | sed 's/_/ /')\n       echo \"Voice: $myname\"\n       $dosay -v \"$myname\" \"Hello! I'm $myname. This is what I sound like.\"\n     done\n\n     exit 0\n   }\n\n   usage()\n   {\n     echo \"Usage: sayit [-v voice] [-r rate] [-f file] phrase\"\n     echo \"   or: sayit demo\"\n     exit 0\n   }\n\n   while getopts \"df:r:v:\" opt; do\n     case $opt in\n       d ) demovoices list    ;;\n       f ) input=\"$OPTARG\"    ;;\n       r ) rate=\"-r $OPTARG\"  ;;\n       v ) voice=\"$OPTARG\"    ;;\n     esac\n   done\n\n   shift $(($OPTIND - 1))\n\n   if [ $# -eq 0 -a -z \"$input\" ] ; then\n     $dosay \"Hey! You haven't given me any parameters to work with.\"\n     echo \"Error: no parameters specified. Specify a file or phrase.\"\n     exit 0\n   fi\n\n   if [ \"$1\" = \"demo\" ] ; then\n     demovoices\n   fi\n\n   if [ ! -z \"$input\" ] ; then\n     $dosay $rate -v \"$voice\" -f $input\n   else\n     $dosay $rate -v \"$voice\" \"$*\"\n   fi\n   exit 0\n```", "```\n$ say -v \\?\nAgnes       en_US   # Isn't it nice to have a computer that will talk to you?\nAlbert      en_US   # I have a frog in my throat. No, I mean a real frog!\nAlex        en_US   # Most people recognize me by my voice.\nAlice       it_IT   # Salve, mi chiamo Alice e sono una voce italiana.\n--snip--\nZarvox      en_US   # That looks like a peaceful planet.\nZuzana      cs_CZ   # Dobrý den, jmenuji se Zuzana. Jsem český hlas.\n$\n```", "```\n$ sayit -d\nAvailable voices: Agnes, Albert, Alex, Bad News, Bahh, Bells, Boing,\nBruce, Bubbles, Cellos, Daniel, Deranged, Fred, Good News, Hysterical,\nJunior, Karen, Kathy, Moira, Pipe Organ, Princess, Ralph, Samantha,\nTessa, Trinoids, Veena, Vicki, Victoria, Whisper, Zarvox\nHANDY TIP: use \"sayit.sh demo\" to hear all the different voices\n$ sayit \"Yo, yo, dog! Whassup?\"\n$ sayit -v \"Pipe Organ\" -r 60 \"Yo, yo, dog! Whassup?\"\n$ sayit -v \"Ralph\" -r 80 -f alice.txt\n```"]