- en: Chapter 3. Integrating Charts on a Page
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第三章：在页面上整合图表
- en: You might expect a data visualization for the Web to be featured very prominently
    on the page, or even make up the entire web page. That’s not always the right
    approach, though. The best visualizations are effective because they help the
    user understand the data, not because they “look pretty” on the page.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会期望网页上的数据可视化占据非常显著的位置，甚至可能占据整个网页。但这种方法并不总是合适的。最好的可视化之所以有效，是因为它们帮助用户理解数据，而不是因为它们在页面上“看起来漂亮”。
- en: Some data may be straightforward enough to present without context, but meaningful
    data probably isn’t. And if our presentation requires context, its visualizations
    are likely sharing the page with other content. When we design web pages, we should
    take care to balance any individual component with the page as a whole. If a single
    visualization is not the entire story, it shouldn’t take up all (or even most)
    of the space on the page. It can be challenging, however, to minimize the space
    a traditional chart requires. There are, after all, axes, labels, titles, legends,
    and more to place.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有些数据可能足够直观，可以不加背景直接呈现，但有意义的数据通常不会如此简单。如果我们的展示需要上下文，那么它的可视化很可能会与其他内容一起出现在页面上。在设计网页时，我们应该注意平衡任何单一组件与整个页面的关系。如果一个可视化并不能讲述全部故事，那么它就不应该占据页面上所有（甚至大部分）的空间。然而，减少传统图表所需空间可能是一个挑战，毕竟，图表中有坐标轴、标签、标题、图例等要素需要放置。
- en: Edward Tufte considered this problem in his groundbreaking work *The Visual
    Display of Quantitative Information* (Graphics Press, 1983), and he proposed a
    novel solution he called sparklines. *Sparklines* are charts stripped to their
    bare essentials, presented without the aforementioned elements we often see in
    a chart. Sparklines can present a lot of information in very little space, even
    to the point where it is possible to include a chart right in the middle of a
    sentence. There is no need for “See figure below” or “Click for larger view.”
    One of Tufte’s earliest examples presents the glucose level of a medical patient;
    [Figure 3-1](ch03.html#tufteapostrophes_classic_sparkline_examp "Figure 3-1. Tufte’s
    classic sparkline example shows a lot of information in a small space.") shows
    a reproduction.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 爱德华·塔夫特在他开创性的著作*《定量信息的视觉展示》*（Graphics Press，1983年）中讨论了这个问题，并提出了一个他称之为sparklines（火花图）的新颖解决方案。*火花图*是被简化到最基本要素的图表，展示时没有我们通常在图表中看到的那些附加元素。火花图能够在极小的空间内展示大量信息，甚至可以在句子中间插入一个图表。无需“见下图”或“点击查看更大视图”。塔夫特早期的一个例子展示了一个医疗病人的血糖水平；[图3-1](ch03.html#tufteapostrophes_classic_sparkline_examp
    "图3-1. 塔夫特的经典火花图例展示了一个小空间内的丰富信息")展示了这一示例的复原图。
- en: '![Tufte’s classic sparkline example shows a lot of information in a small space.](figs/web/03fig01.png.jpg)Figure 3-1. Tufte’s
    classic sparkline example shows a lot of information in a small space.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '![塔夫特的经典火花图例展示了一个小空间内的丰富信息。](figs/web/03fig01.png.jpg)图3-1. 塔夫特的经典火花图例展示了一个小空间内的丰富信息。'
- en: 'In a mere 154×20 pixels, we’ve shown the patient’s current glucose level, its
    trend for more than two months, high and low values, and the range of normal values.
    This high information density makes sparklines effective anytime space is a premium—inline
    in textual paragraphs, as cells in tables, or as part of information dashboards.
    Sparklines do have disadvantages, of course. They cannot provide as much fine-grained
    detail as a full-size chart with axes and labels. They also cannot support significant
    interactivity, so we can’t give users a lot of flexibility in selecting data or
    zooming in for detail. But for many visualizations, these aren’t major concerns.
    Plus, as we’ll see in this chapter’s examples, the Web gives us the chance to
    augment sparklines in ways that aren’t possible in print. There are a few JavaScript
    libraries and toolkits for creating sparklines, but we’ll focus on the most popular
    of them: jQuery sparklines (*[http://omnipotent.net/jquery.sparkline/](http://omnipotent.net/jquery.sparkline/)*).
    As the name implies, this open source library is an extension to jQuery. The examples
    in this chapter look closely at how to use these tools to incorporate dense visualizations
    into your web page. Here’s what you’ll learn:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在仅 154×20 像素的空间中，我们展示了患者当前的血糖水平、超过两个月的趋势、高低值以及正常值范围。这种高信息密度使得火花图在空间有限的情况下尤为有效——可以嵌入文本段落中、作为表格单元格或信息仪表板的一部分。当然，火花图也有一些缺点。它们无法提供像带有坐标轴和标签的完整图表那样的细节。它们也不支持显著的交互性，因此无法为用户提供选择数据或缩放查看细节的灵活性。但对于许多可视化来说，这些并不是主要问题。此外，正如我们在本章示例中所看到的，Web
    让我们有机会以打印中无法实现的方式增强火花图。虽然有一些 JavaScript 库和工具包可以用来创建火花图，但我们将重点介绍其中最流行的一个：jQuery
    sparklines (*[http://omnipotent.net/jquery.sparkline/](http://omnipotent.net/jquery.sparkline/)*)。顾名思义，这个开源库是
    jQuery 的扩展。本章的示例将深入探讨如何使用这些工具将密集型可视化集成到你的网页中。以下是你将学到的内容：
- en: How to create a classic sparkline for integration directly into text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为直接嵌入文本的火花图创建经典火花图
- en: How to combine multiple sparklines to show comparisons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何结合多个火花图展示比较
- en: How to annotate sparklines with additional details
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为火花图添加附加细节
- en: How to create composite charts
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建复合图表
- en: How to respond to click events on the page
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何响应页面上的点击事件
- en: How to update charts in real time
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实时更新图表
- en: Creating a Classic Sparkline
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建经典火花图
- en: As later examples will demonstrate, the sparklines library is both flexible
    and powerful, and we can use it in many different contexts. As a start, though,
    we’ll use the library to create a sparkline exactly as Edward Tufte first defined
    it. The process is quite straightforward and takes only four simple steps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如后面的示例将展示的那样，sparklines 库既灵活又强大，我们可以在许多不同的上下文中使用它。作为开始，我们将使用该库来创建一个与 Edward
    Tufte 最早定义的火花图完全相同的图表。这个过程非常简单，只需四个步骤。
- en: 'Step 1: Include the Required JavaScript Libraries'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：包含所需的 JavaScript 库
- en: 'Since we’re using the jQuery sparklines library to create the chart, we need
    to include that library in our web pages, along with jQuery. Both jQuery and sparklines
    are available on public CDNs. For this example (and the others in this chapter),
    we’ll use the CloudFlare CDN. For some notes on the advantages and disadvantages
    of using CDNs, see [Step 1: Include the Required JavaScript Libraries](ch02.html#step_1_include_the_required_javascript_l
    "Step 1: Include the Required JavaScript Libraries").'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '由于我们使用 jQuery sparklines 库来创建图表，我们需要在网页中引入该库以及 jQuery。jQuery 和 sparklines 都可以通过公共
    CDN 获取。在本示例（以及本章中的其他示例）中，我们将使用 CloudFlare CDN。关于使用 CDN 的优缺点，请参见 [步骤 1：包含所需的 JavaScript
    库](ch02.html#step_1_include_the_required_javascript_l "Step 1: Include the Required
    JavaScript Libraries")。'
- en: 'Here’s the skeleton with which we start:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们开始时的骨架：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we’re including the JavaScript libraries at the end of the document.
    This approach lets the browser load all of the document’s HTML markup and begin
    laying out the page while waiting for the server to provide the JavaScript libraries.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将 JavaScript 库包含在文档的最后。这种方法允许浏览器在等待服务器提供 JavaScript 库的同时，加载文档的所有 HTML
    标记并开始布局页面。
- en: In addition to the jQuery library, sparklines rely on the HTML *canvas* feature.
    Since Internet Explorer didn’t support canvas until version 9, we use some special
    markup at ➊ to ensure that IE 8 and earlier will load an additional library (excanvas
    .min.js), just like we did in [Chapter 2](ch02.html "Chapter 2. Making Charts
    Interactive").
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 jQuery 库外，sparklines 还依赖于 HTML 的 *canvas* 特性。由于 Internet Explorer 在版本 9 之前不支持
    canvas，因此我们在 ➊ 处使用了一些特殊的标记，以确保 IE 8 及以下版本能加载额外的库（excanvas.min.js），就像我们在[第 2 章](ch02.html
    "第 2 章：制作互动图表")中所做的那样。
- en: 'Step 2: Create the HTML Markup for the Sparkline'
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：为 Sparkline 创建 HTML 标记
- en: 'Because we’re closely integrating the sparkline chart with other elements,
    we simply use a `<span>` tag to hold the HTML markup for our visualization, rather
    than using a `<div>`. In addition to the chart itself, we include the final value
    and a label as standard HTML. Here is the HTML for the glucose sparkline:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将 sparkline 图表与其他元素紧密集成，所以我们简单地使用 `<span>` 标签来承载我们的可视化 HTML 标记，而不是使用 `<div>`。除了图表本身，我们还将最终值和标签作为标准
    HTML 包含进来。以下是葡萄糖 sparklines 的 HTML 代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compared to other visualizations, two characteristics of our sparkline chart
    are unusual.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他可视化相比，我们的 sparkline 图表有两个不同寻常的特点。
- en: We include the data right in the HTML itself, not in the JavaScript that creates
    the chart.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将数据直接包含在 HTML 中，而不是在创建图表的 JavaScript 中。
- en: The `<span>` for the chart does not have a unique `id` attribute.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表的 `<span>` 没有唯一的 `id` 属性。
- en: Both of these differences are optional; we could construct the chart as in other
    visualizations by passing data to a JavaScript function and identifying its container
    with a unique `id`. For sparklines, however, the approach we’re using here often
    makes more sense. By including the chart data directly in the HTML, we can easily
    see the data’s relation to other content on the page. It’s clear, for example,
    that the final value of our chart (`128`) is the same as the value we’re using
    for the label. If we had made a mistake and used a different value for the label,
    the error would be much easier to spot and correct. Using a common `class` for
    all sparklines instead of unique `id`s simplifies how we might use the library
    to create multiple charts on one page. With unique `id`s, we would have to call
    a library function for every chart. With a common `class`, on the other hand,
    we need only call a single library function to create multiple charts. That’s
    especially helpful when a web page contains a lot of sparklines.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个差异是可选的；我们可以像其他可视化一样，通过将数据传递给 JavaScript 函数并通过唯一的 `id` 标识其容器来构建图表。然而，对于 sparklines（小型图表），我们在这里使用的方法通常更为合适。通过直接在
    HTML 中包含图表数据，我们可以轻松查看数据与页面上其他内容的关系。例如，很明显，我们图表的最终值（`128`）与我们用于标签的值相同。如果我们犯了错误，使用了不同的标签值，错误就更容易被发现和修正。使用通用的
    `class` 来表示所有 sparklines，而不是唯一的 `id`，简化了我们使用库在一页上创建多个图表的方式。如果使用唯一的 `id`，我们每个图表都必须调用一次库函数。而使用通用的
    `class`，我们只需调用一次库函数即可创建多个图表。这在网页中包含许多 sparklines 时尤其有用。
- en: 'Step 3: Draw the Sparkline'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：绘制 Sparkline
- en: Now that we’ve included the necessary libraries and set up our HTML, it’s remarkably
    easy to draw the charts. In fact, a single line of JavaScript is sufficient. We
    simply select the containing element(s) using jQuery—`$(".sparkline")`—and call
    the sparklines plug-in.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经包含了必要的库并设置了 HTML，绘制图表变得异常简单。事实上，一行 JavaScript 代码就足够了。我们只需使用 jQuery 选择包含元素（`$(".sparkline")`），然后调用
    sparklines 插件。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see in [Figure 3-2](ch03.html#default_sparkline_options_differ_slightl
    "Figure 3-2. The default sparkline options differ slightly from the classic example."),
    the sparklines library creates a standard sparkline from our data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在[图 3-2](ch03.html#default_sparkline_options_differ_slightl "图 3-2：默认的 sparklines
    选项与经典示例略有不同。")中看到的，sparklines 库根据我们的数据创建了一个标准的 sparklines 图表。
- en: '![The default sparkline options differ slightly from the classic example.](figs/web/03fig02.png.jpg)Figure 3-2. The
    default sparkline options differ slightly from the classic example.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![默认的 sparklines 选项与经典示例略有不同。](figs/web/03fig02.png.jpg)图 3-2：默认的 sparklines
    选项与经典示例略有不同。'
- en: The library’s default options differ from Tufte’s classic sparkline in color,
    chart type, and density. We’ll tweak those next.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该库的默认选项在颜色、图表类型和密度上与 Tufte 的经典 sparkline 略有不同。接下来我们将进行调整。
- en: 'Step 4: Adjust the Chart Style'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：调整图表样式
- en: To make our sparkline match Tufte’s definition exactly, we can specify new values
    for some of the default options. To pass these options to sparklines, we construct
    a JavaScript object and include it as the second parameter in the `sparkline`
    function call. The function’s first parameter is the data itself, which here we
    specify with `"html"` because our data is included in the HTML markup.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的火花图完全符合 Tufte 的定义，我们可以为一些默认选项指定新的值。为了将这些选项传递给火花图，我们构造一个 JavaScript 对象，并将其作为第二个参数包含在
    `sparkline` 函数调用中。该函数的第一个参数是数据本身，这里我们使用 `"html"` 来指定，因为我们的数据已经包含在 HTML 标记中。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To complete our transformation to Tufte’s original, we can style the HTML content
    as well. Making the final value the same color as the key data points clarifies
    that connection, and making the chart label bold emphasizes it as a title.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成对 Tufte 原始设计的转变，我们还可以对 HTML 内容进行样式调整。将最终值与关键数据点设置为相同的颜色，可以清晰地表明它们之间的关系，而将图表标签设为粗体可以突出它作为标题。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s walk through the changes we just made:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来回顾一下我们刚刚做的更改：
- en: Tufte’s classic sparklines are black and white except for key data points (minimum,
    maximum, and final values). His color scheme adds extra emphasis to those points.
    To change the library’s default (blue), we can set a `lineColor`. For screen displays,
    we might choose a dark gray rather than pure black. That’s what we’re using at
    ➊.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tufte 的经典火花图是黑白色的，只有关键数据点（最小值、最大值和最终值）有颜色。他的配色方案为这些点增加了额外的强调。为了改变库中的默认颜色（蓝色），我们可以设置
    `lineColor`。对于屏幕显示，我们可能选择深灰色而不是纯黑色。这正是我们在 ➊ 处使用的颜色。
- en: Tufte doesn’t fill the area below the line so that he can use shading to indicate
    a normal range. To eliminate the library’s light blue shading, we set `fillColor`
    to `false` ➋.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tufte 没有填充线下方的区域，而是使用阴影来表示正常范围。为了去除库中的浅蓝色阴影，我们将 `fillColor` 设置为 `false` ➋。
- en: By default, the library uses 3 pixels as the width for each data point. To maximize
    information density, Tufte would likely suggest using only a single pixel. Setting
    the `defaultPixelsPerValue` option at ➌ makes that change.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，库为每个数据点使用 3 像素的宽度。为了最大化信息密度，Tufte 可能会建议使用单个像素。将 `defaultPixelsPerValue`
    选项设置为 ➌ 就可以实现这一变化。
- en: Tufte uses red for key data points. To change the library’s default (orange),
    we set `spotColor`, `minSpotColor`, and `maxSpotColor` at ➍.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tufte 使用红色来表示关键数据点。为了改变库中的默认颜色（橙色），我们将 `spotColor`、`minSpotColor` 和 `maxSpotColor`
    设置为 ➍。
- en: Finally, Tufte’s sparklines can include shading to mark the normal range for
    a value. To show, for example, a range of 82–180 mg/dL, we set the `normalRangeMin`
    and `normalRangeMax` options at ➎.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，Tufte 的火花图可以包括阴影来标记值的正常范围。例如，要显示 82–180 mg/dL 的范围，我们将 `normalRangeMin` 和
    `normalRangeMax` 选项设置为 ➎。
- en: With these changes, we have the classic Tufte sparkline on our web page. We
    can even include it within a text paragraph, like this, ![](figs/web/094fig01.png.jpg),
    so that the visualization enhances the content of the text.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，我们已经在网页上展示了经典的 Tufte 火花图。我们甚至可以将其嵌入到文本段落中，就像这样，![](figs/web/094fig01.png.jpg)，这样可视化就能增强文本内容。
- en: Charting Many Variables
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制多个变量
- en: 'By design, sparklines take up very little space on a page, and that makes them
    ideal for another visualization challenge: showing many variables at once. Of
    course, regular line charts and bar charts can plot multiple data sets simultaneously;
    however, these multiple-series charts rapidly grow unwieldy if the number of data
    sets exceeds four or five. Some visualization projects show dozens of different
    variables, far beyond what a multiple-series chart can accommodate. A *small-multiples*
    approach turns the standard chart approach completely around. Instead of showing
    one chart with multiple data sets, we can show multiple charts, each with a single
    data set. Placing lots of charts on a page means that each individual chart cannot
    take up much space. That is exactly the problem that sparklines solve.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据设计，火花图在页面上占用的空间非常少，这使得它们成为另一个可视化挑战的理想选择：一次性展示多个变量。当然，常规的折线图和柱状图可以同时绘制多个数据集；然而，当数据集的数量超过四五个时，这些多系列图表会迅速变得笨重。一些可视化项目展示了几十个不同的变量，远远超出了多系列图表能够容纳的范围。*小多重*方法完全颠覆了标准图表的方法。我们可以展示多个图表，每个图表只有一个数据集，而不是展示一个包含多个数据集的图表。在页面上放置大量图表意味着每个单独的图表不能占用太多空间，这正是火花图解决的问题。
- en: We won’t go too crazy here, to keep the code examples manageable, but it’s easy
    to extend this approach to many more variables. In our case, we’ll construct a
    visualization for analyzing stock market performance. The companies in our analysis
    will include the 10 largest American companies in 2012 (*[http://money.cnn.com/magazines/fortune/fortune500/2012/full_list/](http://money.cnn.com/magazines/fortune/fortune500/2012/full_list/)*),
    also known as the Fortune 500 Top 10; Barclay’s best technology stocks for 2012
    (*[http://www.marketwatch.com/story/barclays-best-tech-stocks-for-2012-2011-12-20/](http://www.marketwatch.com/story/barclays-best-tech-stocks-for-2012-2011-12-20/)*),
    as identified in December 2011; and Bristol-Myers Squibb, which *CR Magazine*
    named the top company in America for corporate responsibility (*[http://www.thecro.com/files/100Best2012_List_3.8.pdf/](http://www.thecro.com/files/100Best2012_List_3.8.pdf/)*).
    Those selections are completely arbitrary, but the example is designed to include
    three different cases that we will style differently in our visualization. We’ll
    treat one as a general case (the Fortune 500 Top 10 list), one as a special class
    (the Barclay’s list), and one as a unique variable (Bristol-Myers Squibb). Just
    as in this chapter’s first example, we need to include the sparklines and jQuery
    libraries in our web page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在这里做得过于复杂，以保持代码示例的简洁，但这个方法很容易扩展到更多的变量。在我们的例子中，我们将构建一个用于分析股票市场表现的可视化。我们的分析公司包括2012年美国最大的10家公司（*[http://money.cnn.com/magazines/fortune/fortune500/2012/full_list/](http://money.cnn.com/magazines/fortune/fortune500/2012/full_list/)*），也就是《财富》500强前10名；2012年Barclay最佳科技股票（*[http://www.marketwatch.com/story/barclays-best-tech-stocks-for-2012-2011-12-20/](http://www.marketwatch.com/story/barclays-best-tech-stocks-for-2012-2011-12-20/)*），该名单于2011年12月发布；以及Bristol-Myers
    Squibb，这家公司被*CR Magazine*评为美国最佳企业责任公司（*[http://www.thecro.com/files/100Best2012_List_3.8.pdf/](http://www.thecro.com/files/100Best2012_List_3.8.pdf/)*）。这些选择完全是任意的，但示例的设计旨在包含三种不同的情况，我们将对它们在可视化中进行不同的样式处理。我们将其中一个作为一般案例（《财富》500强前10名名单），一个作为特殊类别（Barclay名单），一个作为独特变量（Bristol-Myers
    Squibb）。就像本章第一个例子一样，我们需要在网页中包含sparklines和jQuery库。
- en: 'Step 1: Prepare the HTML Markup'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1步：准备HTML标记
- en: The sparklines library makes it easy to embed the data directly inside the HTML
    markup. For this example, an HTML table is the most appropriate structure for
    the data. Here’s how such a table could begin. (For brevity’s sake, the following
    excerpt doesn’t include the full HTML, but the complete example is available in
    the book’s source code at *[http://jsDataV.is/source/](http://jsDataV.is/source/)*.)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: sparklines库使得直接在HTML标记中嵌入数据变得非常容易。对于这个例子，HTML表格是最合适的数据结构。以下是该表格可能的起始部分。（为了简洁起见，以下摘录没有包含完整的HTML代码，但完整的示例可以在书籍的源代码中找到，地址是*[http://jsDataV.is/source/](http://jsDataV.is/source/)*。）
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The table has three important characteristics relevant to our visualization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该表格有三个与我们的可视化相关的重要特征。
- en: Each stock is a single table row (`<tr>`).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每只股票都是一个单独的表格行（`<tr>`）。
- en: Stocks from Barclay’s technology list have the class attribute `"barclays"`
    added to that `<tr>` element.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Barclay技术名单的股票在相应的`<tr>`元素中增加了类属性`"barclays"`。
- en: The top corporate responsibility stock has no special attributes or characteristics
    (yet).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顶级企业责任股票没有特殊的属性或特征（暂时没有）。
- en: 'Step 2: Draw the Charts'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步：绘制图表
- en: 'Just as in this chapter’s first example, creating the sparklines using default
    options is amazingly simple: it takes only a single line of JavaScript. We use
    jQuery to select all the elements that contain sparkline data, and we call the
    `sparkline()` function to generate the charts.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 就像本章第一个例子一样，使用默认选项创建sparklines非常简单：只需要一行JavaScript代码。我们使用jQuery来选择所有包含sparkline数据的元素，然后调用`sparkline()`函数来生成图表。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice that we only have to make one call to `sparkline()`, even though each
    chart has unique data. That’s a major benefit of placing the data within the HTML
    itself.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，尽管每个图表都有独特的数据，我们只需要调用一次`sparkline()`。这就是将数据放置在HTML内部的一个主要好处。
- en: The resulting charts, shown in [Figure 3-3](ch03.html#sparklines_can_be_a_good_visualization_t
    "Figure 3-3. Sparklines can be a good visualization to include within page elements
    such as tables."), all have identical styles, but we’ll fix that in the next few
    steps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结果图表，如[图3-3](ch03.html#sparklines_can_be_a_good_visualization_t "图3-3. Sparklines可以作为一种很好的可视化方式，嵌入到表格等页面元素中")所示，都具有相同的样式，但我们将在接下来的几个步骤中进行修改。
- en: '![Sparklines can be a good visualization to include within page elements such
    as tables.](figs/web/03fig03.png.jpg)Figure 3-3. Sparklines can be a good visualization
    to include within page elements such as tables.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![火花图可以作为一个不错的可视化效果，嵌入在页面元素中，例如表格。](figs/web/03fig03.png.jpg)图 3-3. 火花图可以作为一个不错的可视化效果，嵌入在页面元素中，例如表格。'
- en: 'Step 3: Establish a Default Style for the Charts'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：为图表建立默认样式
- en: If we don’t like the sparklines library’s default style, it’s easy to change
    it using an options object, as shown next.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不喜欢火花图库的默认样式，可以通过使用选项对象轻松进行更改，如下所示。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The object is the second parameter to the `sparkline()` function, and here it
    changes the color for the charts and disables the highlights on the minimum, maximum,
    and final values. The first parameter, the string `"html"`, indicates to the library
    that the data is already present in our HTML.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对象是 `sparkline()` 函数的第二个参数，它在这里用于更改图表的颜色，并禁用最小值、最大值和最终值的高亮显示。第一个参数，即字符串 `"html"`，告诉库数据已经存在于我们的
    HTML 中。
- en: '[Figure 3-4](ch03.html#sparkline_options_let_us_adjust_the_char "Figure 3-4. The
    sparkline options let us adjust the chart styles.") shows the result for one row.
    We’ll use this style as the default for all our charts.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-4](ch03.html#sparkline_options_let_us_adjust_the_char "图 3-4. 火花图选项让我们调整图表样式。")
    显示了单行的结果。我们将使用这个样式作为所有图表的默认样式。'
- en: '![The sparkline options let us adjust the chart styles.](figs/web/03fig04.png.jpg)Figure 3-4. The
    sparkline options let us adjust the chart styles.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![火花图选项让我们调整图表样式。](figs/web/03fig04.png.jpg)图 3-4. 火花图选项让我们调整图表样式。'
- en: 'Step 4: Modify the Default Style for Special Classes'
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：修改特殊类的默认样式
- en: With a default style in place, we can turn our attention to the special class
    of charts for stocks in Barclay’s technology list. For our example, let’s change
    the color of the chart without any other changes to our default style. That final
    clause is important. We could just copy and paste the options, but that would
    be setting ourselves up for problems in the future. You can see why in the following
    example code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置了默认样式之后，我们可以把注意力转向Barclay技术列表中的股票图表特殊类。以我们的示例为例，让我们仅更改图表的颜色，而不修改默认样式的其他内容。这个最后的声明非常重要。我们本可以直接复制粘贴选项，但那样会为未来带来问题。你可以从以下示例代码中看到为什么。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice that the second call to `sparklines()` duplicates options from the first
    call that haven’t changed, specifically for the spot colors. This makes the code
    harder to maintain if, in the future, we decide to turn spot colors back on for
    all our charts, since we would have to make changes to our code in two places.
    There is a better way.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第二次调用 `sparklines()` 会复制第一次调用中未更改的选项，特别是关于点颜色的设置。如果将来我们决定为所有图表重新启用点颜色，这会使代码更加难以维护，因为我们必须在两个地方修改代码。其实有一种更好的方法。
- en: To avoid duplication, we first define a variable that holds our default options.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免重复，我们首先定义一个变量来保存我们的默认选项。
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Next we create a new variable for the Barclay’s styles. To create this new variable,
    we can use the jQuery `.extend()` function to avoid duplication.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为Barclay的样式创建一个新变量。为了创建这个新变量，我们可以使用 jQuery 的 `.extend()` 函数来避免重复。
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this code, we pass three parameters to `.extend()`. The first parameter is
    the target. It’s an object that the function will modify, and we start with an
    empty object (`{}`). The next parameters are objects that `.extend()` will merge
    into the target. The merge process adds new properties to the target and updates
    any properties in the target object with new values. Since we’re passing two additional
    parameters, we’re asking for two merges.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们传递了三个参数给 `.extend()`。第一个参数是目标对象。它是一个将被函数修改的对象，我们从一个空对象（`{}`）开始。接下来的参数是将被
    `.extend()` 合并到目标对象中的对象。合并过程会将新属性添加到目标对象，并更新目标对象中已有属性的值。由于我们传递了两个附加参数，实际上是要求进行两次合并。
- en: You can think of the call to `.extend()` as a two-stage process.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将调用 `.extend()` 看作是一个两阶段的过程。
- en: Since our target is initially empty, the first merge will add all of the properties
    from `sparkline_default` to the target.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的目标对象最初是空的，因此第一次合并会将 `sparkline_default` 中的所有属性添加到目标对象。
- en: Our target now has the same properties as `sparkline_default`, and the second
    merge will modify it by updating the two properties in the last parameter, `lineColor`
    and `fillColor`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的目标对象现在具有与 `sparkline_default` 相同的属性，第二次合并将通过更新最后一个参数中的两个属性 `lineColor` 和
    `fillColor` 来修改它。
- en: The resulting object will hold the options we want for charts of Barclay’s technology
    stocks. Here’s a complete code listing, using these objects to create the charts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的对象将包含我们为巴克莱（Barclay）技术股票图表所需的选项。以下是完整的代码清单，使用这些对象来创建图表。
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Notice at ➊ that we create the nontechnology sparklines by selecting table rows
    (`<tr>`) that don’t have the `"barclays"` class. At ➋ we create the technology
    sparklines. Because we’ve defined the technology options based on the default,
    we have an easy way to maintain both default styles and styles for special classes.
    The chart colors in [Figure 3-5](ch03.html#different_visual_styles_distinguish_diff
    "Figure 3-5. Different visual styles distinguish different types of data.") clearly
    distinguish the stock types in our table.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意在 ➊ 处，我们通过选择没有 `"barclays"` 类的表格行（`<tr>`）来创建非技术类的 sparklines。在 ➋ 处，我们创建技术类的
    sparklines。由于我们根据默认值定义了技术选项，因此我们可以轻松维护默认样式和特定类的样式。[图 3-5](ch03.html#different_visual_styles_distinguish_diff
    "图 3-5. 不同的视觉样式区分不同类型的数据.") 中的图表颜色清晰地区分了表格中的股票类型。
- en: '![Different visual styles distinguish different types of data.](figs/web/03fig05.png.jpg)Figure 3-5. Different
    visual styles distinguish different types of data.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![不同的视觉样式区分不同类型的数据。](figs/web/03fig05.png.jpg)图 3-5. 不同的视觉样式区分不同类型的数据。'
- en: 'Step 5: Create a Unique Style for a Specific Chart'
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 5 步：为特定图表创建独特样式
- en: For the final step in this example, let’s consider the single stock at the top
    of *CR Magazine*’s list. Suppose we want to add distinct styles to its chart,
    and we know those styles only when we’re generating the HTML, not when we’re writing
    the JavaScript. How can we adjust the chart style if we can’t modify any JavaScript?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本例中的最后一步，让我们考虑 *CR Magazine* 列表顶部的单个股票。假设我们想为其图表添加独特的样式，而且只有在生成 HTML 时我们才能知道这些样式，而不是在编写
    JavaScript 时。我们该如何调整图表样式，如果我们无法修改任何 JavaScript？
- en: Sparklines let you add special attributes directly to the HTML element containing
    a chart. To set the line color, for example, you need to specify the attribute
    `sparkLineColor`. The problem is that if we were to enter this attribute directly
    in the HTML, the result wouldn’t be valid HTML, because the HTML specification
    doesn’t recognize the `sparkLineColor` attribute. To conform to the HTML standard,
    custom attributes must have names that begin with the prefix `data-`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Sparklines 允许你直接向包含图表的 HTML 元素添加特殊属性。例如，要设置线条颜色，你需要指定 `sparkLineColor` 属性。问题是，如果我们直接在
    HTML 中输入此属性，结果将不是有效的 HTML，因为 HTML 规范不识别 `sparkLineColor` 属性。为了符合 HTML 标准，自定义属性必须以
    `data-` 前缀开头。
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To use HTML-compliant names to refer to sparklines’ custom attributes, we just
    need to tell the sparklines library how to find those names. For our HTML, we
    use the standard `data-` prefix instead of `spark` in at ➊.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用符合 HTML 标准的名称来引用 sparklines 的自定义属性，我们只需要告诉 sparklines 库如何找到这些名称。对于我们的 HTML，我们在
    ➊ 处使用标准的 `data-` 前缀，而不是 `spark`。
- en: Now we have to add a couple more options in our call to `sparkline()`. First
    we set `enableTagOptions` to `true` to tell the library that we’re including options
    directly in the HTML. Then we set `tagOptionsPrefix` to `"data-"` to specify the
    prefix we’re using for those attributes.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在调用 `sparkline()` 时添加更多选项。首先，我们将 `enableTagOptions` 设置为 `true`，告诉库我们将在
    HTML 中直接包含选项。然后，我们将 `tagOptionsPrefix` 设置为 `"data-"`，指定我们用于这些属性的前缀。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注释
- en: '**As of this writing, the jQuery sparklines documentation for `tagOptionsPrefix`
    is not correct. The documentation lists the option as `tagOptionPrefix`, where
    *option* is singular instead of plural. The library’s code, however, expects the
    plural form.**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**截至本文写作时，jQuery sparklines 关于 `tagOptionsPrefix` 的文档是不正确的。文档将此选项列为 `tagOptionPrefix`，其中
    *option* 是单数形式，而库的代码实际上期望的是复数形式。**'
- en: If we use these options correctly, one of our charts will have the distinct
    color in [Figure 3-6](ch03.html#sparklines_library_supports_unique_styli "Figure 3-6. The
    sparklines library supports unique styling options for individual charts.").
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们正确使用这些选项，其中一个图表将在 [图 3-6](ch03.html#sparklines_library_supports_unique_styli
    "图 3-6. sparklines 库支持单个图表的独特样式选项.") 中显示出不同的颜色。
- en: '![The sparklines library supports unique styling options for individual charts.](figs/web/03fig06.png.jpg)Figure 3-6. The
    sparklines library supports unique styling options for individual charts.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![sparklines 库支持单个图表的独特样式选项。](figs/web/03fig06.png.jpg)图 3-6. sparklines 库支持单个图表的独特样式选项。'
- en: To pass the appropriate options to `sparkline()`, we can take advantage of the
    work we did in Step 5\. Since we created a special object for default options,
    that’s the only object we have to change.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将适当的选项传递给`sparkline()`，我们可以利用在步骤5中所做的工作。由于我们为默认选项创建了一个特殊对象，这就是我们唯一需要更改的对象。
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We only need to make the change in one place, and all of our calls to `sparkline()`
    use the new options. Here is the final, complete JavaScript code for this example.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在一个地方进行更改，所有调用`sparkline()`的地方都会使用新的选项。以下是该示例的最终完整JavaScript代码。
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[Figure 3-7](ch03.html#complete_example_distinguishes_different "Figure 3-7. A
    complete example distinguishes different individual data sets in a larger collection.")
    shows the final result. We have a table that integrates text and charts, and we
    can style those charts appropriately and efficiently for the default case, for
    a special class, and for a unique value.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 3-7](ch03.html#complete_example_distinguishes_different "图 3-7. 完整示例区分了大型集合中的不同数据集。")展示了最终结果。我们有一个集成文本和图表的表格，并且我们可以为默认情况、特定类以及唯一值适当地和高效地样式化这些图表。'
- en: '![A complete example distinguishes different individual data sets in a larger
    collection.](figs/web/03fig07.png.jpg)Figure 3-7. A complete example distinguishes
    different individual data sets in a larger collection.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![完整示例区分了大型集合中的不同数据集。](figs/web/03fig07.png.jpg)图 3-7. 完整示例区分了大型集合中的不同数据集。'
- en: '[Tracking Data Values](ch02.html#tracking_data_values "Tracking Data Values")
    uses a full-featured charting package for a similar result. If you don’t need
    the space efficiency of sparklines, consider that approach as an alternative.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[追踪数据值](ch02.html#tracking_data_values "追踪数据值")使用了一个功能完整的图表包来实现类似的结果。如果你不需要sparklines的空间效率，可以考虑这种方法作为替代方案。'
- en: Annotating Sparklines
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释 Sparklines
- en: Because they’re designed to maximize information density, sparklines omit many
    traditional chart components such as axes and labels. This approach certainly
    focuses on the data itself, but it can sometimes leave users without enough context
    to understand the data. Print versions usually rely on traditional text to supply
    this context, but on the Web we have more flexibility. We can present the data
    by itself in a sparkline, and we can give users the chance to explore the data’s
    context through interactions. *Tool tips*, which show additional information as
    a user hovers their mouse pointer over sections of a web page, can be an effective
    way to annotate a sparkline, so long as the users are accessing the page from
    a desktop computer. (Touch-based devices such as smartphones and tablets don’t
    typically support the concept of hover.) We’ll walk through a visualization that
    includes tool tips in this example; other examples in the chapter consider alternative
    approaches that may be more effective for touch devices. Let’s see how we can
    use a customized form of tool tips by enhancing the charts in the previous example.
    Just as in this chapter’s first example, we need to include the sparklines and
    jQuery libraries in our web page.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于sparklines旨在最大化信息密度，因此省略了许多传统图表组件，例如坐标轴和标签。这种方法确实将重点放在数据本身，但有时会让用户缺乏足够的上下文来理解数据。打印版通常依赖传统文本来提供这些上下文，但在网页上我们有更多的灵活性。我们可以单独通过sparkline展示数据，并且可以通过交互让用户有机会探索数据的上下文。*工具提示*（当用户将鼠标悬停在网页的某个部分时显示额外信息）可以是注释sparkline的有效方法，前提是用户是通过桌面电脑访问页面。（如智能手机和平板电脑等触摸设备通常不支持悬停概念。）我们将在这个示例中演示包含工具提示的可视化；本章中的其他示例则考虑了触摸设备可能更有效的替代方法。让我们看看如何通过增强前一个示例中的图表来使用定制的工具提示形式。就像本章第一个示例中一样，我们需要在网页中包含sparklines和jQuery库。
- en: 'Step 1: Prepare the Data'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：准备数据
- en: In the previous examples, we’ve embedded the data directly in the HTML markup.
    That’s convenient since it lets us separate the data from our code. In this example,
    however, the JavaScript code will need more-detailed knowledge of the data so
    it can present the right tool tip information. This time we’ll use a JavaScript
    array to store our data so that all the relevant information is in one place.
    For this example, we can focus on a single stock. And even though we’re graphing
    only the adjusted closing price, the array will track additional data that we
    can include in the tool tips. Here’s an excerpt of the data for one of the stocks.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们将数据直接嵌入HTML标记中。这种做法很方便，因为它让我们可以将数据与代码分离。然而，在这个示例中，JavaScript代码需要更详细的数据知识，以便能够展示正确的工具提示信息。这次我们将使用JavaScript数组来存储数据，以便将所有相关信息集中在一个地方。对于这个示例，我们可以专注于单一的股票。即使我们只绘制了调整后的收盘价，数组仍然会跟踪其他数据，以便我们可以在工具提示中包含这些额外信息。以下是某只股票数据的一个摘录。
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Step 2: Prepare the HTML Markup'
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2步：准备HTML标记
- en: Our visualization will include three distinct areas, each in a `<div>` element.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的可视化将包括三个不同的区域，每个区域都放在一个`<div>`元素中。
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The primary `<div>` created at ➊ will hold the chart. Underneath the chart we’ll
    add the primary tool tip information in its own `<div>` ➋, and we’ll include supplementary
    details to the right ➌. This example uses inline styles for clarity; a production
    site might prefer to use CSS style sheets.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在➊处创建的主要`<div>`元素将容纳图表。图表下方我们将添加包含主要工具提示信息的`<div>`元素➋，并在右侧添加补充详细信息➌。这个示例使用内联样式以便清晰展示；生产环境中可能更倾向于使用CSS样式表。
- en: 'Step 3: Add the Chart'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第3步：添加图表
- en: Adding the chart to our markup is easy with the sparklines library. We can use
    the jQuery `.map()` function to extract the adjusted close value from our `stock`
    array. The `minSpotColor` and `maxSpotColor` options tell the library how to highlight
    the lowest and highest values for the year.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用sparklines库将图表添加到我们的标记中非常简单。我们可以使用jQuery的`.map()`函数从我们的`stock`数组中提取调整后的收盘值。`minSpotColor`和`maxSpotColor`选项告诉库如何突出显示年度中的最低值和最高值。
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The static chart of [Figure 3-8](ch03.html#static_sparkline_shows_the_change_in_the
    "Figure 3-8. A static sparkline shows the change in the data set over time.")
    shows the stock performance nicely.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-8](ch03.html#static_sparkline_shows_the_change_in_the "Figure 3-8. A static
    sparkline shows the change in the data set over time.")中的静态图表清晰地展示了股票的表现。'
- en: '![A static sparkline shows the change in the data set over time.](figs/web/03fig08.png.jpg)Figure 3-8. A
    static sparkline shows the change in the data set over time.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![静态sparkline展示了数据集随时间变化的变化。](figs/web/03fig08.png.jpg)图3-8. 静态sparkline展示了数据集随时间变化的变化。'
- en: 'Step 4: Add the Primary Annotation'
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第4步：添加主要注释
- en: The sparklines library adds a simple tool tip to all of its charts by default.
    Although that tool tip shows the value over which the user’s mouse is hovering,
    the presentation isn’t particularly elegant, and, more importantly, it doesn’t
    provide as much information as we would like. Let’s enhance the default behavior
    to meet our needs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: sparklines库默认会为其所有图表添加一个简单的工具提示。虽然这个工具提示会显示用户鼠标悬停的值，但其展示方式并不特别优雅，而且更重要的是，它没有提供我们所需的足够信息。我们来增强默认行为以满足我们的需求。
- en: Looking at the library’s defaults, we can retain the vertical marker, but we
    don’t want the default tool tip. Adding the option `disableTooltips` with a value
    of `true` will turn off the undesired tool tip.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 查看库的默认设置，我们可以保留垂直标记，但不希望使用默认的工具提示。通过将选项`disableTooltips`设置为`true`，可以关闭不需要的工具提示。
- en: For our own custom tool tip, we can rely on a handy feature of the sparklines
    library. The library generates a custom event whenever the user’s mouse moves
    over a chart region. That event is the `sparklineRegionChange` event. The library
    attaches a custom property, `sparklines`, to those events. By analyzing that property,
    we can determine the mouse’s location relative to the data.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们自己的自定义工具提示，我们可以依赖sparklines库的一个便捷功能。该库会在用户的鼠标移动到图表区域时生成一个自定义事件。这个事件就是`spaklineRegionChange`事件。库会将一个自定义属性`sparklines`附加到这些事件中。通过分析这个属性，我们可以确定鼠标相对于数据的位置。
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As the comment at ➊ indicates, the library sometimes generates the event when
    the mouse leaves the chart area. In those cases, a defined value for the offset
    will not exist.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正如➊处的注释所示，库有时会在鼠标离开图表区域时生成事件。在这些情况下，偏移量的定义值将不存在。
- en: Once we have the mouse position, we can place our tool tip information in the
    `<div>` we set aside for it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获取到鼠标位置，就可以将工具提示信息放入我们为此预留的`<div>`元素中。
- en: '[PRE19]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We get the information at ➊ and ➋ from the `stock` array using the index value
    from the `sparklineRegionChange` event.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`stock`数组中的索引值获取➊和➋的信息，这些索引值来自于`sparklineRegionChange`事件。
- en: The sparklines library isn’t completely reliable in generating events when the
    mouse leaves the chart area. Instead of using the custom event, therefore, we
    can use the standard JavaScript `mouseout` event. When the user moves the mouse
    off the chart, we’ll turn off the custom tool tip by setting its content to a
    blank space. We use the HTML nonbreaking space (`&nbsp;`) so the browser doesn’t
    think the `<div>` is completely empty. If we used a standard space character,
    the browser would treat the `<div>` as empty and recalculate the height of the
    page, causing an annoying jump in the page contents. (For the same reason, we
    should initialize that `<div>` with `&nbsp;` instead of leaving it blank.)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 由于火花图库在生成鼠标离开图表区域的事件时并不完全可靠，因此我们可以使用标准的JavaScript `mouseout`事件，而不是自定义事件。当用户将鼠标移出图表时，我们会通过将内容设置为空格来关闭自定义工具提示。我们使用HTML的非断行空格(`&nbsp;`)，这样浏览器不会认为`<div>`完全为空。如果我们使用标准的空格字符，浏览器会将`<div>`视为空并重新计算页面高度，导致页面内容出现烦人的跳动。（出于同样的原因，我们应初始化`<div>`时使用`&nbsp;`，而不是留空。）
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: For the cleanest implementation, we combine all of these steps using method
    chaining. (To keep it concise, I’ve omitted the chart styling options in the following
    excerpt.)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现最简洁的方式，我们使用方法链将所有这些步骤结合起来。（为了简洁起见，下面的代码省略了图表样式设置选项。）
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now with [Figure 3-9](ch03.html#interactive_sparkline_tracks_the_userapo "Figure 3-9. An
    interactive sparkline tracks the user’s mouse and provides information relevant
    to the mouse position.") we have a nice, interactive tool tip that tracks the
    user’s mouse as it moves across the chart.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过[图 3-9](ch03.html#interactive_sparkline_tracks_the_userapo "图 3-9. 交互式火花图跟踪用户的鼠标并提供与鼠标位置相关的信息.")，我们拥有了一个很好的交互式工具提示，它会随着用户的鼠标在图表上移动并提供相关的信息。
- en: '![An interactive sparkline tracks the user’s mouse and provides information
    relevant to the mouse position.](figs/web/03fig09.png.jpg)Figure 3-9. An interactive
    sparkline tracks the user’s mouse and provides information relevant to the mouse
    position.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![交互式火花图跟踪用户的鼠标并提供与鼠标位置相关的信息。](figs/web/03fig09.png.jpg)图 3-9. 交互式火花图跟踪用户的鼠标并提供与鼠标位置相关的信息。'
- en: 'Step 5: Provide Additional Information'
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 5 步：提供附加信息
- en: 'The tool tip information we’ve added so far shows the immediately relevant
    information to the user: the week and the adjusted closing price of the stock.
    Our data, however, contains additional information that might be useful to the
    user. We can expand on the original tool tip by displaying that as well.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们添加的工具提示信息展示了与用户最相关的信息：本周和调整后的股票收盘价。然而，我们的数据还包含可能对用户有用的附加信息。我们可以通过在原始工具提示的基础上展示这些内容来进行扩展。
- en: At the same time we update the primary tool tip region, let’s add the extra
    data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 同时在更新主工具提示区域时，我们也添加额外的数据。
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When we clear the primary tool tip region, we’ll clear this area as well.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们清除主工具提示区域时，也会清除这个区域。
- en: '[PRE23]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Because it won’t affect the vertical size of the page, we don’t need to fill
    this `<div>` with a dummy `&nbsp;`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这不会影响页面的垂直大小，所以我们不需要用虚拟的`&nbsp;`填充这个`<div>`。
- en: With [Figure 3-10](ch03.html#interactive_sparklines_can_show_addition "Figure 3-10. Interactive
    sparklines can show additional information in many ways.") we have the visualization
    we want. The chart clearly shows the overall trend for the stock during the year,
    but it takes up only a small amount of space on the web page. At first glance
    the chart is also free of distracting elements such as labels and axes. For users
    who just want a general sense of the stock’s performance, those elements are superfluous.
    Users who want the full details need only hover their mouse over the chart, and
    it reveals the complete market information.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过[图 3-10](ch03.html#interactive_sparklines_can_show_addition "图 3-10. 交互式火花图可以以多种方式显示附加信息.")，我们得到了想要的可视化效果。图表清晰地显示了股票在一年的总体趋势，但它只占用了网页上很小的空间。乍一看，图表也没有干扰的元素，比如标签和坐标轴。对于那些只想了解股票大致表现的用户，这些元素是多余的。想要获取完整细节的用户只需将鼠标悬停在图表上，完整的市场信息就会显现出来。
- en: '![Interactive sparklines can show additional information in many ways.](figs/web/03fig10.png.jpg)Figure 3-10. Interactive
    sparklines can show additional information in many ways.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![交互式火花图可以以多种方式显示附加信息。](figs/web/03fig10.png.jpg)图 3-10. 交互式火花图可以以多种方式显示附加信息。'
- en: Because we’ve managed to display the information while retaining the compact
    nature of sparklines, the technique in this example works well when combined with
    the small-multiples approach of this chapter’s second example. The next example
    includes an alternate method for showing the extra details.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们成功地在保留sparklines简洁特性的同时展示了信息，本示例中的技术与本章第二个示例的小型多重方法结合使用时效果很好。下一个示例包括显示额外细节的替代方法。
- en: Drawing Composite Charts
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制复合图表
- en: So far in this chapter, we’ve seen how sparklines can provide a lot of visual
    information in a very small space. That characteristic makes them perfect for
    integrating charts in a complete web page that includes text, tables, and other
    elements. We haven’t yet exhausted the capabilities of sparklines, however. We
    can increase the information density of our visualizations still further by creating
    composite charts—in effect, drawing multiple charts in the same space.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经看到sparklines如何在非常小的空间内提供大量视觉信息。正是这一特性使得sparklines非常适合在包含文本、表格和其他元素的完整网页中集成图表。然而，我们还没有完全发挥sparklines的功能。通过创建复合图表，我们可以进一步增加可视化的数据信息密度——实际上，就是在同一空间中绘制多个图表。
- en: 'To see an example of this technique, we can build on the previous example.
    In that example we used a sparkline to show the closing price of a stock over
    an entire year. Price is indeed the most relevant data about a stock, but there’s
    another quantity that many investors like to see: the stock’s trading volume.
    And just as with price, it can be important to understand the trend for trading
    volume at a glance. That makes the value an excellent candidate for a chart.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这一技术的示例，我们可以在之前的示例上进行扩展。在那个示例中，我们使用了sparkline来显示股票的全年收盘价格。价格确实是股票最相关的数据，但还有另一个许多投资者喜欢查看的量：股票的交易量。就像价格一样，了解交易量的趋势一眼就能看出，也非常重要。这使得它成为图表的优秀候选值。
- en: Just as in this chapter’s first example, we need to include the sparklines and
    jQuery libraries in our web page. Because we’re visualizing the same data as in
    the previous example, we’ll also want to set up the data array and the HTML markup
    exactly as in that example.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在本章的第一个示例中一样，我们需要在网页中包含sparklines和jQuery库。因为我们在可视化与前一个示例相同的数据，所以我们也需要设置与该示例完全相同的数据数组和HTML标记。
- en: 'Step 1: Draw the Trading Volume Chart'
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤1：绘制交易量图表
- en: Even though we’re including a chart of trading volume, the most important quantity
    is the stock price. To keep the emphasis on stock price, we want to draw that
    chart *on top of* the chart for trading volume. That means we need to draw the
    trading volume chart first.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们包含了交易量的图表，但最重要的量是股票价格。为了突出股票价格，我们希望将其图表*叠加在*交易量图表之上。这意味着我们需要先绘制交易量图表。
- en: The code for trading volume is very similar to that of the stock price from
    the previous example. Instead of an area chart, however, we’ll use a bar chart.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 交易量的代码与前一个示例中的股票价格非常相似。然而，我们将使用柱状图，而不是面积图。
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We use the jQuery `.map()` function to extract the `volume` property from our
    data array. Setting the `type` option to `"bar"` at ➊ is all it takes to tell
    the sparklines library to create a bar chart.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用jQuery的`.map()`函数从数据数组中提取`volume`属性。在➊位置将`type`选项设置为`"bar"`，即可告诉sparklines库创建柱状图。
- en: '[Figure 3-11](ch03.html#sparklines_library_can_create_bar_charts "Figure 3-11. The
    sparklines library can create bar charts as well as line charts.") shows the results.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[图3-11](ch03.html#sparklines_library_can_create_bar_charts "图3-11。sparklines库可以创建柱状图和折线图。")展示了结果。'
- en: '![The sparklines library can create bar charts as well as line charts.](figs/web/03fig11.png.jpg)Figure 3-11. The
    sparklines library can create bar charts as well as line charts.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![sparklines库可以创建柱状图和折线图。](figs/web/03fig11.png.jpg)图3-11。sparklines库可以创建柱状图和折线图。'
- en: 'Step 2: Add the Closing Price Chart'
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤2：添加收盘价格图表
- en: To add the price chart on top of the volume chart, we can call the sparklines
    library once again.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将价格图表叠加在交易量图表之上，我们可以再次调用sparklines库。
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We give it the same containing element and, most importantly, set the `composite`
    option to `true` at ➊. This parameter tells the library not to erase any existing
    chart in the element but to simply draw over it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为其指定相同的容器元素，最重要的是，在➊位置将`composite`选项设置为`true`。此参数告诉库不要删除元素中任何现有的图表，而是直接在其上绘制。
- en: Notice the way we specify the fill color for the second chart. We set a transparency
    (or *alpha*) value of `0.3`. This value makes the chart area nearly transparent,
    so the volume chart will show through. Note, though, that some older web browsers,
    notably IE8 and earlier, do not support the transparency standard. If your site
    has a significant number of users with those browsers, you might consider simply
    setting the `fillColor` option to `false`, which will disable filling the area
    entirely.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们为第二个图表指定填充颜色的方式。我们设置了一个透明度（或*alpha*）值为`0.3`。这个值使得图表区域几乎透明，因此交易量图表会透过显示。然而需要注意的是，一些较老的网页浏览器，特别是
    IE8 及更早版本，无法支持透明度标准。如果你的站点有大量使用这些浏览器的用户，您可以考虑将`fillColor`选项设置为`false`，这样就会完全禁用区域填充。
- en: As [Figure 3-12](ch03.html#multiple_charts_may_be_combined_in_the_s "Figure 3-12. Multiple
    charts may be combined in the same space.") shows, the result combines both charts
    in the same space.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 3-12](ch03.html#multiple_charts_may_be_combined_in_the_s "图 3-12. 多个图表可以合并在同一空间内")所示，结果将两个图表合并在同一空间内。
- en: '![Multiple charts may be combined in the same space.](figs/web/03fig12.png.jpg)Figure 3-12. Multiple
    charts may be combined in the same space.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![多个图表可以合并在同一空间内。](figs/web/03fig12.png.jpg)图 3-12. 多个图表可以合并在同一空间内。'
- en: 'Step 3: Add the Annotations'
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：添加注释
- en: We can add annotations to the chart using the same approach as in the previous
    example. Because our charts now include the trading volume, it’s appropriate to
    move that value from the details area into the primary annotation `<div>`. The
    code to do that is a simple adjustment from the prior example.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与前面示例相同的方法为图表添加注释。因为我们的图表现在包含了交易量，所以将该值从细节区域移动到主要注释`<div>`中是合适的。实现这一点的代码只是对前一个示例的简单调整。
- en: '[PRE26]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In addition to moving the text from one area to the other, we’ve made two significant
    changes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将文本从一个区域移动到另一个区域，我们还做了两个重要的更改。
- en: We get the `idx` value from the second element of the event’s `sparklines` array
    (`sparklines[1]`) at ➊. That’s because the first element of that array is the
    first chart. The sparklines library doesn’t really return any useful information
    about bar charts in the `sparklineRegionChange` event. Fortunately, we can get
    all the information we need from the line bchart.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从事件的`sparklines`数组中的第二个元素（`sparklines[1]`）获取`idx`值，见 ➊。这是因为该数组的第一个元素是第一个图表。在`spaklineRegionChange`事件中，sparklines库并没有返回关于柱状图的任何有用信息。幸运的是，我们可以从线图中获得所需的所有信息。
- en: We show the trading volume in millions, rounded to two decimal places. The calculation
    is in at ➋. It’s much easier for users to quickly grasp “24.4M” than “24402100.”
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将交易量以百万为单位显示，并四舍五入到小数点后两位。计算过程在 ➋ 处。用户更容易理解“24.4M”而不是“24402100”。
- en: As in the previous example, the annotations in our chart (shown in [Figure 3-13](ch03.html#tracking_the_mouse_position_makes_it_pos
    "Figure 3-13. Tracking the mouse position makes it possible to interactively annotate
    the charts.")) provide additional details.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如同前面的例子，我们图表中的注释（见[图 3-13](ch03.html#tracking_the_mouse_position_makes_it_pos
    "图 3-13. 鼠标位置跟踪使得可以互动地注释图表")）提供了额外的细节。
- en: '![Tracking the mouse position makes it possible to interactively annotate the
    charts.](figs/web/03fig13.png.jpg)Figure 3-13. Tracking the mouse position makes
    it possible to interactively annotate the charts.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![鼠标位置跟踪使得可以互动地注释图表。](figs/web/03fig13.png.jpg)图 3-13. 鼠标位置跟踪使得可以互动地注释图表。'
- en: 'Step 4: Show Details as a Chart'
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：将细节显示为图表
- en: So far we’ve shown the additional details for the stock (open, close, high,
    and low) as text values. As long as we’re drawing multiple charts, we can show
    those values graphically as well. The statistical box plot serves as a useful
    model for us. Traditionally, that plot type shows the range of a distribution,
    including deviations, quartiles, and medians. Visually, however, it provides a
    perfect model of a stock’s trading performance. We can use it to show the opening
    and closing prices, as well as the high and low values during the period.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将股票的额外细节（开盘、收盘、最高和最低价）作为文本值显示。只要我们绘制多个图表，也可以将这些值以图形的形式展示。统计框图是一个有用的模型。传统上，这种图表类型显示分布的范围，包括偏差、四分位数和中位数。然而，从视觉上看，它提供了一个完美的模型来展示股票的交易表现。我们可以用它来展示开盘和收盘价格，以及期间的最高和最低值。
- en: 'The sparklines library can draw a box plot for us, but normally it calculates
    the values to display given the distribution as input data. In our case we don’t
    want to use the standard statistical calculations. Instead, we can use an option
    that tells the library to use precomputed values. The library expects at least
    five values:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: sparklines 库可以为我们绘制箱形图，但通常它根据分布数据计算要显示的值。在我们的案例中，我们不想使用标准的统计计算方法。相反，我们可以使用一个选项，告诉库使用预计算的值。该库至少需要五个值：
- en: The lowest sample value
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低样本值
- en: The first quartile
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个四分位数
- en: The median
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中位数
- en: The third quartile
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个四分位数
- en: The highest sample value
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高样本值
- en: 'For our example, we’ll provide the following values instead:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将提供以下值：
- en: The lowest price
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低价格
- en: Whichever is less of the opening and closing prices
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开盘价和收盘价中较小的一个
- en: The adjusted closing price
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整后的收盘价
- en: Whichever is greater of the opening and closing prices
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开盘价和收盘价中较大的一个
- en: The highest price
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高价格
- en: We’ll also color the median bar red or green depending on whether the stock
    gained or lost value during the period.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将根据股票在此期间是上涨还是下跌，将中位线条颜色标记为红色或绿色。
- en: 'This code creates that chart in response to the `sparklineRegionChange` event:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在响应 `sparklineRegionChange` 事件时生成该图表：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The data for the chart (shown at ➊) is simply the five values extracted from
    the stock data for the appropriate week. As ➋ and ➌ demonstrate, we can change
    the color of the median bar depending on whether the stock finished higher or
    lower for the day.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图表中的数据（如➊所示）只是从股票数据中提取出的适当一周的五个值。正如➋和➌所示，我们可以根据股票当天是上涨还是下跌来改变中位线条的颜色。
- en: When the mouse leaves the chart region, we can remove the box plot by emptying
    its container.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标离开图表区域时，我们可以通过清空其容器来移除箱形图。
- en: '[PRE28]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now as our users mouse over the chart area, they can see a visual representation
    of the stock’s price range during each period ([Figure 3-14](ch03.html#interactive_annotations_can_be_charts_th
    "Figure 3-14. Interactive annotations can be charts themselves in addition to
    text.")).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将鼠标悬停在图表区域时，他们可以看到每个时间段内股票价格区间的可视化表示（[图 3-14](ch03.html#interactive_annotations_can_be_charts_th
    "图 3-14. 交互式注释不仅可以是文本，还可以是图表。")）。
- en: '![Interactive annotations can be charts themselves in addition to text.](figs/web/03fig14.png.jpg)Figure 3-14. Interactive
    annotations can be charts themselves in addition to text.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![交互式注释不仅可以是文本，还可以是图表。](figs/web/03fig14.png.jpg)图 3-14. 交互式注释不仅可以是文本，还可以是图表。'
- en: Responding to Click Events
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应点击事件
- en: Throughout this chapter we’ve looked at how to include a lot of visual information
    in a small space, making it easier to integrate a visualization within a web page.
    The basic sparkline by itself is very efficient, and previous examples have added
    annotations and composites to increase the information density further. Sometimes,
    however, there’s just no way to fit all the possible data in a small enough space.
    Even in these cases, though, the interactive nature of the Web can help us out.
    Our web page can start with a compact visualization but expand to a different
    view—one with richer details—with a simple click or tap.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何在有限的空间内包含大量的视觉信息，使得将可视化集成到网页中变得更加容易。基本的 sparklines 本身非常高效，前面的示例中已经通过添加注释和复合图形进一步提高了信息密度。然而，有时候就是没有办法在足够小的空间内放下所有可能的数据。不过，即使在这些情况下，网页的互动特性仍然能够帮助我们。我们的网页可以从一个紧凑的可视化开始，但通过简单的点击或触摸，切换到一个不同的视图——一个包含更多细节的视图。
- en: Indeed, the compact quality of sparklines seems to invite interaction. In every
    usability test I’ve performed that included sparklines on a web page, the participants
    invariably clicked on the chart. That was true even when there were no other details
    that the page could provide and the participants had no idea what to expect in
    response to their clicks. They clicked just to see what would happen.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，sparklines 的紧凑性似乎非常适合交互。在我进行的每一个包含 sparklines 的网页可用性测试中，参与者总是点击了图表。即使页面没有提供任何其他细节，参与者也不知道点击后会有什么反应，他们还是点击了，只是想看看会发生什么。
- en: This example continues our stock market example. We’ll begin with the same basic
    stock price chart we’ve seen before, but enhance it to provide details when users
    click on the chart region.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例继续我们的股票市场示例。我们将从之前看到的基本股票价格图表开始，但对其进行增强，以便用户点击图表区域时能够显示更多细节。
- en: Just as in this chapter’s first example, we need to include the sparklines and
    jQuery libraries in our web page. Because we’re visualizing the same data as in
    the previous example, we’ll also want to set up the data array exactly as in that
    example. The HTML markup, however, can be much simpler. All we need is a `<div>`
    to hold the chart.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Step 1: Add the Chart'
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding the chart to our markup is easy with the sparklines library. We can use
    the jQuery `.map()` function to extract the adjusted close value from our `stock`
    array.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The static chart of [Figure 3-15](ch03.html#starting_with_a_static_chart_ensures_tha
    "Figure 3-15. Starting with a static chart ensures that the visualization is sound."),
    which shows the stock performance, probably looks familiar by now.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '![Starting with a static chart ensures that the visualization is sound.](figs/web/03fig15.png.jpg)Figure 3-15. Starting
    with a static chart ensures that the visualization is sound.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Handle Click Events'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sparklines library makes it easy for us to handle click events. When users
    click on a chart region, the library generates a custom `sparklineClick` event.
    The event data includes all of the normal click properties, plus information about
    where on the chart the user clicked. To be notified of clicks, we define a handler
    for that custom event.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now that we’re set up to receive `sparklineClick` events, we can write the code
    to respond to them. For our example, let’s reveal a detailed financial analysis
    widget. Many web services, including Yahoo and Google, have similar widgets, but
    we’ll use one from WolframAlpha. As is typical, WolframAlpha provides code for
    the widget as an HTML `<iframe>`. We can wrap that `<iframe>` in our own `<div>`
    and place it immediately after the chart. We set a `display` property of `none`
    so that the contents are initially hidden. (The following snippet omits the details
    of the `<iframe>` element for clarity.)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Now our event handling code can reveal the widget using the jQuery `show()`
    function.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: That works to reveal the details, but as [Figure 3-16](ch03.html#mouse_clicks_can_reveal_more_details_for
    "Figure 3-16. Mouse clicks can reveal more details for a chart.") shows, the resulting
    presentation isn’t as elegant as it could be since the details appear so abruptly.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![Mouse clicks can reveal more details for a chart.](figs/web/03fig16.png.jpg)Figure 3-16. Mouse
    clicks can reveal more details for a chart.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Improve the Transitions'
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of simply revealing the widget beneath the chart, it would be better
    to have the widget replace the chart. And if we’re going to do that, we’ll also
    want to give users a chance to restore the chart and hide the widget.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here, we include a `"widget-control" <div>` ➊ for controlling the widget’s visibility.
    The only content we need for this controller is a close symbol floated right.
    Just like the widget itself, the controller is initially hidden.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Now when the user clicks on the chart, we reveal the widget, reveal the controller,
    and hide the chart.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Next we intercept clicks on the close symbol in the widget controller. We first
    prevent default event handling; otherwise, the browser will jump disconcertingly
    to the top of the page. Then we hide the widget and its controller while revealing
    the chart again.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Finally, we need to give the user some indication that this interaction is possible.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: On the chart, we override the sparklines library’s default tool tip at ➊ to
    let users know that more details are available.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'And now for the widget controller:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here, we simply add a `title` attribute at ➊ to tell users how to hide the widget.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: These additions give us the simple sparkline chart in [Figure 3-17](ch03.html#mouse_clicks_can_reveal_more_det-id00013
    "Figure 3-17. Mouse clicks can reveal more details for a chart."), which expands
    to offer a wealth of details with a single click. The close symbol in the upper-right
    corner lets users return to the more compact sparkline.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![Mouse clicks can reveal more details for a chart.](figs/web/03fig17.png.jpg)Figure 3-17. Mouse
    clicks can reveal more details for a chart.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Animate'
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the final touch to our visualization, let’s do something about the abrupt
    hiding and revealing of the visualization components. A smoother animation will
    help our users follow the transition, and jQuery makes it easy enough to implement.
    There are lots of animation effects available in the jQuery UI library, but the
    basic functionality of jQuery’s core is fine for this example. We simply replace
    the `show()` and `hide()` functions with `slideDown()` and `slideUp()`, respectively.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: At this point we can call our visualization complete; the final product is shown
    in [Figure 3-18](ch03.html#animating_transitions_can_make_the_visua "Figure 3-18. Animating
    transitions can make the visualization less jarring to users."). The compact sparkline
    smoothly transitions to reveal detailed information when the user clicks, and
    those details transition back to the sparkline when the user closes them.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating transitions can make the visualization less jarring to users.](figs/web/03fig18.png.jpg)Figure 3-18. Animating
    transitions can make the visualization less jarring to users.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Updating Charts in Real Time
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we’ve seen in this chapter’s other examples, sparklines are great for integrating
    visualizations in a complete web page. They can be embedded in text content or
    used as table elements. Another application that suits sparklines well is an information
    dashboard. Effective dashboards summarize the health of the underlying system
    *at a glance*. When users don’t have the time to read through pages of texts or
    detailed graphics, the information density of sparklines makes them an ideal tool.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to high information density, most dashboards have another requirement:
    they must be up-to-date. For web-based dashboards, that means the contents should
    be continuously updated, even while users are viewing the page. There is no excuse
    for requiring users to refresh their browsers. Fortunately, the sparklines library
    makes it easy to accommodate this requirement as well.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Just as in this chapter’s first example, we need to include the sparklines and
    jQuery libraries in our web page. For this visualization we’ll show both a chart
    and the most recent value of the data. We define `<div>` elements for each and
    place both in a containing `<div>`. The following code includes some styles inline,
    but you could place them in an external style sheet. Here the styles are just
    meant to position the value immediately to the right of the chart rather than
    on a separate line.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Step 1: Retrieve the Data'
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a real dashboard example, the server would provide the data to display and
    updates to that data. As long as the frequency of the updates was modest (not
    faster than once every five seconds or so), we could simply poll the server for
    updates on a regular interval. It’s probably not a good idea, however, to use
    the JavaScript `setInterval()` function to control the polling interval. That
    may seem strange at first because `setInterval()` executes a function periodically,
    which would seem to meet the requirements exactly. The situation is not quite
    that simple, however. If the server or network encounters a problem, then requests
    triggered by `setInterval()` will continue unabated, stacking up in a queue. Then,
    when communication with the server is restored, all of the pending requests will
    immediately finish, and we’d have a flood of data to handle.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this problem, we can use the `setTimeout()` function instead. That
    function executes only once, so we’ll have to keep calling it explicitly. By doing
    that, though, we can make sure that we send a request to the server only after
    the current one finishes. This approach avoids stacking up a queue of requests.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Notice that the structure of the code defines the `getData()` function and immediately
    executes it. The closing pair of parentheses at ➋ triggers the immediate execution.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Within the `success` callback, we set up a recursive call to `getData()` at
    ➊ so the function executes again whenever the server responds with data.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Update the Visualization'
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever we receive updated information from the server, we can simply update
    the chart and value.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The code needs only a straightforward call to the sparklines library and a jQuery
    function to update the value. We’ve added that to the code here at ➊ and ➋.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 3-19](ch03.html#live_updating_chart_can_show_real-time_d "Figure 3-19. A
    live updating chart can show real-time data.") shows what a default chart looks
    like. Of course, you can specify both the chart and text styles as appropriate
    for your own dashboard.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '![A live updating chart can show real-time data.](figs/web/03fig19.png.jpg)Figure 3-19. A
    live updating chart can show real-time data.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![实时更新的图表可以显示实时数据。](figs/web/03fig19.png.jpg)图3-19. 实时更新的图表可以显示实时数据。'
- en: Summing Up
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we’ve considered various techniques for integrating visualizations
    within a web page. We’ve seen that sparklines are an excellent tool. Because they
    provide a lot of visual information in a small space, they leave room for other
    elements of the page, including text blocks, tables, and dashboards. We’ve considered
    several ways to increase the information density even further with annotations,
    composite charts, and click events. Finally, we looked at how to create charts
    that update in real time, accurately visualizing the up-to-the-minute status of
    an underlying system.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们考虑了将可视化集成到网页中的各种技术。我们看到火花图是一种非常优秀的工具。由于它们能够在小空间内提供大量的视觉信息，因此它们为页面的其他元素（包括文本块、表格和仪表板）留下了空间。我们还考虑了通过注释、复合图表和点击事件等方式进一步增加信息密度。最后，我们了解了如何创建实时更新的图表，准确地可视化底层系统的最新状态。
