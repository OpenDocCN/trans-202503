["```\n$ strace –e trace=network,read,write /path/to/app args\n```", "```\n   $ strace -e trace=network,read,write customapp\n   --snip--\n➊ socket(PF_INET, SOCK_STREAM, IPPROTO_TCP) = 3\n➋ connect(3, {sa_family=AF_INET, sin_port=htons(5555),\n                        sin_addr=inet_addr(\"192.168.10.1\")}, 16) = 0\n➌ write(3, \"Hello World!\\n\", 13)          = 13\n➍ read(3, \"Boo!\\n\", 2048)                 = 5\n```", "```\n   /* traceconnect.d - A simple DTrace script to monitor a connect system call */\n➊ struct sockaddr_in {\n       short            sin_family;\n       unsigned short   sin_port;\n       in_addr_t        sin_addr;\n       char             sin_zero[8];\n   };\n\n➋ syscall::connect:entry\n➌ /arg2 == sizeof(struct sockaddr_in)/\n   {\n    ➍ addr = (struct sockaddr_in*)copyin(arg1, arg2);\n    ➎ printf(\"process:'%s' %s:%d\", execname, inet_ntop(2, &addr->sin_addr),\n         ntohs(addr->sin_port));\n   }\n```", "```\nprocess:'Google Chrome'    173.194.78.125:5222\nprocess:'Google Chrome'    173.194.66.95:443\nprocess:'Google Chrome'    217.32.28.199:80\nprocess:'ntpd'             17.72.148.53:123\nprocess:'Mail'             173.194.67.109:993\n process:'syncdefaultsd'    17.167.137.30:443\nprocess:'AddressBookSour'  17.172.192.30:443\n```", "```\n   // PortFormatProxy.csx – Simple TCP port-forwarding proxy\n   // Expose methods like WriteLine and WritePackets\n   using static System.Console;\n   using static CANAPE.Cli.ConsoleUtils;\n\n   // Create proxy template\n   var template = new ➊FixedProxyTemplate();\n   template.LocalPort = ➋LOCALPORT;\n   template.Host = ➌\"REMOTEHOST\";\n   template.Port = ➍REMOTEPORT;\n\n   // Create proxy instance and start\n➎ var service = template.Create();\n   service.Start();\n\n   WriteLine(\"Created {0}\", service);\n   WriteLine(\"Press Enter to exit...\");\n   ReadLine();\n➏ service.Stop();\n\n   // Dump packets\n   var packets = service.Packets;\n   WriteLine(\"Captured {0} packets:\",\n       packets.Count);\n➐ { WritePackets(packets);\n```", "```\n# Standard Localhost addresses\n127.0.0.1       localhost\n::1             localhost\n\n# Following are dummy entries to redirect traffic through the proxy\n127.0.0.1       www.badgers.com\n127.0.0.1       www.domain.com\n```", "```\n   // SocksProxy.csx – Simple SOCKS proxy\n   // Expose methods like WriteLine and WritePackets\n   using static System.Console;\n   using static CANAPE.Cli.ConsoleUtils;\n\n   // Create the SOCKS proxy template\n➊ var template = new SocksProxyTemplate();\n   template.LocalPort = ➋LOCALPORT;\n\n   // Create proxy instance and start\n   var service = template.Create();\n   service.Start();\n WriteLine(\"Created {0}\", service);\n   WriteLine(\"Press Enter to exit...\");\n   ReadLine();\n   service.Stop();\n\n   // Dump packets\n   var packets = service.Packets;\n   WriteLine(\"Captured {0} packets:\",\n       packets.Count);\n   WritePackets(packets);\n```", "```\n// SocketClient.java – A simple Java TCP socket client\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\npublic class SocketClient {\n    public static void main(String[] args) {\n        try {\n            Socket s = new Socket(\"192.168.10.1\", 5555);\n            PrintWriter out = new PrintWriter(s.getOutputStream(), true);\n            out.println(\"Hello World!\");\n            s.close();\n        } catch(Exception e) {\n        }\n    }\n}\n```", "```\njava –DsocksProxyHost=localhost –DsocksProxyPort=1080 SocketClient\n```", "```\n➊GET ➋/image.jpg HTTP/1.1\n```", "```\nGET http://www.domain.com/image.jpg HTTP/1.1\n```", "```\nCONNECT www.domain.com:443 HTTP/1.1\n```", "```\nHTTP/1.1 200 Connection Established\n```", "```\n   // HttpProxy.csx – Simple HTTP proxy\n   // Expose methods like WriteLine and WritePackets\n   using static System.Console;\n   using static CANAPE.Cli.ConsoleUtils;\n\n   // Create proxy template\n➊ var template = new HttpProxyTemplate();\n   template.LocalPort = ➋LOCALPORT;\n\n   // Create proxy instance and start\n   var service = template.Create();\n   service.Start();\n\n   WriteLine(\"Created {0}\", service);\n   WriteLine(\"Press Enter to exit...\");\n   ReadLine();\n   service.Stop();\n\n   // Dump packets\n   var packets = service.Packets;\n   WriteLine(\"Captured {0} packets:\", packets.Count);\n   WritePackets(packets);\n```", "```\n GET /image.jpg HTTP/1.1\nUser-Agent: Super Funky HTTP Client v1.0\nHost: ➊www.domain.com\nAccept: */*\n```", "```\n// ReverseHttpProxy.csx – Simple reverse HTTP proxy\n// Expose methods like WriteLine and WritePackets\nusing static System.Console;\nusing static CANAPE.Cli.ConsoleUtils;\n\n// Create proxy template\nvar template = new HttpReverseProxyTemplate();\ntemplate.LocalPort = ➊LOCALPORT;\n\n// Create proxy instance and start\nvar service = template.Create();\nservice.Start();\n\nWriteLine(\"Created {0}\", service);\nWriteLine(\"Press Enter to exit...\");\nReadLine();\nservice.Stop();\n\n// Dump packets\nvar packets = service.Packets;\nWriteLine(\"Captured {0} packets:\",\n    packets.Count);\nWritePackets(packets);\n```", "```\n// DnsServer.csx – Simple DNS Server\n// Expose console methods like WriteLine at global level.\nusing static System.Console;\n\n// Create the DNS server template\nvar template = new DnsServerTemplate();\n\n// Setup the response addresses\ntemplate.ResponseAddress = ➊\"IPV4ADDRESS\";\ntemplate.ResponseAddress6 = ➋\"IPV6ADDRESS\";\ntemplate.ReverseDns = ➌\"REVERSEDNS\";\n\n// Create DNS server instance and start\nvar service = template.Create();\nservice.Start();\nWriteLine(\"Created {0}\", service);\nWriteLine(\"Press Enter to exit...\");\nReadLine();\nservice.Stop();\n```"]