- en: '**7**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ENVIRONMENTAL MONITORING**'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f0001-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Zombies are pretty frightening, but they’re not the only threat in a postapocalyptic
    world. More mundane risks like fire are especially serious if you can’t safely
    leave your compound (see [Figure 7-1](ch07.html#ch07fig1)). In this chapter, I’ll
    show you how to build a fire alarm and a temperature alarm that alert you to environmental
    hazards—without alerting the zombies.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-1: No smoking!'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 11: QUIET FIRE ALARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Normally, you want a fire alarm to be as close to you as possible and as noisy
    as possible. But there’s one problem with loud alarms: zombies can hear. The last
    thing you want when escaping a burning building is to attract unwanted attention
    from passing zombies!'
  prefs: []
  type: TYPE_NORMAL
- en: 'This project modifies a regular battery-operated smoke detector so that it
    registers an alarm on the Arduino display and sounds a much quieter buzzer, using
    the basic setup from “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)” on
    [page 53](ch03.html#page_53). [Figure 7-2](ch07.html#ch07fig2) shows the smoke
    detector connected directly to the screwshield.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-2: Testing the finished fire alarm. In your base, the detector will
    be connected to the Arduino by a long lead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To make this project, you’ll need the Arduino and screwshield that you used
    in “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)” on [page 53](ch03.html#page_53)
    as well as the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Smoke detector | Battery operated | Hardware
    store, Supermarket |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Cable | Double core and long enough to reach
    from the smoke detector to the Arduino | Scavenged speaker or bell cable is good
    for this. |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) D1 | 1N4001 diode | Adafruit (755) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) R1 | 1 kΩ resistor | Mouser (293-1k-RC) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) LED1 | Blue or white LED | Adafruit (301) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) C1 | 100 µF capacitor | Adafruit (753) |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Solid-core wire | 2 inches (5 cm) long | Abandoned
    electronics, Adafruit (1311) |'
  prefs: []
  type: TYPE_TB
- en: Be sure to use the LED colors I recommend, as I don’t suggest blue or white
    LEDs just because they look cool. For this project’s circuit to work, the LED
    needs to have a forward voltage of more than about 2V. Red and green LEDs often
    have a forward voltage of about 1.7V, but blue and white LEDs have a much higher
    forward voltage of around 3V, which is perfect.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To adapt the smoke detector to communicate silently with the Arduino, you’ll
    disconnect the detector’s buzzer from its circuit board and then change the signal
    that would go to the buzzer into a signal the Arduino can use. You’ll condition
    the buzzer signal by sending it through the circuit ([Figure 7-3](ch07.html#ch07fig3)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-3: Schematic for the fire alarm'
  prefs: []
  type: TYPE_NORMAL
- en: A typical smoke alarm is really loud because its buzzer is driven with the highest
    possible voltage the circuit can wring out of a little 9V battery. This means
    that for most alarms, the signal on the buzzer looks something like the chart
    on the left of [Figure 7-4](ch07.html#ch07fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-4: Taming the buzzer signal for Arduino is much easier than taming
    a zombie!'
  prefs: []
  type: TYPE_NORMAL
- en: The buzzer is driven by an alternating current (AC) square wave, with a voltage
    that swings from +9V to –9V at roughly 600 times per second. This causes a piezo
    element to alternately expand and contract, generating the buzzing sound. But
    this voltage swing is too wild for the Arduino, which can be damaged by inputs
    greater than 5V or less than 0V.
  prefs: []
  type: TYPE_NORMAL
- en: The circuit to convert the buzzer signal begins with the diode D1, which completely
    prevents the negative voltages from reaching the rest of the circuit (diodes only
    allow current to flow in one direction). The resistor limits the current flowing
    to the LED, which limits the voltage across the LED to about 3V. The capacitor
    gets rid of any voltage spikes and smoothes out the signal to something like the
    chart on the right in [Figure 7-4](ch07.html#ch07fig4).
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: DISCONNECT THE BUZZER**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: First, disassemble the smoke detector. When you remove the lid, you should see
    a PCB and some wires ([Figure 7-5](ch07.html#ch07fig5)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-5: Inside the smoke detector'
  prefs: []
  type: TYPE_NORMAL
- en: In this smoke detector, the three leads going from the circuit board to the
    lid are the buzzer leads. Chop off the leads to the buzzer now, but don’t cut
    too close to the buzzer itself. Resources are scarce during an apocalypse, and
    you might want to repurpose that buzzer later.
  prefs: []
  type: TYPE_NORMAL
- en: '**DANGER: RADIATION!**'
  prefs: []
  type: TYPE_NORMAL
- en: As you start this project, keep two warnings in mind. First, if you take apart
    your smoke detector before the zombie outbreak, do not use it as a smoke detector
    again. Smoke detectors save thousands of lives a year, so don’t rely on one you’ve
    messed with; just buy a new one.
  prefs: []
  type: TYPE_NORMAL
- en: Second, although removing the smoke detector’s plastic case is safe, if your
    smoke detector has a round metal box inside (see [Figure 7-5](ch07.html#ch07fig5)),
    do not open that box, as it contains a radiation source that ionizes air in a
    small chamber. Smoke particles will absorb the ions, and the resulting reduction
    in current through the ionized air triggers the alarm. This type of smoke detector
    is gradually being replaced by designs that detect smoke optically instead, so
    hopefully, yours won’t have that box at all.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the buzzer from your smoke detector to build “[Project 16: Arduino
    Movement and Sound Distractor](ch09.html#ch00lev1sec167)” on [page 169](ch09.html#page_169).
    If you’ve ever been close to one of these smoke alarms when they sound, you’ll
    know just how distracting they are!'
  prefs: []
  type: TYPE_NORMAL
- en: Your buzzer may have two leads or three leads. If it has three, follow Step
    2 to determine which lead is which. If it has just two, these are the leads that
    you will connect to, and you can skip Step 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: IDENTIFY THE LEADS**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: If your buzzer has three connections, then your smoke alarm uses a type of piezo
    buzzer called a *self-drive piezo*. The third connection is called the *feedback*
    connection and is used to make the piezo sound as loud as possible.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, you just want the two drive connections on the smoke detector.
    Sometimes the wires are color coded; if so, the drive connections will probably
    be red and black, and the feedback connection might be white (see [Figure 7-6](ch07.html#ch07fig6))
    or some other color. But if you have a multimeter, then you can just check which
    wires are the drive wires and avoid guesswork. [Figure 7-6](ch07.html#ch07fig6)
    shows this process in action.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-6: Identifying the smoke alarm buzzer wires'
  prefs: []
  type: TYPE_NORMAL
- en: Strip the ends of all three wires and set your multimeter to its 200V AC range
    if it’s available on your meter, or at least the 10V AC range. (Yes, I mean AC,
    not the usual DC.) Connect the multimeter leads to any two of the three wires
    and measure the voltage as you hold down the contacts of the smoke alarm’s “test”
    switch. If the meter indicates about 9V, or anything above 4V or 5V, then these
    are the wires you are looking for; otherwise, try different pairs until you find
    the correct wires. Note that the project relies on the battery or batteries still
    being present in the smoke alarm.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 3: SOLDER COMPONENTS TO THE SCREWSHIELD**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This circuit has too many components to attach all of them to the screw terminals,
    so use the prototyping area on the screwshield to solder the components into place.
    [Figure 7-7](ch07.html#ch07fig7) shows the wiring diagram for the screwshield;
    the letters marked will be used later to describe just how to solder this together.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of clarity, [Figure 7-7](ch07.html#ch07fig7) doesn’t include components
    from earlier Arduino-based projects that might be hanging off the screwshield.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-7: Wiring diagram for the screwshield'
  prefs: []
  type: TYPE_NORMAL
- en: Holding your screwshield so that it looks like [Figure 7-7](ch07.html#ch07fig7),
    push the component legs through from the top of the board. Note that the diode
    (labeled D1) and LED are *polarized*, meaning they only work when oriented a certain
    way. Point the diode’s stripe toward the top of the board. Then place the LED’s
    longer lead (the positive lead) toward the bottom of the board ([Figure 7-7](ch07.html#ch07fig7)).
  prefs: []
  type: TYPE_NORMAL
- en: When you’ve pushed all the component leads through, flip the board over and
    solder the leads where they emerge from the hole. (If you are new to soldering,
    take a look at [Appendix B](app02.html#app02), especially “[Soldering a PCB](app02.html#ch00lev1sec229)”
    on [page 234](app02.html#page_234).) It may help to bend the leads slightly so
    that the components don’t fall out when the board is upside down. When all the
    components are soldered, the underside of the board should look like [Figure 7-8](ch07.html#ch07fig8).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-8: Fixing the components in place'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the components are fixed, bend the leads and arrange them to make the
    connections, using [Figure 7-9](ch07.html#ch07fig9) and the steps below as a guide.
    (The connections described below are indicated in [Figures 7-7](ch07.html#ch07fig7),
    [7-9](ch07.html#ch07fig9), and [7-10](ch07.html#ch07fig10) with letters.)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Bend the top (negative) lead of the LED over so that it lies next to the
    top lead of C1 and the GND power line on the screwshield (A). Solder the LED lead
    where it crosses C1 and then where it meets the GND line. Cut off the excess LED
    lead and the remainder of the top lead of C2.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Bend the other LED lead over to run next to the top lead of R1 and the bottom
    lead of C1 (B). Solder the bottom LED lead at the junctions where it crosses R1
    and C1 and cut off the remainders of both the C1 lead and the R1 lead you just
    soldered to. If there is any remaining LED lead after connecting to R1 and C1,
    cut that off too.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Cut a length of solid-core wire that is long enough to reach all the way
    from the end of the positive LED that you soldered in Step 2 as far as D3 on the
    top Arduino connector (C). Strip the ends of the wire (see “[Stripping Wires](app02.html#ch00lev1sec225)”
    on [page 227](app02.html#page_227)). Flip over to the top side of the board and
    push one stripped end of the wire into a hole next to where the positive LED lead
    connects to C1 and solder the wire to that junction. Solder the other end of the
    wire to the solder pad next to Arduino pin 3\. Push the stripped end through the
    hole from the top and solder on the underside.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-9: The underside of the screwshield, after soldering. The dashed lines
    indicate wires running on the top of the shield.'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Bend the bottom lead of R1 over so that it crosses the top lead of D1 (D).
    Solder these leads together and cut off the excess wire.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Use another short length of solid-core wire (or if they are long enough,
    one of the leads you trimmed off R1) to connect the solder pad labeled X to the
    bottom GND power line on the screwshield (E).
  prefs: []
  type: TYPE_NORMAL
- en: When this is done, the underside of the board should look like [Figure 7-9](ch07.html#ch07fig9).
    The dotted lines represent the wires on the other side of the board.
  prefs: []
  type: TYPE_NORMAL
- en: Next, flip the board over and add a wire to link pin D3 (just marked 3 on the
    screwshield) of the Arduino to the junction of the capacitor, diode, and resistor.
    Solder that wire in place. When this is done, the top of the screwshield should
    look like [Figure 7-10](ch07.html#ch07fig10).
  prefs: []
  type: TYPE_NORMAL
- en: Now that the board is complete, reassemble the electronics by fitting the display
    shield back on top of the screw shield and the screw shield onto the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-10: The finished screwshield'
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 4: CONNECT THE SMOKE DETECTOR TO THE ARDUINO**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Finally, strip the buzzer wires if you haven’t done so already, and solder longer
    leads to them. To make the soldered connections stronger, you could use heatshrink
    as described in “[Using Heatshrink](app02.html#ch00lev1sec230)” on [page 235](app02.html#page_235).
    Connect the smoke detector to pins W and X on the screwshield. The wire connecting
    the smoke detector to the Arduino can be any double-core cable, such as bell wire,
    but if you plan to use this alarm in your base, just use wires long enough to
    reach the mounting position. I found that the project worked just fine with 30
    feet (10 m) of telephone extension cable.
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you want to make this project without any of the other Arduino-based projects
    in this book, then load the sketch *Project_11_Smoke_Alarm* from this book’s source
    files onto the Arduino now. If on the other hand, you’ve built one or more of
    this book’s earlier Arduino projects, then use the sketch *All_Sensors* and change
    the constants at the top to select the projects that you’ve made. See the comments
    section in that sketch for instructions on the correct changes to make.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find a link to the source code for this book at [http://nostarch.com/zombies/](http://nostarch.com/zombies/).
    See [Appendix C](app03.html#app03) in this book for instructions on loading the
    programs.
  prefs: []
  type: TYPE_NORMAL
- en: This code builds on the code from Project 4, so for more information on how
    the program as a whole works, please refer to “[Software](ch11.html#ch00lev1sec215)”
    on [page 57](ch03.html#page_57). Here I will just describe the code specific to
    the fire alarm.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define a new constant for pin D3 on the Arduino:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This pin will act as an input for the signal from the smoke detector. After
    adding the `smokePin` constant, we add a new line of code to the `setup` function
    to initialize this pin as an input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we add a call to a new function called `checkSmoke` to the `loop` function.
    The `checkSmoke` function is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `checkSmoke` function contains the rest of the code for checking for a
    signal from the smoke detector and displaying the message and/or turning on the
    buzzer. To change the display and control the buzzer, call the `alarm` function,
    which you first met in “[Project 6: PIR Zombie Detector](ch04.html#ch00lev1sec81)”
    on [page 72](ch04.html#page_72):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Unless you press a button to mute (a holdover from Project 4), this function
    prints your message (`"FIRE!!"`) to the LCD in lieu of that loud, zombie-attracting
    buzzer.
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE FIRE ALARM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Testing the smoke detector is simple: just hold down the contacts of the test
    button with a screwdriver (see [Figure 7-6](ch07.html#ch07fig6)). This will cause
    the buzzer to sound and a message to appear on the LCD screen.'
  prefs: []
  type: TYPE_NORMAL
- en: When you know the alarm works, place the sensor somewhere close enough to a
    potential fire that you’ll receive enough advance warning to put out the flames,
    or at least flee in an orderly manner. Creating a quiet smoke alarm won’t be worth
    much if you exit in a noisy panic and attract all the zombies on the block!
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT 12: TEMPERATURE ALARM**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since your compound is zombie-proofed, you (hopefully) won’t have to change
    lodgings often, and over time, you’re sure to acquire some valuable climate-sensitive
    items. Depending on what you have cached away, you might want to make sure that
    a generator isn’t getting too hot or that your wine cellar isn’t too cold. To
    protect these assets that ensure your survival and are good to trade with other
    survivors, you need a temperature alarm that can notify you of extremes of heat
    or cold.
  prefs: []
  type: TYPE_NORMAL
- en: This is the final project that uses your now heavily laden Arduino, and [Figure
    7-11](ch07.html#ch07fig11) shows the LCD screen reporting a high temperature in
    Celsius.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-11: A fully laden Arduino, complete with temperature sensor (circled),
    movement detector, smoke alarm, and battery monitor'
  prefs: []
  type: TYPE_NORMAL
- en: A three-pin temperature sensor is on the left of [Figure 7-11](ch07.html#ch07fig11),
    over the remains of the smoke alarm from Project 11\. That sensor will send the
    Arduino temperature data, which the Arduino will then display as human-readable
    text.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT YOU WILL NEED**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To make this project, you’ll need the Arduino and screwshield that you used
    in “[Project 4: Battery Monitor](ch03.html#ch00lev1sec63)” on [page 53](ch03.html#page_53)
    and the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ITEMS** | **NOTES** | **SOURCE** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) TMP36 | Temperature sensor | Adafruit (165)
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Three-core wire | To connect the sensor chip
    to the Arduino screwshield | Scavenged telephone cable or other three-core wire.
    |'
  prefs: []
  type: TYPE_TB
- en: '| ![image](graphics/square.jpg) Heatshrink | 3 lengths of about an inch (25
    mm) | Auto parts store |'
  prefs: []
  type: TYPE_TB
- en: You could use electrical tape instead of heatshrink for this project, but I
    recommend heatshrink because it’s a lot tougher and not prone to unraveling.
  prefs: []
  type: TYPE_NORMAL
- en: '**CONSTRUCTION**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Figure 7-12](ch07.html#ch07fig12) shows the wiring diagram for the project.
    The LCD should be attached from an earlier project, so the only new part you’ll
    add is the TMP36 temperature sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-12: The wiring diagram for the temperature alarm'
  prefs: []
  type: TYPE_NORMAL
- en: '**TMP36 TEMPERATURE SENSOR**'
  prefs: []
  type: TYPE_NORMAL
- en: The TMP36 is a handy little temperature sensor chip. It has three pins, and
    in this project, they’re connected to 5V, GND, and A2 on the Arduino. [Figure
    7-13](ch07.html#ch07fig13) shows the pinout of this chip. These chips are only
    accurate to about 2 degrees Celsius. If you want greater accuracy, then you could
    consider changing this project’s design and software to use a digital temperature
    sensor like the DS18B20.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-13: The TMP36 pinout'
  prefs: []
  type: TYPE_NORMAL
- en: 'The positive supply voltage to pin V+ on the TMP36 can be anything between
    2.7V and 5.5V. On its middle pin, the chip produces an analog output voltage proportional
    to the temperature. The temperature of the chip (in degrees Celsius) can be calculated
    from the voltage at the Out pin by this formula:'
  prefs: []
  type: TYPE_NORMAL
- en: Temperature = 100 × volts - 50
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if the voltage were 0.6V, the temperature would be 100 × 0.6 - 50 = 10
    degrees Celsius. If you prefer your temperatures in degrees Fahrenheit, then just
    make one further calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: ^°F = ^°C × 9/5 + 32
  prefs: []
  type: TYPE_NORMAL
- en: The TMP36 can measure temperatures in the range -40 to +125 degrees Celsius,
    but the measured temperature is accurate only to within 2 degrees Celsius of the
    actual temperature.
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 1: MAKE A LONGER LEAD FOR THE TMP36**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To extend the lead of the TMP36, you could just solder a three-core wire to
    it. However, to make it a bit more durable, you can use heatshrink tubing on top
    of the soldered connections. [Figure 7-14](ch07.html#ch07fig14) shows the process.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](graphics/f07-14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-14: Using heatshrink on the TMP36 lead'
  prefs: []
  type: TYPE_NORMAL
- en: First, strip the wires of each lead and slip the cut lengths of heatshrink over
    the individual wires ([Figure 7-14](ch07.html#ch07fig14)a). Next solder the wires
    to the leads of the TMP36 ([Figure 7-14](ch07.html#ch07fig14)b). Slide the heatshrink
    up over the solder joint ([Figure 7-14](ch07.html#ch07fig14)c) and finally apply
    a hair dryer or hot air gun to the heatshrink until it, well, shrinks ([Figure
    7-14](ch07.html#ch07fig14)d). If you have wide diameter heatshrink, then you could
    place this around the whole sensor and individual leads to make this build more
    durable.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on using heatshrink, see the “[Using Heatshrink](app02.html#ch00lev1sec230)”
    on [page 235](app02.html#page_235).
  prefs: []
  type: TYPE_NORMAL
- en: '**STEP 2: ATTACH THE TEMPERATURE SENSOR LEAD TO THE SCREWSHIELD**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Attach the wires from the temperature sensor to the screwshield ([Figure 7-11](ch07.html#ch07fig11)).
    You don’t have to use the GND connection shown; any of the GND terminals on the
    screwshield will do.
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you want to make this project on its own, without any of the earlier Arduino-based
    projects, then open the sketch *Project_12_Temperature* from this book’s source
    files and load it on to your Arduino now. If, on the other hand, you built one
    or more of the earlier Arduino projects, then use the sketch *All_Sensors* and
    change the constants at the top to select the projects that you have made. See
    the comments section in this sketch for instructions on this.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: All the source code for this book is available from [http://www.nostarch.com/zombies/](http://www.nostarch.com/zombies/).
    See “[Installing the Antizombie Sketches](app03.html#ch00lev1sec241)” on [page
    248](app03.html#page_248) for instructions on installing the programs.
  prefs: []
  type: TYPE_NORMAL
- en: This code follows the same pattern as Project 4, so for more information on
    how the program as a whole works, please refer to “[Software](ch11.html#ch00lev1sec215)”
    on [page 57](ch03.html#page_57). Here, I’ll just describe the code specific to
    this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, a new constant is defined for the Arduino pin that will act as an analog
    input for the TMP36:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Two more constants are defined to set the maximum and minimum temperatures allowed
    before an alarm is triggered. These are `floats` rather than `ints` because they
    represent decimal numbers rather than whole numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As the comments above the constants state, these temperature values can be in
    either Celsius or Fahrenheit. The units that the temperature is measured in are
    decided by a new function you’ll define.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main `loop` function now includes a call to `checkTemp`, too. This function
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `checkTemp` function first calls `readTemp` to measure the temperature and
    then compares that with the maximum and minimum temperatures. If the temperature
    is too high or too low, then the `alarm` function is called. Note that this version
    of the `alarm` function has an additional parameter that is used to display the
    temperature on the LCD screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `readTemp` function is where the raw analog input reading from the TMP36
    is converted into a temperature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The raw value returned by `analogRead` is a number between 0 and 1023, where
    0 indicates 0V at the analog input pin and 1023 indicates 5V. This voltage is
    calculated by dividing the raw value by 205 (205 is roughly 1023/5).
  prefs: []
  type: TYPE_NORMAL
- en: The temperature in degrees Celsius is then calculated using the formula described
    in “TMP36 Temperature Sensor” on [page 133](ch07.html#page_133), as the voltage
    multiplied by 100 with 50 subtracted from the result. The temperature in degrees
    Fahrenheit is also calculated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, one of these two values has to be returned. In this version of `readTemp`,
    the line to return `tempF` is commented out, so the temperature in Celsius will
    be returned. If you want to flip this, then comment out the line `return tempC`
    and un-comment return `tempF` so that the last three lines of the function look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To test the sensor, try changing the value of the `maxTemp` constant to just
    above the room’s temperature, load the updated sketch onto the Arduino, and then
    squeeze the temperature sensor between your fingers to warm it up. Watch the LCD,
    and the readout should change.
  prefs: []
  type: TYPE_NORMAL
- en: '**USING THE TEMPERATURE ALARM**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There’s a limit to how much distance you can put between your temperature sensor
    and your Arduino. You could make the lead you attach to the TMP36 as long as 20
    feet (7 m), but the sensor will become less and less accurate as the lead gets
    longer due to electrical noise on the line and the resistance of the wire.
  prefs: []
  type: TYPE_NORMAL
- en: Leave the sensor near the item you want to stay at a certain temperature and
    watch the LCD. If that wine cellar just won’t stay cool enough, try setting up
    the sensor in different rooms in your base until you find one with the right climate.
    If there isn’t a good room for the wine, just put the sensor back on your generator,
    invite the other survivors in your area over for a drink, and have an antizombie
    strategy meeting.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a bunch of sensors to warn you of dangers in your base, in
    the next chapter, you’ll combine the Arduino projects with a Raspberry Pi to make
    a control center.
  prefs: []
  type: TYPE_NORMAL
