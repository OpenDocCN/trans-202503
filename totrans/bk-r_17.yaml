- en: '**14**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**14**'
- en: '**BASIC DATA VISUALIZATION**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**基础数据可视化**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: Data visualization is an important part of a statistical analysis. The visualization
    tools appropriate for a given data set are dependent upon the types of variables
    (as per the definitions in [Sections 13.1.1](ch13.xhtml#ch13lev2sec112) and [13.1.2](ch13.xhtml#ch13lev2sec113))
    for which you’ve made observations. In this chapter, you’ll look at the most commonly
    used data plots in statistical analyses and see examples using both base R graphics
    and `ggplot2` functionality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是统计分析中的一个重要部分。适合给定数据集的可视化工具取决于你所观察的变量类型（根据[第13.1.1节](ch13.xhtml#ch13lev2sec112)和[13.1.2节](ch13.xhtml#ch13lev2sec113)的定义）。在本章中，你将了解在统计分析中最常用的数据图，并通过基础R图形和`ggplot2`功能的示例来展示。
- en: '**14.1 Barplots and Pie Charts**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**14.1 条形图和饼图**'
- en: Barplots and pie charts are commonly used to visualize qualitative data by category
    frequency. In this section you’ll learn how to generate both using R.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 条形图和饼图常用于通过类别频率可视化定性数据。在这一节中，你将学习如何使用R生成这两种图表。
- en: '***14.1.1 Building a Barplot***'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***14.1.1 构建条形图***'
- en: A *barplot* draws either vertical or horizontal bars, typically separated by
    white space, to visualize frequencies according to the relevant categories. Though
    the raw frequencies themselves are usually displayed, a barplot can also be used
    to visualize other quantities, such as means or proportions, which directly depend
    upon these frequencies.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*条形图*绘制的是垂直或水平条形，通常通过空白区域分开，用于根据相关类别可视化频率。尽管原始频率通常会显示出来，条形图也可以用来可视化其他量，例如均值或比例，这些量直接依赖于这些频率。'
- en: As an example, let’s use the `mtcars` data set from [Exercise 13.4](ch13.xhtml#ch13exc4)
    (b) on [page 287](ch13.xhtml#page_287). Detailing various characteristics of 32
    classic performance cars in the mid-1970s, the first five records can be viewed
    directly from the prompt.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，让我们使用来自[练习13.4](ch13.xhtml#ch13exc4)（b）的`mtcars`数据集（位于[第287页](ch13.xhtml#page_287)）。该数据集详细描述了1970年代中期32款经典性能车的各种特征，可以直接从命令行查看前五条记录。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The documentation in `?mtcars` explains the variables that have been recorded.
    Of these, `cyl` provides the number of cylinders in each engine—four, six, or
    eight. To find out how many cars were observed with each number of cylinders,
    you can use `table`, as shown here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`?mtcars`中的文档解释了已记录的变量。其中，`cyl`提供了每个发动机的气缸数——四缸、六缸或八缸。要找出观察到的每种气缸数量的汽车数量，可以使用`table`，如下面所示：'
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The result is easily displayed as a barplot, as shown here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以轻松地显示为条形图，如下所示：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can find the resulting barplot on the left of [Figure 14-1](ch14.xhtml#ch14fig1).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图14-1](ch14.xhtml#ch14fig1)的左侧找到生成的条形图。
- en: '![image](../images/f14-01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f14-01.jpg)'
- en: '*Figure 14-1: Two examples of barplots of data from* `mtcars` *using base R
    graphics. Left: The simplest, default version, using one categorical variable.
    Right: A “dodged” barplot illustrating various visual options and using two categorical
    variables.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-1：使用基础R图形从`mtcars`数据绘制的两个条形图示例。左侧：最简单的默认版本，使用一个分类变量。右侧：一个“并排”的条形图，展示了各种可视化选项，并使用了两个分类变量。*'
- en: 'This plot displays the number of four-, six-, and eight-cylinder cars in the
    data set but is admittedly rather uninteresting, and without annotations it’s
    not clear what’s being summarized. Fortunately, it’s easy to annotate such plots
    and further split up the frequencies of each bar according to an additional categorical
    variable. Consider the following code where, this time, you’re finding the counts
    associated with `cyl` by transmission (`am`):'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该图展示了数据集中四缸、六缸和八缸车的数量，但老实说，这个图表相当无趣，而且没有注释，无法清晰说明总结了什么内容。幸运的是，给这种图表添加注释是很容易的，而且还可以根据一个额外的分类变量进一步分割每个条形的频率。请看以下代码，这次你将根据变速器类型（`am`）来找出与`cyl`相关的计数：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you aim to produce a barplot that’s *stacked* (where bars are split up vertically)
    or *dodged* (where bars are broken up and placed beside each other), `barplot`
    requests its first argument as a suitably arranged matrix. You could construct
    it from the previous two vectors using `matrix`, but it’s easier to just continue
    using `table`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想生成一个*堆叠的*条形图（即条形垂直分割）或*并排的*条形图（即条形被分开并并排显示），`barplot`的第一个参数需要传入一个合适排列的矩阵。你可以使用`matrix`从之前的两个向量构建它，但继续使用`table`会更简单。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As you can see, you can cross-tabulate counts by supplying two categorical
    or discrete vectors of equal length to `table`; the first vector stipulates row
    counts, and the second defines the columns. The outcome is a matrix object; here
    it’s a 2 × 3 structure providing the quantities of the four-, six-, and eight-cylinder
    automatic cars in the first row and the quantities of the manual cars in the second.
    The rule is that each column of the barplot will correspond to a column of the
    supplied matrix; these will be further split with respect to each row of the supplied
    matrix. The plot on the right of [Figure 14-1](ch14.xhtml#ch14fig1) is the result
    of the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The help file `?barplot` explains the options here in detail. To label the bars
    according to the categories of the column variable of the matrix that was initially
    passed to `barplot`, you use a character vector of the appropriate length passed
    to `names.arg`. The options `beside=TRUE` and `horiz=TRUE` select a dodged, horizontal
    barplot. If both options were `FALSE`, a stacked, vertical barplot would be selected.
    The argument `las=1` forces the labels on the vertical axis to appear horizontally,
    rather than parallel to it. The final two arguments, `legend.text` and `args.legend`,
    are used for the legend—you could have drawn a legend separately as in [Section
    7.3](ch07.xhtml#ch07lev1sec25) via `legend`, but this way automates the color
    assignment to ensure the reference keys match the precise shading of the bars
    themselves.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar plots may be produced using `ggplot2`. If you load the installed package
    with `library("ggplot2")` and enter the following, it will produce the most basic
    barplot, given on the left of [Figure 14-2](ch14.xhtml#ch14fig2):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note here that the relevant geom is `"bar"` (or `geom_bar` if used separately,
    as you’ll see in a moment) and that the default mapping variable in `qplot` must
    be supplied as a factor (in `mtcars` the vector `mtcars$cyl` is just numeric,
    which is fine for `barplot`, but `ggplot2` functionality is a bit more strict).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-02.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-2: Two examples of barplots of data from* `mtcars` *using* `ggplot2`
    *functionality. Left: The most simple* `qplot` *version, using one categorical
    variable. Right: A “dodged” barplot, the same as in [Figure 14-1](ch14.xhtml#ch14fig1),
    based on the supply of various additional geoms and scaling options.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, you can create far more complicated images depending upon what you want
    to display. To produce a `ggplot2` version of the dodged barplot from 14-1, call
    the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can find the result on the right in [Figure 14-2](ch14.xhtml#ch14fig2).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Note a number of new additions to the basic `qplot` setup. The default mapping,
    by `cyl`, remains the same as earlier. You further specify that the bars should
    be filled according to a factor created by using the transmission variable `am`;
    so, each `cyl` bar is instructed to split according to that variable. The initial
    call to `qplot` was “empty,” in the sense that `geom="blank"`, and therefore drawing
    begins with the addition of `geom_bar` to the `ggplot2` object. It becomes a dodged
    barplot through `position="dodge"`; as in base R graphics, the default behavior
    is to generate a stacked plot. The `scale_x_discrete` modifier specifies labels
    for each category of the default `cyl` mapping; the `scale_y_continuous` modifier
    is employed to control the axis labels for the frequencies.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，基本的`qplot`设置中增加了许多新的内容。默认映射仍然是按`cyl`，和之前一样。你进一步指定，条形图的填充应根据使用变速器变量`am`创建的因子来填充；因此，每个`cyl`的条形图被指示根据该变量进行拆分。最初对`qplot`的调用是“空”的，意思是`geom="blank"`，因此绘图从向`ggplot2`对象添加`geom_bar`开始。通过`position="dodge"`，它变成了一个偏移条形图；与基本的R图形类似，默认行为是生成堆积图。`scale_x_discrete`修饰符指定了每个类别的标签，默认映射为`cyl`；`scale_y_continuous`修饰符则用于控制频率的轴标签。
- en: Further, adding `theme_bw()` to the object changes the visual theme of the image;
    in the current example, I’ve chosen to remove the gray background because it’s
    too similar in color to the manual car bars. Adding `coord_flip` to the object
    flips the axes and provides horizontal bars rather than the default vertical style
    (note that the calls to the `scale_` functions are used with respect to the unflipped
    image). The default behavior of `fill` is to use colors, so you use the `scale_fill_grey`
    modifier to force this to be grayscale and to alter the labels of the automatically
    generated legend to match at the same time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，向对象添加`theme_bw()`会改变图像的视觉主题；在当前的示例中，我选择移除灰色背景，因为它的颜色与手动变速车的条形图颜色过于相似。向对象添加`coord_flip`会翻转坐标轴，提供水平条形图，而不是默认的垂直样式（注意，`scale_`函数的调用是针对未翻转的图像）。`fill`的默认行为是使用颜色，因此你使用`scale_fill_grey`修饰符强制将其设置为灰度，并同时更改自动生成的图例标签，使其匹配。
- en: The most prominent advantage of using `ggplot2` over base R graphics in this
    case lies in the fact that you don’t need to manually tabulate counts or design
    specific matrix structures of these frequencies—the variable mappings do this
    automatically. For practice, I encourage you to experiment with this code example,
    omitting or modifying some of the additions to the `qplot` object to assess the
    impact on the resulting image.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ggplot2`相对于基本R图形的最大优势在于，你不需要手动列出计数或设计这些频率的特定矩阵结构——变量映射会自动完成这一工作。为了练习，我鼓励你尝试修改这个代码示例，省略或修改`qplot`对象中的某些内容，以评估对结果图像的影响。
- en: '***14.1.2 A Quick Pie Chart***'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***14.1.2 快速饼图***'
- en: The venerable *pie chart* is an alternative option for visualizing frequency-based
    quantities across levels of categorical variables, with appropriately sized “slices”
    representing the relative counts of each categorical variable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 古老的*饼图*是另一种可视化频率基础数量在类别变量水平之间的替代方式，通过适当大小的“切片”表示每个类别变量的相对计数。
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can find the resulting plot in [Figure 14-3](ch14.xhtml#ch14fig3).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图14-3](ch14.xhtml#ch14fig3)中找到结果图。
- en: Though it’s possible to achieve with some effort, there is no direct “pie” geom
    in `ggplot2`. This may, at least in part, be due to the general preference of
    statisticians for barplots over pie charts. That fact itself is even summarized
    in the help file `?pie`!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通过一定的努力可以实现，但`ggplot2`中没有直接的“饼图”几何对象。这至少部分是由于统计学家普遍偏好条形图而非饼图。这一点在帮助文件`?pie`中也有所总结！
- en: Pie charts are a bad way of displaying information. The eye is good at judging
    linear measures and bad at judging relative areas.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 饼图是展示信息的一个糟糕方式。人眼擅长判断线性度量，但不擅长判断相对面积。
- en: Furthermore, barplots are of greater value than pie charts if you want frequencies
    split by a *second* categorical variable or if the levels of a factor are ordered.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你希望按*第二个*类别变量拆分频率，或者因子水平是有序的，那么条形图比饼图更有价值。
- en: '![image](../images/f14-03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f14-03.jpg)'
- en: '*Figure 14-3: A pie chart of the frequencies of total cylinders of the cars
    in the* `mtcars` *data frame*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*图14-3：来自`mtcars`数据框中总气缸频率的饼图*'
- en: '**14.2 Histograms**'
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**14.2 直方图**'
- en: The barplot is intuitively sensible for counting observations in relation to
    categorical variables but is of virtually no use if the variable you’re interested
    in is numeric-continuous. To visualize the distribution of continuous measurements,
    you can use a *histogram*—a tool that’s sometimes confused with a barplot owing
    to its similar appearance. A histogram also measures frequencies, but in targeting
    a numeric-continuous variable, it’s first necessary to “bin” the observed data,
    meaning to define intervals and then count the number of continuous observations
    that fall within each one. The size of this interval is known as the *binwidth*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: For a simple example of a histogram, consider the horsepower data of the 32
    cars in `mtcars`, given in the fourth column, named `hp`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this section, define horsepowers of all performance cars from that era as
    your population and assume that these observations represent a sample from that
    population. Using base R graphics, the `hist` command takes a vector of numeric-continuous
    observations and produces a histogram, as shown on the left in [Figure 14-4](ch14.xhtml#ch14fig4).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![image](../images/f14-04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-4: Illustrating the default behavior of* `hist` *on the* `mtcars`
    *horsepower data (left); customizing binwidth, color, and title options, as well
    as adding markers of centrality (right)*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: You can immediately see that the histogram on the left has used binwidths of
    50 units spanning the range of the data, providing you with a quick and useful
    first impression of the distribution of horsepower measurements. It seems to be
    centered roughly in the range of 75 to 150, tapering off on the right (this is
    known as a *right* or *positive skew*; more terminology will be covered in [Section
    15.2.4](ch15.xhtml#ch15lev2sec136)).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The accuracy of a histogram as a representation of the shape of a distribution
    of measurements depends solely upon the widths of the intervals used to bin the
    data. Binwidths are controlled in `hist` by the `breaks` argument. You can manually
    set these by supplying a vector, giving each breakpoint, to `breaks`. This is
    done in the following code by halving the width of each bin from 50 to 25 and
    widening the overall range somewhat, using an evenly spaced sequence.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This plot, given on the right in [Figure 14-4](ch14.xhtml#ch14fig4), shows the
    result of using the narrower bins, as well as making the bars gray and adding
    a more readable title. It also includes vertical lines denoting the mean and median,
    using `abline`, and a legend (refer back to [Section 7.3](ch07.xhtml#ch07lev1sec25)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: With the smaller binwidth, more detail is visible in the distribution. However,
    using narrower bins risks highlighting “unimportant features” (in other words,
    features of the histogram that represent natural variation as a consequence of
    the finite-sized sample). These typically occur at locations on the scale where
    data are scarce. For example, the single 335 horsepower car has produced an isolated
    bar on the right of the scale, but you might reasonably conclude that this is
    not a precise, accurate reflection of a “true bump” at that location in terms
    of the overall population. It’s therefore important to note that choosing the
    interval widths is a balancing act of sorts.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用较小的区间宽度时，数据分布的细节更加清晰。然而，使用更窄的区间有可能突出显示“不重要的特征”（换句话说，直方图中代表由于有限样本大小所产生的自然变异的特征）。这些通常出现在数据稀缺的区间位置。例如，唯一的一辆335马力的汽车在右侧的区间产生了一个孤立的条形，但你可能合理地得出结论，认为这并不是该位置的“真实突起”，而是整体人群数据的一个不精确的反映。因此，选择区间宽度时需要注意，这是一种平衡行为。
- en: You want to choose a width that gives you a good idea of the distribution of
    measurements without emphasizing unimportant detail by using too small a binwidth.
    Equivalently, you also want to avoid hiding important features by using too *large*
    a binwidth. To address this, there are data-driven algorithms that use the scale
    of the recorded observations to try to calculate an appropriately balanced binwidth.
    You can supply a character string to `breaks`, giving the name of the algorithm
    that you want to employ. The default `breaks="Sturges"` often works well, though
    it’s worth trying a small number of alternative widths when exploring data in
    this way. For further details on this and other ways to use `breaks`, the documentation
    `?hist` provides clear and concise instruction.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要选择一个合适的宽度，这样可以让你清楚地了解数据分布，而不会因使用过小的区间宽度而强调不重要的细节。换句话说，你也需要避免因使用过*大的*区间宽度而隐藏重要的特征。为了解决这个问题，有一些数据驱动的算法，它们利用记录的观测数据的规模来尝试计算一个合适的平衡区间宽度。你可以为`breaks`提供一个字符字符串，给出你希望使用的算法名称。默认的`breaks="Sturges"`通常表现得很好，尽管在以这种方式探索数据时，尝试少量的替代区间宽度也是值得的。有关此内容和其他使用`breaks`的方法的更多详细信息，文档`?hist`提供了清晰简明的说明。
- en: 'The issues surrounding intervals and their widths is emphasized in a different
    way in `ggplot2`. By default, the `qplot` function produces a histogram when you
    supply it with a single numeric vector but no value for the `geom` argument:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ggplot2`中，区间及其宽度的问题以另一种方式得到强调。默认情况下，当你向`qplot`函数提供一个单一的数值向量但没有为`geom`参数指定值时，它会生成一个直方图。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can find the result on the left in [Figure 14-5](ch14.xhtml#ch14fig5). Note,
    however, that a notification from `qplot` concerning the binwidths is printed
    to the console.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[图 14-5](ch14.xhtml#ch14fig5)中找到左侧的结果。然而需要注意的是，`qplot`会向控制台打印关于区间宽度的通知。
- en: '![image](../images/f14-05.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f14-05.jpg)'
- en: '*Figure 14-5: Illustrating the default behavior of* `qplot` *on the* `mtcars`
    *horsepower data (left); customizing binwidth, color, and title options, as well
    as adding markers of centrality (right)*'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 14-5：展示默认的* `qplot` *行为，基于* `mtcars` *的马力数据（左）；定制区间宽度、颜色和标题选项，以及添加中央性标记（右）*'
- en: 'If you don’t explicitly specify the bins, exactly 30 intervals will be used
    to span the range of the data. Inspecting the relevant geom documentation given
    with a call to `?geom_histogram` tells you the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有明确指定区间，将使用恰好30个区间来覆盖数据的范围。通过查看相关的`geom`文档（通过调用`?geom_histogram`）可以得到以下信息：
- en: By default, `stat_bin` uses 30 bins. This is not a good default, but the idea
    is to get you experimenting with different binwidths. You may need to look at
    a few to uncover the full story behind your data.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`stat_bin`使用30个区间。这并不是一个理想的默认值，但它的目的是让你开始尝试不同的区间宽度。你可能需要查看几个不同的区间宽度，以揭示数据背后的完整故事。
- en: 'So, rather than defaulting to a data-driven algorithm such as `hist`, `ggplot2`
    encourages users to become aware of the issue and actively set their own binwidths.
    You can see that 30 bins yields inappropriately narrow intervals for this example—there
    are many gaps where no observations have fallen. There are a number of ways to
    choose histogram intervals in `qplot`, one of which is to use `breaks` as earlier,
    supplying it with an appropriate numeric vector of interval endpoints. To re-create
    the plot on the right of [Figure 14-4](ch14.xhtml#ch14fig4) using `ggplot2` functionality,
    use the following code, which produces the right-hand plot in [Figure 14-5](ch14.xhtml#ch14fig5):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`ggplot2`鼓励用户意识到问题并主动设置自己的箱宽，而不是默认使用像`hist`这样的数据驱动算法。你可以看到，30个箱子为此示例提供了不合适的狭窄区间——有很多间隙，那里没有观测值。你可以通过多种方式选择`qplot`中的直方图区间，其中一种是使用`breaks`，像之前一样，给它提供一个适当的数值区间端点向量。为了重新创建[图14-4](ch14.xhtml#ch14fig4)右侧的图，使用`ggplot2`功能，使用以下代码，这会生成[图14-5](ch14.xhtml#ch14fig5)中的右侧图：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Starting with a `"blank"` geom, `geom_histogram` completes most of the work,
    with `color` governing the bar outline color and `fill` the internal color of
    the bars. The argument `closed="right"` determines that each interval is “closed”
    (in other words, exclusive) on the right and “open” (in other words, inclusive)
    on the left, the same as the default noted in `?hist`. The `geom_vline` function
    is used to add the vertical mean and median lines; here, the `mapping` must be
    instructed to change using `aes` and the locations of these lines. To ensure a
    correctly labeled legend is created for the mean and median, you must also instruct
    `linetype` in `aes` to be mapped to the desired values. In this case, this is
    simply a factor comprised of the two desired “levels.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个“空白”几何对象开始，`geom_histogram`完成了大部分工作，`color`控制条形的轮廓颜色，`fill`控制条形的内部颜色。参数`closed="right"`决定每个区间在右侧是“封闭的”（也就是说，不包括在内），在左侧是“开放的”（也就是说，包括在内），这与`?hist`中注明的默认值相同。`geom_vline`函数用于添加垂直的均值和中位线；在这里，`mapping`必须使用`aes`进行指示，改变这些线的位置。为了确保为均值和中位数创建正确标注的图例，你还必须指示`linetype`在`aes`中映射到所需的值。在这种情况下，这只是一个由两个所需“级别”组成的因子。
- en: Since you’re manually adding these lines and the associated mapping to the `ggplot2`
    object, the legend itself must be instructed to appear with `show.legend=TRUE`.
    By default, the two lines will be drawn `lty=1` (solid) and `lty=2` (dashed),
    but to match the earlier plot, you want `lty=2` and `lty=3` (dotted). You can
    add the `scale_linetype_manual` modifier to make this change; the desired line
    type numbers are passed as a vector to `values`. Finally, to suppress the automatic
    inclusion of a title for your manually added legend, the `labs(linetype="")` addition
    instructs the scale associated with the variable mapped to `linetype` in the `aes`
    call to be displayed without this title.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你是在手动添加这些线条及其相关映射到`ggplot2`对象中，因此必须指示图例本身通过`show.legend=TRUE`来显示。默认情况下，两条线将被绘制为`lty=1`（实线）和`lty=2`（虚线），但是为了与之前的图匹配，你需要`lty=2`和`lty=3`（点线）。你可以添加`scale_linetype_manual`修饰符来进行此更改；所需的线条类型编号作为一个向量传递给`values`。最后，为了抑制自动为你手动添加的图例包含标题，`labs(linetype="")`的添加指示与变量映射到`linetype`的`aes`调用相关的尺度显示时不带标题。
- en: The choice between using `ggplot2` and base R graphics often comes down to your
    intended goal. For automated handling of graphics, especially where categorical
    variables are used to separate subsets of the data set, `ggplot2` is particularly
    powerful. On the other hand, if you require manual control over the creation of
    a given image, traditional R graphics can be easier to handle, and you don’t need
    to keep track of multiple aesthetic variable mappings.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ggplot2`与基本R图形的选择通常取决于你的目标。对于自动化处理图形，尤其是在使用分类变量来分割数据集子集的情况下，`ggplot2`特别强大。另一方面，如果你需要手动控制图像的创建，传统的R图形可能更容易处理，而且你不需要跟踪多个美学变量映射。
- en: '**14.3 Box-and-Whisker Plots**'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**14.3 箱型图**'
- en: An especially popular alternative to the histogram is the *box-and-whisker plot*,
    or simply *boxplot* for short. This is merely a visual representation of the five-number
    summary discussed in [Section 13.2.3](ch13.xhtml#ch13lev2sec118).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个特别流行的直方图替代品是*箱型图*，或简称*箱线图*。这仅仅是[第13.2.3节](ch13.xhtml#ch13lev2sec118)中讨论的五数概括的可视化表示。
- en: '***14.3.1 Stand-Alone Boxplots***'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***14.3.1 独立箱型图***'
- en: 'Let’s return to the built-in `quakes` data frame of the 1,000 seismic events
    near Fiji. For the sake of comparison, you can examine both a histogram and a
    boxplot of the magnitudes of these events using default base R behavior. The following
    code produces the images given in [Figure 14-6](ch14.xhtml#ch14fig6):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![image](../images/f14-06.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-6: Default histogram (left) and boxplot (right) of the magnitude
    data from* `quakes`*. On the boxplot, commentary (superimposed externally) points
    out the key information displayed.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Like the histogram, a boxplot shows important features of the distribution,
    such as global (in other words, overall) centrality, spread, and skewness. It’s
    not really possible to see local features, such as multiple significant peaks
    in the distribution, however. As the labeling arrows point out, the line in the
    middle of the box represents the median, the lower and upper edges of the box
    show the respective quartiles, perpendicular lines (the *whiskers*) extending
    from the box indicate the minimum and the maximum, and any dots drawn beyond the
    whiskers are deemed to be points of extremity or outliers. By default, `boxplot`
    defines an outlier as an observation that lies more than 1.5 times the IQR below
    the lower quartile or above the upper quartile. This is done to prevent the whiskers
    from extending too far and overemphasizing any skew. Thus, the “maximum” and “minimum”
    values marked by the whiskers are not always the raw, overall maximum or minimum
    values in the data set because a value that has been deemed an “outlier” might
    actually represent the highest or lowest value. You can control the nature of
    this classification via the `range` argument in `boxplot`, though the default
    of `range=1.5` is usually sensible for basic data exploration.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '***14.3.2 Side-by-Side Boxplots***'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'One particularly pleasing aspect of these plots is the ease with which you
    can compare the five-number summary distributions of different groups with *side-by-side*
    boxplots. Again using the `quakes` data, define the following corresponding factor
    and inspect the first five elements (review use of the `cut` command from [Section
    4.3.3](ch04.xhtml#ch04lev2sec48) if necessary):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Recall that the `stations` variable records how many monitoring stations detected
    each event. This code has produced a factor breaking up these observations into
    one of three groups—events detected by 50 stations or fewer, between 51 and 100
    stations, and between 101 and 150 stations. Thus, you can compare the distributions
    of the magnitudes of the events according to these three groups. The following
    line produces the left image of [Figure 14-7](ch14.xhtml#ch14fig7):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With this line of code, you should note new syntax in the form of a tilde, `~`,
    shown here in `quakes$mag~stations.fac`. You can read the `~` as “on,” “by,” or
    “according to” (you’ll use the tilde notation frequently in [Chapters 20](ch20.xhtml#ch20)
    through [22](ch22.xhtml#ch22)). Here you’re instructing `boxplot` to plot `quakes$mag`
    *according to* `station.fac` so that a separate boxplot is produced for each group,
    naturally given in the order listed in the grouping factor. Optional arguments
    are also employed to control axis labeling and box color. Your interpretation
    of this plot mirrors what you can see in [Figure 13-6](ch13.xhtml#ch13fig6), in
    that the higher the recorded magnitude, the more stations that detected a given
    seismic event.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-07.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-7: Side-by-side boxplots of the* `quakes` *magnitudes, split by
    the three groups identified by* `station.fac`*, using base R graphics (left) and*
    `ggplot2` *functionality (right)*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Turning to `ggplot2` functionality, `qplot` can produce the same type of plot
    easily, with the following producing the image on the right in [Figure 14-7](ch14.xhtml#ch14fig7):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The default boxplots look a little different, though you can make the same interpretations.
    In this use of `qplot`, you supply the boxplot grouping factor as the *x*-axis
    variable (first argument) and the continuous variable for which you require boxplots
    as the *y*-axis variable (second argument). Here I’ve explicitly set `geom="boxplot"`
    to ensure a boxplot display, and I’ve added axis labels.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '**14.4 Scatterplots**'
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *scatterplot* is most frequently used to identify a relationship between the
    observed values of two different numeric-continuous variables, displayed as *x*-*y*
    coordinate plots. The coordinate-wise nature of base R graphics lends itself naturally
    to the creation of scatterplots, so you’ve seen several examples already in this
    book. However, not every *x*-*y* coordinate-based plot is always called a scatterplot;
    a scatterplot usually assumes there is some “relationship of interest” present.
    For example, a plot of spatial coordinates like [Figure 13-1](ch13.xhtml#ch13fig1)
    might not be regarded as a scatterplot, but a plot of the earthquake magnitude
    against the number of stations detecting the event, like [Figure 13-6](ch13.xhtml#ch13fig6),
    would be.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll finish this chapter by expanding on how you can use scatterplots to explore
    more than two continuous variables. To do this, let’s access another ready-to-use
    R data set, namely, the famous `iris` data. Collected in the mid-1930s, this data
    frame of 150 rows and 5 columns consists of petal and sepal measurements for three
    species of perennial iris flowers—*Iris setosa*, *Iris virginica*, and *Iris versicolor*
    ([Anderson, 1935](ref.xhtml#ref03); [Fisher, 1936](ref.xhtml#ref24)). You can
    view the first five records here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Looking through `?iris`, you can see that there are 50 observations for each
    variable, recorded in centimeters (cm), for each species.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '***14.4.1 Single Plot***'
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can modify a simple scatterplot to split the plotted points according to
    a categorical variable, exposing potential differences between any visible relationships
    with respect to the continuous variables. For example, using base R graphics,
    you can examine the petal measurements according to the three species. Using the
    “stepping-stone” approach first explained in [Chapter 7](ch07.xhtml#ch07), you
    can manually build up this plot by first using `type="n"` to generate an empty
    plotting region of the correct dimensions and subsequently adding the points corresponding
    to each species, altering point character and color as desired.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can find the plot in [Figure 14-8](ch14.xhtml#ch14fig8). Note that the *Iris
    virginica* species has the largest petals, followed by *Iris versicolor*, and
    the smallest petals belong to *Iris setosa*. However, this code, while functional,
    is fairly cumbersome. You can generate the same image more simply by first setting
    up vectors that specify the desired point character and color *for each individual
    observation*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-08.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-8: A scatterplot of petal measurements split by species from the
    built-in* `iris` *data frame*'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the two objects created here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The first line creates a vector `iris_pch` of equal length to the number of
    observations in `iris`, with every entry being `19`. Vector subsetting then overwrites
    the entries corresponding to *Iris versicolor* and sets the point character to
    `1`. The same steps are followed to create `iris_col`; first an appropriately
    sized vector is filled with the character strings `"black"`, and then those entries
    corresponding to *Iris virginica* are overwritten and set to `"gray"`. With that,
    note that the single line shown next, when followed by the same call to `legend`
    as earlier, will produce an identical plot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '***14.4.2 Matrix of Plots***'
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The “single” type of planar scatterplot is really useful only when comparing
    *two* numeric-continuous variables. When there are more continuous variables of
    interest, it isn’t possible to display this information satisfactorily on a single
    plot. A simple and common solution is to generate a two-variable scatterplot for
    each pair of variables and show them together in a structured way; this is referred
    to as a *scatterplot matrix*. Making use of the `iris_pch` and `iris_col` vectors
    created earlier, you can generate a scatterplot matrix for all four continuous
    variables in `iris`, retaining the distinction between species. Working with base
    R graphics, use the `pairs` function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You can find the result of this line in [Figure 14-9](ch14.xhtml#ch14fig9).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-9: A scatterplot matrix with respect to all four continuous measurements
    in the data frame*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to use `pairs` is to supply a matrix or data frame of the raw
    observations as its first argument, done here by selecting all columns of `iris`
    except the `Species` column (`iris[,1:4]`). The interpretation of the plots depends
    upon the labeling of the diagonal panels, running from the top left to the bottom
    right. They will appear in the same order as the columns given as the first argument.
    These “label panels” allow you to determine which individual plot in the matrix
    corresponds to each pair of variables. For example, the first column of the scatterplot
    matrix in [Figure 14-9](ch14.xhtml#ch14fig9) corresponds to an *x*-axis variable
    of Sepal Length; the third row of the matrix corresponds to a *y*-axis variable
    of Petal Length, and each row and column displays a scale that is constant moving
    left/right or up/down, respectively. This means that plots above the diagonal
    are mirrored in those below it—the plot of Petal Width (*y*) on Sepal Width (*x*)
    at position row 4, column 2 displays the same data as the scatterplot at position
    row 2, column 4 but flipped on its axes. As such, `pairs` includes an option to
    display only those scatterplots above *or* below the diagonal, by setting either
    `lower.panel=NULL` or `upper.panel=NULL` to suppress one or the other.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Scatterplot matrices therefore allow for an easier comparison of the collection
    of pairwise relationships formed by observations made on multiple continuous variables.
    In this matrix, note there’s a strong positive linear association between petal
    measurements but a weaker relationship between the sepal measurements. Furthermore,
    although *Iris setosa* may reasonably be considered the smallest flower in terms
    of its petals, the same can’t be said in terms of its sepals.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: For those working with `ggplot2`, you know that it’s natural to split the points
    according to a categorical variable, as in the following example.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can find the result in [Figure 14-10](ch14.xhtml#ch14fig10).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-10.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-10: Using* `ggplot2` *functionality to plot petal dimensions for
    the three* `iris` *species, with point* `shape` *as the aesthetic modifier*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, I’ve split up the points using the `Species` variable mapped to `shape`
    (the equivalent of the base R terminology `pch`), and I’ve modified the point
    types using the `scale_shape_manual` modifier. I’ve also simplified the title
    of the automatically generated legend with `labs`, as done in [Section 14.2](ch14.xhtml#ch14lev1sec45).
    Scatterplot matrices, however, are not easily achievable using only `ggplot2`.
    To generate a matrix in a `ggplot2` style, it’s recommended that you download
    the `GGally` package ([Schloerke et al., 2014](ref.xhtml#ref58)) to access the
    `ggpairs` function. This package is designed to be an extension or add-on of `ggplot2`.
    It’s installed from CRAN as per usual—for example, by running `install.packages("GGally")`—and
    must be loaded via `library("GGally")` prior to use. After this is done, as a
    quick example, the following code produces the plot in [Figure 14-11](ch14.xhtml#ch14fig11):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Though you might see familiar warnings related to the histogram binwidths, `ggpairs`
    offers an impressive visual array for such a short line of code. The output not
    only gives you the lower half of the scatterplot matrix produced with `pairs`
    but also provides equivalent histograms along the bottom and boxplots along the
    right. It also displays the estimates of the correlation coefficients. As shown,
    you can map a variable to an aesthetic modifier to split up the plotted observations
    based on factor levels. In [Figure 14-11](ch14.xhtml#ch14fig11), this is done
    by color, and you instruct `ggpairs` to operate on the `Species` variable. Documentation
    found in `?ggpairs` gives concise information on the various options that control
    the presence and appearance of the individual plots.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f14-11.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: '*Figure 14-11: Generation of a scatterplot matrix using `ggpairs` from the
    `GGally` package, using color to separate the species. Note the useful addition
    of estimated correlation coefficients and distributional plots.*'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 14.1**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Recall the built-in `InsectSprays` data frame, containing counts of insects
    on various agricultural units treated with one of six sprays.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Produce a histogram of the counts of insects using base R graphics.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain the total number of insects found according to each spray (this was also
    asked in [Exercise 13.2](ch13.xhtml#ch13exc2) (f) on [page 273](ch13.xhtml#page_273)).
    Then, use base R graphics to produce a vertical barplot and a pie chart of these
    totals, labeling each plot appropriately.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `ggplot2` functionality to generate side-by-side boxplots of the counts
    of insects according to each spray type and include appropriate axis labels and
    a title.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yet another of R’s useful ready-to-use data sets is `USArrests`, containing
    data on the number of arrests for murder, rape, and assault per 100,000 individuals
    in each of the 50 states of the United States, recorded in 1973 (see, for example,
    [McNeil, 1977](ref.xhtml#ref46)). It also includes a variable giving the percentage
    of urban-based population in each state. Briefly inspect the data frame object
    and the accompanying documentation `?USArrests`. Then complete the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Use `ggplot2` functionality to generate a right-exclusive histogram of the proportion
    of urban population for the states. Set your breaks to be 10 units each, between
    0 and 100\. Have the histogram show the first quartile, the median, and the third
    quartile; then provide a matching legend. Use colors as you like and include appropriate
    axis annotation.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code `t(as.matrix(USArrests[,-3]))` creates a matrix of the `USArrests`
    data without the urban population column, and the built-in R object `state.abb`
    provides the two-letter state abbreviations, in alphabetical order, as a character
    vector. Use these two structures and base R graphics to produce a horizontal,
    stacked barplot with the horizontal bars labeled with state abbreviations and
    with each bar split according to the type of crime (murder, rape, and assault).
    Include a legend.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a new factor vector `urbancat` that is set to `1` if the corresponding
    state has an urban population percentage greater than the median percentage and
    is set to `0` otherwise.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new copy of `USArrests` in your workspace, after deleting the `UrbanPop`
    column, leaving just the three crime rate variables. Then insert a new, fourth
    column in this object with `urbancat`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the data frame from (g) to produce a scatterplot matrix and other associated
    plots of the three crime rates against one another via `GGally` functionality.
    Use color to split the crime rates according to the two levels of `urbancat`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the built-in `quakes` data set.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Create a factor vector corresponding to the magnitudes. Each entry should assume
    one of three categories based on breaks marked by the minimum magnitude, the ![image](../images/1by3.jpg)
    th quantile, the ![image](../images/2by3.jpg) th quantile, and the maximum magnitude.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Re-create the plot shown next, where low-, medium-, and high-magnitude events,
    according to your factor vector from (i), are plotted with `pch` being assigned
    `1`, `2`, and `3`, respectively.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![image](../images/f0307-01.jpg)'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Add a legend to the plot from (j) to reference the three `pch` values.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Important Code in This Chapter**'
  id: totrans-138
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: '| **Function/operator** | **Brief description** | **First occurrence** |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| `barplot` | Create a barplot | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 290](ch14.xhtml#page_290) |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| `geom_bar` | Barplot geom | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 292](ch14.xhtml#page_292) |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| `scale_x_discrete` | Modify discrete *x*-axis (`ggplot2`) | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 292](ch14.xhtml#page_292) |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| `scale_y_continuous` | Modify continuous *y*-axis | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 292](ch14.xhtml#page_292) |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| `theme_bw` | Black-and-white color theme | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 292](ch14.xhtml#page_292) |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| `coord_flip` | Switch *x*- and *y*-axes | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 292](ch14.xhtml#page_292) |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| `scale_fill_grey` | Filled colors as grayscale | [Section 14.1.1](ch14.xhtml#ch14lev2sec122),
    [p. 292](ch14.xhtml#page_292) |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| `pie` | Create a pie chart | [Section 14.1.2](ch14.xhtml#ch14lev2sec123),
    [p. 293](ch14.xhtml#page_293) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| `hist` | Create a histogram | [Section 14.2](ch14.xhtml#ch14lev1sec45), [p.
    294](ch14.xhtml#page_294) |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| `geom_histogram` | Histogram geom | [Section 14.2](ch14.xhtml#ch14lev1sec45),
    [p. 297](ch14.xhtml#page_297) |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| `geom_vline` | Add vertical lines geom | [Section 14.2](ch14.xhtml#ch14lev1sec45),
    [p. 297](ch14.xhtml#page_297) |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| `scale_linetype_manual` | Alter `ggplot2` line types | [Section 14.2](ch14.xhtml#ch14lev1sec45),
    [p. 297](ch14.xhtml#page_297) |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| `labs` | `ggplot2` legend labels | [Section 14.2](ch14.xhtml#ch14lev1sec45),
    [p. 297](ch14.xhtml#page_297) |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| `boxplot` | Create boxplots | [Section 14.3.1](ch14.xhtml#ch14lev2sec124),
    [p. 298](ch14.xhtml#page_298) |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| `~` | Plot “according to” | [Section 14.3.2](ch14.xhtml#ch14lev2sec125),
    [p. 299](ch14.xhtml#page_299) |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '| `pairs` | Scatterplot matrix | [Section 14.4.2](ch14.xhtml#ch14lev2sec127),
    [p. 303](ch14.xhtml#page_303) |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
- en: '| `scale_shape_manual` | Alter `ggplot2` point characters | [Section 14.4.2](ch14.xhtml#ch14lev2sec127),
    [p. 304](ch14.xhtml#page_304) |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| `ggpairs` | Scatterplot matrix (`GGally`) | [Section 14.4.2](ch14.xhtml#ch14lev2sec127),
    [p. 304](ch14.xhtml#page_304) |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
