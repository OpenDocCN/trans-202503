- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 3 SETTING UP A HACKING LAB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll set up a lab environment containing hacking tools and
    an intentionally vulnerable target. You’ll use this lab in chapter exercises,
    but you can also turn to it whenever you need to write, stage, and test a bash
    script before running it against real targets.
  prefs: []
  type: TYPE_NORMAL
- en: The locally deployed target and its assets mimic the production environment
    of a mock internet hosting company called ACME Infinity Servers, which has its
    own fake employees, customers, and data. This fabricated internet hosting company
    and its customers will provide you with a diverse range of intentionally vulnerable
    applications, user accounts, and infrastructure that you can practice attacking
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The lab will be fully contained in a Kali virtual machine. This virtual machine
    will require the following minimum specifications: at least 4GB of RAM, at least
    40GB of storage, and an internet connection.'
  prefs: []
  type: TYPE_NORMAL
- en: Security Lab Precautions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these guidelines to reduce the risks associated with building and operating
    a hacking lab:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid connecting the lab directly to the internet. Hacking lab environments
    typically run vulnerable code or outdated software. While these vulnerabilities
    are great for hands-on learning, they could pose risks to your network, computer,
    and data if they become accessible from the internet. Instead, we recommend working
    through the book when connected to local networks that you trust or operating
    offline after the lab is set up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the lab in a virtual environment by using a hypervisor. Separating the
    lab environment from your primary operating system is generally a good idea, as
    it prevents conflicts that could potentially break other software on your computer.
    We recommend using a virtualization tool to ensure this separation. In the next
    section, you’ll install the lab in a Kali virtual machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take frequent snapshots of your virtual machine. *Snapshots* are backups of
    your virtual machine that allow you to restore it to a previous state. Lab environments
    often won’t stay stable after you attack them, so take snapshots whenever your
    lab is in a stable state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these best practices in mind, let’s get our hands dirty and our lab up
    and running!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kali
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Kali* is a Linux distribution created for penetration testing. Based on Debian,
    it was designed by OffSec. We’ll use Kali as our lab’s operating system because
    it comes bundled with some of the libraries, dependencies, and tools we’ll need.'
  prefs: []
  type: TYPE_NORMAL
- en: Your Kali machine will play two roles in the lab environment. First, it will
    act as the host responsible for running the target networks and machines against
    which you’ll run your scripts. Second, it will serve as the hacking machine from
    which you’ll perform your attacks.
  prefs: []
  type: TYPE_NORMAL
- en: You can find an x64 version of the Kali virtual machine images for the VMware
    Workstation and Oracle VirtualBox hypervisors at *[https://www.kali.org/get-kali/#kali-platforms](https://www.kali.org/get-kali/#kali-platforms)*.
    Pick the hypervisor of your choice and follow the official installation instructions
    at *[https://www.kali.org/docs/installation/](https://www.kali.org/docs/installation/)*
    to install it.
  prefs: []
  type: TYPE_NORMAL
- en: After completing the installation process, you should see the Kali login screen
    shown in [Figure 3-1](chapter3.xhtml#fig3-1). Kali ships with a default user account
    named *kali* whose password is *kali*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-1: The Kali login screen'
  prefs: []
  type: TYPE_NORMAL
- en: After logging in to Kali, you need to make sure it’s up to date. To access the
    terminal, open the **Applications** menu, and in the search bar, enter **terminal
    emulator**. Click the corresponding application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use a few commands to update your software repositories and upgrade your
    installed packages. In the terminal window, enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When you use sudo, Kali will ask for your password. This is the same password
    you used to log in to the virtual machine, *kali*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Newer Kali releases use the Z Shell (zsh) by default, so ensure that bash is
    the default shell for the *kali* user with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, enable your new default shell by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Moving forward, we’ll use this Kali machine for all tasks we cover in the book.
    We recommend keeping the terminal window open, as you’ll need it for additional
    installations very soon.
  prefs: []
  type: TYPE_NORMAL
- en: The Target Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it’s time to install the machines and networks that will make up the simulated
    target. You can perform this installation in two ways: manually or with an automated
    script.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We encourage you to set up your lab manually at least once by following the
    instructions in this section. This will allow you to familiarize yourself with
    the lab’s core components and practice running commands on the command line. However,
    if you ever need to redeploy the lab from scratch in a fresh installation of Kali,
    you can do so by cloning the repository at *[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*
    and running make init:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This script should install all the lab’s dependencies, containers, and hacking
    utilities, enabling you to skip the instructions in this section and in “Installing
    Additional Hacking Tools” on [page 61](#pg_61). You must execute the script in
    a Kali virtual machine that meets the system requirements described in the introduction
    to this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker and Docker Compose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll build the lab environment by using *Docker*, a tool for deploying and
    managing containers. *Containers* package code and its dependencies so an application
    can run reliably in various environments. We’ll also use *Docker Compose*, a special
    Docker utility for building and managing multiple Docker containers through a
    single YAML file known as a *Compose file*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first configure our sources to use Debian’s current stable version of
    Docker’s community edition, *docker-ce*, using the following commands. We use
    printf to add Docker’s Advanced Package Tool (APT) repository to the APT package-source
    database file. The tee command reads from the standard input stream and writes
    to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, download and import Docker’s keyring to ensure that the repository is
    validated and all packages installed from that repository are cryptographically
    verified. Use curl to download the key and pipe it to the gpg command, which will
    then store it in the required folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, run another update to refresh the repository database and install
    the Docker components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that you have Docker Compose running correctly, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make sure the Docker process will automatically start upon system reboot
    by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Docker requires the use of sudo, which can get a little inconvenient. If you
    want to avoid having to enter sudo before executing Docker-related commands, add
    the *kali* user to the *docker* Linux group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once you’ve done this, you shouldn’t need sudo to run Docker commands. For these
    changes to take effect, you must log out of and back in to Kali.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the Book’s Repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the lab’s files in the book’s GitHub repository at *[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*.
    This repository contains the Docker configurations needed to build the lab, as
    well as all the bash scripts mentioned in the later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kali comes preloaded with Git, which you can use to clone and download the
    repository. To do so, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, move into the repository’s root directory and take a quick look at its
    contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the output, the repository’s contents are organized into directories
    for each of the book’s chapters. The repository also includes a *lab* directory,
    which we’ll use to set up the lab in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Docker Containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The contents of the *lab* directory in the book’s repository control all networking
    infrastructure, machines, and applications used within the lab. This directory
    includes a *Makefile* file. By running this script with the help argument, you
    can see that it is used to deploy, tear down, rebuild, clean, and check the status
    of our environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s start by using the deploy argument to create the lab. Note that you will
    need sudo permissions to execute the deployment, so you’ll be prompted for your
    *kali* user password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The initial deployment of the lab environment will take a few minutes to complete.
    To monitor the progress of the installation, you’ll need to open a new terminal
    session and tail the logfile located under */var/log/lab-install.log*, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When the tail -f (follow) command is used against a file, it provides a live
    view of any new lines added to the end of the file. This is useful for keeping
    an eye on logfiles, which frequently have new information written to them.
  prefs: []
  type: TYPE_NORMAL
- en: '> NOTE'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because the lab setup downloads software such as operating system images and
    other applications, this deployment could take some time, depending on your network
    connection and the computer’s resources allocated to the host running the lab.*'
  prefs: []
  type: TYPE_NORMAL
- en: Testing and Verifying the Containers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the logfile indicates the process is complete, it should tell you whether
    the lab was set up correctly. We can also run a few commands to verify this. First,
    let’s execute a status check by using the make command, this time with the test
    argument. If all the checks pass, you should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also list all our lab’s running Docker containers with the docker ps
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You should get a similar output, though the containers won’t necessarily be
    in the same order.
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*For convenience, you can also use the* make status *command, which is identical
    to* make test*, to check whether the lab is up and running.*'
  prefs: []
  type: TYPE_NORMAL
- en: The Network Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The lab consists of eight machines running in Docker containers, as well as
    two networks. Most of the machines are assigned to one of the two networks, and
    we’ll use them to facilitate various hacking scenarios in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The networks within the lab are connected to Kali via Docker’s bridged networking
    mode. [Figure 3-2](chapter3.xhtml#fig3-2) shows the details of this network architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/pg58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3-2: The lab’s network architecture'
  prefs: []
  type: TYPE_NORMAL
- en: You can also find this diagram in the book’s repository at *[https://github.com/dolevf/Black-Hat-Bash/blob/master/lab/lab-network-diagram.png](https://github.com/dolevf/Black-Hat-Bash/blob/master/lab/lab-network-diagram.png)*.
  prefs: []
  type: TYPE_NORMAL
- en: The Public Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The network on the left side of [Figure 3-2](chapter3.xhtml#fig3-2) is the public
    network, where our fake internet hosting company, ACME Infinity Servers, hosts
    its customers’ websites and resources. The two company websites you’ll find in
    this network belong to ACME Impact Alliance and ACME Hyper Branding.
  prefs: []
  type: TYPE_NORMAL
- en: The public network has an IP address Classless Inter-Domain Routing (CIDR) range
    of 172.16.10.0/24 and contains four machines (whose names are prefixed with *p-*).
    It is also public facing, meaning we’ll likely test the machines with access to
    this network before any other, as they constitute possible entry points into the
    network.
  prefs: []
  type: TYPE_NORMAL
- en: The Corporate Network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second network is the corporate network. ACME Infinity Servers uses this
    private network to host its supporting infrastructure on the backend. As you can
    see, the corporate network has an IP address CIDR range of 10.1.0.0/24 and contains
    four machines (whose names are prefixed with *c-*).
  prefs: []
  type: TYPE_NORMAL
- en: This network is not public facing, meaning the machines in this network don’t
    have internet connectivity. Therefore, we won’t test them until we’re able to
    take over one or more of the machines on the public network, which will serve
    as our launchpad to the corporate network.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Network Interfaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Kali has two network interfaces used to facilitate connections to both lab
    networks. We can use the *br_public* network interface to access the public network
    and the *br_corporate* network interface to access the corporate network. You
    can validate that both interfaces are online and configured to use the correct
    network address by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Verify that the IP addresses match those shown at ❶ and ❷ before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: The Machines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The eight machines that make up the lab environment follow a simple naming convention.
    The first character of the name indicates the network that the machine belongs
    to. For example, if the machine name starts with a *p*, it belongs to the public
    network; likewise, if it starts with a *c*, it belongs to the corporate network.
    The next word describes the machine’s functions or main technology stack, such
    as *web*, *ftp*, *jumpbox*, or *redis*. Finally, a number is used to distinguish
    similar machines, such as *p-web-01* and *p-web-02*.
  prefs: []
  type: TYPE_NORMAL
- en: Each machine provides unique applications, services, and user accounts that
    we can learn about and break into. Later chapters describe these machines in more
    detail, but [Table 3-1](chapter3.xhtml#tab3-1) provides some high-level information
    about them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 3-1: Lab Machine Details'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Public IP | Corporate IP | Hostname |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Kali host | 172.16.10.1 | 10.1.0.1 | — |'
  prefs: []
  type: TYPE_TB
- en: '| p-web-01 | 172.16.10.10 | — | p-web-01.acme-infinity-servers.com |'
  prefs: []
  type: TYPE_TB
- en: '| p-ftp-01 | 172.16.10.11 | — | p-ftp-01.acme-infinity-servers.com |'
  prefs: []
  type: TYPE_TB
- en: '| p-web-02 | 172.16.10.12 | 10.1.0.11 | p-web-02.acme-infinity-servers.com
    |'
  prefs: []
  type: TYPE_TB
- en: '| c-jumpbox-01 | 172.16.10.13 | 10.1.0.12 | c-jumpbox-01.acme-infinity-servers.com
    |'
  prefs: []
  type: TYPE_TB
- en: '| c-backup-01 | — | 10.1.0.13 | c-backup-01.acme-infinity-servers.com |'
  prefs: []
  type: TYPE_TB
- en: '| c-redis-01 | — | 10.1.0.14 | c-redis-01.acme-infinity-servers.com |'
  prefs: []
  type: TYPE_TB
- en: '| c-db-01 | — | 10.1.0.15 | c-db-01.acme-infinity-servers.com |'
  prefs: []
  type: TYPE_TB
- en: '| c-db-02 | — | 10.1.0.16 | c-db-02.acme-infinity-servers.com |'
  prefs: []
  type: TYPE_TB
- en: When you perform penetration tests from Kali, keep in mind that you may sometimes
    see Kali’s own IP addresses, 172.16.10.1 and 10.1.0.1, pop up in certain tool
    results. We won’t be testing those.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the Lab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve set up your lab and taken a close look at its components, you’ll
    learn how to tear it down, start it, and rebuild it if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Shutting Down
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you’re not using the lab environment, turning it off is good practice.
    To shut down all the containers running in the lab, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive a list of all stopped containers, as well as the removed
    networks and volumes, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To restart your containers, simply rerun the deploy command mentioned in “Deploying
    Docker Containers” on [page 56](#pg_56).
  prefs: []
  type: TYPE_NORMAL
- en: Removing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To completely remove the lab environment from your Kali machine, you can run
    the clean command. This will destroy all containers and their images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: After running the command, you should receive a confirmation that the lab environment
    has been destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we execute a rebuild, the lab will first shut down all running containers,
    delete volumes, and remove all container images before running a new deployment.
    To execute the rebuild, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If you rebuild the lab, you’ll lose any data you saved inside your containers.
    Rebuilding is useful when something goes wrong during installation. Maybe, halfway
    through it, you lost your network connection, and the lab reported a failed state.
    The rebuild command allows you to wipe and install the lab environment from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Individual Lab Machines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you progress through the book, you’ll compromise the machines in the lab
    environment. However, obtaining full access to a machine often takes multiple
    attempts. Sometimes you may need to troubleshoot an issue or reproduce a post-compromise
    activity, and you won’t want to repeat the steps you performed to obtain access.
  prefs: []
  type: TYPE_NORMAL
- en: 'To gain shell access to any individual lab machine, you can run the following
    Docker command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: MACHINE-NAME represents the name of a lab machine, such as *p-web-01* or *p-jumpstation-01*
    (or any other machine from [Table 3-1](chapter3.xhtml#tab3-1) that starts with
    *p-* or *c-*). The Docker command will drop you into a bash shell, at which point
    you can execute any command you like. To exit, simply enter exit at the prompt
    or close the terminal session’s window.
  prefs: []
  type: TYPE_NORMAL
- en: We highly recommend you compromise the machines as intended before taking these
    convenient shortcuts, however.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Additional Hacking Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the tools we’ll use in this book come preinstalled in Kali, and we’ll
    introduce them upon first use. However, we’ll need several tools that aren’t installed
    by default, so let’s install them here. First, create a new directory for your
    tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now use the instructions in the following sections to install each tool.
  prefs: []
  type: TYPE_NORMAL
- en: WhatWeb
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*WhatWeb*, developed by Andrew Horton and Brendan Coles, is a Ruby-based web
    scanner. Using a plug-in-based system, it’s designed to identify the software
    running a target website.'
  prefs: []
  type: TYPE_NORMAL
- en: WhatWeb can fingerprint websites and their application stack by using its database
    of known application signatures. WhatWeb can also identify particular content
    management systems and blogging platforms (such as WordPress), web cameras, web
    application firewalls, and more. As of this writing, WhatWeb has over 1,800 plug-ins.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install WhatWeb, simply run the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that WhatWeb can operate successfully by running the whatweb command
    with the -h (help) argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We’ll use WhatWeb later in the book when we perform reconnaissance activities.
  prefs: []
  type: TYPE_NORMAL
- en: RustScan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*RustScan* is a lightning-fast port scanner written in the Rust programming
    language by Autumn (Bee) Skerritt (@bee_sec_san). Some claim that RustScan can
    scan all 65,000 ports on a target in seconds!'
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll use RustScan’s Docker version. To do this, we first need to pull its
    image onto the Kali machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you’ve built RustScan, run a quick test to ensure that it’s working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This command is quite long, as it relies on using Docker to start a dedicated
    RustScan container. In “Assigning Aliases to Hacking Tools” on [page 66](#pg_66),
    we’ll create a shortcut command that will run RustScan for us.
  prefs: []
  type: TYPE_NORMAL
- en: We will use RustScan for port scanning purposes in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Nuclei
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Nuclei* is a vulnerability scanner written in the Go programming language
    by ProjectDiscovery, a company that builds popular open source hacking tools.
    Nuclei works by sending requests to targets defined by a YAML template file. The
    hacking community has published thousands of Nuclei templates supporting several
    protocols, including Transmission Control Protocol (TCP), Domain Name System (DNS),
    HTTP, raw sockets, file, headless, and more. You can find these templates at *[https://github.com/projectdiscovery/nuclei-templates](https://github.com/projectdiscovery/nuclei-templates)*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Nuclei by running the following installation command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that Nuclei is correctly installed, run a help command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The first time you run Nuclei, it automatically creates a *nuclei-templates*
    directory in the user’s home folder and downloads all the publicly available Nuclei
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Nuclei to find vulnerabilities in the lab, as well as for writing
    custom vulnerability checks.
  prefs: []
  type: TYPE_NORMAL
- en: dirsearch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*dirsearch* is a multithreaded tool used to find common paths on web servers.
    dirsearch is available in Kali’s software repositories, so to install it, run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that dirsearch is correctly installed, run a help command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We will use dirsearch for information-gathering purposes in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Linux Exploit Suggester 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *Linux Exploit Suggester 2* is a next-generation tool based on the original
    Linux Exploit Suggester. Written in Perl and developed by Jonathan Donas, it includes
    several exploits you can use to potentially compromise vulnerable Linux kernel
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, first clone the repository to your *tools* directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that Linux Exploit Suggester 2 is installed correctly, run a help
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We will use Linux Exploiter Suggester 2 to enumerate kernel exploits later in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: Gitjacker
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Gitjacker* is a data-extraction tool that targets web applications whose *.git*
    directory has been mistakenly uploaded. Before you can install Gitjacker, you’ll
    first need to install jq, a command line JSON processor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, download the Gitjacker install script and move the executable to the
    tools directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, verify that Gitjacker is working properly by running the following
    help command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We will use Gitjacker to identify misconfigured Git repositories later in the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: pwncat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*pwncat* is a Python-based command-and-control library for capturing and interacting
    with remote shells, developed by Caleb Stewart and John Hammond. Once pwncat receives
    a shell connection from a remote compromised host, it acts as an exploitation
    platform from which commands can be sent and attacks can be launched.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install pwncat, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the library was installed correctly, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use pwncat for penetration-testing purposes later in the book. In some
    cases, pwncat-cs may be found under *~/.local/bin* and can be called directly
    by its full path: *~/.local/bin/pwncat-cs*.'
  prefs: []
  type: TYPE_NORMAL
- en: LinEnum
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*LinEnum* is a bash script written by Owen Shearing for enumerating local information
    on a Linux host. We can use wget to grab the script from its GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that the script is working correctly, make it executable and run
    the following help command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: We will use LinEnum to enumerate systems for misconfigurations later in the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: unix-privesc-check
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *unix-privesc-check* shell script, written by pentestmonkey, collects information
    from a host in an attempt to find misconfigurations and ways to escalate privileges.
    The script is written to support many flavors of Linux and Unix systems and does
    not require any dependencies, which makes it convenient to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the script comes bundled with Kali, and you should find it in */usr/bin/unix-privesc-check*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can create a copy of it in the *tools* directory for easier
    access, should you need to copy it later to any of the lab’s machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If the script isn’t available on your Kali machine, you can download it directly
    from APT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that you can run it successfully with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We will use *unix-privesc-check* to identify privilege escalation opportunities
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning Aliases to Hacking Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tools that are installed through third-party repositories such as GitHub sometimes
    won’t have setup files that make running them easier. We can assign these tools
    bash aliases as shorthand references so that we won’t need to enter the full directory
    path every time we run them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assign custom aliases by using the following commands. These commands will
    be written to your *~/.bashrc* file, which will execute when you open a new terminal
    session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: RustScan and Gitjacker now have aliases.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a fully functioning bash hacking lab. Now would
    be a good time to take a snapshot of your Kali virtual machine so you can restore
    it to this clean state. Taking snapshots regularly is a good idea, especially
    whenever you make significant configuration changes or deploy new tools to your
    virtual lab.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you built your hacking lab, which consists of a dedicated Kali
    virtual machine running several intentionally vulnerable Docker containers and
    hacking utilities. We also discussed managing your lab environment by tearing
    it down, cleaning it up, and rebuilding it.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use this lab in all hands-on exercises moving forward. If you encounter
    problems, we encourage you to keep an eye on the book’s GitHub repository (*[https://github.com/dolevf/Black-Hat-Bash](https://github.com/dolevf/Black-Hat-Bash)*),
    where we maintain the source code responsible for keeping your lab up to date.
    In the next chapter, you’ll use these tools to perform reconnaissance and gather
    information about remote targets.
  prefs: []
  type: TYPE_NORMAL
