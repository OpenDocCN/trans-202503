["```\n❶ #define HEADER_START   0x7E\n#define HEADER_VERSION 0xFF\n#define TAIL_END       0xEF\n#define CMD_PLAY_NEXT  0x01\n#define CMD_PLAY_PREV  0x02\n#define CMD_PLAY_IDX   0x03\n\nint8_t commands[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n// Holds command set to send to MP3\n\n#include <SoftwareSerial.h>\nSoftwareSerial MP3(2, 3); // Module TX to D2; module RX to D3\n\nvoid controlMP3(int8_t command, int16_t data)\n{\n    commands[0] = HEADER_START;        // Header byte 0 (start)\n    commands[1] = HEADER_VERSION;      // Header byte 1 (version)\n    commands[2] = 0x06;                // Header byte 2 (length cmd + data)\n    commands[3] = command;             // Command byte\n    commands[4] = 0x00;                // Feedback (0x00 = no, 0x01 = yes)\n    commands[5] = (int8_t)(data >> 8); // Data byte 0\n    commands[6] = (int8_t)(data);      // Data byte 1\n    commands[7] = 0xEF;                // End byte\n  ❷ for (int i = 0; i < 8; i++)\n    {\n        MP3.write(commands[i]);\n    }\n}\n\nvoid setup()\n{\n    MP3.begin(9600);\n  ❸ controlMP3(0x09, 0x02); // Select flash card for operation\n    delay(500);\n  ❹ controlMP3(0x0D, 0); // Resume playback, no feedback\n    delay(500);\n}\n\nvoid loop()\n{\n  ❺ controlMP3(0x01, 0); // Next track, zero data\n  ❻ delay(10000);\n} \n```", "```\n// Project #28 - Simple MP3 player\n\n❶ #define HEADER_START   0x7E\n#define HEADER_VERSION 0xFF\n#define TAIL_END       0xEF\n#define CMD_PLAY_NEXT  0x01\n#define CMD_PLAY_PREV  0x02\n#define CMD_PLAY_IDX   0x03\n\n❷ int8_t commands[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n// Holds command set to send to MP3\n#include <SoftwareSerial.h>\nSoftwareSerial MP3(2, 3); // module TX to D2; module RX to D3\n#include <analogkeypad.h>\nanalogkeypad keypad;\n\nvoid controlMP3(int8_t command, int16_t data)\n{\n    commands[0] = HEADER_START;\n    commands[1] = HEADER_VERSION;\n    commands[2] = 0x06;\n  ❸ commands[3] = command;8\n    commands[4] = 0x00;\n  ❹ commands[5] = (int8_t)(data >> 8);\n commands[6] = (int8_t)(data);\n    commands[7] = TAIL_END;\n    for (int i = 0; i < 8; i++)\n    {\n      ❺ MP3.write(commands[i]);\n    }\n    delay(100);\n}\n\nvoid setup()\n{\n  ❻ MP3.begin(9600);\n    controlMP3(0x09, 0x02); // Select uSD card for operation\n    delay(500);\n}\n\nvoid loop()\n{\n    switch (keypad.readKeypad()) // Read button status\n    {\n        case 7 : controlMP3(0x0D, 0); break; // Play\n        case 8 : controlMP3(0x0E, 0); break; // Pause\n        case 9 : controlMP3(0x02, 0); break; // Previous track\n        case 10 : controlMP3(0x01, 0); break; // Next track\n        case 11 : controlMP3(0x05, 0); break; // Volume down\n        case 12 : controlMP3(0x04, 0); break; // Volume up\n    }\n    delay(250);\n} \n```", "```\n// Project #29 - MP3 player sound board\n\n#define HEADER_START   0x7E\n#define HEADER_VERSION 0xFF\n#define TAIL_END       0xEF\n#define CMD_PLAY_NEXT  0x01\n#define CMD_PLAY_PREV  0x02\n#define CMD_PLAY_IDX   0x03\n\nint8_t commands[8] = {0, 0, 0, 0, 0, 0, 0, 0};\n// Holds command set to send to MP3\n#include <SoftwareSerial.h>\nSoftwareSerial MP3(2, 3); // Module TX to D2; module RX to D3\n#include <analogkeypad.h>\nanalogkeypad keypad;\n\nvoid controlMP3(int8_t command, int16_t data)\n{\n    commands[0] = 0x7E;\n    commands[1] = 0xFF;\n    commands[2] = 0x06;\n    commands[3] = command;\n    commands[4] = 0x00;\n    commands[5] = 0x01;\n    commands[6] = (int8_t)(data);\n    commands[7] = 0xEF;\n    for (int i = 0; i < 8; i++)\n    {\n        MP3.write(commands[i]);\n    }\n    delay(100);\n}\n\nvoid setup()\n{\n    MP3.begin(9600);\n    controlMP3(0x09, 0x02); // Select uSD card for operation\n    delay(500);\n}\n\nvoid loop()\n{\n    switch (keypad.readKeypad()) // Read button status\n    {\n ❶ case 1 : controlMP3(0x0F, 1); break; // Play 01/001001.mp3\n        case 2 : controlMP3(0x0F, 2); break; // Play 01/002002.mp3\n        case 3 : controlMP3(0x0F, 3); break; // Play 01/003003.mp3\n        case 4 : controlMP3(0x0F, 4); break; // And so on…\n        case 5 : controlMP3(0x0F, 5); break;\n        case 6 : controlMP3(0x0F, 6); break;\n        case 7 : controlMP3(0x0F, 7); break;\n        case 8 : controlMP3(0x0F, 8); break;\n        case 9 : controlMP3(0x0F, 9); break;\n        case 10 : controlMP3(0x0F, 10); break;\n        case 11 : controlMP3(0x0F, 11); break;\n        case 12 : controlMP3(0x0F, 12); break;\n    }\n    delay(250);\n} \n```", "```\n7E FF 06 0F 00 01 01 EF \n```"]