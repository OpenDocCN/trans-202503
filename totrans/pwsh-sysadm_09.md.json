["```\nfunction New-Thing {\n    param()\n    Write-Host \"Hi! I am in New-Thing\"\n}\n\nNew-Thing\n```", "```\nPS> $newThing = { Write-Host \"Hi! I am in a scriptblock!\" }\n```", "```\nPS> $newThing = { Write-Host \"Hi! I am in a scriptblock!\" }\nPS> $newThing\n Write-Host \"Hi! I am in a scriptblock!\"\n```", "```\nPS> & $newThing\nHi! I am in a scriptblock!\n```", "```\nPS> Invoke-Command\n\ncmdlet Invoke-Command at command pipeline position 1\nSupply values for the following parameters:\nScriptBlock:\n```", "```\nPS> Invoke-Command -ScriptBlock { hostname } -ComputerName WEBSRV1\nWEBSRV1\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -FilePath C:\\GetHostName.ps1\nWEBSRV1\n```", "```\nPS> $serverFilePath = 'C:\\File.txt'\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -ScriptBlock { Write-Host \"The value\nof foo is $serverFilePath\" }\nThe value of foo is\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -ScriptBlock { Write-Host \"The value\nof foo is $($args[0])\" } -ArgumentList $serverFilePath\nThe value of foo is C:\\File.txt\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -ScriptBlock { Write-Host \"The value\nof foo is $using:serverFilePath\" }\nThe value of foo is C:\\File.txt\n```", "```\nPS> New-PSSession -ComputerName WEBSRV1\n\n Id Name        ComputerName   ComputerType    State    ConfigurationName      Availability\n -- ----        ------------   ------------    -----    -----------------      ------------\n  3 WinRM3      WEBSRV1        RemoteMachine   Opened   Microsoft.PowerShell   Available\n```", "```\nPS> $session = Get-PSSession\nPS> $session\n\n Id    Name     ComputerName   ComputerType    State    ConfigurationName      Availability\n --    ----     ------------   ------------    -----    -----------------      ------------\n  6    WinRM6   WEBSRV1        RemoteMachine   Opened   Microsoft.PowerShell   Available\n```", "```\nPS> Invoke-Command -Session $session -ScriptBlock { hostname }\nWEBSRV1\n```", "```\nPS> Invoke-Command -Session $session -ScriptBlock { $foo = 'Please be here next time' }\nPS> Invoke-Command -Session $session -ScriptBlock { $foo }\nPlease be here next time\n```", "```\nPS> Enter-PSSession -ComputerName WEBSRV1\n[WEBSRV1]: PS C:\\Users\\Adam\\Documents>\n```", "```\nPS> $session = Get-PSSession -ComputerName websrv1\nPS> Invoke-Command -Session $session -ScriptBlock { $foo }\nInvoke-Command : Because the session state for session WinRM6, a617c702-ed92\n-4de6-8800-40bbd4e1b20c, websrv1 is not equal to Open, you cannot run a\ncommand in the session. The session state is Disconnected.\nAt line:1 char:1\n+ Invoke-Command -Session $session -ScriptBlock { $foo }\n--snip--\n```", "```\nPS> Get-PSSession | Disconnect-PSSession\n\nId Name          ComputerName   ComputerType    State          ConfigurationName    Availability\n-- ----          ------------   ------------    -----          -----------------    ------------\n 4 WinRM4        WEBSRV1        RemoteMachine   Disconnected   Microsoft.PowerShell None\n```", "```\nPS> Connect-PSSession -ComputerName websrv1\n[WEBSRV1]: PS>\n```", "```\nPS> $PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.1.15063.674\nPSEdition                      Desktop\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nBuildVersion                   10.0.15063.674\nCLRVersion                     4.0.30319.42000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -ScriptBlock { $PSVersionTable }\n\nName                           Value\n----                           -----\nPSRemotingProtocolVersion      2.2\nBuildVersion                   6.3.9600.16394\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0}\nPSVersion                      4.0\nCLRVersion                     4.0.30319.34014\nWSManStackVersion              3.0\nSerializationVersion           1.1.0.1\n```", "```\nPS> Get-PSSession | Remove-PSSession\nPS> Get-PSSession\n```", "```\nPS> Get-ChildItem -Path '\\\\dc\\c$'\n\n    Directory: \\\\dc\\c$\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----        10/1/2019  12:05 PM                FileShare\nd-----       11/24/2019   2:28 PM                inetpub\nd-----       11/22/2019   6:37 PM                InstallWindowsFeature\nd-----        4/16/2019   1:10 PM                Iperf\n```", "```\nPS> Enter-PSSession -ComputerName WEBSRV1\n[WEBSRV1]: PS> Get-ChildItem -Path '\\\\dc\\c$'\nls : Access is denied\n--snip--\n[WEBSRV1]: PS>\n```", "```\nPS> Enable-WSManCredSSP ❶-Role ❷Client ❸-DelegateComputer WEBSRV1 -Force\n\nCredSSP Authentication Configuration for WS-Management\nCredSSP authentication allows the user credentials on this computer to be sent\nto a remote computer. If you use CredSSP authentication for a connection to\na malicious or compromised computer, that machine will have access to your\nusername and password. For more information, see the Enable-WSManCredSSP Help\ntopic.\nDo you want to enable CredSSP authentication?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): y\n\ncfg         : http://schemas.microsoft.com/wbem/wsman/1/config/client/auth\nlang        : en-US\nBasic       : true\nDigest      : true\nKerberos    : true\nNegotiate   : true\nCertificate : true\nCredSSP     : true\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -ScriptBlock { Enable-WSManCredSSP -Role Server }\n\nCredSSP Authentication Configuration for WS-Management CredSSP authentication allows the server\nto accept user credentials from a remote computer. If you enable CredSSP authentication on the\nserver, the server will have access to the username and password of the\nclient computer if the client computer sends them. For more information, see the Enable-WSManCredSSP Help topic.\nDo you want to enable CredSSP authentication?\n[Y] Yes  [N] No  [?] Help (default is \"Y\"): y\n\n#text\n-----\nFalse\nTrue\nTrue\nFalse\nTrue\nRelaxed\n```", "```\nPS> Invoke-Command -ComputerName WEBSRV1 -ScriptBlock { Get-ChildItem -Path '\\\\dc\\c$'  } \n❶-Authentication Credssp ❷-Credential (Get-Credential)\n\ncmdlet Get-Credential at command pipeline position 1\nSupply values for the following parameters:\nCredential\n\n    Directory: \\\\dc\\c$\n\nMode                LastWriteTime         Length Name                            PSComputerName\n----                -------------         ------ ----                            --------------\nd-----        10/1/2019  12:05 PM                FileShare                       WEBSRV1\nd-----       11/24/2019   2:28 PM                inetpub                         WEBSRV1\nd-----       11/22/2019   6:37 PM                InstallWindowsFeature           WEBSRV1\nd-----        4/16/2019   1:10 PM                Iperf                           WEBSRV1\n```"]