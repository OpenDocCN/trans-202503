- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](Images/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Shortly after joining the staff of *USA Today*, I received a dataset that I
    would analyze almost every week for the next decade. It was the weekly Best-Selling
    Books list, which ranked the nation’s top-selling titles based on confidential
    sales data. Not only did the list produce an endless stream of story ideas to
    pitch, it also captured the zeitgeist of America in a singular way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Did you know that cookbooks sell a bit more during the week of Mother’s Day
    or that Oprah Winfrey turned many obscure writers into number-one best-selling
    authors just by having them on her show? Every week, the book list editor and
    I pored over the sales figures and book genres, ranking the data in search of
    a new headline. Rarely did we come up empty: we chronicled everything from the
    rocket-rise of the blockbuster *Harry Potter* series to the fact that *Oh, the
    Places You’ll Go!* by Dr. Seuss had become a perennial gift for new graduates.'
  prefs: []
  type: TYPE_NORMAL
- en: My technical companion in that time was the database programming language *SQL*
    (for *Structured Query Language*). Early on, I convinced *USA Today*’s IT department
    to grant me access to the SQL-based database system that powered our book list
    application. Using SQL, I was able to discover the stories hidden in the database,
    which contained sales data related to titles, authors, genres, and the codes that
    defined the publishing world.
  prefs: []
  type: TYPE_NORMAL
- en: SQL has been useful to me ever since, whether my role was in product development,
    in content strategy, or, lately, as a data editor for the *Wall Street Journal*.
    In each case, SQL has helped me find interesting stories in data—and that’s exactly
    what you’ll learn to do using this book.
  prefs: []
  type: TYPE_NORMAL
- en: What Is SQL?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SQL is a widely used programming language for managing data and database systems.
    Whether you’re a marketing analyst, a journalist, or a researcher mapping neurons
    in the brain of a fruit fly, you’ll benefit from using SQL to collect, modify,
    explore, and summarize data.
  prefs: []
  type: TYPE_NORMAL
- en: Because SQL is a mature language that’s been around for decades, it’s ingrained
    in many modern systems. A pair of IBM researchers first outlined the syntax for
    SQL (then called SEQUEL) in a 1974 paper, building on the theoretical work of
    the British computer scientist Edgar F. Codd. In 1979, a precursor to the database
    company Oracle (then called Relational Software) became the first to use the language
    in a commercial product. Today, SQL still ranks as one of the most-used computer
    languages in the world, and that’s unlikely to change soon.
  prefs: []
  type: TYPE_NORMAL
- en: Each database system, such as PostgreSQL, MySQL or Microsoft SQL Server, implements
    its own variant of SQL, so you’ll notice subtle—or sometimes significant—differences
    in syntax if you jump from one system to another. There are several reasons behind
    this. The American National Standards Institute (ANSI) adopted a standard for
    SQL in 1986, followed by the International Organization for Standardization (ISO)
    in 1987\. But the standard doesn’t cover all aspects of SQL that are required
    for a database implementation—for example, it has no entry for creating indexes.
    That leaves each database system maker to choose how to implement features the
    standard doesn’t cover—and no database maker currently claims to conform to the
    entire standard.
  prefs: []
  type: TYPE_NORMAL
- en: Meanwhile, business considerations can lead commercial database vendors to create
    nonstandard SQL features for both competitive advantage and as a way to keep users
    in their ecosystem. For example, Microsoft’s SQL Server uses the proprietary Transact-SQL
    (T-SQL) that includes a number of features not in the SQL standard, such as its
    syntax for declaring local variables. Migrating code written using T-SQL to another
    database system may not be trivial, therefore.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, the examples and code use the PostgreSQL database system. PostgreSQL,
    or simply Postgres, is a robust application that can handle large amounts of data.
    Here are some reasons PostgreSQL is a great choice to use with this book:'
  prefs: []
  type: TYPE_NORMAL
- en: It’s free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s available for Windows, macOS, and Linux operating systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its SQL implementation aims to closely follow the SQL standard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s widely used, so finding help online is easy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its geospatial extension, PostGIS, lets you analyze geometric data and perform
    mapping functions and is often used with mapping software such as QGIS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s available in cloud computing environments such as Amazon Web Services and
    Google Cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s a common choice as a data store for web applications, including those powered
    by the popular web framework Django.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The good news is that the fundamental concepts and much of the core SQL syntactical
    conventions of PostgreSQL will work across databases. So, if you’re using MySQL
    at work, you can employ much of what you learn here—or easily find parallel code
    concepts. When syntax is PostgreSQL-specific, I make sure to point that out. If
    you need to learn the SQL syntax of a system with features that deviate from the
    standard, such as Microsoft SQL Server’s T-SQL, you may want to further explore
    a resource focusing on that system.
  prefs: []
  type: TYPE_NORMAL
- en: Why SQL?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SQL certainly isn’t the only option for crunching data. Many people start with
    Microsoft Excel spreadsheets and their assortment of analytic functions. After
    working with Excel, they might graduate to Access, the database system built into
    some versions of Microsoft Office, which has a graphical query interface that
    makes it easy to get work done. So why learn SQL?
  prefs: []
  type: TYPE_NORMAL
- en: One reason is that Excel and Access have their limits. Excel currently allows
    1,048,576 rows maximum per worksheet. Access limits database size to two gigabytes
    and limits columns to 255 per table. It’s not uncommon for datasets to surpass
    those limits. The last obstacle you want to discover while facing a deadline is
    that your database system doesn’t have the capacity to get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: Using a robust SQL database system allows you to work with terabytes of data,
    multiple related tables, and thousands of columns. It gives you fine-grained control
    over the structure of your data, leading to efficiency, speed, and—most important—accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: SQL is also an excellent adjunct to programming languages used in the data sciences,
    such as R and Python. If you use either language, you can connect to SQL databases
    and, in some cases, even incorporate SQL syntax directly into the language. For
    people with no background in programming languages, SQL often serves as an easy-to-understand
    introduction into concepts related to data structures and programming logic.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, SQL is useful beyond data analysis. If you delve into building online
    applications, you’ll find that databases provide the backend power for many common
    web frameworks, interactive maps, and content management systems. When you need
    to dig beneath the surface of these applications, the ability to manage data and
    databases with SQL will come in very handy.
  prefs: []
  type: TYPE_NORMAL
- en: Who Is This Book For?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Practical SQL* is for people who encounter data in their everyday lives and
    want to learn how to analyze, manage, and transform it. With that in mind, we
    cover real-world data and scenarios, such as US Census demographics, crime reports,
    and data about taxi rides in New York City. We aim to understand not only how
    SQL works but how we can use it to find valuable insights.'
  prefs: []
  type: TYPE_NORMAL
- en: This book was written with people new to programming in mind, so the early chapters
    cover key basics about databases, data, and SQL syntax. Readers with some SQL
    experience should benefit from later chapters that cover more advanced topics,
    such as Geographical Information Systems (GIS). I assume that you know your way
    around your computer, including how to install programs, navigate your hard drive,
    and download files from the internet, but I don’t assume you have any experience
    with programming or data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: What You’ll Learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Practical SQL* starts with a chapter on setting up your system and getting
    the code and data examples and then moves through the basics of databases, queries,
    tables, and data that are common to SQL across many database systems. Chapters
    14 to 19 cover topics more specific to PostgreSQL, such as full-text search, functions,
    and GIS. Although many chapters in this book can stand alone, you should work
    through the book sequentially to build on the fundamentals. Datasets presented
    in early chapters often reappear later, so following the book in order will help
    you stay on track.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following summary provides more detail about each chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 1: Setting Up Your Coding Environment** walks through setting up
    PostgreSQL, the pgAdmin user interface, and a text editor, plus how to download
    example code and data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 2: Creating Your First Database and Table** provides step-by-step
    instructions for the process of loading a simple dataset about teachers into a
    new database.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 3: Beginning Data Exploration with SELECT** explores basic SQL query
    syntax, including how to sort and filter data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 4: Understanding Data Types** explains the definitions for setting
    columns in a table to hold specific types of data, from text to dates to various
    forms of numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 5: Importing and Exporting Data** explains how to use SQL commands
    to load data from external files and then export it. You’ll load a table of US
    Census population data that you’ll use throughout the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 6: Basic Math and Stats with SQL** covers arithmetic operations and
    introduces aggregate functions for finding sums, averages, and medians.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 7: Joining Tables in a Relational Database** explains how to query
    multiple, related tables by joining them on key columns. You’ll learn how and
    when to use different types of joins.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 8: Table Design that Works for You** covers how to set up tables
    to improve the organization and integrity of your data as well as how to speed
    up queries using indexes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 9: Extracting Information by Grouping and Summarizing** explains
    how to use aggregate functions to find trends in US library usage based on annual
    surveys.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 10: Inspecting and Modifying Data** explores how to find and fix
    incomplete or inaccurate data using a collection of records about meat, egg, and
    poultry producers as an example.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 11: Statistical Functions in SQL** introduces correlation, regression,
    ranking, and other functions to help you derive more meaning from datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 12: Working with Dates and Times** explains how to create, manipulate,
    and query dates and times in your database, including working with time zones
    and with data about New York City taxi trips and Amtrak train schedules.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 13: Advanced Query Techniques** explains how to use more complex
    SQL operations such as subqueries and cross tabulations, plus the `CASE` statement,
    to reclassify values in a dataset on temperature readings.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 14: Mining Text to Find Meaningful Data** covers how to use PostgreSQL’s
    full-text search engine and regular expressions to extract data from unstructured
    text, using police reports and a collection of speeches by US presidents as examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 15: Analyzing Spatial Data with PostGIS** introduces data types and
    queries related to spatial objects, which will let you analyze geographical features
    such as counties, roads, and rivers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 16: Working with JSON Data** introduces the JavaScript Object Notation
    (JSON) data format and uses data about movies and earthquakes to explore PostgreSQL
    JSON support.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 17: Saving Time with Views, Functions, and Triggers** explains how
    to automate database tasks so you can avoid repeating routine work.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 18: Using PostgreSQL from the Command Line** covers how to use text
    commands at your computer’s command prompt to connect to your database and run
    queries.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 19: Maintaining Your Database** provides tips and procedures for
    tracking the size of your database, customizing settings, and backing up data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 20: Telling Your Data’s Story** provides guidelines for generating
    ideas for analysis, vetting data, drawing sound conclusions, and presenting your
    findings clearly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix: Additional PostgreSQL Resources** lists software and documentation
    to help you grow your skills.'
  prefs: []
  type: TYPE_NORMAL
- en: Each chapter ends with a “Try It Yourself” section that contains exercises to
    help you reinforce the topics you learned.
  prefs: []
  type: TYPE_NORMAL
- en: Ready? Let’s begin with Chapter 1, “Setting Up Your Coding Environment.”
  prefs: []
  type: TYPE_NORMAL
