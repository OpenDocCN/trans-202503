- en: 7 Tiny Desktop Greenhouse
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7 微型桌面温室
- en: Greenhouses come in all shapes and sizes, from tiny indoor greenhouses made
    from plastic sheeting to large industrial greenhouses that span thousands of square
    feet. Not everyone wants a full-size greenhouse, though, so in this project you’ll
    build a smaller-scale model that can sit on your desk ([Figure 7-1](ch07.xhtml#ch07fig01)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 温室有各种形状和大小，从由塑料薄膜制成的小型室内温室到占地几千平方英尺的大型工业温室应有尽有。然而，并非每个人都想要一个全尺寸的温室，因此在本项目中，你将构建一个较小的模型，可以放在桌面上（见[图
    7-1](ch07.xhtml#ch07fig01)）。
- en: '**FIGURE 7-1:** The Tiny Desktop Greenhouse'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-1：** 微型桌面温室'
- en: '![Image](../images/fig7_1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_1.jpg)'
- en: In a traditional greenhouse, the panes of transparent glass or plastic allow
    light energy in to heat up the interior of the greenhouse, and the greenhouse
    is sealed to trap that warm air inside, resulting in an overall increase in temperature.
    The danger, of course, is that a greenhouse might become *too* hot. To regulate
    temperature, many greenhouses have fans and *autovents* that open windows at the
    top of the greenhouse to ventilate when it gets too hot.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的温室中，透明玻璃或塑料窗格允许光能进入，来加热温室的内部，而温室被密封以困住温暖的空气，从而导致整体温度的升高。当然，危险在于温室可能会变得*过于*炎热。为了调节温度，许多温室配有风扇和*自动通风口*，当温室内温度过高时，自动开启顶部的窗户以通风。
- en: Your greenhouse will also have an autovent. You’ll build a greenhouse controller
    that will monitor the temperature, and if it gets too warm, a window will open
    and a fan will turn on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你的温室也将配备一个自动通风口。你将构建一个温室控制器，监测温度，如果温度过高，窗户将打开，风扇将启动。
- en: '**THE GREENHOUSE EFFECT**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**温室效应**'
- en: Greenhouses are warm enough to grow veggies year round because they’re able
    to trap and store energy. Earth’s atmosphere works similar to a greenhouse. Heat
    from the sun is radiated by the earth and then reflected and captured by the atmosphere.
    This unique property is known as the *greenhouse effect*, and it’s responsible
    for keeping the temperature of our planet temperate and livable. Without it, the
    temperature of our planet would average near 0 degrees Fahrenheit (–18 degrees
    Celsius)!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 温室足够温暖，可以全年种植蔬菜，因为它们能够捕捉并储存能量。地球的大气层类似于温室。太阳的热量由地球辐射出来，然后被大气层反射并捕获。这种独特的特性被称为*温室效应*，它负责保持我们星球的温度适宜并宜居。如果没有它，我们星球的温度将接近0华氏度（–18摄氏度）！
- en: Another common example of the greenhouse effect is a car in the middle of the
    summer. With the windows closed, the temperature inside the car can rise 20 to
    30 degrees higher than the outside temperature. This is why you should never leave
    your pets in the car—especially in the summer!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 温室效应的另一个常见例子是夏天中午的汽车。若车窗关闭，车内温度可以比外部温度高出20到30度。这就是为什么你绝对不能把宠物留在车内——尤其是在夏天！
- en: '**MATERIALS TO GATHER**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**收集材料**'
- en: 'To lift the autovent, this project uses a servo motor similar to the one you
    used for the Balance Beam in [Project 6](ch06.xhtml#ch06). We’ll also introduce
    three new parts in this project: a small DC hobby motor for the fan, a *transistor*
    to control the motor, and a *temperature sensor* to detect the temperature inside
    the greenhouse.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提升自动通风口，本项目使用了一种与[第6项目](ch06.xhtml#ch06)中平衡梁使用的伺服电机类似的电机。我们还将在这个项目中介绍三种新零件：用于风扇的小型直流电机，*晶体管*用来控制电机，以及*温度传感器*用来检测温室内的温度。
- en: As you gather your parts, you’ll find that the transistor and the temperature
    sensor look very similar—they’re both small, threelegged devices that have a round,
    black plastic end with a flat edge (see [Figure 7-2](ch07.xhtml#ch07fig02)). To
    differentiate between them, tilt the flat edge against a light source, and you
    should see some printing; the temperature sensor should have the letters *TMP*
    marked on it. Gather your parts, shown in [Figures 7-3](ch07.xhtml#ch07fig03)
    and [7-4](ch07.xhtml#ch07fig04), and let’s get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你收集零件时，你会发现晶体管和温度传感器非常相似——它们都是小巧的三脚设备，带有一个圆形的黑色塑料端，边缘是平的（见[图 7-2](ch07.xhtml#ch07fig02)）。为了区分它们，可以将平边对准光源，你应该能看到一些印刷标记；温度传感器上应标有字母*TMP*。收集好零件，见[图
    7-3](ch07.xhtml#ch07fig03)和[7-4](ch07.xhtml#ch07fig04)，然后我们开始吧！
- en: '**FIGURE 7-2:** TMP36 temperature sensor (left) and 2N2222 transistor (right)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-2：** TMP36温度传感器（左）和2N2222晶体管（右）'
- en: '![Image](../images/fig7_2.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_2.jpg)'
- en: '**Electronic Parts**'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子元件**'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个SparkFun RedBoard（DEV-13975）、Arduino Uno（DEV-11021）或任何其他兼容Arduino的板子
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根USB Mini-B电缆（CAB-11301或你板子的USB电缆）
- en: • One solderless breadboard (PRT-12002)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个无焊面包板（PRT-12002）
- en: • One 330 Ω resistor (COM-08377, or COM-11507 for a pack of 20)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个330Ω电阻（COM-08377，或COM-11507，包含20个包装）
- en: • One diode (COM-08588)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个二极管（COM-08588）
- en: • One NPN transistor—2N2222 or BC337 (COM-13689)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个NPN晶体管—2N2222或BC337（COM-13689）
- en: • One TMP36 temperature sensor (SEN-10988)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个TMP36温度传感器（SEN-10988）
- en: • One hobby motor (ROB-11696)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个爱好电机（ROB-11696）
- en: '**NOTE**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The parts marked with an asterisk (*) do not come with the standard SparkFun
    Inventor’s Kit but are available in the separate add-on kit.*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*带星号（*）的零件不包含在标准SparkFun发明者套件中，但可以在单独的附加套件中找到。*'
- en: • One submicro size servo motor (ROB-09065)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • 一个亚微型伺服电机（ROB-09065）
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • 男对男跳线（PRT-11026）
- en: • Male-to-female jumper wires (PRT-09140*)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • 男对母跳线（PRT-09140*）
- en: '**FIGURE 7-3:** Components for the Tiny Desktop Greenhouse'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-3：** 微型桌面温室的组件'
- en: '![Image](../images/fig7_3.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_3.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: • Pencil (not shown)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • 铅笔（未显示）
- en: • Craft knife
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: • 工艺刀
- en: • Metal ruler
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属尺
- en: • Ruler
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: • 尺子
- en: • Needle-nose pliers
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: • 尖嘴钳
- en: • Wire cutters
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: • 线剪
- en: • Glue (hot glue gun or craft glue)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或工艺胶水）
- en: • Masking tape (not shown)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: • 遮蔽胶带（未显示）
- en: • Cardboard (approximately one 11 × 17-inch piece or three 8.5 × 11-inch pieces)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: • 纸板（约一张11 × 17英寸或三张8.5 × 11英寸的纸）
- en: • Enclosure template (see [Figure 7-18](ch07.xhtml#ch07fig18) on page [208](ch07.xhtml#page_208))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: • 外壳模板（请参见[图7-18](ch07.xhtml#ch07fig18)和第[208](ch07.xhtml#page_208)页）
- en: • 1 sheet (8.5 × 11 inches) transparency film (not shown)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: • 一张透明胶片（8.5 × 11英寸，未显示）
- en: • 1 medium-size paper clip (not shown)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 1个中型回形针（未显示）
- en: '**FIGURE 7-4:** Recommended tools and materials'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-4：** 推荐的工具和材料'
- en: '![Image](../images/fig7_4.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_4.jpg)'
- en: '**NEW COMPONENTS**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**新组件**'
- en: First, let’s take a look at the new components, starting with the temperature
    sensor.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看一下新的组件，从温度传感器开始。
- en: '**TMP36 Temperature Sensor**'
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**TMP36温度传感器**'
- en: You already know how to measure light levels. With this nifty sensor, you’ll
    be able to measure temperature as well. The TMP36 is one of the easiest temperature
    sensors to use. The sensor itself is encased in a small plastic shell shaped like
    a cylinder with a flat edge, and it has just three pins. (Remember to tilt the
    flat edge against the light to identify the letters *TMP* so you don’t mix it
    up with the transistor. If it says 2N2222 or anything else, it’s the wrong part.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道如何测量光照强度。通过这个小巧的传感器，你还可以测量温度。TMP36是最容易使用的温度传感器之一。传感器本身被封装在一个小型塑料外壳中，形状像一个带平边的圆柱体，并且只有三个引脚。（记得将平边朝向光源，以便识别字母*TMP*，这样就不会将其与晶体管混淆。如果显示的是2N2222或其他内容，那就是错误的部件。）
- en: When properly connected to power, the TMP36 sensor will produce a voltage that
    is directly proportional to the temperature it senses. Similar to how you measured
    the light level in [Project 5](ch05.xhtml#ch05) or the position of the potentiometer
    in [Project 6](ch06.xhtml#ch06), you can use `analogRead()` to measure the voltage
    on this sensor. We’ll show you how to convert this voltage to a temperature reading
    in this project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正确连接电源后，TMP36传感器将产生与其所感应的温度成正比的电压。类似于你在[项目5](ch05.xhtml#ch05)中测量光照强度或在[项目6](ch06.xhtml#ch06)中测量电位器位置的方式，你可以使用`analogRead()`来测量该传感器上的电压。我们将在本项目中展示如何将该电压转换为温度读数。
- en: '**Standard Hobby Motor**'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**标准爱好电机**'
- en: To move air through the greenhouse, you’ll build a fan using a small hobby motor,
    as shown in [Figure 7-5](ch07.xhtml#ch07fig05). This is the simplest type of motor
    available. When you connect its two wires to a power source, the motor spins,
    and when you reverse the connections, the motor spins in the opposite direction.
    Unlike the servo motor that you used in [Project 6](ch06.xhtml#ch06), the hobby
    motor spins continuously. The hobby motor works with a voltage between 3V and
    6V, so it’s perfect for Arduino projects.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让空气流动穿过温室，你将使用一个小型爱好者电机来制作风扇，如[图7-5](ch07.xhtml#ch07fig05)所示。这是最简单类型的电机。当你将它的两根电线连接到电源时，电机会旋转，反向连接时，电机会朝相反方向旋转。不同于你在[项目6](ch06.xhtml#ch06)中使用的伺服电机，这个爱好者电机会连续旋转。爱好者电机工作电压在3V到6V之间，所以非常适合Arduino项目。
- en: '**FIGURE 7-5:** Standard DC hobby motor'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-5：** 标准直流爱好电机'
- en: '![Image](../images/fig7_5.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_5.jpg)'
- en: '**NPN Transistor**'
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**NPN晶体管**'
- en: The invention of the transistor made it possible to create all kinds of digital
    devices. For example, the microcontroller on the Arduino is actually made up of
    millions of transistors. Transistors are part of a family of components called
    *semiconductors*. A semiconductor is a device that sometimes behaves like a conductor,
    allowing current to flow, and other times acts like an insulator, preventing current
    from flowing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 晶体管的发明使得创造各种数字设备成为可能。例如，Arduino上的微控制器实际上由数百万个晶体管组成。晶体管属于一类叫做*半导体*的元件。半导体是一种设备，它有时表现得像导体，允许电流流动，而有时像绝缘体一样，阻止电流流动。
- en: This project uses the transistor like a switch by boosting the Arduino’s amp
    output. The hobby motor uses about 200–300 mA of current, but the Arduino `OUTPUT`
    pins are only capable of sourcing about 40 mA of current. Using a simple transistor
    circuit, we’ll show you how to use the low-current Arduino pin to trigger the
    transistor to open or close, just like a switch.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目通过提升Arduino的电流输出，使用晶体管像开关一样工作。爱好者电机大约需要200-300 mA的电流，但Arduino的`OUTPUT`引脚最多只能提供约40
    mA的电流。通过一个简单的晶体管电路，我们将向你展示如何使用低电流的Arduino引脚触发晶体管开关，像开关一样打开或关闭。
- en: '**TAKING A SYSTEMS APPROACH**'
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**采用系统化方法**'
- en: For the sake of organization, you’ll build this project as three separate parts,
    or subsystems. This technique, known as a *systems approach*, is used by engineers
    to separate a complex project into manageable sections that can each be built
    and tested individually. The main components of the three different parts are
    the temperature sensor, the servo motor (for the autovent), and the DC motor (for
    the fan). A schematic of the three parts is shown in [Figure 7-6](ch07.xhtml#ch07fig06),
    and a wiring diagram of the compiled project is shown in [Figure 7-7](ch07.xhtml#ch07fig07).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了组织起见，你将把这个项目分成三个独立的部分或子系统来构建。这种被称为*系统化方法*的技术，工程师用来将一个复杂的项目分解成几个可以单独构建和测试的可管理部分。三个不同部分的主要组件是温度传感器、伺服电机（用于自动通风）和直流电机（用于风扇）。这三部分的原理图如[图7-6](ch07.xhtml#ch07fig06)所示，整个项目的接线图如[图7-7](ch07.xhtml#ch07fig07)所示。
- en: '**FIGURE 7-6:** Schematic diagram of the circuit'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-6：** 电路的原理图'
- en: '![Image](../images/fig7_6.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_6.jpg)'
- en: '**FIGURE 7-7:** Wiring diagram of the circuit'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-7：** 电路的接线图'
- en: '![Image](../images/fig7_7.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_7.jpg)'
- en: '**BUILD THE TEMPERATURE MONITOR**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建温度监控器**'
- en: First let’s take a look at the part of the greenhouse control system that will
    measure temperature. There are a lot of different temperature sensors out there.
    A few common types that you might encounter are *thermistors*, which change resistance
    based on temperature, and *thermocouples*, which output a really small voltage
    (less than 10 mV) and require an amplifier circuit to use. The TMP36 device is
    a third type of sensor that simply outputs a voltage calibrated to be 0.75 V at
    25 degrees Celsius. The voltage then varies linearly based on the temperature
    of its surroundings. This means that as the temperature changes the voltage changes
    accordingly, as shown in [Figure 7-8](ch07.xhtml#ch07fig08).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看一下温室控制系统中用于测量温度的部分。市面上有许多不同的温度传感器。你可能会遇到几种常见类型，比如*热敏电阻*，它根据温度变化电阻值，和*热电偶*，它输出一个非常小的电压（低于10
    mV），并需要一个放大器电路来使用。TMP36是一种第三类传感器，它简单地输出一个电压，经过校准，在25摄氏度时为0.75 V。随后，电压会根据周围环境的温度线性变化。这意味着随着温度变化，电压也会相应变化，如[图7-8](ch07.xhtml#ch07fig08)所示。
- en: '**FIGURE 7-8:** The linear temperature versus voltage response of the TMP36
    sensor'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-8：** TMP36传感器的线性温度与电压响应'
- en: '![Image](../images/fig7_8.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_8.jpg)'
- en: '**Measure Temperature with the TMP36**'
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**使用TMP36测量温度**'
- en: The TMP36 is one of the easiest temperature sensors to use. The sensor is encased
    in a small plastic shell shaped like a cylinder with a flat edge and has just
    three pins.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: TMP36是最容易使用的温度传感器之一。该传感器被封装在一个小塑料外壳中，外形像一个带有平边的圆柱体，并且只有三个引脚。
- en: As we mentioned earlier, the TMP36 looks very similar to the transistor, which
    also comes in the SparkFun Inventor’s Kit, so check the flat side of the component
    by tilting it at an angle under a light source, and look for the letters *TMP*.
    If it says *2N2222* or anything else, it’s the wrong part.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，TMP36与晶体管非常相似，而晶体管也包含在SparkFun发明家套件中，因此通过在光源下倾斜部件并检查其平面边缘，查看是否有*TMP*字母。如果是*2N2222*或其他字母，则表示该部件不正确。
- en: The TMP36 provides a voltage output directly related to the temperature in Celsius
    of its surroundings. Since you already know how to measure voltages using the
    `analogRead()` command, this sensor will be easy to use.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: TMP36 提供的电压输出与周围环境的摄氏温度直接相关。既然你已经知道如何使用 `analogRead()` 命令测量电压，那么这个传感器就容易使用了。
- en: The outer pins are for ground and power connections, and the center pin is the
    voltage signal for the sensor. To use the TMP36, simply connect one pin to 5 V,
    one pin to ground, and the sensing pin to an Arduino analog pin to read the temperature.
    Pay attention to how you connect the sensor. With the flat edge facing to the
    left, the top pin should connect to 5 V and the bottom pin should connect to ground.
    At 25 degrees Celsius, the sensing pin will have a voltage reading of 0.750 V
    (750 mV). As the temperature changes, the voltage on this pin will change at a
    rate of 0.010 V (10 mV) per degree Celsius. Now, this might seem like a lot of
    math-speak, but we’ll show you how to use this information to get an actual temperature
    reading in your code and convert it to degrees Fahrenheit. But first, let’s wire
    it up.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 外侧引脚用于接地和电源连接，中间的引脚是传感器的电压信号。要使用 TMP36，只需将一个引脚连接到 5 V，一个引脚连接到地线，感应引脚连接到 Arduino
    模拟引脚以读取温度。请注意传感器的连接方式。当平面朝左时，顶部引脚应连接到 5 V，底部引脚应连接到地线。在 25 摄氏度时，感应引脚的电压读数将为 0.750
    V（750 毫伏）。随着温度变化，该引脚的电压将按每摄氏度 0.010 V（10 毫伏）的速率变化。现在，这些数字听起来可能有些复杂，但我们将向你展示如何使用这些信息在代码中获取实际的温度读数，并将其转换为华氏度。不过，在此之前，我们先进行接线。
- en: '**Connect the Temperature Sensor**'
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接温度传感器**'
- en: '[Figure 7-9](ch07.xhtml#ch07fig09) shows the temperature monitor circuit wired
    up on its own. Most of your components will be on the right side of the breadboard,
    so connect a jumper wire from 5 V and GND on the Arduino board directly to the
    power rails on the right side of the breadboard. Next, insert the TMP36 sensor
    into the lower portion of the breadboard, with the flat side of the sensor facing
    left, as shown in [Figure 7-9](ch07.xhtml#ch07fig09).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-9](ch07.xhtml#ch07fig09) 显示了温度监测电路的单独接线。你大部分的元件将位于面包板的右侧，因此需要将 Arduino
    板上的 5 V 和 GND 通过跳线直接连接到面包板右侧的电源轨。接着，将 TMP36 传感器插入面包板的下半部分，确保传感器的平面朝左，如 [图 7-9](ch07.xhtml#ch07fig09)
    所示。'
- en: '**FIGURE 7-9:** Simplified wiring diagram showing only the temperature sensor'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-9：** 显示只有温度传感器的简化接线图'
- en: '![Image](../images/fig7_9.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_9.jpg)'
- en: Next, use two short jumper wires to connect the TMP36 sensor’s top pin to 5
    V and lower pin to ground, making sure the flat side is facing left. The middle
    pin is the output voltage of the sensor. Run a jumper wire from this pin to pin
    A0 on the Arduino board, and that’s it!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用两根短跳线将 TMP36 传感器的顶部引脚连接到 5 V，将底部引脚连接到地线，确保平面朝左。中间的引脚是传感器的输出电压。将这根引脚通过跳线连接到
    Arduino 板的 A0 引脚，就完成了！
- en: Now let’s take a look at a code example to see how to get temperature readings
    from this sensor.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看一个代码示例，了解如何从这个传感器获取温度读数。
- en: '**Program the Temperature Sensor**'
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编程温度传感器**'
- en: 'The TMP36 sensor produces a voltage output relative to the ambient temperature.
    The datasheet for the TMP36 gives a couple of reference points for converting
    the voltage reading to a temperature: it shows that the voltage changes at a rate
    of 0.010 V per degree Celsius and that at 25 degrees Celsius, the sensor has a
    voltage of 0.750 V. Using this information, if you measure the output voltage
    from the sensor, you can convert this into a temperature reading in the code.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: TMP36 传感器根据环境温度产生电压输出。TMP36 的数据手册提供了将电压读数转换为温度的几个参考点：它显示电压变化率为每摄氏度 0.010 V，在
    25 摄氏度时，传感器的电压为 0.750 V。利用这些信息，如果你测量传感器的输出电压，你可以在代码中将其转换为温度读数。
- en: You may recall from [Project 5](ch05.xhtml#ch05) that the `analogRead()` function
    reads voltage as a whole number, with `1023` for an input of 5 V and `0` for 0
    V. To make sense of this, you’ll need to convert that number to a voltage, then
    convert that voltage to degrees Celsius, and finally translate that value into
    Fahrenheit. To keep the code clean, you’ll first write a custom function to do
    the conversion from the raw `analogRead()` number to volts.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得 [项目 5](ch05.xhtml#ch05) 中提到的，`analogRead()` 函数将电压读取为整数，其中 5 V 对应 `1023`，0
    V 对应 `0`。为了理解这个数值，你需要将其转换为电压，再将电压转换为摄氏度，最后将其转换为华氏度。为了让代码更简洁，首先你需要编写一个自定义函数，将原始的
    `analogRead()` 数字转换为电压。
- en: '**Create a Custom Conversion Function**'
  id: totrans-81
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建自定义转换函数**'
- en: '[Listing 7-1](ch07.xhtml#ch07ex01) shows an example of a custom function that
    will convert the raw `analogRead()` value and report back an answer that’s been
    converted to volts.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 7-1](ch07.xhtml#ch07ex01)展示了一个自定义函数的例子，该函数会将原始的`analogRead()`值转换并返回转换后的电压值。'
- en: '**LISTING 7-1:** Custom function `volts()` to convert from raw analog value
    to voltage'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 7-1：** 自定义函数`volts()`将原始模拟值转换为电压'
- en: '[PRE0]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In [Project 3](ch03.xhtml#ch03), we showed you how to write your own custom
    functions to shorten your code and make the `loop()` easier to read. In those
    examples, the data type of the function was always set as `void` because the function
    didn’t report back a value. In this case, you’ll want the function to report back
    the conversion of `analogRead()` to volts, so you’ll have to specify a data type.
    Use the data type `float` ➊, because you’ll want this function to return the voltage
    with as many decimal places as possible for accuracy. Name the function `volts`
    ➋, to be as descriptive yet concise as possible, and then define the parameter(s)
    ➌ that you pass to this function. In this example, it is the raw value from `analogRead()`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[项目 3](ch03.xhtml#ch03)中，我们展示了如何编写自己的自定义函数，以简化代码并使`loop()`更易于阅读。在这些示例中，函数的数据类型始终设置为`void`，因为这些函数没有返回值。在这种情况下，你希望函数能够返回从`analogRead()`转换为电压的结果，因此需要指定数据类型。使用数据类型`float`
    ➊，因为你希望此函数返回尽可能精确的小数位数。命名该函数为`volts` ➋，以使其尽可能简洁又具有描述性，然后定义传递给此函数的参数 ➌，在这个例子中，它就是来自`analogRead()`的原始值。
- en: The math needed to convert between raw `analogRead()` and voltage is pretty
    straightforward since, as we mentioned earlier, we already know that the `analogRead()`
    function returns `1023` for an input of 5 V and `0` for 0 V. This means that an
    `analogRead()` value of `1023` would be equal to 5 V. The custom `volts()` function
    uses this ratio to convert a raw `analogRead()` measurement to a voltage.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 将原始的`analogRead()`值转换为电压所需的数学计算非常简单，因为正如我们之前提到的，我们已经知道`analogRead()`函数在输入5 V时返回`1023`，在输入0
    V时返回`0`。这意味着`analogRead()`的值`1023`等于5 V。自定义的`volts()`函数利用这个比率将原始的`analogRead()`测量值转换为电压。
- en: '**NOTE**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*It’s common practice to use ALL CAPS to designate objects or names that are
    constants.*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*通常的做法是使用全大写字母来表示常量或常量名称。*'
- en: First, declare a variable to use as a reference, named `AREF` ➍, and use this
    to define the reference voltage, which is 5.0 V. Because you’ll want to use it
    throughout the code, set it as a constant using the keyword `const`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，声明一个作为引用使用的变量，命名为`AREF` ➍，并用它来定义参考电压，即5.0 V。由于你将在整个代码中使用它，因此使用`const`关键字将其设置为常量。
- en: Next, you’ll define a variable to store the result of the conversion, named
    `calculatedVolts` ➎. Notice that the data type for this variable is set as a `float`
    as well. You’ll want to make sure that any math you perform is accurate beyond
    whole numbers. To calculate the voltage, simply multiply the `rawCount` by the
    ratio of `AREF` (5.0 V) to 1,023 ➏.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将定义一个变量来存储转换结果，命名为`calculatedVolts` ➎。注意，这个变量的数据类型也设置为`float`。你需要确保进行的数学运算在整数之外的部分也足够精确。为了计算电压，只需将`rawCount`乘以`AREF`（5.0
    V）与1023的比率 ➏。
- en: The `return` instruction ➐ is a command we haven’t used in the previous projects.
    When the sketch gets to the `return` instruction, it exits the custom `volts()`
    function and *returns* to the point in the code where it was called. When you
    put a value after the `return` instruction, the function returns and reports back
    that value. The `return` data type must match the data type of the function. For
    all the functions we’ve used to this point, we didn’t bother to include `return`,
    because those functions were defined as `void` data types and did not report back
    a value. Here, the `return` instruction is followed by the variable `calculatedVolts`
    ➑. This tells the sketch to report the value of `calculatedVolts` back to the
    point in the code where it was called.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`return`指令 ➐ 是我们在之前的项目中没有使用过的命令。当程序执行到`return`指令时，它会退出自定义的`volts()`函数，并*返回*到调用该函数的代码位置。当你在`return`指令后面放置一个值时，函数会返回并报告该值。`return`的数据类型必须与函数的数据类型匹配。到目前为止，我们使用的所有函数都没有包含`return`，因为这些函数的定义数据类型是`void`，并且没有返回值。在这里，`return`指令后跟着变量`calculatedVolts`
    ➑，这告诉程序返回`calculatedVolts`的值到调用它的代码位置。'
- en: Note that the `return` instruction can also be used with functions that have
    a `void` data type to instruct the sketch to leave the function and return. In
    that case, `return` is left blank with no value following it (see [Listing 7-2](ch07.xhtml#ch07ex02)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`return`指令也可以与具有`void`数据类型的函数一起使用，以指示草图退出该函数并返回。在这种情况下，`return`后面没有值（参见[Listing
    7-2](ch07.xhtml#ch07ex02)）。
- en: '**LISTING 7-2:** A custom function with a `void` data type and a `return` instruction'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 7-2：** 一个带有`void`数据类型和`return`指令的自定义函数'
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Test the Function**'
  id: totrans-95
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**测试该函数**'
- en: Let’s test the new `volts()` function with an example sketch. Add a few lines
    in `setup()` and `loop()` to the code from [Listing 7-1](ch07.xhtml#ch07ex01)
    to read the voltage on pin A0, and print it to the Serial Monitor. The complete
    code example is shown in [Listing 7-3](ch07.xhtml#ch07ex03).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个示例草图来测试新的`volts()`函数。在[Listing 7-1](ch07.xhtml#ch07ex01)的代码中，向`setup()`和`loop()`添加几行，读取
    A0 引脚上的电压，并将其打印到串口监视器。完整的代码示例见[Listing 7-3](ch07.xhtml#ch07ex03)。
- en: '**LISTING 7-3:** Testing the analog-to-volts conversion'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 7-3：** 测试模拟到电压的转换'
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Connect your Arduino board to your computer with a USB cable, upload this example,
    and then open up the Serial Monitor. You should see text scroll up the screen
    like in [Figure 7-10](ch07.xhtml#ch07fig10). According to this, an analog value
    of 156 is equal to a voltage of 0.76\. You can check the output voltage with this
    calculation: 156 × (5.0 / 1,023) = 0.762 V. It’s always good when the math works
    out!'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的 Arduino 板通过 USB 电缆连接到计算机，上传此示例代码，然后打开串口监视器。你应该会看到文本在屏幕上滚动，就像在[Figure 7-10](ch07.xhtml#ch07fig10)中那样。根据这个结果，模拟值
    156 等于 0.76V。你可以使用以下计算来检查输出电压：156 × (5.0 / 1,023) = 0.762 V。当数学运算结果正确时，总是很棒！
- en: '**FIGURE 7-10:** Serial Monitor output of raw sensor value and voltage'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 7-10：** 串口监视器输出的原始传感器值和电压'
- en: '![Image](../images/fig7_10.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_10.jpg)'
- en: Without an additional `delay()` command in the `loop()`, the Arduino takes a
    sensor reading about 80–90 times per second and sends the information back to
    the computer. This is why you get a stream of readings rather than a single reading.
    If you want to slow down the rate at which the sketch prints the readings to the
    screen, simply add a `delay(1000);` at the end of the `loop()`, just after the
    last `Serial.println();`. This will slow the loop to a single reading per second
    so it’s not streaming as fast. You’ll do that later in the code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`loop()`中没有额外的`delay()`命令，Arduino 每秒大约读取传感器 80 到 90 次，并将信息发送回计算机。这就是为什么你会得到一连串的读数，而不是单个读数。如果你希望减慢草图打印读数到屏幕的速度，只需在`loop()`的末尾、最后一个`Serial.println();`之后添加`delay(1000);`。这将使循环速度变为每秒一个读数，从而不会像之前那样快速流动。你将在稍后的代码中实现这一点。
- en: There’s one more step to get the sketch to show the temperature rather than
    volts.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一步需要做，让草图显示温度而不是电压。
- en: '**Convert Voltage to Temperature**'
  id: totrans-104
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**将电压转换为温度**'
- en: 'Now you need a formula to convert the volts to temperature. You know that the
    voltage the TMP36 outputs varies linearly depending on the temperature it senses,
    meaning that as the temperature changes, the voltage changes proportionately.
    Therefore, to create a formula, you use the *slope-intercept* equation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要一个公式来将电压转换为温度。你知道 TMP36 输出的电压会根据它感应到的温度线性变化，这意味着随着温度变化，电压也会按比例变化。因此，为了创建一个公式，你将使用*斜率-截距*方程：
- en: '*y* = *mx* + *b*'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = *mx* + *b*'
- en: This equation describes a line or, more generally, a relationship between two
    variables *x* and *y*, where *m* is the slope of the line describing the rate
    of change, and *b* is the y-intercept, showing where the line intercepts the y-axis.
    In this case, the two variables *x* and *y* are the voltage and temperature, respectively,
    and you’ll use the known variable *x* (volts) to calculate the unknown variable
    *y* (temperature).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程描述了一条直线，或者更一般地，描述了两个变量 *x* 和 *y* 之间的关系，其中 *m* 是描述变化率的斜率，*b* 是 y 截距，表示该直线与
    y 轴的交点。在这种情况下，两个变量 *x* 和 *y* 分别是电压和温度，你将使用已知的变量 *x*（电压）来计算未知的变量 *y*（温度）。
- en: 'As mentioned, the datasheet for the temperature sensor states that the voltage
    changes at a rate of 0.010 V per degree Celsius, or 1 V per 100 degrees Celsius.
    This rate is the slope of the line and so becomes *m* in the equation. If you
    plug in the variables, the equation looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，温度传感器的数据手册指出，电压变化的速率是每摄氏度 0.010 V，或者每 100 摄氏度 1 V。这个速率是直线的斜率，因此在方程中成为 *m*。如果你代入变量，方程将如下所示：
- en: '![Image](../images/195equ01.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/195equ01.jpg)'
- en: 'The datasheet for the TMP36 also provides a reference point for mapping voltage
    to degrees Celsius: at 25 degrees Celsius, the sensor has a voltage of 0.750 V.
    Substitute these numbers into the equation to solve for the y-intercept *b*:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: TMP36的数据表还提供了一个参考点，用于将电压映射到摄氏度：在25摄氏度时，传感器的电压为0.750 V。将这些数值代入公式中以求解y轴截距 *b*：
- en: '![Image](../images/195equ02.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/195equ02.jpg)'
- en: 'So now you have values for *m* and *b*. Here’s the final equation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了 *m* 和 *b* 的数值。下面是最终的公式：
- en: '![Image](../images/196equ01.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/196equ01.jpg)'
- en: This is a technique that you can apply to any number of sensors that have a
    linear relationship with voltage. It’s also a nice reminder that math is important
    and useful. But, if none of that made any sense, don’t worry—all you need to know
    is that to find the temperature of the sensor, you simply plug the voltage reading
    into this equation.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种可以应用于任何具有与电压成线性关系的传感器的技术。这也是一个很好的提醒，表明数学是重要且有用的。不过，如果这些内容让你感到困惑，别担心——你只需要知道的是，要找到传感器的温度，你只需将电压读数代入这个公式即可。
- en: Now, use this equation in the code to convert the `rawVolts` reading to a temperature.
    You’ll work from the example code in Listing 7-3 and add the new code in [Listing
    7-4](ch07.xhtml#ch07ex04) to show you the temperature reading from the sensor.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在代码中使用这个公式将 `rawVolts` 读数转换为温度。你将从列表 7-3 中的示例代码开始，并添加[列表 7-4](ch07.xhtml#ch07ex04)中的新代码，以显示来自传感器的温度读数。
- en: '**LISTING 7-4:** Converting from volts to temperature'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 7-4：** 将电压转换为温度'
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First, add two lines in the global namespace at the top to declare variables
    to store the temperature in degrees Celsius (`tempC`) and in degrees Fahrenheit
    (`tempF`) ➊. Next, add a few lines in the `setup()` to use appropriate column
    headings for the readings printed to the Serial Monitor, separated by a tab character,
    which is represented by the control character `\t` ➋. You can now use the slope-intercept
    equation to calculate the temperature in degrees Celsius ➌. You’ll also add one
    last line that converts the temperature from Celsius to Fahrenheit ➍.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在全局命名空间顶部添加两行代码来声明用于存储摄氏度温度 (`tempC`) 和华氏度温度 (`tempF`) 的变量 ➊。接下来，在 `setup()`
    中添加几行代码，使用适当的列标题来显示打印到串口监视器上的读数，并用制表符分隔，它由控制字符 `\t` 表示 ➋。现在，你可以使用斜截式方程来计算摄氏度温度
    ➌。最后，你还会添加一行代码，将温度从摄氏度转换为华氏度 ➍。
- en: And, for some additional feedback, add a few extra lines to `Serial.print()`
    to make sure you print the new variables ➎ to the Serial Monitor. Notice that
    the very last `Serial.print()` line is actually a `Serial.println()` command that
    inserts a newline character and moves the cursor to the next line. This will make
    sure each new reading starts on a new line. Finally, add the 1-second delay ➏
    to slow down the loop so that the sensor is sampled only once per second and you
    have time to read the text.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了提供更多反馈，添加一些额外的 `Serial.print()` 行，确保将新变量 ➎ 打印到串口监视器上。注意，最后一行 `Serial.print()`
    实际上是一个 `Serial.println()` 命令，它插入了换行符并将光标移动到下一行。这将确保每个新的读数从新的一行开始。最后，添加 1 秒的延迟
    ➏ 以减慢循环速度，确保每秒只采样一次，给你足够的时间查看文本。
- en: Upload the updated code to your Arduino, and open the Serial Monitor. You should
    see four columns of data scroll up the screen, as shown in [Figure 7-11](ch07.xhtml#ch07fig11).
    As the new column headings denote, these figures represent raw data, voltage,
    temperature in degrees Celsius, and temperature in degrees Fahrenheit. If you
    squeeze the temperature sensor with your fingers, you should notice that the temperature
    increases. Congratulations, you have a working temperature monitor, the first
    big part of this project!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 上传更新后的代码到你的 Arduino，并打开串口监视器。你应该会看到四列数据滚动在屏幕上，如[图 7-11](ch07.xhtml#ch07fig11)所示。正如新列标题所示，这些数据分别代表原始数据、电压、摄氏度温度和华氏度温度。如果你用手指挤压温度传感器，你会注意到温度上升。恭喜你，你已经完成了一个工作温度监视器，这是这个项目的第一大部分！
- en: '**FIGURE 7-11:** Serial Monitor displaying temperatures from the TMP36'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-11：** 串口监视器显示来自TMP36的温度'
- en: '![Image](../images/fig7_11.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_11.jpg)'
- en: '**BUILD THE SERVO MOTOR AUTOVENT**'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建伺服电机自动通风装置**'
- en: You’ll use a servo motor like the one you used in [Project 6](ch06.xhtml#ch06)
    to open and close a window on the greenhouse. A servo is a simple motor that uses
    three wires for the control signal (yellow or white), power (red), and ground
    (black) connections, as shown in [Figure 7-12](ch07.xhtml#ch07fig12).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用像[项目6](ch06.xhtml#ch06)中使用的伺服电机来打开和关闭温室的窗户。伺服电机是一种简单的电动机，使用三根线分别连接控制信号（黄色或白色）、电源（红色）和地线（黑色），如[图7-12](ch07.xhtml#ch07fig12)所示。
- en: '**FIGURE 7-12:** Adding the servo motor to the circuit'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-12：** 将伺服电机添加到电路中'
- en: '![Image](../images/fig7_12.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_12.jpg)'
- en: Most standard servos have a three-pin female connector. Connect three male-to-male
    jumper wires to these three pins to extend these connections, as shown in [Figure
    7-13](ch07.xhtml#ch07fig13). If possible, match the colors of your jumper wires
    to the leads on the servo connector. Then, connect the yellow (or white) signal
    wire to pin 9 on the Arduino board. Connect the red wire to 5 V and the black
    wire to GND on the right side of the breadboard.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数标准伺服电机都有一个三针母连接器。将三根公对公跳线连接到这三根引脚上，以扩展这些连接，如[图7-13](ch07.xhtml#ch07fig13)所示。如果可能，最好将跳线的颜色与伺服连接器上的引线颜色匹配。然后，将黄色（或白色）信号线连接到Arduino板上的9号引脚。将红色线连接到5V，将黑色线连接到面包板右侧的GND。
- en: '**FIGURE 7-13:** Inserting male-to-male jumper wires to connect the servo to
    the breadboard'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-13：** 插入公对公跳线将伺服电机连接到面包板'
- en: '![Image](../images/fig7_13.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_13.jpg)'
- en: '**PROGRAM THE AUTOVENT**'
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程自动通风窗**'
- en: Add the servo code shown in [Listing 7-5](ch07.xhtml#ch07ex05).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加[清单7-5](ch07.xhtml#ch07ex05)中的伺服代码。
- en: '**LISTING 7-5:** Adding in the servo control'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 7-5：** 添加伺服控制'
- en: '[PRE4]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remember from [Project 6](ch06.xhtml#ch06) that to use the servo you need to
    include the Servo library ➊ and create a servo object named `myServo` ➋. Next,
    create two variables ➌ to define the *set points* for the control system. These
    set points are the temperatures at which the window will automatically open and
    close. Notice that `setPoint`, which opens the window, is 2 degrees higher than
    `returnPoint`, which closes the window, giving you 2 degrees where the window
    will not be opening or closing. This control technique, referred to as *hysteresis*,
    is useful for systems where the temperature might fluctuate slightly and keeps
    the window from constantly opening and closing at the smallest temperature variation.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下[项目6](ch06.xhtml#ch06)，要使用伺服电机，你需要包含伺服库 ➊ 并创建一个名为`myServo`的伺服对象 ➋。接下来，创建两个变量
    ➌ 来定义控制系统的*设定点*。这些设定点是窗户自动打开和关闭的温度。注意，`setPoint`（打开窗户）比`returnPoint`（关闭窗户）高2度，这意味着窗户不会在这2度之间打开或关闭。这种控制技术被称为*滞后*，对于温度可能会有轻微波动的系统非常有用，它能防止窗户因温度变化微小而频繁地开关。
- en: Finally, you need to initialize the servo by telling the Arduino that the servo
    is connected to pin 9 ➍. You might notice that this `myServo.attach()` command
    has two extra numbers, rather than the one number you used in [Project 6](ch06.xhtml#ch06).
    To understand why, take a look at “[How Servos Really Work](ch07.xhtml#ch07sb01)”
    on page [201](ch07.xhtml#page_201).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要通过告诉Arduino伺服电机连接到9号引脚来初始化伺服电机 ➍。你可能会注意到，`myServo.attach()`命令有两个额外的数字，而不是你在[项目6](ch06.xhtml#ch06)中使用的一个数字。要理解原因，请查看第[201](ch07.xhtml#page_201)页的“[伺服电机的工作原理](ch07.xhtml#ch07sb01)”。
- en: Finally, for the control logic, you’ll use a nested `if()`–`else if()` control
    statement. Add the eight lines of code at ➎ just above the `delay()` to move the
    servo to a 180-degree position if the temperature is above 85 degrees Fahrenheit
    (the `setPoint`) and return the servo to the 0-degree position if the temperature
    drops below 83 degrees Fahrenheit (the `returnPoint`). This will open and close
    the autovent window.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在控制逻辑中，你将使用嵌套的`if()`–`else if()`控制语句。将8行代码添加到➎，位于`delay()`之前，用于在温度高于85华氏度（`setPoint`）时将伺服电机移动到180度位置，在温度降到83华氏度以下（`returnPoint`）时将伺服电机返回到0度位置。这将打开和关闭自动通风窗。
- en: Upload the updated code from [Listing 7-5](ch07.xhtml#ch07ex05) to your Arduino,
    and open the Serial Monitor. Try it out by pinching the sensor between your fingers
    or cupping your hands around the sensor and blowing deeply to warm it above 85
    degrees. Watch the Serial Monitor to see the temperature rise. As soon as it hits
    85 degrees, you should hear the servo motor as it moves into position. Now, let
    the temperature sensor sit and cool down. As soon as it dips below the `returnPoint`,
    you should hear the servo motor again as it returns to the 0-degree position.
    Pretty neat, eh?
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从[清单7-5](ch07.xhtml#ch07ex05)上传更新后的代码到你的Arduino，并打开串行监视器。通过用手指夹住传感器或将手掌围绕传感器吹气，使其温度超过85度，来试试。观察串行监视器，看看温度是否上升。一旦温度达到85度，你应该能听到伺服电机的声音，它会转到指定位置。现在，让温度传感器静置并冷却。一旦温度降到`returnPoint`以下，你应该再次听到伺服电机的声音，它会返回到0度位置。挺酷吧？
- en: 'Now you’ll build the final component: the fan.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将构建最终组件：风扇。
- en: '**BUILD THE FAN MOTOR**'
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建风扇电机**'
- en: The fan, which will move air around in the greenhouse, is going to spin via
    a small DC hobby motor—a standard cylindrical device with two wires and a center
    axle that spins when you apply voltage to the leads. The servo motor you’ve been
    using so far has gearing inside that allows it to move very precisely in a tightly
    defined range of motion. Recall that it has only about 180 degrees of motion.
    You’ll use a DC motor here, rather than the servo motor, because you’ll need the
    fan blade to spin continuously the entire time you apply power to it. This makes
    it perfect for a fan function. The DC motor you’ll use is designed to operate
    between 3 V and 6 V but draws around 200–300 mA when it’s spinning. The Arduino
    `OUTPUT` pins are capable of driving only about 40 mA of current, so to provide
    enough amps for the DC motor, you’ll build an extra circuit called a *transistor
    amplifier circuit*—more technically known as a *common-emitter amplifier*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 风扇将通过一个小型直流爱好电机旋转，这是一种标准的圆柱形设备，具有两根导线和一个中心轴，当你给它施加电压时，轴会旋转。你一直使用的伺服电机内部有齿轮，可以让它在非常精确的运动范围内移动。回想一下，它的运动范围大约只有180度。这里你将使用直流电机，而不是伺服电机，因为你需要风扇叶片在你持续施加电力时不断旋转。这使得它非常适合做风扇功能。你将使用的直流电机设计用于3V到6V之间的电压，但当它旋转时，电流大约在200-300毫安之间。而Arduino的`OUTPUT`引脚仅能驱动大约40毫安的电流，因此为了给直流电机提供足够的电流，你将构建一个额外的电路，称为*晶体管放大电路*——更技术性地说，是*共射极放大器*。
- en: '**HOW SERVOS REALLY WORK**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**伺服电机的工作原理**'
- en: Servos are neat devices that move a motor to a specific position based on a
    signal from the microcontroller. A standard servo motor has a fixed range of motion
    of about 180 degrees.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机是一种根据来自微控制器的信号将电机移至特定位置的整洁设备。标准伺服电机具有大约180度的固定运动范围。
- en: 'All servo motors have three wires: a white (or sometimes yellow or orange)
    wire for receiving the signal, a red power wire, and a black ground wire. The
    signal is a unique pulse sent every 20 ms, or at a rate of 50 Hz. To encode a
    position, a microcontroller varies the width of the pulse to indicate the angle
    or position that the motor will turn to (see [Project 5](ch05.xhtml#ch05) for
    more details on pulse width modulation). For most standard servo motors, a 1,000-microsecond
    (1,000 μs) pulse indicates the 0-degree position, and a 2,000 μs pulse indicates
    the full 180-degree position, so a 1,500 μs pulse indicates the midpoint of the
    servo, or the 90-degree position.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 所有伺服电机都有三根线：一根白色（或有时是黄色或橙色）的信号线、一根红色的电源线和一根黑色的接地线。信号是一种每20毫秒发送一次的独特脉冲，频率为50赫兹。为了编码一个位置，微控制器会通过改变脉冲的宽度来指示电机将要转动的角度或位置（有关脉冲宽度调制的更多详情，请参见[项目5](ch05.xhtml#ch05)）。对于大多数标准伺服电机，1,000微秒（1,000
    μs）的脉冲表示0度位置，2,000微秒的脉冲表示完全的180度位置，因此1,500微秒的脉冲表示伺服电机的中点或90度位置。
- en: The Arduino’s *Servo.h* library maps the pulse widths to the motor positions,
    but the library has a slightly different definition for the servo positions and
    pulse widths, using a 544 μs pulse for the 0-degree position and a 2,400 μs pulse
    for the 180-degree position. This allows the library to work with *extended-range*
    servos, but it is outside the limits of most standard servos. So, when you use
    a command like `myServo.write(0);` the motor receives a 544 μs pulse and will
    try moving beyond its own physical limits. If that happens, the motor will shake,
    buzz, and heat up because it’s just not able to move to a position that coincides
    with a 544 μs pulse.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino的*Servo.h*库将脉冲宽度映射到电机的位置，但该库对伺服电机的位置和脉冲宽度有稍微不同的定义，0度位置的脉冲为544 μs，180度位置的脉冲为2400
    μs。这使得该库能够与*扩展范围*的伺服电机一起工作，但超出了大多数标准伺服电机的限制。因此，当你使用像`myServo.write(0);`这样的命令时，电机会接收到一个544
    μs的脉冲，并尝试超出其物理限制。如果发生这种情况，电机会抖动、嗡嗡作响并发热，因为它无法移动到与544 μs脉冲对应的位置。
- en: To counteract this, you can set limits for the servo in the code. As in [Project
    6](ch06.xhtml#ch06), use the command `myServo.attach(9);` to initialize the servo
    on pin 9 of the Arduino. You can also add parameters to set lower and upper pulse
    width limits for the motor, with `myServo.attach(9, 1000, 2000);`. With this initialization,
    the command `myServo.write(0);` will move the motor to its 0-degree angle position
    and it won’t shake, buzz, or heat up.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了抵消这个问题，你可以在代码中为伺服电机设置限制。如同在[项目 6](ch06.xhtml#ch06)中一样，使用命令`myServo.attach(9);`来初始化Arduino的9号引脚上的伺服电机。你也可以添加参数来设置电机的上下脉冲宽度限制，像这样：`myServo.attach(9,
    1000, 2000);`。通过这个初始化，命令`myServo.write(0);`将使电机移动到0度角的位置，并且不会发生抖动、嗡嗡声或发热。
- en: If you want to know more about how servos work, take a look at the tutorial
    on SparkFun at *[https://www.sparkfun.com/tutorials/283/](https://www.sparkfun.com/tutorials/283/).*
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于伺服电机如何工作的内容，可以查看SparkFun上的教程，网址是*[https://www.sparkfun.com/tutorials/283/](https://www.sparkfun.com/tutorials/283/)。*
- en: 'A transistor has three legs: the collector (C), base (B), and emitter (E).
    Any current that goes into the base is amplified on the collector pin. The base
    is like a control for a door that allows current to move from the collector to
    the emitter. The more you push on the base, the wider the door opens, and more
    current can pass through from the collector to the emitter. The amazing thing
    about transistors is that you need apply only a small amount of current at the
    base to let a large amount of current flow from the collector to the emitter.
    If you provide too much current to the base, you can burn the transistor out,
    so in the same way you’ve used resistors to limit the current flowing through
    LEDs, you’ll use a 330 Ω resistor in this circuit to limit the current flowing
    to the base.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一个晶体管有三个引脚：集电极（C）、基极（B）和发射极（E）。任何流入基极的电流都会在集电极引脚上得到放大。基极就像一个控制门，允许电流从集电极流向发射极。你施加在基极上的压力越大，门就会开得越宽，更多的电流可以从集电极流向发射极。晶体管的奇妙之处在于，你只需在基极上施加少量电流，就能让大量电流从集电极流向发射极。如果你给基极提供过多的电流，可能会烧毁晶体管，所以就像你使用电阻限制LED电流一样，你会在电路中使用一个330
    Ω的电阻来限制流向基极的电流。
- en: There are many different applications for transistors, such as amplifiers and
    other devices, but here you’re just going to use it like a controllable switch.
    Even though the Arduino pin can only supply a small amount of current, when you
    send a `HIGH` signal to the base of the transistor, the transistor turns “on.”
    This allows current to flow between the collector and the emitter. It essentially
    connects these pins together, like closing a switch.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 晶体管有许多不同的应用，如放大器和其他设备，但在这里你只需将其用作一个可控开关。尽管Arduino引脚只能提供少量电流，当你向晶体管的基极发送`HIGH`信号时，晶体管会“打开”。这允许电流在集电极和发射极之间流动。它本质上将这些引脚连接在一起，就像关闭一个开关。
- en: The emitter side of the transistor is connected to the ground rail. Notice that
    one side of the motor is connected to the 5 V rail, and the other side of the
    motor is connected to the collector of the transistor. When the transistor is
    turned “on,” this connects the collector to the emitter of the transistor, closing
    the switch between the motor and ground and making it spin. Engineers call this
    “operating a transistor between cut-off and saturation mode.” Power for the motor
    is coming directly from the power rails. That means you can use the limited current
    provided by the Arduino `OUTPUT` pins to control devices requiring a much larger
    current flow.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 晶体管的发射极一侧连接到接地轨道。注意电机的一侧连接到5V轨道，电机的另一侧连接到晶体管的集电极。当晶体管被打开时，这会将集电极连接到晶体管的发射极，从而关闭电机和地面之间的开关，使电机转动。工程师称之为“在截止模式和饱和模式之间操作晶体管”。电机的电源直接来自电源轨道。这意味着你可以使用Arduino
    `OUTPUT`引脚提供的有限电流来控制需要更大电流的设备。
- en: You’ll build the transistor circuit on the top part of the breadboard, as shown
    in [Figure 7-14](ch07.xhtml#ch07fig14).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你将根据[图7-14](ch07.xhtml#ch07fig14)所示，在面包板的顶部部分搭建晶体管电路。
- en: '**FIGURE 7-14:** Adding the fan-motor transistor control circuit'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-14：** 添加风扇电机晶体管控制电路'
- en: '![Image](../images/fig7_14.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_14.jpg)'
- en: Find the transistor in your kit. As you can see from [Figure 7-15](ch07.xhtml#ch07fig15),
    the transistor looks a lot like the temperature sensor, though if you look closely
    you should see 2N2222 or BC337 on the flat side of the casing. This is an *NPN
    transistor*, and it will act as the motor’s on/off switch that you control with
    the Arduino board.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的工具包中找到晶体管。正如[图7-15](ch07.xhtml#ch07fig15)所示，晶体管看起来与温度传感器非常相似，但如果你仔细观察，你应该能看到外壳平面上的2N2222或BC337。这是一个*NPN晶体管*，它将作为你用Arduino控制的电机开关。
- en: '**FIGURE 7-15:** NPN transistors used in this project—the 2N2222 (left) and
    the replacement part BC337 (right)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-15：** 本项目中使用的NPN晶体管——2N2222（左）和替代部件BC337（右）'
- en: '![Image](../images/fig7_15.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_15.jpg)'
- en: Hold the transistor so that the flat edge is facing to the left, and insert
    it into the top part of the breadboard with the top pin about six rows down, as
    shown in [Figure 7-14](ch07.xhtml#ch07fig14). In this position, the top pin is
    the collector, the middle is the base, and the bottom is the emitter ([Figure
    7-15](ch07.xhtml#ch07fig15)).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将晶体管保持平面朝左，并将其插入面包板的顶部部分，使顶部引脚大约在六行下方，如[图7-14](ch07.xhtml#ch07fig14)所示。在这个位置，顶部引脚是集电极，中间是基极，底部是发射极（见[图7-15](ch07.xhtml#ch07fig15)）。
- en: Connect a 330 Ω resistor to the base pin and stretch it across the ditch in
    the breadboard, as shown in [Figure 7-14](ch07.xhtml#ch07fig14). Then, connect
    the other side of this resistor to pin 11 on your Arduino so that pin 11 connects
    to the base pin through the 330 Ω resistor. This is the low-current control signal
    from the Arduino that will switch the transistor on and off. When the transistor
    is switched on, current will flow through the motor, and it will spin.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个330 Ω的电阻连接到基极引脚，并将其拉伸穿过面包板中的沟槽，如[图7-14](ch07.xhtml#ch07fig14)所示。然后，将该电阻的另一端连接到Arduino的11号引脚，这样11号引脚就通过330
    Ω的电阻连接到基极引脚。这是来自Arduino的低电流控制信号，用来开关晶体管。当晶体管开启时，电流将通过电机，电机将转动。
- en: Connect a small jumper wire from the emitter of the transistor (lower pin) to
    the ground rail. Lastly, connect one of the wires of the motor to the collector
    (top) pin of the transistor. The motor will spin either clockwise or counterclockwise
    depending on which wire you use, but in this case it doesn’t matter which way
    it spins, so you can choose either motor wire. Connect the other motor wire to
    the power rail, and then use a jumper wire to connect the power rail of the breadboard
    to 5 V on the Arduino. When a small current signal is detected on the base pin,
    the connection between the collector and the emitter is closed. This connects
    a path from 5 V through the motor to GND and completes a circuit path that will
    cause the motor to spin. [Figure 7-16](ch07.xhtml#ch07fig16) shows the circuit
    for the motor.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 将一根小跳线从晶体管的发射极（下端引脚）连接到地线。最后，将电机的一根线连接到晶体管的集电极（上端引脚）。电机会根据你使用的电线不同而顺时针或逆时针转动，但在这个情况下，电机的转动方向并不重要，你可以选择任意一根电机线。将电机的另一根线连接到电源轨，然后使用跳线将面包板的电源轨连接到Arduino的5V端。当在基极引脚上检测到微小的电流信号时，集电极和发射极之间的连接被闭合。这时，电流从5V通过电机到GND，完成了一个电路路径，从而使电机开始转动。[图7-16](ch07.xhtml#ch07fig16)展示了电机的电路。
- en: '**FIGURE 7-16:** Transistor circuit to drive the motor from an Arduino pin'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-16：** 用Arduino引脚驱动电机的晶体管电路'
- en: '![Image](../images/fig7_16.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_16.jpg)'
- en: The last piece in this circuit is a protection diode, sometimes called a *fly-back
    diode*, and it protects the transistor from damage that may be caused by the motor.
    Inside a motor are a bunch of coils that create an electromagnet that pushes and
    pulls against permanent magnets in the motor—this is what causes the axle to spin.
    Coils are a really interesting component used in electronics. The magnetic field
    that they create is actually a form of stored energy, and when the circuit is
    turned off, this stored energy can rebound and cause large voltage spikes that
    will damage the transistor. The fly-back diode creates a path for this voltage
    spike to dissipate without going through the transistor. It’s sometimes also called
    a *snubber circuit*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 该电路的最后一个部分是一个保护二极管，有时也称为*反向二极管*，它能够保护晶体管免受电机可能造成的损坏。在电机内部，有许多线圈，这些线圈通过产生电磁场，推动和拉动电机中的永久磁铁—这就是导致轴转动的原因。线圈是电子学中非常有趣的元件。它们产生的磁场实际上是一种储存能量的形式，当电路关闭时，这种储存的能量会反弹并导致电压尖峰，进而损坏晶体管。反向二极管为这些电压尖峰提供了一个泄放的通道，从而避免电压通过晶体管。它有时也被称为*缓冲电路*。
- en: In order to wire this component in correctly, it is important to note that diodes
    are *polarized*, and the orientation makes a difference. The body of the diode
    has a line or band at one end of the body, as shown in [Figure 7-17](ch07.xhtml#ch07fig17).
    Make sure that the side with the band is connected to the positive (5 V) side
    of the motor.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确连接这个元件，需要注意的是二极管是*有极性的*，其方向是有区别的。二极管的本体在一端有一条线或带，如[图7-17](ch07.xhtml#ch07fig17)所示。确保带有标记的那一侧连接到电机的正极（5V）。
- en: '**FIGURE 7-17:** Fly-back diode used in the transistor circuit, with a quarter
    for size comparison'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-17：** 用于晶体管电路中的反向二极管，旁边放有一个硬币以作大小对比'
- en: '![Image](../images/fig7_17.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_17.jpg)'
- en: Add the diode to the motor, making sure that the side of the diode with the
    line is connected to the 5 V motor wire, as shown in the circuit diagram in [Figure
    7-16](ch07.xhtml#ch07fig16). Connect the other leg of the diode to the other wire
    of the DC motor—the one connected to the collector pin of the transistor. This
    means that the two legs of the diode share the same connections as the two wires
    of the motor. When two devices are wired up like this, we say they’re wired *in
    parallel*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 将二极管添加到电机中，确保带有标记的一侧连接到电机的5V电线，如[图7-16](ch07.xhtml#ch07fig16)中的电路图所示。将二极管的另一脚连接到电机的另一根线—即连接到晶体管集电极引脚的那根。这意味着二极管的两脚与电机的两根线共享相同的连接。当两个设备这样连接时，我们称它们是*并联*连接的。
- en: You should now have a complete circuit that has each of the three subcircuits
    in [Figure 7-6](ch07.xhtml#ch07fig06). You’ll add a few more lines of code to
    control the motor.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经完成了一个完整的电路，其中包括[图7-6](ch07.xhtml#ch07fig06)中的三个子电路。接下来你需要再添加几行代码来控制电机。
- en: '**Program the Fan Motor**'
  id: totrans-167
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编程风扇电机**'
- en: The code for controlling the motor is very simple, just like the code you used
    to turn an LED on and off. Add the code in [Listing 7-6](ch07.xhtml#ch07ex06)
    to your current sketch.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 控制电机的代码非常简单，就像你用来控制LED开关的代码一样。将[清单 7-6](ch07.xhtml#ch07ex06)中的代码添加到你当前的草图中。
- en: '**LISTING 7-6:** Complete Tiny Desktop Greenhouse control code'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 7-6：** 完整的微型桌面温室控制代码'
- en: '[PRE5]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are just a few new lines of code. The first is in the `setup()`. This
    sets pin 11, to which the motor is attached via the transistor, as an `OUTPUT`
    ➊. Next is the set of conditional `if()`–`else if()` blocks. Here, you add two
    commands to turn the motor on ➋ and off ➌. Remember that the motor will really
    be the greenhouse fan. With these few extra lines of code, the fan will turn on
    at the same time as the window opens, and it will turn off when the window closes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 只有几行新代码。第一行是在`setup()`中。这一行设置了11号引脚，该引脚通过晶体管连接到电机，设为`OUTPUT` ➊。接下来是`if()`-`else
    if()`条件语句块。在这里，你添加了两条命令来打开电机 ➋ 和关闭电机 ➌。记住，电机实际上是温室的风扇。通过这些额外的代码，风扇将在窗户打开时启动，窗户关闭时停止。
- en: After you’ve added these lines of code, upload this latest version to your Arduino.
    Open the Serial Monitor, and test it again. Try warming up the temperature sensor
    by squeezing it between your fingers or using your breath, and watch what happens.
    As soon as the temperature readings get to about 85 degrees Fahrenheit, the servo
    motor should move and the hobby motor should kick in. You might notice that as
    soon as the motor turns on, the temperature readings go all out of whack. There
    is a lot going on here, but we have a quick fix for it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 添加完这些代码行后，将最新版本上传到你的Arduino，打开串口监视器，重新测试一次。尝试通过将温度传感器夹在手指间或使用呼吸加热它，看看会发生什么。当温度读数接近85华氏度时，舵机电机应该开始工作，爱好电机也应该启动。你可能会注意到，一旦电机启动，温度读数就会完全失常。这里涉及的内容较多，但我们有一个快速的解决方法。
- en: '**Isolate the Motor Effect**'
  id: totrans-173
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**隔离电机效应**'
- en: When the motor turns on, the voltage of the Arduino drops down to about 4.1–4.5
    V because of the extra current load of the motor. You may see that as soon as
    the motor spins up, the temperature readings start changing sporadically, and
    the motor may continue to turn on and off several times before the temperature
    readings settle down. Earlier we said that when you use `analogRead()`, `1023`
    is equal to 5 V, but that’s only partially true. The full truth is that `1023`
    is equal to whatever the voltage from the source is, so if the source voltage
    drops to 4.1 V, `1023` is now equal to 4.1 V. This messes up the Arduino’s ability
    to take accurate measurements.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当电机开启时，由于电机的额外电流负载，Arduino的电压会下降到大约4.1-4.5伏。你可能会发现，电机启动后，温度读数开始不规则变化，而且电机可能会反复开关几次，直到温度读数稳定下来。我们之前提到过，当使用`analogRead()`时，`1023`等于5伏，但这只是部分正确。完整的事实是，`1023`等于源电压的大小，所以如果源电压降到4.1伏，那么`1023`现在就等于4.1伏。这会影响Arduino获取准确测量值的能力。
- en: 'To rectify this, add two lines of code at the very beginning of the `loop()`,
    right after the first curly bracket, to tell the Arduino to turn off the motor
    before reading the temperature sensor:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了纠正这个问题，在`loop()`的开头，即第一个大括号后，添加两行代码，告诉Arduino在读取温度传感器之前关闭电机：
- en: '[PRE6]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now the Arduino will turn the motor off for exactly 1 ms before reading the
    voltage on the temperature sensor. This isolates the voltage drop from the motor
    and the `analogRead()` without adding too much extra code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Arduino会在读取温度传感器电压之前，关闭电机1毫秒。这会隔离电机的电压下降与`analogRead()`之间的干扰，而且不需要添加过多的代码。
- en: After adding these two lines, upload the new sketch to your Arduino, and try
    heating up the sensor again. Now it should behave much more predictably. With
    the circuits built and the code working smoothly, it’s time to build the actual
    greenhouse structure.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这两行代码后，将新草图上传到你的Arduino，再次尝试加热传感器。现在，它应该更加稳定地工作了。电路已搭建好，代码运行流畅，接下来是构建实际的温室结构。
- en: '**BUILD THE TINY DESKTOP GREENHOUSE ENCLOSURE**'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建微型桌面温室外壳**'
- en: We provide a template for the greenhouse enclosure we created using cardboard,
    but you could use anything you want. In fact, IKEA sells a great little greenhouse
    called the SOCKER that you could easily modify to work with this project.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一个使用纸板制作的温室外壳模板，但你可以使用任何你喜欢的材料。事实上，宜家出售一种叫做SOCKER的小型温室，你可以很容易地修改它来配合这个项目。
- en: 'For the Tiny Desktop Greenhouse, the finished dimensions are roughly 4.5 ×
    4.5 inches for the base and 6 inches at the tallest point. In the resources available
    at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*,
    we have two template options: one is broken out into three sheets of 8.5 × 11-inch
    cardboard (shown in [Figure 7-18](ch07.xhtml#ch07fig18)), and the other is on
    a single sheet of cardboard measuring 11 × 17 inches.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于微型桌面温室，完成后的尺寸大约为底座4.5 × 4.5英寸，最高点为6英寸。在* [https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*提供的资源中，我们有两个模板选项：一个是分成三张8.5
    × 11英寸的纸板（如[图7-18](ch07.xhtml#ch07fig18)所示），另一个是单张11 × 17英寸的纸板。
- en: '**FIGURE 7-18:** Tiny Desktop Greenhouse cardboard enclosure template (not
    full size)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-18：** 微型桌面温室纸板外壳模板（非全尺寸）'
- en: '![Image](../images/fig7_18.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_18.jpg)'
- en: 'Carefully cut out the pieces of the template from the cardboard. There are
    four unique pieces: the pentagonal side pieces, the front/ back square walls,
    the roof window, and the fan-motor holder. Take one square side piece and one
    pentagonal front/back piece and lay them side by side, with the transparency side
    facing up. Use a narrow strip of masking tape to hold these two sides together,
    as shown in [Figure 7-19](ch07.xhtml#ch07fig19). Repeat this process until you
    have all four of the side wall pieces attached, but don’t tape the last two walls
    together; leave the enclosure lying flat until you’ve added the windows.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 小心地从纸板上剪下模板的各个部分。这里有四个独特的部分：五边形的侧面、前后方的正方形墙壁、屋顶窗户和风扇电机支架。取一块正方形的侧面和一块五边形的前后墙面，将它们并排放置，透明面朝上。使用一条窄胶带将这两块固定在一起，如[图7-19](ch07.xhtml#ch07fig19)所示。重复此过程，直到所有四个侧面墙壁都固定好，但不要把最后两面墙壁贴合；将封闭部分平放，直到加上窗户。
- en: '**FIGURE 7-19:** Use a narrow strip of tape to hold the pieces together.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-19：** 使用窄条胶带将各个部分固定在一起。'
- en: '![Image](../images/fig7_19.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_19.jpg)'
- en: Now you need to cut six pieces of transparency film to be slightly larger than
    the opening in each of the wall pieces and the windows. For the template we provide,
    you will need four squares that measure 4.25 × 4.25 inches and two squares that
    measure 4.25 × 2.5 inches. You should be able to cut these six pieces out of a
    single sheet of transparency film; it’s a good idea to trace them on first to
    get the most out of the film. At this point, you only want to secure the windows
    for the side walls; you’ll add the roof windows at the very end. Using a bead
    of glue or small piece of tape, secure these windows to the inside of the greenhouse
    on the same side as the tape, as shown in [Figure 7-20](ch07.xhtml#ch07fig20).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要将六块透明薄膜切割成稍大于每个墙壁和窗户开口的大小。根据我们提供的模板，你需要四块尺寸为4.25 × 4.25英寸的正方形和两块尺寸为4.25
    × 2.5英寸的正方形。你应该能够从一张透明薄膜中切出这六块；建议先将它们描绘出来，这样可以最大限度地利用薄膜。此时，你只需要固定侧墙的窗户；屋顶窗户将在最后加上。使用一条胶水或小片胶带，将这些窗户固定在温室的内侧，与胶带同一侧，如[图7-20](ch07.xhtml#ch07fig20)所示。
- en: '**FIGURE 7-20:** Carefully line up the transparency film window to adhere it
    to the cardboard.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-20：** 小心地将透明薄膜窗对齐并粘贴到纸板上。'
- en: '![Image](../images/fig7_20.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_20.jpg)'
- en: Once those transparency panes are in place, run one more piece of tape along
    the last exposed edge, and connect it so that you have a square base and a structure
    that resembles a small greenhouse, as shown in [Figure 7-21](ch07.xhtml#ch07fig21).
    The top and bottom of the greenhouse should still be open, and it may still feel
    a little unstable, but as soon as you add the roof, the entire structure will
    hold together.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些透明窗片到位，再沿最后一个裸露的边缘粘上一条胶带，将其连接起来，这样你就有了一个正方形的底座和一个像小温室一样的结构，如[图7-21](ch07.xhtml#ch07fig21)所示。温室的顶部和底部应该仍然是开放的，可能还会感觉有些不稳定，但一旦你加上屋顶，整个结构就会稳定下来。
- en: '**FIGURE 7-21:** Four sides of the greenhouse complete'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**图7-21：** 温室四个侧面完成'
- en: '![Image](../images/fig7_21.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_21.jpg)'
- en: '**Add the Autovent Window Servo**'
  id: totrans-193
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加自动通风窗伺服电机**'
- en: On our template, we made a small cutout for the servo motor as close as possible
    to the pivot point of the window, to maximize the amount the window opens when
    the servo horn moves. Disconnect the servo from your circuit, and attach a horn
    to the end of the servo if there isn’t one already there. We’d recommend using
    the single-sided horn, because it’s easier to tell where the servo is pointing.
    Gently rotate the servo clockwise with your fingers until it stops to set the
    motor at the 180-degree position. This is the position where the horn will be
    when the window is fully open. Remove and reposition the servo horn so that it
    is pointing up in the opposite direction from the wires that come out of the back
    of the servo, as shown in [Figure 7-22](ch07.xhtml#ch07fig22).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模板上，我们尽可能靠近窗户的枢轴点处为伺服电机做了一个小切口，以最大限度地增加窗户在伺服电机角度变化时的开度。断开伺服电机与电路的连接，如果伺服电机端没有安装伺服头，给伺服电机加一个。我们推荐使用单面伺服头，因为它能更清楚地显示伺服电机的指向。用手指轻轻顺时针旋转伺服电机，直到它停止，设定电机在180度的位置。这个位置是窗户完全打开时伺服头的位置。卸下并重新安装伺服头，使其朝上，方向与伺服电机背面出来的电线相反，如[图
    7-22](ch07.xhtml#ch07fig22)所示。
- en: '**FIGURE 7-22:** Servo horn in the 180-degree position— rotated clockwise'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-22：** 伺服电机角度为180度——顺时针旋转'
- en: '![Image](../images/fig7_22.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_22.jpg)'
- en: Now feed the servo through the hole in the template from the inside of the greenhouse
    so that the wires are pointing down and the servo horn is on the inside pointing
    up (see [Figure 7-23](ch07.xhtml#ch07fig23)).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将伺服电机从温室内部的模板孔中穿过，使电线朝下，伺服头朝上（见[图 7-23](ch07.xhtml#ch07fig23)）。
- en: '**FIGURE 7-23:** Placing the servo into the greenhouse'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-23：** 将伺服电机放入温室'
- en: '![Image](../images/fig7_23.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_23.jpg)'
- en: The tabs of the servo should sit flush with the cardboard. You can screw in
    the servo using the screws that come with it and the two small screw holes in
    our template, or use a few dabs of hot glue to secure it in place.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机的接头应该与纸板平齐。你可以使用随伺服电机附带的螺丝以及我们模板上的两个小螺孔来固定伺服电机，或者使用一些热熔胶将其固定在合适位置。
- en: '**Create the Paper Clip Linkage**'
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作纸夹连杆**'
- en: As in [Project 6](ch06.xhtml#ch06), you’ll need a linkage to connect the servo
    horn to the window. Take a medium-size paper clip and straighten out all but the
    small hook on the end. Now, grab a ruler and add a sharp 90-degree bend about
    1 1/8 inches from the small hook end, pointing away from the hook, as shown in
    [Figure 7-24](ch07.xhtml#ch07fig24).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在[项目 6](ch06.xhtml#ch06)中一样，你需要一个连杆将伺服头与窗户连接。取一个中号的回形针，拉直所有部分，除了末端的小钩子。然后，拿一个尺子，在离小钩子末端约1
    1/8英寸的地方加上一个锋利的90度弯曲，弯曲方向远离钩子，如[图 7-24](ch07.xhtml#ch07fig24)所示。
- en: '**FIGURE 7-24:** Bending the paper clip linkage'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-24：** 弯曲纸夹连杆'
- en: '![Image](../images/fig7_24.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_24.jpg)'
- en: '**Add the Roof**'
  id: totrans-205
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加屋顶**'
- en: The roof piece is a rectangular piece of cardboard. Cut out the windows, and
    score the centerline of the roof, as shown in [Figure 7-25](ch07.xhtml#ch07fig25).
    The scored edge will form a hinge for the window flap to open and close.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 屋顶部分是一个矩形的纸板。按照[图 7-25](ch07.xhtml#ch07fig25)所示，剪掉窗户，并在屋顶的中心线处做压痕。压痕边缘将作为窗户翻板的铰链，允许窗户开合。
- en: '**FIGURE 7-25:** The roof piece'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-25：** 屋顶部分'
- en: '![Image](../images/fig7_25.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_25.jpg)'
- en: Position the greenhouse so that the servo is on the left side. One half of the
    roof will be secured down with glue, and the other half will form a window flap
    that opens and closes. Using a small bead of hot glue, attach one half of the
    roof structure to the greenhouse. Only glue down three edges of the roof (that
    is, one half of the six edges) so that there’s still a flap that can open. Make
    sure that the side that opens coincides with the side that the servo horn moves
    against, as shown in [Figure 7-26](ch07.xhtml#ch07fig26).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将温室定位，使伺服电机在左侧。屋顶的一半将用胶水固定，另一半将形成一个可开合的窗户翻板。使用少量热熔胶，将屋顶的一半结构固定到温室上。只粘合屋顶的三条边（即六条边中的一半），这样仍然可以有一个可以打开的翻板。确保打开的一侧与伺服头运动的方向一致，如[图
    7-26](ch07.xhtml#ch07fig26)所示。
- en: '**FIGURE 7-26:** Gluing in the roof. Be sure to only glue one half of the roof
    so that the other side can open.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-26：** 固定屋顶。确保只粘合屋顶的一半，这样另一半才能打开。'
- en: '![Image](../images/fig7_26.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_26.jpg)'
- en: Hook the paper clip linkage around the last hole in the servo horn, as shown
    in [Figure 7-27](ch07.xhtml#ch07fig27), with the rounded hook attached to the
    servo. Make sure that the opposing bend is pointing back toward the servo motor.
    This will hook into the frame of the roof piece.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如[图 7-27](ch07.xhtml#ch07fig27)所示，将回形针连杆挂到舵机角的最后一个孔上，圆形的钩子连接到舵机上。确保对面的弯曲部分指向舵机电动机的方向。这将挂在屋顶部件的框架上。
- en: '**FIGURE 7-27:** Servo horn and paper clip linkage'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-27：** 舵机角和回形针连杆'
- en: '![Image](../images/fig7_27.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_27.jpg)'
- en: Keeping the window flap open, rotate the paper clip until you can insert it
    into the side of the frame through the cardboard itself. If the paper clip isn’t
    long enough to reach, you can either rebend it or reposition the servo horn at
    an angle rotated slightly higher to extend the reach of the linkage. It may be
    helpful to lift the greenhouse structure and reposition the servo horn from underneath.
    Once you’ve positioned the servo horn so it will reach, insert the end of the
    paper clip into the side of the window frame, as shown in [Figure 7-28](ch07.xhtml#ch07fig28).
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 保持窗户翻盖打开，旋转回形针，直到您可以将其插入框架的侧面，通过纸板本身。如果回形针不够长，您可以重新弯曲它，或者将舵机角的角度稍微向上调整，以延长连杆的长度。将温室结构稍微抬起并从下方重新调整舵机角可能会有帮助。一旦您调整好舵机角，使其能够接触到位置，就可以将回形针的一端插入窗框的侧面，如[图
    7-28](ch07.xhtml#ch07fig28)所示。
- en: '**FIGURE 7-28:** Servo arm linkage connected to the window flap'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-28：** 舵机臂连杆与窗翻盖连接'
- en: '![Image](../images/fig7_28.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_28.jpg)'
- en: Bend the portion of the paper clip that protrudes from the other side to create
    a hook so that the linkage does not fall out (see [Figure 7-29](ch07.xhtml#ch07fig29)),
    and cut the remaining end off. Now carefully move the servo back and forth; you
    should be able to open and close the lid of your greenhouse!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 将从另一侧突出部分的回形针弯曲成钩形，以防止连杆掉出来（见[图 7-29](ch07.xhtml#ch07fig29)），然后将剩余部分剪掉。现在小心地前后移动舵机；您应该能够打开和关闭温室的盖子！
- en: '**FIGURE 7-29:** Bending the hook in the servo linkage'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-29：** 舵机连杆中钩子的弯曲'
- en: '![Image](../images/fig7_29.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_29.jpg)'
- en: With the mechanism complete, you can glue or tape the transparency windows for
    the top of the greenhouse. A small dab of glue on the four corners will be just
    enough to hold the window pane down. The window panes should go on the outside
    of the greenhouse roof to allow room for the linkage to open and close the lid.
    Next, you’ll build a box to hold the motor and fan.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 机制完成后，您可以将透明窗户粘贴或固定到温室的顶部。四个角落涂上一小点胶水即可将窗板固定住。窗板应该放在温室屋顶的外面，以便为连杆的开启和关闭留出空间。接下来，您将制作一个盒子来容纳电动机和风扇。
- en: '**Build the Fan-Motor Box**'
  id: totrans-222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作风扇电动机盒**'
- en: The motor will serve as a fan to move air around when the greenhouse gets too
    warm. To prevent the motor from moving as it spins and vibrates, we designed a
    small cardboard box to hold it in. The template has a design for a five-sided
    box with a small hole to allow the motor wires to come through, shown in [Figure
    7-30](ch07.xhtml#ch07fig30).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 电动机将作为风扇来移动空气，以便在温室温度过高时帮助通风。为了防止电动机在旋转和振动时移动，我们设计了一个小纸板盒来固定它。模板设计为一个五面盒子，并且有一个小孔，以允许电动机电线通过，见[图
    7-30](ch07.xhtml#ch07fig30)。
- en: Cut out this template from a piece of cardboard, and carefully score the dashed
    lines so that it can fold up into a box. Using either tape or hot glue, secure
    the four sides of the box so that it will hold the motor snugly (see [Figure 7-31](ch07.xhtml#ch07fig31)).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 从一块硬纸板上剪下这个模板，并小心地在虚线处打折，使其可以折叠成一个盒子。使用胶带或热熔胶固定盒子的四个边，以确保它能紧密地容纳电动机（见[图 7-31](ch07.xhtml#ch07fig31)）。
- en: To build a fan blade, you’ll glue a small piece of cardstock onto the end of
    the motor. Cut the fan blade so that it is no more than 1.25 inches wide. To help
    the fan move more air, fold the edges of the cardstock as shown in [Figure 7-32](ch07.xhtml#ch07fig32).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作风扇叶片，您需要将一小块卡纸粘到电动机的末端。将风扇叶片剪裁成不超过1.25英寸宽。为了帮助风扇更好地移动空气，按[图 7-32](ch07.xhtml#ch07fig32)所示折叠卡纸的边缘。
- en: '**FIGURE 7-30:** The fan-motor box'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-30：** 风扇电动机盒'
- en: '![Image](../images/fig7_30.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_30.jpg)'
- en: '**FIGURE 7-31:** Completely assembled motor box with the motor inside'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-31：** 完全组装的电动机盒，电动机位于其中'
- en: '![Image](../images/fig7_31.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_31.jpg)'
- en: '**FIGURE 7-32:** Final fan blade'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-32：** 最终风扇叶片'
- en: '![Image](../images/fig7_32.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig7_32.jpg)'
- en: This will ensure that the fan doesn’t hit the plant or anything else inside
    the tiny greenhouse. Using a small dab of hot glue, attach the fan blade to the
    motor as shown in [Figures 7-33](ch07.xhtml#ch07fig33) and [7-34](ch07.xhtml#ch07fig34).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这样可以确保风扇不会碰到植物或温室内部的其他物体。使用少量热胶，将风扇叶片固定到电机上，如[图 7-33](ch07.xhtml#ch07fig33)和[图
    7-34](ch07.xhtml#ch07fig34)所示。
- en: '**FIGURE 7-33:** Securing the fan blade to the motor'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-33：** 将风扇叶片固定到电机上'
- en: '![Image](../images/fig7_33.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_33.jpg)'
- en: '**FIGURE 7-34:** Fan-motor assembly complete'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-34：** 风扇电机组件完成'
- en: '![Image](../images/fig7_34.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_34.jpg)'
- en: '**Connect It Up**'
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**连接它**'
- en: Now you have all of the pieces you need for your Tiny Desktop Greenhouse, so
    it’s time to install the electronics. Remove the temperature sensor from the breadboard,
    and use three male-to-female jumper wires to extend the connections of the sensor,
    as shown in [Figure 7-35](ch07.xhtml#ch07fig35). Pay attention to which wires
    you move, and connect them up again using the extended wires. When you hold the
    flat side of the temperature sensor facing you with the pins to the left, the
    top pin is power, the middle pin is the signal, and the bottom pin is ground.
    We used red, yellow, and black wires to show the power, signal, and ground connections,
    respectively.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你拥有了所有需要的组件来搭建你的迷你桌面温室，是时候安装电子设备了。将温度传感器从面包板上取下，使用三根公对母跳线来扩展传感器的连接，如[图 7-35](ch07.xhtml#ch07fig35)所示。注意你移动的电线，并使用延长线重新连接它们。当你将温度传感器的平面朝向自己，针脚朝左时，顶端的针脚是电源，中间的针脚是信号，底部的针脚是接地。我们使用红色、黄色和黑色电线分别表示电源、信号和接地连接。
- en: '**FIGURE 7-35:** Extending the temperature sensor with male-to-female jumper
    wires'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-35：** 使用公对母跳线扩展温度传感器'
- en: '![Image](../images/fig7_35.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_35.jpg)'
- en: You’ll need to place the temperature sensor inside the greenhouse. Use a piece
    of masking tape to secure the temperature sensor directly to the plant before
    sticking it inside your new greenhouse, as shown in [Figure 7-36](ch07.xhtml#ch07fig36).
    You can now feed the wires out under one side of the greenhouse, or you could
    also make a small hole to feed the wires through.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将温度传感器放置在温室内部。使用一小块遮蔽胶带将温度传感器直接固定在植物上，然后将其放入新的温室中，如[图 7-36](ch07.xhtml#ch07fig36)所示。现在你可以将电线从温室的一侧引出，或者你也可以打个小孔，将电线穿过。
- en: '**FIGURE 7-36:** Secure the temperature sensor directly to your plant'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-36：** 将温度传感器直接固定到你的植物上'
- en: '![Image](../images/fig7_36.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_36.jpg)'
- en: Similarly, move the fan-motor assembly so that it sits near the corner of the
    greenhouse. The motor wires should be long enough to reach the breadboard without
    extensions, but if you need to, you can add extra male-to-female extension wires
    to make wiring easier.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，将风扇电机组件移动到温室的角落附近。电机的电线应该足够长，能直接连接到面包板，如果需要，你可以添加额外的公对母延长线来简化接线。
- en: Now, you should still have enough room for a small plant to rest comfortably
    in this new cozy habitat. It’s time to get your new exotic house plant and put
    it inside your brand new greenhouse! To test out how effectively our autovent
    system regulated the temperature, we created our own indoor sun with some really
    big floodlights to heat the air.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该仍然有足够的空间让一小株植物舒适地休息在这个新建的小温室中。是时候把你的新异国植物放进去，安置到你全新的温室里！为了测试我们的自动通风系统如何有效地调节温度，我们用一些非常大的泛光灯模拟了室内阳光，来加热空气。
- en: '[Figure 7-37](ch07.xhtml#ch07fig37) shows one of our tests on the Tiny Desktop
    Greenhouse.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-37](ch07.xhtml#ch07fig37) 展示了我们在迷你桌面温室中的一项测试。'
- en: '**FIGURE 7-37:** Testing a Tiny Desktop Greenhouse'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7-37：** 测试迷你桌面温室'
- en: '![Image](../images/fig7_37.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig7_37.jpg)'
- en: '**GOING FURTHER**'
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**进一步探索**'
- en: There are a lot of opportunities to take this project to the next level.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目有很多提升的机会。
- en: '**Hack**'
  id: totrans-251
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**黑客**'
- en: At the moment, your greenhouse is pretty darn small. To make space for more
    plants, find a large cardboard box like the ones used for copy paper. Cut some
    windows in it, line them with transparency film, and move the electronics into
    this bigger and better greenhouse. Or, take a look at the plastic greenhouses
    they have over at IKEA. Where can you mount the servo motor so that you can open
    and close the window on this greenhouse?
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的温室还挺小的。为了给更多的植物腾出空间，找一个像复印纸盒子那样大的纸箱，剪几个窗户，用透明膜覆盖窗户，然后将电子设备移到这个更大、更好的温室里。或者，看看IKEA卖的塑料温室。你可以在哪里安装伺服电机，以便你能开关这个温室的窗户？
- en: '**Modify**'
  id: totrans-253
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: The current set point is 85 degrees Fahrenheit, and although that was a good
    temperature for us to test because we could easily increase it with our own body
    heat, it’s actually still pretty low for most plants. Look up the ideal growing
    temperature for your plant, and modify your code to use this new set point.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的设定温度是85华氏度，虽然这是一个适合我们测试的温度，因为我们可以通过自己的体温轻松地提高温度，但实际上对于大多数植物来说，这个温度还是偏低。查找一下你植物的理想生长温度，并修改你的代码以使用这个新的设定温度。
- en: You can also modify how often the greenhouse samples the temperature with the
    delay. A delay of 1 second is pretty short. If your temperatures swing at all,
    the lid will be opening and closing every few seconds. This can quickly become
    annoying. Change this delay to something like 5 minutes, which would be 30,000
    ms.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以修改温室采样温度的频率，通过延迟来调整。1秒钟的延迟非常短。如果温度波动，盖子将在几秒钟内开关多次，这样会变得很烦人。将延迟时间更改为5分钟左右，即30,000毫秒。
