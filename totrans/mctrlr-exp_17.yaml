- en: '**17  STM32 FPB Glitch**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**17  STM32 FPB 故障**'
- en: There are many brilliant attacks to be found in Obermaier, Schink, and Moczek
    (2020), but my favorite is an escape from RDP Level 1 of the STM32F103 and also
    one of its clones, the APM32F103 from Geehy. This one involves a lot of moving
    parts, so gather ’round and pay attention!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Obermaier、Schink 和 Moczek（2020）中可以找到许多精彩的攻击，但我最喜欢的是 STM32F103 的 RDP Level
    1 逃逸攻击，以及它的克隆之一，Geehy 的 APM32F103。这个攻击涉及许多复杂的环节，所以大家聚精会神地听好！
- en: First, recall from [Chapter 2](ch02.xhtml#ch02) that RDP Level 1 disables flash
    memory when a JTAG debugger is attached, but that the connection is allowed and
    all SRAM is available to the debugger. Resetting the chip will disconnect the
    debugger and reconnect flash memory, but it does not erase SRAM.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，回想一下 [第 2 章](ch02.xhtml#ch02)，RDP Level 1 会在连接 JTAG 调试器时禁用闪存，但连接仍然被允许，所有
    SRAM 对调试器是可用的。重置芯片会断开调试器并重新连接闪存，但不会擦除 SRAM。
- en: Second, the STM32 chips can boot from SRAM, ROM, or flash memory depending upon
    the values sampled on the BOOT0 and BOOT1 pins at startup. Flash has full access
    to memory, and ROM contains a bootloader with its own software implementation
    of the access restrictions, but when booting from SRAM, the code has the same
    restrictions as when JTAG is attached. Namely, flash memory is inaccessible. This
    restriction applies when booting from SRAM, but not when executing SRAM after
    booting from ROM or flash memory.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，STM32 芯片可以根据启动时 BOOT0 和 BOOT1 引脚上的值，从 SRAM、ROM 或闪存启动。闪存可以完全访问内存，ROM 包含一个引导加载程序，具有其自身的软件实现的访问限制，但从
    SRAM 启动时，代码的限制与连接 JTAG 时相同。也就是说，闪存不可访问。这个限制适用于从 SRAM 启动，但从 ROM 或闪存启动后执行 SRAM 时则不受此限制。
- en: As it’s sometimes desirable to make small patches to flash memory without rewriting
    the memory, the STM32’s Cortex M3 core supports a flash patch and breakpoint unit
    (FPB). This unit is also handy when making changes to mask ROM, which can be patched
    even though it, of course, cannot be rewritten in place. [Figure 17.2](ch17.xhtml#ch17fig2)
    shows the registers of this unit, and note that the pointers begin with `E`, so
    this peripheral comes from the Cortex M3 core and is not unique to the STM32.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要对闪存进行小的修补而不重写内存，STM32 的 Cortex M3 内核支持闪存补丁和断点单元（FPB）。这个单元在修改掩码 ROM 时也非常有用，尽管掩码
    ROM 当然不能就地重写，但仍然可以进行补丁。 [图 17.2](ch17.xhtml#ch17fig2) 显示了这个单元的寄存器，注意指针以 `E` 开头，因此这个外设来自
    Cortex M3 内核，并非 STM32 独有。
- en: '![Image](../images/f0162-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0162-01.jpg)'
- en: 'Figure 17.1: Simplified STM32F103 Memory Map'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.1：简化的 STM32F103 内存映射
- en: '![Image](../images/f0163-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0163-01.jpg)'
- en: 'Figure 17.2: Cortex M3 Flash Patch and Breakpoint (FPB) Unit'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.2：Cortex M3 闪存补丁和断点（FPB）单元
- en: So Obermaier wrote a bit of two-stage shellcode that is loaded as a bootable
    image into SRAM. The first stage can’t read flash memory because of the access
    restrictions, but it can reconfigure the FPB device to patch the Reset vector
    at `0x00000004` to point to the second stage. The boot pins are then changed to
    select flash memory as the boot source, and a supply voltage glitch is timed with
    a reset as a trigger.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 Obermaier 编写了一段两阶段的 shellcode，它作为可启动映像加载到 SRAM 中。第一阶段不能读取闪存，因为存在访问限制，但它可以重新配置
    FPB 设备，以补丁形式将复位向量 `0x00000004` 指向第二阶段。然后，启动引脚被更改为选择闪存作为启动源，并且一个电源电压故障被与重置同步，以作为触发器。
- en: The reset restores access to flash memory, and if the glitch succeeds at the
    right moment, the FPB’s patch of the Reset vector is not cleared by the reset
    sequence. This causes execution to return immediately to the second stage of the
    shellcode in SRAM. This stage can then freely export all the contents of memory.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 重置会恢复对闪存的访问，如果故障在合适的时刻成功，FPB 的复位向量补丁将不会被重置序列清除。这会导致执行立即返回到 SRAM 中第二阶段的 shellcode。然后，这个阶段可以自由地导出所有内存内容。
- en: In terms of portability, I’ve already pointed out that the FPB unit comes from
    ARM and not from ST Micro. This same unit is used in other exploits in this book,
    found in [Chapters C.4](app03.xhtml#app03_4) and [C.5](app03.xhtml#app03_5).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 就可移植性而言，我已经指出 FPB 单元来自 ARM，而非 ST Micro。这个单元在本书的其他漏洞攻击中也有使用，具体见 [C.4 章](app03.xhtml#app03_4)
    和 [C.5 章](app03.xhtml#app03_5)。
- en: '![Image](../images/f0165-01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0165-01.jpg)'
- en: 'Figure 17.3: Geehy APM32F103, an STM32 Clone'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.3：Geehy APM32F103，STM32 克隆
