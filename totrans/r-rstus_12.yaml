- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 10 QUARTO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Quarto, the next-generation version of R Markdown, offers a few advantages over
    its predecessor. First, the syntax Quarto uses across output types is more consistent.
    As you’ve seen in this book, R Markdown documents might use a variety of conventions;
    for example, xaringan indicates new slides using three dashes, which would create
    a horizontal line in other output formats, and the distill package likewise has
    layout options that don’t work in xaringan.
  prefs: []
  type: TYPE_NORMAL
- en: Quarto also supports more languages than R Markdown does, as well as multiple
    code editors. While R Markdown is designed to work specifically in the RStudio
    IDE, Quarto works not only in RStudio but also in code editors such as Visual
    Studio (VS) Code and JupyterLab, making it easy to use with multiple languages.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on the benefits of using Quarto as an R user. It explains
    how to set up Quarto, then covers some of the most important differences between
    Quarto and R Markdown. Finally, you’ll learn how to use Quarto to make the parameterized
    reports, presentations, and websites covered in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Quarto Document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Versions of RStudio starting with 2022.07.1 come with Quarto installed. To check
    your RStudio version, click **RStudio****About RStudio** in the top menu bar.
    If you have an older version of RStudio, update it now by reinstalling it, as
    outlined in [Chapter 1](chapter1.xhtml). Quarto should then be installed for you.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve installed Quarto, create a document by clicking **File****New File****Quarto
    Document**. You should see a menu, shown in [Figure 10-1](chapter10.xhtml#fig10-1),
    that looks like the one used to create an R Markdown document.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-1: The RStudio menu for creating a new Quarto document'
  prefs: []
  type: TYPE_NORMAL
- en: Give your document a title and choose an output format. The Engine option allows
    you to select a different way to render documents. By default, it uses Knitr,
    the same rendering tool used by R Markdown. The Use Visual Markdown Editor option
    provides an interface that looks more like Microsoft Word, but it can be finicky,
    so I won’t cover it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting Quarto document should contain default content, just as R Markdown
    documents do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: 1 + 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: '#| echo: false'
  prefs: []
  type: TYPE_NORMAL
- en: 2 * 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Although R Markdown and Quarto have many features in common, they also have
    some differences to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing R Markdown and Quarto
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quarto and R Markdown documents have the same basic structure—YAML metadata,
    followed by a combination of Markdown text and code chunks—but they have some
    variations in syntax.
  prefs: []
  type: TYPE_NORMAL
- en: The format and execute YAML Fields
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Quarto uses slightly different options in its YAML. It replaces the output
    field with the format field and uses the value html instead of html_document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Other Quarto formats also use different names than their R Markdown counterparts:
    docx instead of word_document and pdf instead of pdf_document, for example. All
    of the possible formats can be found at *[https://quarto.org/docs/guide/](https://quarto.org/docs/guide/)*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A second difference between R Markdown and Quarto syntax is that Quarto doesn’t
    use a setup code chunk to set default options for showing code, charts, and other
    elements in the rendered versions of the document. In Quarto, these options are
    set in the execute field of the YAML. For example, the following would hide code,
    as well as all warnings and messages, from the rendered document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Quarto also allows you to write true and false in lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: Individual Code Chunk Options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In R Markdown, you override options at the individual code chunk level by adding
    the new option within the curly brackets that start a code chunk. For example,
    the following would show both the code 2 * 2 and its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]{r echo = TRUE}'
  prefs: []
  type: TYPE_NORMAL
- en: 2 * 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Quarto instead uses this syntax to set individual code chunk–level options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: '#| echo: false'
  prefs: []
  type: TYPE_NORMAL
- en: 2 * 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The option is set within the code chunk itself. The characters #| (known as
    a *hash pipe*) at the start of a line indicate that you are setting options.'
  prefs: []
  type: TYPE_NORMAL
- en: Dashes in Option Names
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Another difference you’re likely to see if you switch from R Markdown to Quarto
    is that option names consisting of two words are separated by a dash rather than
    a period. R Markdown, for example, uses the code chunk option fig.height to specify
    the height of plots. In contrast, Quarto uses fig-height, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: '#| fig-height: 10'
  prefs: []
  type: TYPE_NORMAL
- en: library(palmerpenguins)
  prefs: []
  type: TYPE_NORMAL
- en: library(tidyverse)
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(
  prefs: []
  type: TYPE_NORMAL
- en: penguins,
  prefs: []
  type: TYPE_NORMAL
- en: aes(
  prefs: []
  type: TYPE_NORMAL
- en: x = bill_length_mm,
  prefs: []
  type: TYPE_NORMAL
- en: y = bill_depth_mm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_point()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Helpfully for anyone coming from R Markdown, fig.height and similar options
    containing periods will continue to work if you forget to make the switch. A list
    of all code chunk options can be found on the Quarto website at *[https://quarto.org/docs/reference/cells/cells-knitr.xhtml](https://quarto.org/docs/reference/cells/cells-knitr.xhtml)*.
  prefs: []
  type: TYPE_NORMAL
- en: The Render Button
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can follow the same process to render your Quarto document as in R Markdown,
    but in Quarto the button is called Render rather than Knit. Clicking Render will
    turn the Quarto document into an HTML file, Word document, or any other output
    format you select.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterized Reporting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you’ve learned a bit about how Quarto works, you’ll make a few different
    documents with it, starting with a parameterized report. The process of making
    parameterized reports with Quarto is nearly identical to doing so with R Markdown.
    In fact, you can adapt the R Markdown document you used to make the Urban Institute
    COVID report in [Chapter 7](chapter7.xhtml) for Quarto simply by copying the *.Rmd*
    file, changing its extension to *.qmd*, and then making a few other changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: library(tidyverse)
  prefs: []
  type: TYPE_NORMAL
- en: library(urbnthemes)
  prefs: []
  type: TYPE_NORMAL
- en: library(scales)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: cases <- tibble(state.name) %>%
  prefs: []
  type: TYPE_NORMAL
- en: rbind(state.name = "District of Columbia") %>%
  prefs: []
  type: TYPE_NORMAL
- en: left_join(
  prefs: []
  type: TYPE_NORMAL
- en: read_csv("https://data.rfortherestofus.com/united_states_covid19_cases_deaths
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _and_testing_by_state.csv", skip = 2),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: by = c("state.name" = "State/Territory")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  prefs: []
  type: TYPE_NORMAL
- en: select(
  prefs: []
  type: TYPE_NORMAL
- en: total_cases = `Total Cases`,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: state.name,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: cases_per_100000 = `Case Rate per 100000`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ) %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(cases_per_100000 = parse_number(cases_per_100000)) %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(case_rank = rank(-cases_per_100000, ties.method = "min"))
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: state_text <- if_else(params$state == "District of Columbia", str_glue("the
    District of
  prefs: []
  type: TYPE_NORMAL
- en: Columbia"), str_glue("state of {params$state}"))
  prefs: []
  type: TYPE_NORMAL
- en: state_cases_per_100000 <- cases %>%
  prefs: []
  type: TYPE_NORMAL
- en: filter(state.name == params$state) %>%
  prefs: []
  type: TYPE_NORMAL
- en: pull(cases_per_100000) %>%
  prefs: []
  type: TYPE_NORMAL
- en: comma()
  prefs: []
  type: TYPE_NORMAL
- en: state_cases_rank <- cases %>%
  prefs: []
  type: TYPE_NORMAL
- en: filter(state.name == params$state) %>%
  prefs: []
  type: TYPE_NORMAL
- en: pull(case_rank)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: '#| fig-height: 8 ❸'
  prefs: []
  type: TYPE_NORMAL
- en: set_urbn_defaults(style = "print")
  prefs: []
  type: TYPE_NORMAL
- en: cases %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(highlight_state = if_else(state.name == params$state, "Y", "N")) %>%
  prefs: []
  type: TYPE_NORMAL
- en: mutate(state.name = fct_reorder(state.name, cases_per_100000)) %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(
  prefs: []
  type: TYPE_NORMAL
- en: x = cases_per_100000,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: y = state.name,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: fill = highlight_state
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_col() +
  prefs: []
  type: TYPE_NORMAL
- en: scale_x_continuous(labels = comma_format()) +
  prefs: []
  type: TYPE_NORMAL
- en: theme(legend.position = "none") +
  prefs: []
  type: TYPE_NORMAL
- en: labs(
  prefs: []
  type: TYPE_NORMAL
- en: y = NULL,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: x = "Cases per 100,000"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This code switches output: html_document to format: html in the YAML ❶, then
    removes the setup code chunk and sets those options in the YAML’s execute field
    ❷. Finally, the fig.height option in the last code chunk is replaced with fig-height
    and labeled as an option with the hash pipe ❸.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to create one report for each state, you must tweak the *render.R* script
    file you used to make parameterized reports in [Chapter 7](chapter7.xhtml):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This updated *render.R* file loads the quarto package instead of the rmarkdown
    package ❶ and changes the input file to *urban-covid-budget-report.qmd* ❷. The
    reports tibble uses execute_params instead of params ❸ because this is the argument
    that the quarto_render() function expects. To render the reports, the quarto_render()
    function replaces the render() function from the markdown package ❹. As in [Chapter
    7](chapter7.xhtml), running this code should produce a report for each state.
  prefs: []
  type: TYPE_NORMAL
- en: Making Presentations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quarto can also produce slideshow presentations like those you made in [Chapter
    8](chapter8.xhtml) with the xaringan package. To make a presentation with Quarto,
    click **File****New File****Quarto Presentation**. Choose **Reveal JS** to make
    your slides and leave the Engine and Editor options untouched.
  prefs: []
  type: TYPE_NORMAL
- en: 'The slides you’ll make use the reveal.js JavaScript library under the hood,
    a technique similar to making slides with xaringan. The following code updates
    the presentation you made in [Chapter 8](chapter8.xhtml) so that it works with
    Quarto:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: library(tidyverse)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins <- read_csv("https://raw.githubusercontent.com/rfortherestofus/r-without-statistics/
  prefs: []
  type: TYPE_NORMAL
- en: main/data/penguins-2008.csv")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: average_bill_length <- penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: summarize(avg_bill_length = mean(
  prefs: []
  type: TYPE_NORMAL
- en: bill_length_mm,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: na.rm = TRUE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )) %>%
  prefs: []
  type: TYPE_NORMAL
- en: pull(avg_bill_length)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This code sets format: revealjs in the YAML to make a presentation and adds
    several global code chunk options in the execute section. It then removes the
    three dashes used to make slide breaks because first- or second-level headings
    make new slides in Quarto (though you could still use three dashes to manually
    add slide breaks). When you render this code, you should get an HTML file with
    your slides. The output should look similar to the default xaringan slides from
    [Chapter 8](chapter8.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Revealing Content Incrementally
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Quarto slides can incrementally reveal content. To reveal bulleted and numbered
    lists one item at a time by default, add incremental: true to the document’s YAML
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As a result of this code, the content in all lists in the presentation should
    appear on the slide one item at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also set just some lists to incrementally reveal using this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Using ::: to start and end a segment of the document creates a section in the
    resulting HTML file known as a *div*. The HTML <div> tag allows you to define
    properties within that section. In this code, adding {.incremental} sets a custom
    CSS class that displays the list incrementally.'
  prefs: []
  type: TYPE_NORMAL
- en: Aligning Content and Adding Background Images
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can use a <div> tag to create columns in Quarto slides, too. Say you want
    to create a slide with content in two columns, as in [Figure 10-2](chapter10.xhtml#fig10-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-2: Creating two columns with a <div> tag'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code creates this two-column slide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_length_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: penguins %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(x = bill_depth_mm)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_histogram() +
  prefs: []
  type: TYPE_NORMAL
- en: theme_minimal()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the :::, as well as ::::, which creates nested <div> sections. The columns
    class tells the HTML that all content within the :::: should be laid out as columns.
    Then, ::: {.column width="50%"} starts a <div> that takes up half the width of
    the slide. The closing ::: and :::: indicate the end of the section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When using xaringan, you easily centered content on a slide by surrounding
    it with .center[]. Alignment in Quarto is slightly more complicated. Quarto has
    no built-in CSS class to center content, so you’ll need to create one yourself.
    Begin a CSS code chunk and a custom class called center-slide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]{css}'
  prefs: []
  type: TYPE_NORMAL
- en: .center-slide {
  prefs: []
  type: TYPE_NORMAL
- en: 'text-align: center;'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This CSS center-aligns all content. (The text-align property aligns images,
    too, not just text.)
  prefs: []
  type: TYPE_NORMAL
- en: 'To apply the new center-slide class, put it next to the title of the slide,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: With the custom CSS applied, the slide should now center all content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, when working in xaringan, you added a background image to a slide.
    To do the same thing in Quarto, apply the background-image attribute to a slide,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This should add a slide with the text *Penguins* in front of the selected image.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Your Slides with Themes and CSS
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You’ve started making some changes to the look and feel of the Quarto slides,
    but you can add even more customization to your design. As with xaringan, there
    are two main ways to further customize your slides in Quarto: using existing themes
    and changing the CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Themes are the easiest way to change your slide design. To apply a theme in
    Quarto, simply add its name to your YAML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Using this option should change the theme from light (the default) to dark.
    You can see the title slide with the dark theme applied in [Figure 10-3](chapter10.xhtml#fig10-3).
    To see the full list of available themes, go to *[https://quarto.org/docs/presentations/revealjs/themes.xhtml](https://quarto.org/docs/presentations/revealjs/themes.xhtml)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-3: A slide with the dark theme applied'
  prefs: []
  type: TYPE_NORMAL
- en: The second option to change your slide design further is to write custom CSS.
    Quarto uses a type of CSS called Sass that lets you include variables in the CSS.
    These variables resemble those from the xaringanthemer package, which allowed
    you to set values for header formatting using header_h2_font_size and header_color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **File****New File****New Text File**, create a Sass file called *theme.scss*,
    and add the following two mandatory sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The scss:defaults section is where you use the Quarto Sass variables. For example,
    to change the color and size of first-level headers, add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'All Quarto Sass variables start with a dollar sign, followed by a name. To
    apply these tweaks to your slides, adjust your YAML to tell Quarto to use the
    custom *theme.scss* file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[Figure 10-4](chapter10.xhtml#fig10-4) shows the changes applied to the rendered
    slides.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-4: A slide modified using custom CSS'
  prefs: []
  type: TYPE_NORMAL
- en: All predefined variables should go in the scss:defaults section. You can find
    the full list of these variables at *[https://quarto.org/docs/presentations/revealjs/themes.xhtml#sass-variables](https://quarto.org/docs/presentations/revealjs/themes.xhtml#sass-variables)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scss:rules section is where you can add CSS tweaks for which there are
    no existing variables. For example, you could place the code you wrote to center
    the slide’s content in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Because rendered Quarto slides are HTML documents, you can tweak them however
    you’d like with custom CSS. What’s more, because the slides use reveal.js under
    the hood, any features built into that JavaScript library work in Quarto. This
    library includes easy ways to add transitions, animations, interactive content,
    and much more. The demo Quarto presentation available at *[https://quarto.org/docs/presentations/revealjs/demo/](https://quarto.org/docs/presentations/revealjs/demo/)*
    shows many of these features in action.
  prefs: []
  type: TYPE_NORMAL
- en: Making Websites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quarto can make websites without requiring the use of an external package like
    distill. To create a Quarto website, go to **File****New Project**. Select **New
    Directory**, then **Quarto Website**. You’ll be prompted to choose a directory
    in which to place your project. Keep the default engine (Knitr), check **Create
    a Git Repository** (which should show up only if you’ve already installed Git),
    and leave everything else unchecked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create Project**, which should create a series of files: *index.qmd*,
    *about.qmd*, *_quarto.yml*, and *styles.css*. These files resemble those created
    by the distill package. The *.qmd* files are where you’ll add content, the *_quarto.yml*
    file is where you’ll set options for the entire website, and the *styles.css*
    file is where you’ll add CSS to customize the website’s appearance.'
  prefs: []
  type: TYPE_NORMAL
- en: Building the Website
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll start by modifying the *.qmd* files. Open the home page file (*index.qmd*),
    delete the default content after the YAML, and replace it with the content from
    the website you made in [Chapter 9](chapter9.xhtml). Remove the layout = "l-page"
    element, which you used to widen the layout. I’ll discuss how to change the page’s
    layout in Quarto later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: To render a Quarto website, look for the Build tab in the top right of RStudio
    and click **Render Website**. The rendered website should now appear in the Viewer
    pane on the bottom-right pane of RStudio. If you navigate to the Files pane on
    the same panel, you should also see that a *_site* folder has been created to
    hold the content of the rendered site. Try opening the *index.xhtml* file in your
    web browser. You should see the website in [Figure 10-5](chapter10.xhtml#fig10-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-5: The Quarto website with warnings and messages'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the web page includes many warnings and messages that you don’t
    want to show. In R Markdown, you removed these in the setup code chunk; in Quarto,
    you can do so in the YAML. Add the following code to the *index.qmd* YAML to remove
    all code, warnings, and messages from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note, however, that these options will make changes to only one file. Next,
    you’ll see how to set these options for the entire website.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When using distill, you modified the *_site.yml* file to make changes to all
    files in the website. In Quarto, you use the *_quarto.yml* file for the same purpose.
    If you open it, you should see three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The top section sets the project type (in this case, a website). The middle
    section defines the website’s title and determines the options for its navigation
    bar. The bottom section modifies the site’s appearance.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll start from the bottom. To remove code, warnings, and messages for every
    page in the website, add the portion of the YAML you wrote earlier to the *_quarto.yml*
    file. The bottom section should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: If you build the website again, you should now see just the content, as in [Figure
    10-6](chapter10.xhtml#fig10-6).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-6: The website with warnings and messages removed'
  prefs: []
  type: TYPE_NORMAL
- en: In this section of the _*quarto.yml* file, you can add any options you would
    otherwise place in a single *.qmd* file to apply them across all the pages of
    your website.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Website’s Appearance
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The format section of the *_quarto.yml* file determines the appearance of rendered
    files. By default, Quarto applies a theme called cosmo, but there are many themes
    available. (You can see the full list at *[https://quarto.org/docs/output-formats/html-themes.xhtml](https://quarto.org/docs/output-formats/html-themes.xhtml)*.)
    To see how a different theme affects the output, make the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The minty theme changes the website’s fonts and updates the color scheme to
    gray and light green.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to using prebuilt themes, you can customize your website with CSS.
    The css: styles.css section in the *_quarto.yml* file indicates that Quarto will
    use any CSS in the *styles.css* file when rendering. Try adding the following
    CSS to *styles.css* to make first-level headers red and 50 pixels large:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The re-rendered *index.xhtml* now has large red headings (shown in grayscale
    in [Figure 10-7](chapter10.xhtml#fig10-7)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-7: The website with custom CSS applied'
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative approach to customizing your website is to use Sass variables
    in a *.scss* file, as you did in your presentation. For example, create a file
    called *styles.scss* and add a line like this one to make the body background
    bright yellow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To get Quarto to use the *styles.scss* file, adjust the theme line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This syntax tells Quarto to use the minty theme, then make additional tweaks
    based on the *styles.scss* file. If you render the website again, you should see
    the bright yellow background throughout ([Figure 10-8](chapter10.xhtml#fig10-8),
    again in grayscale for print).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-8: The website with custom CSS applied through styles.scss'
  prefs: []
  type: TYPE_NORMAL
- en: Note that when you add a *.scss* file, the tweaks made in *styles.css* no longer
    apply. If you wanted to use those, you’d need to add them to the *styles.scss*
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The line toc: true creates a table of contents on the right side of the web
    pages (which you can see in [Figures 10-5](chapter10.xhtml#fig10-5) through [10-7](chapter10.xhtml#fig10-7),
    labeled On This Page). You can remove the table of contents by changing true to
    false. Add any further options, such as figure height, to the bottom section of
    the *_quarto.yml* file.'
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Title and Navigation Bar
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The middle section of the *_quarto.yml* file sets the website’s title and navigation.
    Change the title and the text for the About page link as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Changing the title requires adjusting the title line. The navbar section functions
    nearly identically to how it does with distill. The href line lists the files
    the navigation bar should link to. The optional text line specifies the text that
    should show up for that link. [Figure 10-9](chapter10.xhtml#fig10-9) shows these
    changes applied to the website.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-9: The changes to the navigation bar'
  prefs: []
  type: TYPE_NORMAL
- en: The title on the home page is still covid-website-quarto, but you could change
    this in the *index.qmd* file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Wider Layouts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When you created a website with distill, you used the line layout = "l-page"
    to widen the map on the web page. You can accomplish the same result with Quarto
    by using the ::: syntax to add HTML <div> tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]{r}'
  prefs: []
  type: TYPE_NORMAL
- en: '#| out-width: 100%'
  prefs: []
  type: TYPE_NORMAL
- en: Make map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: most_recent <- us_states %>%
  prefs: []
  type: TYPE_NORMAL
- en: left_join(covid_data, by = "state") %>%
  prefs: []
  type: TYPE_NORMAL
- en: slice_max(
  prefs: []
  type: TYPE_NORMAL
- en: order_by = date,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: n = 1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: most_recent %>%
  prefs: []
  type: TYPE_NORMAL
- en: ggplot(aes(fill = deaths_avg_per_100k)) +
  prefs: []
  type: TYPE_NORMAL
- en: geom_sf() +
  prefs: []
  type: TYPE_NORMAL
- en: scale_fill_viridis_c(option = "rocket") +
  prefs: []
  type: TYPE_NORMAL
- en: labs(fill = "Deaths per\n100,000 people") +
  prefs: []
  type: TYPE_NORMAL
- en: theme_void()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This code adds :::{.column-screen-inset} to the beginning of the mapmaking
    code chunk and ::: to the end of it. This code chunk now also includes the line
    #| out-width: 100% to specify that the map should take up all of the available
    width. Without this line, the map would take up only a portion of the window.
    There are a number of different output widths you can use; see the full list at
    *[https://quarto.org/docs/authoring/article-layout.xhtml](https://quarto.org/docs/authoring/article-layout.xhtml)*.'
  prefs: []
  type: TYPE_NORMAL
- en: Hosting Your Website on GitHub Pages and Quarto Pub
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can host your Quarto website using GitHub Pages, just as you did with your
    distill website. Recall that GitHub Pages requires you to save the website’s files
    in the *docs* folder. Change the *_quarto.yml* file so that the site outputs to
    this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you render the site, the HTML and other files should show up in the
    *docs* directory. At this point, you can push your repository to GitHub, adjust
    the GitHub Pages settings as you did in [Chapter 9](chapter9.xhtml), and see the
    URL at which your Quarto website will live.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to GitHub Pages, Quarto has a free service called Quarto Pub
    that makes it easy to get your materials online. If you’re not a GitHub user,
    this is a great way to publish your work. To see how it works, you’ll publish
    the website you just made to it. Click the **Terminal** tab on the bottom-left
    pane of RStudio. At the prompt, enter quarto publish. This should bring up a list
    of ways you can publish your website, as shown in [Figure 10-10](chapter10.xhtml#fig10-10).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-10: The list of providers to publish your Quarto website'
  prefs: []
  type: TYPE_NORMAL
- en: Press **Enter** to select Quarto Pub. You’ll then be asked to authorize RStudio
    to publish to Quarto Pub. Enter **Y** to do so, which should take you to *[https://quartopub.com](https://quartopub.com)*.
    Sign up for an account (or sign in if you already have one). You should see a
    screen indicating that you have successfully signed in and authorized RStudio
    to connect with Quarto Pub. From there, you can return to RStudio, which should
    prompt you to select a name for your website. The easiest option is to use your
    project’s name. Once you enter the name, Quarto Pub should publish the site and
    take you to it, as shown in [Figure 10-11](chapter10.xhtml#fig10-11).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/fig10-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-11: The website published on Quarto Pub'
  prefs: []
  type: TYPE_NORMAL
- en: When you make updates to your site, you can republish it to Quarto Pub using
    the same steps. Quarto Pub is probably the easiest way to publish HTML files made
    with Quarto.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you’ve seen in this chapter, you can do everything you did in R Markdown
    using Quarto, without loading any external packages. In addition, Quarto’s different
    output formats use a more consistent syntax. For example, because you can make
    new slides in Quarto by adding first- or second-level headers, the Quarto documents
    you use to create reports should translate easily to presentations.
  prefs: []
  type: TYPE_NORMAL
- en: You’re probably wondering at this point whether you should use R Markdown or
    Quarto. It’s a good question, and one many in the R community are thinking about.
    R Markdown isn’t going away, so if you already use it, you don’t need to switch.
    If you’re new to R, however, you may be a good candidate for Quarto, as its future
    features may not be backported to R Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the differences between R Markdown and Quarto are relatively small,
    and the impact of switching between tools should be minor. Both R Markdown and
    Quarto can help you become more efficient, avoid manual errors, and share results
    in a wide variety of formats.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Andrew Bray, Rebecca Barter, Silvia Canelón, Christophe Dervieu, Devin Pastor,
    and Tatsu Shigeta, “From R Markdown to Quarto,” workshop materials from rstudio::conf
    2022, Washington, DC, July 25–26, 2022, *[https://rstudio-conf-2022.github.io/rmd-to-quarto/](https://rstudio-conf-2022.github.io/rmd-to-quarto/)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tom Mock, “Getting Started with Quarto,” online course, accessed December 1,
    2023, *[https://jthomasmock.github.io/quarto-in-two-hours/](https://jthomasmock.github.io/quarto-in-two-hours/)*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
