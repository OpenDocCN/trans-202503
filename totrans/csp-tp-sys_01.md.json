["```\npublic static (double, double)\nDisplacement(double t, double v, double s)\n{\n    var x = v * s * Math.Cos(t);\n    var y = v * s * Math.Sin(t) - 0.5 * 9.81 * Math.Pow(s, 2);\n    return (x, y);\n}\n```", "```\npublic static (double, double)\nDisplacement(double **angle**, double **speed**, double **elapsedTime**)\n{\n`--snip--`\n```", "```\nvar result = Displacement(.523, 65, 4);\n```", "```\nvar result = Displacement(angle: .523, speed: 65, elapsedTime: 4);\n```", "```\nvar result = Displacement(elapsedTime: 4, speed: 65, angle: .523);\n```", "```\npublic struct Angle\n{\n    public double Size {get; set;}\n}\npublic struct Speed\n{\n    public double Amount {get; set;}\n}\n```", "```\npublic static (double, double)\nDisplacement(**Angle** angle, **Speed** speed, **TimeSpan** elapsedTime)\n{\n`--snip--`\n```", "```\nvar result = Displacement(angle: new Angle {Size = .523},\n                          speed: new Speed {Amount = 65},\n                          elapsedTime: seconds);\n```", "```\npublic struct Speed\n{\n    **public Speed(double amount)**\n        **=>** **Amount** **=** **amount;**\n    public double Amount {get; set;}\n}\npublic struct Angle\n{\n    **public Angle(double size)**\n        **=>** **Size** **=** **size;**\n    public double Size {get; set;}\n}\n❶ <samp class=\"SANS_TheSansMonoCd_W5Regular_11\">var result = Displacement(new Angle(.523), new Speed(65), seconds);</samp>\n```", "```\npublic **readonly** struct Speed\n{\n    public Speed(double amount)\n        => Amount = amount;\n    public double Amount **{get;}**\n}\n```", "```\npublic Speed(double amount)\n{\n    if(amount < 0)\n        throw new ArgumentOutOfRangeException(\n            **paramName:** nameof(amount),\n              **message:** \"Speed must be positive\");\n    Amount = amount;\n}\n```", "```\n[Test]\npublic void Speed_cannot_be_negative()\n{\n    Assert.That(\n        () => new Speed(-1),\n        Throws.TypeOf<ArgumentOutOfRangeException>());\n}\n```", "```\npublic static (double, double)\nDisplacement(Angle angle, Speed speed, TimeSpan elapsedTime)\n{\n    var x = speed.Amount * elapsedTime.TotalSeconds * Math.Cos(angle.Size);\n    var y = speed.Amount * elapsedTime.TotalSeconds * Math.Sin(angle.Size)\n            - 0.5 * 9.81 * Math.Pow(elapsedTime.TotalSeconds, 2);\n    return (x, y);\n}\n```", "```\n var x = speed * elapsedTime * Math.Cos(angle);\n    var y = speed * elapsedTime * Math.Sin(angle)\n            - 0.5 * 9.81 * Math.Pow(elapsedTime, 2);\n```", "```\npublic static class Gravity\n{\n    public const double Earth = 9.81;\n}\n```", "```\n `--snip--` - 0.5 * Gravity.Earth * Math.Pow(elapsedTime.TotalSeconds, 2);\n```", "```\npublic static (double, double)\nDisplacement(Angle angle, Speed speed, TimeSpan elapsedTime)\n{\n  ❶ var x = speed.Amount * elapsedTime.TotalSeconds\n          ❷ * Math.Cos(angle.Size);\n  ❸ var y = speed.Amount * elapsedTime.TotalSeconds * Math.Sin(angle.Size)\n            - 0.5 * Gravity.Earth * Math.Pow(elapsedTime.TotalSeconds, 2);\n    return (x, y);\n}\n```", "```\npublic readonly struct Speed\n{\n    `--snip--`\n    public static implicit operator double(Speed speed)\n        => speed.Amount;\n}\n```", "```\nvar x = speed * elapsedTime.TotalSeconds * Math.Cos(angle);\nvar y = speed * elapsedTime.TotalSeconds * Math.Sin(angle)\n        - 0.5 * Gravity.Earth * Math.Pow(elapsedTime.TotalSeconds, 2);\n```", "```\nvar angle = new Angle(.523);\nvar speed = new Speed(65);\nvar unknown = speed / angle;\n```", "```\nvar verySlow = new Speed(10);\nvar reduceBy = new Speed(30);\nvar outOfRange = verySlow - reduceBy;\n```", "```\nvar x = speed.Amount * elapsedTime.TotalSeconds *\n<samp class=\"SANS_TheSansMonoCd_W5Regular_Italic_I_11\">--snip--</samp>\n```", "```\npublic readonly struct Speed\n{\n    public static Speed operator*(Speed left, double right)\n        => new (left.Amount * right);\n    `--snip--`\n}\n```", "```\nvar speed = new Speed(4);\nAssert.That(\n    () => speed * -1,\n    Throws.TypeOf<ArgumentOutOfRangeException>());\nvar expect = new Speed(2);\nAssert.That(speed * 0.5, Is.EqualTo(expect));\n```", "```\nvar tmp = speed * elapsedTime.TotalSeconds; // a Speed value\nvar x = tmp * Math.Cos(angle.Size);\n```", "```\npublic readonly struct Distance\n{\n    public Distance(double amount)\n        => Amount = amount;\n    public double Amount {get;}\n}\n```", "```\npublic readonly struct Speed\n{\n    public static Speed operator*(Speed left, double right)\n        => new (left.Amount * right);\n    public static Distance operator*(Speed left, TimeSpan right)\n        => new (left.Amount * right.TotalSeconds);\n    `--snip--`\n}\n```", "```\nvar distance = speed * elapsedTime;    // a Distance\nvar x = distance * Math.Cos(angle.Size);\nvar y = distance * Math.Sin(angle.Size)\n        - 0.5 * Gravity.Earth * Math.Pow(elapsedTime.TotalSeconds, 2);\n```", "```\npublic static Distance operator*(Distance left, double right)\n    => new (left.Amount * right);\npublic static Distance operator-(Distance left, double right)\n    => new (left.Amount - right);\n```", "```\n**public static (Distance, Distance)**\nDisplacement(Angle angle, Speed speed, TimeSpan elapsedTime)\n{\n    var x = speed * elapsedTime * Math.Cos(angle.Size);\n    var y = speed * elapsedTime * Math.Sin(angle.Size)\n            - 0.5 * Gravity.Earth * Math.Pow(elapsedTime.TotalSeconds, 2);\n    return (x, y);\n}\n```", "```\npublic readonly struct Speed\n{\n    public enum Units\n    {\n        MetersPerSecond,\n        KmPerSecond,\n        KmPerHour\n    }\n    public Speed(double amount, Units unit)\n    {\n        if(amount < 0)\n            throw new ArgumentOutOfRangeException(\n               paramName: nameof(amount),\n               message: \"Speed must be positive\");\n        Amount = amount;\n        In = unit;\n    }\n    public double Amount {get;}\n    public Units In {get;}\n}\n```", "```\nvar limit = new Speed(3.6, Speed.Units.KmPerHour);\nvar unit  = new Speed(1,   Speed.Units.MetersPerSecond);\n```", "```\npublic Speed(double amount, Units unit)\n{\n    if(amount < 0)\n        throw new ArgumentOutOfRangeException(\n            paramName: nameof(amount),\n            message: \"Speed must be positive\");\n    Amount = unit switch\n    {\n        Units.KmPerHour       => amount * 1000 / 3600,\n        Units.KmPerSecond     => amount * 1000,\n        Units.MetersPerSecond => amount, _                    => throw new ArgumentException(\n                                    message: $\"Unexpected unit {unit}\",\n                                    paramName: nameof(unit))\n    };\n}\n```", "```\npublic Speed In(Units unit)\n{\n    var scaled = unit switch\n    {\n        Units.KmPerHour       => Amount / 1000 * 3600,\n        Units.KmPerSecond     => Amount / 1000,\n        Units.MetersPerSecond => Amount,\n        _                     => throw new ArgumentException(\n                                    message: $\"Unexpected unit {unit}\",\n                                    paramName: nameof(unit))\n    };\n    return new Speed(scaled, unit);\n}\n```", "```\nvar original = new Speed(3.6, Speed.Units.KmPerHour);\nvar copy = new Speed(original.Amount, Speed.Units.KmPerHour);\nAssert.That(original.Equals(copy), Is.True);\n```", "```\ncopy = original.In(Speed.Units.KmPerHour);\n```", "```\npublic static Speed FromMetersPerSecond(double amount)\n    => new (amount);\npublic static Speed FromKmPerSecond(double amount)\n    => new (amount * 1000);\n public static Speed FromKmPerHour(double amount)\n    => new (amount * 1000 / 3600);\n```", "```\nvar limit =  Speed.FromKmh(88);\nvar sound =  Speed.FromMetersPerSecond(343);\nvar escape = Speed.FromKmPerSecond(11.2);\n```", "```\nprivate Speed(double amount)\n{\n    if(amount < 0)\n    {\n        throw new ArgumentOutOfRangeException(\n            paramName: nameof(amount),\n            message: \"Speed must be positive\");\n    }\n    Amount = amount;\n}\n```", "```\npublic readonly struct Speed\n{\n    `--snip--`\n    public double InMetersPerSecond => amount;\n    public double InKmPerSecond     => amount / 1000.0;\n    public double InKmPerHour       => amount / 1000 * 3600;\n    private readonly double amount;\n}\n```", "```\npublic double InMetersPerSecond {get;}\npublic double InKmPerSecond     => InMetersPerSecond / 1000.0;\npublic double InKmPerHour       => InMetersPerSecond / 1000 * 3600;\n```", "```\nvar x = speed * elapsedTime * Math.Cos(angle.Size);\n`--snip--`\n```", "```\npublic readonly struct Angle\n{\n    private Angle(double size)\n        => radians = size;\n    public static Angle FromRadians(double size)\n        => new (size);\n    public static Angle FromDegrees(double size)\n        => new (size * Math.PI / 180);\n    public double InRadians => radians;\n    public double InDegrees => radians * 180 / Math.PI;\n    private readonly double radians;\n}\n```", "```\npublic readonly struct Angle\n{\n    `--snip--`\n    public double Sin() => Math.Sin(size);\n    public double Cos() => Math.Cos(size);\n    private readonly double size;\n}\n```", "```\nvar x = speed * elapsedTime * angle.Cos();\nvar y = speed * elapsedTime * angle.Sin()\n        - 0.5 * Gravity.Earth * Math.Pow(elapsedTime .TotalSeconds, 2);\n```", "```\npublic static class AngleExtensions\n{\n    public static double Cos(this Angle angle)\n        => Math.Cos(angle.InRadians);\n    public static double Sin(this Angle angle)\n        => Math.Sin(angle.InRadians);\n}\n```", "```\nvar speed = Speed.FromKmPerHour(234.0);\nvar angle = Angle.FromDegrees(30.0);\nvar seconds = TimeSpan.FromSeconds(4.0);\n```", "```\npublic static class DoubleExtensions\n{\n    public static Speed Kmh(this double amount)\n        => Speed.FromKmPerHour(amount);\n    public static Angle Degrees(this double amount)\n        => Angle.FromDegrees(amount);\n    public static TimeSpan Seconds(this double amount)\n        => TimeSpan.FromSeconds(amount);\n    `--snip--`\n}\n```", "```\nvar speed = 234.0.Kmh();\nvar angle = 30.0.Degrees();\nvar seconds = 4.0.Seconds();\n```", "```\n double value = 234.0;\n    `--snip--`\n    var speed = value.Kmh();\n```", "```\npublic readonly struct Velocity\n{\n    public Velocity(Speed speed, Angle angle)\n        => (Speed, Direction) = (speed, angle);\n    public Speed Speed {get;}\n    public Angle Direction {get;}\n}\n```", "```\npublic static (Distance, Distance)\nDisplacement(Velocity v0, TimeSpan elapsedTime)\n{\n    `--snip--`\n```", "```\npublic static (Distance, Distance) Displacement(\n`--snip--`\n```", "```\n**var (range, elevation)** = Displacement(velocity, TimeSpan.FromSeconds(0.9));\nAssert.That(range.InMeters, Is.EqualTo(19.09).Within(.01));\nAssert.That(elevation.InMeters, Is.EqualTo(18.78).Within(.01));\n```"]