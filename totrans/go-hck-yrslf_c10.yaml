- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Car Hacking and the Internet of Things
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Some of the coolest computers you can hack into are all around you every day,
    but you probably don’t think of them as computers. Many home appliances—like thermostats,
    security cameras, refrigerators, and Alexa or Google Home speakers—have a computer
    inside. These days, even cars have internet connections and computer systems that
    can be attacked by unethical hackers.
  prefs: []
  type: TYPE_NORMAL
- en: Internet-connected computing devices embedded in everyday objects are known
    as the *Internet of Things (IoT)*. IoT devices make our lives easier or better,
    but they can also pose serious security risks. Internet-connected medical devices
    may help keep us healthy and allow the manufacturer to monitor and update them
    remotely, but imagine if an attacker could hack someone’s pacemaker or insulin
    pump to harm the user. Likewise, satellite radio, GPS navigation, and 4G/5G wireless
    entertainment systems in your car make long road trips more convenient and fun,
    but all of those networks bring additional vulnerabilities that attackers could
    exploit. Imagine if someone hacked into your car and made it brake suddenly on
    the highway.
  prefs: []
  type: TYPE_NORMAL
- en: Ethical hackers hack IoT devices to find issues before attackers use them to
    do real damage. In this chapter, you’ll see how it works. You’ll hack into a simulated
    car network, watch the network messages the car sends, and write commands to control
    the car’s dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Car-Hacking Software
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this hack, we’ll install a software package called *Instrument Cluster Simulator
    (ICSim)*, a virtual dashboard that will let you see and interact with a speedometer,
    turn signals, and door locks just as you would in an actual vehicle. Craig Smith
    (aka zombieCraig) and the OpenGarages team built the ICSim to help hackers and
    researchers learn how to work with automobile networks safely and ethically, without
    damaging or destroying an actual vehicle or unsuspecting pedestrian.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window and update Kali’s software package list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now install ICSim’s dependencies by entering the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that both of the `libsdl2` packages are spelled with a lowercase letter
    *L* before the number 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Install ICSim like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up can-utils on your machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set up the ICSim dashboard simulator software with these commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now to run our virtual car instrument panel and start hacking!
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Virtual CAN Bus Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An automobile’s network is known as a *CAN bus*, or simply *CAN*. The CAN bus
    has been used in most automobiles since the 1990s to control various systems and
    sensors, like steering and braking, radios, air conditioners, and entertainment
    centers. The ICSim software you just installed creates a *virtual CAN (VCAN)*
    bus network that we’ll learn to attack. We’ll create that network now and finish
    setting up your car-hacking environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the VCAN, enter this command at the terminal inside the ICSim folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ensure that VCAN was set up correctly by entering `ip addr` in a terminal. You
    should see your IP address along with a new network named *vcan0*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following in the terminal to tell it to first run ICSim using the
    vcan0 network we just created and then wait for our commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see a simulated dashboard like the one shown in [Figure 10-1](#figure10-1).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![f10001](image_fi/502000c10/f10001.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10-1: The ICSim program displays a simulated car dashboard with a speedometer,
    turn signals, and more!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the controller app on vcan0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The CANBus Control Panel window should open. It looks a lot like a video game
    controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Resize the Control Panel so that the ICSim window is visible by clicking any
    corner of the window and dragging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the top bar of the Control Panel window and select **Always on Top**,
    as shown in [Figure 10-2](#figure10-2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f10002](image_fi/502000c10/f10002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-2: Keeping the controller app visible and easily accessible'
  prefs: []
  type: TYPE_NORMAL
- en: To drive the virtual car, click in the CANBus Control Panel window and then
    use your keyboard to send commands. Available commands are listed in [Table 10-1](#table10-1).
    Press the up arrow to accelerate, use the left and right arrows to control the
    turn signals, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 10-1: Keyboard Controls for the CANBus Control Panel'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Function** | **Key(s)** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Accelerate** | Press and hold the up arrow (↑) |'
  prefs: []
  type: TYPE_TB
- en: '| **Signal a left or right turn** | Press and hold the left or right arrow
    (←/→) |'
  prefs: []
  type: TYPE_TB
- en: '| **Unlock front-left or front-right door** | right-SHIFT-A or right-SHIFT-B
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Unlock back-left or back-right door** | right-SHIFT-X or right-SHIFT-Y
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Lock all doors** | Hold right-SHIFT + tap left-SHIFT |'
  prefs: []
  type: TYPE_TB
- en: '| **Unlock all doors** | Hold left-SHIFT + tap right-SHIFT |'
  prefs: []
  type: TYPE_TB
- en: The controller app is the only way to interact with the VCAN—unless we hack
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Hacking the Car
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our car-hacking adventure will follow the same steps you’d use to test the
    security of most IoT devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a program to view and record traffic on the vcan0 network between the controller
    app and the dashboard. This kind of program is called a *packet sniffer* because
    messages sent on the network are called *packets*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify what network packets and commands control what car systems or functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take control of the car by resending the packets you’ve captured back over the
    vcan0 network or by writing your own commands from your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Viewing Packets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll use `cansniffer`, the packet sniffer built into can-utils, to listen to
    our simulated car network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal window, launch `cansniffer` with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make the terminal window tall and narrow (as shown in [Figure 10-3](#figure10-3))
    to make the `cansniffer` messages easier to see. You may also need to reduce the
    font size by pressing CTRL and − a few times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click in the CANBus Control Panel window and send some commands to the virtual
    car. Try accelerating, using the turn signals, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `cansniffer` tool intercepts packets being sent on vcan0 between the controller
    app and the dashboard and displays them in the terminal window. Each line in the
    window represents one packet. The network transmits several hundred packets per
    second, so they go by quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example packet to see what information we can find. Here’s
    one of the packets shown in [Figure 10-3](#figure10-3):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![f10003](image_fi/502000c10/f10003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-3: The `cansniffer` packet sniffer shows messages on our vcan0 network.'
  prefs: []
  type: TYPE_NORMAL
- en: The first column is a *timestamp* 1 that represents when the packet was sent.
    The second column 2 is the ID number of the system a message is being sent to
    or from. As we’ll discover, CAN ID# 244 represents the speedometer. The third
    column 3 is the CAN message data, represented by hexadecimal values, and the fourth
    column 4 contains the same data represented in printable characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Experienced hackers know how to analyze the traffic picked up by a packet sniffer
    to determine what different packets mean. This takes practice and patience. For
    now, try accelerating a few times by pressing the up arrow in the controller app
    while watching for ID# 244 in the terminal window. Look for changing values in
    the message data column as you speed up and slow down. Recognizing this pattern
    is a clue that ID #244 refers to the speedometer.'
  prefs: []
  type: TYPE_NORMAL
- en: Now press the turn signals (the left and right arrows) and watch for ID# 188\.
    It should appear when you touch the turn signals and disappear a few moments after
    you turn them off. Lock and unlock the doors using the left and right SHIFT keys,
    or the right SHIFT key plus X, Y, A, and B, and watch what changes in the data
    next to ID# 19B. The row for 19B should appear only for a moment when you’re locking
    or unlocking doors.
  prefs: []
  type: TYPE_NORMAL
- en: Press CTRL-C in the terminal window to stop `cansniffer` when you’ve experimented
    enough. Don’t worry if the packets were going by too quickly for you to pick out
    specific IDs. The next step will be to record some packets so you can study them
    in your own time.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing Packets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The can-utils tool `candump` records messages from a CAN bus so that we can
    analyze them further or even replay them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start recording packets from vcan0, enter this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `-l` option (that’s a hyphen and a lowercase *L*) is short for *log*, because
    we’re asking `candump` to log its output by saving the data into a file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch back to the CANBus Control Panel window and drive for a few seconds.
    Speed up and slow down, use your left and right turn signals, and unlock and lock
    the doors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press CTRL-C to stop recording.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the terminal window, enter `ls` (short for *list*) to show the contents
    of the *ICSim* directory. You should see a new file in the format `candump-``YYYY``-``MM``-``DD``_``time``.log`
    (time is defined in hours, minutes, and seconds—`HHMMSS`), such as in this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `candump` logfile is a simple text file. You can view the file in a text
    editor and use CTRL-F to find specific CAN ID values, like 188 for the turn signals,
    as shown in [Figure 10-4](#figure10-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![f10004](image_fi/502000c10/f10004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-4: Searching for specific CAN ID values in the Mousepad text editor'
  prefs: []
  type: TYPE_NORMAL
- en: Replaying Packets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By resending the packets we captured in the logfile on the vcan0 network, we
    can make the dashboard “relive” the recorded driving session. This kind of hack
    is called a *replay attack*.
  prefs: []
  type: TYPE_NORMAL
- en: First, close the CANBus Control Panel. The controller window sends signals constantly
    even when idle, and we want to use only the packets we’ve captured to control
    the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command into the terminal window to replay the logfile
    with the `canplayer` tool, replacing `candump-``YYYY``-``MM``-``DD``_``time``.log`
    with your logfile name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your ICSim dashboard should begin moving exactly the same way it did when you
    captured the packets originally. In [Figure 10-5](#figure10-5), for example, I’m
    turning right and unlocking all four doors while driving over 90 miles per hour!
    (I don’t recommend doing this in your real car.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![f10005](image_fi/502000c10/f10005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-5: The replayed packets are controlling the dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: Many IoT devices are vulnerable to replay attacks like this one. For example,
    when they first came out, many Bluetooth door locks were subject to such attacks.
    With a laptop running a Bluetooth wireless sniffer (like Kismet, which is included
    with Kali) and a physical Bluetooth antenna (like the Ubertooth One for around
    $100), you could capture packets while someone was opening the door with their
    smartphone and replay those packets to unlock the door anytime you wanted. Nowadays,
    to prevent replay attacks, a special value is added to each message so the system
    can tell whether it’s receiving a new message or one it’s seen before.
  prefs: []
  type: TYPE_NORMAL
- en: Sending New Commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Car hackers can analyze `candump` logfiles to decipher CAN ID numbers and figure
    out what the data values in each message mean. Armed with that knowledge, hackers
    can send specific commands to the system to make the car do what they want. For
    example, sending the message `02000000` to ID# 188 turns on the right turn signal.
    Let’s try it out!
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following command into the terminal with ICSim open and the controller
    window closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We use `cansend` to send a CAN message to vcan0\. The message contains the ID
    number of the turn signals (`188`), then the hash mark (`#`) as a separator, and
    finally the data value that represents the right turn signal (`02000000`). The
    right turn signal on your dashboard should light up green.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to turn on the left signal instead, send this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To turn off the signals, send the message `188#00000000`. Or use this command
    to turn *on* both signals at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now take a look at the data values in CAN packets related to the speedometer
    (ID# 244) in your `candump` logfile. It looks like the last four hexadecimal digits
    go up as the speed increases. The data value `0000000000` is 0 miles per hour,
    and `0000003894` corresponds to about 90 miles per hour. Let’s see what the value
    `0000009999` would do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in [Figure 10-6](#figure10-6), the speedometer jumps to 240 miles
    per hour! You can go even higher using hexadecimal—try changing the last four
    digits to `A000`, `B000`, or even `FFFF`.
  prefs: []
  type: TYPE_NORMAL
- en: '![f10006](image_fi/502000c10/f10006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10-6: We can control the dashboard by sending signals directly to the
    CAN bus using `cansend`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can lock all the doors by sending the message `19B#00000F000000`
    and unlock all the doors with the message `19B#000000000000` (that’s 12 zeros
    after the hash mark):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Our virtual car thinks it’s turning both left and right and unlocking all four
    doors while zipping around at 240 miles per hour!
  prefs: []
  type: TYPE_NORMAL
- en: How Attackers Hack Real Cars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the same `can-utils` tools and skills you just learned about to hack
    a real car, all an attacker needs is a laptop running Kali Linux and a cable to
    connect the laptop to the *on-board diagnostic, version two (OBD-II)* port, located
    under the steering wheel in most cars. Many such cables are available for under
    $100\. However, real-world car hacking is a serious matter that can lead to significant
    property damage or injury. Researchers practice car hacking in controlled conditions
    to look for security vulnerabilities. If you practice car hacking, be sure to
    do it safely in your garage or driveway or on a closed course; never hack a car
    on the road or anywhere someone could get hurt.
  prefs: []
  type: TYPE_NORMAL
- en: Car hackers don’t always have to maintain a wired connection with a vehicle
    to send commands. After finding useful CAN ID numbers and messages by connecting
    directly to a particular make and model of car, an attacker or security researcher
    could attempt to connect to the car wirelessly via Bluetooth, Wi-Fi, or 4G/5G
    to try to send CAN messages remotely. One high-profile hack used the driver’s
    hands-free smartphone connection to take remote control of the car through the
    car’s dashboard entertainment system. Another used Tesla’s 4G wireless over-the-air
    update system to install malicious software and tamper with the car from far away.
  prefs: []
  type: TYPE_NORMAL
- en: One piece of good news is that every car is slightly different, and the CAN
    ID numbers in one car usually aren’t the same as the CAN IDs in another car. Every
    manufacturer uses different codes, and sometimes every model from the same manufacturer
    uses a different set of codes, and those codes can change from one model year
    to the next! Plus, there are several different types of controller networks on
    modern cars; the CAN is just the most common one. In short, it takes a lot of
    patience to crack the codes on a real car.
  prefs: []
  type: TYPE_NORMAL
- en: The Takeaway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we used ICSim and `can-utils` to hack a virtual car network.
    We set up these tools on our Kali virtual machine. Then we sniffed network traffic
    with `cansniffer` to see what CAN data looks like. We captured CAN signals using
    `candump`, and then we replayed those packets using `canplayer` to change the
    dashboard without using the car’s keyboard controls. We also sent specific CAN
    messages using `cansend` to use the turn signals, change the speedometer, and
    unlock the doors directly from the command line. Finally, we learned that it takes
    only about $100 worth of tools and a lot of patience to hack a real car.
  prefs: []
  type: TYPE_NORMAL
