- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: INTRODUCTION
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/opener.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are, unfortunately, living in a golden age of Mac malware. Sales of Mac computers
    continue to flourish year over year,^([1](#fm8-1)) while industry reports predict
    that Mac will become the dominant platform in enterprise environments.^([2](#fm8-2))
    As Apple’s share of the global computer market grows, Macs have become an ever-more
    compelling target for opportunistic hackers and malware authors. Some studies
    have even found, on average, more threats and malware on Mac systems than on Windows
    ones.^([3](#fm8-3))
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to protecting Macs and their users, analyzing malware (the topic
    of *The Art of Mac Malware*, Volume 1) is only half the battle. Detecting malicious
    code in the first place is the other, perhaps even more important, piece. There
    are many approaches to detecting malicious code, each with pros and cons. At one
    end of the detection spectrum, we can leverage databases of malware signatures.
    By scanning binaries for sequences of malicious bytes, we can efficiently identify
    known threats. However, we fail to detect new malware or variants. This downside
    is troublesome. To see why, consider the case of the malware known as FruitFly.
    Carefully crafted by a single programmer and deployed in a highly targeted manner,
    it remained undetected for over a decade, as no antivirus program contained a
    signature to detect it. The malware spied on unknowing victims using Macs’ mics
    and webcams, leading to damaging real-life consequences.^([4](#fm8-4))
  prefs: []
  type: TYPE_NORMAL
- en: 'At the other end of the detection spectrum are *behavior-based heuristics*,
    which focus on a malicious program’s actions or impact on a system. To understand
    this approach, consider the last time you were sick. Perhaps your illness started
    with a runny nose, a headache, a sore throat, or a stomachache. While you probably
    didn’t know exactly what pathogen had infected you, your body’s symptoms indicated
    that you were no longer your normal, healthy self. We can use a similar strategy
    to generically and heuristically detect digital pathogens: by looking for symptoms
    and anomalies.'
  prefs: []
  type: TYPE_NORMAL
- en: Even novel and stealthy malware specimens will produce observable events when
    they interact with a system. Some, such as the spawning of a newly persisted unsigned
    process, may be easy to detect. Others, like the surreptitious planting of a trojanized
    dynamic library or a covert exfiltration channel, are more subtle. Regardless,
    if we can programmatically detect these behaviors, we should be able to ascertain
    whether a system is infected and, by identifying the responsible process, pinpoint
    the infection.
  prefs: []
  type: TYPE_NORMAL
- en: This book focuses on heuristic-based approaches, which are the only way to combat
    the sophisticated and never-before-seen threats that are targeting macOS with
    increasing frequency. We’ll write code capable of detecting anomalies and then
    pinpoint software that has maliciously infiltrated a system. In the process, we’ll
    dive into the macOS operating system, touching on topics such as private frameworks,
    reverse engineering proprietary system components, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the heuristic-based detection approach has some downsides. While
    it should be able to pinpoint any malicious item on a system, it likely won’t
    be able to identify the specific malware strain. For example, it should notice
    an unauthorized program surreptitiously accessing the mic or webcam, but it won’t
    know whether the responsible process is the malware FruitFly. Is this a significant
    downside? I don’t believe so, as the malware responsible for the infection may
    be unknown anyway, and you can always deploy a signature-based detection engine
    to cover the known basics.
  prefs: []
  type: TYPE_NORMAL
- en: Another challenge is that heuristic-based detections can suffer from false positives.
    For example, malware authors often leverage executable packers to obfuscate their
    malicious creations, but so could legitimate software developers. Thus, no heuristic-based
    detection approach should focus on a single heuristic when attempting to classify
    an item as malicious. Instead, the detection should always look for multiple anomalous
    behaviors and leverage approaches that reduce false positives, such as code signing
    information, before flagging something as suspicious or likely malicious. If you
    have the luxury to do so, you could enlist a human to validate any flagged items.
  prefs: []
  type: TYPE_NORMAL
- en: '## What You’ll Find in This Book'
  prefs: []
  type: TYPE_NORMAL
- en: At its core, this book describes how to write code to detect macOS malware.
    It’s broken into three parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as a doctor performs tests and collects data to make a diagnosis, so too
    must malware detectors. In [Part I](part1.xhtml): Data Collection, we discuss
    programmatic methods of collecting the data snapshots essential for detecting
    symptoms of infections. We’ll start simple, by describing methods of enumerating
    and querying running processes on a system. In subsequent chapters, we’ll dive
    into more advanced concepts, such as directly parsing binaries, extracting and
    validating code signing information, and uncovering persistence by interacting
    with proprietary system components. Where relevant, we’ll show snippets of malware
    as examples. The chapters in this part are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1](chapter1.xhtml): Examining Processes** Because the majority of
    Mac malware specimens run as stand-alone processes, examining various information
    and metadata about each running process is a great place to start when seeking
    to uncover infections.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 2](chapter2.xhtml): Parsing Binaries** Backing any process on a
    macOS system is a universal or Mach-O binary. In this chapter, we show how to
    parse these binaries to reveal anomalies.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 3](chapter3.xhtml): Code Signing** Any heuristic-based detection
    approach is prone to false positives. By extracting and validating code signing
    information, as we do in this chapter, we can reduce false positives while increasing
    the effectiveness of any malware detection tool.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 4](chapter4.xhtml): Network State and Statistics** This chapter
    describes methods of programmatically capturing snapshots of a host’s network
    state and network statistics. Most Mac malware will access the network, and these
    snapshots should reveal this unauthorized network access.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 5](chapter5.xhtml): Persistence** Malware will persist in order
    to survive a system reboot. Persistence causes modifications to the host, and
    this chapter highlights exactly how to programmatically detect these changes.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'While [Part I](part1.xhtml) covers methods of obtaining snapshots of data,
    [Part II](part2.xhtml): System Monitoring covers continuous approaches to monitoring
    a system for symptoms of an infection. For example, we’ll discuss frameworks and
    application programming interfaces (APIs) that allow us to monitor the system
    logs and create powerful file, process, and network monitors. This part includes
    the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6](chapter6.xhtml): Log Monitoring** The system, or *universal*,
    log contains a myriad of data that can reveal most infections. Apple doesn’t provide
    public APIs to ingest streaming log messages, so this chapter delves into the
    private frameworks and APIs you can use in your own tools.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 7](chapter7.xhtml): Network Monitoring** This chapter is dedicated
    to Apple’s *NetworkExtension* framework, whose APIs provide the capabilities for
    building powerful network monitoring tools that can uncover any malware that uses
    the host’s network.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 8](chapter8.xhtml): Endpoint Security** If you’re building comprehensive
    malware detection tools on macOS, you should make use of the powerful Endpoint
    Security framework and its APIs. This chapter introduces Endpoint Security.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 9](chapter9.xhtml): Muting and Authorization Events** This chapter
    covers more advanced Endpoint Security topics, including authorization events,
    muting, and more.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In 2015, I founded Objective-See, which is now a nonprofit organization that
    makes free, open source security tools for macOS. [Part III](part3.xhtml): Tool
    Development delves into several of Objective-See’s most popular tools. Capable
    of generically detecting a wide range of macOS malware, these tools leverage many
    of the approaches covered in [Parts I](part1.xhtml) and [II](part2.xhtml). Once
    you understand their design and internals, you’ll be well on the way to building
    your own malware detection tools. We’ll end the book by pitting these tools against
    a wide range of sophisticated macOS malware. For each specimen, we’ll discuss
    its infection vector, methods of persistence, and capabilities and then highlight
    how the tools can uncover these symptoms. The chapters in this part are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 10](chapter10.xhtml): Persistence Enumerator** Who’s there? Most
    Mac malware persists to survive system reboots, so a tool capable of enumerating
    all persistent software should reveal any persistently installed malware. This
    chapter covers exactly such a tool: KnockKnock.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 11](chapter11.xhtml): Persistence Monitor** Inspired by its sibling
    KnockKnock, BlockBlock leverages Endpoint Security to detect malware by monitoring
    persistence events in real time.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 12](chapter12.xhtml): Mic and Webcam Monitor** Some of the most
    insidious Mac malware specimens spy on victims via the webcam or listen to them
    via the mic. This chapter focuses on OverSight, a tool that leverages core audio
    and media APIs as well as the logging subsystem to detect malware accessing these
    devices.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 13](chapter13.xhtml): DNS Monitor** Malware attempting to connect
    to remote domains—for example, for tasking or to exfiltrate data—will generate
    DNS traffic. This chapter shows how DNSMonitor leverages Apple’s *NetworkExtension*
    framework to monitor and block any unauthorized DNS traffic on a macOS host.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Chapter 14](chapter14.xhtml): Case Studies** It’s one thing to make claims
    about the effectiveness of security tools and quite another to back them up. In
    this final chapter, we pit our security tools against several notably sophisticated
    and stealthy malware specimens to see how they stack up.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Who Should Read This Book?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll get the most out of this book if you understand cybersecurity fundamentals,
    malware basics, and programming. These aren’t prerequisites, however, and I’ll
    explain all important concepts. You’ll also find it helpful to read my other book,
    *The Art of Mac Malware*, Volume 1 (No Starch Press, 2022), which will introduce
    you to foundational macOS malware topics we won’t cover again here. Beyond these
    considerations, I wrote this book with particular readers in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Students** As an undergraduate studying computer science, I had a keen interest
    in understanding and detecting computer viruses and yearned for a book such as
    this one. If you’re working toward a technical degree and would like to learn
    more about malware detection approaches, perhaps to enhance or complement your
    studies, this book is for you.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Malware analysts** My career as a malware analyst began at the National Security
    Agency, where I studied Windows-based malware and exploits that targeted US military
    systems. When I left the agency, I began studying macOS threats but encountered
    a lack of resources on the topic. This book aims to fill this gap. If you’re a
    Windows or Linux malware analyst (or even a Mac malware analyst hoping to grow
    your skills), this book should provide you with insight into how to detect threats
    targeting macOS systems.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mac system administrators** The days of the homogeneous Windows-based enterprise
    have largely disappeared. Today, Macs in the enterprise are commonplace, giving
    rise to dedicated Mac system administrators and (unfortunately) malware authors
    focused on enterprise systems running macOS. If you’re a Mac system administrator,
    it’s imperative that you understand how to detect the threats targeting the systems
    you seek to defend. This book aims to provide such an understanding (and much
    more).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Developers** At its core, this book presents approaches to writing code capable
    of generically detecting Mac malware. If your job involves writing security-focused
    tools for macOS, this book will be useful to you.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Even if you’re not a programmer, you may find a book on the programmatic detection
    of malware to be worth a read. Detecting malware involves much more than just
    writing code. We’ll delve into macOS internals, touch on reverse engineering topics,
    and discuss various malware specimens, including their capabilities and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The Code and Malware Specimens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can access all code samples, malware specimens, and tools discussed in this
    book at [*https://<wbr>github<wbr>.com<wbr>/objective<wbr>-see*](https://github.com/objective-see).
    The TAOMM repository organizes code samples by chapter, and the Malware repository
    contains an encrypted sample of each malware specimen. Use the password *infect3d*
    to decrypt the samples.
  prefs: []
  type: TYPE_NORMAL
- en: WARNING
  prefs: []
  type: TYPE_NORMAL
- en: '*The code in the TAOMM repository is provided largely for illustrative purposes,
    prioritizing brevity over other aspects such as comprehensive error checking.
    As such, it should not be used verbatim, for example, in deployed security products.
    Keep in mind also that the collection in the Malware repository contains live
    malware. Please don’t infect yourself! (Or if you do, at least don’t blame me.)*'
  prefs: []
  type: TYPE_NORMAL
- en: The book aims to present language-agnostic algorithms and approaches, but the
    majority of the code herein is written in Objective-C. I chose not to use Swift,
    a great language for writing Apple apps, because it poses specific challenges
    in the context of security tools. For example, the book often leverages private
    frameworks, which are easy to access in Objective-C but would require additional
    components, such as bridging headers, in Swift. Similarly, interfacing with frameworks
    that expose interfaces and APIs in C, such as the all-important Endpoint Security,
    is straightforward in Objective-C. Accessing these interfaces in Swift often involves
    a maddening amount of type-casting and unwrapping of OpaquePointer and UnsafeMutablePointer
    values.
  prefs: []
  type: TYPE_NORMAL
- en: I wrote all code on macOS 14 and tested it on recent versions of macOS, including
    13, 14, and 15\. Where relevant, I’ll discuss coding approaches that diverge across
    versions (for example, when an older API has been replaced by a more modern counterpart).
    The discussion will allow you to write tools compatible with multiple versions
    of the operating system and ensure that you continue to support older versions.
    To discover any new techniques that become available as the operating system updates
    in the future, check out the Objective-See GitHub repositories for up-to-date
    versions of my open source security tools, which implement the majority of the
    code discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: To help you piece together disparate parts of the larger programs presented
    over the course of each chapter, I’ve numbered the book’s code listings using
    sequential listing numbers (such as Listing 1-1, Listing 1-2, and so on). Malware
    samples and command line examples won’t have listing numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Development Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you begin, I recommend installing Xcode, Apple’s integrated development
    environment (IDE) and the de facto product for creating security tools on macOS.
    Available for free on the official Mac App Store, Xcode offers a user-friendly
    platform for developing software. I used Xcode to write and compile all code samples
    and tools in this book, so I suggest having a basic understanding of this tool.
    While I don’t provide a detailed guide on Xcode usage here, many excellent free
    tutorials are available online.
  prefs: []
  type: TYPE_NORMAL
- en: Code Signing Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Speaking of compiling code: if you’ve dabbled in software development on macOS,
    you’ve likely run into challenges related to Apple’s code signing requirements
    or, worse, entitlements. For security reasons, Apple checks a program’s code signing
    information before allowing it to run. (We discuss code signing in more detail
    in [Chapter 3](chapter3.xhtml).)'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, macOS allows code to be signed in an ad hoc manner, meaning you don’t
    have to shell out $99 to Apple for a Developer ID if you’re developing security
    tools that will run locally. In Xcode, under Signing and Capabilities, check the
    **Automatically Manage Signing** option and make sure the Signing Certificate
    is set to **Sign to Run Locally**.
  prefs: []
  type: TYPE_NORMAL
- en: Entitlements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tools that leverage system extensions or Endpoint Security require special entitlements,
    such as *com.apple.developer.endpoint-security.client*, to run. In [Part III](part3.xhtml),
    we cover how to obtain these entitlements from Apple to build distributable tools.
    Obtaining entitlements requires a paid Developer ID account, however.
  prefs: []
  type: TYPE_NORMAL
- en: For local development and testing, you can work around entitlement requirements
    by disabling System Integrity Protection (SIP).^([5](#fm8-5)) Apple provides documentation
    on how to disable SIP, which involves booting your Mac into Recovery Mode to run
    the command csrutil disable.^([6](#fm8-6))
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll also have to disable Apple Mobile File Integrity (AMFI); otherwise,
    entitled binaries that aren’t wholly signed and notarized won’t run. With SIP
    disabled, you can disable AMFI by executing the following, with root privileges,
    from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Use nvram -p to confirm the boot arguments were set correctly. Finally, reboot.
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth stressing that disabling these macOS security mechanisms greatly
    reduces the security of the system. As such, it’s best to do so only within a
    virtual machine or on a dedicated development test machine. To re-enable SIP in
    Recovery Mode, run csrutil enable, and to re-enable AMFI, delete the boot arguments
    by running nvram -d boot-args.
  prefs: []
  type: TYPE_NORMAL
- en: Safely Analyzing Malware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book demonstrates many programmatic techniques for detecting Mac malware.
    In the book’s final chapter, you can even follow along as we pit our tools against
    various malware specimens. If you plan to run the code snippets in the book or
    build and test your own tools against this malware, be sure to handle the specimens
    with the utmost care.
  prefs: []
  type: TYPE_NORMAL
- en: One approach to malware analysis is to use a stand-alone computer as a dedicated
    analysis machine. You should set up this machine in the most minimal of ways,
    with services such as file sharing disabled. In terms of networking, the majority
    of malware will require internet access to fully function (for example, to communicate
    with a command-and-control server for tasking), so you should connect your machine
    to the network in some manner. At a minimum, I recommend routing the network traffic
    through a VPN to hide your location from any attacker who might be on the other
    end.
  prefs: []
  type: TYPE_NORMAL
- en: However, leveraging a stand-alone computer for your analysis has downsides,
    including cost and complexity. The latter becomes especially apparent if you want
    to revert the analysis system to a clean baseline state (for example, to rerun
    a sample or when analyzing a new specimen). Although you could reinstall the operating
    system or, if using Apple File System (APFS), return to a baseline snapshot, these
    are both time-consuming endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address these drawbacks, you can instead leverage a virtual machine for
    your analysis system. Various companies, such as VMware and Parallels, offer virtualized
    options for macOS systems. The idea is simple: virtualize a new instance of the
    operating system that you can isolate from your underlying environment and, most
    notably, revert to its original state at the click of a button. To install a new
    virtual machine, follow the instructions provided by each vendor. This typically
    involves downloading an operating system installer or updater, dragging and dropping
    it into the virtualization program, and then clicking through the remaining setup.'
  prefs: []
  type: TYPE_NORMAL
- en: NOTE
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Unfortunately, Apple Silicon systems have limitations when it comes to virtualizing
    macOS. Vendors such as Parallels provide prebuilt virtual machines compatible
    with Apple Silicon but don’t yet support features such as snapshots.*'
  prefs: []
  type: TYPE_NORMAL
- en: Before performing any analysis, make sure to disable any sharing between the
    virtual machine and the base system. For example, it would be rather unfortunate
    to run a ransomware sample only to find that it has also encrypted any shared
    files on your host system. Virtual machines also offer options for networking,
    such as host-only and bridged. The former will exclusively allow network connections
    with the host, which may be useful in various analysis situations, such as when
    you’re setting up a local command-and-control server.
  prefs: []
  type: TYPE_NORMAL
- en: I noted that the ability to revert a virtual machine to its original state can
    greatly speed up malware analysis by allowing you to return to earlier stages
    in the analysis process. You should always take a snapshot before you begin your
    analysis so you can bring the virtual machine back to a known clean slate when
    you’re done. During your analysis session, you should also make judicious use
    of snapshots. For example, take a snapshot immediately prior to allowing the malware
    to execute some core logic. If the malware fails to perform the expected action
    (perhaps because it detected one of your analysis tools and prematurely exited),
    or if your analysis tools failed to gather the data required for your analysis,
    simply revert to the snapshot, make any necessary changes to your analysis environment
    or tools, and then allow the malware to re-execute. On dedicated analysis machines
    or virtual machines that don’t support snapshots, APFS snapshots are likely your
    best bet.
  prefs: []
  type: TYPE_NORMAL
- en: The main drawback to the virtual machine analysis approach is that malware may
    contain logic to thwart virtual machines. If the malware can successfully detect
    that it’s being virtualized, it will often exit in an attempt to avoid continued
    analysis. See Chapter 9 of *The Art of Mac Malware*, Volume 1, for approaches
    to identifying and overcoming this logic.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about setting up an analysis environment, including the
    specific steps for configuring an isolated virtual machine, see Phil Stokes’s
    *How to Reverse Malware on macOS Without Getting Infected*.^([7](#fm8-7))
  prefs: []
  type: TYPE_NORMAL
- en: '## Additional Resources'
  prefs: []
  type: TYPE_NORMAL
- en: For further reading, I recommend the following resources.
  prefs: []
  type: TYPE_NORMAL
- en: Books
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following list contains some of my favorite books on topics such as reverse
    engineering, macOS internals, and general malware analysis. While a few of these
    books are older, the core reversing and analysis topics should remain timeless.
  prefs: []
  type: TYPE_NORMAL
- en: '*Blue Fox: Arm Assembly Internals and Reverse Engineering* by Maria Markstedter
    (Wiley, 2023)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*x86 Software Reverse-Engineering, Cracking, and Counter-Measures* by Stephanie
    and Christopher Domas (Wiley, 2024)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *macOS/iOS (*OS) Internals* trilogy by Jonathan Levin (Technologeeks Press,
    2017)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Art of Computer Virus Research and Defense* by Péter Ször (Addison-Wesley
    Professional, 2005)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Reversing: Secrets of Reverse Engineering* by Eldad Eilam (Wiley, 2005)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*OS X Incident Response: Scripting and Analysis* by Jaron Bradley (Syngress,
    2016)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Websites
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There used to be a dearth of information about Mac malware analysis online.
    Today, the situation has greatly improved. Several websites collect information
    on this topic, and blogs such as my very own on the Objective-See website are
    dedicated to Mac security topics. The following is an inexhaustive list of some
    of my favorites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*https://<wbr>papers<wbr>.put<wbr>.as*](https://papers.put.as): A fairly exhaustive
    archive of papers and presentations on macOS security topics and malware analysis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://<wbr>themittenmac<wbr>.com*](https://themittenmac.com): The website
    of the noted macOS security researcher and author Jaron Bradley that includes
    incident response tools and threat-hunting knowledge for macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*https://<wbr>objective<wbr>-see<wbr>.org<wbr>/blog<wbr>.html*](https://objective-see.org/blog.htm:):
    My blog, which for the last decade has published my research and that of fellow
    security researchers on the topics of macOS malware, exploits, and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[  1](#fm8_1).  “Worldwide PC Shipments Decline Another 15.0% in the Third
    Quarter of 2022, According to IDC Tracker,” *Business Wire*, October 9, 2022,
    [*https://<wbr>www<wbr>.businesswire<wbr>.com<wbr>/news<wbr>/home<wbr>/20221009005049<wbr>/en<wbr>/Worldwide<wbr>-PC<wbr>-Shipments<wbr>-Decline<wbr>-Another<wbr>-15<wbr>.0<wbr>-in<wbr>-the<wbr>-Third<wbr>-Quarter<wbr>-of<wbr>-2022<wbr>-According<wbr>-to<wbr>-IDC<wbr>-Tracker*](https://www.businesswire.com/news/home/20221009005049/en/Worldwide-PC-Shipments-Decline-Another-15.0-in-the-Third-Quarter-of-2022-According-to-IDC-Tracker).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[2](#fm8_2).  “Jamf Q3 Data Confirms Rapid Mac Adoption Across the Enterprise,”
    *Computer World*, November 11, 2022, [*https://<wbr>www<wbr>.computerworld<wbr>.com<wbr>/article<wbr>/3679730<wbr>/jamf<wbr>-q3<wbr>-data<wbr>-confirms<wbr>-rapid<wbr>-mac<wbr>-adoption<wbr>-across<wbr>-the<wbr>-enterprise<wbr>.html*](https://www.computerworld.com/article/3679730/jamf-q3-data-confirms-rapid-mac-adoption-across-the-enterprise.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[  3](#fm8_3).  “Malwarebytes Finds Mac Threats Outpace Windows for the First
    Time in Latest State of Malware Report,” *Malwarebytes*, February 11, 2020, [*https://<wbr>www<wbr>.malwarebytes<wbr>.com<wbr>/press<wbr>/2020<wbr>/02<wbr>/11<wbr>/malwarebytes<wbr>-finds<wbr>-mac<wbr>-threats<wbr>-outpace<wbr>-windows<wbr>-for<wbr>-the<wbr>-first<wbr>-time<wbr>-in<wbr>-latest<wbr>-state<wbr>-of<wbr>-malware<wbr>-report*](https://www.malwarebytes.com/press/2020/02/11/malwarebytes-finds-mac-threats-outpace-windows-for-the-first-time-in-latest-state-of-malware-report).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[  4](#fm8_4).  US Department of Justice, Office of Public Affairs, “Ohio Computer
    Programmer Indicted for Infecting Thousands of Computers with Malicious Software
    and Gaining Access to Victims’ Communications and Personal Information,” press
    release no. 18-21, January 10, 2018, [*https://<wbr>www<wbr>.justice<wbr>.gov<wbr>/opa<wbr>/pr<wbr>/ohio<wbr>-computer<wbr>-programmer<wbr>-indicted<wbr>-infecting<wbr>-thousands<wbr>-computers<wbr>-malicious<wbr>-software<wbr>-and*](https://www.justice.gov/opa/pr/ohio-computer-programmer-indicted-infecting-thousands-computers-malicious-software-and).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[  5](#fm8_5).  “System Extensions and DriverKit,” Apple, accessed May 25,
    2024, [*https://<wbr>developer<wbr>.apple<wbr>.com<wbr>/system<wbr>-extensions<wbr>/*](https://developer.apple.com/system-extensions/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[  6](#fm8_6).  “Disabling and Enabling System Integrity Protection,” Apple,
    accessed May 25, 2024, [*https://<wbr>developer<wbr>.apple<wbr>.com<wbr>/documentation<wbr>/security<wbr>/disabling<wbr>_and<wbr>_enabling<wbr>_system<wbr>_integrity<wbr>_protection<wbr>?language<wbr>=objc*](https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection?language=objc).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[  7](#fm8_7).  Phil Stokes, *How to Reverse Malware on macOS Without Getting
    Infected*, August 14, 2019, [*https://<wbr>go<wbr>.sentinelone<wbr>.com<wbr>/rs<wbr>/327<wbr>-MNM<wbr>-087<wbr>/images<wbr>/reverse<wbr>_mw<wbr>_final<wbr>_9<wbr>.pdf*](https://go.sentinelone.com/rs/327-MNM-087/images/reverse_mw_final_9.pdf).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
