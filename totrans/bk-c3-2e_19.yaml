- en: '**19**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**19**'
- en: '**THE FUTURE OF CSS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS的未来**'
- en: '![Image](graphics/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/common-01.jpg)'
- en: In this final chapter, we’ll look at some more experimental CSS3 features. As
    you’ll see, these features range from ones that greatly extend your ability to
    lay out pages (to rival those of printed magazines) to ones that bring you powerful
    methods and functions found in other programming languages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将介绍一些更具实验性的 CSS3 特性。正如你将看到的，这些特性涵盖了从大大扩展你页面布局能力（可以与印刷杂志相媲美）到为你带来其他编程语言中强大方法和功能的特性。
- en: I must state up front that these features have limited implementation and, as
    I write this, are defined in modules that have yet to complete the W3C recommendation
    cycle; these two facts mean that the future of the features in this chapter is
    uncertain. Because these features are in such a state of flux, I’ll discuss each
    briefly, without the level of detail used throughout the rest of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须首先说明，这些特性目前的实现有限，并且在我写这篇文章时，这些特性仍然在模块中定义，尚未完成 W3C 推荐周期；这两个事实意味着本章中的特性未来尚不确定。由于这些特性处于不断变化的状态，我将在此简要讨论每个特性，而不如本书其他部分那样详细。
- en: '**Shapes**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**形状**'
- en: One limitation of CSS is that all elements are rectangular. Even if you use
    rounded corners or clip an element (as discussed in [Chapter 18](ch18.html#ch18)),
    the underlying box is still rectangular. So, for example, content floated around
    a rounded or clipped element will follow the rectangular outline of the element’s
    bounding box, as you can see in [Figure 19-1](ch19.html#ch19fig1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 的一个限制是所有元素都是矩形的。即使你使用圆角或裁剪元素（如[第18章](ch18.html#ch18)所讨论），底层的框依然是矩形的。因此，举例来说，围绕圆形或裁剪元素浮动的内容会遵循该元素矩形的轮廓框，正如你在[图19-1](ch19.html#ch19fig1)中看到的那样。
- en: '![Image](graphics/f19-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f19-01.jpg)'
- en: '*Figure 19-1: Although the element here has rounded corners, content floated
    around it follows its rectangular bounding box.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-1：尽管元素这里有圆角，但围绕它浮动的内容依然遵循其矩形边界框。*'
- en: 'The CSS Shapes Module (*[http://www.w3.org/TR/css-shapes/](http://www.w3.org/TR/css-shapes/)*)
    addresses this problem by allowing you to apply geometrical shapes to elements,
    so inline content can flow around the outline of these shapes, rather than the
    original bounding box. The `shape-outside` property defines the shape to be applied
    to an element:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 形状模块（*[http://www.w3.org/TR/css-shapes/](http://www.w3.org/TR/css-shapes/)）解决了这个问题，它允许你将几何形状应用到元素上，使得内联内容可以围绕这些形状的轮廓流动，而不是原本的边界框。`shape-outside`
    属性定义了要应用于元素的形状：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `*shape-function*` value can be any of the functions allowed on the `clip-shape`
    property (introduced in “[Clipping](ch18.html#ch18leve1sec253)” on [page 235](ch18.html#page_235)):
    `inset()`, `circle()`, `ellipse()`, or `polygon()`. For example, this code creates
    a circle with a radius of 100px and a center at the top left of the element it’s
    applied to:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`*shape-function*` 值可以是 `clip-shape` 属性（在“[裁剪](ch18.html#ch18leve1sec253)”一节中介绍，见[第235页](ch18.html#page_235)）上允许的任何函数：`inset()`、`circle()`、`ellipse()`
    或 `polygon()`。例如，这段代码创建了一个半径为 100px、中心位于应用该属性元素的左上角的圆形：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When this element is floated, any inline content around it wraps around the
    outline of the circle, as shown in [Figure 19-2](ch19.html#ch19fig2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当该元素被浮动时，围绕它的任何内联内容都会围绕圆形的轮廓流动，正如[图19-2](ch19.html#ch19fig2)所示。
- en: Note the shape applies only to the element’s float outline; the background color,
    images, and borders will still respect the element’s box. As you can see in [Figure
    19-3](ch19.html#ch19fig3), I’ve removed the `border-radius` value from the floated
    element, and the text overlaps the element’s box. To avoid this problem, you could
    consider using a clip path (see “Clipping” on [page 235](ch18.html#page_235))
    that matches the defined shape.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，形状仅适用于元素的浮动轮廓；背景色、图像和边框仍然会遵循元素的边框框。正如你在[图19-3](ch19.html#ch19fig3)中看到的，我已经去掉了浮动元素的
    `border-radius` 值，导致文本与元素的边框重叠。为避免此问题，你可以考虑使用与定义形状匹配的裁剪路径（参见[第235页](ch18.html#page_235)的“裁剪”一节）。
- en: '![Image](graphics/f19-02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f19-02.jpg)'
- en: '*Figure 19-2: An element with a CSS Shape applied. Content flows around the
    defined circular outline rather than the bounding box.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-2：应用了 CSS 形状的元素。内容围绕定义的圆形轮廓流动，而不是围绕边界框。*'
- en: '![Image](graphics/f19-03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f19-03.jpg)'
- en: '*Figure 19-3: Without a matching* `*border-radius*` *value, floated text overlaps
    the background color of the shaped element.*'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-3：如果没有匹配的* `*border-radius*` *值，浮动文本会与形状元素的背景颜色重叠。*'
- en: 'To create extra space between the edge of the float shape and the content flowing
    around it, you can use the `shape-margin` property. This property accepts any
    length value. For example, this code adds an extra 0.5em around the shape:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在浮动形状的边缘与环绕其内容之间创建额外的空间，您可以使用`shape-margin`属性。此属性接受任何长度值。例如，这段代码为形状周围添加了额外的
    0.5em 空间：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that, unlike the `margin` property, you can only add a single margin value
    that applies evenly to all sides of the shape.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与`margin`属性不同，您只能添加一个单一的边距值，这个值会均匀地应用于形状的所有边。
- en: '**Exclusions**'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**排除**'
- en: As of this writing, in order to have content flow around an element you must
    make the element float. The drawback is that an element can only be floated to
    the left or right; you can neither position it in the middle of text nor do you
    have much fine control.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，要让内容围绕一个元素流动，您必须使该元素浮动。缺点是元素只能浮动到左侧或右侧；您不能将其定位在文本的中间，也没有太多精细控制。
- en: The CSS Exclusions Module (*[http://www.w3.org/TR/css3-exclusions/](http://www.w3.org/TR/css3-exclusions/)*)
    addresses this problem. CSS Exclusions defines a way to flow text around any element,
    regardless of whether the element itself is floated. [Figure 19-4](ch19.html#ch19fig4)
    shows an element positioned over some text. In the example on the left, the element
    doesn’t interact with the text, but on the right, it acts as an *exclusion element*—it
    behaves as if it was floated, and the text flows around it on both sides.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 排除模块 (*[http://www.w3.org/TR/css3-exclusions/](http://www.w3.org/TR/css3-exclusions/)*）解决了这个问题。CSS
    排除定义了一种文本环绕任意元素的方式，无论该元素本身是否浮动。[图 19-4](ch19.html#ch19fig4)展示了一个元素定位在一些文本上方。在左侧的示例中，元素与文本没有交互，而在右侧，它充当了一个*排除元素*——它的表现就像是浮动了，文本在其两侧流动。
- en: '![Image](graphics/f19-04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f19-04.jpg)'
- en: '*Figure 19-4: On the left, an element is positioned above text; on the right,
    a floating exclusion element has text flowing around it.*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-4：左侧是元素定位在文本上方；右侧是一个浮动的排除元素，文本围绕它流动。*'
- en: 'You create an exclusion element with the `wrap-flow` property, which accepts
    a single keyword value:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`wrap-flow`属性创建一个排除元素，该属性接受一个关键字值：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `*flow-direction*` keyword sets the sides of the element around which any
    inline content flows. You can control the flow with one of several values; each
    of these is shown in [Figure 19-5](ch19.html#ch19fig5):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`*flow-direction*`关键字设置了元素周围任何内联内容流动的侧面。您可以通过多个值来控制流动；这些值在[图 19-5](ch19.html#ch19fig5)中有显示：'
- en: • The `clear` value means content will not flow around either side of the exclusion
    element (A).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • `clear`值意味着内容不会围绕排除元素的任何一侧流动（A）。
- en: • The `both` value flows inline content around both sides (B).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • `both`值使内联内容围绕元素的两侧流动（B）。
- en: • The `start` value means inline content flows around the left side of the element
    (if the writing direction of the document or element is left-to-right), leaving
    the right side empty (C).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: • `start`值意味着内联内容会围绕元素的左侧流动（如果文档或元素的书写方向是从左到右），并留出右侧空白（C）。
- en: '• The `end` value does the opposite of `start`: Inline content flows around
    the right side of the element, leaving the left side empty (D).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: • `end`值则与`start`相反：内联内容会围绕元素的右侧流动，留出左侧空白（D）。
- en: The `minimum` and `maximum` keywords flow content around the side of an element
    with either the lesser or greater (respectively) distance between the side and
    the nearest side of its containing element. Using the examples in [Figure 19-5](ch19.html#ch19fig5),
    `maximum` would be equivalent to `start` (C) and `minimum` to `end` (D).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimum`和`maximum`关键字会使内容围绕元素的一侧流动，距离该侧与其包含元素的最近边缘分别为较小或较大的距离。使用[图 19-5](ch19.html#ch19fig5)中的示例，`maximum`等同于`start`（C），`minimum`等同于`end`（D）。'
- en: The default keyword value is `auto`, which means no exclusion will be created—the
    content flows beneath the element, as shown on the left in [Figure 19-4](ch19.html#ch19fig4).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的关键字值是`auto`，意味着不会创建排除——内容会流动到元素下方，如[图 19-4](ch19.html#ch19fig4)左侧所示。
- en: As I write this, Internet Explorer 10 and 11 support CSS Exclusions, using the
    `-ms-wrap-flow` property and without the `minimum` keyword value.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我写这段文字时，Internet Explorer 10 和 11 支持 CSS 排除，使用`-ms-wrap-flow`属性，并且没有`minimum`关键字值。
- en: '![Image](graphics/f19-05.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](graphics/f19-05.jpg)'
- en: '*Figure 19-5: Content flows around an exclusion element based on the use of
    various keyword values.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 19-5：内容根据使用不同的关键字值围绕排除元素流动。*'
- en: '**Regions**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**区域**'
- en: '[Chapter 7](ch07.html#ch07) explained CSS columns, the method of flowing content
    across multiple sequential columns. The CSS Regions Module (*[http://dev.w3.org/csswg/css-regions/](http://dev.w3.org/csswg/css-regions/)*)
    extends this idea, allowing content to flow into multiple regions, which aren’t
    required to be consecutive in layout order, and regardless of their position on
    the page. Think of a long magazine article that continues across multiple, though
    not necessarily sequential, pages.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html#ch07)解释了CSS列，这是跨多个连续列流动内容的方法。CSS区域模块 (*[http://dev.w3.org/csswg/css-regions/](http://dev.w3.org/csswg/css-regions/))*
    扩展了这一理念，允许内容流入多个区域，这些区域在布局顺序中不必是连续的，且不受页面位置的限制。可以想象一个长篇杂志文章，内容跨越多个页面，尽管这些页面不一定是连续的。'
- en: 'CSS Regions makes this possible by defining an area of content and assigning
    it a unique identifier, known as a *named flow*, with the `flow-into` property:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CSS区域通过定义一个内容区域并为其分配一个唯一标识符（称为*命名流*），以及使用`flow-into`属性，使这一切成为可能：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once this identifier has been assigned, the content of element `*E*` can flow
    into multiple regions. To do this, use the named flow as the value of the `flow-from`
    property; for example, if you wanted to flow the contents of `*foo*` into the
    elements `*F*` and `*G*`, this is the code you’d use:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦该标识符被分配，元素`*E*`的内容就可以流入多个区域。为此，使用命名流作为`flow-from`属性的值；例如，如果你想将`*foo*`的内容流入元素`*F*`和`*G*`，你可以使用如下代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The content of `*E*` flows into `*F*` first because it’s listed first in the
    code. If the content overflows `*F*`, the overflow goes into `*G.*` [Figure 19-6](ch19.html#ch19fig6)
    shows content flowed into three independent areas. (I’ve added background shading
    to make each area easier to identify.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`*E*`的内容首先流入`*F*`，因为它在代码中排在前面。如果内容溢出`*F*`，溢出的部分将流入`*G*`。[图19-6](ch19.html#ch19fig6)展示了内容流入三个独立区域。（我添加了背景阴影以便更容易识别每个区域。）'
- en: '![Image](graphics/f19-06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](graphics/f19-06.jpg)'
- en: '*Figure 19-6: Text flows into the first box, overflows into the second box,
    and then overflows into the third.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图19-6：文本流入第一个框，溢出到第二个框，然后再溢出到第三个框。*'
- en: The elements `*F*` and `*G*` can be placed anywhere on the page; they do not
    need to be contiguous (though you should, of course, make it easy for the user
    to follow the visual flow of the content).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 元素`*F*`和`*G*`可以放置在页面上的任何位置；它们不需要是连续的（尽管你应该确保内容的视觉流程易于用户跟随）。
- en: As of this writing CSS Regions is implemented in Safari 6.1 and above, using
    the `-webkit-` prefix. CSS Regions is also in Internet Explorer 10 and 11, using
    the `-ms-` prefix and with the added proviso that the element from which the content
    flows must be an `iframe`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，CSS区域已在Safari 6.1及以上版本中实现，并使用`-webkit-`前缀。CSS区域也在Internet Explorer 10和11中实现，使用`-ms-`前缀，并附带要求：内容流动的元素必须是`iframe`。
- en: '**Variables**'
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**变量**'
- en: Almost every programming language can define *variables*—symbolic names to which
    you can assign values and that can be referenced or updated later. Part of the
    reason for the wild popularity of CSS preprocessors such as Sass is that they
    allow the use of variables in CSS. This popularity has led directly to the creation
    of *custom properties*—a limited variable-like feature in the native CSS language.
    These are introduced in the CSS Custom Properties for Cascading Variables Module
    (*[http://www.w3.org/TR/css-variables-1/](http://www.w3.org/TR/css-variables-1/)*).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每种编程语言都可以定义*变量*——符号名称，可以为其分配值，且可以在后续引用或更新。CSS预处理器（如Sass）的广泛流行部分原因在于它们允许在CSS中使用变量。这种流行直接促成了*自定义属性*的创建——这是一种在原生CSS语言中类似变量的有限功能。这些功能在CSS自定义属性级联变量模块中介绍
    (*[http://www.w3.org/TR/css-variables-1/](http://www.w3.org/TR/css-variables-1/))。
- en: 'You define a custom property in three steps: by setting its *scope* (the range
    of values to which it can be applied), creating a unique identifier, and then
    assigning that identifier a value. Here’s how that looks in code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过三步定义一个自定义属性：设置其*作用域*（可以应用的值的范围），创建一个唯一标识符，然后为该标识符分配一个值。以下是代码的表现方式：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Leaving aside ➊ for now, look at ➋, where I’ve defined the custom property using
    the unique identifier `*--fooColor*`. (CSS variable names must be a string of
    characters with no spaces and prefixed with a double hyphen to avoid conflict
    with other defined values.) I’ve assigned the color value `#f00` to the custom
    property, but any valid CSS property value is permitted.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 暂且不论➊，看一下➋，在这里我使用唯一标识符`*--fooColor*`定义了自定义属性。（CSS变量名必须是没有空格的字符字符串，并以双短横线作为前缀，以避免与其他已定义的值冲突。）我已经将颜色值`#f00`赋给了自定义属性，但任何有效的CSS属性值都是允许的。
- en: 'Once the custom property has been defined and given a value, you can use it
    as the value of any other property. The value assigned to the custom property
    is used as the value of the property that refers to it by using the unique identifier
    as an argument in the `var()` function. For example, to call this value on a `border-color`
    and `color`, you write the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义并赋值了自定义属性，你可以将其作为任何其他属性的值使用。赋给自定义属性的值将作为引用该属性的属性的值，通过在`var()`函数中使用唯一标识符作为参数。例如，要将该值应用于`border-color`和`color`，你可以这样写：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, the value of the custom property `*--fooColor*` (namely `#f00`) will
    be used as the value of the `border-color` and `color` properties of `*E*`. Of
    course, the value of the custom property must be valid when applied to the property
    that refers to it: there would be no point in using a color value for the `width`
    property. If you do use an invalid custom property in a rule, the rule will be
    ignored.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，自定义属性`*--fooColor*`的值（即`#f00`）将作为`*E*`的`border-color`和`color`属性的值。当然，当应用自定义属性时，属性值必须有效：比如用颜色值设置`width`属性就没有意义。如果你在规则中使用了无效的自定义属性，该规则将被忽略。
- en: 'Now, let’s return to ➊ in the code shown earlier. This line sets the scope
    of the variable. In my example, the scope is the `:root` selector, which means
    the variable has *global scope* that can be applied to any element, regardless
    of its position in the DOM. If you prefer the custom property only be valid when
    applied to a subset of elements, you can limit this scope. For the custom property
    to be valid only when applied to `h1` elements, for example, you set its scope
    like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到之前代码中的➊。这一行设置了变量的作用范围。在我的例子中，作用范围是`:root`选择器，这意味着变量具有*全局作用域*，可以应用于任何元素，无论其在DOM中的位置。如果你希望自定义属性仅在应用于某些元素时有效，你可以限制这个范围。例如，要使自定义属性仅在应用于`h1`元素时有效，你可以像这样设置它的范围：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Having restricted the scope in this way, a reference to the custom property
    from any `h1` selector displays it with the `color` value `#f00`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式限制范围，任何来自`h1`选择器的对自定义属性的引用都会以`#f00`的`color`值显示：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'But if you refer to the custom property from an element outside the scope,
    like an `h2`, the custom property is unknown, so the following rule will be ignored:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你从超出范围的元素（如`h2`）中引用自定义属性，由于该自定义属性是未知的，所以下面的规则将被忽略：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As of this writing, custom properties are available in Firefox 31 and above
    and are implemented in Chrome behind a flag, but they may not be enabled as there
    are certain performance concerns. As such, custom properties face an uncertain
    future.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，自定义属性已在Firefox 31及以上版本中可用，并且在Chrome中通过标志实现，但由于存在某些性能问题，可能没有启用。因此，自定义属性的未来充满不确定性。
- en: '**Feature Queries**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**功能查询**'
- en: 'Media queries, introduced in [Chapter 2](ch02.html#ch02), have transformed
    our ability to make sites work responsively across many different screen sizes
    and resolutions. Their power is partly due to their logical simplicity: If the
    conditions of the query are met, the rules defined within the query’s declaration
    block are applied. This idea is developed further in the CSS Conditional Rules
    Module (*[http://www.w3.org/TR/css3-conditional/](http://www.w3.org/TR/css3-conditional/)*),
    which extends queries not only to use conditions based on device/UA properties
    such as dimension and resolution, but also to allow the definition of CSS rules
    that only apply if a particular CSS feature is supported.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询，在[第2章](ch02.html#ch02)中介绍，已经改变了我们使网站在不同屏幕尺寸和分辨率下响应式工作的方法。它们的强大之处部分在于其逻辑的简洁性：如果查询条件满足，则查询声明块中定义的规则将被应用。这个思想在CSS条件规则模块中得到了进一步发展（*
    [http://www.w3.org/TR/css3-conditional/](http://www.w3.org/TR/css3-conditional/)*），该模块扩展了查询，不仅使用基于设备/用户代理属性（如尺寸和分辨率）的条件，还允许定义仅在支持特定CSS特性的情况下才应用的CSS规则。
- en: These new conditional rules, known as *feature queries*, are defined with the
    new `@supports` rule. The `@supports` syntax is similar to `@media`, except it
    requires a CSS property-value pair (or pairs) as an argument. If the browser supports
    the property-value pair, the defined rules are applied.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些新的条件规则，称为 *特性查询*，通过新的 `@supports` 规则定义。`@supports` 语法类似于 `@media`，不同之处在于它需要一个
    CSS 属性-值对（或多个）作为参数。如果浏览器支持该属性-值对，定义的规则将会应用。
- en: 'For example, to test if a browser supports Flexbox, the conditions of the test
    are that it recognizes the `display` property with a value of `flex`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要测试浏览器是否支持 Flexbox，测试条件是浏览器是否识别值为 `flex` 的 `display` 属性：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In a modern browser that has implemented Flexbox (and `@supports`, of course),
    the property-value pair is recognized, and the rules in the curly brackets are
    applied. Older browsers without Flexbox support won’t recognize that combination
    of property and value and will skip the rules.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在已实现 Flexbox 的现代浏览器中（当然也实现了 `@supports`），属性-值对会被识别，花括号内的规则会被应用。没有 Flexbox 支持的旧版浏览器将无法识别该属性-值组合，并会跳过这些规则。
- en: 'As with media queries, you can use logical operators—`and`, `or`, and `not`—with
    feature queries. For example, to see if a browser supports both Flexbox and Transitions,
    you use `and`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 与媒体查询一样，你可以在特性查询中使用逻辑运算符——`and`、`or` 和 `not`。例如，要查看浏览器是否同时支持 Flexbox 和 Transitions，可以使用
    `and`：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If a property has multiple implementations using vendor prefixes and you want
    to test that the browser has any one of those implementations, you use `or`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个属性有多个使用厂商前缀的实现，而你想测试浏览器是否支持其中的任意一个实现，可以使用 `or`：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And to see if a browser doesn’t support a particular property, you use `not`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看浏览器是否不支持某个特定属性，可以使用 `not`：
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As of this writing, the `@supports` rule is implemented in Chrome and Firefox
    and listed as “In Development” for Internet Explorer. Webkit has implemented it
    experimentally, but as of this writing it is not listed for release in Safari
    8\. In these browsers, rules inside the `@supports` declaration block will be
    ignored.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文撰写时，`@supports` 规则已在 Chrome 和 Firefox 中实现，并列为“开发中”状态，Internet Explorer 也已列出该规则。Webkit
    已经实验性地实现了该规则，但截至目前，它在 Safari 8 中尚未发布。在这些浏览器中，`@supports` 声明块中的规则将被忽略。
- en: '**Device Adaptation**'
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**设备适配**'
- en: One critical part of implementing responsive design with media queries is the
    ability to set viewport properties, using the viewport meta tag (see “[Device
    Width and Height](ch02.html#ch02leve1sec18)” on [page 15](ch02.html#page_15)).
    Unfortunately, the viewport meta tag is not without its problems—not least of
    which is that the initial implementation was undocumented, meaning other browser
    vendors had to reverse-engineer it, leading to small interoperability issues.
    The CSS Device Adaptation Module (*[http://www.w3.org/TR/css-device-adapt/](http://www.w3.org/TR/css-device-adapt/)*)
    attempts to address these interoperability problems by translating the viewport
    meta tag properties into native CSS, and documenting and standardizing features
    as well as adding new ones.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 实现响应式设计时，使用媒体查询的一个关键部分是能够设置视口属性，方法是使用视口 meta 标签（请参见[“设备宽度和高度”](ch02.html#ch02leve1sec18)，[第15页](ch02.html#page_15)）。不幸的是，视口
    meta 标签并非没有问题，其中最严重的问题是最初的实现没有文档化，这意味着其他浏览器厂商不得不对其进行逆向工程，从而导致了小的互操作性问题。CSS 设备适配模块（*[http://www.w3.org/TR/css-device-adapt/](http://www.w3.org/TR/css-device-adapt/)）试图通过将视口
    meta 标签属性转换为原生 CSS，并对功能进行文档化和标准化，同时添加新的功能来解决这些互操作性问题。
- en: 'The Device Adaptation Module reimplements the viewport meta tag with a new
    at-rule, `@viewport`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 设备适配模块通过新的 at-rule `@viewport` 重新实现了视口 meta 标签：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `@viewport` rule accepts numerous property-value pairs or *viewport descriptors*,
    which set the parameters of the viewport. Some of these descriptors are existing
    CSS properties, whereas others are unique to `@viewport`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`@viewport` 规则接受多个属性-值对或 *视口描述符*，它们设置视口的参数。其中一些描述符是现有的 CSS 属性，而其他的则是 `@viewport`
    特有的。'
- en: 'In many cases, these descriptors are not the same as the arguments used in
    the viewport meta tag, but they perform the same role. For example, to set the
    width equal to the device width in the meta tag, you write this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，这些描述符与视口 meta 标签中使用的参数不同，但它们执行相同的角色。例如，要在 meta 标签中将宽度设置为设备宽度，可以写成这样：
- en: '[PRE16]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To perform the same operation with the `@viewport` rule, you use the `width`
    property, with a value of `100vw`—the full viewport width (the vw unit was discussed
    in [Chapter 16](ch16.html#ch16)):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用`@viewport`规则执行相同的操作，您可以使用`width`属性，值为`100vw`——即视口的完整宽度（`vw`单位在[第16章](ch16.html#ch16)中有讨论）：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The best part of the `@viewport` rule is you can combine it with media queries,
    creating custom viewports for different device configurations. For example, you
    can set the width equal to the device width only on small screens:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`@viewport`规则的最佳部分是，您可以将其与媒体查询结合使用，为不同的设备配置创建自定义视口。例如，您可以仅在小屏幕上将宽度设置为设备宽度：'
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As of this writing, the `@viewport` rule is implemented in Internet Explorer
    10 and 11 as the `@-ms-viewport` rule. It’s also implemented in Chrome, although
    not currently enabled by default.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，`@viewport`规则在Internet Explorer 10和11中作为`@-ms-viewport`规则实现。同时它也在Chrome中实现，但当前默认未启用。
- en: '**Sticky Positioning**'
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**粘性定位**'
- en: A fairly common web design pattern is to make elements *sticky* so they stick
    to the top or bottom of the viewport as the page is scrolled. Stickiness has usually
    been accomplished by setting the `fixed` value on the `position` property using
    scroll events in JavaScript, but CSS3’s Positioned Layout Module (*[http://dev.w3.org/csswg/css-position-3/](http://dev.w3.org/csswg/css-position-3/)*)
    introduces a native `sticky` value for the `position` property to do the same
    thing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一种相当常见的网页设计模式是让元素变得*粘性*，这样当页面滚动时，它们会固定在视口的顶部或底部。粘性通常是通过在`position`属性上设置`fixed`值，并结合JavaScript中的滚动事件来实现的，但CSS3的定位布局模块（*[http://dev.w3.org/csswg/css-position-3/](http://dev.w3.org/csswg/css-position-3/)）引入了一个原生的`sticky`值来实现同样的功能。
- en: 'Sticky positioning is a kind of hybrid of relative and fixed positioning. An
    element’s position is relative until it reaches a *sticky threshold* value, which
    is a preset scroll position of the viewport. For example, in the following listing,
    element `*E*` becomes sticky when the viewport scrolls down 20px from the top:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性定位是一种相对定位和固定定位的混合体。元素的定位是相对的，直到它达到*粘性阈值*，这个阈值是视口的预设滚动位置。例如，在下面的代码中，元素`*E*`在视口从顶部向下滚动20px时变为粘性：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As of this writing, sticky positioning is in Safari from 6.1, with the value
    `-webkit-sticky`, and unprefixed in Firefox. Chrome is expected to implement sticky
    positioning, and it is listed as “Under Consideration” in Internet Explorer.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 截至本文写作时，粘性定位在Safari 6.1及以上版本中已实现，使用`-webkit-sticky`值，在Firefox中没有前缀。预计Chrome将实现粘性定位，且在Internet
    Explorer中被列为“正在考虑中”。
- en: '**And Much, Much More**'
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更多更多功能**'
- en: 'CSS is a living standard, undergoing constant development, whether driven by
    the W3C, browser vendors, interested parties like Adobe, or the web development
    community. In addition to the new features discussed in this chapter, many more
    exciting CSS developments are being proposed, debated, and developed. Some of
    these include, but are not limited to, the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: CSS是一个不断发展的标准，无论是由W3C、浏览器厂商、像Adobe这样的相关方，还是由Web开发社区推动，都在持续开发。除了本章讨论的新特性之外，还有许多令人兴奋的CSS发展正在被提议、讨论和开发。其中一些包括但不限于以下内容：
- en: • The ability to set different shapes for corners and allow clipped or partial
    lines for borders
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: • 设置不同形状的角落，并允许剪裁或部分线条作为边框
- en: • The ability to apply the position keywords from Flexbox ([Chapter 15](ch15.html#ch15))
    to any element, causing big changes in the way elements are positioned
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: • 能够将来自Flexbox的定位关键字（[第15章](ch15.html#ch15)）应用于任何元素，从而引起元素定位方式的重大变化
- en: • Color functions that allow colors to be tinted or shaded easily and that provide
    easier grayscale manipulation
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: • 允许颜色轻松着色或着色的颜色函数，并提供更简单的灰度操作
- en: • Extending the idea of custom properties to include custom selectors or functions
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: • 扩展自定义属性的概念，包括自定义选择器或函数
- en: • Grids based on lines of text, which are designed to allow better placement
    of elements in content with a vertical rhythm
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: • 基于文本行的网格设计，旨在更好地放置内容中的元素，具有垂直节奏
- en: • Image values including sprites and fallbacks, and ones that can use elements
    as backgrounds
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: • 包括精灵和后备图像的图像值，及可以使用元素作为背景的图像
- en: These features are mostly still at the theoretical stage, but they should give
    you some insight into the level of thinking that’s going into the future of CSS.
    And such is the rapid rate of change in the web industry, that within a few months
    of reading this, doubtless many more novelties will have been proposed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能大多仍处于理论阶段，但它们应该能让你了解CSS未来发展的思维水平。而且，网页行业变化的速度如此之快，几个月后你阅读这些内容时，肯定会有更多的新特性被提出。
- en: '**Conclusion**'
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: CSS is clearly evolving. From its humble beginnings as a way to provide simple
    decoration to text documents, CSS is moving toward a future where it becomes almost
    a language in itself, capable of adapting to the many devices that we will use
    to access the Web in the future.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CSS显然在不断发展。从最初作为文本文件简单装饰的方式开始，CSS正朝着一个未来发展，几乎成为一种语言，能够适应我们将来用于访问网页的各种设备。
- en: 'I’ve learned in my years of working with and writing and talking about CSS
    that change comes from unexpected directions. Certain seemingly useful modules
    or properties will remain unimplemented for many reasons—whether because of business
    decisions, resources, or just plain politics. And change is driven by different
    sources: from the W3C and browser vendors to companies like Adobe that want to
    shape the web in their own image to the development community that builds tools
    to meet the demands of web development. You just never know where the next big
    shift will come from.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我多年的CSS工作、写作和讨论经验中，我发现变革往往来自意想不到的方向。某些看似有用的模块或属性由于各种原因将长期没有实现——无论是因为商业决策、资源问题，还是纯粹的政治原因。而变革的驱动力来自不同的源头：从W3C和浏览器厂商到像Adobe这样的公司，它们希望按自己的方式塑造网络，再到开发社区，它们开发工具以满足网页开发的需求。你永远不知道下一次重大变革将从哪里来。
- en: I haven’t covered everything in the CSS3 modules in this book, but I hope I’ve
    covered enough to at least make you curious about some of the new technologies
    you can start using today, as well as what lies on the horizon for CSS. I urge
    you to stay connected to the conversation that surrounds styling elements for
    the Web, to download preview releases of browsers, to create your own experiments,
    and to let the browser makers and the W3C know the results of your experiments.
    CSS3 has (mostly) been molded around the desires of web developers, and your opinions
    and feedback are vital.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本书中没有涵盖CSS3模块的所有内容，但希望我已经涵盖了足够的内容，至少能够激起你对一些你今天就可以开始使用的新技术的好奇心，以及CSS未来的发展方向。我鼓励你保持对网页样式元素讨论的关注，下载浏览器的预览版本，进行自己的实验，并将实验结果反馈给浏览器开发者和W3C。CSS3（大多数情况下）是围绕网页开发者的需求塑造的，你的意见和反馈至关重要。
- en: '**Future CSS: Browser Support**'
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**未来的CSS：浏览器支持**'
- en: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '|  | **Chrome** | **Firefox** | **Safari** | **IE** |'
- en: '| Shapes | Yes | No | Safari 8^([*](ch19.html#footnote45a)) | No |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 形状 | 是 | 否 | Safari 8^([*](ch19.html#footnote45a)) | 否 |'
- en: '| Exclusions | No | No | No | IE10^([†](ch19.html#footnote46a)) |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 排除项 | 否 | 否 | 否 | IE10^([†](ch19.html#footnote46a)) |'
- en: '| Regions | No | No | Yes[*](ch19.html#footnote45a) | IE10^([‡](ch19.html#footnote47a))
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 区域 | 否 | 否 | 是[*](ch19.html#footnote45a) | IE10^([‡](ch19.html#footnote47a))
    |'
- en: '| Variables | No | Yes | No | No |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| 变量 | 否 | 是 | 否 | 否 |'
- en: '| Feature queries | Yes | Yes | No | No^([§](ch19.html#footnote48a)) |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 功能查询 | 是 | 是 | 否 | 否^([§](ch19.html#footnote48a)) |'
- en: '| Device adaptation | No^([&#124;&#124;](ch19.html#footnote49a)) | No | No
    | IE10^([†](ch19.html#footnote46a)) |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 设备适配 | 否^([&#124;&#124;](ch19.html#footnote49a)) | 否 | 否 | IE10^([†](ch19.html#footnote46a))
    |'
- en: '| Sticky positioning | No | Yes | Yes[*](ch19.html#footnote45a) | No |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 粘性定位 | 否 | 是 | 是[*](ch19.html#footnote45a) | 否 |'
- en: '[*](ch19.html#footnote_45a) With vendor prefix'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[*](ch19.html#footnote_45a) 带供应商前缀'
- en: '[†](ch19.html#footnote_46a) With vendor prefix; no support for minimum value'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[†](ch19.html#footnote_46a) 带供应商前缀；不支持最小值'
- en: '[‡](ch19.html#footnote_47a) With vendor prefix; only an iframe can be used
    as the content source'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[‡](ch19.html#footnote_47a) 带供应商前缀；只能使用iframe作为内容源'
- en: '[§](ch19.html#footnote_48a) Currently listed as “in development”'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[§](ch19.html#footnote_48a) 当前列为“开发中”'
- en: '[||](ch19.html#footnote_49a) Implemented, but disabled by default'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[||](ch19.html#footnote_49a) 已实现，但默认禁用'
