["```\n> 123 \n123\n\n> \"hello there\"\n\"hello there\"\n\n> pi\n3.141592653589793\n```", "```\n> alpha\n. . alpha: undefined;\n  cannot reference an identifier before its definition\n\n> 'alpha\n'alpha\n```", "```\n> (list 1 2 3)\n```", "```\n> (list 1 (list \"two\" \"three\") 4 5)\n```", "```\n'(1 (\"two\" \"three\") 4 5)\n```", "```\n> (quote (1 (\"two\" \"three\") 4 5))\n```", "```\n> '(1 (\"two\" \"three\") 4 5)\n```", "```\n'(1 (\"two\" \"three\") 4 5)\n```", "```\n> (quote (3 1 4 pi))\n'(3 1 4 pi)\n\n> (list 3 1 4 pi)\n'(3 1 4 3.141592653589793)\n```", "```\n> '(1 [\"two\" \"three\"] 4 5)\n```", "```\n> '(1 {\"two\" \"three\"} 4 5)\n```", "```\n> (cons 1 2)\n'(1 . 2)\n```", "```\n> (cons 1 '())\n'(1)\n```", "```\n> (pair? (cons 1 2))\n#t\n\n> (list? (cons 1 2))\n#f\n\n> (pair? (cons 1 '()))\n#t\n\n> (list? (cons 1 '()))\n#t\n```", "```\n> (cons 1 '(2 3))\n'(1 2 3)\n```", "```\n> (car '(1 (\"two\" \"three\") 4 5))\n1\n\n> (first '(1 (\"two\" \"three\") 4 5))\n1\n\n> (cdr '(1 (\"two\" \"three\") 4 5))\n'((\"two\" \"three\") 4 5)\n\n> (rest '(1 (\"two\" \"three\") 4 5))\n'((\"two\" \"three\") 4 5)\n```", "```\n> (first '(1 2 3 4))\n1\n\n> (second '(1 2 3 4))\n2\n\n> (third '(1 2 3 4))\n3\n```", "```\n> (list-ref '(a b c) 0)\n'a\n\n> (list-ref '(a b c) 1)\n'b\n```", "```\n> (length '(1 2 3 4 5))\n5\n```", "```\n> (reverse '(1 2 3 4 5)) ; reverse elements of a list\n'(5 4 3 2 1)\n```", "```\n> (sort '(1 3 6 5 7 9 2 4 8) <) \n'(1 2 3 4 5 6 7 8 9)\n```", "```\n> (sort '(1 3 6 5 7 9 2 4 8) >)\n'(9 8 7 6 5 4 3 2 1)\n```", "```\n> (append '(1 2 3) '(4 5 6)) \n'(1 2 3 4 5 6)\n```", "```\n> (append '(1 2) '(3 4) '(5 6)) \n'(1 2 3 4 5 6)\n```", "```\n> (range 0 10 2)\n'(0 2 4 6 8)\n```", "```\n> (range 10)\n'(0 1 2 3 4 5 6 7 8 9)\n```", "```\n> (make-list 10 'me)\n'(me me me me me me me me me me)\n```", "```\n> (null? '()) ; test for empty list\n#t\n> (null? '(1 2 3))\n#f\n```", "```\n> (index-of '(8 7 1 9 5 2) 9)\n3\n```", "```\n> (index-of '(8 7 1 9 5 2) 10)\n#f\n```", "```\n> (member 7 '(9 3 5 (6 2) 5 1 4))\n#f\n\n> (member 5 '(9 3 5 (6 2) 5 1 4))\n'(5 (6 2) 5 1 4)\n\n> (member 6 '(9 3 5 (6 2) 5 1 4))\n#f\n```", "```\n> (member '(6 2) '(9 3 5 (6 2) 5 1 4))\n'((6 2) 5 1 4)\n```", "```\n> (define a 123)\n> a\n123\n```", "```\n> (define b '(1 2 3))\n> b\n'(1 2 3)\n```", "```\n> (define-values (x y z) (values 1 2 3))\n\n> x\n1\n\n> y\n2\n\n> z\n3\n```", "```\n> (set! ice 9)\n. . set!: assignment disallowed;\n  cannot set variable before its definition\n  variable: ice\n```", "```\n> (define ice 9)\n> ice\n9\n> (set! ice 32)\n32\n```", "```\n> (define 2x3 7)\n> 2x3\n7\n```", "```\n> 'this-is-a-symbol\n'this-is-a-symbol\n```", "```\n> (~r pi #:precision 2)\n\"3.14\"\n```", "```\n> (define a '(1 2 3))\n> (define b '(1 2 3))\n```", "```\n> (equal? a b)\n#t\n```", "```\n> (eq? a b)\n#f\n```", "```\n> (define x '(1 2 3))\n> (define y x)\n> (eq? x y)\n#t\n```", "```\n> (define a  123)\n> (define b  123)\n> (eq? a b)\n#t\n```", "```\n> (= 123 123)\n#t\n\n> (= 123 456)\n#f\n\n(= '(1 2 3) '(1 2 3))\n. . =: contract violation\n  expected: number?\n  given: '(1 2 3)\n  argument position: 1st\n  other arguments...:\n```", "```\n> #\\A\n#\\A\n\n> #\\u0041\n#\\A\n\n> #\\   ; this is a space character\n#\\space\n\n> #\\u0020  ; so is this\n#\\space\n\n> (char->integer #\\u0041)\n65\n\n> (integer->char 65)\n#\\A\n\n> (char-alphabetic? #\\a)\n#t\n\n> (char-alphabetic? #\\1)\n#f\n\n> (char-numeric? #\\1)\n#t\n\n> (char-numeric? #\\a)\n#f\n```", "```\n> '(#\\u2660 #\\u2663 #\\u2665 #\\u2666)\n'(#♠ #♣ #♡ #♢)\n\n> '(#\\u263A #\\u2639 #\\u263B)\n'(\\#☺ \\#☹ \\#☻)\n\n> '(#\\u25A1 #\\u25CB #\\u25C7)\n'(\\#□ \\#◯ \\#◇)\n```", "```\n> \"This is a string.\"\n\"This is a string.\"\n```", "```\n> \"Happy: \\u263A.\"\n\"Happy: ☺.\"\n```", "```\n> (string-append \"Luke, \" \"I am \" \"your father!\")\n\"Luke, I am your father!\"\n```", "```\n> (string-ref \"abcdef\" 2)\n#\\c\n```", "```\n> (define wishy-washy (string #\\I #\\  #\\a #\\m #\\  #\\m #\\u #\\t #\\a #\\b #\\l #\\e)\n    )\n> wishy-washy\n\"I am mutable\"\n\n> (string-set! wishy-washy 5 #\\a)\n> (string-set! wishy-washy 6 #\\ ) \n\n> wishy-washy\n\"I am a table\"\n```", "```\n> (define mstr (string-copy \"I am also mutable\"))\n> (string-set! mstr 5 #\\space)\n> (string-set! mstr 6 #\\space)\n> mstr\n\"I am   so mutable\"\n```", "```\n> (define exes (make-string 10 #\\X))\n> (string-set! exes 5 #\\O)\n> exes\n\"XXXXXOXXXX\"\n```", "```\n> (string-length wishy-washy)\n12\n```", "```\n> (substring wishy-washy 7 12) ; characters 7-11\n\"table\"\n```", "```\n> (string-titlecase wishy-washy)\n\"I Am A Table\"\n```", "```\n> (string-upcase \"big\")\n\"BIG\"\n```", "```\n> (string-downcase \"SMALL\")\n\"small\"\n```", "```\n> (string<=? \"big\" \"small\")  ; alphabetical comparison\n#t\n```", "```\n> (string=? \"big\" \"small\")\n#f\n```", "```\n> (define darth-quote \"Luke, I am your father!\")\n> (string-replace darth-quote \"am\" \"am not\")\n\"Luke, I am not your father!\"\n```", "```\n> (string-contains? darth-quote \"Luke\")\n#t\n\n> (string-contains? darth-quote \"Darth\")\n#f\n```", "```\n> (string-split darth-quote)\n'(\"Luke,\" \"I\" \"am\" \"your\" \"father!\")\n\n> (string-split darth-quote \",\")\n'(\"Luke\" \" I am your father!\")\n```", "```\n> (string-trim \"  hello   \")\n\"hello\"\n\n> (string-trim \"  hello   \" #:right? #f)\n\"hello   \"\n\n> (string-trim \"  hello   \" #:left? #f)\n\"  hello\"\n```", "```\n> (symbol->string 'FBI)\n\"FBI\"\n\n> (string->symbol \"FBI\")\n'FBI\n\n> (list->string '(#\\x #\\y #\\z))\n\"xyz\"\n\n> (string->list \"xyz\")\n'(#\\x #\\y #\\z)\n\n> (string->keyword \"string->keyword\")\n'#:string->keyword\n\n> (keyword->string '#:keyword)\n\"keyword\"\n```", "```\n> (format \"let ~a = ~a\" \"x\" 2)\n\"let x = 2\"\n```", "```\n> (number->string pi)\n\"3.141592653589793\"\n```", "```\n> (string->number \"3.141592653589793\")\n3.141592653589793\n```", "```\n> (string->number \"five\")\n#f\n```", "```\n> (~r pi #:precision 4)\n\"3.1416\"\n```", "```\n> (~r pi #:min-width 20 #:precision 4 #:pad-string \".\")\n\"..............3.1416\"\n```", "```\n> (vector 1 3 \"d\" 'a 2)\n'#(1 3 \"d\" a 2)\n```", "```\n> #(1 3 \"d\" a 2)\n'#(1 3 \"d\" a 2)\n```", "```\n> (vector 1 2 pi)\n'#(1 2 3.141592653589793)\n\n> #(1 2 pi)\n'#(1 2 pi)\n```", "```\n> (define v (vector 'alpha 'beta 'gamma))\n> (vector-ref v 1)\n'beta\n\n> (vector-ref v 0)\n'alpha\n```", "```\n> (vector-set! v 2 'foo)\n> v\n'#(alpha beta foo)\n```", "```\n> (define u #(alpha beta gamma))\n> (vector-set! u 2 'foo)\n. . vector-set!: contract violation\n  expected: (and/c vector? (not/c immutable?))\n  given: '#('alpha 'beta 'gamma)\n  argument position: 1st\n  other arguments...:\n```", "```\n> (vector-length #(one ringy dingy))\n3\n```", "```\n> (vector-sort #(9 1 3 8 2 5 4 0 7 6 ) <)\n'#(0 1 2 3 4 5 6 7 8 9)\n\n> (vector-sort #(9 1 3 8 2 5 4 0 7 6 ) >)\n'#(9 8 7 6 5 4 3 2 1 0)\n```", "```\n>  (vector->list #(one little piggy))\n'(one little piggy)\n```", "```\n> (list->vector '(two little piggies))\n'#(two little piggies)\n```", "```\n> (make-vector 10 'piggies) ; create a mutable vector\n'#(piggies piggies piggies piggies piggies piggies piggies piggies piggies\n     piggies)\n```", "```\n> (vector-append #(ten little) #(soldier boys))\n'#(ten little soldier boys)\n```", "```\n> (vector-member 'waldo (vector 'where 'is 'waldo '?) )\n2\n```", "```\n> (struct transaction (date payee check-number amount))\n```", "```\n> (define trans (transaction 20170907 \"John Doe\" 1012 100.10))\n```", "```\n> (transaction-date trans)\n20170907\n\n> (transaction-payee trans)\n\"John Doe\"\n\n> (transaction-check-number trans)\n1012\n\n> (transaction-amount trans)\n100.1\n```", "```\n> (set-transaction-amount! trans 100.12)\n. . set-transaction-amount!: undefined;\n  cannot reference an identifier before its definition\n```", "```\n> (struct transaction \n    (date payee check-number [amount #:mutable]))\n> (define trans (transaction 20170907 \"John Doe\" 1012 100.10))\n> (set-transaction-amount! trans 100.12)\n> (transaction-amount trans)\n100.12\n{\n```", "```\n> (struct transaction \n    (date payee check-number amount) #:mutable)\n> (define trans (transaction 20170907 \"John Doe\" 1012 100.10))\n> (set-transaction-check-number! trans 1013)\n> (transaction-check-number trans)\n1013\n```", "```\n> trans\n#<transaction>\n```", "```\n> (struct transaction \n    (date payee check-number amount) #:mutable #:transparent)\n> (define trans (transaction 20170907 \"John Doe\" 1012 100.10))\n> trans\n(transaction 20170907 \"John Doe\" 1012 100.1)\n```", "```\n> (struct transaction \n    (date payee check-number amount)\n    #:mutable #:transparent\n    #:guard (λ (date payee num amt name)\n        (unless (> num 0) \n        (error \"Not a valid check number\"))\n        (values date payee num amt)))\n\n> (transaction 20170907 \"John Doe\" -1012 100.10)\nNot a valid check number\n\n> (transaction 20170907 \"John Doe\" 1012 100.10)\n(transaction 20170907 \"John Doe\" 1012 100.1)\n```", "```\n> (define last-check 1000)\n\n> (struct transaction \n    (date payee check-number amount)\n    #:mutable #:transparent\n    #:guard (λ (date payee num amt name)\n              (cond\n                [(< num 0)\n                   (error \"Not a valid check number\")]\n                [(= num 0)\n                   (let ([next-num (add1 last-check)])\n                     (set! last-check next-num)\n                     (values date payee next-num amt))]\n                [else \n                   (set! last-check num)\n                   (values date payee num amt)])))\n\n> (transaction 20170907 \"John Doe\" 0 100.10)\n(transaction 20170907 \"John Doe\" 1001 100.1)\n\n> (transaction 20170907 \"Jane Smith\" 1013 65.25)\n(transaction 20170907 \"Jane Smith\" 1013 65.25)\n\n> (transaction 20170907 \"Acme Hardware\" 0 39.99)\n(transaction 20170907 \"Acme Hardware\" 1014 39.99)\n```", "```\n> (write \"show me the money\")\n\"show me the money\"\n\n> (write '(show me the money))\n(show me the money)\n\n> (write #\\A)\n#\\A\n\n> (write 1.23)\n1.23\n\n> (write 1/2)\n1/2\n\n> (write #(a b c))\n#(a b c)\n```", "```\n> (display \"show me the money\")\nshow me the money\n\n> (display '(show me the money))\n(show me the money)\n\n> (display #\\A)\nA\n\n> (display 1.23)\n1.23\n\n> (display 1/2)\n1/2\n\n> (display #(a b c))\n#(a b c)\n```", "```\n> (print \"show me the money\")\n\"show me the money\"\n\n> (print '(show me the money))\n'(show me the money)\n\n> (print #\\A)\n#\\A\n\n> (print 1.23)\n1.23\n\n> (print 1/2)\n1\n-\n2\n\n> (print #(a b c))\n'#(a b c)\n```", "```\n> (print \"show me \") (print \"the money\")\n\"show me \"\"the money\"\n\n> (display \"show me \") (display \"the money\")\nshow me the money\n\n> (println \"show me \") (println \"the money\")\n\"show me \"\n\"the money\"\n\n> (displayln \"show me \") (displayln \"the money\")\nshow me \nthe money\n```", "```\n> (printf \"~a + ~a = ~a\" 1 2 (+ 1 2))\n1 + 2 = 3\n\n> (printf \"~a, can you hear ~a?\" \"Watson\" \"me\")\nWatson, can you hear me?\n\n> (printf \"~a, can you hear ~a?\" \"Jeeves\" \"the bell\")\nJeeves, can you hear the bell?\n```"]