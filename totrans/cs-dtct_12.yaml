- en: —13—
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: —13—
- en: Stacks and Queues for Search
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索的栈和队列
- en: Frank shook the image of burnt bread from his mind and returned to the present
    situation—trapped in a small cell filled with parchment about to burst into flame.
    The fire was still small, burning the loose sheets at the edge of the piles. But
    once the large stacks fully caught fire, the heat would be unbearable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Frank甩开了脑海中关于烧焦面包的画面，重新回到眼前的困境——被困在一个充满即将燃烧的羊皮纸的小牢房里。火苗还很小，只是烧着堆积物边缘的松散纸张。但一旦大堆纸张完全着火，热量将变得难以忍受。
- en: Socks crawled to the door and leaned against it. “Is it locked?” he asked.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Socks爬到门口，靠在门上。“门锁了吗？”他问。
- en: Frank swallowed half a dozen snarky answers and simply nodded. “Can you open
    it?” he asked. “It’s an old two-pin lock. It can’t have that many combinations.”
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Frank咽下了好几个带刺的回答，简单地点了点头。“你能打开它吗？”他问。“这是一个老式的双销锁，应该没有那么多组合。”
- en: Socks shook his head. “There’s no time. I know a spell to weaken the metal,
    though. It will ruin the door, but . . . I think that’s okay given the circumstances
    and all.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Socks摇了摇头。“没有时间了。不过我知道一个咒语可以削弱金属。这样会毁掉门，但是……考虑到现在的情况，我想这也没关系。”
- en: He retrieved his staff and immediately set to work, mumbling incantations and
    running his hands over the bars. Spots of rust bloomed under his hands and crept
    over the metal. Less than a minute later, Socks stood back. The door looked thoroughly
    rusty, though still very much made of metal.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 他拿起法杖，立刻开始工作，嘴里念念有词，一只手在栏杆上滑动。锈斑在他手下绽放，慢慢蔓延过金属。不到一分钟后，Socks站了回去。门看起来已经完全生锈了，虽然依然是金属制的。
- en: “The bars should be significantly weakened,” he said. He stepped back and gave
    Frank an expectant look as if to say, “You can smash through the door anytime
    now.”
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “铁栏杆应该已经大大削弱了，”他说道。他退后一步，期待地看着Frank，仿佛在说，“你现在可以随时撞开门了。”
- en: Frank took a couple of steps back and eyed the door. “How weak?” he asked. “Are
    we talking toothpick weak or thick plank of wood weak?”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Frank退后了几步，打量着门。“有多弱？”他问道。“是像牙签一样弱，还是像厚木板一样弱？”
- en: “Well . . . definitely weaker than normal metal,” Socks answered. “I added a
    lot of rust. The bars are thick, but I think they should be pretty weak now.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯……肯定比普通金属弱，”Socks回答。“我加了很多锈。栏杆很厚，但我想它们现在应该很弱了。”
- en: Frank groaned. He took a deep breath and charged, lowering his shoulder and
    barrelling into the door. The impact jolted his entire body, but he broke through.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Frank呻吟了一声，深吸一口气，猛地冲向门，低下肩膀，撞向门。撞击使他的全身一震，但他突破了。
- en: Frank lay sprawled on the floor while a cloudy mixture of rust particles and
    smoke swirled over him.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Frank躺在地上，周围弥漫着锈屑和烟雾的混合物。
- en: Socks hurried over to his side. “Are you okay?” He looked back at the door and
    broke into a wide smile. “It worked!” he said, beaming with pride. “Were they
    really weak? What did it feel like?”
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Socks急忙跑到他身边。“你还好吗？”他回头看了看门，露出了灿烂的笑容。“成功了！”他一脸得意地说道。“它们真的很弱吗？感觉如何？”
- en: “Like inch-thick pine,” Frank said. “It hurt a lot.”
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: “就像一英寸厚的松木，”Frank说。“真的很疼。”
- en: The smile dimmed slightly. “Oh.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微笑稍微暗淡了一些。“哦。”
- en: Frank pushed himself to his feet. His shoulder throbbed and he’d have a nasty
    bruise there tomorrow, but the temporary euphoria of escaping a flaming death
    easily offset the pain.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Frank艰难地站了起来。他的肩膀疼得厉害，明天肯定会有个大淤青，但逃脱火焰死亡的短暂快感很轻松地抵消了那点痛苦。
- en: '![image](../images/f0104-01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0104-01.jpg)'
- en: “Time to go,” he said as he started through the next room.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “该走了，”他说着，走进了下一个房间。
- en: “Do you remember how to get back?” Socks asked.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “你记得怎么回去吗？”Socks问。
- en: “Of course,” Frank replied. “We used depth-first search to get here. We can
    just follow the stack back out.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “当然，”Frank回答。“我们用的是深度优先搜索来找到这里。我们可以沿着栈回去。”
- en: “Stack?” Socks asked as he started after Frank.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “栈？”Socks一边跟着Frank走，一边问道。
- en: “Yeah,” said Frank, still feeling the lingering thrill of their escape. “It’s
    easy to think of searches in terms of the data structures they use. For example,
    breadth-first search uses a queue and depth-first search uses a stack.” The explanation
    poured out of him like one of Notation’s textbook answers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: “是的，”Frank说道，仍然沉浸在刚才逃脱的兴奋中。“搜索很容易从它们使用的数据结构角度来看。例如，广度优先搜索使用队列，深度优先搜索使用栈。” 解释像《符号学》教材里的标准答案一样滔滔不绝地从他口中流出。
- en: “Actually, there are a few different ways to keep track of your options during
    depth-first search. Some people prefer to use a stack to keep a list of *future*
    rooms to explore, similar to how you use a queue in breadth-first search. I prefer
    a different approach.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “其实，深度优先搜索有几种不同的方法来跟踪你的选择。有些人喜欢使用栈来列出*未来*要探索的房间，类似于广度优先搜索中使用队列的方式。我更倾向于另一种方法。”
- en: “You can use the stack to keep track of rooms along your *current* path. Every
    time you explore a new room, you push it onto a stack representing your current
    path.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “你可以用栈来跟踪当前路径上的房间。每当你探索一个新房间时，就将它压入栈中，表示你当前的路径。”
- en: '![image](../images/f0105-01.jpg)![image](../images/f0106-01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0105-01.jpg)![image](../images/f0106-01.jpg)'
- en: “When you backtrack, you pop that room off the stack and return to the one before
    it. That way, you always know how to backtrack. I even numbered the rooms to make
    backtracking easier.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “当你回溯时，你将该房间从栈中弹出，回到之前的那个房间。这样，你总是知道如何回溯。我甚至给房间编号，以便更容易回溯。”
- en: '![image](../images/f0106-02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-02.jpg)'
- en: “I thought you always just backtracked to the last decision point,” Socks said.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “我以为你总是直接回溯到最后的决策点，”索克斯说道。
- en: “You effectively do,” said Frank. “But keeping the rooms in a stack makes it
    much easier to do that. You just backtrack and pop off the fully explored rooms
    until you get to one with a new path.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “你实际上是这么做的，”弗兰克说。“但是把房间放在栈里会让这个过程变得容易得多。你只需要回溯，直到遇到一个有新路径的房间，再将已完全探索的房间从栈中弹出。”
- en: Socks looked impressed. “You wrote down the rooms we explored?”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 索克斯看起来印象深刻。“你把我们探索过的房间都写下来了？”
- en: “I kept track of the stack in my head and I numbered the rooms with chalk,”
    answer Frank. “As I said, this isn’t my first time doing depth-first search. We
    have to backtrack through seven rooms.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: “我在脑海中记住了栈的内容，用粉笔给房间编号，”弗兰克回答道。“正如我所说，这不是我第一次做深度优先搜索。我们得回溯七个房间。”
- en: '![image](../images/f0106-03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0106-03.jpg)'
- en: They hurried back through two dark rooms before Socks remembered the staff in
    his hand. He mumbled the fire incantation again and blue flame leapt from the
    tip.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 他们穿过两个黑暗的房间匆忙返回，这时索克斯才想起手中的法杖。他再次低声念出火焰咒语，蓝色的火焰从法杖尖端跃出。
- en: Frank eyed the staff warily. “Keep a tight hold of it this time,” he advised.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 弗兰克警惕地看着工作人员。“这次要牢牢把握住它，”他建议道。
- en: After three more rooms, Socks suddenly asked, “What about queues?”
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 经过三个房间后，索克斯突然问：“队列怎么样？”
- en: “What about them?” Frank asked.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “它们怎么了？”弗兰克问道。
- en: “You said they were used for breadth-first search.”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “你说它们是用于广度优先搜索的。”
- en: “They are,” agreed Frank. “Your magic list was just a queue. In *breadth*-first
    search, the queue tracks the unexplored options. Instead of pushing the current
    state onto a stack, you add new neighbors to the back of a queue.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “它们是的，”弗兰克同意道。“你的魔法列表实际上就是一个队列。在*广度*优先搜索中，队列跟踪未探索的选项。你不是将当前状态压入栈中，而是将新邻居添加到队列的末尾。”
- en: '![image](../images/f0107-01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/f0107-01.jpg)'
- en: “And in *depth*-first search you can use your list, or stack, to track either
    the unexplored neighbors or the current path?” asked Socks, rather excitedly for
    someone fleeing an unknown attacker in an abandoned prison.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “在*深度*优先搜索中，你可以使用列表或栈来跟踪未探索的邻居或当前路径吗？”索克斯问道，他对于在废弃监狱里逃离不明攻击者的情境下，仍显得异常兴奋。
- en: “Either approach will work if you’re careful about the bookkeeping,” agreed
    Frank.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “无论哪种方法，如果你在记账上小心，都会奏效，”弗兰克同意道。
- en: “I had never thought of search in terms of stacks and queues before,” Socks
    mused. “I wonder what other data structures I’m overlooking. I bet the Spell of
    Disentangled Ropes uses a few.”
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “我以前从未把搜索问题与堆栈和队列联系起来，”索克斯若有所思地说。“我想知道还有哪些数据结构我忽视了。我敢打赌‘解开绳结咒语’就用了几个。”
- en: Frank ignored his ramblings and continued backtracking to the exit. They moved
    fast, prioritizing escape over further exploration. Simple logic told Frank that
    their attacker was long gone. No one had tried to stop them from escaping, and,
    with the evidence burning, there was nothing for the criminals to gain by waiting
    around.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 弗兰克没有理会他的胡言乱语，继续回溯到出口。他们快速行动，优先考虑逃脱而非进一步探索。简单的逻辑告诉弗兰克，攻击者早已离开。没有人试图阻止他们逃跑，而且证据已经被烧毁，犯罪分子也没什么可得益的理由再待下去。
- en: Within a few minutes he located the final door, and they rushed outside. A thin
    trickle of smoke followed them out. By now the flames would have consumed the
    stacks of paper, destroying any leads.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，他找到了最后一扇门，他们迅速冲了出去。一股细烟随他们一起飘出。此时火焰应该已经吞噬了纸堆，摧毁了所有线索。
- en: '**POLICE ALGORITHMS 101: STACKS AND QUEUES**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**警察算法101：栈和队列**'
- en: '***Excerpt from Professor Drecker’s Lecture***'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '***德雷克教授讲座摘录***'
- en: The key to efficient algorithms is information. How we organize that information
    and the data structures we use can have a significant impact not only on the efficiency
    of the algorithm but also on how the algorithm actually functions. For a simple
    example of the importance of data structures, consider the breadth-first search
    and depth-first search from the previous lessons. While the algorithms are conceptually
    similar, whether we maintain our list of leads in either a stack or a queue significantly
    changes how the searches progress.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 高效算法的关键在于信息。我们如何组织这些信息以及所使用的数据结构，不仅对算法的效率产生重大影响，还会影响算法的实际运作。以数据结构重要性的简单例子来看，考虑之前课程中的广度优先搜索和深度优先搜索。虽然这些算法在概念上相似，但我们是否使用栈或队列来存储我们的线索列表，会显著改变搜索的进程。
- en: You want to be careful when choosing your data structures. Data structures should
    help enable the algorithm. Imagine what would happen if we stored a list of sorted
    numbers in a graph. Even if we maintain the sorted property, we can’t perform
    an efficient binary search over the data because graphs limit how we access the
    data. Unlike arrays, graphs don’t have indexes with which we can access the values.
    Instead, we are forced to perform a linear scan, moving from one node to the next
    via the graph’s edges.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择数据结构时，你需要小心。数据结构应该有助于算法的实现。想象一下，如果我们将一个已排序的数字列表存储在图中会发生什么。即使我们保持排序的特性，也无法对数据执行高效的二分查找，因为图结构限制了我们访问数据的方式。与数组不同，图没有索引让我们能够访问数据值。相反，我们只能通过图的边缘，沿着从一个节点到另一个节点的路径执行线性扫描。
