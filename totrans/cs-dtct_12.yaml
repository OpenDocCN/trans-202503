- en: —13—
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stacks and Queues for Search
  prefs: []
  type: TYPE_NORMAL
- en: Frank shook the image of burnt bread from his mind and returned to the present
    situation—trapped in a small cell filled with parchment about to burst into flame.
    The fire was still small, burning the loose sheets at the edge of the piles. But
    once the large stacks fully caught fire, the heat would be unbearable.
  prefs: []
  type: TYPE_NORMAL
- en: Socks crawled to the door and leaned against it. “Is it locked?” he asked.
  prefs: []
  type: TYPE_NORMAL
- en: Frank swallowed half a dozen snarky answers and simply nodded. “Can you open
    it?” he asked. “It’s an old two-pin lock. It can’t have that many combinations.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks shook his head. “There’s no time. I know a spell to weaken the metal,
    though. It will ruin the door, but . . . I think that’s okay given the circumstances
    and all.”
  prefs: []
  type: TYPE_NORMAL
- en: He retrieved his staff and immediately set to work, mumbling incantations and
    running his hands over the bars. Spots of rust bloomed under his hands and crept
    over the metal. Less than a minute later, Socks stood back. The door looked thoroughly
    rusty, though still very much made of metal.
  prefs: []
  type: TYPE_NORMAL
- en: “The bars should be significantly weakened,” he said. He stepped back and gave
    Frank an expectant look as if to say, “You can smash through the door anytime
    now.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank took a couple of steps back and eyed the door. “How weak?” he asked. “Are
    we talking toothpick weak or thick plank of wood weak?”
  prefs: []
  type: TYPE_NORMAL
- en: “Well . . . definitely weaker than normal metal,” Socks answered. “I added a
    lot of rust. The bars are thick, but I think they should be pretty weak now.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank groaned. He took a deep breath and charged, lowering his shoulder and
    barrelling into the door. The impact jolted his entire body, but he broke through.
  prefs: []
  type: TYPE_NORMAL
- en: Frank lay sprawled on the floor while a cloudy mixture of rust particles and
    smoke swirled over him.
  prefs: []
  type: TYPE_NORMAL
- en: Socks hurried over to his side. “Are you okay?” He looked back at the door and
    broke into a wide smile. “It worked!” he said, beaming with pride. “Were they
    really weak? What did it feel like?”
  prefs: []
  type: TYPE_NORMAL
- en: “Like inch-thick pine,” Frank said. “It hurt a lot.”
  prefs: []
  type: TYPE_NORMAL
- en: The smile dimmed slightly. “Oh.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank pushed himself to his feet. His shoulder throbbed and he’d have a nasty
    bruise there tomorrow, but the temporary euphoria of escaping a flaming death
    easily offset the pain.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0104-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “Time to go,” he said as he started through the next room.
  prefs: []
  type: TYPE_NORMAL
- en: “Do you remember how to get back?” Socks asked.
  prefs: []
  type: TYPE_NORMAL
- en: “Of course,” Frank replied. “We used depth-first search to get here. We can
    just follow the stack back out.”
  prefs: []
  type: TYPE_NORMAL
- en: “Stack?” Socks asked as he started after Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “Yeah,” said Frank, still feeling the lingering thrill of their escape. “It’s
    easy to think of searches in terms of the data structures they use. For example,
    breadth-first search uses a queue and depth-first search uses a stack.” The explanation
    poured out of him like one of Notation’s textbook answers.
  prefs: []
  type: TYPE_NORMAL
- en: “Actually, there are a few different ways to keep track of your options during
    depth-first search. Some people prefer to use a stack to keep a list of *future*
    rooms to explore, similar to how you use a queue in breadth-first search. I prefer
    a different approach.
  prefs: []
  type: TYPE_NORMAL
- en: “You can use the stack to keep track of rooms along your *current* path. Every
    time you explore a new room, you push it onto a stack representing your current
    path.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0105-01.jpg)![image](../images/f0106-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “When you backtrack, you pop that room off the stack and return to the one before
    it. That way, you always know how to backtrack. I even numbered the rooms to make
    backtracking easier.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0106-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “I thought you always just backtracked to the last decision point,” Socks said.
  prefs: []
  type: TYPE_NORMAL
- en: “You effectively do,” said Frank. “But keeping the rooms in a stack makes it
    much easier to do that. You just backtrack and pop off the fully explored rooms
    until you get to one with a new path.”
  prefs: []
  type: TYPE_NORMAL
- en: Socks looked impressed. “You wrote down the rooms we explored?”
  prefs: []
  type: TYPE_NORMAL
- en: “I kept track of the stack in my head and I numbered the rooms with chalk,”
    answer Frank. “As I said, this isn’t my first time doing depth-first search. We
    have to backtrack through seven rooms.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0106-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: They hurried back through two dark rooms before Socks remembered the staff in
    his hand. He mumbled the fire incantation again and blue flame leapt from the
    tip.
  prefs: []
  type: TYPE_NORMAL
- en: Frank eyed the staff warily. “Keep a tight hold of it this time,” he advised.
  prefs: []
  type: TYPE_NORMAL
- en: After three more rooms, Socks suddenly asked, “What about queues?”
  prefs: []
  type: TYPE_NORMAL
- en: “What about them?” Frank asked.
  prefs: []
  type: TYPE_NORMAL
- en: “You said they were used for breadth-first search.”
  prefs: []
  type: TYPE_NORMAL
- en: “They are,” agreed Frank. “Your magic list was just a queue. In *breadth*-first
    search, the queue tracks the unexplored options. Instead of pushing the current
    state onto a stack, you add new neighbors to the back of a queue.”
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0107-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: “And in *depth*-first search you can use your list, or stack, to track either
    the unexplored neighbors or the current path?” asked Socks, rather excitedly for
    someone fleeing an unknown attacker in an abandoned prison.
  prefs: []
  type: TYPE_NORMAL
- en: “Either approach will work if you’re careful about the bookkeeping,” agreed
    Frank.
  prefs: []
  type: TYPE_NORMAL
- en: “I had never thought of search in terms of stacks and queues before,” Socks
    mused. “I wonder what other data structures I’m overlooking. I bet the Spell of
    Disentangled Ropes uses a few.”
  prefs: []
  type: TYPE_NORMAL
- en: Frank ignored his ramblings and continued backtracking to the exit. They moved
    fast, prioritizing escape over further exploration. Simple logic told Frank that
    their attacker was long gone. No one had tried to stop them from escaping, and,
    with the evidence burning, there was nothing for the criminals to gain by waiting
    around.
  prefs: []
  type: TYPE_NORMAL
- en: Within a few minutes he located the final door, and they rushed outside. A thin
    trickle of smoke followed them out. By now the flames would have consumed the
    stacks of paper, destroying any leads.
  prefs: []
  type: TYPE_NORMAL
- en: '**POLICE ALGORITHMS 101: STACKS AND QUEUES**'
  prefs: []
  type: TYPE_NORMAL
- en: '***Excerpt from Professor Drecker’s Lecture***'
  prefs: []
  type: TYPE_NORMAL
- en: The key to efficient algorithms is information. How we organize that information
    and the data structures we use can have a significant impact not only on the efficiency
    of the algorithm but also on how the algorithm actually functions. For a simple
    example of the importance of data structures, consider the breadth-first search
    and depth-first search from the previous lessons. While the algorithms are conceptually
    similar, whether we maintain our list of leads in either a stack or a queue significantly
    changes how the searches progress.
  prefs: []
  type: TYPE_NORMAL
- en: You want to be careful when choosing your data structures. Data structures should
    help enable the algorithm. Imagine what would happen if we stored a list of sorted
    numbers in a graph. Even if we maintain the sorted property, we can’t perform
    an efficient binary search over the data because graphs limit how we access the
    data. Unlike arrays, graphs don’t have indexes with which we can access the values.
    Instead, we are forced to perform a linear scan, moving from one node to the next
    via the graph’s edges.
  prefs: []
  type: TYPE_NORMAL
