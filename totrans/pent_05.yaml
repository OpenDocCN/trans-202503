- en: Chapter 3. Programming
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 章. 编程
- en: In this chapter we will look at some basic examples of computer programming.
    We will look at writing programs to automate various useful tasks in multiple
    programming languages. Even though we use prebuilt software for the majority of
    this book, it is useful to be able to create your own programs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看一些计算机编程的基本示例。我们将编写程序来自动化执行各种有用的任务，使用多种编程语言。尽管本书的大部分内容都使用了预构建的软件，但能够编写自己的程序仍然很有用。
- en: Bash Scripting
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bash 脚本编写
- en: In this section we’ll look at using Bash scripts to run several commands at
    once. *Bash scripts*, or *shell scripts*, are files that include multiple terminal
    commands to be run. Any command we can run in a terminal can be run in a script.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本节我们将介绍如何使用 Bash 脚本一次性运行多个命令。*Bash 脚本*，或称 *Shell 脚本*，是包含多个终端命令的文件，这些命令会依次执行。我们在终端中可以运行的任何命令，都可以在脚本中执行。
- en: Ping
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ping
- en: We’ll call our first script *pingscript.sh*. When it runs, this script will
    perform a *ping sweep* on our local network that sends Internet Control Message
    Protocol (ICMP) messages to remote systems to see if they respond.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把第一个脚本命名为 *pingscript.sh*。当它运行时，这个脚本会对我们本地网络进行 *ping 扫描*，向远程系统发送互联网控制消息协议（ICMP）消息，以查看它们是否响应。
- en: We’ll use the ping tool to determine which hosts are reachable on a network.
    (Although some hosts may not respond to ping requests and may be up despite not
    being “pingable,” a ping sweep is still a good place to start.) By default, we
    supply the IP address or hostname to ping. For example, to ping our Windows XP
    target, enter the bold code in [Example 3-1](ch03.xhtml#pinging_a_remote_host
    "Example 3-1. Pinging a remote host").
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 ping 工具来确定网络上哪些主机是可达的。（尽管有些主机可能不会响应 ping 请求，并且尽管它们无法“ping通”，它们仍然可能是正常运行的，但
    ping 扫描仍然是一个很好的起点。）默认情况下，我们提供 IP 地址或主机名进行 ping 测试。例如，要 ping 我们的 Windows XP 目标，请在
    [示例 3-1](ch03.xhtml#pinging_a_remote_host "示例 3-1. 远程主机 Ping 测试") 中输入粗体代码。
- en: Example 3-1. Pinging a remote host
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-1. 远程主机 Ping 测试
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can tell from the ping output that the Windows XP target is up and responding
    to ping probes because we received replies to our ICMP requests. (The trouble
    with ping is that it will keep running forever unless you stop it with ctrl-C.)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ping 输出中我们可以看出，Windows XP 目标已启动并响应了 ping 探测，因为我们收到了对 ICMP 请求的回复。（ping 的问题在于，除非你用
    ctrl-C 停止它，否则它会一直运行下去。）
- en: A Simple Bash Script
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个简单的 Bash 脚本
- en: Let’s begin writing a simple Bash script to ping hosts on the network. A good
    place to start is by adding some help information that tells your users how to
    run your script correctly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一个简单的 Bash 脚本来 ping 网络上的主机。一个好的起点是添加一些帮助信息，告诉用户如何正确运行你的脚本。
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first line of this script tells the terminal to use the Bash interpreter.
    The next two lines that begin with *echo* simply tell the user that our ping script
    will take a command line argument (network), telling the script which network
    to ping sweep (for example, 192.168.20). The `echo` command will simply print
    the text in quotes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本的第一行告诉终端使用 Bash 解释器。接下来的两行以 *echo* 开头，简单地告诉用户我们的 ping 脚本将接受一个命令行参数（网络），告诉脚本要进行
    ping 扫描的网络（例如，192.168.20）。`echo` 命令会将引号中的文本打印出来。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This script implies we are working with a class C network, where the first three
    octets of the IP address make up the network.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本意味着我们正在处理一个 C 类网络，其中 IP 地址的前三个八位字节组成网络部分。
- en: After creating the script, use `chmod` to make it executable so we can run it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建脚本后，使用 `chmod` 命令将其设为可执行文件，以便我们可以运行它。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Running Our Script
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行我们的脚本
- en: Previously, when entering Linux commands, we typed the command name at the prompt.
    The filesystem location of built-in Linux commands as well as pentest tools added
    to Kali Linux are part of our `PATH` environmental variable. The `PATH` variable
    tells Linux which directories to search for executable files. To see which directories
    are included in our `PATH`, enter **`echo $PATH`**.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，当输入 Linux 命令时，我们会在提示符下键入命令名。内置的 Linux 命令以及添加到 Kali Linux 中的渗透测试工具的文件系统位置是我们
    `PATH` 环境变量的一部分。`PATH` 变量告诉 Linux 在哪些目录中查找可执行文件。要查看 `PATH` 中包含了哪些目录，请输入 **`echo
    $PATH`**。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice in the output that the */root* directory is not listed. That means that
    we won’t be able to simply enter `pingscript.sh` to run our Bash script. Instead
    we’ll enter **`./pingscript.sh`** to tell the terminal to run the script from
    our current directory. As shown next, the script prints the usage information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意输出中没有列出 */root* 目录。这意味着我们不能简单地输入 `pingscript.sh` 来运行我们的 Bash 脚本。相反，我们需要输入
    **`./pingscript.sh`** 来告诉终端从当前目录运行脚本。如下所示，脚本会打印出使用信息。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding Functionality with if Statements
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用`if`语句增加功能
- en: Now let’s add in a bit more functionality with an `if` statement, as shown in
    [Example 3-2](ch03.xhtml#adding_an_if_statement "Example 3-2. Adding an if statement").
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过添加一个`if`语句来增加一些功能，如[示例 3-2](ch03.xhtml#adding_an_if_statement "示例 3-2.
    添加if语句")所示。
- en: Example 3-2. Adding an `if` statement
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-2. 添加`if`语句
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Typically a script needs to print usage information only if the user uses it
    incorrectly. In this case, the user needs to supply the network to scan as a command
    line argument. If the user fails to do so, we want to inform the user how to run
    our script correctly by printing the usage information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，脚本只有在用户使用不当时才需要打印使用信息。在这种情况下，用户需要提供网络扫描的命令行参数。如果用户没有这样做，我们希望通过打印使用信息来告知用户如何正确运行脚本。
- en: To accomplish this, we can use an `if` statement to see if a condition is met.
    By using an `if` statement, we can have our script echo the usage information
    only under certain conditions—for example, if the user does not supply a command
    line argument.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们可以使用`if`语句来判断条件是否满足。通过使用`if`语句，我们可以在特定条件下让脚本仅在某些情况下输出使用信息——例如，当用户未提供命令行参数时。
- en: 'The `if` statement is available in many programming languages, though the syntax
    varies from language to language. In Bash scripting, an `if` statement is used
    like this: `if [`*`condition`*`]`, where *`condition`* is the condition that must
    be met.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`语句在许多编程语言中都有使用，尽管语法在不同语言中有所不同。在Bash脚本中，`if`语句的使用方式如下：`if [`*`condition`*`]`，其中`*condition*`是必须满足的条件。'
- en: In the case of our script, we first see whether the first command line argument
    is null ❶. The symbol `$1` represents the first command line argument in a Bash
    script, and double equal signs (`==`) check for equality. After the `if` statement,
    we have a `then` statement ❷. Any commands between the `then` statement and the
    `fi` (`if` backward) ❸ are executed only if the conditional statement is true—in
    this case, when the first command line argument to the script is null.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的脚本中，我们首先检查第一个命令行参数是否为空 ❶。符号`$1`表示在Bash脚本中的第一个命令行参数，双等号（`==`）用于检查是否相等。`if`语句后面跟着一个`then`语句
    ❷。`then`语句和`fi`（`if`的倒序）之间的任何命令 ❸ 只有在条件语句为真时才会执行——在这种情况下，当脚本的第一个命令行参数为空时。
- en: When we run our new script with no command line argument, the `if` statement
    evaluates as true, because the first command line argument is indeed null, as
    shown here.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在没有命令行参数的情况下运行新的脚本时，`if`语句的结果为真，因为第一个命令行参数确实为空，如下所示。
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As expected we see usage information echoed to the screen.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，我们看到了使用信息被回显到屏幕上。
- en: A for Loop
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: If we run the script again with a command line argument, nothing happens. Now
    let’s add some functionality that is triggered when the user runs the script with
    the proper arguments, as shown in [Example 3-3](ch03.xhtml#adding_a_for_loop "Example 3-3. Adding
    a for loop").
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次使用命令行参数运行脚本，什么也不会发生。现在，让我们添加一些功能，当用户使用正确的参数运行脚本时会触发这些功能，如[示例 3-3](ch03.xhtml#adding_a_for_loop
    "示例 3-3. 添加for循环")所示。
- en: Example 3-3. Adding a `for` loop
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-3. 添加`for`循环
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After our `then` statement, we use an `else` statement ❶ to instruct the script
    to run code when the `if` statement evaluates as false—in this case, if the user
    supplies a command line argument. Because we want this script to ping all possible
    hosts on the local network, we need to loop through the numbers 1 through 254
    (the possibilities for the final octet of an IP version 4 address) and run the
    `ping` command against each of these possibilities.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在`then`语句后，我们使用`else`语句 ❶ 来指示脚本在`if`语句为假时执行代码——在这种情况下，如果用户提供了命令行参数。因为我们希望这个脚本能够对本地网络上的所有主机进行ping操作，所以我们需要遍历1到254之间的数字（IP版本4地址最后一个八位字节的可能性），并对这些可能性执行`ping`命令。
- en: An ideal way to run through sequential possibilities is with a `for` loop ❷.
    Our `for` loop, ``for x in `seq 1 254`; do``, tells the script to run the code
    that follows for each number from 1 to 254\. This will allow us to run one set
    of instructions 254 times rather than writing out code for each instance. We denote
    the end of a `for` loop with the instruction `done` ❸.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一种理想的方式是使用`for`循环 ❷ 来遍历顺序的可能性。我们的`for`循环`for x in \`seq 1 254\`; do`告诉脚本对从1到254的每个数字执行后续代码。这将允许我们运行一组指令254次，而不是为每个实例编写代码。我们用`done`
    ❸ 指令表示`for`循环的结束。
- en: Inside the `for` loop, we want to ping each of the IP addresses in the network.
    Using ping’s man page, we find that the `-c` option will allow us to limit the
    number of times we ping a host. We set `-c` to `1` so that each host will be pinged
    just once.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `for` 循环内部，我们希望对网络中的每个 IP 地址进行 ping 操作。通过查看 ping 的 man 页面，我们发现 `-c` 选项可以让我们限制每次
    ping 操作的次数。我们将 `-c` 设置为 `1`，这样每个主机只会被 ping 一次。
- en: To specify which host to ping, we want to concatenate the first command line
    argument (which denotes the first three octets) with the current iteration of
    the `for` loop. The full command to use is `ping -c 1 $1.$x`. Recall that the
    `$1` denotes the first command line argument, and `$x` is the current iteration
    of the `for` loop. The first time our `for` loop runs, it will ping 192.168.20.1,
    then 192.168.20.2, all the way to 192.168.20.254\. After iteration 254, our `for`
    loop finishes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了指定要 ping 的主机，我们需要将第一个命令行参数（表示前三个八位组）与 `for` 循环的当前迭代进行拼接。使用的完整命令是 `ping -c
    1 $1.$x`。回想一下，`$1` 表示第一个命令行参数，`$x` 是 `for` 循环的当前迭代。我们的 `for` 循环第一次运行时，它将 ping
    192.168.20.1，然后是 192.168.20.2，一直到 192.168.20.254。迭代到 254 后，`for` 循环结束。
- en: When we run our script with the first three octets of our IP address as the
    command line argument, the script pings each IP address in the network as shown
    in [Example 3-4](ch03.xhtml#running_the_ping_sweep_script "Example 3-4. Running
    the ping sweep script").
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 IP 地址前三个八位组作为命令行参数运行脚本时，脚本将对网络中的每个 IP 地址进行 ping 操作，如 [示例 3-4](ch03.xhtml#running_the_ping_sweep_script
    "示例 3-4. 运行 ping 扫描脚本") 中所示。
- en: Example 3-4. Running the ping sweep script
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-4. 运行 ping 扫描脚本
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Your results will vary based on the systems in your local network. Based on
    this output, I can tell that in my network, the host 192.168.20.1 is up, and I
    received an ICMP reply ❶. On the other hand, the host 192.168.20.3 is not up,
    so I received a host unreachable notification ❷.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你的结果会根据你本地网络中的系统有所不同。根据这个输出，我可以看出在我的网络中，主机 192.168.20.1 正在运行，并且我收到了一个 ICMP 响应
    ❶。另一方面，主机 192.168.20.3 未启动，因此我收到了主机不可达的通知 ❷。
- en: Streamlining the Results
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精简结果
- en: All this information printed to screen is not very nice to look at, and anyone
    who uses our script will need to sift through a lot of information to determine
    which hosts in the network are up. Let’s add some additional functionality to
    streamline our results.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些打印到屏幕上的信息看起来并不太好，任何使用我们脚本的人都需要筛选出大量的信息才能确定网络中哪些主机是正常的。让我们添加一些额外的功能来精简结果。
- en: In the previous chapter we covered `grep`, which searches for and matches specific
    patterns. Let’s use `grep` to filter the script’s output, as shown in [Example 3-5](ch03.xhtml#using_grep_to_filter_results
    "Example 3-5. Using grep to filter results").
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中我们介绍了 `grep`，它用于搜索和匹配特定的模式。让我们使用 `grep` 来过滤脚本的输出，如 [示例 3-5](ch03.xhtml#using_grep_to_filter_results
    "示例 3-5. 使用 grep 过滤结果") 中所示。
- en: Example 3-5. Using `grep` to filter results
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-5. 使用 `grep` 过滤结果
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here we look for all instances of the string `64 bytes` ❶, which occurs when
    an ICMP reply is received when pinging a host. If we run the script with this
    change, we see that only lines that include the text `64 bytes` are printed to
    the screen, as shown here.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们查找所有包含字符串 `64 bytes` ❶ 的实例，这个字符串出现在 ping 主机时收到 ICMP 响应的情况下。如果我们使用这个修改后的脚本运行，我们会看到只有包含
    `64 bytes` 文本的行被打印到屏幕上，如下所示。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We get indicators only for live hosts; hosts that do not answer are not printed
    to the screen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只获得活动主机的指示；那些没有回应的主机不会打印到屏幕上。
- en: But we can make this script even nicer to work with. The point of our ping sweep
    is to get a list of live hosts. By using the `cut` command discussed in [Chapter 2](ch02.xhtml
    "Chapter 2. Using Kali Linux"), we can print the IP addresses of only the live
    hosts, as shown in [Example 3-6](ch03.xhtml#using_cut_to_further_filter_results
    "Example 3-6. Using cut to further filter results").
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我们可以让这个脚本变得更易于使用。我们的 ping 扫描的目的是获取活动主机的列表。通过使用 [第 2 章](ch02.xhtml "第 2 章.
    使用 Kali Linux") 中讨论的 `cut` 命令，我们可以仅打印出活动主机的 IP 地址，如 [示例 3-6](ch03.xhtml#using_cut_to_further_filter_results
    "示例 3-6. 使用 cut 进一步过滤结果") 中所示。
- en: Example 3-6. Using `cut` to further filter results
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-6. 使用 `cut` 进一步过滤结果
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can use a space as the delimiter and grab the fourth field, our IP address,
    as shown at ❶.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用空格作为分隔符，并获取第四个字段，也就是我们的 IP 地址，如 ❶ 所示。
- en: Now we run the script again as shown here.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们再次运行脚本，如下所示。
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Unfortunately, we see a trailing colon at the end of each line. The results
    would be clear enough to a user, but if we want to use these results as input
    for any other programs, we need to delete the trailing colon. In this case, `sed`
    is the answer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们看到每一行的末尾都有一个冒号。对于用户来说，结果应该已经足够清晰，但如果我们想将这些结果作为输入传递给其他程序，我们需要删除末尾的冒号。在这种情况下，`sed`
    就是解决方案。
- en: The `sed` command that will delete the final character from each line is `sed
    's/.$//'`, as shown in [Example 3-7](ch03.xhtml#using_sed_to_drop_the_trailing_colon
    "Example 3-7. Using sed to drop the trailing colon").
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将删除每行末尾字符的 `sed` 命令是 `sed 's/.$//'`，如 [示例 3-7](ch03.xhtml#using_sed_to_drop_the_trailing_colon
    "示例 3-7. 使用 sed 删除末尾的冒号") 所示。
- en: Example 3-7. Using `sed` to drop the trailing colon
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-7. 使用 `sed` 删除末尾的冒号
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now when we run the script, everything looks perfect, as shown here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当我们运行脚本时，一切看起来都完美无缺，如下所示。
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Of course, if we want to output the results to a file instead of to the screen,
    we can use the `>>` operator, covered in [Chapter 2](ch02.xhtml "Chapter 2. Using
    Kali Linux"), to append each live IP address to a file. Try automating other tasks
    in Linux to practice your Bash scripting skills.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我们希望将结果输出到文件中，而不是显示在屏幕上，我们可以使用 `>>` 操作符，这在 [第 2 章](ch02.xhtml "第 2 章. 使用
    Kali Linux") 中有介绍，用来将每个存活的 IP 地址追加到文件中。尝试在 Linux 中自动化其他任务，以练习你的 Bash 脚本技能。
- en: Python Scripting
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 脚本
- en: Linux systems typically come with interpreters for other scripting languages
    such as Python and Perl. Interpreters for both languages are included in Kali
    Linux. In [Chapter 16](ch16.xhtml "Chapter 16. A Stack-Based Buffer Overflow in
    Linux") through [Chapter 19](ch19.xhtml "Chapter 19. Fuzzing, Porting Exploits,
    and Metasploit Modules"), we’ll use Python to write our own exploit code. For
    now, let’s write a simple Python script and run it in Kali Linux just to demonstrate
    the basics of Python scripting.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 系统通常预装有其他脚本语言的解释器，如 Python 和 Perl。Kali Linux 中包含了这两种语言的解释器。在 [第 16 章](ch16.xhtml
    "第 16 章. Linux 中的基于堆栈的缓冲区溢出") 到 [第 19 章](ch19.xhtml "第 19 章. 模糊测试、移植漏洞和 Metasploit
    模块") 中，我们将使用 Python 编写自己的漏洞利用代码。目前，让我们编写一个简单的 Python 脚本，并在 Kali Linux 中运行，以演示
    Python 脚本的基础知识。
- en: 'For this example we’ll do something similar to our first Netcat example in
    [Chapter 2](ch02.xhtml "Chapter 2. Using Kali Linux"): We’ll attach to a port
    on a system and see if the port is listening. A starting point for our script
    is shown here.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将做一些类似于 [第 2 章](ch02.xhtml "第 2 章. 使用 Kali Linux") 中我们第一个 Netcat 示例的事情：我们将连接到系统上的一个端口，并检查该端口是否在监听。我们脚本的起点如下所示。
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the previous section, the first line of our script told the terminal to use
    Bash to interpret the script. We do the same thing here, pointing to the Python
    interpreter installed on Kali Linux at */usr/bin/python* ❶.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们脚本的第一行告诉终端使用 Bash 来解释脚本。在这里我们做了相同的事情，指向 Kali Linux 上安装的 Python 解释器，路径为
    */usr/bin/python* ❶。
- en: We’ll begin by prompting the user for data and recording input into variables.
    The variables will store the input for use later in the script. To take input
    from the user, we can use the Python function `raw_input` ❷. We want to save our
    port as an integer, so we use a similar built-in Python function, `input`, at
    ❸. Now we ask the user to input an IP address and a port to test.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先提示用户输入数据，并将输入记录到变量中。变量将存储输入的数据，以便稍后在脚本中使用。为了从用户那里获取输入，我们可以使用 Python 函数
    `raw_input` ❷。我们希望将端口保存为整数，因此在 ❸ 处，我们使用了一个类似的内建 Python 函数 `input`。
- en: After saving the file, use `chmod` to make the script executable before running
    the script, as shown here.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，使用 `chmod` 命令使脚本可执行，然后运行脚本，如下所示。
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When you run the script, you’re prompted for an IP address and a port, as expected.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行脚本时，系统会提示你输入 IP 地址和端口，这是预期的行为。
- en: Now we will add in some functionality to allow us to use the user’s input to
    connect to the chosen system on the selected port to see if it is open ([Example 3-8](ch03.xhtml#adding_port-scanning_functionality
    "Example 3-8. Adding port-scanning functionality")).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一些功能，允许我们使用用户的输入连接到选择的系统的指定端口，以检查端口是否开放（[示例 3-8](ch03.xhtml#adding_port-scanning_functionality
    "示例 3-8. 添加端口扫描功能")）。
- en: Example 3-8. Adding port-scanning functionality
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-8. 添加端口扫描功能
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To perform networking tasks in Python, we can include a library called *socket*
    using the command `import socket` ❶. The socket library does the heavy lifting
    for setting up a network socket.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Python 中执行网络任务，我们可以使用命令 `import socket` ❶ 来引入一个名为 *socket* 的库。socket 库负责设置网络套接字的繁重工作。
- en: The syntax for creating a TCP network socket is `socket.socket(socket.AF_INET,
    socket.SOCK_STREAM)`. We set a variable equal to this network socket at ❷.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建TCP网络套接字的语法是`socket.socket(socket.AF_INET, socket.SOCK_STREAM)`。我们在❷处将一个变量设置为该网络套接字。
- en: Connecting to a Port
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到端口
- en: When creating a socket to connect to a remote port, the first candidate available
    from Python is the socket function `connect`. However, there is a better candidate
    for our purposes in the similar function, `connect_ex`. According to the Python
    documentation, `connect_ex` is like `connect` except that it returns an error
    code instead of raising an exception if the connection fails. If the connection
    succeeds, `connect_ex` will return the value `0`. Because we want to know whether
    the function can connect to the port, this return value seems ideal to feed into
    an `if` statement.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建一个连接到远程端口的套接字时，Python中的第一个可选函数是`connect`。然而，对于我们的目的，有一个更好的选择，即类似的`connect_ex`函数。根据Python文档，`connect_ex`与`connect`类似，区别在于如果连接失败，它会返回错误代码，而不是引发异常。如果连接成功，`connect_ex`将返回值`0`。由于我们希望知道函数是否能成功连接到端口，这个返回值似乎非常适合用于`if`语句。
- en: if Statements in Python
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python中的if语句
- en: When building `if` statements in Python, we enter `if` *`condition`*`:`. In
    Python the statements that are part of a conditional `or` loop are denoted with
    indentations rather than ending markers, as we saw in Bash scripting. We can instruct
    our `if` statement to evaluate the returned value of the connection of our TCP
    socket to the user-defined IP address and port with the command `if s.connect_ex((ip,
    port)):` ❸. If the connection succeeds, `connect_ex` will return `0`, which will
    be evaluated by the `if` statement as false. If the connection fails, `connect_ex`
    will return a positive integer, or true. Thus, if our `if` statement evaluates
    as true, it stands to reason that the port is closed, and we can present this
    to the user using the Python `print` command at ❹. And, as in the Bash scripting
    example, if `connect_ex` returns `0` at ❺, we can use an `else` statement (the
    syntax is `else:` in Python) to instead inform the user that the tested port is
    open.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中构建`if`语句时，我们输入`if` *`condition`*`:`。在Python中，属于条件`or`循环的语句通过缩进来表示，而不是像Bash脚本那样使用结束标记。我们可以指示`if`语句评估TCP套接字连接到用户定义的IP地址和端口的返回值，命令为`if
    s.connect_ex((ip, port)):` ❸。如果连接成功，`connect_ex`将返回`0`，这会被`if`语句评估为假。如果连接失败，`connect_ex`将返回一个正整数，或为真。因此，如果我们的`if`语句评估为真，可以推测端口已关闭，并且我们可以通过Python的`print`命令在❹处将结果展示给用户。与Bash脚本示例一样，如果`connect_ex`在❺处返回`0`，我们可以使用`else`语句（Python中的语法是`else:`）来通知用户测试的端口是开放的。
- en: Now, run the updated script to test whether TCP port 80 is running on the Windows
    XP target host as shown here.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行更新后的脚本测试目标主机上是否运行着TCP端口80，如下所示。
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: According to our script, port 80 is open. Now run the script again against port
    81.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的脚本，端口80是开放的。现在再次运行脚本，测试端口81。
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This time, the script reports that port 81 is closed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，脚本报告端口81已关闭。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will look at checking open ports in [Chapter 5](ch05.xhtml "Chapter 5. Information
    Gathering"), and we will return to Python scripting when we study exploit development.
    Kali Linux also has interpreters for the Perl and Ruby languages. We will learn
    a little bit of Ruby in [Chapter 19](ch19.xhtml "Chapter 19. Fuzzing, Porting
    Exploits, and Metasploit Modules"). It never hurts to know a little bit of multiple
    languages. If you are up for a challenge, see if you can re-create this script
    in Perl and Ruby.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第5章](ch05.xhtml "第5章. 信息收集")中了解如何检查开放端口，稍后在学习漏洞开发时会回到Python脚本。Kali Linux还支持Perl和Ruby语言的解释器。我们将在[第19章](ch19.xhtml
    "第19章. 模糊测试、端口移植与Metasploit模块")学习一点Ruby。掌握多种语言总是有益的。如果你有挑战精神，可以尝试用Perl和Ruby重新创建这个脚本。
- en: Writing and Compiling C Programs
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写和编译C程序
- en: Time for one more simple programming example, this time in the C programming
    language. Unlike scripting languages such as Bash and Python, C code must be compiled
    and translated into machine language that the CPU can understand before it is
    run.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个简单的编程示例，这次使用C编程语言。与Bash和Python等脚本语言不同，C代码必须先编译并转换成CPU能理解的机器语言，然后才能运行。
- en: Kali Linux includes the GNU Compiler Collection (GCC), which will allow us to
    compile C code to run on the system. Let’s create a simple C program that says
    hello to a command line argument, as shown in [Example 3-9](ch03.xhtml#quotation_markhello_worldquotation_mark
    "Example 3-9. “Hello World” C program").
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Kali Linux 包含 GNU 编译器集合（GCC），这将允许我们编译 C 代码并在系统上运行。让我们创建一个简单的 C 程序，向命令行参数问好，如
    [示例 3-9](ch03.xhtml#quotation_markhello_worldquotation_mark "示例 3-9. “Hello World”
    C 程序") 所示。
- en: Example 3-9. “Hello World” C program
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3-9. “Hello World” C 程序
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The syntax for C is a bit different from that of Python and Bash. Because our
    code will be compiled, we don’t need to tell the terminal which interpreter to
    use at the beginning of our code. First, as with our Python example, we import
    a C library. In this case we’ll import the *stdio* (short for standard input and
    output) library, which will allow us to accept input and print output to the terminal.
    In C, we import *stdio* with the command `#include <stdio.h>` ❶.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: C 的语法与 Python 和 Bash 有点不同。因为我们的代码将被编译，我们不需要告诉终端使用哪个解释器来执行代码。首先，像我们的 Python 示例一样，我们导入一个
    C 库。在这种情况下，我们将导入 *stdio*（标准输入输出的缩写）库，它将允许我们接受输入并将输出打印到终端。在 C 中，我们使用命令 `#include
    <stdio.h>` 来导入 *stdio* ❶。
- en: Every C program has a function called `main` ❷ that is run when the program
    starts. Our program will take a command line argument, so we pass an integer `argc`
    and a character array `argv` to `main`. `argc` is the argument count, and `argv`
    is the argument vector, which includes any command line arguments passed to the
    program. This is just standard syntax for C programs that accept command line
    arguments. (In C, the beginning and end of functions, loops, and so on are denoted
    by braces `{}`.)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 C 程序都有一个名为 `main` 的函数 ❷，它在程序启动时运行。我们的程序将接受一个命令行参数，因此我们将一个整数 `argc` 和一个字符数组
    `argv` 传递给 `main`。`argc` 是参数计数，`argv` 是参数向量，包含传递给程序的任何命令行参数。这是 C 程序接受命令行参数的标准语法。（在
    C 中，函数、循环等的开始和结束由大括号 `{}` 标记。）
- en: First, our program checks to see if a command line argument is present. The
    `argc` integer is the length of the argument array; if it is less than two (the
    program name itself and the command line argument), then a command line argument
    has not been given. We can use an `if` statement to check ❸.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们的程序检查是否提供了命令行参数。`argc` 整数是参数数组的长度；如果它小于二（即程序名称和命令行参数），则说明没有提供命令行参数。我们可以使用
    `if` 语句来进行检查 ❸。
- en: The syntax for `if` is also a little different in C. As with our Bash script,
    if a command line argument is not given, we can prompt the user with usage information
    ❹. The `printf` function allows us to write output to the terminal. Also note
    that statements in C are finished with a semicolon (`;`). Once we’re through with
    our program, we use a `return` statement ❺ to finish the function `main`. If a
    command line argument is supplied, our `else` statement instructs the program
    to say hello ❻. (Be sure to use braces to close all of your loops and the `main`
    function.)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`if` 语法在 C 中也有些不同。和 Bash 脚本一样，如果没有提供命令行参数，我们可以提示用户查看使用信息 ❹。`printf` 函数允许我们将输出写入终端。同时请注意，C
    语言中的语句以分号（`;`）结束。一旦程序执行完毕，我们使用 `return` 语句 ❺ 来结束 `main` 函数。如果提供了命令行参数，我们的 `else`
    语句指示程序向命令行参数问好 ❻。（确保使用大括号来闭合所有循环和 `main` 函数。）'
- en: Before we can run our program, we need to compile it with GCC as shown here.
    Save the program as *cprogram.c*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行程序之前，我们需要用 GCC 编译它，如下所示。将程序保存为 *cprogram.c*。
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Use the `-o` option to specify the name for the compiled program and feed your
    C code to GCC. Now run the program from your current directory. If the program
    is run with no arguments, you should see usage information as shown here.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `-o` 选项来指定编译后的程序名称，并将 C 代码传递给 GCC。现在从当前目录运行该程序。如果程序未带任何参数运行，你应该会看到如下的使用信息。
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If instead we pass it an argument, in this case our name, the program tells
    us hello.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们传递给它一个参数，在这种情况下是我们的名字，程序将向我们问好。
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will look at another C programming example in [Chapter 16](ch16.xhtml "Chapter 16. A
    Stack-Based Buffer Overflow in Linux"), where a little bit of sloppy C coding
    leads to a buffer overflow condition, which we will exploit.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 16 章](ch16.xhtml "第 16 章. Linux 中的基于栈的缓冲区溢出") 中查看另一个 C 编程示例，其中一些不规范的
    C 编程导致了缓冲区溢出条件，我们将对此进行利用。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we’ve looked at simple programs in three different languages.
    We looked at basic constructs, such as saving information in variables for later
    use. Additionally, we learned how to use conditionals, such as `if` statements,
    and iterations, such as `for` loops, to have the program make decisions based
    on the provided information. Though the syntax used varies from programming language
    to programming language, the ideas are the same.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们查看了三种不同语言中的简单程序。我们了解了基本构造，比如将信息保存在变量中以供后续使用。此外，我们还学习了如何使用条件语句，如`if`语句，以及迭代语句，如`for`循环，让程序根据提供的信息做出决策。尽管不同编程语言的语法各异，但思想是相同的。
