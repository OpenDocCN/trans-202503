- en: '**5'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MODELING ASSEMBLIES**
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At some point, you’ll get bored of modeling designs that consist of a single
    part. In this chapter, you’ll learn how to use Fusion 360 to create more complex
    and multipart mechanisms, called *assemblies,* which can be made up of two or
    more *components* (parts) or even multiple subassemblies. A car’s engine is an
    example of an assembly.
  prefs: []
  type: TYPE_NORMAL
- en: Fusion 360 offers a few ways to create assemblies. You can make and assemble
    multiple solid bodies within a single Fusion 360 file. You can also combine separate
    files to form an assembly. In this chapter, you’ll learn both methods as well
    as how to combine them.
  prefs: []
  type: TYPE_NORMAL
- en: The method you use depends on what you’re trying to accomplish, as well as what
    makes the most sense to you on an intuitive level. For some people, having each
    file consist of a single solid body (one component) seems like the most natural
    way to structure things. Others prefer to have a single file that contains all
    of the solid bodies—converted into components—for their assemblies. Using a single
    file may be simpler, but it provides less flexibility. Unless you have a good
    reason not to, keep components as separate files, because doing so makes the components
    easier to edit and helps with organization and collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you’ll also learn about reference geometry, an invaluable tool
    for creating complex models and the relationships within those models, which is
    necessary for advanced modeling.
  prefs: []
  type: TYPE_NORMAL
- en: '**Converting Solid Bodies into Components Within a Single File**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Components allow you to build assemblies in the same file as you build your
    bodies. Classically, most CAD software packages force a user to work on parts
    and assemblies in separate files; you’d choose between a part file or an assembly
    file. Fusion 360 does not explicitly differentiate between file types, so you
    can edit both parts and assemblies in the same file. Users create and manipulate
    bodies within components, which maintain their own coordinate systems and can
    be created in either the same file or separate files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some common user interface terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Joint** A physical relationship between components.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Component** Holds local coordinate system, bodies, features, and sketches.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Body** Holds geometry with a type of construction.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Feature** An action on a design and the parameters of that action.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parameter** A named value. Designs are recalculated when a parameter is altered.'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll begin by showing you how to create and assemble components within one Fusion
    360 file. Going this route has two primary benefits. First, since you’ll store
    all the parts in one file, they are easy to keep track of. Second, by splitting
    a single solid body into two, you can ensure an exact fit between components.
  prefs: []
  type: TYPE_NORMAL
- en: To learn this technique, you’ll model a box with a lid, which together form
    an assembly. Begin by opening a new file and modeling a rectangular prism that
    is 100 mm wide, 75 mm deep, and 50 mm tall. For a little panache, go ahead and
    add 5 mm fillets to all of the edges except the bottom four (see [Figure 5-1](ch05.xhtml#ch05fig1)).
  prefs: []
  type: TYPE_NORMAL
- en: To turn this object into a box and a lid, you need to divide it into two pieces.
    You can do this easily with the Split Body tool. First, though, you need a way
    to define where that split is going to happen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-1: Start by modeling a 100 mm × 75 mm × 50 mm rectangular prism.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Splitting an Object Using a Construction Plane***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: One way to tell the Split Body tool where to cut is to sketch a simple line
    across the front or side face. This method is particularly useful when the split
    isn’t a straight line. You could, for instance, split a model along an arc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we just want a simple straight cut, we’ll use a faster method: cutting
    along a *construction plane*. Construction planes, axes, and points are all examples
    of reference geometry. (Reference geometry is used during the modeling process
    as a guide, but it isn’t a physical part of the model.) You might use a construction
    plane to mirror a feature from one side of the model to the other, or you might
    use a construction axis as the axis of revolution for a Revolve feature.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you’ll create a construction plane, which tells the Split Body
    tool where to divide the solid body. Choose **Offset Plane** from the Construct
    drop-down menu. The Offset Plane tool creates a construction plane parallel to
    an existing plane of your choosing. In the “plane” box, select the top face of
    the box. Next, in the “distance” box of the drop-down menu, decide how far the
    new plane should be from the old plane. A positive value creates the new plane
    above the original one, whereas a negative value creates it below. For our purposes,
    enter **–15.00 mm**, as shown in [Figure 5-2](ch05.xhtml#ch05fig2).
  prefs: []
  type: TYPE_NORMAL
- en: Now you have everything you need to divide the model into two solid bodies.
    Select the **Split Body** tool from the Modify drop-down menu. When the tool asks
    you which body to split, you can click anywhere on the model. It will also ask
    what to use as the splitting tool, or the place where you want to separate the
    model. In this case, the splitting tool is the construction plane you just created
    (but it could also be a sketch or other reference). Select the construction plane
    and then finish the split, as shown in [Figure 5-3](ch05.xhtml#ch05fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-2: Use Offset Plane to create a construction plane 15 mm below the
    top face.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-3: The Split Body tool uses a reference to divide a model into multiple
    solid bodies.*'
  prefs: []
  type: TYPE_NORMAL
- en: Your model now consists of two separate solid bodies (one for the box and one
    for the lid). You no longer need the reference plane, so you can hide it by clicking
    the corresponding light bulb icon in the **Construction** section of the Component
    Browser (on the left). However, *do not* delete the construction plane because
    the Split Body feature is based on it. If the plane were deleted, any feature
    that depends on it would be invalidated, including the split body you just made.
  prefs: []
  type: TYPE_NORMAL
- en: '***Creating Components***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although the two bodies in our model are split, they’re not yet defined as components.
    To convert all of the bodies into components at once (see [Figure 5-4](ch05.xhtml#ch05fig4)),
    right-click **Bodies** in the Component Browser and choose **Create Components
    from Bodies**. You could also do this by right-clicking each body individually.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-4: All of the bodies can be converted into components in a single
    step.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Component Browser should now have two components listed: the lid and the
    box. If you click the drop-down arrow for each of these, you should see that each
    component now has its own origin, planes, and bodies. You’ve effectively put two
    independent models within the same file. You can move each individually while
    still retaining the original coordinates of each.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Hollowing Out the Box and Creating a Lip***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Right now, each component is solid, but to store anything in the box, you need
    to make it hollow, as shown in [Figure 5-5](ch05.xhtml#ch05fig5). You already
    know how to do this with the Shell tool, so give the box a shell thickness of
    3 mm and the lid a thickness of 6 mm. To work on each component individually,
    hover over it in the Component Browser and click **Activate Component**. To edit
    both components at once, hover over the top level of the Component Browser and
    select Activate Component.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-5: Shell each Component to make them hollow.*'
  prefs: []
  type: TYPE_NORMAL
- en: The lid component should have a thicker shell than the box because you don’t
    want the lid to slide off when you close the box. To keep it from doing that,
    you’ll need to give the lid a lip that fits into the bottom box. Using a thicker
    shell provides extra material to make that lip. Activate the lid component and
    rotate it so you can see the inside, then create a sketch on the bottom face (where
    the lip will be). Next, offset the outside edge by 3.5 mm and extrude the *inside
    profile* by 2.5 mm, as shown in [Figure 5-6](ch05.xhtml#ch05fig6).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-6: A cross-section view showing the extruded lip on the lid component*'
  prefs: []
  type: TYPE_NORMAL
- en: You should leave a 0.5 mm gap between the edge of the lip and the box, because
    when you’re designing parts that mate together, it’s important to think about
    how they’ll actually fit in the real world. If these two parts were modeled to
    have zero gap, then the actual objects might fit together too tightly (or not
    at all). In engineering terms, the room you allow for some error is called *tolerance*.
    This 0.5 mm tolerance helps ensure that the components will fit together, even
    if they aren’t manufactured perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: How much tolerance to give your mating parts is a bit tricky. If you want the
    parts to fit together snugly, you might not give them any extra tolerance at all.
    If they need to be able to move freely, you might give them a lot. Determining
    the exact amount takes experience, trial and error, and knowledge of what you
    can expect from the fabrication techniques and materials used to make the part.
    High-quality machining can be very precise, so it’s usually safe to use a very
    tight tolerance in those cases. However, 3D printing is inherently imprecise (particularly
    hobbyist fused-filament fabrication printing), so loose tolerances are more appropriate
    there.
  prefs: []
  type: TYPE_NORMAL
- en: '***Defining Relationships***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When building assemblies, you’ll usually want to create relationships between
    the components. For example, when modeling a piston and a cylinder, you need to
    explicitly state that the piston is centered in the cylinder. You also need to
    specify its orientation, as well as the distance it can travel in the cylinder.
  prefs: []
  type: TYPE_NORMAL
- en: To define the box’s relationship to the lid, you’ll first need to *ground* one
    of the components. This should lock that component in space, allowing the other
    components to move in relation to it. Generally, you’ll ground whichever component
    you think of as “the base.” Right-click the box component and click **Ground**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you’ll use joints to define the motion of the lid in relation to the box.
    Joints either restrict or allow a certain kinds of movement; that piston in the
    cylinder from the previous example would use a cylindrical joint to allow movement
    along the central axis, but not perpendicular to it.
  prefs: []
  type: TYPE_NORMAL
- en: To allow our box to open and close, let’s keep the lid centered on the box while
    still allowing it to move up and down.
  prefs: []
  type: TYPE_NORMAL
- en: From the Assemble drop-down menu, select **Joint** (or use the **J** shortcut).
    Next, choose a component and a reference point on that component. Usually, this
    is part of a face or a centerpoint. Select the centerpoint of the side faces of
    each component (see [Figure 5-7](ch05.xhtml#ch05fig7)). Then, click **Flip**,
    if necessary, and choose **Planar** as the **Motion Type**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-7: Add a planar joint to the side faces of the components.*'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat this process to add a second planar joint to the front faces. Now you
    should be able to move the lid freely up and down, but not side to side or front
    to back.
  prefs: []
  type: TYPE_NORMAL
- en: Your first assembly is finished! If you want, you can export each component
    as an STL file and 3D print your own box using this model.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling Components from External Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While you could model and assemble all of your parts in a single file, as you
    did for the box, it can be useful to separate the components into their own files.
    Here are a few reasons why:'
  prefs: []
  type: TYPE_NORMAL
- en: When you’re working with very large assemblies consisting of many parts, it
    makes keeping the components organized easier and keeps file sizes manageable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows you to collaborate with others so that each member of an engineering
    team could work on a different component of the assembly simultaneously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most assemblies have duplicate parts. If you were designing a car, you wouldn’t
    want to model every M5X100 machine screw individually. Instead, you’d want to
    model one screw and drop as many instances as you needed into your final assembly
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn how to create assemblies from separate files, we’ll create a door hinge
    with two identical sides. You’ll create a single model and import two copies of
    it into an assembly file to complete the hinge.
  prefs: []
  type: TYPE_NORMAL
- en: '***Making the Hinge Barrel and Mount***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s start by making the barrel of the hinge. This should be a hollow cylinder,
    with the sketch on the top plane, extruded symmetrically. Make the outer diameter
    (OD) 12 mm, the inner diameter (ID) 8 mm, and the total length 100 mm, as shown
    in [Figure 5-8](ch05.xhtml#ch05fig8).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-8: Extrude a cylinder with the following dimensions: 12 mm OD, 8
    mm ID, 100 mm long.*'
  prefs: []
  type: TYPE_NORMAL
- en: Next, create a flat face for the hinge mount. Start by sketching on one of the
    end faces of the cylinder. Move away from the cylinder and complete three sides
    of a rectangle that is 56 mm long and 3 mm wide.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to trim the overlapping lines—they won’t hurt anything if you
    leave them like you see in [Figure 5-9](ch05.xhtml#ch05fig9). If we were actually
    producing this hinge, we’d want to give it some space for tolerance. But, for
    the sake of simplicity, you can just align one line with the centerpoint of the
    barrel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-9: Sketch a plane to create a flat face for the hinge mount. Overlapping
    lines aren’t a problem; you can just extrude the closed loop profile.*'
  prefs: []
  type: TYPE_NORMAL
- en: Once your sketch looks like [Figure 5-9](ch05.xhtml#ch05fig9), select the rectangular
    region and extrude it to the other end of the barrel. Your model should now look
    like [Figure 5-10](ch05.xhtml#ch05fig10). The next step is to cut out portions
    of the barrel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-10: Extrude the rest of the hinge body.*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Cutting Out the Barrel and Changing Parameters***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll put two gaps in the cylinder so the halves will fit together like puzzle
    pieces. Each gap must be 25 mm long (the length of the cylinder divided by 4),
    12 mm wide (the OD of the barrel), and 50 mm from the flat edge opposite the barrel.
    Draw and extrude two rectangles with those dimensions to divide the barrel into
    four equal sections, as shown in [Figure 5-11](ch05.xhtml#ch05fig11).
  prefs: []
  type: TYPE_NORMAL
- en: But wait! What happens if the original dimensions change? If, for instance,
    you alter the diameter of the barrel, the sections you just created will no longer
    be to scale. This is where you can take advantage of the power of parametric modeling
    by reusing the dimensions you’ve already specified.
  prefs: []
  type: TYPE_NORMAL
- en: Go back and edit the sketch you just created. Then, open up the **Change Parameters**
    dialog from the Modify drop-down menu. Under the Model Parameters tab, shown in
    [Figure 5-12](ch05.xhtml#ch05fig12), you’ll see entries for each feature you’ve
    created. If you expand those entries, you’ll be given a list of all the dimensions
    used to create that feature, as well as the names of those dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-11: Divide the barrel into four 25 mm sections.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-12: The Parameters dialog lists all the dimensions you’ve used in
    earlier features.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now you can change certain dimensions so they reference previous features by
    replacing the numerical entries with values that depend on the dimensions of other
    objects. For example, because the length of the barrel is named “d3,” you can
    change the expression for the length of the rectangles to “d3 / 4” to make sure
    they will always measure a quarter of the barrel’s length.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your hinge should look like the one shown in [Figure 5-13](ch05.xhtml#ch05fig13).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-13: The solid should look like this after your cuts are extruded.*'
  prefs: []
  type: TYPE_NORMAL
- en: Now we just need to create the mounting holes.
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Hole Tool***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The final step of the modeling process is to give the flat plate some mounting
    holes, where the screws will go. This step isn’t actually important to this tutorial,
    but it’s good to get into the habit of adding details.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could put these holes in however you like, but I’d recommend a method we
    haven’t used yet: the *Hole* tool. For the hinge to work, the screw heads need
    to be flush with the surface of the flat plate. This means you’ll have to make
    countersunk holes. Add some sketch points where you think the holes should be
    on the *inside* face of the hinge. Use constraints or parameter references to
    place these. This way, their placements will update if the hinge dimensions change.'
  prefs: []
  type: TYPE_NORMAL
- en: Finish the sketch and choose the Hole tool from the Create drop-down menu. Select
    each of the points you just sketched. Change the **Hole Type** setting to **Countersink**
    and then explore the rest of the settings to get a feel for what they do. Finalize
    the feature when you think it looks like the mounting holes on a hinge should
    (see [Figure 5-14](ch05.xhtml#ch05fig14)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-14: The final product should look roughly like this.*'
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and save this file as something like *HingeHalf*. Then open a new document
    and save it as *HingeAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re in the blank *HingeAssembly* file, open the Project Browser using
    the Data Panel button at the top left of the Fusion 360 window. Right-click the
    *HingeHalf* model and choose the **Insert into Current Design** option. Click
    **OK** in the dialog to place the component anywhere within the *HingeAssembly*
    document’s space. Then repeat this process to insert another copy of the *HingeHalf*
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can assemble the halves, just like you did in the first part of this
    chapter. Choose one of the halves to be the ground model and use joints to put
    the two together, as shown in [Figure 5-15](ch05.xhtml#ch05fig15). One joint should
    be cylindrical and the other planar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-15: Add joints to the assembly so the hinge can open and close.*'
  prefs: []
  type: TYPE_NORMAL
- en: This should allow your hinge to open and close while staying together.
  prefs: []
  type: TYPE_NORMAL
- en: '**Combining Assembly Methods**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, both ways of creating an assembly have their benefits. Working
    within a single file makes it possible to derive several parts from a single base
    object, whereas creating an assembly from multiple files can save you the trouble
    of crafting duplicate objects. You can also combine these methods to get the best
    of both worlds. Let’s try this out now by adding a pin to the hinge assembly within
    the *HingeAssembly* file.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the top level of *HingeAssembly* is active in the Component Browser
    and then create a new component by right-clicking *HingeAssembly* (see [Figure
    5-16](ch05.xhtml#ch05fig16)).
  prefs: []
  type: TYPE_NORMAL
- en: Model the pin using the tools you’ve learned so far. Once it’s finished, reactivate
    the top level of *HingeAssembly* to add joints for the pin so that it looks like
    the model shown in [Figure 5-16](ch05.xhtml#ch05fig16).
  prefs: []
  type: TYPE_NORMAL
- en: '![Images](Images/05fig16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-16: Add a pin to the assembly within the* HingeAssembly *file.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know how to build assemblies, your projects are no longer constrained
    to a single part. You can create complex models that contain as many parts as
    you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapters, instead of telling you which method to use to build
    assemblies, I’ll leave it up to you to choose how best to execute the project.
  prefs: []
  type: TYPE_NORMAL
