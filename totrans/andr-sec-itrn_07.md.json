["```\nservice keystore /system/bin/keystore /data/misc/keystore\n    class main\n    user keystore\n    group keystore drmrpc\n```", "```\n# **ls -la /data/misc/keystore/user_0**\n-rw------- keystore keystore       84 .masterkey\n-rw------- keystore keystore      980 1000_CACERT_cacert\n-rw------- keystore keystore      756 1000_USRCERT_test\n-rw------- keystore keystore      884 1000_USRPKEY_test\n-rw------- keystore keystore      724 10019_USRCERT_myKey\n-rw------- keystore keystore      724 10019_USRCERT_myKey1\n```", "```\n#define KM_MAGIC_NUM     (0x4B4D4B42)    /* \"KMKB\" Key Master Key Blob in hex */\n#define KM_KEY_SIZE_MAX  (512)           /* 4096 bits */\n#define KM_IV_LENGTH     (16)           ➊/* AES128 CBC IV */\n#define KM_HMAC_LENGTH   (32)           ➋/* SHA2 will be used for HMAC */\n\nstruct qcom_km_key_blob {\n  uint32_t magic_num;\n  uint32_t version_num;\n  uint8_t modulus[KM_KEY_SIZE_MAX];➌\n  uint32_t modulus_size;\n  uint8_t public_exponent[KM_KEY_SIZE_MAX];➍\n  uint32_t public_exponent_size;\n  uint8_t iv[KM_IV_LENGTH];➎\n  uint8_t encrypted_private_exponent[KM_KEY_SIZE_MAX];➏\n  uint32_t encrypted_private_exponent_size;\n  uint8_t hmac[KM_HMAC_LENGTH];➐\n};\n```", "```\nIntent intent = KeyChain.createInstallIntent();\nbyte[] p12 = readFile(\"keystore-test.pfx\");\nintent.putExtra(KeyChain.EXTRA_PKCS12, p12);\nstartActivity(intent);\n```", "```\npublic class KeystoreTest extends Activity implements OnClickListener,\nKeyChainAliasCallback {\n   @Override\n   public void onClick(View v) {\n       KeyChain.choosePrivateKeyAlias(➊this, ➋(KeyChainAliasCallback)this,\n          ➌new String[] { \"RSA\" }, ➍null, ➎null, ➏-1, ➐null);\n   }\n   @Override\n   public void alias(final String alias) {➑\n       Log.d(TAG, \"Thread: \" + Thread.currentThread().getName());\n       Log.d(TAG, \"selected alias: \" + alias);\n   }\n}\n```", "```\nPrivateKey pk =  KeyChain.getPrivateKey(context, alias);➊\nX509Certificate[] chain =  KeyChain.getCertificateChain(context, alias);➋\n```", "```\nIntent intent = KeyChain.createInstallIntent();\nintent.putExtra(KeyChain.EXTRA_CERTIFICATE, cert);\nstartActivity(intent);\n```", "```\n# **sqlite3 grants.db**\nsqlite> .schema\n.schema\nCREATE TABLE android_metadata (locale TEXT);\nCREATE TABLE grants (alias STRING NOT NULL, uid INTEGER NOT NULL, UNIQUE (alias,uid));\nsqlite> select * from grants;\nselect * from grants;\n➊test|10044➋\n➌key1|10044\n```", "```\n// generate a key pair\nCalendar notBefore = Calendar.getInstance()\nCalendar notAfter = Calendar.getInstance(); notAfter.add(1, Calendar.YEAR);\nKeyPairGeneratorSpec spec = new KeyPairGeneratorSpec.Builder(ctx) .setAlias(\"key1\")\n                .setKeyType(\"RSA\")\n                .setKeySize(2048)\n                .setSubject(new X500Principal(\"CN=test\"))\n                .setSerialNumber(BigInteger.ONE).setStartDate(notBefore.getTime())\n                .setEndDate(notAfter.getTime()).build();➊\nKeyPairGenerator kpGenerator = KeyPairGenerator.getInstance(\"RSA\",\n                              \"AndroidKeyStore\");\nkpGenerator.initialize(spec);➋\nKeyPair kp = kpGenerator.generateKeyPair();➌\n// in another part of the app, access the keys\nKeyStore ks = KeyStore.getInstance(\"AndroidKeyStore\");\nks.load(null);\nKeyStore.PrivateKeyEntry keyEntry = (KeyStore.PrivateKeyEntry)keyStore.getEntry(\"key1\", null);➍\nRSAPublic pubKey = (RSAPublicKey)keyEntry.getCertificate().getPublicKey();\nRSAPrivateKey privKey = (RSAPrivateKey) keyEntry.getPrivateKey();\n```"]