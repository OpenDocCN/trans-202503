- en: 'Chapter 3. Numbers and Variables: Python Does the Math'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 数字与变量：Python做数学运算
- en: We’ve used Python to do really fun things, like make colorful pictures in just
    a few lines of code, but our programs have been limited. We just ran them and
    watched them make pictures. What if we wanted to *interact* with our Python programs?
    In this chapter, we’ll learn how to have Python ask the user’s name and even offer
    to do the user’s math homework!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用Python做了一些非常有趣的事情，例如只用几行代码就画出了五彩斑斓的图画，但我们的程序还是有些局限。我们只是运行它们，观看它们画图。如果我们想要和我们的Python程序*互动*呢？在本章中，我们将学习如何让Python询问用户的名字，甚至提供做用户数学作业的帮助！
- en: 'Variables: Where We Keep Our Stuff'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量：我们存放东西的地方
- en: 'In [Chapter 1](ch01.html "Chapter 1. Python Basics: Get to Know Your Environment")
    and [Chapter 2](ch02.html "Chapter 2. Turtle Graphics: Drawing with Python"),
    we used a few *variables* (you might remember `name` from our first program in
    [Chapter 1](ch01.html "Chapter 1. Python Basics: Get to Know Your Environment")
    or `x` and `sides` from [Chapter 2](ch02.html "Chapter 2. Turtle Graphics: Drawing
    with Python")). Now let’s look at what variables really are and how they work.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](ch01.html "第1章. Python基础：了解你的环境")和[第2章](ch02.html "第2章. 海龟图形：用Python绘图")中，我们使用了一些*变量*（你可能还记得在[第1章](ch01.html
    "第1章. Python基础：了解你的环境")中的`name`或在[第2章](ch02.html "第2章. 海龟图形：用Python绘图")中的`x`和`sides`）。现在让我们看看变量到底是什么以及它们是如何工作的。
- en: 'A *variable* is something you want the computer to remember while your program
    is running. When Python “remembers” something, it’s storing that information in
    the computer’s memory. Python can remember *values* of several types, including
    number values (like `7`, `42`, or even `98.6`) and strings (letters, symbols,
    words, sentences, or anything you can type on the keyboard and then some). In
    Python, as in most modern programming languages, we [*assign*](apd.html#gloss01_007)
    a value to a variable with the equal sign (`=`). An assignment like `x = 7` tells
    the computer to remember the number 7 and give it back to us anytime we call out
    `x`. We also use the equal sign to assign a string of keyboard characters to a
    variable; we just have to remember to put quotation marks (`"`) around the string,
    like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*变量*是你希望计算机在程序运行时记住的内容。当Python“记住”某个东西时，它会将该信息存储在计算机的内存中。Python可以记住多种类型的*值*，包括数字值（如`7`、`42`，甚至是`98.6`）和字符串（字母、符号、单词、句子或任何你能在键盘上输入的内容，甚至更多）。在Python中，就像大多数现代编程语言一样，我们使用[*赋值*](apd.html#gloss01_007)操作符（`=`）将一个值赋给变量。像`x
    = 7`这样的赋值操作告诉计算机记住数字7，并在我们每次调用`x`时将它还给我们。我们也可以使用等号将一串键盘字符赋给变量；只需要记得在字符串周围加上引号（`"`)就可以了，例如：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we assign the value `"Bryson"` to the variable `my_name`. The quotation
    marks around `"Bryson"` tell us that it is a string.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将值`"Bryson"`赋给变量`my_name`。围绕`"Bryson"`的引号告诉我们它是一个字符串。
- en: Whenever you assign a value to a variable, you write the name of the variable
    first, to the left of the equal sign, and then write the value to the right of
    the equal sign. We name variables something simple that describes their contents
    (like `my_name` when I’m storing my name) so we can easily remember them and use
    them in our programs. There are a few rules to keep in mind as we make up names
    for variables.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你将一个值赋给变量时，首先写出变量的名字，位于等号左侧，然后写出值，位于等号右侧。我们为变量取一个简单的名字，描述它的内容（比如当我存储我的名字时使用`my_name`），这样我们就能轻松记住它们并在程序中使用它们。在命名变量时，有几个规则需要牢记。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188785.png.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188785.png.jpg)'
- en: First, we always begin variable names with a letter. Second, the rest of the
    characters in the variable name must be letters, numbers, or the underscore symbol
    ( `_` ); that means you can’t have a space inside a variable name (for example,
    `my name` will give you a syntax error because Python thinks you’ve listed two
    variables separated by a space). Third, variable names in Python are *case sensitive*;
    that means that if we use all *lowercase* letters in a variable name (like `abc`),
    then we can only use the value stored in the variable if we type the variable
    name exactly the same way, with the same capitalization. For example, to use the
    value in `abc`, we have to write `abc`; we can’t use *uppercase* letters like
    `ABC`. So `My_Name` is not the same as `my_name`, and `MY_NAME` is a different
    variable name altogether. In this book, we’ll use all lowercase letters in our
    variable names, separating words with the `_` symbol.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们总是以字母开始变量名。其次，变量名中的其余字符必须是字母、数字或下划线符号（`_`）；这意味着变量名中不能有空格（例如，`my name`会导致语法错误，因为Python认为你列出了两个变量，中间用空格分隔）。第三，Python中的变量名是*区分大小写*的；这意味着，如果我们在变量名中使用全小写字母（如`abc`），那么只有在完全按相同的大小写方式输入变量名时，才能使用该变量存储的值。例如，要使用`abc`中的值，我们必须写成`abc`；不能使用像`ABC`这样的*大写*字母。所以，`My_Name`与`my_name`不同，而`MY_NAME`是完全不同的变量名。在本书中，我们将在变量名中使用全小写字母，并用`_`符号分隔单词。
- en: Let’s try a program using some variables. Type the following code in a new IDLE
    window and save it as *ThankYou.py*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一个使用变量的程序。在新的IDLE窗口中输入以下代码，并将其保存为*ThankYou.py*。
- en: ThankYou.py
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ThankYou.py
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When we run this program, we’re telling the computer to remember that `my_name`
    is `"Bryson"` and that `my_age` is `43`. We then ask the user (the person running
    the program) to enter their name and age, and we tell the computer to remember
    these as the variables `your_name` and `your_age`. We’re using Python’s `input()`
    function to tell Python that we want the user to enter (or [*input*](apd.html#gloss01_028))
    something with the keyboard. *Input* is what we call information that’s entered
    into a program while it’s running—in this case, the user’s name and age. The part
    in quotes inside the parentheses, `("What is your name? ")`, is called the *prompt*
    because it prompts the user, or asks them a question requiring their input.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个程序时，我们告诉计算机记住`my_name`是`"Bryson"`，并且`my_age`是`43`。然后我们要求用户（运行程序的人）输入他们的名字和年龄，并告诉计算机将这些作为`your_name`和`your_age`变量来记住。我们使用Python的`input()`函数告诉Python我们希望用户通过键盘输入（或[*input*](apd.html#gloss01_028)）某些内容。*Input*是我们称之为在程序运行时输入的信息——在这种情况下，就是用户的名字和年龄。括号内引号中的部分`("What
    is your name? ")`被称为*提示*，因为它提示用户，或者询问他们一个需要输入的的问题。
- en: In the last three lines, we tell the computer to print out the value we stored
    in `my_name` and the other three variables. We even use `your_name` twice, and
    the computer remembers everything correctly, including the parts the user typed
    as input.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后三行中，我们告诉计算机打印出我们在`my_name`和其他三个变量中存储的值。我们甚至使用了`your_name`两次，计算机能够正确记住所有内容，包括用户输入的部分。
- en: This program remembers my name and age, asks the user for theirs, and prints
    a nice message to them, as shown in [Figure 3-1](ch03.html#program_with_four_variables_and_the_outp
    "Figure 3-1. A program with four variables and the output it creates").
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序记住了我的名字和年龄，询问用户他们的名字和年龄，并向他们打印一个友好的信息，如[图3-1](ch03.html#program_with_four_variables_and_the_outp
    "图3-1. 一个包含四个变量及其输出的程序")所示。
- en: '![A program with four variables and the output it creates](httpatomoreillycomsourcenostarchimages2188789.png.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![一个包含四个变量及其输出的程序](httpatomoreillycomsourcenostarchimages2188789.png.jpg)'
- en: Figure 3-1. A program with four variables and the output it creates
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-1. 一个包含四个变量及其输出的程序
- en: Numbers and Math in Python
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的数字和数学运算
- en: The computer is great at remembering values. We can use the same variable hundreds
    or thousands of times in the same program, and the computer will always give us
    the right value as long as we’ve programmed it correctly. Computers are also great
    at performing calculations (addition, subtraction, and so on). Your computer is
    able to perform over *one billion* (1,000,000,000, or a thousand million) calculations
    every *second*!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机非常擅长记住值。我们可以在同一个程序中使用相同的变量数百次或数千次，只要我们编程正确，计算机总是能给我们正确的值。计算机在执行计算（加法、减法等）方面也很擅长。你的计算机每秒钟能够执行超过*十亿*（1,000,000,000，或十亿）次计算！
- en: That’s much faster than we can compute numbers in our heads; although we’re
    still better than computers at some tasks, fast math is a contest the computer
    will win every time. Python gives you access to that mathematical computing power
    with two main types of numbers, and it also lets you use a whole set of symbols
    to do math with those numbers, from `+` to `-` and beyond.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这比我们用脑袋算数字要快得多；虽然在某些任务上我们仍然比计算机更强，但快速的数学运算是计算机每次都能赢的比赛。Python 让你能够利用这种数学计算能力，它提供了两种主要的数字类型，并且让你使用一整套符号来进行数学运算，从
    `+` 到 `-` 等等。
- en: Python Numbers
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 数字
- en: The two primary types of numbers in Python are called *integers* (whole numbers,
    including negatives, like `7`, `-9`, or `0`) and *floatingpoint numbers* (numbers
    with decimals, like `1.0`, `2.5`, `0.999`, or `3.14159265`). There are two additional
    number types that we won’t use much in this book. The first is *Booleans*, which
    hold true or false values (sort of like the answers on a “true or false” test
    at school), and the second is *complex numbers*, which hold even imaginary number
    values (this might excite you if you know some advanced algebra, but we’re keeping
    it real here—pun intended).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的两种主要数字类型分别是 *整数*（包括负数的整数，例如 `7`、`-9` 或 `0`）和 *浮动点数*（有小数的数字，例如 `1.0`、`2.5`、`0.999`
    或 `3.14159265`）。还有两种额外的数字类型，在本书中我们不会多用到。第一种是 *布尔值*，它表示真假值（有点像学校里“对错”测试的答案），第二种是
    *复数*，它表示包含虚数的数值（如果你学过一些高级代数，可能会对它感到兴奋，但我们现在保持实际——开个玩笑）。
- en: 'Integers, or whole numbers, are useful for counting (our variable `x` in [Chapter 2](ch02.html
    "Chapter 2. Turtle Graphics: Drawing with Python") counted the number of lines
    as we drew the spiral) and for basic math (`2 + 2 = 4`). We usually state our
    age in whole numbers, so when you say you’re 5 or 16 or 42, you’re using an integer.
    When you count to 10, you’re using integers.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 整数或自然数对于计数很有用（在 [第 2 章](ch02.html "第 2 章. 乌龟图形：用 Python 画图")中，我们的变量 `x` 就是用来计数我们画出的螺旋线的数量）以及进行基础的数学运算（`2
    + 2 = 4`）。我们通常用整数表示我们的年龄，所以当你说自己 5 岁、16 岁或 42 岁时，你使用的就是整数。当你数到 10 时，你也在使用整数。
- en: 'Floating-point, or decimal, numbers are great when we want fractions, like
    3.5 miles, 1.25 pizzas, or $25.97\. Of course, in Python, we don’t include the
    units (miles, pizzas, dollars), just the number with the decimal. So if we want
    to store a variable with the cost of our pizza (`cost_of_pizza`), we might assign
    it as follows: `cost_of_pizza = 25.97`. We’ll just have to remember that the units
    we’re using there are dollars, euros, or some other currency.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动点数或小数在我们需要表示分数时非常有用，例如 3.5 英里、1.25 个比萨饼或 25.97 美元。当然，在 Python 中，我们不包含单位（英里、比萨饼、美元），只有带小数的数字。所以如果我们想存储一个变量来表示我们的比萨饼费用（`cost_of_pizza`），我们可能会这样赋值：`cost_of_pizza
    = 25.97`。我们只需要记住，我们在这里使用的单位是美元、欧元或其他货币。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188793.png.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188793.png.jpg)'
- en: Python Operators
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 运算符
- en: The math symbols like `+` (plus) and `-` (minus) are called [*operators*](apd.html#gloss01_036)
    because they operate, or perform calculations, on the numbers in our equation.
    When we say “4 + 2” aloud or enter it on our calculator, we want to perform addition
    on the numbers 4 and 2 to get their sum, 6.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 像 `+`（加）和 `-`（减）这样的数学符号被称为 [*运算符*](apd.html#gloss01_036)，因为它们对我们方程中的数字进行操作或计算。当我们大声说出“4
    + 2”或在计算器中输入时，我们希望对数字 4 和 2 进行加法运算，得到它们的和 6。
- en: Python uses most of the same operators that you would use in a math class, including
    `+`, `-`, and parentheses, `()`, as shown in [Table 3-1](ch03.html#basic_math_operators_in_python
    "Table 3-1. Basic Math Operators in Python"). However, some operators are different
    from what you may have used in school, like the multiplication operator (the asterisk,
    `*`, instead of `×`) and the division operator (the forward slash, `/`, instead
    of `÷`). We’ll get to know these operators better in this section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用的运算符大多数与你在数学课上使用的相同，包括 `+`、`-` 和括号 `()`，如 [表 3-1](ch03.html#basic_math_operators_in_python
    "表 3-1. Python 中的基本数学运算符") 所示。然而，一些运算符与学校里学到的不同，比如乘法运算符（星号 `*`，而不是 `×`）和除法运算符（正斜杠
    `/`，而不是 `÷`）。我们将在本节中更好地了解这些运算符。
- en: Table 3-1. Basic Math Operators in Python
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 表 3-1. Python 中的基本数学运算符
- en: '| Math symbol | Python operator | Operation | Example | Result |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 数学符号 | Python 运算符 | 操作 | 示例 | 结果 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| + | `+` | Addition | `4 + 2` | `6` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| + | `+` | 加法 | `4 + 2` | `6` |'
- en: '| – | `-` | Subtraction | `4 - 2` | `2` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| – | `-` | 减法 | `4 - 2` | `2` |'
- en: '| × | `*` | Multiplication | `4 * 2` | `8` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| × | `*` | 乘法 | `4 * 2` | `8` |'
- en: '| ÷ | `/` | Division | `4 / 2` | `2.0` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| ÷ | `/` | 除法 | `4 / 2` | `2.0` |'
- en: '| 4² | `**` | Exponent or power | `4 ** 2` | `16` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 4² | `**` | 指数或幂 | `4 ** 2` | `16` |'
- en: '| ( ) | `()` | Parentheses (grouping) | `(4 + 2) * 3` | `18` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| ( ) | `()` | 括号（分组） | `(4 + 2) * 3` | `18` |'
- en: Doing Math in the Python Shell
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Python Shell 中做数学题
- en: 'This is a great time to give Python math a try; let’s use the Python shell
    this time. As you might remember from [Chapter 1](ch01.html "Chapter 1. Python
    Basics: Get to Know Your Environment"), the Python shell gives you direct access
    to Python’s power without writing a whole program. It’s sometimes called the *command
    line* because you can type commands line by line and instantly see the result.
    You can type a math problem (called an [*expression*](apd.html#gloss01_019) in
    programming) like `4 + 2` directly at the command prompt (the `>>>` symbol with
    the flashing cursor) in the Python shell, and when you press ENTER, you’ll see
    the *result* of the expression, or the answer to the math problem.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是尝试 Python 数学的好时机；这次我们使用 Python shell。正如你可能从[第 1 章](ch01.html "第 1 章. Python
    基础：了解你的环境")记得的那样，Python shell 让你可以直接访问 Python 的强大功能，而无需编写整个程序。它有时被称为*命令行*，因为你可以逐行输入命令，并即时看到结果。你可以在
    Python shell 的命令提示符（`>>>`符号，闪烁的光标）中直接输入一个数学问题（在编程中称为[*表达式*](apd.html#gloss01_019)），例如
    `4 + 2`，然后按下回车键，你会看到这个表达式的*结果*，或者说是数学问题的答案。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188798.png.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![无标题图片](httpatomoreillycomsourcenostarchimages2188798.png.jpg)'
- en: Try typing some of the examples listed in [Table 3-1](ch03.html#basic_math_operators_in_python
    "Table 3-1. Basic Math Operators in Python") and see what Python says; [Figure 3-2](ch03.html#type_the_example_math_problems_left_pare
    "Figure 3-2. Type the example math problems (expressions) from Table 3-1, and
    Python gives the answers!") shows some sample output. Feel free to try your own
    math problems as well.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试输入[表 3-1](ch03.html#basic_math_operators_in_python "表 3-1. Python 中的基本数学运算符")中列出的一些示例，看看
    Python 会怎么说；[图 3-2](ch03.html#type_the_example_math_problems_left_pare "图 3-2.
    从表 3-1 中输入示例数学问题（表达式），Python 给出答案！")展示了一些示例输出。也可以尝试你自己的数学问题。
- en: '![Type the example math problems (expressions) from , and Python gives the
    answers!](httpatomoreillycomsourcenostarchimages2188802.png.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![输入示例数学题（表达式），然后 Python 给出答案！](httpatomoreillycomsourcenostarchimages2188802.png.jpg)'
- en: Figure 3-2. Type the example math problems (expressions) from [Table 3-1](ch03.html#basic_math_operators_in_python
    "Table 3-1. Basic Math Operators in Python"), and Python gives the answers!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-2. 从[表 3-1](ch03.html#basic_math_operators_in_python "表 3-1. Python 中的基本数学运算符")中输入示例数学问题（表达式），然后
    Python 给出答案！
- en: 'Syntax Errors: What Did You Say?'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语法错误：你说了什么？
- en: While we’re typing in the Python shell, we have a chance to learn about *syntax
    errors*. Whenever Python, or any programming language, can’t understand the command
    you typed, it may respond with a message like `"Syntax Error"`. This means there
    was a problem with the *way* you asked the computer to do something, or your syntax.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python shell 中输入时，我们有机会学习关于*语法错误*的知识。每当 Python 或任何编程语言无法理解你输入的命令时，它可能会返回类似于“`语法错误`”的消息。这意味着你要求计算机做某件事情的*方式*出了问题，或者是你的语法不正确。
- en: '[*Syntax*](apd.html#gloss01_047) is the set of rules we follow in building
    sentences or *statements* in a language. When we program computers, we call a
    mistake in a statement a syntax error; when we make a mistake in a sentence in
    English, we might call it bad grammar. The difference is that, unlike English
    speakers, computers can’t understand bad grammar *at all*. Python, like most programming
    languages, is very good at performing calculations as long as we follow syntax
    rules, but it can’t understand anything we’re saying if we mess up the syntax.
    Take a look at [Figure 3-3](ch03.html#learning_to_speak_pythonapostrophes_lang
    "Figure 3-3. Learning to speak Python’s language") to see some examples of syntax
    errors, followed by the expressions stated in a way that Python can understand.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[*语法*](apd.html#gloss01_047)是我们在构建语言中的句子或*语句*时遵循的规则集合。当我们编程时，如果语句中有错误，我们称之为语法错误；而当我们在英语句子中犯错时，我们可能称之为语法不规范。不同之处在于，与英语使用者不同，计算机完全不能理解语法错误。像大多数编程语言一样，Python
    在遵循语法规则的情况下非常擅长进行计算，但如果我们搞错了语法，它就无法理解我们说的任何内容。查看[图 3-3](ch03.html#learning_to_speak_pythonapostrophes_lang
    "图 3-3. 学习说 Python 的语言")，你可以看到一些语法错误的例子，随后是 Python 能理解的表达式。'
- en: '![Learning to speak Python’s language](httpatomoreillycomsourcenostarchimages2188806.png.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![学习说 Python 的语言](httpatomoreillycomsourcenostarchimages2188806.png.jpg)'
- en: Figure 3-3. Learning to speak Python’s language
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-3. 学习讲述Python的语言
- en: 'When we ask Python “What is 4 + 2?” in regular English, Python responds with
    `"SyntaxError: invalid syntax"` to let us know that it can’t understand what we’ve
    asked it to do. When we give Python the correct expression, `4 + 2`, Python will
    answer correctly every time: `6`. In the same way, an extra character, like the
    equal sign at the end of the statement `3 + 3 =`, confuses Python because Python
    sees the equal sign as an assignment operator to assign a value to a variable.
    When we type `3 + 3` and press ENTER, Python understands and will always give
    the right answer: `6`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们用普通的英语问Python“4 + 2是多少？”时，Python会回答 `"SyntaxError: invalid syntax"`，让我们知道它无法理解我们要求它做什么。当我们给Python正确的表达式
    `4 + 2` 时，Python每次都会正确回答：`6`。同样地，像等号这样的额外字符，在语句 `3 + 3 =` 末尾会让Python感到困惑，因为Python将等号视为赋值运算符，用于将值赋给变量。当我们输入
    `3 + 3` 并按下回车键时，Python就能理解，并且每次都会给出正确的答案：`6`。'
- en: The fact that we can rely on a computer to answer correctly and quickly every
    time we give it proper input is one of the most powerful aspects of coding. We
    can count on computers for fast, accurate calculations, as long as we program
    them correctly in a language they understand. That’s what you’re learning to do
    as you learn to code in Python.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以依赖计算机每次正确且迅速地回答我们给出的合理输入，这是编程中最强大的方面之一。只要我们用计算机理解的语言正确地编程，我们就可以依赖计算机进行快速、准确的计算。这正是你在学习用Python编程时要做的事情。
- en: Variables in the Python Shell
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python Shell中的变量
- en: As we’ve discussed, the Python shell gives us direct access to the programming
    power of Python without having to write entire stand-alone programs. We can even
    use variables, like `x` and `my_age`, when we’re typing in the Python shell; we
    just have to assign them values, as you learned to do in this chapter’s opening
    example.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，Python shell 使我们能够直接访问Python的编程功能，而无需编写完整的独立程序。我们甚至可以在输入Python shell时使用变量，如
    `x` 和 `my_age`；我们只需为它们赋值，就像你在本章开头的示例中学到的那样。
- en: If you type `x = 5` at the command prompt (`>>>`), Python will store the value
    `5` in memory as the variable `x` and will remember it until you tell Python to
    change the value (for example, by entering `x = 9` to give `x` a new value of
    `9`). See the examples in the Python shell in [Figure 3-4](ch03.html#python_remembers_our_variableapostrophes
    "Figure 3-4. Python remembers our variable’s value for as long as we want.").
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在命令提示符（`>>>`）下输入 `x = 5`，Python会将值 `5` 存储在内存中作为变量 `x`，并会记住它，直到你告诉Python更改这个值（例如，通过输入
    `x = 9` 来给 `x` 赋一个新的值 `9`）。请参见[图3-4](ch03.html#python_remembers_our_variableapostrophes
    "图3-4. Python会记住我们变量的值，只要我们希望。")中的Python shell示例。
- en: '![Python remembers our variable’s value for as long as we want.](httpatomoreillycomsourcenostarchimages2188810.png.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Python会记住我们变量的值，只要我们希望。](httpatomoreillycomsourcenostarchimages2188810.png.jpg)'
- en: Figure 3-4. Python remembers our variable’s value for as long as we want.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-4. Python会记住我们变量的值，只要我们希望。
- en: 'Notice that in the last assignment statement, we used `x` on *both sides* of
    the equal sign: `x = x - 7`. In an algebra class, this would be an invalid statement,
    since `x` can never equal `x - 7`. But in a program, the computer evaluates the
    right side of the equation *first*, calculating the value of `x - 7` *before*
    it assigns that value to the `x` on the left side. Variables on the right side
    of the equal sign get substituted with their values; here, the value of `x` is
    `9`, so the computer plugs `9` into `x - 7` to get `9 - 7`, which is `2`. Finally,
    the variable on the left side of the equal sign, `x`, is assigned the result of
    the calculation from the right side. The value of `x` changes only at the end
    of the assignment process.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在最后的赋值语句中，我们在等号的*两边*都使用了 `x`：`x = x - 7`。在代数课上，这将是一个无效语句，因为 `x` 永远不可能等于 `x
    - 7`。但是在程序中，计算机会*先*计算等式右边的部分，先计算出 `x - 7` 的值，然后再将这个值赋给左边的 `x`。等号右边的变量会用它们的值替代；这里，`x`
    的值是 `9`，所以计算机会将 `9` 代入 `x - 7`，得到 `9 - 7`，即 `2`。最后，等号左边的变量 `x` 被赋予右边计算结果的值。`x`
    的值只有在赋值过程结束时才会发生变化。
- en: Before we move on to a programming example, let’s go over one additional feature
    of math in Python. In [Table 3-1](ch03.html#basic_math_operators_in_python "Table 3-1. Basic
    Math Operators in Python") and in [Figure 3-2](ch03.html#type_the_example_math_problems_left_pare
    "Figure 3-2. Type the example math problems (expressions) from Table 3-1, and
    Python gives the answers!") and [Figure 3-4](ch03.html#python_remembers_our_variableapostrophes
    "Figure 3-4. Python remembers our variable’s value for as long as we want."),
    we used the division operator—the forward slash (`/`)—and Python responded with
    a decimal value. For `4 / 2`, Python gave us `2.0`, not the `2` that we might
    expect. This is because Python uses what it calls *true division*, which is meant
    to be easier to understand and less likely to cause errors.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入编程示例之前，让我们先了解一下 Python 数学的一项额外功能。在[表 3-1](ch03.html#basic_math_operators_in_python
    "表 3-1. Python 中的基本数学运算符")、[图 3-2](ch03.html#type_the_example_math_problems_left_pare
    "图 3-2. 输入表 3-1 中的数学问题（表达式），Python 会给出答案！")和[图 3-4](ch03.html#python_remembers_our_variableapostrophes
    "图 3-4. Python 记住我们变量的值，直到我们不再需要。")中，我们使用了除法运算符——斜杠 (`/`)——并且 Python 给出了一个小数值。对于
    `4 / 2`，Python 给我们的是 `2.0`，而不是我们可能期望的 `2`。这是因为 Python 使用了它所称的 *真除法*，它旨在更容易理解，并且不太容易导致错误。
- en: 'We see the positive effect of Python’s true division in [Figure 3-4](ch03.html#python_remembers_our_variableapostrophes
    "Figure 3-4. Python remembers our variable’s value for as long as we want.") when
    we ask Python to calculate `x / 2`, with `x` equal to `5`. Python tells us that
    `5` divided by `2` is equal to `2.5`, which *is* the result we expect. This division
    is like dividing five pizzas equally between two teams: each team gets `2.5` pizzas
    (the result of `5 / 2`). In some programming languages, the division operator
    returns only the whole number (that would be `2` in this case). Just remember
    that Python does “pizza division.”'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们请求 Python 计算 `x / 2`，其中 `x` 等于 `5` 时，我们可以在[图 3-4](ch03.html#python_remembers_our_variableapostrophes
    "图 3-4. Python 记住我们变量的值，直到我们不再需要。")中看到 Python 真除法的积极效果。Python 告诉我们，`5` 除以 `2`
    等于 `2.5`，这是我们预期的结果。这个除法就像是将五个披萨平均分配给两个团队：每个团队得到 `2.5` 个披萨（即 `5 / 2` 的结果）。在一些编程语言中，除法运算符只返回整数（在这个例子中是
    `2`）。只要记住，Python 做的是“披萨除法”。
- en: 'Programming with Operators: A Pizza Calculator'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用运算符编程：一个披萨计算器
- en: Speaking of pizza, now let’s imagine you own a pizzeria.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 说到披萨，现在让我们假设你拥有一家披萨店。
- en: 'Let’s write a small program to figure out the total cost of a simple pizza
    order, including sales tax. Say we’re ordering one or more pizzas that all cost
    the same, and we’re ordering in Atlanta, Georgia, in the United States. There’s
    a sales tax that’s not included in the menu price but is added at the end of the
    purchase. The rate is 8 percent, meaning that for every dollar we pay for the
    pizza, we must also pay eight cents in sales tax. We could model this program
    in words as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个小程序来计算一个简单披萨订单的总费用，包括销售税。假设我们正在订购一个或多个价格相同的披萨，并且我们在美国乔治亚州的亚特兰大下单。这里有一个不包含在菜单价格中的销售税，会在购买结算时加上。税率为
    8%，意味着每付一美元购买披萨，我们还需要额外支付 8 美分的销售税。我们可以用文字来描述这个程序如下：
- en: Ask the person how many pizzas they want.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问对方想要多少个披萨。
- en: Ask for the menu cost of each pizza.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求每个披萨的菜单价格。
- en: Calculate the total cost of the pizzas as our subtotal.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算披萨的总成本作为我们的小计。
- en: Calculate the sales tax owed, at 8 percent of the subtotal.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算应付的销售税，按小计的 8% 计算。
- en: Add the sales tax to the subtotal for the final total.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将销售税加到小计上，得到最终总额。
- en: Show the user the total amount due, including tax.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户显示包括税费在内的总金额。
- en: 'We’ve seen how to ask the user for input. To calculate with numbers we’ve entered
    as input, we need one more function: `eval()`. The `eval()` function *evaluates*,
    or figures out the value of, the input that we typed. Keyboard input in Python
    is always received as a string of text characters, so we use `eval()` to turn
    that input into a number. So if we type `"20"` into our program, `eval("20")`
    would give us the number value `20`, which we can then use in math formulas to
    calculate new numbers, like the cost of 20 pizzas. The `eval()` function is pretty
    powerful when it comes to working with numbers in Python.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过如何请求用户输入。为了对我们输入的数字进行计算，我们还需要一个函数：`eval()`。`eval()` 函数会 *评估* 或者说计算我们输入的内容的值。Python
    中的键盘输入始终以文本字符串的形式接收，所以我们使用 `eval()` 将该输入转换为数字。如果我们在程序中输入 `"20"`，`eval("20")` 会给出数字
    `20`，我们就可以在数学公式中使用它来计算新的数字，例如 20 个披萨的费用。`eval()` 函数在处理 Python 中的数字时非常强大。
- en: Now that we know how to turn user input into numbers that we can calculate with,
    we can convert the numbered steps of our program plan into actual code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何将用户输入转化为可以进行计算的数字，我们可以将程序计划中的编号步骤转换成实际的代码。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '*For each programming example, you can try writing your own program first,
    before you look at the code in the book. Start by writing comments (`#`) outlining
    the steps you’ll need to solve the problem. Then fill in the programming steps
    below each comment, checking the code in the book when you need a hint.*'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于每个编程示例，你可以先尝试自己编写程序，然后再查看书中的代码。首先编写注释（`#`），概述解决问题所需的步骤。然后在每个注释下填写编程步骤，当你需要提示时，查看书中的代码。*'
- en: Type this into a new window and save it as *AtlantaPizza.py*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在新窗口中输入此内容并将其保存为*AtlantaPizza.py*。
- en: AtlantaPizza.py
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AtlantaPizza.py
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This program combines what you’ve learned about variables and operators into
    a single powerful program. Read through it and make sure you understand how each
    part works. How would you change the program to make it work for a different rate
    of sales tax?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将你所学的变量和运算符知识结合成一个强大的程序。通读它，确保你理解每一部分是如何工作的。你会如何修改程序，使其适用于不同的销售税率？
- en: 'Notice that we have included the steps of our program as comments, using the
    `#` (hash mark). Remember that comments are there for humans to read; the IDLE
    editor colors comments red to remind us that Python will ignore those parts. This
    practice of spelling out our programs step by step in words first, then putting
    those steps into our program as comments, can be very helpful as we build longer
    and more complex programs. This is our algorithm, the set of steps to be followed
    in our program. Algorithms are like recipes: if we follow all the steps in the
    right order, our program turns out great!'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经将程序的步骤作为注释包含在内，使用了`#`（井号）。记住，注释是供人类阅读的；IDLE编辑器将注释标红，以提醒我们Python会忽略这些部分。在构建更长且更复杂的程序时，先用文字一步步列出程序的步骤，再将这些步骤作为注释加入程序，能非常有帮助。这就是我们的算法，程序中需要遵循的步骤集合。算法就像食谱：如果我们按正确的顺序执行所有步骤，程序就会顺利完成！
- en: When we write our algorithm in words (as `#` comments) *and* in code (as programming
    statements), we’re accomplishing two goals. First, we’re reducing errors in our
    program by making sure we don’t leave out steps. Second, we’re making our program
    easier for us and others to read and understand later. You should get in the habit
    of writing clear comments in your programs from the very beginning, and we’ll
    do this often throughout the book. If you don’t want to type all of the comments,
    the program will still run; they’re just there to help you understand what the
    program is doing.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用文字（如`#`注释）*和*代码（如编程语句）来编写算法时，我们达成了两个目标。首先，我们通过确保不遗漏步骤来减少程序中的错误。其次，我们让程序变得更加易于我们自己以及他人以后阅读和理解。从一开始，你就应该养成在程序中写清晰注释的习惯，我们将在本书中经常这样做。如果你不想输入所有的注释，程序仍然会运行；它们只是帮助你理解程序在做什么。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188814.png.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![没有说明的图片](httpatomoreillycomsourcenostarchimages2188814.png.jpg)'
- en: When you’ve written your program, you can run it and interact with it by going
    to **Run**▸**Run Module**. [Figure 3-5](ch03.html#sample_run_of_our_atlantapizzadotpy_pizz
    "Figure 3-5. A sample run of our AtlantaPizza.py pizza calculator program") shows
    some sample output.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写完程序后，可以通过点击**运行**▸**运行模块**来运行并与其互动。[图3-5](ch03.html#sample_run_of_our_atlantapizzadotpy_pizz
    "图3-5。我们的AtlantaPizza.py比萨计算器程序的示例运行")展示了一些示例输出。
- en: '![A sample run of our AtlantaPizza.py pizza calculator program](httpatomoreillycomsourcenostarchimages2188819.png.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![我们的AtlantaPizza.py比萨计算器程序的示例运行](httpatomoreillycomsourcenostarchimages2188819.png.jpg)'
- en: Figure 3-5. A sample run of our *AtlantaPizza.py* pizza calculator program
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图3-5。我们的*AtlantaPizza.py*比萨计算器程序的示例运行
- en: 'Strings: The Real Characters in Python'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串：Python中的真实字符
- en: We’ve seen that Python is terrific at working with numbers, but what about when
    we want to communicate with people? People are better at understanding words and
    sentences, rather than just numbers all by themselves. To write programs that
    people can use, we need another variable type known as *strings*. Strings are
    what we call *text*, or keyboard characters, in a programming language; they are
    groups (or “strings”) of letters, numbers, and symbols. Your name is a string,
    as is your favorite color—even this paragraph (or this whole book) is a long string
    of letters, spaces, numbers, and symbols all mixed together.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到Python在处理数字方面非常出色，但是当我们想与人交流时怎么办呢？人们更擅长理解单词和句子，而不仅仅是数字。为了编写人们可以使用的程序，我们需要另一种类型的变量，叫做*字符串*。字符串是我们在编程语言中所说的*文本*，或者说是键盘字符；它们是字母、数字和符号的组合（或“字符串”）。你的名字就是一个字符串，你最喜欢的颜色也是—甚至这段话（或这本书）也是由字母、空格、数字和符号混合组成的长字符串。
- en: One difference between strings and numbers is that we can’t calculate with strings;
    they’re usually names, words, or other information that can’t go into a calculator.
    A common way to use strings is in printing. For example, we asked the user for
    their name in our program at the beginning of the chapter so that we could print
    it out later.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和数字之间的一个区别是我们不能用字符串做计算；它们通常是名字、单词或其他不能用于计算器的资料。使用字符串的常见方式是打印。例如，我们在本章开始时让用户输入他们的名字，以便稍后打印出来。
- en: 'Let’s do that again with a new program. We’ll ask the user for their name,
    store their name in a variable called `name`, and then print their name on the
    screen 100 times. As in our cool spiral drawing examples in [Chapter 1](ch01.html
    "Chapter 1. Python Basics: Get to Know Your Environment") and [Chapter 2](ch02.html
    "Chapter 2. Turtle Graphics: Drawing with Python"), we’re using a *loop* to repeat
    the printing of the user’s name 100 times. Type the following code into a new
    IDLE window and save it as *SayMyName.py*.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个新的程序再做一次。我们会让用户输入他们的名字，将名字存储在一个名为`name`的变量中，然后在屏幕上打印他们的名字100次。就像在[第1章](ch01.html
    "第1章. Python基础：了解你的开发环境")和[第2章](ch02.html "第2章. 海龟图形：用Python画图")中的酷炫螺旋画例子一样，我们使用了一个*循环*来重复打印用户的名字100次。将以下代码输入到新的IDLE窗口中，并将其保存为*SayMyName.py*。
- en: SayMyName.py
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SayMyName.py
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There’s something new in the `print()` statement in this program’s last line:
    it contains a *keyword argument*. In this case, the [*keyword*](apd.html#gloss01_030)
    is `end`, and we’re telling the program to *end* each `print()` statement with
    a space (there’s a space between our quotes: `" "`) instead of the regular end-of-line
    character. Print statements in Python usually end with the newline character,
    which is like pressing ENTER on your keyboard, but with this keyword argument
    we are telling Python we don’t want every printout of our name to be on a new
    line.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序最后一行中的`print()`语句有一个新内容：它包含了一个*关键字参数*。在这种情况下，[*关键字*](apd.html#gloss01_030)是`end`，我们告诉程序将每个`print()`语句的结尾设置为空格（引号之间有一个空格：`"
    "`），而不是常规的行末字符。Python中的`print()`语句通常以换行符结尾，就像按下键盘上的ENTER键一样，但通过这个关键字参数，我们告诉Python不希望每次打印名字时都换行。
- en: 'To see this change a little more clearly, modify the last line of the program
    to the following, and then run the program:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地看到这一变化，将程序最后一行修改为以下内容，然后运行程序：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you run this, you’ll see `"`*`Your Name`* `rules!"` printed 100 times! The
    keyword argument `end = " rules! "` lets us change how the `print()` statement
    works. The end of every `print()` statement is now `" rules! "` instead of a RETURN
    or ENTER newline character.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个，你将看到`"`*`Your Name`* `rules!"`打印100次！关键字参数`end = " rules! "`让我们可以改变`print()`语句的工作方式。每个`print()`语句的结束现在是`"
    rules! "`，而不是默认的回车或换行符。
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188822.png.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![没有标题的图片](httpatomoreillycomsourcenostarchimages2188822.png.jpg)'
- en: In programming languages, an [*argument*](apd.html#gloss01_005) isn’t a bad
    thing; it’s simply how we tell a function, like `print()`, to do something. We
    do so by putting extra values inside the parentheses for that function. Those
    values inside the `print()` statement’s parentheses are the arguments, and the
    special keyword argument means that we’re using the keyword `end` to change the
    way `print()` ends each line it prints. When we change the end of the line from
    the newline character to a simple space character, words are added to the end
    of the current line without *returning*, or starting a new line, until the current
    line fills up completely and wraps around to the next one. Take a look at the
    result in [Figure 3-6](ch03.html#python_prints_a_screen_full_of_my_name_w "Figure 3-6. Python
    prints a screen full of my name when I run SayMyName.py.").
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Python prints a screen full of my name when I run SayMyName.py.](httpatomoreillycomsourcenostarchimages2188826.png.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: Figure 3-6. Python prints a screen full of my name when I run *SayMyName.py*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Improving Our Color Spiral With Strings
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Strings are so popular that even turtle graphics in Python have functions for
    taking strings as input and writing them to the screen. The function to ask a
    user for a string, or text, in the Turtle library is `turtle.textinput()`; this
    opens a pop-up window asking the user for text input and lets us store that as
    a string value. [Figure 3-7](ch03.html#text_input_window_in_turtle_graphics "Figure 3-7. A
    text input window in turtle graphics") shows the nice graphical window that Turtle
    pops up for us when we use `turtle.textinput("Enter your name", "What is your
    name?")`. There are two arguments in Turtle’s `textinput()` function. The first
    argument, `"Enter your name"`, is the window title for the pop-up window. The
    second argument, `"What is your name?"`, is the prompt that asks the user for
    the information we want.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![A text input window in turtle graphics](httpatomoreillycomsourcenostarchimages2188830.png.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Figure 3-7. A text input window in turtle graphics
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The function for writing a string on the turtle screen is `write()`; it draws
    text in the turtle’s pen color and at the turtle’s location on the screen. We
    can use `write()` and `turtle.textinput()` to combine the power of strings with
    colorful turtle graphics. Let’s give it a try! In the following program, we’ll
    set up turtle graphics just like in our earlier spirals, but instead of drawing
    lines or circles on the screen, we’ll ask the user for their name and then draw
    it on the screen in a colorful spiral. Type this into a new window and save it
    as *SpiralMyName.py*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: SpiralMyName.py
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Most of the code in *SpiralMyName.py* looks just like our earlier color spirals,
    but we ask the user their name in a `turtle.textinput` pop-up window at ➊ and
    store the user’s answer in `your_name`. We’ve also changed the drawing loop by
    lifting the turtle’s pen off the screen at ➋ so when we move the turtle forward
    at ➌, it doesn’t leave a trail or draw the normal spiral line. All we want in
    the spiral is the user’s name, so after the turtle moves at ➌, we tell it to start
    drawing again with `t.pendown()` at ➍. Then with the `write` command at ➎, we
    tell the turtle to write `your_name` on the screen every time through the loop.
    The final result is a lovely spiral; my son Max ran the one shown in [Figure 3-8](ch03.html#colorful_text_spiral
    "Figure 3-8. A colorful text spiral").
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![A colorful text spiral](httpatomoreillycomsourcenostarchimages2188834.png.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Figure 3-8. A colorful text spiral
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Lists: Keeping It All Together'
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to strings and number values, variables can also contain lists.
    A *list* is a group of values, separated by commas, between square brackets, `[]`.
    We can store any value type in lists, including numbers and strings; we can even
    have lists of lists.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'In our spiral programs, we stored a list of strings—`["red", "yellow", "blue",
    "green"]`—in the `colors` variable. Then, when our program needed to use a color,
    we just called the `t.pencolor()` function and told it to use the list `colors`
    to find the name of the color it should use next. Let’s add some more color names
    to our list of colors and learn one more input function in the Turtle package:
    `numinput()`.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'To red, yellow, blue, and green, let’s add four more named colors: orange,
    purple, white, and gray. Next, we want to ask the user how many sides their shape
    should have. Just as the `turtle.textinput()` function asked the user for a string,
    `turtle.numinput()` allows the user to enter a number.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use this `numinput()` function to ask the user for the number of sides
    (between 1 and 8), and we’ll give the user a *default* choice of `4`, meaning
    that if the user doesn’t enter a number, the program will automatically use `4`
    as the number of sides. Type the following code into a new window and save it
    as *ColorSpiralInput.py*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: ColorSpiralInput.py
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This program uses the number of sides the user entered to do some calculations
    every time it draws a new side. Let’s look at the four numbered lines inside the
    `for` loop.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: At ➊, the program changes the turtle’s pen color, matching the number of colors
    to the number of sides (triangles use three colors for the three sides, squares
    use four colors, and so on). At ➋, we change the lengths of each line based on
    the number of sides (so that triangles aren’t too much smaller than octagons on
    our screen).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: At ➌, we turn the turtle by the correct number of degrees. To get this number,
    we divide 360 by the number of sides, which gives us the *exterior angle*, or
    the angle we need to turn to draw a regular shape with that number of sides. For
    example, a circle is 360 degrees with one “side”; a square is made up of four
    90-degree angles (also 360 degrees total); you need six 60-degree turns to go
    around a hexagon (also 360 degrees total); and so on.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Finally, at ➍, we increase the width or thickness of the pen as we get farther
    from the center of the screen. [Figure 3-9](ch03.html#picture_from_colorspiralinputdotpy_with
    "Figure 3-9. The picture from ColorSpiralInput.py with eight sides (left) and
    three sides (right)") shows the drawings that result from entering eight sides
    and three sides.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![The picture from ColorSpiralInput.py with eight sides (left) and three sides
    (right)](httpatomoreillycomsourcenostarchimages2188838.png.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: Figure 3-9. The picture from *ColorSpiralInput.py* with eight sides (left) and
    three sides (right)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Python Does Your Homework
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ve seen that Python is a powerful and fun programming language that can
    handle all sorts of data: numbers, strings, lists, and even complex math expressions.
    Now you’re going to put Python’s power to work to do something very practical:
    your math homework!'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re going to write a short program that combines strings and numbers, using
    the `eval()` function to turn math problems into answers. Earlier in the chapter,
    I said that the `eval()` function could turn the string `"20"` into the number
    20\. As promised, `eval()` can do even more than that: it can also turn `"2 *
    10"` into the number 20\. When the `eval()` function operates on a string of keyboard
    characters, it evaluates them just like the Python shell would. So when we enter
    a math problem as input, running `eval()` on that input can give us the answer
    to the problem.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'By printing the original problem that the user entered, then outputting `eval(`*`problem`*`)`,
    we can show the original problem and the answer all on one line. Remember the
    operators in [Table 3-1](ch03.html#basic_math_operators_in_python "Table 3-1. Basic
    Math Operators in Python"): if you needed the answer to 5 ÷ 2, you’d type `5 /
    2`, and for 4², you’d type `4 ** 2`. Here’s what our program, *MathHomework.py*,
    looks like when we put it together:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: MathHomework.py
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This `while` statement will keep asking for problems and printing answers until
    the user presses the Q key to quit the program.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: While this short program can’t help us with algebra yet, it can do more than
    basic math. Remember our discussion about Python’s true division? We called it
    “pizza division,” because it let us split pizzas evenly among any number of people.
    Well, Python can still do integer division (whole-number division); we just need
    to learn two new operators.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'When would you want to do integer division? Let’s say your teacher gives you
    and your three friends 10 cartons of chocolate milk to enjoy, and you want to
    divide the milk fairly so that each of you gets the same number of cartons. There
    are four of you (you plus three friends), so 10 ÷ 4 equals 2.5\. Unfortunately,
    you can’t just cut a carton of milk in half. If you had cups, you could split
    a carton between two friends, but let’s pretend there are no cups around. If you
    wanted to be fair, you would have to take two cartons each, and give the teacher
    back the remaining two cartons. That sounds a lot like long division: the two
    leftover cartons that you return to the teacher are the *remainder* when you divide
    10 by 4\. In math, we sometimes note the remainder from long division like this:
    10 ÷ 4 = 2 R2\. In other words, 10 divided by 4 equals a *quotient* of 2, with
    a remainder of 2\. This means that 4 goes into 10 evenly 2 times, with 2 remaining.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: In Python, integer division is performed with the doubleforward slash operator,
    `//`. So `10 // 4` equals `2`, and `7 // 4` equals `1` (because 4 goes into 7
    only 1 time, with a remainder of 3). The `//` operator gives us our quotient,
    but what about the remainder? To get the remainder, we use the modulo operator,
    which we represent in Python with the `%` symbol. Don’t confuse `%` with percent—in
    Python, you’ll write percentages as decimals (5% becomes 0.05), and the `%` operator
    is *always* the *modulus*, or remainder resulting from integer division. To get
    the remainder of long division in Python, type **`10 % 4`** (gives a remainder
    of `2`) or **`7 % 4`** (equals a remainder of `3`). [Figure 3-10](ch03.html#python_tackles_your_math_homeworkdot
    "Figure 3-10. Python tackles your math homework.") shows the result of several
    math operations, including integer division and remainders using the `//` and
    `%` operators.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![Python tackles your math homework.](httpatomoreillycomsourcenostarchimages2188842.png.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Figure 3-10. Python tackles your math homework.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: As we continue through the book, we’ll be using the `%` operator in programs
    like our spiral drawings to keep numbers fixed in a certain range.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: What You Learned
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you’ve seen how to store different types of information, including
    numbers, lists, and strings, in variables. You learned the rules for naming variables
    in Python (letters, underscores, numbers; case sensitive; no spaces) and how to
    assign values to them with the equal sign operator (`my_name = "Alex"` or `my_age
    = 5`).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: You also learned about integers (whole numbers) and floatingpoint numbers (decimal
    values). You learned about the various math operators in Python and how they differ
    from the symbols you might use in a math textbook. You saw how to use strings
    of words, letters, characters, and symbols, including how to make Python understand
    and evaluate certain strings, like when we wanted to use a number that the user
    entered to perform calculations.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![image with no caption](httpatomoreillycomsourcenostarchimages2188847.png.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: You saw a few examples of syntax errors and learned how to avoid some of them
    when you program. You learned about the list variable type, which you can use
    to store lists of all kinds of values, such as `colors = ["red", "yellow", "blue",
    "green"]`. You even found out how Python can help you with simple calculations,
    including long division.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll build on your understanding of variables and data types as you learn
    how to use variables to create your own loops in [Chapter 4](ch04.html "Chapter 4. Loops
    Are Fun (You Can Say That Again)"), use the computer to make decisions in [Chapter 5](ch05.html
    "Chapter 5. Conditions (What If?)"), and even program the computer to play games
    in [Chapter 6](ch06.html "Chapter 6. Random Fun and Games: Go Ahead, Take a Chance!")
    and beyond. Variables are the first, crucial programming tools that help us break
    down the most complex problems, from video games to satellites to medical software,
    into small chunks that we can solve with code. Work on the samples from this chapter,
    and create your own examples, until you’re familiar enough with variables to dig
    in to the next chapter.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you should be able to do the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Create your own variables to store numbers, strings, and lists.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discuss the differences between number types in Python.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use basic math operators in Python to perform calculations.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain the difference between strings, numbers, and lists.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write out short programs as steps in English and then write those steps as comments
    to help you build your code.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask for user input in a variety of situations and use that input in your programs.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming Challenges
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: To practice what you’ve learned in this chapter, try these challenges. (If you
    get stuck, go to *[http://www.nostarch.com/teachkids/](http://www.nostarch.com/teachkids/)*
    for sample answers.)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '**#1: CIRCULAR SPIRALS**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'Look back at the *ColorCircleSpiral.py* program in [Chapter 2](ch02.html "Chapter 2. Turtle
    Graphics: Drawing with Python") ([ColorCircleSpiral.py](ch02.html#colorcirclespiraldotpy
    "ColorCircleSpiral.py")) that drew circles instead of lines on each side of the
    spiral. Run that example again and see if you can determine which lines of code
    you’d need to add to and delete from the *ColorSpiralInput.py* program ([ColorSpiralInput.py](ch03.html#colorspiralinputdotpy
    "ColorSpiralInput.py")) to be able to draw circular spirals with any number of
    sides between one and eight. Once you get it working, save the new program as
    *CircleSpiralInput.py*.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '**#2: CUSTOM NAME SPIRALS**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn’t it be cool to ask the user how many sides their spiral should have,
    ask for their name, and then draw a spiral that writes their name in the correct
    number of spiral sides and colors? See if you can figure out which parts of *SpiralMyName.py*
    ([SpiralMyName.py](ch03.html#spiralmynamedotpy "SpiralMyName.py")) to incorporate
    into *ColorSpiralInput.py* ([ColorSpiralInput.py](ch03.html#colorspiralinputdotpy
    "ColorSpiralInput.py")) to create this new, impressive design. When you get it
    right (or come up with something even cooler), save the new program as *ColorMeSpiralled.py*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
