["```\n\n      // Project 31 - Demonstrating PWM with the ATtiny85\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      void initPWM(void)\n\n      {\n\n      // Set PB4, PB1, PB0 as outputs\n\n      ❶ DDRB |= (1 << PORTB4)|(1 << PORTB1)|(1 << PORTB0);\n\n      ❷ // PB0\n\n      // Set timer mode to FAST PWM\n\n      TCCR0A |= (1 << WGM01)|(1 << WGM00);\n\n      // Connect PWM signal to pin (OC0A => PB0)\n\n      TCCR0A |= (1 << COM0A1);\n\n      // No prescaler\n\n      TCCR0B |= (1 << CS00);\n\n      ❸ // PB1\n\n      // Connect PWM signal to pin (OC0B => PB0)\n\n      TCCR0A |= (1 << COM0B1);\n\n      ❹ // PB4\n\n      // Connect PWM signal to pin (OCR0B => PB4)\n\n      TCCR1 |= (1 << PWM1A)|(1 << COM1A0);\n\n      // Toggle PB4 when timer reaches OCR1B (target)\n\n      GTCCR |= (1 << COM1B0);\n\n      // Clear PB4 when timer reaches OCR1C (top)\n\n      GTCCR |= (1 << PWM1B);\n\n      // No prescaler\n\n      TCCR1 |= (1 << CS10);\n\n      }\n\n      int main(void)\n\n      {\n\n      uint8_t duty = 0;\n\n      initPWM();\n\n      while (1)\n\n      {\n\n      ❺ for (duty = 1; duty <100; duty++)\n\n      {\n\n      OCR0A = duty;                   // PB0\n\n      OCR0B = duty;                   // PB1\n\n      OCR1B = duty;                   // PB4\n\n      delay_ms(10);\n\n      }\n\n      ❻ for (duty = 100; duty >0; --duty)\n\n      {\n\n      OCR0A = duty;                   // PB0\n\n      OCR0B = duty;                   // PB1\n\n      OCR1B = duty;                   // PB4\n\n      _delay_ms(10);\n\n      }\n\n      }\n\n      }\n\n```", "```\n\n            DDRB |= (1 << PORTB0);                 // Set PB0 as output\n\n            TCCR0A |= (1 << WGM01)|(1 << WGM00);   // Set timer mode to FAST PWM\n\n            // Connect PWM signal to pin (OC0A => PB0)\n\n            TCCR0A |= (1 << COM0A1);\n\n            TCCR0B |= (1 << CS00);                 // No prescaler\n\n    ```", "```\n\n            DDRB |= (1 << PORTB1);                 // Set PB1 as output\n\n            TCCR0A |= (1 << WGM01)|(1 << WGM00);   // Set timer mode to FAST PWM\n\n            // Connect PWM signal to pin (OC0B => PB1)\n\n            TCCR0A |= (1 << COM0B1);\n\n            TCCR0B |= (1 << CS00);                 // No prescaler\n\n    ```", "```\n\n            DDRB |= (1 << PORTB4);                 // Set PB4 as output\n\n            // Connect PWM signal to pin (OCR0B => PB4)\n\n            TCCR1 |= (1 << PWM1A)|(1 << COM1A0);\n\n            // Toggle PB4 when timer reaches OCR1B (target)\n\n            GTCCR |= (1 << COM1B0);\n\n            // Clear PB4 when timer reaches OCR1C (top)\n\n            GTCCR |= (1 << PWM1B);\n\n            TCCR1 |= (1 << CS10);                  // No prescaler\n\n    ```", "```\n\n            TCCR0A &= ~(1 << WGM01)&~(1 << WGM00); // Turn off fast PWM for PORTB0/1\n\n            TCCR0A &= ~(1 << COM0A1);              // Disconnect PWM from PORTB0\n\n            TCCR0A &= ~(1 << COM0B1);              // Disconnect PWM from PORTB1\n\n            TCCR1 &= ~(1 << PWM1A)&~(1 << COM1A0); // Turn off PWM for PORTB4\n\n            // Disconnect PWM from PORTB4 off timer/counter\n\n            TCCR1 &= ~(1 << CS10);\n\n            GTCCR &= ~(1 << PWM1B);                // Disable PWM for PORTB4\n\n            GTCCR &= ~(1 << COM1B0);               // Disconnect PWM from PORTB4\n\n    ```", "```\n\n      // Project 32 - Experimenting with Piezo and PWM\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      void startADC()\n\n      ❶ // Set up the ADC\n\n      {\n\n      ADMUX |= (1 << ADLAR)|(1 << MUX1);\n\n      ADCSRA |= (1 << ADEN)|(1 << ADPS1)|(1 << ADPS0);\n\n      }\n\n      ❷ void initPWM(void)\n\n      {\n\n      DDRB |= (1 << PORTB0);            // Set PB0 as output\n\n      TCCR0A |= (1 << WGM01)|(1 << WGM00);\n\n      TCCR0A |= (1 << COM0A1);\n\n      TCCR0B |= (1 << CS00);\n\n      }\n\n      int main(void)\n\n      {\n\n      ❸ startADC();\n\n      ❹ initPWM();\n\n      for(;;)\n\n      {\n\n      ❺ ADCSRA |= (1 << ADSC);         // Start ADC measurement\n\n      while (ADCSRA & (1 << ADSC) ); // Wait until conversion completes\n\n      _delay_ms(5);\n\n      ❻ OCR0A = ADCH;                  // Set PWM duty cycle with ADC value\n\n      }\n\n      return 0;\n\n      }\n\n```", "```\n\n            TCCR0A |= (1 << WGM01)|(1 << WGM00);\n\n            TCCR0B |= (1 << CS01);\n\n    ```", "```\n\n            TCCR0A |= (1 << COM0A1);        // PWM to OCR0A - PD6\n\n            TCCR0A |= (1 << COM0B1);        // PWM to OCR0B - PD5\n\n    ```", "```\n\n            TCCR0A &= ~(1 << COM0A1);       // Disconnect PWM from OCR0A - PD6\n\n            TCCR0A &= ~(1 << COM0B1);       // Disconnect PWM from OCR0B - PD5\n\n    ```", "```\n\n            TCCR1A |= (1 << WGM10);\n\n            TCCR1B |= (1 << WGM12);\n\n            TCCR1B |= (1 << CS11);\n\n    ```", "```\n\n            TCCR1A |= (1 << COM1A1);        // PWM to OCR1A - PB1\n\n            TCCR1A |= (1 << COM1B1);        // PWM to OCR1B - PB2\n\n    ```", "```\n\n            TCCR1A &= ~(1 << COM1A1);       // Disconnect PWM from OCR1A - PB1\n\n            TCCR1A &= ~(1 << COM1B1);       // Disconnect PWM from OCR1B - PB2\n\n    ```", "```\n\n            TCCR2A |= (1 << WGM20);\n\n            TCCR2A |= (1 << WGM21);\n\n            TCCR2B |= (1 << CS21);\n\n    ```", "```\n\n            TCCR2A |= (1 << COM2A1);        // PWM to OCR2A - PB3\n\n            TCCR2A |= (1 << COM2B1);        // PWM to OCR2B - PD3\n\n    ```", "```\n\n            TCCR2A &= ~(1 << COM2A1);       // Disconnect PWM from OCR2A - PB3\n\n            TCCR2A &= ~(1 << COM2B1);       // Disconnect PWM from OCR2B - PD3\n\n    ```", "```\n\n      // Project 33 - Experimenting with RGB LEDs and PWM\n\n      #include <avr/io.h>\n\n      #include <util/delay.h>\n\n      ❶ #define wait 10\n\n      ❷ void initPWM(void)\n\n      {\n\n      // Timers 1A and 1B\n\n      TCCR1A |= (1 << WGM10);  // Fast PWM mode\n\n      TCCR1B |= (1 << WGM12);  // Fast PWM mode\n\n      TCCR1B |= (1 << CS11);\n\n      TCCR1A |= (1 << COM1A1); // PWM to OCR1A - PB1\n\n      TCCR1A |= (1 << COM1B1); // PWM to OCR1B - PB2\n\n      // Timer 2\n\n      TCCR2A |= (1 << WGM20);  // Fast PWM mode\n\n      TCCR2A |= (1 << WGM21);  // Fast PWM mode\n\n      TCCR2B |= (1 << CS21);\n\n      TCCR2A |= (1 << COM2A1); // PWM to OCR2A - PB3\n\n      }\n\n      ❸ void PWMblue(uint8_t duty)\n\n      // Blue LED is on PB1\n\n      {\n\n      OCR1A = duty;\n\n      }\n\n      ❹ void PWMred(uint8_t duty)\n\n      // Red LED is on PB3\n\n      {\n\n      OCR2A = duty;\n\n      }\n\n      ❺ void PWMgreen(uint8_t duty)\n\n      // Green LED is on PB2\n\n      {\n\n      OCR1B = duty;\n\n      }\n\n      int main(void)\n\n      {\n\n      // Set PORTB1, PORTB2, and PORTB3 as outputs\n\n      ❻ DDRB |= (1 << PORTB1)|(1 << PORTB2)|(1 << PORTB3);\n\n      initPWM();\n\n      uint8_t a;\n\n      while(1)\n\n      {\n\n      // Red to green\n\n      ❼ for (a=1; a<255; a++)\n\n      {\n\n      PWMred(255-a);\n\n      PWMgreen(a);\n\n      _delay_ms(wait);\n\n      }\n\n      // Green to blue\n\n      ❽ for (a=1; a<255; a++)\n\n      {\n\n      PWMgreen(255-a);\n\n      PWMblue(a);\n\n      _delay_ms(wait);\n\n      }\n\n      // Blue to red\n\n      ❾ for (a=1; a<255; a++)\n\n      {\n\n      PWMblue(255-a);\n\n      PWMred(a);\n\n      _delay_ms(wait);\n\n      }\n\n      }\n\n      }\n\n```"]