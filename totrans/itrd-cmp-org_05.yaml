- en: '**5'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LOGIC GATES**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg23_Image_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous chapter, you learned about Boolean algebra expressions and how
    to implement them using logic gates. In this chapter, you’ll learn how to implement
    logic gates in hardware using *transistors*, the solid-state electronic devices
    used to implement the on/off switches we’ve been discussing so far in this book.
  prefs: []
  type: TYPE_NORMAL
- en: To help you to understand how transistors operate, we’ll start with a simple
    introduction to electronics. From there, you’ll learn how transistors can be connected
    in pairs to switch faster and use less electrical power. We’ll end the chapter
    with some practical considerations regarding the use of transistors to construct
    logic gates.
  prefs: []
  type: TYPE_NORMAL
- en: '**Crash Course in Electronics**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You don’t need to be an electrical engineer to understand how logic gates work,
    but some understanding of the basic concepts can be helpful. In this section,
    I provide a brief overview of the fundamental concepts of electronic circuits.
    We’ll begin with two definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Current**   Refers to the movement of electrical charge. Electrical charge
    is measured in *coulombs (C)*. A flow of 1 C per second (1 C/s) is defined as
    1 *ampere (A)*, often abbreviated as *amp*. Current flows through an electrical
    circuit only if there is a completely connected path from one side of the power
    source to the other.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Voltage**   Also called *potential difference*, refers to the difference
    in electrical energy per unit charge between two points in an electrical circuit.
    One *volt (V)* is defined as the electrical difference between two points on a
    *conductor* (the medium the current flows through) when 1 A of current flowing
    through the conductor dissipates 1 watt (W) of power.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A computer is constructed from the following electronic components:'
  prefs: []
  type: TYPE_NORMAL
- en: Power sources that provide the electrical power
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive components that affect current flow and voltage levels but whose characteristics
    cannot be altered by another electronic component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active components that switch between various combinations of the power source,
    passive components, and other active components under the control of one or more
    other electronic components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conductors that connect the other components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at how each of these electronic components works.
  prefs: []
  type: TYPE_NORMAL
- en: '***Power Supplies and Batteries***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In almost all countries, electrical power comes in the form of *alternating
    current (AC)*. For AC, a plot of the magnitude of the voltage versus time shows
    a sinusoidal wave shape. Computer circuits use *direct current (DC)* power, which,
    unlike AC, does not vary over time. A power supply is used to convert AC to DC,
    as shown in [Figure 5-1](ch05.xhtml#ch5fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg114_Image_125.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-1: An AC/DC power supply*'
  prefs: []
  type: TYPE_NORMAL
- en: Batteries also provide DC electrical power. When drawing circuits, we’ll use
    the symbol for a battery ([Figure 5-2](ch05.xhtml#ch5fig2)) to designate a DC
    power supply. The power supply in [Figure 5-2](ch05.xhtml#ch5fig2) provides 5
    V DC.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg115_Image_126.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-2: The circuit symbol for a 5 V DC power source*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapters, you’ve seen that everything that happens in a computer
    is based on a system of `1`s and `0`s. But how are these `1`s and `0`s physically
    represented? Computer circuits distinguish between two different voltage levels
    to provide logical `0`s and `1`s. For example, logical `0` may be represented
    by 0 V DC and logical `1` by 5 V DC. The reverse could also be implemented: 5
    V as logical `0` and 0 V as logical `1`. The only requirement is that the hardware
    design be consistent. Luckily, programmers don’t need to worry about the actual
    voltages used; that’s best left to the computer hardware engineers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Electronic devices are designed to operate reliably within a range of voltages.
    For example, a device designed to operate at a nominal 5 V typically has a tolerance
    of ±5%, or 4.75 to 5.25 V.*'
  prefs: []
  type: TYPE_NORMAL
- en: The components in a computer circuit constantly switch between the two voltage
    levels. Each voltage switch takes time, which limits how fast a given circuit
    can complete an operation. As you’ll see in the “Transistors” section on [page
    96](ch05.xhtml#ch05lev1sec2), speeding up the switching times uses more power,
    which creates heat. Excessive heat can damage the components, which limits the
    speed of calculations. The time-dependent characteristics of the circuit components
    are an important design consideration for computer hardware engineers. We’ll look
    at these characteristics in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '***Passive Components***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'All electrical circuits have the following electromagnetic properties, which
    are distributed throughout the circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resistance**   Impedes current flow, thus dissipating energy. The electrical
    energy is transformed into heat.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Capacitance**   Stores energy in an electric field. Voltage across a capacitance
    cannot change instantaneously.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inductance**   Stores energy in a magnetic field. Current through an inductance
    cannot change instantaneously.'
  prefs: []
  type: TYPE_NORMAL
- en: It takes time for energy to be stored as an electric field, so *capacitance
    impedes time changes in voltage*. And it takes time for energy to be stored as
    a magnetic field, so *inductance impedes time changes in current*. These two properties
    are lumped together with resistance and called *impedance*. The impedance to changes
    slows down the switching that takes place in a computer, and the resistance consumes
    electrical power. We’ll be looking at the general timing characteristics of these
    properties in the remainder of this section, but will leave a discussion of power
    consumption to more advanced books on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a feel for the effects of each of these properties, we’ll consider the
    discrete electronic devices that are used to place these properties in a specific
    location in a circuit: resistors, capacitors, and inductors. These are part of
    a broader class of electronic components called *passive components*, which cannot
    be controlled electronically; they simply consume or store energy. [Figure 5-3](ch05.xhtml#ch5fig3)
    shows the circuit symbols for the passive electronic devices we’ll be discussing
    here.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg116_Image_127.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-3: Circuit symbols for passive devices*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Switches**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'A *switch* can be in one of two positions: open or closed. In the open position,
    there is no connection between the two ends, and no conduction occurs. When a
    switch is closed, the connection between the two ends is complete, thus conducting
    electricity. The symbol in [Figure 5-3](ch05.xhtml#ch5fig3)(a) typically indicates
    a switch that is activated manually. In the section “Transistors” on [page 96](ch05.xhtml#ch05lev1sec2),
    you’ll learn that a computer uses transistors for open/closed switches, which
    are controlled electronically, thus implementing the on/off logic that forms the
    basis of a computer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resistors**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A *resistor* is used to limit the amount of current in a specific location in
    a circuit. By limiting the current flow into a capacitor or inductor, a resistor
    affects the time it takes for these other devices (discussed in “Capacitors” on
    [page 90](ch05.xhtml#ch05lev3sec3) and “Inductors” on [page 93](ch05.xhtml#ch05lev3sec4))
    to build up their energy storage. The amount of resistance is usually chosen in
    conjunction with the amount of capacitance or inductance to provide specific timing
    characteristics. Resistors are also used to limit current flowing through a device
    to nondestructive levels.
  prefs: []
  type: TYPE_NORMAL
- en: As it limits current flow, a resistor irreversibly transforms the electrical
    energy into heat. A resistor doesn’t store energy, unlike a capacitor or inductor,
    which can return the stored energy to the circuit at a later time.
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between voltage and current for a single resistor is given
    by *Ohm’s law*,
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg116_Image_128.jpg) where *V*(*t*) is the voltage difference
    across the resistor at time *t*, *I*(*t*) is the current flowing through it at
    time *t*, and *R* is the value of the resistor. Resistor values are specified
    in *ohms*.'
  prefs: []
  type: TYPE_NORMAL
- en: The circuit shown in [Figure 5-4](ch05.xhtml#ch5fig4) shows two resistors connected
    through a switch to a power supply, which supplies 5 V. The Greek letter Ω is
    used to indicate ohms, and kΩ indicates 10³ Ω. Since current can flow only in
    a closed path, no current flows until the switch is closed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg117_Image_129.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-4: Two resistors in series with a power supply and switch*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Figure 5-4](ch05.xhtml#ch5fig4), both resistors are in the same path, so
    when the switch is closed, the same current, *I*, flows through each of them.
    Resistors that are in the same current flow path are said to be *connected in
    series*. To determine the amount of current flowing from the power supply, we
    need to compute the total resistance in the path of the current. In this example,
    this is the sum of the two resistors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg117_Image_130.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Thus, the 5 V is applied across a total of 2.5 kΩ. Solving for *I*, and leaving
    out *t* because the power supply voltage doesn’t vary with time, we get
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg117_Image_131.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where mA is milliamps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now determine the voltage difference between points A and B in the circuit
    in [Figure 5-4](ch05.xhtml#ch5fig4) by multiplying the resistor value and current:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg117_Image_132.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, the voltage difference between points B and C is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg117_Image_133.jpg) Thus, connecting the resistors in series
    serves as a *voltage divider*, dividing the 5 V between the two resistors: 2.0
    V across the 1.0 kΩ resistor and 3.0 V across the 1.5 kΩ resistor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-5](ch05.xhtml#ch5fig5) shows the same two resistors *connected in
    parallel*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg118_Image_134.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-5: Two resistors in parallel*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Figure 5-5](ch05.xhtml#ch5fig5), the full voltage of the power supply,
    5 V, is applied across points A and C when the switch is closed. Thus, each resistor
    has 5 V applied across it, and we can use Ohm’s law to compute the current through
    each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg118_Image_135.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The total current from the power supply when the switch is closed, *I[T]* =
    *I*[1] + *I*[2], is divided at point A to supply both resistors. It must equal
    the sum of the two currents through the resistors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg118_Image_136.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Capacitors**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A *capacitor* stores energy in the form of an *electric field*, which is essentially
    the electric charge at rest. A capacitor initially allows current to flow into
    it. But instead of providing a continuous path for the current flow, it stores
    the electric charge, creating an electric field and causing the current flow to
    decrease over time.
  prefs: []
  type: TYPE_NORMAL
- en: Since it takes time for the electric field to build up, capacitors are often
    used to smooth out rapid changes in voltage. When there is a sudden increase in
    current flow into a capacitor, the capacitor tends to absorb the electric charge.
    Then, when the current flow suddenly decreases, the stored electric charge is
    released from the capacitor.
  prefs: []
  type: TYPE_NORMAL
- en: The voltage across a capacitor changes with time according to
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg119_Image_137.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where *V*(*t*) is the voltage difference across the capacitor at time *t*, *I*(*t*)
    is the current flowing through it at time *t*, and *C* is the value of the capacitor
    in *farads* (F).
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*In case you haven’t studied calculus, the* ∫ *symbol represents* integration,
    *which can be thought of as “infinitesimal summation.” This equation says that
    the voltage sums up as time increases from 0 to the current time,* t. *You’ll
    see a graphic view of this in [Figure 5-7](ch05.xhtml#ch5fig7).*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-6](ch05.xhtml#ch5fig6) shows a 1.0 microfarad (μF) capacitor being
    charged through a 1.0 kΩ resistor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg119_Image_138.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-6: A capacitor in series with a resistor*'
  prefs: []
  type: TYPE_NORMAL
- en: As you will see later in this chapter, this circuit is a rough simulation of
    the output of one transistor connected to the input of another. The output of
    the first transistor (which acts like the power supply plus resistor in [Figure
    5-6](ch05.xhtml#ch5fig6)) has resistance, and the input to the second transistor
    has capacitance. The switching behavior of the second transistor depends upon
    the voltage across the (equivalent) capacitor, *V[BC]*(*t*), reaching a threshold
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the time it takes for the voltage across the capacitor to reach
    a threshold value. Assuming the voltage across the capacitor, *V[BC]*, is 0 V
    when the switch is first closed, current flows through the resistor and into the
    capacitor. The voltage across the resistor plus the voltage across the capacitor
    must be equal to the voltage that is available from the power supply. That is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg119_Image_139.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Starting with the voltage across the capacitor, *V[BC]*, at 0 V, when the switch
    is first closed, the full 5.0 V of the power supply will appear across the resistor.
    Thus, the initial current flow in the circuit will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg119_Image_140.jpg) This initial surge of current into
    the capacitor causes the voltage across the capacitor to build up toward the power
    supply voltage. The previous integral equation shows that this buildup decreases
    exponentially as the voltage across the capacitor approaches its final value.'
  prefs: []
  type: TYPE_NORMAL
- en: As the voltage across the capacitor, *V[BC]*(*t*), increases, the voltage across
    the resistor, *V[AB]*(*t*), must decrease. When the voltage across the capacitor
    finally equals the voltage of the power supply, the voltage across the resistor
    is 0 V and the current flow in the circuit is zero. The rate of the exponential
    decrease in current flow is given by the product of the resistor value and the
    capacitor value, *RC*, called the *time constant*. For the values of *R* and *C*
    in this example, we get
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg120_Image_141.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where s is seconds and ms is milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming the capacitor in [Figure 5-6](ch05.xhtml#ch5fig6) has 0 V across it
    when the switch is closed, the voltage that develops across the capacitor over
    time is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg120_Image_142.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[Figure 5-7](ch05.xhtml#ch5fig7) shows this graphically for the circuit in
    [Figure 5-6](ch05.xhtml#ch5fig6). The left y-axis shows voltage across the capacitor,
    while the right y-axis voltage is across the resistor. Note that the scales go
    in opposite directions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg120_Image_143.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-7: A capacitor charging over time*'
  prefs: []
  type: TYPE_NORMAL
- en: At time *t* = 1.0 ms (one time constant), the voltage across the capacitor is
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg120_Image_144.jpg)'
  prefs: []
  type: TYPE_IMG
- en: which is more than the threshold voltage of the typical transistors used in
    a computer. You’ll learn more about this later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'After six time constants have passed, the voltage across the capacitor is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg121_Image_145.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this time, the voltage across the resistor is essentially 0 V and current
    flow is very low.
  prefs: []
  type: TYPE_NORMAL
- en: '**Inductors**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: An *inductor* stores energy in the form of a *magnetic field*, which is created
    by electric charge in motion. An inductor initially prevents the flow of electrical
    charge, requiring time for the magnetic field to build. By providing a continuous
    path for the flow of electrical charge (current), an inductor creates the magnetic
    field.
  prefs: []
  type: TYPE_NORMAL
- en: In a computer, inductors are mainly used in the power supply and the circuitry
    that connects the power supply to the CPU. If you have access to the inside of
    a computer, you can likely see a small (about 1 cm diameter) donut-shaped device
    with wire wrapped around it on the motherboard near the CPU. This is an inductor
    used to smooth the power supplied to the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: Although either an inductor or a capacitor can be used to smooth the power,
    the inductor does it by resisting current changes and the capacitor does it by
    resisting voltage changes. A discussion of which one, or both, to use for smoothing
    is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between voltage *V*(*t*) at time *t* across an inductor and
    current flow through it, *I*(*t*), is given by
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg121_Image_146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where *L* is the value of the inductor in *henrys (H)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Again, we’re using some calculus here. The* dI*(*t*)/*dt *notation represents
    differentiation, which is the rate of change of* I*(*t*) with respect to time,*
    t*. This equation says that the voltage at time* t *is proportional to the rate
    of change of* I*(*t*) at that time. (You’ll see a graphic view of this shortly,
    in [Figure 5-9](ch05.xhtml#ch5fig9).)*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-8](ch05.xhtml#ch5fig8) shows a 1.0 μH inductor connected in series
    with a 1.0 kΩ resistor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg121_Image_147.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-8: An inductor in series with a resistor*'
  prefs: []
  type: TYPE_NORMAL
- en: When the switch is open, no current flows through this circuit. When it closes,
    the inductor initially impedes the flow of current, and it takes time for a magnetic
    field to be built up in the inductor. Before the switch is closed, no current
    is flowing through the resistor, so the voltage across it, *V[BC]*, is 0 V. The
    voltage across the inductor, *V[AB]*, is the full 5 V of the power supply. As
    current begins to flow through the inductor, the voltage across the resistor,
    *V[BC]*(*t*), grows. This results in an exponentially decreasing voltage across
    the inductor. When the voltage across the inductor finally reaches 0 V, the voltage
    across the resistor is 5 V and current flow in the circuit is 5.0 mA.
  prefs: []
  type: TYPE_NORMAL
- en: The rate of the exponential voltage decrease is given by the time constant *L*/*R*.
    Using the values of *R* and *L* in [Figure 5-8](ch05.xhtml#ch5fig8), we get
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg122_Image_148.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where ns is nanoseconds.
  prefs: []
  type: TYPE_NORMAL
- en: When the switch is closed, the voltage that develops across the inductor over
    time is given by
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg122_Image_149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: as shown in [Figure 5-9](ch05.xhtml#ch5fig9). The left y-axis shows voltage
    across the resistor for the circuit in [Figure 5-8](ch05.xhtml#ch5fig8), with
    the right y-axis voltage being across the inductor. Note that the scales go in
    opposite directions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg122_Image_150.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-9: An inductor charging over time*'
  prefs: []
  type: TYPE_NORMAL
- en: 'At time *t* = 1.0 ns (one time constant), the voltage across the inductor is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg122_Image_151.jpg) After about 6 ns (six time constants),
    the voltage across the inductor is essentially equal to 0 V. At this time, the
    full voltage of the power supply is across the resistor and a steady current of
    5.0 mA flows.'
  prefs: []
  type: TYPE_NORMAL
- en: The circuit in [Figure 5-8](ch05.xhtml#ch5fig8) shows how inductors can be used
    with a CPU power supply. The power supply in this circuit simulates the computer
    power supply, and the resistor simulates the CPU, which consumes the electrical
    energy from the power supply. The voltage produced by a power supply includes
    *noise*, which consists of small, high-frequency fluctuations added to the DC
    level. As shown in [Figure 5-9](ch05.xhtml#ch5fig9), the voltage supplied to the
    CPU, *V[BC]*(*t*), changes little over short periods of time. The inductor connected
    in series between the power supply and the CPU acts to smooth out the voltage
    that powers the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: '***Power Consumption***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An important part of hardware design is power consumption, especially in battery-powered
    devices. Of the three electromagnetic properties we’ve discussed here, resistance
    is the primary consumer of power.
  prefs: []
  type: TYPE_NORMAL
- en: '*Energy* is the ability to cause change, and *power* is a measure of how fast
    energy can be used to make that change. The basic unit of energy is the *joule
    (J)*. The basic unit of power is the *watt (W)*, which is defined as expending
    1 joule per second (J/s). For example, I have a backup battery that can store
    240 watt-hours (Wh). That means it can store enough energy to provide 240 watts
    for 1 hour, or 240 Wh *×* 3,600 s/h = 864,000 J. The units for volt and ampere
    are defined such that 1 W = 1 V *×* 1 A. This gives rise to the formula for power,'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg123_Image_152.jpg)'
  prefs: []
  type: TYPE_IMG
- en: where *P* is the power used, *V* is the voltage across the component, and *I*
    is the current flowing through it.
  prefs: []
  type: TYPE_NORMAL
- en: After a brief charging time, a capacitor prevents current flow. This equation
    shows that the power consumption of a capacitor then goes to zero. The energy
    used to charge the capacitor is stored in the form of an electrical field. Similarly,
    the voltage across an inductor goes to zero after a brief charging time, resulting
    in the amount of power consumed by the inductor going to zero. An inductor stores
    the charging energy in the form of a magnetic field.
  prefs: []
  type: TYPE_NORMAL
- en: However, a resistor doesn’t store energy. As long as there is a voltage difference
    across a resistor, current flows through it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The power used by a resistor, *R*, is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg123_Image_153.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This power is converted to heat in the resistor. Since power consumption increases
    by the square of the current, a common hardware design goal is to reduce the amount
    of current flow.
  prefs: []
  type: TYPE_NORMAL
- en: This section has been an idealized discussion of the passive components that
    computer engineers include in their designs. In the real world, each component
    includes elements of all three characteristics—resistance, capacitance, and inductance—that
    the hardware design engineer needs to take into account. These secondary effects
    are subtle and often troublesome in the design.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of this chapter is devoted to discussing the *active components*, which
    are controlled electronically and used to implement the switches that are the
    basis for a computer. As you will see, the active components include resistance
    and capacitance, which affect the design of the circuits they’re used in.
  prefs: []
  type: TYPE_NORMAL
- en: '**Transistors**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In previous chapters, I described a computer as a collection of two-state switches
    and discussed how data can be represented by the settings, `0` or `1`, of these
    switches. Then we moved on to look at how `0`s and `1`s can be combined using
    logic gates to implement logical functions. In this section, you’ll learn how
    transistors can be used to implement the two-state switches that make up a computer.
  prefs: []
  type: TYPE_NORMAL
- en: A *transistor* is a device whose resistance can be controlled electronically,
    thus making it an active component. The ability to be controlled electronically
    is what distinguishes the switches made from transistors from the simple on/off
    switches you saw earlier in the chapter, which could be controlled mechanically.
    Before examining how a transistor can be used as a switch, let’s look at how we
    would implement a logic gate using mechanical on/off switches. We’ll use the NOT
    gate for this example.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-10](ch05.xhtml#ch5fig10) shows two push-button switches connected
    in series between 5 V and 0 V.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg124_Image_154.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-10: A NOT gate made from two push-button switches*'
  prefs: []
  type: TYPE_NORMAL
- en: The top switch is normally closed. When its button is pushed (from the left
    side), the connection between the two small circles is broken, thus opening the
    circuit at this point. The bottom switch is normally open. When its button is
    pushed, a connection is made between the two small circles, thus completing the
    circuit at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll let 5 V represent a `1` and 0 V a `0`. The input to this NOT gate, *x*,
    pushes the two buttons simultaneously. We will control *x* in the following way:
    when *x* = `1`, we’ll push the two buttons, and when *x* = `0`, we will not push
    the buttons. When the buttons are not pushed (*x* = `0`), the 5 V are connected
    to the output, ¬*x*, which represents `1`. When the buttons are pushed (*x* =
    `1`), the 5 V are disconnected and the 0 V, which represents `0`, are connected
    to the output. Thus, an input of `1` gets an output of `0` and an input of `0`
    gets an output of `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: Early computing devices used mechanical switches to implement their logic, but
    the results were very slow by today’s standards. Modern computers use transistors,
    which are electronic devices made from semiconductor materials that can be switched
    quickly between their conducting and non-conducting states under electronic control.
  prefs: []
  type: TYPE_NORMAL
- en: Just as with the mechanically controlled push-button example, we use two different
    voltages to represent `1` and `0`. For example, we might use a high voltage, say
    +5 V, to represent `1` and a low voltage, say 0 V, to represent `0`. But transistors
    can be switched on or off electronically, which makes them much faster than the
    mechanical switches used in the original computers. Transistors also take up much
    less space and consume much less electrical power.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, we’ll look at two transistors commonly used in modern
    computers: the MOSFET switch and the CMOS switch.'
  prefs: []
  type: TYPE_NORMAL
- en: '***MOSFET Switch***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The most commonly used switching transistor in today’s computer logic circuits
    is the *metal-oxide-semiconductor field-effect transistor (MOSFET)*. There are
    several types of MOSFET, which use different voltage levels and polarities. I’ll
    describe the behavior of the most common type, the *enhancement-mode MOSFET*,
    and leave the details of the other variations to more advanced books on the topic.
    The brief discussion here will help you understand the basics of how they work.
  prefs: []
  type: TYPE_NORMAL
- en: The basic material in a MOSFET is typically silicon, which is a *semiconductor*,
    meaning it conducts electricity, but not very well. Its conductivity is improved
    by adding an impurity, a process called *doping*. Depending on the type of impurity,
    the electrical conductivity can be either the flow of electrons or the flow of
    lack of electrons (called *holes*). Since electrons have a negative electrical
    charge, the type that conducts electrons is called *N-type* and the type that
    conducts holes is called *P-type*. The main conduction path through a MOSFET is
    the *channel*, which is connected between the *source* and the *drain* terminals
    on the MOSFET. The *gate* is made from the opposite type of semiconductor and
    controls the conductivity through the channel.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-11](ch05.xhtml#ch5fig11) shows the two basic types of MOSFET: N-channel
    and P-channel. Here, I’ve shown each MOSFET connected to a 5 V power source through
    a resistor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg126_Image_155.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-11: The two basic types of MOSFETs*'
  prefs: []
  type: TYPE_NORMAL
- en: These are simplified circuits, as the intention is just to provide context for
    discussing how MOSFETs work. Each MOSFET has three connection points, or *terminals*.
    The gate is used as the input terminal. Voltage applied to the gate, relative
    to the voltage applied to the source, controls current flow through the MOSFET.
    The drain is used as the output. The source of an N-channel MOSFET is connected
    to the lower voltage of the power supply, while the source of a P-channel is connected
    to the higher voltage.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about complements in Boolean algebra, it probably does not surprise
    you that the two types of MOSFETs have complementary behavior. You’ll see in the
    following sections how we can connect them in complementary pairs that make for
    faster, more efficient switches than using only one type.
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll look at how each works as a single switching device, starting with
    the N-channel MOSFET.
  prefs: []
  type: TYPE_NORMAL
- en: '**N-Channel MOSFET**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: In [Figure 5-11](ch05.xhtml#ch5fig11)(a), the drain of the N-channel MOSFET
    is connected to the 5 V side of the power supply through the resistor, R, and
    the source is connected to the 0 V side.
  prefs: []
  type: TYPE_NORMAL
- en: When the voltage applied to the gate is positive with respect to the source,
    the resistance between the drain and the source of the N-channel MOSFET decreases.
    When this voltage reaches a threshold value, typically in the range of 1 V, the
    resistance becomes very low, thus providing a good conduction path for current
    between the drain and the source. The resulting circuit is equivalent to [Figure
    5-12](ch05.xhtml#ch5fig12)(a).
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 5-12](ch05.xhtml#ch5fig12)(a), current flows from the 5 V connection
    of the power supply to the 0 V connection through the resistor, R. The voltage
    at the drain will be 0 V. A problem with this current flow is that the resistor
    consumes power, simply converting it to heat. In a moment, you’ll see the reason
    we don’t want to increase the amount of resistance to limit the current flow to
    reduce power consumption.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg127_Image_156.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-12: An N-channel MOSFET switch equivalent circuit: (a) switch closed,
    (b) switch open*'
  prefs: []
  type: TYPE_NORMAL
- en: If the voltage applied to the gate is switched to be nearly the same as the
    voltage applied to the source—0 V in this example—the MOSFET turns off, resulting
    in the equivalent circuit shown in [Figure 5-12](ch05.xhtml#ch5fig12)(b). The
    drain is typically connected to another MOSFET’s gate, which draws current only
    briefly as it switches from one state to the other. After this brief switching
    of state, the connection of the drain to another MOSFET’s gate does not draw current.
    Since no current flows through the resistor, there is no voltage difference across
    it. Thus, the voltage at the drain will be 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: The resistor is said to be acting as the *pull-up device*, because when the
    MOSFET is turned off, the circuit is completed through the resistor, which acts
    to pull the voltage on the drain up to the higher voltage of the power supply.
  prefs: []
  type: TYPE_NORMAL
- en: '**P-Channel MOSFET**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Now, let’s look at the P-channel MOSFET, shown in [Figure 5-11](ch05.xhtml#ch5fig11)(b).
    The drain is connected to the lower voltage (0 V) through a resistor, R, and the
    source is connected to the higher-voltage power supply (5 V). When the voltage
    applied to the gate is switched to be nearly the same as the voltage applied to
    the source, the MOSFET turns off. In this case, the resistor acts as a *pull-down
    device* to pull the voltage on the drain down to 0 V. [Figure 5-13](ch05.xhtml#ch5fig13)(a)
    shows the equivalent circuit.
  prefs: []
  type: TYPE_NORMAL
- en: When the voltage applied to the gate is negative with respect to the source,
    the resistance between the drain and the source of the P-channel MOSFET decreases.
    When this voltage reaches a threshold value, typically in the range of –1 V, the
    resistance becomes very low, providing a good conduction path for current between
    the drain and the source. [Figure 5-13](ch05.xhtml#ch5fig13)(b) shows the resulting
    equivalent circuit when the gate is –5 V with respect to the source.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg128_Image_157.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-13: A P-channel MOSFET switch equivalent circuit: (a) switch open,
    (b) switch closed*'
  prefs: []
  type: TYPE_NORMAL
- en: The resistors in the MOSFET circuits in [Figures 5-11](ch05.xhtml#ch5fig11)
    present a couple of problems with both MOSFET types. We’ll look at those next.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resistors in MOSFET Circuits**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The equivalent circuits in [Figures 5-12(a)](ch05.xhtml#ch5fig12) and [5-13(b)](ch05.xhtml#ch5fig13)
    show that the respective MOSFET in its on state acts like a closed switch, thus
    causing current to flow through the pull-up or pull-down resistor. The current
    flow through the resistor when the MOSFET is in its on state consumes power that
    is simply converted to heat.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the pull-up and pull-down resistors using power when a MOSFET
    is in its on state, there’s another problem with this hardware design. Although
    the gate of a MOSFET draws essentially no current to remain in either an on or
    an off state, a brief burst of current into the gate is required to change its
    state. That current is supplied by the device connected to the gate, probably
    from the drain of another MOSFET. I won’t go into details in this book, but the
    amount of current that can be supplied at the drain from this other MOSFET is
    largely limited by its pull-up or pull-down resistor. The situation is essentially
    the same as that in [Figures 5-6](ch05.xhtml#ch5fig6) and [5-7](ch05.xhtml#ch5fig7),
    where you saw that the time it takes to charge a capacitor is longer for higher
    resistance values.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, there’s a trade-off here: the larger the resistors, the lower the current
    flow, which reduces power consumption when the MOSFET is in the on state. But
    a larger resistor also reduces the amount of current available at the drain, thus
    increasing the amount of time it takes to switch a MOSFET connected to the drain.
    We’re left with a dilemma: small pull-up and pull-down resistors increase power
    consumption, but large resistors slow down the computer.'
  prefs: []
  type: TYPE_NORMAL
- en: '***CMOS Switch***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can solve this dilemma with *complementary metal-oxide semiconductor (CMOS)*
    technology. To see how this works, let’s eliminate the pull-up and pull-down resistors
    and connect the drains of a P-channel and an N-channel. The P-channel will replace
    the pull-up resistor in the N-channel circuit, and the N-channel will replace
    the pull-down resistor in the P-channel circuit. We’ll also connect the two gates,
    giving the circuit shown in [Figure 5-14](ch05.xhtml#ch5fig14).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg129_Image_158.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-14: A CMOS inverter (NOT) circuit*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 5-15](ch05.xhtml#ch5fig15)(a) shows the equivalent circuit with the
    gates at the higher power supply voltage of 5 V. The pull-up MOSFET (a P-channel)
    is off and the pull-down MOSFET (an N-channel) is on, so the drains are pulled
    down to the lower power supply voltage of 0 V. In [Figure 5-15](ch05.xhtml#ch5fig15)(b),
    the gates are at the lower power supply voltage of 0 V, which turns the P-channel
    MOSFET on and the N-channel MOSFET off. The P-channel MOSFET pulls the drains
    up to the higher power supply voltage of 5 V.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg129_Image_159.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-15: A CMOS inverter equivalent circuit: (a) pull-up open and pull-down
    closed, (b) pull-up closed and pull-down open*'
  prefs: []
  type: TYPE_NORMAL
- en: I summarize this behavior in [Table 5-1](ch05.xhtml#ch5tab1).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 5-1:** The Truth Table for a Single CMOS'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Gates** | **Drains** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 V | 5 V |'
  prefs: []
  type: TYPE_TB
- en: '| 5 V | 0 V |'
  prefs: []
  type: TYPE_TB
- en: If we use the gates connection as the input, use the drains connection as the
    output, and let 5 V be logical `1` and 0 V be logical `0`, then the CMOS implements
    a NOT gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two main advantages of using CMOS circuits are:'
  prefs: []
  type: TYPE_NORMAL
- en: They consume very little power. Because of the switching speed difference between
    N-channel and P-channel MOSFETs, only a small amount of current flows during the
    switching period. Less current means less heat, which is often the limiting factor
    in chip design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The circuit responds much faster. A MOSFET can supply the current at its output
    faster than a resistor can, charging the gate of the following MOSFET. This allows
    us to build faster computers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 5-16](ch05.xhtml#ch5fig16) shows an AND gate implemented with three
    CMOSs.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg130_Image_160.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-16: An AND gate using three CMOS transistors*'
  prefs: []
  type: TYPE_NORMAL
- en: The truth table in [Table 5-2](ch05.xhtml#ch5tab2) shows the intermediate output
    from the first two CMOSs (point A in [Figure 5-16](ch05.xhtml#ch5fig16)).
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 5-2:** The Truth Table for the AND Gate of [Figure 5-16](ch05.xhtml#ch5fig16)'
  prefs: []
  type: TYPE_NORMAL
- en: '| ***x*** | ***y*** | **A** | ***x ∧ y*** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | `0` | `1` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | `1` | `1` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `0` | `1` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `1` | `0` | `1` |'
  prefs: []
  type: TYPE_TB
- en: From the truth table, we see that the signal at point A is ¬(*x* ∧ *y*). The
    circuit from point A to the output is a NOT gate. The result at point A is called
    the *NAND* operation. It requires two fewer transistors than the AND operation.
    We’ll look at the implications of this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '**NAND and NOR Gates**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you learned in the previous section, the inherent design of transistors means
    that most circuits invert the signal. That is, for most circuits, a high voltage
    at the input produces a low voltage at the output, and vice versa. As a result,
    an AND gate will typically require a NOT gate at the output to achieve a true
    AND operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also learned that it takes fewer transistors to produce NOT(AND) than a
    regular AND. This combination is so common that it has been given a name: the
    *NAND gate*. And, of course, we have an equivalent with the OR gate, called the
    *NOR gate*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NAND**   A binary operator that gives a result of `0` if and only if *both*
    operands are `1` and gives `1` otherwise. We’ll use ¬(*x* ∧ *y*) to designate
    the NAND operation. [Figure 5-17](ch05.xhtml#ch5fig17) shows the hardware symbol
    for the NAND gate along with a truth table showing its operation on inputs *x*
    and *y*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg131_Image_161.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-17: The NAND gate acting on two variables,* x *and* y'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOR**   A binary operator that gives a result of `0` if at least one of the
    two operands is `1` and gives `1` otherwise. We’ll use ¬(*x* ∨ *y*) to designate
    the NOR operation. [Figure 5-18](ch05.xhtml#ch5fig18) shows the hardware symbol
    for the NOR gate along with a truth table showing its operation on inputs *x*
    and *y*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg131_Image_162.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-18: The NOR gate acting on two variables,* x *and* y'
  prefs: []
  type: TYPE_NORMAL
- en: Notice the small circle at the output of the NAND and NOR gates in [Figures
    5-17](ch05.xhtml#ch5fig17) and [5-18](ch05.xhtml#ch5fig18). This signifies *NOT*,
    just as with the NOT gate you saw in [Figure 4-3](ch04.xhtml#ch4fig3).
  prefs: []
  type: TYPE_NORMAL
- en: Although in the previous chapter we explicitly showed NOT gates when inputs
    to gates are complemented, it’s common to simply use these small circles at the
    input to signify the complement. For example, [Figure 5-19](ch05.xhtml#ch5fig19)
    shows an OR gate with both inputs complemented.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg131_Image_163.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-19: An alternative way to draw a NAND gate*'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the truth table shows, this is another way to implement a NAND gate. As
    you learned in [Chapter 4](ch04.xhtml), De Morgan’s law confirms this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg132_Image_164.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NAND as a Universal Gate**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the interesting properties about NAND gates is that they can be used
    to build AND, OR, and NOT gates. This means the NAND gate can be used to implement
    any Boolean function. In this sense, you can think of the NAND gate as a *universal
    gate*. Recalling De Morgan’s law, it probably won’t surprise you that a NOR gate
    can also be used as a universal gate. But the physics of CMOS transistors is such
    that NAND gates are faster and take up less space, so they are almost always the
    preferred solution.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through how to use a NAND gate to build an AND, OR, or NOT gate. To
    build a NOT gate using a NAND gate, simply connect the signal to both inputs of
    the NAND gate, as shown in [Figure 5-20](ch05.xhtml#ch5fig20).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg132_Image_165.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-20: A NOT gate built from a NAND gate*'
  prefs: []
  type: TYPE_NORMAL
- en: To make an AND gate, we can observe that the first NAND gate in [Figure 5-21](ch05.xhtml#ch5fig21)
    produces ¬(*x* ∧ *y*) and connect it to a NOT gate like the one in [Figure 5-20](ch05.xhtml#ch5fig20)
    to produce (*x* ∧ *y*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg132_Image_166.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-21: An AND gate built from two NAND gates*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use De Morgan’s law to derive an OR gate. Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg132_Image_167.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, to implement OR, we need three NAND gates, as in [Figure 5-22](ch05.xhtml#ch5fig22).
    The two NAND gates at the *x* and *y* inputs are connected as NOT gates to produce
    ¬*x* and ¬*y*, which gives ¬(¬*x* ∧ ¬*y*) at the output of the third NAND gate.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg132_Image_168.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-22: An OR gate built from three NAND gates*'
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like we are creating more complexity to build circuits from NAND gates,
    but consider this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg133_Image_169.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Without knowing how logic gates are constructed, it would be reasonable to implement
    this function with the circuit shown in [Figure 5-23](ch05.xhtml#ch5fig23).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg133_Image_170.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-23:* F*(*w, x, y, z*) using two AND gates and one OR gate*'
  prefs: []
  type: TYPE_NORMAL
- en: Although it might seem like we’re going in the wrong direction, let’s add some
    hardware to this circuit. The involution property states that ¬(¬*x*) = *x*, so
    we can add two NOT gates to each path, as shown in [Figure 5-24](ch05.xhtml#ch5fig24).
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg133_Image_171.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-24:* F*(*w, x, y, z*) using two AND gates, one OR gate, and four
    NOT gates*'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the two AND gate/NOT gate combinations that operate on the *w*, *x*,
    *y*, and *z* inputs with [Figure 5-17](ch05.xhtml#ch5fig17), we see that each
    is simply a NAND gate. They will produce ¬(*w* ∧ *x*) and ¬(*y* ∧ *z*) at the
    outputs of the two leftmost NOT gates.
  prefs: []
  type: TYPE_NORMAL
- en: 'You saw from the application of De Morgan’s law in [Figure 5-19](ch05.xhtml#ch5fig19)
    that (¬*a*) ∨ (¬*b*) = ¬(*a* ∧ *b*). In other words, we can replace the combination
    of the two rightmost NOT gates and the OR gate with a single NAND gate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg133_Image_172.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The resulting circuit, shown in [Figure 5-25](ch05.xhtml#ch5fig25), uses three
    NAND gates.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/pg133_Image_173.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5-25:* F*(*w, x, y, z*) using three NAND gates*'
  prefs: []
  type: TYPE_NORMAL
- en: From simply viewing the logic circuit diagrams in [Figures 5-23](ch05.xhtml#ch5fig23)
    and [5-25](ch05.xhtml#ch5fig25), it may seem that we haven’t gained anything in
    this circuit transformation. But we saw in the previous section that a NAND gate
    (point A in [Figure 5-16](ch05.xhtml#ch5fig16)) requires two fewer transistors
    than an AND gate. Thus, the NAND gate implementation is less power-intensive and
    faster. The same is true of an OR gate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conversion from an AND/OR/NOT gate design to one that uses only NAND gates
    is straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: Express the function as a minimal sum of products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert the products (AND terms) and the final sum (OR) to NANDs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a NAND gate for any product with only a single literal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everything I’ve said about NAND gates here applies to NOR gates. You simply
    apply De Morgan’s law to find the complement of everything. But as mentioned previously,
    NAND gates are typically faster and take up less space than NOR gates, so they
    are almost always the preferred solution.
  prefs: []
  type: TYPE_NORMAL
- en: As with software, hardware design is an iterative process. Most problems do
    not have a unique solution, and you often need to develop several designs and
    analyze each one within the context of the available hardware. As the previous
    example shows, two solutions that look the same on paper may be very different
    at the hardware level.
  prefs: []
  type: TYPE_NORMAL
- en: '**YOUR TURN**'
  prefs: []
  type: TYPE_NORMAL
- en: 5.1     Design a NOT gate, an AND gate, and an OR gate using NOR gates.
  prefs: []
  type: TYPE_NORMAL
- en: 5.2     Design a circuit using NAND gates that detects the “below” condition
    for two 2-bit integers, *x* and *y*, *F*(*x*, *y*) = 1\. It’s common to use below/above
    for unsigned integer comparisons and less than/greater than for signed integer
    comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: '**What You’ve Learned**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Basic electronics concepts**   Resistance, capacitance, and inductance affect
    the voltages and current flow in an electronic circuit.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Transistors**   Semiconductor devices that can be used as electronically
    controlled switches.'
  prefs: []
  type: TYPE_NORMAL
- en: '**MOSFET**   The most commonly used switching device for implementing logic
    gates in computers. Metal-oxide-semiconductor field-effect transistors come in
    N-channel and P-channel types.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CMOS**   N-channel and P-channel MOSFETs are paired in a complementary configuration
    to increase switching speed and reduce power consumption.'
  prefs: []
  type: TYPE_NORMAL
- en: '**NAND and NOR gates**   These require fewer transistors than AND and OR gates
    because of the inherent electronic characteristics of transistors.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how simple logic gates are connected in circuits
    to implement the complex operations needed to build a computer.
  prefs: []
  type: TYPE_NORMAL
