- en: '**1**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1**'
- en: GETTING STARTED
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: '![Image](../images/circle.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/circle.jpg)'
- en: In this chapter, you’ll get started by installing Java, Eclipse, and Android
    Studio onto your computer, and then you’ll get familiar with some basic Java programming
    by testing out some commands in the interactive command line shell, JShell.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过安装 Java、Eclipse 和 Android Studio 来开始你的开发旅程，并通过在交互式命令行 shell（JShell）中测试一些命令来熟悉基本的
    Java 编程。
- en: Java is a powerful, multiplatform programming language that’s free to download
    and install on Windows, macOS, and Linux. Eclipse, an industry-standard *integrated
    development environment (IDE)*, is a toolkit for building Java apps quickly and
    easily. And Android Studio is the development environment for Android mobile apps
    in Java. It gives you the power to program your own mobile games and apps for
    phones, tablets, and more.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Java 是一种功能强大且跨平台的编程语言，可以免费下载并安装在 Windows、macOS 和 Linux 上。Eclipse 是业界标准的*集成开发环境（IDE）*，是快速轻松构建
    Java 应用的工具包。而 Android Studio 是开发 Android 移动应用的开发环境，它让你能够为手机、平板等设备编写自己的移动游戏和应用。
- en: Java on Windows, macOS, and Linux
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java 在 Windows、macOS 和 Linux 上的表现
- en: One of the great things about Java is that the Java programs you write can run
    on *any* other computer that has the Java Virtual Machine (JVM) software (sometimes
    called the Java Runtime Environment, or JRE) installed. JVM technology allows
    you to write a program once and run the same code on any operating system (Windows,
    macOS, Linux, Android, and more).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java 的一个伟大之处在于，你编写的 Java 程序可以在*任何*安装了 Java 虚拟机（JVM）软件的其他计算机上运行（有时也叫 Java 运行时环境，或
    JRE）。JVM 技术让你可以一次编写程序，并在任何操作系统（Windows、macOS、Linux、Android 等）上运行相同的代码。
- en: This sounds like an obvious idea, but most other programming languages require
    you either to write different code for Windows, macOS, Linux, and smartphones
    or to compile a separate version for each operating system. The JVM is a runtime
    environment that makes this unnecessary.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法看似显而易见，但大多数其他编程语言要求你为 Windows、macOS、Linux 和智能手机编写不同的代码，或者为每个操作系统编译一个独立的版本。而
    JVM 是一个运行时环境，它使得这一切变得不再必要。
- en: '[Figure 1-1](ch1.xhtml#ch1fig1) shows the same graphical Java app running on
    Windows, macOS, and Ubuntu Linux.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1](ch1.xhtml#ch1fig1) 显示了同一个 Java 应用在 Windows、macOS 和 Ubuntu Linux 上运行的图像。'
- en: '![Image](../images/f0002-01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0002-01.jpg)'
- en: '*Figure 1-1: The same Java code running on three different operating systems—Windows,
    macOS, and Linux!*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-1：同一段 Java 代码在三种不同操作系统上运行——Windows、macOS 和 Linux！*'
- en: This simple but powerful concept is one of the reasons Java has been adopted
    by individuals and businesses worldwide.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单而强大的概念是 Java 被全球个人和企业广泛采用的原因之一。
- en: Installing Java 8 and 9 for Developers
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为开发者安装 Java 8 和 9
- en: The Java Development Kit (JDK) is the version of Java for developers or programmers—like
    you! The JDK gives you the power to write and compile your own Java apps that
    you can share with your friends, deploy in a business, or run anywhere on almost
    any device.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java 开发工具包（JDK）是为开发者或程序员（像你一样）准备的 Java 版本。JDK 使你能够编写和编译自己的 Java 应用，这些应用可以与朋友共享、部署到企业中，或者在几乎任何设备上运行。
- en: We’re going to install both versions 8 and 9 of the JDK. That way, we can gain
    the benefits of version 8’s widespread use while also accessing version 9’s newest
    features.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装 JDK 的 8 和 9 版本。这样，我们既能享受到版本 8 的广泛应用，也能体验版本 9 的最新功能。
- en: 'To install JDK 8:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 JDK 8：
- en: 1\. Go to *[http://jdk.java.net/8/](http://jdk.java.net/8/)*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 访问*[http://jdk.java.net/8/](http://jdk.java.net/8/)*。
- en: 2\. Click the **Accept License Agreement** radio button.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 点击**接受许可协议**单选按钮。
- en: 3\. Find the link for your operating system in the list of downloads under JDK,
    and click it. If your operating system is Windows or Linux, choose the 64-bit
    version.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在 JDK 下载列表中找到适合你操作系统的链接，并点击它。如果你的操作系统是 Windows 或 Linux，请选择 64 位版本。
- en: 4\. Open the JDK file from your computer’s *Downloads* directory and install
    the JDK.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 打开你计算机*下载*目录中的 JDK 文件并安装 JDK。
- en: To install JDK 9, go to *[http://jdk.java.net/9/](http://jdk.java.net/9/)* and
    then repeat steps 2–4 from your JDK 8 installation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 JDK 9，请访问*[http://jdk.java.net/9/](http://jdk.java.net/9/)*，然后重复从 JDK 8
    安装的步骤 2 到 4。
- en: '**NOTE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For more detailed, step-by-step instructions in video form, you can preview
    the online course associated with this book for free at* [http://www.udemy.com/java-the-easy-way/](http://www.udemy.com/java-the-easy-way/).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你需要更详细、一步步的视频教学，你可以免费预览本书相关的在线课程，网址为* [http://www.udemy.com/java-the-easy-way/](http://www.udemy.com/java-the-easy-way/)。'
- en: That’s all it takes to get your computer ready to compile and run Java programs
    from the text-based command line or terminal, but we also want to take advantage
    of Java’s ability to create *graphical user interface (GUI)* applications like
    those in [Figure 1-1](ch1.xhtml#ch1fig1). To tap into Java’s GUI awesomeness,
    next we’ll install an integrated development environment called Eclipse.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是让您的计算机准备好从基于文本的命令行或终端编译和运行 Java 程序所需要的一切，但我们还希望利用 Java 创建 *图形用户界面（GUI）* 应用程序的能力，就像
    [图 1-1](ch1.xhtml#ch1fig1) 中所示的那样。为了利用 Java 强大的 GUI 功能，接下来我们将安装一个名为 Eclipse 的集成开发环境。
- en: Installing the Eclipse IDE for Java Developers
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Eclipse Java 开发者版 IDE
- en: Eclipse is one of the most popular IDEs for programming in Java. It’s also open
    source, which means it’s free for both personal and business use, and there’s
    a thriving open source community continually improving and supporting Eclipse.
    There are a number of alternative IDEs for Java, but Eclipse is famous for its
    ease of use in developing Java apps. It’s also pretty easy to install.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 是最流行的 Java 编程 IDE 之一。它也是开源的，这意味着它对于个人和商业使用都是免费的，并且有一个蓬勃发展的开源社区不断改进和支持
    Eclipse。虽然有很多其他的 Java IDE，但 Eclipse 以其在开发 Java 应用程序方面的易用性而闻名。它的安装过程也相当简单。
- en: To install Eclipse on your computer, go to *[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)*,
    download the installer for your operating system (as shown in [Figure 1-2](ch1.xhtml#ch1fig2)),
    and then run it. The current version as of this writing is Eclipse Oxygen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的计算机上安装 Eclipse，请访问 *[http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)*，下载适用于您操作系统的安装程序（如
    [图 1-2](ch1.xhtml#ch1fig2) 所示），然后运行它。截止本文写作时，当前版本为 Eclipse Oxygen。
- en: '![Image](../images/f0003-01.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0003-01.jpg)'
- en: '*Figure 1-2: Download the Eclipse IDE installer for your operating system.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-2：下载适用于您操作系统的 Eclipse IDE 安装程序。*'
- en: You’ll see a menu like the one in [Figure 1-3](ch1.xhtml#ch1fig3). Choose **Eclipse
    IDE for Java Developers** and click **Install**. Be careful to choose the Eclipse
    IDE for Java Developers option and not one of the other options (the Java EE,
    or Enterprise Edition, doesn’t have some of the features we’ll use in this book).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个像 [图 1-3](ch1.xhtml#ch1fig3) 中那样的菜单。选择 **Eclipse IDE for Java Developers**
    并点击 **安装**。请确保选择 Eclipse IDE for Java Developers 选项，而不是其他选项（Java EE 或企业版没有本书中将使用的一些功能）。
- en: Installation may take several minutes to complete.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 安装可能需要几分钟才能完成。
- en: '![Image](../images/f0004-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0004-01.jpg)'
- en: '*Figure 1-3: Choose* ***Eclipse IDE for Java Developers*** *from the Eclipse
    installer menu.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-3：从 Eclipse 安装程序菜单中选择* ***Eclipse IDE for Java Developers*** *。*'
- en: Setting Up Eclipse
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Eclipse
- en: Let’s get our Eclipse installation configured to look and feel like the professional
    development environment it is, complete with the WindowBuilder Editor, a coder-friendly
    color scheme, and easy-to-read fonts.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置 Eclipse 安装，使其看起来和使用起来像一个专业的开发环境，包含 WindowBuilder 编辑器、适合编码的配色方案和易于阅读的字体。
- en: Start Eclipse by clicking the Eclipse icon. When Eclipse starts, it will usually
    ask you where you want to store your *workspace*, which holds all of your Java
    projects, as shown in [Figure 1-4](ch1.xhtml#ch1fig4). You can use the default
    location (on Windows it’s *C:\Users\<YourUserName>\eclipse-workspace\*, on macOS
    it’s */Users/<YourUserName>/Documents/eclipse-workspace/*, and on Linux it’s */home/<YourUserName>/eclipse-workspace/*),
    or you can choose a custom location for your Java workspace folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 Eclipse 图标启动 Eclipse。启动时，Eclipse 通常会询问您希望将 *工作区* 存储在哪里，工作区包含您的所有 Java 项目，如
    [图 1-4](ch1.xhtml#ch1fig4) 所示。您可以使用默认位置（在 Windows 上是 *C:\Users\<YourUserName>\eclipse-workspace\*，在
    macOS 上是 */Users/<YourUserName>/Documents/eclipse-workspace/*，在 Linux 上是 */home/<YourUserName>/eclipse-workspace/*），或者选择自定义位置来存放
    Java 工作区文件夹。
- en: '![Image](../images/f0004-02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0004-02.jpg)'
- en: '*Figure 1-4: Eclipse begins by asking where you would like to store your Java
    projects.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-4：Eclipse 启动时会询问您希望将 Java 项目存储在哪里。*'
- en: If you don’t have another preference, use the default *eclipse-workspace* location.
    No matter what, remember the location of this folder because this is where all
    your Java projects will be stored. If you check the box labeled “Use this as the
    default and do not ask again,” the Eclipse Launcher window won’t pop up every
    time you start Eclipse. If you plan to use multiple workspaces, you might want
    to leave the checkbox unchecked so that you can switch between workspaces easily
    when opening Eclipse.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有其他偏好，使用默认的*eclipse-workspace*位置。不管怎样，请记住这个文件夹的位置，因为所有的 Java 项目都会存储在这里。如果你勾选了“将此设置为默认，并且不再询问”的选项，每次启动
    Eclipse 时，Eclipse 启动窗口将不会弹出。如果你计划使用多个工作区，可能希望保持复选框未勾选，这样在打开 Eclipse 时可以轻松切换工作区。
- en: '**MODIFYING ECLIPSE TO RUN WITH JAVA 9**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**修改 Eclipse 以支持 Java 9**'
- en: 'If Eclipse fails to launch, there’s one more change you’ll need to make. As
    of this writing, Java 9 is still brand-new, and while Eclipse versions Oxygen
    and later support Java 9, some releases require an addition to the *eclipse.ini*
    configuration file to run with Java 9 installed. To make this change, follow these
    steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Eclipse 无法启动，还需要做一个更改。截至本文撰写时，Java 9 仍然是全新的，虽然 Eclipse 版本 Oxygen 及以后的版本支持
    Java 9，但某些版本需要在 *eclipse.ini* 配置文件中添加一行，以便与安装的 Java 9 一起运行。为了进行此更改，请按照以下步骤操作：
- en: '1\. Find your Eclipse installation folder:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 找到你的 Eclipse 安装文件夹：
- en: • On Windows, you can right-click the Eclipse shortcut and choose **Open file
    location**. The *eclipse.ini* file will be in the same folder as the *eclipse.exe*
    program file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 Windows 上，你可以右键点击 Eclipse 快捷方式，选择 **打开文件位置**。*eclipse.ini* 文件与 *eclipse.exe*
    程序文件位于同一个文件夹内。
- en: • On macOS, find the Eclipse app in your *Applications* folder in Finder, CONTROL-click
    the Eclipse app icon, and choose **Show Package Contents**. Open the *Contents*
    folder, then the *Eclipse* folder, and you will see *eclipse.ini* in the list
    of files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 macOS 上，在 Finder 中找到你的 Eclipse 应用程序，按 CONTROL 键点击 Eclipse 图标，选择 **显示包内容**。打开
    *Contents* 文件夹，然后打开 *Eclipse* 文件夹，你会在文件列表中看到 *eclipse.ini*。
- en: • On Linux, go to your *home* folder and open *eclipse/java-oxygen/eclipse*
    to find *eclipse.ini*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 Linux 上，进入你的*home*文件夹，打开*eclipse/java-oxygen/eclipse*，找到*eclipse.ini*文件。
- en: 2\. Right-click or CONTROL-click the *eclipse.ini* file. Choose **Open With
    . . .** and then select Notepad, TextEdit, or another text editor of your choice.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 右键点击或按 CONTROL 键点击 *eclipse.ini* 文件。选择 **打开方式...**，然后选择记事本、TextEdit 或其他你选择的文本编辑器。
- en: '3\. Add the following line to the bottom of the *eclipse.ini* file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在 *eclipse.ini* 文件的底部添加以下一行：
- en: --add-modules=ALL-SYSTEM
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: --add-modules=ALL-SYSTEM
- en: 4\. Save *eclipse.ini* and then reopen Eclipse. Eclipse should launch correctly
    from now on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 保存 *eclipse.ini* 文件后，再次打开 Eclipse。Eclipse 应该能够正常启动了。
- en: The first time you run Eclipse, you’ll see a welcome screen. Depending on your
    version of Eclipse, this screen may include some useful sample projects and tutorials,
    or it might be simpler. Feel free to click around and explore a bit if you’d like,
    and when you’re ready to move ahead, close the Welcome tab by clicking the small
    *X* at the top.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行 Eclipse 时，你会看到一个欢迎界面。根据你所使用的 Eclipse 版本，屏幕上可能会包含一些有用的示例项目和教程，或者可能会更简单一些。如果你愿意，可以随意点击并探索一下，当你准备好继续时，点击欢迎页面顶部的小*X*关闭欢迎标签。
- en: '*Installing the WindowBuilder Editor*'
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*安装 WindowBuilder 编辑器*'
- en: The most important upgrade we’ll make to Eclipse is to install the WindowBuilder
    Editor, which allows us to build windowed applications by dragging and dropping
    GUI elements like buttons, labels, and text fields onto a graphical preview of
    the app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 Eclipse 进行的最重要的升级是安装 WindowBuilder 编辑器，它允许我们通过拖放 GUI 元素，如按钮、标签和文本框到应用程序的图形预览上，来构建带有窗口的应用程序。
- en: Some versions of Eclipse have the WindowBuilder Editor already installed, but
    we’ll go over the steps to install or update it to make sure you’re ready to build
    GUI applications starting in [Chapter 3](ch3.xhtml#ch3).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些版本的 Eclipse 已经安装了 WindowBuilder 编辑器，但我们将介绍安装或更新它的步骤，确保你已经准备好开始构建图形用户界面应用程序，相关内容将在[第
    3 章](ch3.xhtml#ch3)中讨论。
- en: First, go to *[http://www.eclipse.org/windowbuilder/](http://www.eclipse.org/windowbuilder/)*
    and click **Download**. On the download page, find the WindowBuilder version that
    matches your version of Eclipse (for Eclipse Oxygen, that’s version 4.7), right-click
    or CONTROL-click the corresponding link, and copy the link address, as shown in
    [Figure 1-5](ch1.xhtml#ch1fig5).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问 *[http://www.eclipse.org/windowbuilder/](http://www.eclipse.org/windowbuilder/)*
    并点击 **下载**。在下载页面，找到与你的 Eclipse 版本匹配的 WindowBuilder 版本（对于 Eclipse Oxygen，版本是 4.7），右键点击或按住
    CONTROL 点击相应的链接，并复制链接地址，如 [图 1-5](ch1.xhtml#ch1fig5) 所示。
- en: '![Image](../images/f0006-01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0006-01.jpg)'
- en: '*Figure 1-5: Find the latest WindowBuilder Editor download link and copy the
    link address.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-5：查找最新的 WindowBuilder 编辑器下载链接并复制链接地址。*'
- en: Next, come back to Eclipse and select **Help** ▸ **Install New Software**. In
    the **Work with:** text box, paste the URL of the WindowBuilder Editor (for Eclipse
    Oxygen, that’s *[http://download.eclipse.org/windowbuilder/WB/integration/4.7/](http://download.eclipse.org/windowbuilder/WB/integration/4.7/)*),
    click the **Add...** button, and enter `WB` in the Name field in the pop-up, as
    shown in [Figure 1-6](ch1.xhtml#ch1fig6).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，返回 Eclipse 并选择 **帮助** ▸ **安装新软件**。在 **工作区：** 文本框中，粘贴 WindowBuilder 编辑器的
    URL（对于 Eclipse Oxygen，链接是 *[http://download.eclipse.org/windowbuilder/WB/integration/4.7/](http://download.eclipse.org/windowbuilder/WB/integration/4.7/)*），点击
    **添加...** 按钮，并在弹出的对话框中在名称字段输入 `WB`，如 [图 1-6](ch1.xhtml#ch1fig6) 所示。
- en: Click **OK**, and when the WindowBuilder checkbox appears in the install window,
    click **Select All** to install all of the needed WindowBuilder components. Click
    **Next** until you are prompted to accept the license agreement, and finally click
    **Finish**.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **确定**，当安装窗口出现 WindowBuilder 复选框时，点击 **全选** 安装所有需要的 WindowBuilder 组件。点击 **下一步**
    直到提示你接受许可协议，最后点击 **完成**。
- en: '![Image](../images/f0007-01.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0007-01.jpg)'
- en: '*Figure 1-6: Use Eclipse’s Install New Software window to add the WindowBuilder
    Editor.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-6：使用 Eclipse 的“安装新软件”窗口添加 WindowBuilder 编辑器。*'
- en: The software may take a few minutes to install—you’ll see a progress indicator
    in the bottom-right corner of Eclipse. When installation completes, you’ll be
    asked to restart Eclipse. Click **Restart Now**, and the WindowBuilder installation
    will be complete.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程可能需要几分钟——你会在 Eclipse 的右下角看到一个进度指示器。安装完成后，系统会提示你重启 Eclipse。点击 **立即重启**，WindowBuilder
    安装将完成。
- en: Next, let’s add a few optional tweaks to make code in Eclipse easier to read
    by changing the background, text colors, and font.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一些可选的调整，使得 Eclipse 中的代码更易于阅读，通过更改背景、文字颜色和字体。
- en: '*Customizing Eclipse’s Look and Feel*'
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*自定义 Eclipse 的外观和感觉*'
- en: Now that you’ve installed the required elements, you may also want to customize
    Eclipse’s appearance. On Windows and Linux, you can access the Preferences menu
    by going to **Window** ▸ **Preferences**. On macOS, go to the menu bar and select
    **Eclipse** ▸ **Preferences**.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了所需的组件，你可能还想自定义 Eclipse 的外观。在 Windows 和 Linux 上，你可以通过点击 **窗口** ▸ **首选项**
    访问首选项菜单。在 macOS 上，点击菜单栏并选择 **Eclipse** ▸ **首选项**。
- en: For example, you may want to change the *theme* (color palette) and the *font
    size* used in the text editor. Depending on your monitor’s size and the environment
    in which you’re programming, your theme and your font size can make a big difference
    in readability, comfort, and even productivity.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能想更改文本编辑器中使用的*主题*（配色方案）和*字体大小*。根据你显示器的大小以及编程环境的不同，主题和字体大小会对可读性、舒适度，甚至生产力产生很大的影响。
- en: In the Preferences menu, under **General** ▸ **Appearance**, you’ll see the
    Theme option. You can choose from favorites such as Classic (light, grayish background
    with dark fonts) or Dark (black background with brighter, more colorful fonts).
    I prefer the Dark theme because the font colors are brighter against the dark
    background and the display can be easier to read on a monitor or projection screen.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在“首选项”菜单下，点击**常规** ▸ **外观**，你将看到主题选项。你可以选择经典（浅色背景，深色字体）或暗黑（黑色背景，字体更亮且更加丰富多彩）等常用主题。我个人更喜欢暗黑主题，因为在深色背景下，字体颜色更加明亮，且在显示器或投影屏上阅读更为轻松。
- en: Under **General** ▸ **Appearance** ▸ **Colors and Fonts**, you can change the
    font size. In the Colors and Fonts pane on the right, choose **Basic** ▸ **Text
    Font** and click the **Edit** button. The Font menu will pop up. Choose a font
    you can read easily. I prefer Courier New or Consolas. I recommend a font size
    of 18 to 20 and a font style of Bold. The Font window will display a sample of
    the selected font, style, and size, as shown in [Figure 1-7](ch1.xhtml#ch1fig7).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **常规** ▸ **外观** ▸ **颜色和字体** 中，您可以更改字体大小。在右侧的颜色和字体窗格中，选择 **基本** ▸ **文本字体**
    并点击 **编辑** 按钮。字体菜单将弹出。选择一个您容易阅读的字体。我个人推荐 Courier New 或 Consolas。建议的字体大小为 18 至
    20，字体样式为粗体。字体窗口将显示所选字体、样式和大小的示例，如 [图 1-7](ch1.xhtml#ch1fig7) 所示。
- en: '![Image](../images/f0008-01.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0008-01.jpg)'
- en: '*Figure 1-7: The Colors and Fonts preferences menu (left) and the Font preferences
    menu (right)*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-7：颜色和字体偏好菜单（左）和字体偏好菜单（右）*'
- en: Click **OK** when you’re finished with your selections, and you’ll return to
    the main Eclipse workspace. You’ll see your preference settings in effect when
    you begin coding in the Java text editor in [Chapter 2](ch2.xhtml#ch2).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成选择后点击 **确定**，您将返回到主 Eclipse 工作区。当您在 [第 2 章](ch2.xhtml#ch2) 的 Java 文本编辑器中开始编写代码时，您会看到您的偏好设置已生效。
- en: Installing Android Studio for Mobile App Development
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 Android Studio 进行移动应用开发
- en: Android Studio is the official Android mobile app development environment. It
    gives us the ability to design and code mobile apps using Android’s native Java
    programming language. Like Java and Eclipse, Android Studio is free to download,
    install, and use. Because of its large size, Android Studio may take from several
    minutes to several hours to download and install, depending on your internet connection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 是官方的 Android 移动应用开发环境。它使我们能够使用 Android 原生的 Java 编程语言设计和编写移动应用。像
    Java 和 Eclipse 一样，Android Studio 是免费下载、安装和使用的。由于其庞大的体积，Android Studio 可能需要几分钟到几小时不等的时间才能完成下载和安装，具体时间取决于您的网络连接。
- en: To download Android Studio, go to *[http://developer.android.com/studio/](http://developer.android.com/studio/)*
    and click **Download Android Studio**, as shown in [Figure 1-8](ch1.xhtml#ch1fig8).
    Read and agree to the terms and conditions and then click **Download Android Studio
    for <operating system>**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 Android Studio，请访问 *[http://developer.android.com/studio/](http://developer.android.com/studio/)*
    并点击 **下载 Android Studio**，如 [图 1-8](ch1.xhtml#ch1fig8) 所示。阅读并同意条款和条件后，点击 **为 <操作系统>
    下载 Android Studio**。
- en: Follow the instructions to complete the installation. The installation process
    may download additional *software development kit (SDK)* components, and it could
    take several more minutes to install once all the components are downloaded.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 按照说明完成安装。安装过程中可能会下载额外的 *软件开发工具包（SDK）* 组件，一旦所有组件下载完毕，安装可能还需要几分钟时间。
- en: '![Image](../images/f0009-01.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0009-01.jpg)'
- en: '*Figure 1-8: Android Studio is the official Android mobile app development
    environment.*'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-8：Android Studio 是官方的 Android 移动应用开发环境。*'
- en: Getting to Know Java with JShell
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 JShell 了解 Java
- en: Now that we’ve set up our programming environment, let’s test our setup by using
    JShell, an *interactive interpreter* for Java. JShell is a great way to start
    learning how Java works, as it gives you feedback on your code right away. Before
    Java 9, Java coders had to type a complete program, compile it, and run it to
    see the result. Now, with JShell, we can type a single line of Java code, such
    as `System.out.println(“Hello, Java!”)`, press ENTER, and see the output immediately
    on the screen, as shown in [Figure 1-9](ch1.xhtml#ch1fig9).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了编程环境，让我们通过使用 JShell 来测试我们的设置。JShell 是 Java 的 *交互式解释器*，是学习 Java 工作原理的绝佳方式，因为它会立即提供代码反馈。在
    Java 9 之前，Java 开发者必须编写完整的程序，进行编译并运行它来查看结果。现在，借助 JShell，我们只需要输入一行 Java 代码，如 `System.out.println(“Hello,
    Java!”)`，按下回车键，屏幕上就会立即显示输出，如 [图 1-9](ch1.xhtml#ch1fig9) 所示。
- en: '![Image](../images/f0009-02.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0009-02.jpg)'
- en: '*Figure 1-9: JShell in Java 9 allows us to quickly test code in an interactive
    command line shell.*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-9：Java 9 中的 JShell 使我们能够在交互式命令行 shell 中快速测试代码。*'
- en: Any valid Java statement will work in JShell, which makes it a great tool for
    learning the basics of Java coding, so let’s jump right in!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有效的 Java 语句都可以在 JShell 中运行，这使得它成为学习 Java 编程基础的一个很好的工具，快来尝试吧！
- en: '*Running JShell*'
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*运行 JShell*'
- en: You should be able to run JShell either from the command line or by setting
    up a shortcut. Just in case one of those options doesn’t work for you, though,
    we’ll go over both.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够从命令行运行 JShell，或者通过设置快捷方式来运行。为了防止其中一个选项对你不起作用，我们将讨论这两种方式。
- en: First, you must have JDK 9 installed. You can confirm that JDK 9 is installed
    by running a command from the command line.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你必须安装 JDK 9。你可以通过从命令行运行一个命令来确认 JDK 9 是否已经安装。
- en: 'Here’s how to launch the command line interface on Windows, macOS, and Linux:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何在 Windows、macOS 和 Linux 上启动命令行界面：
- en: • On Windows, open the command prompt by going to the Start menu and typing
    `cmd` in the Search box. Press ENTER or click the Command Prompt icon.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 Windows 上，通过打开开始菜单并在搜索框中输入 `cmd` 来打开命令提示符。按下 ENTER 键或点击命令提示符图标。
- en: • On macOS, open the Launchpad and enter `terminal` in the search box. Click
    the Terminal app icon.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 macOS 上，打开 Launchpad 并在搜索框中输入 `terminal`。点击终端应用图标。
- en: • On Linux, search for `terminal` and click the Terminal app icon.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 Linux 上，搜索 `terminal` 并点击终端应用程序图标。
- en: 'A command prompt window will appear. Enter `java -version` at the prompt, and
    Java will tell you which JDK version is installed. You’ll see something like the
    following output on Windows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 会弹出一个命令提示符窗口。在提示符下输入 `java -version`，Java 将告诉你安装了哪个 JDK 版本。你将在 Windows 上看到类似以下的输出：
- en: C:\Users\Payne> java -version
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: C:\Users\Payne> java -version
- en: java version "9-ea"
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: java 版本 "9-ea"
- en: Java(TM) SE Runtime Environment (build 9-ea+153)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Java(TM) SE 运行时环境 (构建 9-ea+153)
- en: Java HotSpot(TM) 64-Bit Server VM (build 9-ea+153, mixed mode)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Java HotSpot(TM) 64 位服务器虚拟机 (构建 9-ea+153，混合模式)
- en: 'Or you’ll see this output on macOS and Linux:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 否则你将在 macOS 和 Linux 上看到以下输出：
- en: Payne:~ payne$ java -version
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Payne:~ payne$ java -version
- en: java version "1.9.0_33"
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: java 版本 "1.9.0_33"
- en: Java(TM) SE Runtime Environment (build 1.9.0_33)...
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Java(TM) SE 运行时环境 (构建 1.9.0_33)...
- en: If Java responds with something containing version 9 or version 1.9, as shown
    here, you’re ready to run JShell. If you’d like to run it from the command line,
    continue to the next section, “Running JShell from the Command Line.” If you get
    an earlier version of Java, like 1.8, go back to “[Installing Java 8 and 9 for
    Developers](ch1.xhtml#toc_lev8)” on [page 2](ch1.xhtml#page_2) and install JDK
    9\. If version 9 doesn’t appear on the command line after installing or if you’d
    prefer to set up a desktop shortcut, skip to “[Running JShell from a Shortcut](ch1.xhtml#ch1lev1)”
    on [page 11](ch1.xhtml#page_11).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Java 的响应中包含版本 9 或版本 1.9，如此处所示，你就准备好运行 JShell 了。如果你想从命令行运行它，请继续进行下一节 “从命令行运行
    JShell”。如果你得到了早期版本的 Java，比如 1.8，请返回到 “[为开发者安装 Java 8 和 9](ch1.xhtml#toc_lev8)”
    章节，内容位于 [第 2 页](ch1.xhtml#page_2)，并安装 JDK 9。如果在安装后命令行中没有显示版本 9，或者如果你更愿意设置桌面快捷方式，请跳到
    “[从快捷方式运行 JShell](ch1.xhtml#ch1lev1)” 章节，内容位于 [第 11 页](ch1.xhtml#page_11)。
- en: Running JShell from the Command Line
  id: totrans-98
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 从命令行运行 JShell
- en: To run JShell from the command prompt, type `jshell` and press ENTER. Java will
    respond with a JShell welcome message and prompt, which look like the following
    in Windows.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令提示符运行 JShell，键入 `jshell` 并按 ENTER 键。Java 将回应一个 JShell 欢迎消息和提示符，Windows 上的显示如下：
- en: C:\Users\Payne> jshell
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: C:\Users\Payne> jshell
- en: '|  Welcome to JShell -- Version 9-ea'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '|  欢迎使用 JShell -- 版本 9-ea'
- en: '|  For an introduction type: /help intro'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '|  输入帮助信息，请键入: /help intro'
- en: jshell>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: jshell>
- en: 'On macOS or Linux, the message and prompt look similar:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 或 Linux 上，消息和提示符看起来类似：
- en: Payne:~ payne$ jshell
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Payne:~ payne$ jshell
- en: '|  Welcome to JShell -- Version 9-ea'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '|  欢迎使用 JShell -- 版本 9-ea'
- en: '|  For an introduction type: /help intro'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|  输入帮助信息，请键入: /help intro'
- en: jshell>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: jshell>
- en: If you get the `jshell>` prompt, you’re ready to move ahead to “[Working with
    Java Expressions in JShell](ch1.xhtml#toc_lev16)” on [page 12](ch1.xhtml#page_12).
    If the `jshell` command doesn’t work on your computer after installing JDK 9,
    try following the steps in the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到 `jshell>` 提示符，你可以继续进行 “[在 JShell 中使用 Java 表达式](ch1.xhtml#toc_lev16)” 章节，内容位于
    [第 12 页](ch1.xhtml#page_12)。如果在安装 JDK 9 后 `jshell` 命令在你的计算机上无法运行，请尝试按照下一节的步骤操作。
- en: Running JShell from a Shortcut
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 从快捷方式运行 JShell
- en: If you have any trouble getting JShell to run from the command line, or if you’d
    prefer to run it from a desktop shortcut, follow these instructions to access
    JShell directly from the JDK 9 *bin* folder and set up a shortcut. (The folder
    name *bin* is short for *binaries*, which are programs written in computer language
    with just 1s and 0s.)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到从命令行运行 JShell 的问题，或者如果你更愿意从桌面快捷方式运行它，按照这些说明从 JDK 9 的 *bin* 文件夹直接访问 JShell
    并设置快捷方式。(文件夹名称 *bin* 是 *binaries* 的缩写，指的是用计算机语言编写的程序，这些程序只有 1 和 0。)
- en: '**NOTE**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Unfortunately, this method doesn’t reliably work for Linux, but you should
    be able to use the command line method.*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '*不幸的是，这种方法在 Linux 上并不总是有效，但你应该能够使用命令行方法。*'
- en: 'You can find JShell in the following directories:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下目录中找到 JShell：
- en: • On Windows, use *C:\Program Files\Java\jdk-9\bin\jshell.exe*
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 Windows 上，使用 *C:\Program Files\Java\jdk-9\bin\jshell.exe*
- en: • On macOS, use */Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/bin/jshell*
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 macOS 上，使用 */Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home/bin/jshell*
- en: Your JDK folder may be labeled *jdk-1.9.x* instead of *jdk-9*, but it will work
    the same either way. Navigate to the JDK 9 *bin* folder on your computer and find
    the JShell file, as shown in [Figure 1-10](ch1.xhtml#ch1fig10).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 JDK 文件夹可能被标记为 *jdk-1.9.x* 而不是 *jdk-9*，但它们的作用是一样的。导航到计算机上的 JDK 9 *bin* 文件夹，找到
    JShell 文件，如 [图 1-10](ch1.xhtml#ch1fig10) 所示。
- en: 'You can double-click the JShell file’s icon to run JShell. You can also create
    a shortcut to run JShell directly from your desktop for convenience:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以双击 JShell 文件的图标来运行 JShell。你也可以创建一个快捷方式，以方便从桌面直接运行 JShell：
- en: • On Windows, right-click *jshell.exe* and select **Create Shortcut**. Windows
    will respond with “Windows can’t create a shortcut here. Do you want the shortcut
    to be placed on the desktop instead?” Click **Yes**.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 Windows 上，右键单击 *jshell.exe* 并选择 **创建快捷方式**。Windows 会提示“Windows 无法在此创建快捷方式。你希望将快捷方式放置到桌面上吗？”点击
    **是**。
- en: • On macOS, CONTROL-click the *jshell* file and select **Make Alias**. A file
    called *jshell alias* will appear. Drag it to your desktop.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: • 在 macOS 上，按 CONTROL 键单击 *jshell* 文件并选择 **创建别名**。会出现一个名为 *jshell alias* 的文件。将其拖到桌面上。
- en: Now, anytime you want to run JShell, simply double-click the icon on your desktop,
    and you’re ready to code in Java.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当你想运行 JShell 时，只需双击桌面上的图标，就可以开始编写 Java 代码了。
- en: '![Image](../images/f0012-01.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0012-01.jpg)'
- en: '*Figure 1-10: The JShell program file in the JDK 9* bin *folder on Windows
    (left) and macOS (right)*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1-10：Windows（左）和 macOS（右）上的 JDK 9* bin *文件夹中的 JShell 程序文件*'
- en: '*Working with Java Expressions in JShell*'
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*在 JShell 中使用 Java 表达式*'
- en: 'An *expression* is any combination of values (like numbers or text) and operators
    that results in another value. An *operator* performs an operation like addition,
    subtraction, multiplication, or division. In Java, the symbols we use for these
    operators are, respectively, `+`, `-`, `*`, and `/`. Let’s try one out with a
    simple math expression. At the JShell prompt, type `2+2` and press ENTER:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*表达式* 是值（如数字或文本）和运算符的任何组合，结果是另一个值。*运算符* 执行像加法、减法、乘法或除法这样的操作。在 Java 中，执行这些运算的符号分别是
    `+`、`-`、`*` 和 `/`。我们来尝试一个简单的数学表达式。在 JShell 提示符下，输入 `2+2` 并按 ENTER：'
- en: jshell> 2+2
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> 2+2
- en: $1 ==> 4
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: $1 ==> 4
- en: 'JShell tells you the answer: the value of the expression `2+2` is `4`. The
    `$1` is a *temporary variable*. JShell creates these variables to store values,
    and here the variable `$1` is storing the value `4` temporarily, in case you want
    to use it later. If you want to know what value is in a variable, you can enter
    it in JShell. For example, if you enter `$1` now, JShell will tell you `$1` is
    storing the value `4`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: JShell 会告诉你答案：表达式 `2+2` 的值是 `4`。`$1` 是一个 *临时变量*。JShell 创建这些变量来存储值，在这里，变量 `$1`
    暂时存储值 `4`，以防你以后想使用它。如果你想知道某个变量中存储的值，可以在 JShell 中输入它。例如，如果你现在输入 `$1`，JShell 会告诉你
    `$1` 存储的值是 `4`：
- en: jshell> $1
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> $1
- en: $1 ==> 4
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: $1 ==> 4
- en: 'Let’s try another expression. This time, let’s combine two strings of text.
    *Strings* are characters between quotation marks that are used to display words,
    names, and other text. You can use the `+` operator to combine strings:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试另一个表达式。这一次，我们来组合两个字符串。*字符串* 是由双引号括起来的字符，用于显示单词、名称和其他文本。你可以使用 `+` 运算符来连接字符串：
- en: jshell> "Your" + "Name"
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> "Your" + "Name"
- en: $3 ==> "YourName"
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: $3 ==> "YourName"
- en: You’ll see that a different temporary variable is created—in this case, `$3`.
    The number after the `$` indicates the line of code where the expression was entered.
    This is my third snippet of code, so JShell is storing `"YourName"` in the variable
    `$3`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到创建了一个不同的临时变量——在这种情况下是`$3`。`$`后面的数字表示输入表达式的代码行号。这是我的第三段代码，因此 JShell 正在将 `"YourName"`
    存储到变量 `$3` 中。
- en: 'Notice also that Java *concatenates*, or adds, the two strings, with no space
    between. If we want a space between two concatenated strings, we have to include
    it inside double quotes, like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，Java *连接*了两个字符串，并且没有添加空格。如果我们想在两个连接的字符串之间加个空格，必须在双引号中包含它，像这样：
- en: jshell> "Your" + " " + "Name"
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> "Your" + " " + "Name"
- en: $4 ==> "Your Name"
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: $4 ==> "Your Name"
- en: Any valid Java expression can be evaluated in JShell, so go ahead and try a
    few more expressions. To edit a statement you’ve entered, press the up arrow key.
    JShell will display the last command you typed, allowing you to edit it and press
    ENTER to run the statement again. Pressing the up arrow more than once will scroll
    you through the history of previous statements, all the way to the first line
    you entered.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 任何有效的Java表达式都可以在JShell中进行求值，所以可以尝试更多的表达式。要编辑你输入的语句，按上箭头键。JShell会显示你上一次输入的命令，你可以编辑它并按ENTER再次运行语句。按上箭头多次将滚动查看你输入的历史命令，直到最初的那一行。
- en: '*Declaring Java Variables in JShell*'
  id: totrans-139
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*在JShell中声明Java变量*'
- en: Evaluating expressions with simple values is nice, but you’ll usually want to
    store values in variables so you can use them later. JShell has been creating
    temporary variables for us automatically, like `$1` and `$3` in the previous section,
    but you can also create, or *declare*, your own.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单值计算表达式很好，但通常你会想将值存储在变量中，以便以后使用。JShell已经为我们自动创建了临时变量，比如上一节中的`$1`和`$3`，但你也可以创建或*声明*你自己的变量。
- en: Numeric Variables
  id: totrans-141
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 数值变量
- en: 'Let’s create an integer (whole number) variable called `x` and store the value
    `42` in it. Java stores whole numbers in variables of the type `int`, so at the
    JShell prompt, enter `int x = 42`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`x`的整数（整数）变量，并将值`42`存储其中。Java将整数存储在类型为`int`的变量中，因此在JShell提示符下输入`int
    x = 42`：
- en: jshell> int x = 42
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> int x = 42
- en: x ==> 42
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: x ==> 42
- en: 'The equal sign (`=`) is the *assignment operator* in Java, meaning that it
    is used to *assign* a value to a variable. JShell responds, letting us know the
    variable `x` contains the value `42`. Now, when we want to use that value, we
    can just call the variable by name. Let’s find out what `x * 2` (`x` times two)
    equals:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 等号（`=`）是Java中的*赋值运算符*，意味着它用于*将*一个值赋给变量。JShell的回应告诉我们变量`x`包含值`42`。现在，当我们想要使用这个值时，我们只需要通过名称调用变量。让我们来看看`x
    * 2`（`x`乘以2）等于多少：
- en: jshell> x * 2
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> x * 2
- en: $6 ==> 84
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: $6 ==> 84
- en: 'Java uses the asterisk (`*`) as the symbol for multiplication, and JShell is
    letting us know that `x * 2` is equal to `84`. Did we change the value of `x`,
    though, by getting its value and multiplying that value by two? Let’s find out
    by entering `x`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用星号（`*`）作为乘法符号，JShell告诉我们`x * 2`等于`84`。不过，通过获取`x`的值并将其乘以2，我们改变了`x`的值吗？让我们通过输入`x`来找出答案：
- en: jshell> x
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> x
- en: x ==> 42
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: x ==> 42
- en: Whew! Our variable `x` still has the same value, `42`. That means we can use
    the value stored in a variable without changing the variable.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 呼！我们的变量`x`仍然保持相同的值，`42`。这意味着我们可以在不改变变量的情况下使用存储在变量中的值。
- en: 'So how would we change the value stored in the variable? We simply use the
    assignment operator again. Enter `x = x + 7` at the JShell prompt:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们该如何更改存储在变量中的值呢？我们只需再次使用赋值运算符。请输入`x = x + 7`，在JShell提示符下执行：
- en: jshell> x = x + 7
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> x = x + 7
- en: x ==> 49
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: x ==> 49
- en: We’ve *replaced* the value stored in `x` by taking the old `x` value and adding
    `7` to it. From now on, whenever we ask for the value of `x`, we’ll get `49`,
    until we change it again. The value of a variable can change, or *vary*, as often
    as we need it to—that’s why they’re called variables.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将旧的`x`值加上`7`，*替换*了存储在`x`中的值。从现在开始，每当我们查询`x`的值时，我们将得到`49`，直到我们再次更改它。变量的值可以根据需要不断改变或*变化*——这就是为什么它们被称为变量的原因。
- en: 'Let’s try a few variables of different types. We’ve seen an integer value,
    so let’s try a decimal, or *floating-point*, number. Java stores decimal numbers
    in variables of the type `double` (short for *double-precision floating point*),
    so create a `double` called `meters` and store the decimal value `1.83` in it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试几种不同类型的变量。我们已经见过一个整数值，接下来试试一个小数或*浮动点*数。Java将小数值存储在类型为`double`的变量中（即*双精度浮点数*），所以创建一个名为`meters`的`double`变量，并将小数值`1.83`存储其中：
- en: jshell> double meters = 1.83
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> double meters = 1.83
- en: meters ==> 1.83
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: meters ==> 1.83
- en: 'Java handles decimal values just as easily as integer values. Let’s do some
    math and convert meters to centimeters:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Java同样可以轻松处理小数值，就像处理整数值一样。让我们做一些数学运算，把米转换成厘米：
- en: jshell> double centimeters = meters * 100
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> double centimeters = meters * 100
- en: centimeters ==> 183.0
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: centimeters ==> 183.0
- en: We’ve converted the value in `meters` to a value in `centimeters` by multiplying
    it by `100`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将`meters`的值乘以`100`，将其转换为`centimeters`的值。
- en: Java handles a few other types of numbers, but `int` and `double` values are
    the most common ones you’ll use. Anytime you come across a new type of variable,
    feel free to open JShell and play around with different values.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Java 处理其他几种类型的数字，但 `int` 和 `double` 值是你最常用的类型。每当你遇到一个新的变量类型时，可以随时打开 JShell，尝试不同的值。
- en: String Variables
  id: totrans-164
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 字符串变量
- en: 'The `String` variable type is used to store strings of text characters. Let’s
    define a `String` variable called `myName` and store a name in it as follows (you
    can use your name instead of mine):'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`String` 变量类型用于存储文本字符的字符串。让我们定义一个名为 `myName` 的 `String` 变量，并存储一个名字，如下所示（你可以用你的名字代替我的）：'
- en: jshell> String myName = "Bryson Payne"
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> String myName = "Bryson Payne"
- en: myName ==> "Bryson Payne"
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: myName ==> "Bryson Payne"
- en: We use the equal sign assignment operator, like we did with numeric variables.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用等号赋值运算符，就像我们处理数字变量时那样。
- en: '**NOTE**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Case matters in Java variable, method, and class names. All-lowercase `myname`
    is different from all-uppercase `MYNAME`, and both of those are different from
    `myName`. The convention, or common way of doing things, in Java is to use* camel
    case—*capitalizing the first letter of each new word in a name, like `myName`
    or `thisIsASillyNameButShowsCamelCase`, so that the words resemble a camel’s humps.
    Classes are in camel case and also begin with an uppercase letter.*'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '*在 Java 中，变量、方法和类名是区分大小写的。全小写的 `myname` 与全大写的 `MYNAME` 不同，而这两者与 `myName` 也不同。在
    Java 中的惯例是使用*驼峰命名法*——每个新单词的首字母大写，如 `myName` 或 `thisIsASillyNameButShowsCamelCase`，这样单词看起来像骆驼的驼峰。类名采用驼峰命名法，并且以大写字母开头。*'
- en: 'Now let’s use the value stored in `myName`. Let’s say you’ve added a certification
    or earned a degree. Add some characters after your name, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用存储在 `myName` 中的值。假设你添加了一个认证或获得了学位。在你的名字后面加上一些字符，如下所示：
- en: jshell> myName + ", PhD"
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> myName + ", PhD"
- en: $12 ==> "Bryson Payne, PhD"
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: $12 ==> "Bryson Payne, PhD"
- en: Notice that we didn’t use the assignment operator, so the value stored in `myName`
    should still be your name without the extra characters.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有使用赋值运算符，所以存储在 `myName` 中的值应该仍然是你的名字，而没有额外的字符。
- en: 'This time, let’s change the value stored in the variable `myName`. Add a formal
    title or greeting to your name, like you would for addressing an envelope or invitation:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们来改变存储在变量 `myName` 中的值。为你的名字加上正式的称谓或问候语，就像你在给信封或请柬写地址时那样：
- en: jshell> myName = "Dr. " + myName
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> myName = "Dr. " + myName
- en: myName ==> "Dr. Bryson Payne"
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: myName ==> "Dr. Bryson Payne"
- en: JShell shows us the updated value stored in `myName`. We’ll continue to work
    with both numeric and text variables in the next section, and you’ll learn to
    output values to the screen from inside a Java program.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: JShell 显示了存储在 `myName` 中的更新值。我们将在下一节继续处理数字和文本变量，你将学习如何从 Java 程序内部将值输出到屏幕。
- en: '*Printing Output in Java*'
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*在 Java 中打印输出*'
- en: Up to this point, we’ve just been evaluating expressions by entering them into
    JShell to see their values, but this won’t usually be the case when we start writing
    actual programs. In a Java program, we won’t see anything echoed back to the screen
    as we type line by line.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是在通过输入表达式到 JShell 中来评估它们的值，但在开始编写实际程序时，这种情况通常不会发生。在 Java 程序中，我们在逐行输入时不会看到任何回显到屏幕上。
- en: 'When we want to print something to the screen, we use a print function, like
    `System.out.println()`, which prints a line of output to the system console, or
    your screen. If you’re still using the same JShell window from the previous section,
    you can print the value we stored in `x` as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要在屏幕上打印某些内容时，我们使用打印函数，比如 `System.out.println()`，它会将一行输出打印到系统控制台或屏幕上。如果你还在使用前一节中的同一个
    JShell 窗口，你可以按如下方式打印我们存储在 `x` 中的值：
- en: jshell> System.out.println(x)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> System.out.println(x)
- en: '49'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '49'
- en: If you get an error, declare a new variable `int x = 49` and then run the `print`
    statement again.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到错误，可以声明一个新的变量 `int x = 49`，然后再次运行 `print` 语句。
- en: Notice that this time, JShell doesn’t respond with `x ==> 49`, because you aren’t
    asking it to evaluate an expression. The `println()` statement tells JShell to
    print only what you’ve placed inside the parentheses, which is the variable `x`,
    so JShell simply responds with `49`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这一次，JShell 没有响应 `x ==> 49`，因为你没有要求它评估一个表达式。`println()` 语句告诉 JShell 只打印括号内的内容，这就是变量
    `x`，所以 JShell 只是简单地响应了 `49`。
- en: 'Let’s try some output using strings instead. Enter the following statement:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用字符串来输出。输入以下语句：
- en: jshell> System.out.println("Hello, " + myName)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> System.out.println("Hello, " + myName)
- en: Hello, Dr. Bryson Payne
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Hello, Dr. Bryson Payne
- en: As long as you’ve still got a variable called `myName` from the previous section,
    Java will greet you by name.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你在上一节中仍然有一个名为`myName`的变量，Java就会按你的名字向你打招呼。
- en: Whenever you need to print information to the screen for a user to read, the
    `System.out.println()` statement will allow you to print exactly what you want
    to communicate.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你需要将信息打印到屏幕上供用户阅读时，`System.out.println()`语句将允许你打印出你想要传达的内容。
- en: '*JShell Commands*'
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '*JShell命令*'
- en: JShell has been so easy to use that you might never want to leave it, but eventually
    you’ll need to get on with other work, like building exciting desktop and mobile
    apps in Java. Let’s take a look at the commands that JShell has to offer, including
    the command to exit JShell.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: JShell使用起来非常简单，你可能永远都不想离开它，但最终你需要继续做其他工作，比如在Java中构建令人兴奋的桌面和移动应用程序。让我们来看一下JShell提供的命令，包括退出JShell的命令。
- en: 'At the JShell prompt, enter `/help`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在JShell提示符下，输入`/help`：
- en: jshell> /help
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> /help
- en: 'JShell will respond with the full list of special commands that it recognizes.
    We precede each command with the forward slash, `/`, to indicate that we’re talking
    to the JShell program directly, not to Java. Here’s a shortened, partial version
    of the commands JShell recognizes:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: JShell将响应并显示它识别的所有特殊命令。我们在每个命令前加上斜杠`/`，表示我们正在直接与JShell程序交互，而不是与Java交互。以下是JShell识别的部分命令的简短版本：
- en: '|    /list [<name or id>|-all|-start]     -- list the source you have typed'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /list [<name or id>|-all|-start]     -- 列出你输入的源代码'
- en: '|    /edit <name or id>                   -- edit a source entry referenced
    by name or id'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /edit <name or id>                   -- 编辑通过名称或ID引用的源条目'
- en: '|    /save [-all|-history|-start] <file>  -- save snippet source to a file'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /save [-all|-history|-start] <file>  -- 将片段源代码保存到文件'
- en: '|    /open <file>                         -- open a file as source input'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /open <file>                         -- 打开一个文件作为源输入'
- en: '|    /vars [<name or id>|-all|-start]     -- list the declared variables and
    their values'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /vars [<name or id>|-all|-start]     -- 列出已声明的变量及其值'
- en: '|    /imports                             -- list the imported items'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /imports                             -- 列出已导入的项'
- en: '|    /exit                                -- exit jshell'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /exit                                -- 退出jshell'
- en: '|    /reset                               -- reset jshell'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /reset                               -- 重置jshell'
- en: '|    /history                             -- history of what you have typed'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /history                             -- 查看你输入的历史命令'
- en: '|    /help [<command>|<subject>]          -- get information about jshell'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '|    /help [<command>|<subject>]          -- 获取有关jshell的信息'
- en: Try some of the commands, like `/list` to see all the source code you’ve typed.
    You’ll notice that JShell adds semicolons at the ends of lines where needed—the
    semicolon is how Java separates multiple statements in a program. The `/history`
    command shows you what you’ve typed, including commands like `/help`, `/list`,
    and even `/history`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一些命令，比如`/list`，查看你输入的所有源代码。你会注意到，JShell会在需要的地方自动加上分号——分号是Java在程序中分隔多个语句的方式。`/history`命令会显示你输入的所有内容，包括像`/help`、`/list`，甚至是`/history`这样的命令。
- en: 'When you’re editing regular Java programs in the next chapter and beyond, you’ll
    be working in files, saving often, and reopening the files when you want to work
    on them more. In JShell, though, once you close the JShell window, everything
    you’ve typed is gone for good—unless you save it, that is. Thankfully, JShell
    includes the ability to save, open, and edit the awesome code snippets you produce.
    To save code you created in JShell, use the `/save` command and specify where
    you’d like to store your file:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在下一章及之后编辑常规Java程序时，你将处理文件，频繁保存，并在需要继续工作时重新打开文件。然而，在JShell中，一旦关闭JShell窗口，你输入的所有内容都将永久丢失——除非你保存它。幸运的是，JShell提供了保存、打开和编辑你编写的代码片段的功能。要保存你在JShell中创建的代码，请使用`/save`命令并指定你希望保存文件的位置：
- en: jshell> /save ~/Desktop/filename.txt
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> /save ~/Desktop/filename.txt
- en: The tilde (`~`) means your user directory on your computer, so this command
    will save all the code you’ve typed since you opened JShell, or since the last
    `/reset`, in a file on your desktop. Look at your computer’s desktop screen and
    you should see the new file.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 波浪符号（`~`）代表你计算机上的用户目录，所以这个命令会将你自打开JShell以来，或者自上次`/reset`以来你输入的所有代码保存到桌面上的一个文件中。查看你电脑的桌面屏幕，你应该能看到新文件。
- en: 'To open the file again, use the `/open` command and tell JShell where to find
    it:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要再次打开文件，使用`/open`命令并告诉JShell去哪里找到它：
- en: jshell > /open ~/Desktop/filename .txt
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: jshell > /open ~/Desktop/filename.txt
- en: JShell will open the file and run the code.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: JShell将打开文件并运行代码。
- en: Anytime you write a snippet of code that you’d like to store for later use,
    use the `/save` and `/open` commands to keep your code from one JShell session
    to the next.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你写下一个希望以后使用的代码片段时，使用 `/save` 和 `/open` 命令来保存你的代码，以便在不同的 JShell 会话中使用。
- en: 'To start a new code snippet, use the `/reset` command. JShell will remember
    and save only what you type after the `/reset` command, but you can reopen a file
    that you’ve saved anytime. Try the following code for a quick example of saving
    a file, resetting, and opening a file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始一个新的代码片段，使用 `/reset` 命令。JShell 只会记住并保存你在 `/reset` 命令之后输入的内容，但你可以随时重新打开你保存的文件。试试以下代码，快速了解保存文件、重置和打开文件的示例：
- en: ➊ jshell> /reset
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: ➊ jshell> /reset
- en: '|  Resetting state.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '|  重置状态。'
- en: ➋ jshell> System.out.println("Hello, Java!")
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: ➋ jshell> System.out.println("Hello, Java!")
- en: Hello, Java!
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，Java！
- en: jshell> System.out.println("My name is Bryson, nice to meet you!")
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> System.out.println("我的名字是 Bryson，很高兴见到你！")
- en: My name is Bryson, nice to meet you!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我叫 Bryson，很高兴见到你！
- en: ➌ jshell> /save ~/Desktop/myJava.txt
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: ➌ jshell> /save ~/Desktop/myJava.txt
- en: ➍ jshell> /reset
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: ➍ jshell> /reset
- en: '|  Resetting state.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '|  重置状态。'
- en: ➎ jshell > /open ~/Desktop/myJava.txt
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: ➎ jshell > /open ~/Desktop/myJava.txt
- en: ➏ Hello, Java!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ➏ 你好，Java！
- en: My name is Bryson, nice to meet you!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字是 Bryson，很高兴见到你！
- en: '**NOTE**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*The numbered circles point out important lines, but they aren’t actually part
    of the code.*'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '*编号圆圈标出了重要的行，但它们并不是真正的代码的一部分。*'
- en: First, you need to reset JShell ➊ so that you don’t include any earlier code
    you might have written before the code you want to save. Once you’ve done that,
    you can write out your program, which in this case is two `print` statements ➋,
    and then save it to your desktop ➌. Even after JShell is reset ➍, the `/open`
    command ➎ recalls the two lines of code we typed before the `/save` command and
    runs them ➏. You can use `/edit` to change the code and `/save` again when you’re
    done.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要重置 JShell ➊，以便不包含你在想保存的代码之前可能编写的任何代码。完成此操作后，你可以编写程序，在这个例子中是两个 `print`
    语句 ➋，然后将其保存到桌面 ➌。即使 JShell 被重置 ➍，`/open` 命令 ➎ 也会回调我们在 `/save` 命令之前输入的两行代码并运行它们
    ➏。你可以使用 `/edit` 来修改代码，完成后再使用 `/save`。
- en: JShell can store and recall a snippet whether it’s a single line or as many
    lines as you care to type.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: JShell 可以存储并回调一个代码片段，无论它是一行还是多行代码，任凭你输入多少。
- en: 'If you’re finished exploring, use the `/exit` command to close JShell:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了探索，使用 `/exit` 命令来关闭 JShell：
- en: jshell> /exit
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: jshell> /exit
- en: Goodbye
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 再见
- en: JShell is even polite when you leave, bidding you a kind goodbye.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你离开，JShell 也会礼貌地向你告别。
- en: What You Learned
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你学到的内容
- en: In this chapter, you’ve not only installed Java, Eclipse, and AndroidStudio
    but you’ve also begun learning Java by testing various commands in the JShell
    interactive shell. JShell is an exciting improvement to the already omnipresent,
    industry-standard Java, and it’s a great tool for beginners and seasoned developers
    alike.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你不仅安装了 Java、Eclipse 和 AndroidStudio，还通过在 JShell 交互式 shell 中测试各种命令开始了 Java
    学习之旅。JShell 是对已经无处不在的行业标准 Java 的一项令人兴奋的改进，它是初学者和经验丰富的开发者的绝佳工具。
- en: For new coders, JShell encourages exploration and removes some of the unnecessary
    barriers to learning basic Java commands. For experienced programmers, JShell
    provides a way to rapidly test new pieces of code and see results instantly on
    the screen. As an educator and coder, I’m excited about what JShell means for
    the future of Java and for the millions of coders who’ll be able to benefit from
    this important new set of tools.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新手编码者，JShell 鼓励探索并消除了学习基本 Java 命令的一些不必要障碍。对于有经验的程序员，JShell 提供了一种快速测试新代码并立即在屏幕上查看结果的方式。作为一名教育者和编码者，我对
    JShell 对 Java 未来的意义以及数百万将从这套重要新工具中受益的程序员们充满期待。
- en: 'You’ve set up your programming environments for Java desktop and mobile apps,
    and you’ve learned how to test code in JShell. You’ve also gained some experience
    with a number of programming concepts that you’ll use in the Java desktop and
    mobile apps that we’ll build in the upcoming chapters. Here’s a quick overview
    of what you’ve accomplished so far:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经为 Java 桌面应用和移动应用设置了编程环境，并学会了如何在 JShell 中测试代码。你还掌握了一些编程概念，这些概念将在我们在接下来的章节中构建的
    Java 桌面和移动应用中派上用场。下面是你到目前为止所取得的成就概览：
- en: • Installing Java JDK 8 and 9
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: • 安装 Java JDK 8 和 9
- en: • Installing Eclipse IDE for Java Developers and the WindowBuilder Editor
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: • 安装 Eclipse IDE for Java Developers 和 WindowBuilder 编辑器
- en: • Installing Android Studio for mobile app development
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: • 安装用于移动应用开发的 Android Studio
- en: • Running JShell from the command line and from the *JDK9/bin* folder
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: • 从命令行和*JDK9/bin*文件夹中运行JShell
- en: • Evaluating Java expressions in JShell, including numbers and text
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: • 在JShell中评估Java表达式，包括数字和文本
- en: • Declaring integer, decimal, and string variables in Java
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: • 在Java中声明整数、十进制和字符串变量
- en: • Printing output to the screen using `System.out.println()`
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用`System.out.println()`将输出打印到屏幕
- en: • Using JShell commands such as `/reset`, `/edit`, `/save`, `/open`, and `/exit`
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用JShell命令，如`/reset`、`/edit`、`/save`、`/open`和`/exit`
- en: • Saving and opening files from JShell
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: • 从JShell中保存和打开文件
- en: In the next chapter, we’ll build our first complete Java application, the Hi-Lo
    guessing game. In the chapters that follow, we’ll create text-based programs,
    desktop apps, and, finally, Android mobile apps for each of our programs.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建第一个完整的Java应用程序——Hi-Lo猜数字游戏。在随后的章节中，我们将为每个程序创建基于文本的程序、桌面应用程序，最终是Android移动应用程序。
- en: Along the way, we’ll use the programming concepts we picked up in JShell, including
    expressions, variables, output, and more. Whether you’re building your first app
    or your thousandth, a desktop app for work or a mobile game for fun, these same
    elements will be part of everything you code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们将使用在JShell中学到的编程概念，包括表达式、变量、输出等等。无论你是在构建第一个应用程序还是第千个应用程序，无论是工作用的桌面应用程序还是娱乐用的移动游戏，这些相同的元素都将是你编写的每一个程序的一部分。
- en: You’ve got the tools, so let’s jump into [Chapter 2](ch2.xhtml#ch2) and get
    started!
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经掌握了工具，现在让我们进入[第二章](ch2.xhtml#ch2)并开始吧！
