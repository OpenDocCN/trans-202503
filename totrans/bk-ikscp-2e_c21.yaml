- en: '21'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tutorial: Creating an Animation'
  prefs: []
  type: TYPE_NORMAL
- en: From the start, SVG was meant as a language for both static and animated vector
    graphics. It supports both scripted and declarative animation. For better or worse,
    however, animated SVG on the web never really caught on, and now it seems like
    the days of vector animation of any kind (such as Flash) are behind us. HTML +
    JavaScript or pure video are now what mostly move things online.
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape does not support animated SVG documents (although you can add animation
    attributes manually via the XML Editor) and can display SVG documents only statically.
    Still, you can use Inkscape to create static frames and then combine them into
    an animated GIF or a video—although without timeline control, it's difficult to
    work on anything longer than several frames long.
  prefs: []
  type: TYPE_NORMAL
- en: 21.1 Creating the Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest way to create animation frames in Inkscape is by putting them on
    separate layers ([4.9](c04.xhtml#section4.9)). By toggling adjacent layers to
    be visible, you can see how your frames stack up and control what changes from
    one frame to the next. Creating many layers manually is tedious, so I wrote a
    simple Python script that creates a 200×200 px document with 100 empty layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All layers are created hidden (that''s what `display="none"` is for), so in
    Inkscape, you will need to unhide them one by one ([4.9.3](c04.xhtml#section4.9.3))
    to draw on them. You can change the number of layers that the script creates (`range(100)`)
    as well as the artboard’s dimensions (`width="200" height="200"`). Save the script
    into a file named generate-layers.py, and at a command prompt, run it and capture
    its output to an SVG file. (You will need Python installed on your computer; get
    it at[https://python.org/](https://python.org/).) Then, run Inkscape on this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can also put the resulting file (ani.svg) into your ~/.inkscape/templates
    folder, where it will work as a template, so the next time you will be able to
    create an empty 100-layer file by choosing it from the File ▶ New list. [Figure 21-1](#fig21-1)
    shows Inkscape's Layers dialog ([4.9.4](c04.xhtml#section4.9.4)) with the multilayer
    file loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-01.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-1: A 100-layer animation template loaded into Inkscape'
  prefs: []
  type: TYPE_NORMAL
- en: 21.2 Creating the Character
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's make an animation of a dancing man, which is fun yet simple enough not
    to require much drawing skill and fits the animation’s small format. My hero's
    claim to fame will be the way he moves, so I don't need to make him look too sophisticated.
    A simple stick figure will do ([Figure 21-2](#fig21-2)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-02.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-2: The stick figure, showing its nodes in the Node tool'
  prefs: []
  type: TYPE_NORMAL
- en: It consists of three simple paths (arms, legs, and body) and one ellipse (head).
    Use the Pen tool ([14.1.1](c14.xhtml#section14.1.1)) with Ctrl to draw horizontal/vertical
    straight lines; use the Ellipse tool ([11.4](c11.xhtml#section11.4)) to create
    the head. To facilitate interpolation, do **Path ▶ Combine** on the body and limbs
    so they become one path, and use Ctrl-Alt-click in the Node tool ([12.5.3](c12.xhtml#section12.5.3))
    to add nodes in his elbow and knee joints.
  prefs: []
  type: TYPE_NORMAL
- en: 21.3 Tweening
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now make a copy of the character by duplicating it (Ctrl-D with both head and
    body selected), move it to the right, and play with its nodes (in the Node tool)
    to give our man a funky dancing pose ([Figure 21-3](#fig21-3)). This provides
    the two *keyframes*, and the entire animation could be as simple as alternating
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-03.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-3: Two keyframes'
  prefs: []
  type: TYPE_NORMAL
- en: Let's add some intermediate frames to make the transition between the keyframes
    smoother. Animators call this *tweening* (derived from*between*). Select both
    bodies (that is, the two path objects) and do **Extensions ▶ Generate from Path ▶ Interpolate**.
    Specify the number of **Interpolation steps** (say, 4), select **Interpolation
    method 1**, and, if desired, use a nonzero **Exponent** value to make the movement
    speed up or slow down nonlinearly. Then, create the heads for each of the tweened
    bodies by interpolating the two ellipses, using the same number of steps and the
    same Exponent ([Figure 21-4](#fig21-4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-04.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-4: Interpolating the keyframes'
  prefs: []
  type: TYPE_NORMAL
- en: If the tweening steps don't look right to you, undo the interpolation, tweak
    the keyframes, and re-interpolate until you get what you like. Interpolation method
    1 matches the nodes that are at the same position along the path, so it works
    best when one keyframe path was created by tweaking the other one without adding
    or removing nodes (as in our case). If two paths are of different origin and have
    incompatible nodes, method 2 is better.
  prefs: []
  type: TYPE_NORMAL
- en: 21.4 Compositing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's place our animation in its proper place on the canvas and distribute the
    frames across layers. Remove the tweening and move the second keyframe right over
    the first. (Note that the dancer's right foot coincides in both keyframes because
    it rests on the floor.) Select both overlapping figures and place them on the
    canvas, scaling if necessary and leaving space for whatever other elements you
    plan to add (such as a text heading). Finally, interpolate the bodies and the
    heads again—in place, as shown in [Figure 21-5](#fig21-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-05.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-5: Interpolating in place'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next task is a bit boring. You need to ungroup the interpolation paths
    and manually place each one on its own layer, from 002 to 005, with the keyframes
    occupying layers 001 and 006\. Then, duplicate the frames in the reverse order:
    frames 005 to 001 will go into range 007 to 011 to make the dancer smoothly return
    into the original position.'
  prefs: []
  type: TYPE_NORMAL
- en: Use Shift-Page Up and Shift-Page Down to move the selected objects one layer
    up/down, and watch the status bar that shows in which layer your selected objects
    are located. Alternatively, you can cut (Ctrl-X) an object, switch to the destination
    layer, and paste it in place (Ctrl-Alt-V). Finally, make sure all the layers you've
    used are visible, and save the SVG file.
  prefs: []
  type: TYPE_NORMAL
- en: 21.5 Exporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can export the layers manually, but that would be tedious—especially if
    you need to do it again after viewing the result and making changes to the source.
    Fortunately, Inkscape has convenient command line parameters, so I wrote another
    Python script to automate the export:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The script takes as parameters the name of the source file, the numbers of the
    start and end layers to export, and the name of the resulting GIF. It calls Inkscape
    to export each layer separately; then, it calls the `convert` utility from ImageMagick
    to combine the frames into an animated GIF file that can then be viewed in any
    web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save it as produce-gif.py and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: View the output at [http://www.kirsanov.com/inkscape-animation/stick.gif](http://www.kirsanov.com/inkscape-animation/stick.gif).
  prefs: []
  type: TYPE_NORMAL
- en: 21.6 Freehand Drawing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, our stick-figure animation looks at best mildly engaging. This smooth,
    vectory style is good for technical animations, such as demonstrating the workings
    of a machine, but it's not too inspiring for an animated dance.
  prefs: []
  type: TYPE_NORMAL
- en: To improve the stick figure, hide all layers except `001`, select the figure,
    and lower its opacity. Then arm yourself with the Calligraphic pen ([14.2](c14.xhtml#section14.2)),
    select a **Width** of 20 with **Tremor** of 40, and draw freehand strokes over
    the stick figure. Try to make it more random, funky, and personalized; add more
    pronounced feet and fists and more human-like body forms ([Figure 21-6](#fig21-6)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-07.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-6: Humanizing the figure with Calligraphic pen'
  prefs: []
  type: TYPE_NORMAL
- en: When done, delete the original skeleton figure. It has served its function of
    a blueprint and is no longer needed. The result looks a bit foreign in its roughness
    upon the immaculate white background. To fix this, reduce the width of the pen
    to 1 and add some thin random strokes around the dancer, hinting at his limbs'
    motion and shadows on the floor, as shown in [Figure 21-7](#fig21-7). Don't worry
    if this looks *too* random—in the moving figure, this randomness will come alive
    and seem natural.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-08.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-7: Skeleton removed, motion noise added'
  prefs: []
  type: TYPE_NORMAL
- en: The main rule with this kind of project is *don't copy*. Freehand roughness
    cannot be recycled. No matter how similar one frame is to another, you need to
    sketch each frame entirely from scratch, using nothing but the stick figure as
    your guide. Duplicating the freehand strokes—even if you move or scale them—instantly
    kills the rough, natural feel and makes your animation wooden and dull. Don't
    be lazy; the more you draw the easier it gets. Check out the complete hand-drawn
    animation at[http://www.kirsanov.com/inkscape-animation/rough.gif](http://www.kirsanov.com/inkscape-animation/rough.gif).
  prefs: []
  type: TYPE_NORMAL
- en: You can use the same technique to trace with the Calligraphic pen over an imported
    bitmap manually. Make the bitmap half-transparent and sketch on top of it, trying
    to highlight the most important features and ignore the rest. In an animation,
    the source bitmaps might be frames of a video, still photos, or rendered 3D images.
  prefs: []
  type: TYPE_NORMAL
- en: 21.7 Adding Text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's move the entire animation down to free up some space for a text heading
    above it. Unhide all layers, select all objects on all layers (Ctrl-Alt-A), and
    move them downward.
  prefs: []
  type: TYPE_NORMAL
- en: 'The banner on our animation will be just a single word: "dance!". Can we do
    something more interesting than copying the same static text object into each
    frame?'
  prefs: []
  type: TYPE_NORMAL
- en: 'We could use the Calligraphic pen to draw ruffled handwritten letters over
    some text object used as a guide—rendering the entire animation in the same style.
    However, for the purpose of demonstration, let''s try something different: make
    the text banner wave smoothly as if on a flag. We could use theEnvelope Deformation
    path effect ([13.3.3](c13.xhtml#section13.3.3)), but it''s probably easier to
    apply some node sculpting instead ([12.5.7.2](c12.xhtml#section12.5.7.2)).'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, create a text object using a nice-looking font, convert it to path
    (Shift-Ctrl-C), ungroup (Ctrl-U), union (Ctrl-+), switch to the Node tool (F2),
    select all nodes (Ctrl-A), and Alt-drag one of them. The entire shape will smoothly
    bend and stretch, as [Figure 21-8](#fig21-8) demonstrates. If the letter shapes
    become too distorted, undo the drag and press Insert a couple times, each time
    doubling the number of nodes—this usually helps make the path you're sculpting
    behave more naturally.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-09.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-8: Node sculpting on a text banner'
  prefs: []
  type: TYPE_NORMAL
- en: Make two copies of the text object, sculpt each one differently—so they look
    like two shots of a banner floating in the wind—and interpolate between them.
    Then, just as we did for the dancer figure, distribute the interpolation steps
    into layers, placing them above the figure on the canvas ([Figure 21-9](#fig21-9)).
    Don't worry about precise placement; slight banner wobbling isn’t a problem.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-10.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-9: Interpolating the banner'
  prefs: []
  type: TYPE_NORMAL
- en: To see where to place each object relative to the previous layer, use the**Opacity**
    control on the **Layers** dialog to make the previous layer temporarily half-transparent.
    Compose the animated GIF again using the produce-gif.py script. [Figure 21-10](#fig21-10)
    shows the frames 001 to 005.
  prefs: []
  type: TYPE_NORMAL
- en: '![](tuts/t03-11.svg.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 21-10: Half of the animation''s frames (forward movement)'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [http://www.kirsanov.com/inkscape-animation/with-banner.gif](http://www.kirsanov.com/inkscape-animation/with-banner.gif)
    to see the result so far.
  prefs: []
  type: TYPE_NORMAL
- en: 21.8 Adding Color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only thing not to like about our animation is its total lack of color. Let's
    add a different colored background to each frame—for a real stroboscopic dance
    floor effect. To automate the random color selection, create a rectangle with
    an unset color and use the **Create Tiled Clones** dialog ([16.6](c16.xhtml#section16.6))
    to multiply it with some hue variation.
  prefs: []
  type: TYPE_NORMAL
- en: Paint the "dance!" banner with a contrasting bright color, also varying from
    frame to frame. Finally, to make the dancing man stand out from the background,
    add an elliptic gradient "spotlight" behind him; randomly move, scale, and rotate
    the spotlight on each frame for an additional energizing effect. The final version
    is at[http://www.kirsanov.com/inkscape-animation/final.gif](http://www.kirsanov.com/inkscape-animation/final.gif).
    Enjoy!
  prefs: []
  type: TYPE_NORMAL
