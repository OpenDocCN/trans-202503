- en: '21'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '21'
- en: 'Tutorial: Creating an Animation'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 教程：创建动画
- en: From the start, SVG was meant as a language for both static and animated vector
    graphics. It supports both scripted and declarative animation. For better or worse,
    however, animated SVG on the web never really caught on, and now it seems like
    the days of vector animation of any kind (such as Flash) are behind us. HTML +
    JavaScript or pure video are now what mostly move things online.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从一开始，SVG就被设计为既支持静态图形也支持动画矢量图形的语言。它支持脚本化动画和声明式动画。然而，无论是好是坏，基于SVG的动画在网页上的应用从未真正流行开来，现在看起来任何形式的矢量动画（如Flash）似乎都已经过时。现在，HTML
    + JavaScript或纯视频已成为主流在线内容呈现方式。
- en: Inkscape does not support animated SVG documents (although you can add animation
    attributes manually via the XML Editor) and can display SVG documents only statically.
    Still, you can use Inkscape to create static frames and then combine them into
    an animated GIF or a video—although without timeline control, it's difficult to
    work on anything longer than several frames long.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Inkscape不支持动画SVG文档（尽管你可以通过XML编辑器手动添加动画属性），只能静态显示SVG文档。不过，你仍然可以使用Inkscape创建静态帧，然后将它们合成一个动画GIF或视频——尽管没有时间线控制，处理超过几帧的动画会变得非常困难。
- en: 21.1 Creating the Template
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.1 创建模板
- en: 'The easiest way to create animation frames in Inkscape is by putting them on
    separate layers ([4.9](c04.xhtml#section4.9)). By toggling adjacent layers to
    be visible, you can see how your frames stack up and control what changes from
    one frame to the next. Creating many layers manually is tedious, so I wrote a
    simple Python script that creates a 200×200 px document with 100 empty layers:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Inkscape中创建动画帧的最简单方法是将它们放置在不同的图层上（[4.9](c04.xhtml#section4.9)）。通过切换相邻图层的可见性，你可以看到帧如何堆叠，并控制每一帧之间的变化。手动创建多个图层是非常繁琐的，因此我编写了一个简单的Python脚本，它可以创建一个200×200像素的文档，并带有100个空图层：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'All layers are created hidden (that''s what `display="none"` is for), so in
    Inkscape, you will need to unhide them one by one ([4.9.3](c04.xhtml#section4.9.3))
    to draw on them. You can change the number of layers that the script creates (`range(100)`)
    as well as the artboard’s dimensions (`width="200" height="200"`). Save the script
    into a file named generate-layers.py, and at a command prompt, run it and capture
    its output to an SVG file. (You will need Python installed on your computer; get
    it at[https://python.org/](https://python.org/).) Then, run Inkscape on this file:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图层都默认创建为隐藏状态（这就是`display="none"`的作用），所以在Inkscape中，你需要逐个解除隐藏（[4.9.3](c04.xhtml#section4.9.3)）才能在上面绘制。你可以更改脚本创建的图层数量（`range(100)`）以及画布的尺寸（`width="200"
    height="200"`）。将脚本保存为名为generate-layers.py的文件，并在命令提示符下运行它，并将其输出捕获到一个SVG文件中。（你需要在计算机上安装Python，可以通过[https://python.org/](https://python.org/)下载。）然后，在Inkscape中打开该文件：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can also put the resulting file (ani.svg) into your ~/.inkscape/templates
    folder, where it will work as a template, so the next time you will be able to
    create an empty 100-layer file by choosing it from the File ▶ New list. [Figure 21-1](#fig21-1)
    shows Inkscape's Layers dialog ([4.9.4](c04.xhtml#section4.9.4)) with the multilayer
    file loaded.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将生成的文件（ani.svg）放入你的~/.inkscape/templates文件夹中，这样它就会作为一个模板工作，所以下次你可以通过从文件▶新建列表中选择它来创建一个空的100层文件。[图21-1](#fig21-1)显示了加载了多层文件的Inkscape图层对话框（[4.9.4](c04.xhtml#section4.9.4)）。
- en: '![](tuts/t03-01.svg.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-01.svg.png)'
- en: 'Figure 21-1: A 100-layer animation template loaded into Inkscape'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图21-1：加载到Inkscape中的100层动画模板
- en: 21.2 Creating the Character
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.2 创建角色
- en: Let's make an animation of a dancing man, which is fun yet simple enough not
    to require much drawing skill and fits the animation’s small format. My hero's
    claim to fame will be the way he moves, so I don't need to make him look too sophisticated.
    A simple stick figure will do ([Figure 21-2](#fig21-2)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个跳舞的男人的动画，它既有趣又足够简单，不需要太多绘画技巧，适合小格式的动画。我的主角将以他的动作著称，因此我不需要让他看起来过于复杂。一个简单的简笔画就足够了（[图21-2](#fig21-2)）。
- en: '![](tuts/t03-02.svg.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-02.svg.png)'
- en: 'Figure 21-2: The stick figure, showing its nodes in the Node tool'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图21-2：表示人物节点的简笔画，在节点工具中显示
- en: It consists of three simple paths (arms, legs, and body) and one ellipse (head).
    Use the Pen tool ([14.1.1](c14.xhtml#section14.1.1)) with Ctrl to draw horizontal/vertical
    straight lines; use the Ellipse tool ([11.4](c11.xhtml#section11.4)) to create
    the head. To facilitate interpolation, do **Path ▶ Combine** on the body and limbs
    so they become one path, and use Ctrl-Alt-click in the Node tool ([12.5.3](c12.xhtml#section12.5.3))
    to add nodes in his elbow and knee joints.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它由三条简单的路径（手臂、腿部和身体）和一个椭圆（头部）组成。使用钢笔工具（[14.1.1](c14.xhtml#section14.1.1)）并按Ctrl键绘制水平/垂直直线；使用椭圆工具（[11.4](c11.xhtml#section11.4)）创建头部。为了方便插值，对身体和四肢使用**路径 ▶ 合并**，使它们成为一条路径，并在节点工具中按Ctrl-Alt点击（[12.5.3](c12.xhtml#section12.5.3)）在肘部和膝关节处添加节点。
- en: 21.3 Tweening
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.3 补间
- en: Now make a copy of the character by duplicating it (Ctrl-D with both head and
    body selected), move it to the right, and play with its nodes (in the Node tool)
    to give our man a funky dancing pose ([Figure 21-3](#fig21-3)). This provides
    the two *keyframes*, and the entire animation could be as simple as alternating
    between them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过复制角色来创建一个副本（选中头部和身体后按Ctrl-D），将其移动到右侧，并在节点工具中调整节点，给我们的人物一个有趣的舞蹈姿势（[图 21-3](#fig21-3)）。这提供了两个*关键帧*，整个动画可以简单地在这两个帧之间交替进行。
- en: '![](tuts/t03-03.svg.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-03.svg.png)'
- en: 'Figure 21-3: Two keyframes'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-3：两个关键帧
- en: Let's add some intermediate frames to make the transition between the keyframes
    smoother. Animators call this *tweening* (derived from*between*). Select both
    bodies (that is, the two path objects) and do **Extensions ▶ Generate from Path ▶ Interpolate**.
    Specify the number of **Interpolation steps** (say, 4), select **Interpolation
    method 1**, and, if desired, use a nonzero **Exponent** value to make the movement
    speed up or slow down nonlinearly. Then, create the heads for each of the tweened
    bodies by interpolating the two ellipses, using the same number of steps and the
    same Exponent ([Figure 21-4](#fig21-4)).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些中间帧，使关键帧之间的过渡更为平滑。动画师称这种过渡为*tweening*（来源于*between*）。选择两个身体（即两个路径对象），然后执行**扩展 ▶ 从路径生成 ▶ 插值**。指定**插值步骤数**（例如，4），选择**插值方法1**，如果需要，可以使用非零的**指数**值，使得运动的速度加快或减慢非线性。然后，通过插值两个椭圆来为每个插值后的身体创建头部，使用相同的步骤数和相同的指数（[图
    21-4](#fig21-4)）。
- en: '![](tuts/t03-04.svg.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-04.svg.png)'
- en: 'Figure 21-4: Interpolating the keyframes'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-4：插值关键帧
- en: If the tweening steps don't look right to you, undo the interpolation, tweak
    the keyframes, and re-interpolate until you get what you like. Interpolation method
    1 matches the nodes that are at the same position along the path, so it works
    best when one keyframe path was created by tweaking the other one without adding
    or removing nodes (as in our case). If two paths are of different origin and have
    incompatible nodes, method 2 is better.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果补间效果看起来不对，你可以撤销插值，调整关键帧，然后重新插值，直到你得到满意的效果。插值方法1会将处于相同路径位置的节点对齐，因此在一个关键帧的路径是通过调整另一个路径而创建的且没有添加或删除节点的情况下最为有效（就像我们的案例）。如果两条路径的起源不同并且节点不兼容，则方法2会更好。
- en: 21.4 Compositing
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.4 合成
- en: Let's place our animation in its proper place on the canvas and distribute the
    frames across layers. Remove the tweening and move the second keyframe right over
    the first. (Note that the dancer's right foot coincides in both keyframes because
    it rests on the floor.) Select both overlapping figures and place them on the
    canvas, scaling if necessary and leaving space for whatever other elements you
    plan to add (such as a text heading). Finally, interpolate the bodies and the
    heads again—in place, as shown in [Figure 21-5](#fig21-5).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将动画放置在画布的合适位置，并将帧分布在不同的图层上。移除补间，并将第二个关键帧移动到第一个关键帧的位置上。（请注意，舞者的右脚在两个关键帧中是重合的，因为它踩在地板上。）选择两个重叠的角色并将它们放置在画布上，必要时进行缩放，并为你计划添加的其他元素（如文本标题）留出空间。最后，再次插值身体和头部——如[图
    21-5](#fig21-5)所示。
- en: '![](tuts/t03-05.svg.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-05.svg.png)'
- en: 'Figure 21-5: Interpolating in place'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-5：就位插值
- en: 'The next task is a bit boring. You need to ungroup the interpolation paths
    and manually place each one on its own layer, from 002 to 005, with the keyframes
    occupying layers 001 and 006\. Then, duplicate the frames in the reverse order:
    frames 005 to 001 will go into range 007 to 011 to make the dancer smoothly return
    into the original position.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的任务有些无聊。你需要取消组合插值路径，并将每一条路径单独放置到自己的图层上，从002到005，关键帧占据001和006图层。然后，按照反向顺序复制这些帧：将第005帧到第001帧放入007到011的范围内，使舞者平滑地返回到原始位置。
- en: Use Shift-Page Up and Shift-Page Down to move the selected objects one layer
    up/down, and watch the status bar that shows in which layer your selected objects
    are located. Alternatively, you can cut (Ctrl-X) an object, switch to the destination
    layer, and paste it in place (Ctrl-Alt-V). Finally, make sure all the layers you've
    used are visible, and save the SVG file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Shift-Page Up 和 Shift-Page Down 将选中的对象向上一层/下一层移动，并观察状态栏，查看你所选对象位于哪一层。或者，你可以剪切（Ctrl-X）一个对象，切换到目标图层，然后粘贴到该位置（Ctrl-Alt-V）。最后，确保你使用的所有图层都是可见的，并保存
    SVG 文件。
- en: 21.5 Exporting
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.5 导出
- en: 'You can export the layers manually, but that would be tedious—especially if
    you need to do it again after viewing the result and making changes to the source.
    Fortunately, Inkscape has convenient command line parameters, so I wrote another
    Python script to automate the export:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以手动导出图层，但那会非常繁琐——特别是在查看结果并对源文件做出更改后，你还需要再做一次。幸运的是，Inkscape 提供了方便的命令行参数，所以我编写了一个
    Python 脚本来自动化导出过程：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The script takes as parameters the name of the source file, the numbers of the
    start and end layers to export, and the name of the resulting GIF. It calls Inkscape
    to export each layer separately; then, it calls the `convert` utility from ImageMagick
    to combine the frames into an animated GIF file that can then be viewed in any
    web browser.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本以源文件的名称、开始和结束图层的编号以及生成的 GIF 文件名作为参数。它调用 Inkscape 分别导出每个图层；然后，它调用 ImageMagick
    的 `convert` 工具将这些帧合成一个可以在任何网页浏览器中查看的动画 GIF 文件。
- en: 'Save it as produce-gif.py and run:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存为 produce-gif.py 并运行：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: View the output at [http://www.kirsanov.com/inkscape-animation/stick.gif](http://www.kirsanov.com/inkscape-animation/stick.gif).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://www.kirsanov.com/inkscape-animation/stick.gif](http://www.kirsanov.com/inkscape-animation/stick.gif)查看输出结果。
- en: 21.6 Freehand Drawing
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.6 自由手绘
- en: So far, our stick-figure animation looks at best mildly engaging. This smooth,
    vectory style is good for technical animations, such as demonstrating the workings
    of a machine, but it's not too inspiring for an animated dance.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的简笔画动画看起来最多只能算是稍微引人入胜。这种平滑、矢量风格适合技术性动画，比如演示机器的工作原理，但对于一段动画舞蹈来说，灵感不足。
- en: To improve the stick figure, hide all layers except `001`, select the figure,
    and lower its opacity. Then arm yourself with the Calligraphic pen ([14.2](c14.xhtml#section14.2)),
    select a **Width** of 20 with **Tremor** of 40, and draw freehand strokes over
    the stick figure. Try to make it more random, funky, and personalized; add more
    pronounced feet and fists and more human-like body forms ([Figure 21-6](#fig21-6)).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善简笔画人物，隐藏所有图层，除了 `001`，选择人物并降低其不透明度。然后使用书法笔（[14.2](c14.xhtml#section14.2)），选择
    **宽度** 为 20，**颤抖** 为 40，并在简笔画人物上绘制自由手绘的笔画。尽量让它看起来更随意、时髦、有个性；添加更加突出的脚和拳头，以及更具人性化的身体形态（[图
    21-6](#fig21-6)）。
- en: '![](tuts/t03-07.svg.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-07.svg.png)'
- en: 'Figure 21-6: Humanizing the figure with Calligraphic pen'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-6：使用书法笔使人物更加人性化
- en: When done, delete the original skeleton figure. It has served its function of
    a blueprint and is no longer needed. The result looks a bit foreign in its roughness
    upon the immaculate white background. To fix this, reduce the width of the pen
    to 1 and add some thin random strokes around the dancer, hinting at his limbs'
    motion and shadows on the floor, as shown in [Figure 21-7](#fig21-7). Don't worry
    if this looks *too* random—in the moving figure, this randomness will come alive
    and seem natural.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，删除原始的骨架图形。它已完成作为蓝图的功能，不再需要。由于其粗糙的外观，它在纯白背景下看起来有些陌生。为了修正这一点，减少笔的宽度至 1，并在舞者周围添加一些细小的随机笔画，暗示他的四肢运动和地板上的阴影，如[图
    21-7](#fig21-7)所示。别担心如果看起来*太*随意——在移动的图形中，这种随机性将会生动起来，显得很自然。
- en: '![](tuts/t03-08.svg.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-08.svg.png)'
- en: 'Figure 21-7: Skeleton removed, motion noise added'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-7：骨架去除，运动噪音添加
- en: The main rule with this kind of project is *don't copy*. Freehand roughness
    cannot be recycled. No matter how similar one frame is to another, you need to
    sketch each frame entirely from scratch, using nothing but the stick figure as
    your guide. Duplicating the freehand strokes—even if you move or scale them—instantly
    kills the rough, natural feel and makes your animation wooden and dull. Don't
    be lazy; the more you draw the easier it gets. Check out the complete hand-drawn
    animation at[http://www.kirsanov.com/inkscape-animation/rough.gif](http://www.kirsanov.com/inkscape-animation/rough.gif).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的主要规则是*不要复制*。自由手绘的粗糙感不能被回收。无论一帧与另一帧有多相似，你都需要从头开始完全手绘每一帧，只用简笔人物作为指南。复制自由手绘的笔画—即使你移动或缩放它们—会立刻消除那种粗犷、自然的感觉，使你的动画变得呆板和沉闷。不要偷懒；你画得越多，越容易。查看完整的手绘动画：[http://www.kirsanov.com/inkscape-animation/rough.gif](http://www.kirsanov.com/inkscape-animation/rough.gif)。
- en: You can use the same technique to trace with the Calligraphic pen over an imported
    bitmap manually. Make the bitmap half-transparent and sketch on top of it, trying
    to highlight the most important features and ignore the rest. In an animation,
    the source bitmaps might be frames of a video, still photos, or rendered 3D images.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用相同的技术在导入的位图上手动描摹书法笔。将位图设为半透明并在其上进行草绘，尽量突出最重要的特征，忽略其他部分。在动画中，源位图可能是视频帧、静态照片或渲染的
    3D 图像。
- en: 21.7 Adding Text
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.7 添加文本
- en: Let's move the entire animation down to free up some space for a text heading
    above it. Unhide all layers, select all objects on all layers (Ctrl-Alt-A), and
    move them downward.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将整个动画向下移动，为其上方腾出一些空间，用于添加文本标题。取消所有图层的隐藏，选择所有图层上的所有对象（Ctrl-Alt-A），然后将它们向下移动。
- en: 'The banner on our animation will be just a single word: "dance!". Can we do
    something more interesting than copying the same static text object into each
    frame?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们动画中的横幅将只是一个单词：“dance!”。我们能做得比将相同的静态文本对象复制到每一帧更有趣吗？
- en: 'We could use the Calligraphic pen to draw ruffled handwritten letters over
    some text object used as a guide—rendering the entire animation in the same style.
    However, for the purpose of demonstration, let''s try something different: make
    the text banner wave smoothly as if on a flag. We could use theEnvelope Deformation
    path effect ([13.3.3](c13.xhtml#section13.3.3)), but it''s probably easier to
    apply some node sculpting instead ([12.5.7.2](c12.xhtml#section12.5.7.2)).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用书法笔在某些文本对象上绘制起伏的手写字母—将整个动画渲染为相同的风格。然而，为了演示的目的，我们尝试做些不同的事情：让文本横幅像旗帜一样平滑地飘动。我们可以使用信封变形路径效果（[13.3.3](c13.xhtml#section13.3.3)），但使用节点雕刻可能更简单（[12.5.7.2](c12.xhtml#section12.5.7.2)）。
- en: To begin, create a text object using a nice-looking font, convert it to path
    (Shift-Ctrl-C), ungroup (Ctrl-U), union (Ctrl-+), switch to the Node tool (F2),
    select all nodes (Ctrl-A), and Alt-drag one of them. The entire shape will smoothly
    bend and stretch, as [Figure 21-8](#fig21-8) demonstrates. If the letter shapes
    become too distorted, undo the drag and press Insert a couple times, each time
    doubling the number of nodes—this usually helps make the path you're sculpting
    behave more naturally.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个文本对象，选择一个好看的字体，将其转换为路径（Shift-Ctrl-C），取消分组（Ctrl-U），合并（Ctrl-+），切换到节点工具（F2），选择所有节点（Ctrl-A），然后按住
    Alt 拖动其中一个节点。整个形状会平滑地弯曲和拉伸，如[图 21-8](#fig21-8)所示。如果字母形状变得过于扭曲，可以撤销拖动并按几次 Insert，每次都将节点数翻倍—这通常有助于让你雕刻的路径表现得更自然。
- en: '![](tuts/t03-09.svg.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-09.svg.png)'
- en: 'Figure 21-8: Node sculpting on a text banner'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-8：文本横幅的节点雕刻
- en: Make two copies of the text object, sculpt each one differently—so they look
    like two shots of a banner floating in the wind—and interpolate between them.
    Then, just as we did for the dancer figure, distribute the interpolation steps
    into layers, placing them above the figure on the canvas ([Figure 21-9](#fig21-9)).
    Don't worry about precise placement; slight banner wobbling isn’t a problem.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 复制两份文本对象，对每一份进行不同的雕刻处理—使它们看起来像是两幅在风中飘动的横幅画面—然后在它们之间进行插值。接着，像我们为舞者形象做的那样，将插值步骤分布到多个图层，将它们放置在画布上的人物上方（[图
    21-9](#fig21-9)）。不必担心精确位置；轻微的横幅晃动并不会有问题。
- en: '![](tuts/t03-10.svg.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-10.svg.png)'
- en: 'Figure 21-9: Interpolating the banner'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-9：横幅的插值
- en: To see where to place each object relative to the previous layer, use the**Opacity**
    control on the **Layers** dialog to make the previous layer temporarily half-transparent.
    Compose the animated GIF again using the produce-gif.py script. [Figure 21-10](#fig21-10)
    shows the frames 001 to 005.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看每个对象相对于前一层的位置，请使用**不透明度**控制，在**图层**对话框中将前一层暂时设置为半透明。使用 produce-gif.py 脚本重新生成动画
    GIF。[图 21-10](#fig21-10) 显示了帧 001 到 005。
- en: '![](tuts/t03-11.svg.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](tuts/t03-11.svg.png)'
- en: 'Figure 21-10: Half of the animation''s frames (forward movement)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 21-10：动画帧的一半（向前移动）
- en: Visit [http://www.kirsanov.com/inkscape-animation/with-banner.gif](http://www.kirsanov.com/inkscape-animation/with-banner.gif)
    to see the result so far.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [http://www.kirsanov.com/inkscape-animation/with-banner.gif](http://www.kirsanov.com/inkscape-animation/with-banner.gif)
    查看目前的效果。
- en: 21.8 Adding Color
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 21.8 添加颜色
- en: The only thing not to like about our animation is its total lack of color. Let's
    add a different colored background to each frame—for a real stroboscopic dance
    floor effect. To automate the random color selection, create a rectangle with
    an unset color and use the **Create Tiled Clones** dialog ([16.6](c16.xhtml#section16.6))
    to multiply it with some hue variation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的动画唯一的不足就是完全没有颜色。让我们给每一帧添加不同颜色的背景——为了呈现真正的频闪舞池效果。为了自动选择随机颜色，创建一个颜色未设置的矩形，并使用**创建平铺克隆**对话框（[16.6](c16.xhtml#section16.6)）来将其复制并添加一些色调变化。
- en: Paint the "dance!" banner with a contrasting bright color, also varying from
    frame to frame. Finally, to make the dancing man stand out from the background,
    add an elliptic gradient "spotlight" behind him; randomly move, scale, and rotate
    the spotlight on each frame for an additional energizing effect. The final version
    is at[http://www.kirsanov.com/inkscape-animation/final.gif](http://www.kirsanov.com/inkscape-animation/final.gif).
    Enjoy!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 用对比鲜明的亮色涂上“dance！”横幅，并且让颜色在每一帧之间有所变化。最后，为了让跳舞的人物从背景中突出出来，在他身后添加一个椭圆形渐变“聚光灯”；每一帧随机移动、缩放并旋转这个聚光灯，增加额外的动感效果。最终版本请见[http://www.kirsanov.com/inkscape-animation/final.gif](http://www.kirsanov.com/inkscape-animation/final.gif)。享受吧！
