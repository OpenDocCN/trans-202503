- en: '6'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6'
- en: MANIPULATING MINECRAFT
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 操控 MINECRAFT
- en: IN THIS CHAPTER, YOU’LL WRITE PYTHON PROGRAMS TO HACK INTO THE MINECRAFT ENVIRONMENT
    SO YOU CAN DO SOME COOL THINGS. YOU’LL SEND MESSAGES TO THE MINECRAFT WORLD AND
    TURN ITS GRASS INTO TRAMPOLINES. THEN YOU’LL WRITE YOUR FIRST MINECRAFT GAME,
    *SAND DROP*, WHERE PLAYERS DODGE FALLING BLOCKS OF SAND. USING YOUR GLUE GUN LED
    LIGHT THAT YOU BUILT IN [CHAPTER 3](ch03.xhtml#ch03), YOU’LL ADD REAL-WORLD HARDWARE
    THAT YOU’LL CONTROL FROM MINECRAFT. COMBINING THE POWER OF MINECRAFT WITH THE
    PI CAMERA, YOU’LL CREATE A HIDDEN CAMERA YOU CONTROL WITH TOWERS OF GOLD, BRICK,
    AND MELONS!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将编写 Python 程序，进入 Minecraft 环境，进行一些酷炫的操作。你将向 Minecraft 世界发送信息，并把草地变成蹦床。然后，你将编写第一个
    Minecraft 游戏，*沙子掉落*，玩家需要躲避掉落的沙块。利用你在[第 3 章](ch03.xhtml#ch03)中制作的胶枪 LED 灯，你将加入实际的硬件，并从
    Minecraft 中控制它。结合 Minecraft 的强大功能和 Pi 摄像头，你将创建一个隐藏的摄像头，通过金块、砖块和西瓜塔来控制它！
- en: WHAT YOU’LL NEED
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你将需要的物品
- en: 'For most of the projects in this chapter, you’ll be coding in Python and Minecraft,
    so you don’t need many items beyond your Pi and a computer. Here are the few additional
    items you need:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的大多数项目中，你将使用 Python 和 Minecraft 编程，因此你只需要 Pi 和计算机，其他物品并不多。以下是你需要的几个额外物品：
- en: Raspberry Pi
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi
- en: Your glue gun LED light or a new LED with a 220–330 ohm resistor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的胶枪 LED 灯或带有 220-330 欧姆电阻的新 LED
- en: Jumper wires
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳线
- en: Pi Camera
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pi 摄像头
- en: MINECRAFT ON THE RASPBERRY PI
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上运行 MINECRAFT
- en: 'Chances are you’re already familiar with Minecraft, but just in case you’re
    not, here’s a description: Minecraft is a game where you mine, craft, and create
    all kinds of weird and wonderful objects within a 3D world that consists of various
    terrains, habitats, and materials. It’s often described as a computer-game version
    of LEGO. The world is free roaming: you, as the main character Steve or Alex,
    can travel wherever you want to, see what you want to, and basically do what you
    want to.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经熟悉 Minecraft，但如果你不熟悉，这里有个描述：Minecraft 是一款游戏，你可以在其中开采、制造和创造各种奇特的物品，所有的操作都发生在一个由各种地形、栖息地和材料构成的
    3D 世界中。它常被描述为 LEGO 的计算机游戏版。这个世界是自由漫游的：你可以作为主角 Steve 或 Alex，随意旅行、观看你想看的事物，基本上做你想做的任何事情。
- en: The Raspberry Pi operating system comes preinstalled with a Minecraft Pi Edition.
    This is a stripped-down version of the game that lets you hack the Minecraft world
    through a range of programming languages, including Python, which is what we’ll
    use here.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Raspberry Pi 操作系统预装了 Minecraft Pi 版。这是一个简化版的游戏，让你通过多种编程语言，包括 Python（我们将在这里使用它），来修改
    Minecraft 世界。
- en: Starting Minecraft
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启动 Minecraft
- en: Boot up your Raspberry Pi and click the Pi symbol at the top left of the screen.
    A drop-down menu appears. Scroll down to and click the **Games** tab. The option
    to open Minecraft appears. Click this option to load the Minecraft Pi Edition,
    as shown in [Figure 6-1](ch06.xhtml#ch06fig01). Loading will take between a few
    seconds and a full minute, depending on which Pi model you’re using. Minecraft
    loads fastest on the Pi 4 model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 启动你的 Raspberry Pi，点击屏幕左上角的 Pi 图标。会弹出一个下拉菜单。向下滚动并点击 **Games** 标签，出现打开 Minecraft
    的选项。点击该选项加载 Minecraft Pi 版，如[图 6-1](ch06.xhtml#ch06fig01)所示。加载时间取决于你使用的 Pi 型号，可能从几秒钟到一分钟不等。在
    Pi 4 型号上，Minecraft 加载最快。
- en: '![Image](../images/06fig01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig01.jpg)'
- en: '**FIGURE 6-1** Loading Minecraft Pi Edition'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-1** 加载 Minecraft Pi 版'
- en: 'Using Minecraft on the Pi is the same as using it on your computer. The Pi
    uses a classic keyboard-control layout to move your player around the world. But
    the Pi Edition has something extra: it allows you to *fly*, meaning you can quickly
    travel to other locations. You do this by pressing the spacebar twice, using the
    arrow keys for direction, and using your mouse to control the player’s view (as
    usual).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Pi 上使用 Minecraft 和在计算机上使用是一样的。Pi 使用经典的键盘控制布局来移动玩家角色。但 Pi 版有额外功能：它允许你 *飞行*，意味着你可以迅速到达其他地方。你可以通过按下空格键两次来实现飞行，使用箭头键控制方向，使用鼠标来控制玩家的视角（和以前一样）。
- en: 'The other control you’ll use in these hacks is the TAB key. It releases the
    mouse from the Minecraft controls so you can use it to click elsewhere. This means
    you can select the Python programming interface and either write new code or select
    your program to run. Then you can launch Minecraft and double-click either the
    left or right mouse button in the middle of the world: the mouse movement will
    control the player’s view again.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你在这些黑客操作中将使用的另一个控制键是 TAB 键。它可以将鼠标从 Minecraft 控制中释放，这样你就可以点击其他地方。这意味着你可以选择 Python
    编程界面，编写新的代码或选择你要运行的程序。然后，你可以启动 Minecraft，并在世界的中间双击鼠标左键或右键：鼠标的移动将再次控制玩家的视角。
- en: This table shows the keys for the main Minecraft controls.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格显示了 Minecraft 主要控制的按键。
- en: '| **KEY** | **ACTION** |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **键** | **动作** |'
- en: '| --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| W | Move forward |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| W | 向前移动 |'
- en: '| A | Move left |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| A | 向左移动 |'
- en: '| S | Move backward |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| S | 向后移动 |'
- en: '| D | Move right |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| D | 向右移动 |'
- en: '| E | Load inventory |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| E | 加载物品栏 |'
- en: '| Spacebar | Jump |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 空格键 | 跳跃 |'
- en: '| Double spacebar | Fly/fall |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 双击空格键 | 飞行/下落 |'
- en: '| SHIFT | Float downward |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| SHIFT | 向下漂浮 |'
- en: '| ESC | Pause/Game menu |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| ESC | 暂停/游戏菜单 |'
- en: '| TAB | Release mouse cursor |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| TAB | 释放鼠标光标 |'
- en: 'Finding Yourself: Using the X-, Y-, and Z- Coordinates'
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 找到自己：使用 X、Y 和 Z 坐标
- en: Although the Pi Edition of the Minecraft world is not as large as the full game,
    it’s still easy to get lost. To locate the player in the world, the game uses
    x-, y-, and z- coordinates, as shown in [Figure 6-2](ch06.xhtml#ch06fig02).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Pi 版 Minecraft 的世界没有完整版那么大，但仍然很容易迷路。为了定位玩家在世界中的位置，游戏使用 x、y 和 z 坐标，如[图 6-2](ch06.xhtml#ch06fig02)所示。
- en: '![Image](../images/06fig02.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig02.jpg)'
- en: '**FIGURE 6-2** The x-, y-, and z- coordinates are located at the top left of
    the window.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-2** x、y 和 z 坐标位于窗口的左上角。'
- en: These three values are an essential part of the game. They ensure that the things
    you make happen in your program happen at your player’s location. You’ll use these
    coordinates in your programs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个值是游戏的核心部分。它们确保你在程序中创建的事件发生在玩家的位置。你将在程序中使用这些坐标。
- en: The coordinate values display at the top left of the screen. All values are
    measured from the middle of the game world. So, if you’re at the x, y, and z values
    0.0, 0.0, 0.0, you’re in the exact center of the world. A negative, or minus,
    x value means the player is to the left of the world’s midpoint; a negative y
    value means the player is below the midpoint; and a negative z value means the
    player is behind the midpoint. For example, 0.0, -45.7, 0.0 means the player is
    45.7 blocks lower than the middle of the world. But the worlds are randomly generated,
    so the size of the worlds varies. This table lists the maximum and minimum values
    of these coordinates.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 坐标值显示在屏幕的左上角。所有的值都是从游戏世界的中心开始测量的。因此，如果你处于 x、y 和 z 值为 0.0、0.0、0.0 的位置，你就处于世界的正中心。负数或减号的
    x 值表示玩家位于世界中心的左侧；负数的 y 值表示玩家位于中心的下方；负数的 z 值表示玩家位于中心的后方。例如，0.0，-45.7，0.0 意味着玩家位于世界中心下方
    45.7 个方块的位置。但世界是随机生成的，所以世界的大小会有所不同。此表列出了这些坐标的最大值和最小值。
- en: '| **COORDINATE** | **INDICATES** | **MINIMUM VALUE** | **MAXIMUM VALUE** |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **坐标** | **表示** | **最小值** | **最大值** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| x | Left and right movement | -255 | +255 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| x | 左右移动 | -255 | +255 |'
- en: '| y | Up and down movement | -128 | +128 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| y | 上下移动 | -128 | +128 |'
- en: '| z | Forward and backward movement | -255 | +255 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| z | 前后移动 | -255 | +255 |'
- en: Hacking Minecraft
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 破解 Minecraft
- en: Let’s start hacking Minecraft! The Raspberry Pi operating system lets you connect
    directly to Minecraft by using Python code. You can develop and write your programs,
    open and start a Minecraft game, run your code, and then return to the Minecraft
    world to see the effects in action.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始破解 Minecraft 吧！Raspberry Pi 操作系统允许你通过 Python 代码直接连接到 Minecraft。你可以开发并编写程序，打开并启动
    Minecraft 游戏，运行代码，然后返回到 Minecraft 世界中，查看效果。
- en: When you’re running your hacking programs, unless you’re using a Raspberry Pi
    4, don’t run Minecraft in full-screen mode; instead, keep the window at its default
    size. Full-screen mode prevents you from viewing your code or any program errors
    and puts a huge demand on the graphics card, creating lag in the game. If you
    are using the Pi 4, feel free to use full-screen mode! Also, because of a bug
    in the Minecraft program, full-screen mode prevents you from accessing the last
    line of items in your inventory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行黑客程序时，除非你使用的是 Raspberry Pi 4，否则不要在全屏模式下运行 Minecraft；应保持窗口的默认大小。全屏模式会阻止你查看代码或任何程序错误，并且对显卡的要求非常高，会导致游戏卡顿。如果你使用的是
    Pi 4，可以放心使用全屏模式！另外，由于 Minecraft 程序中的一个 bug，全屏模式还会阻止你访问背包中的最后一行物品。
- en: POSTING A MESSAGE TO CHAT
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向聊天室发送消息
- en: We’ll start with a simple program that will post a message to the Minecraft
    world, as shown in [Figure 6-3](ch06.xhtml#ch06fig03). This hack is only three
    lines and will teach you how the interaction between Python and Minecraft works.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的程序开始，它会向 Minecraft 世界发送一条消息，如[图 6-3](ch06.xhtml#ch06fig03)所示。这个黑客程序只有三行代码，它将教你
    Python 和 Minecraft 之间的交互方式。
- en: '![Image](../images/06fig03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig03.jpg)'
- en: '**FIGURE 6-3** Displaying a chat message in Minecraft'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-3** 在 Minecraft 中显示聊天消息'
- en: Coding the Chat Messenger
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写聊天消息程序
- en: To begin your first hack, open Python and start a new file. Then enter the program
    code in [Listing 6-1](ch06.xhtml#ch06ex01). Remember that you can download the
    program from *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*
    and either use it to compare against your program or just run the *first_program.py*
    file from the download.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始你的第一个黑客程序，打开 Python 并创建一个新文件。然后在[清单 6-1](ch06.xhtml#ch06ex01)中输入程序代码。记住，你可以从*
    [https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*下载程序，进行对比或直接运行下载的
    *first_program.py* 文件。
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**LISTING 6-1** The Minecraft messaging program'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 6-1** Minecraft 消息程序'
- en: First, import the `mcpi` library, which enables you to use Python to control
    Minecraft. This library tells the program to open and run in Minecraft. To trigger
    events within the Minecraft world, use the library’s `minecraft.Minecraft.create()`
    function to create a connection from Python to Minecraft. Store that function
    in the variable `mc` so you don’t have to type it each time. Then use the `postToChat()`
    function, after your newly created `mc` variable, to display a message in the
    Minecraft game. You can change the message inside the quotes to anything you want
    to display.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入 `mcpi` 库，它允许你使用 Python 控制 Minecraft。这个库告诉程序在 Minecraft 中打开并运行。为了在 Minecraft
    世界中触发事件，使用库中的 `minecraft.Minecraft.create()` 函数从 Python 到 Minecraft 创建连接。将该函数存储在变量
    `mc` 中，这样你每次就不需要重新输入。然后，在新创建的 `mc` 变量后，使用 `postToChat()` 函数在 Minecraft 游戏中显示消息。你可以随意更改引号内的消息内容，显示任何你想要的文本。
- en: Running Your Program
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: To run the program, save the file and then open Minecraft. Start a game and
    wait for the world to load. Once it’s loaded, press TAB to release the mouse from
    the game so you can use it to find your hack. Next, select your Python program
    (open it if you closed it), and execute it by pressing **F5**. Your program will
    start running in Minecraft automatically. Return to the Minecraft game by selecting
    it with either one of the mouse buttons. Your custom message should appear. Congratulations!
    You’ve made your first Minecraft hack! Now let’s do something a bit more adventurous.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行程序，保存文件后打开 Minecraft。启动游戏并等待世界加载。一旦加载完成，按 TAB 键释放鼠标，使你能够找到你的黑客程序。接下来，选择你的
    Python 程序（如果你关掉了它，就重新打开），然后按 **F5** 执行它。程序会自动在 Minecraft 中运行。通过点击任意鼠标按钮返回 Minecraft
    游戏，你的自定义消息应该会出现。恭喜！你已经制作了你的第一个 Minecraft 黑客程序！接下来，让我们做一些更有冒险性的事情。
- en: TRAMPOLINE GRASS
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 蹦床草地
- en: This trampoline project walks you through creating your first proper interactive
    program. Each time you step onto a block of grass, you’ll spring into the air
    just like you’re on a trampoline, as shown in [Figure 6-4](ch06.xhtml#ch06fig04).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个蹦床项目带你一步步创建你的第一个真正的互动程序。每当你踏上草地上的一个方块时，你会像在蹦床上一样弹跳起来，如[图 6-4](ch06.xhtml#ch06fig04)所示。
- en: '![Image](../images/06fig04.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig04.jpg)'
- en: '**FIGURE 6-4** Turn all grass into a trampoline'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-4** 将所有草地变成蹦床'
- en: Coding the Trampoline Grass
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写蹦床草地程序
- en: Begin the hack by opening Python and starting a new file. Enter the program
    code in [Listing 6-2](ch06.xhtml#ch06ex02). Remember that you can download the
    program from *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*
    and either use it to compare against your program or just run the *trampoline.py*
    file from the download.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Python并开始一个新文件，启动黑客任务。输入[清单6-2](ch06.xhtml#ch06ex02)中的程序代码。记住，你可以从*[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*下载程序，使用它与你的程序进行对比，或者直接运行下载的*trampoline.py*文件。
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**LISTING 6-2** The trampoline grass program'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单6-2** 跳床草程序'
- en: Import the `minecraft` module from the `mcpi` library again so you can use Python
    to control Minecraft. Save the `minecraft.Minecraft.create()` connection into
    a variable named `mc` again.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 再次从`mcpi`库导入`minecraft`模块，以便你能使用Python控制Minecraft。将`minecraft.Minecraft.create()`连接保存到一个名为`mc`的变量中。
- en: Then create a `while` loop ❶, which, as you might remember from [Chapter 2](ch02.xhtml#ch02),
    makes sure the program keeps running. Also, remember to indent the code after
    the `while` line four spaces because it belongs in the loop.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建一个`while`循环❶，如你在[第2章](ch02.xhtml#ch02)中记得的那样，确保程序一直运行下去。同时，记得在`while`语句后缩进四个空格，因为它属于循环的一部分。
- en: In the loop, you find and return the current position of your player within
    the Minecraft environment ❷ and the type of block the player is standing on ❸.
    This is important because only the grass is springy, not any other ground. This
    position is returned as an ID number, and you store it in a variable called `b`.
    You subtract 1 from the y position of the block, which is the up-and-down coordinate.
    The reason is that you want to affect the block *below* the player, not the actual
    player.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，你可以找到并返回玩家在Minecraft环境中的当前位置❷，以及玩家站立的方块类型❸。这很重要，因为只有草地是有弹性的，而其他地面没有。这一位置将返回一个ID号，并存储在名为`b`的变量中。你从方块的y位置中减去1，这个y值是上下坐标。原因是你想影响玩家*下方*的方块，而不是玩家本身。
- en: Use a conditional to check the kind of ground you’re standing on ❹. Each type
    of block has an ID value, and the value for a grass block is `2`. So you check
    whether the block ID value stored in variable `b` is equal to `2` and run the
    code to make the grass bouncy only if it has that value.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用条件语句检查你站在什么样的地面上❹。每种方块都有一个ID值，草方块的ID值是`2`。所以你检查存储在变量`b`中的方块ID值是否等于`2`，只有当它的值为`2`时，才运行代码让草地变得有弹性。
- en: When the conditional finds that the player *is* indeed standing on grass, you
    use `setPos()` to send the player up in the air to a new y position ❺. You want
    to send the player up, not across, so you keep the same x and z positions but
    add 20 to the y value. The player should shoot into the air.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件判断发现玩家*确实*站在草地上时，使用`setPos()`将玩家送到空中到新的y位置❺。你想让玩家向上移动，而不是横向移动，所以保持相同的x和z位置，只需将y值加上20。玩家应该会飞跃到空中。
- en: Running Your Program
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: As before, save your program and make sure Minecraft is open. Resume your game
    and wait for the world to load. Press TAB to release the mouse from the game,
    and then select your Python program. Execute it by pressing **F5**, and return
    to the Minecraft window by clicking it with the mouse. Walk around and watch out
    for that grass!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如之前一样，保存你的程序并确保Minecraft已打开。恢复游戏并等待世界加载完毕。按TAB键将鼠标从游戏中释放，然后选择你的Python程序。按**F5**运行程序，然后点击Minecraft窗口回到游戏中。四处走动，注意那片草地！
- en: If you’re getting any errors, check that you’ve followed the same indentation
    spacing as in [Listing 6-2](ch06.xhtml#ch06ex02). Also, make sure you included
    the colon after the `while True` and `if` lines.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到任何错误，检查是否按[清单6-2](ch06.xhtml#ch06ex02)中的缩进格式编写代码。还要确保在`while True`和`if`语句后都加上了冒号。
- en: Taking It Further
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更进一步
- en: You can alter your program to make the player go higher, lower, or even underground—a
    kind of antigravity trampoline—by changing the `p.y` number in `mc.player.setPos()`.
    Try a few numbers to see the effect. As another challenge, try changing the trigger
    block ID so the water triggers the trampoline instead. Check out the IDs at *[https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/](https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/)*.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以修改程序，让玩家飞得更高、更低，甚至进入地下——一种反重力蹦床——通过改变 `mc.player.setPos()` 中的 `p.y` 数值。尝试一些不同的数字来查看效果。作为另一个挑战，尝试改变触发方块的
    ID，让水代替沙块触发蹦床。查看方块 ID，请访问 *[https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/](https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/)*。
- en: THE SAND DROP GAME
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 沙块掉落游戏
- en: 'Now you’ll make your first game, called *Sand Drop*. In this simple game, blocks
    of sand drop from the sky, and the player has to dodge them. In the Minecraft
    environment, the sand block is automatically affected by gravity: if you set a
    sand block above the player, it will fall downward, landing on the player if they
    don’t move in time. If one of the blocks hits the player, it’s *game over*.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将制作你的第一个游戏，叫做 *沙块掉落*。在这个简单的游戏中，沙块从天空中掉下来，玩家需要躲避它们。在 Minecraft 环境中，沙块会自动受到重力的影响：如果你将沙块放在玩家上方，它会向下掉落，如果玩家没有及时移动，沙块就会砸到玩家。如果其中一个沙块击中了玩家，游戏就结束了。
- en: You’ll program the sand blocks to follow you as you move around the world ([Figure
    6-5](ch06.xhtml#ch06fig05)), so don’t think you can run away. The sand is out
    to get you!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你将编写程序，让沙块随着你在世界中移动（见[图 6-5](ch06.xhtml#ch06fig05)），所以别以为你可以逃跑。沙块正追着你呢！
- en: '![Image](../images/06fig05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig05.jpg)'
- en: '**FIGURE 6-5** The *Sand Drop* game'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-5** *沙块掉落* 游戏'
- en: Coding the Sand Drop Game
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写沙块掉落游戏
- en: Begin the hack by opening Python and starting a new file. Enter the program
    code in [Listing 6-3](ch06.xhtml#ch06ex03). Remember that you can download the
    program from *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*
    and either use it to compare against your program or just run the *sand_drop.py*
    file from the download.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开 Python 并开始一个新文件来开始破解。将程序代码输入[清单 6-3](ch06.xhtml#ch06ex03)。记得你可以从 *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*
    下载程序，并用它来与自己的程序进行比较，或者直接运行下载的 *sand_drop.py* 文件。
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**LISTING 6-3** The *Sand Drop* game program'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 6-3** *沙块掉落* 游戏程序'
- en: As with previous hacks, begin by importing the `minecraft` library and storing
    the event trigger in the `mc` variable to keep it simple and save you from having
    to type `minecraft.Minecraft.create()` each time.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 和以前的破解一样，首先导入 `minecraft` 库，并将事件触发器存储在 `mc` 变量中，这样就可以简化操作，避免每次都输入 `minecraft.Minecraft.create()`。
- en: Also import the `sleep()` function from the `time` module, which adds a small
    delay between each block dropping. This gives you some time to dodge each block.
    Add a short time delay after the game begins and before the blocks start falling
    ❶ to give you time to return to the game from the Python window. The blocks will
    follow you around, so you need to get the player’s x, y, and z position data.
    Use a `while` loop to check whether a sand block has hit you ❷. The loop does
    this by checking the block’s ID at the same position as the player. If it’s not
    block ID 13—the sand block—you haven’t been hit. Yet.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同时从 `time` 模块导入 `sleep()` 函数，该函数在每个沙块掉落之间添加了一个小延迟。这样可以给你一些时间来躲避每个沙块。在游戏开始和沙块开始掉落之前，添加一个短暂的时间延迟
    ❶，这样你可以有时间从 Python 窗口返回到游戏。沙块会随着你移动，所以你需要获取玩家的 x、y 和 z 坐标数据。使用 `while` 循环检查是否有沙块击中你
    ❷。这个循环通过检查玩家当前位置的方块 ID 来判断，如果方块 ID 不是 13——沙块，那么你还没有被击中。
- en: If you haven’t been hit, the next line runs to place and drop a new sand block.
    Note that the block’s y position is +25, meaning that the block is placed 25 blocks
    above you before it drops. Then you wait for 1 second before running the next
    line of code, which takes the player’s new x, y, and z position reading in case
    you’ve moved. If a sand block does hit you, a message is posted to the Minecraft
    world, and it’s game over for you ❸.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有被击中，下一行代码会将沙块放置到指定位置并掉落。注意，沙块的 y 坐标是 +25，这意味着沙块在掉落前会在你上方 25 个方块的位置被放置。然后，你需要等待
    1 秒钟才运行下一行代码，这时会读取玩家新的 x、y 和 z 坐标，以防你已经移动。如果沙块击中了你，Minecraft 世界中会发布一条消息，游戏结束 ❸。
- en: Running Your Program
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: As before, save your program as *sand_drop.py*, make sure Minecraft is open,
    and start or resume a game. Release the mouse by pressing TAB, and select and
    execute your Python program. Return to your Minecraft game, and get ready to dodge
    that falling sand.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，将程序保存为*sand_drop.py*，确保 Minecraft 已经打开，并开始或继续游戏。按下 TAB 键释放鼠标，然后选择并执行你的
    Python 程序。返回 Minecraft 游戏，准备好躲避掉落的沙子。
- en: Taking It Further
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进一步探讨
- en: If you want to test your reflexes, try changing the height of the block to make
    the game more challenging. If the blocks are closer to the player when they start
    falling, you’ll have less time to react. You could also reduce the delay or `sleep()`
    time between each block dropping.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想测试你的反应能力，尝试改变方块的高度，使游戏更加具有挑战性。如果方块在开始掉落时距离玩家较近，你将有更少的时间来反应。你也可以减少每次方块掉落之间的延迟或`sleep()`时间。
- en: 'Different blocks in Minecraft have different physics. Test the world by changing
    the block from sand to another type. This will alter how the block falls: it might
    be slower, it might be faster, or it might land in a different location, affecting
    how you play the game. Try the blocks in the following table for starters.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Minecraft 中不同的方块有不同的物理特性。通过将方块从沙子换成其他类型的方块来测试这个世界。这会改变方块掉落的方式：它可能掉得更慢，也可能更快，或者可能落在不同的位置，影响你的游戏方式。可以尝试下表中的方块作为开始。
- en: '| **BLOCK TYPE** | **BLOCK ID** |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **方块类型** | **方块 ID** |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Water | 9 |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 水 | 9 |'
- en: '| Lava | 10 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 熔岩 | 10 |'
- en: '| Gravel | 13 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 沙砾 | 13 |'
- en: A list of all the block IDs is at *[https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/](https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/)*.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有方块 ID 的列表可以在 *[https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/](https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/)*
    上找到。
- en: MINECRAFT-CONTROLLED LED
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MINECRAFT 控制的 LED
- en: In this project, you’ll write a program that lets you use Minecraft to control
    the glue gun LED light that you made in [Chapter 3](ch03.xhtml#ch03). Whenever
    you touch water in the Minecraft world, the light in the real world will turn
    on. When you leave the water, the light will turn off.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将编写一个程序，让你使用 Minecraft 控制你在[第3章](ch03.xhtml#ch03)中制作的热熔胶枪 LED 灯。每当你在
    Minecraft 世界中触碰到水时，现实世界中的灯就会亮起。当你离开水域时，灯会熄灭。
- en: Wiring the Minecraft LED
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接 Minecraft LED
- en: 'Using either your custom glue gun light from [Chapter 3](ch03.xhtml#ch03) or
    a new LED, attach one male-to-female jumper wire to each of the LED legs. Attach
    the *longer* positive leg to GPIO pin 18: this is physical pin 12 on the Pi. Connect
    the other jumper wire to any one of the ground pins: choose from physical number
    9, 14, 20, 30, 34, or 39\. [Figure 6-6](ch06.xhtml#ch06fig06) shows the wiring
    diagram.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你在[第3章](ch03.xhtml#ch03)中制作的定制热熔胶枪灯，或者使用新的 LED，将一根公对母的跳线连接到 LED 的每根引脚。将*较长*的正极引脚连接到
    GPIO 引脚 18：这是 Pi 上的物理引脚 12。将另一根跳线连接到任意一个地线引脚：可选的物理引脚有 9、14、20、30、34 或 39。[图 6-6](ch06.xhtml#ch06fig06)
    显示了接线图。
- en: '![Image](../images/06fig06.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig06.jpg)'
- en: '**FIGURE 6-6** Wiring up the LED'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**FIGURE 6-6** 连接 LED'
- en: Coding the Minecraft LED
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写 Minecraft LED 控制程序
- en: Open a new Python file and enter the code in [Listing 6-4](ch06.xhtml#ch06ex04).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的 Python 文件并输入[Listing 6-4](ch06.xhtml#ch06ex04)中的代码。
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**LISTING 6-4** The Minecraft LED program'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**LISTING 6-4** Minecraft LED 程序'
- en: Begin by importing the `LED` class from the `gpiozero` library ❶, as you did
    in [Chapter 3](ch03.xhtml#ch03). Also import the `time` module, so you can add
    a delay if required, and the `minecraft` library. Again, set the variable `mc`
    to hold the `minecraft` library code ❷.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从`gpiozero`库导入`LED`类 ❶，正如在[第3章](ch03.xhtml#ch03)中所做的那样。同时导入`time`模块，以便在需要时添加延迟，并导入`minecraft`库。再次设置变量`mc`来存储`minecraft`库的代码
    ❷。
- en: Tell the Pi that the LED is attached to pin 18 ❸ and create a `while` loop ❹
    so the program keeps running the next few indented lines. Then get the player’s
    x, y, and z position data. Use the `getBlock()` function to find out the ID of
    the block you’re standing on and store this ID in a variable called `block_id`
    ❺. Recall that you can check the IDs online at *[https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/](https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/)*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉 Pi LED 连接在 18 号引脚上 ❸，并创建一个`while`循环 ❹，使程序持续运行接下来的几行缩进的代码。然后获取玩家的 x、y 和 z
    坐标数据。使用`getBlock()`函数来找出你所站立的方块的 ID，并将这个 ID 存储在名为`block_id`的变量中 ❺。回想一下，你可以在 *[https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/](https://www.raspberrypi-spy.co.uk/2014/09/raspberry-pi-minecraft-block-id-number-reference/)*
    上查看方块 ID。
- en: Check whether the block ID is equal to 9, the ID for water ❻. If it is, the
    LED will turn on. If you aren’t standing on water, the LED will be off.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 检查方块的 ID 是否等于 9，这是水的 ID ❻。如果是，LED 灯将点亮。如果你不站在水上，LED 灯将熄灭。
- en: Running Your Program
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: Save your program, open Minecraft, and press TAB to release the mouse. Select
    your program and execute it by pressing **F5**. Return to your Minecraft game
    and find some water! When the character stands in water, the LED should light
    up, as shown in [Figure 6-7](ch06.xhtml#ch06fig07).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的程序，打开 Minecraft，按 TAB 键释放鼠标。选择你的程序并通过按 **F5** 执行它。返回 Minecraft 游戏并找到一些水！当角色站在水中时，LED
    应该亮起，如 [图 6-7](ch06.xhtml#ch06fig07) 所示。
- en: '![Image](../images/06fig07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig07.jpg)'
- en: '**FIGURE 6-7** The LED turns on when the character touches water.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-7** 当角色接触到水时，LED 点亮。'
- en: CAMERA SURVEILLANCE MINECRAFT TOWERS
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摄像头监控 Minecraft 塔楼
- en: In this hack, you’ll set up a surveillance camera that you’ll control from Minecraft.
    To anyone else around, it will appear that you’re simply playing Minecraft. But,
    really, you’ll be using three towers in the game to control the camera. Tower
    1 is made from gold and triggers the camera to take a picture. Tower 2 is made
    from brick and starts capturing video. Tower 3 is made from melons—yes, melons—and
    ends the video recording. To trigger each tower, you’ll hit it with a sword. You
    can then view your photos and watch the video or take another video or photo.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个破解中，你将设置一个监控摄像头，并通过 Minecraft 控制它。对于周围的其他人来说，看起来你只是简单地在玩 Minecraft。但实际上，你将使用游戏中的三个塔楼来控制摄像头。塔楼
    1 由金块构成，触发摄像头拍照。塔楼 2 由砖块构成，开始录制视频。塔楼 3 由西瓜构成—没错，是西瓜—结束视频录制。要触发每个塔楼，你将用剑击打它。然后你可以查看照片并观看视频，或者拍摄另一个视频或照片。
- en: Before you start, set up your Pi Camera as you did in [Chapter 4](ch04.xhtml#ch04).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，按照 [第 4 章](ch04.xhtml#ch04) 的方法设置你的 Pi 摄像头。
- en: Building the Three Trigger Towers
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 建造三个触发塔楼
- en: Let’s make the secret trigger towers. Load a new Minecraft world, and find a
    suitable flat space to build your three towers. Select the gold block from the
    inventory, and build a small tower of three or four blocks.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来制作秘密触发塔楼。加载一个新的 Minecraft 世界，找到一个合适的平坦空间来建造三个塔楼。选择背包中的金块，建造一个由三到四个方块组成的小塔楼。
- en: Repeat the same process for the two other towers, except use the brick and melon
    blocks. Build the brick and melon towers close together, because when you hit
    the brick tower, the video won’t stop recording until you hit the melon tower!
    [Figure 6-8](ch06.xhtml#ch06fig08) shows the tower placement.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 对其他两个塔楼重复相同的过程，只不过使用砖块和西瓜块。把砖块塔楼和西瓜塔楼建得很靠近，因为当你击打砖块塔楼时，视频不会停止录制，直到你击打西瓜塔楼！[图
    6-8](ch06.xhtml#ch06fig08) 显示了塔楼的放置位置。
- en: '![Image](../images/06fig08.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig08.jpg)'
- en: '**FIGURE 6-8** The camera control towers'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6-8** 摄像头控制塔楼'
- en: You can actually use any block you want, as long as you amend the program code
    to include the relevant block name. But make sure each tower is made of only one
    block type.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以使用任何你想要的方块，只要你修改程序代码，包含相关的方块名称。但确保每个塔楼只能由一种方块类型构成。
- en: You’ll need a way to set off the towers, so equip your player with the sword
    from the inventory by pressing **E** and selecting the sword. When you click the
    left mouse button, you remove blocks, and clicking the right mouse button hits
    blocks. Hitting a block doesn’t destroy it; instead, it returns block data, which
    you’ll use in this hack to control the Pi Camera functions. You can try out hitting
    the towers first before you start your program code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一种方法来触发塔楼，因此通过按 **E** 并选择剑，给玩家装备背包中的剑。当你点击左键时，你会移除方块，点击右键则会击打方块。击打方块并不会摧毁它，而是返回方块数据，你将在这个破解中使用这些数据来控制
    Pi 摄像头的功能。在你开始编写程序代码之前，可以先尝试击打这些塔楼。
- en: Coding the Camera Towers
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编写摄像头塔楼的代码
- en: Open a new Python file and enter the code in [Listing 6-5](ch06.xhtml#ch06ex05).
    This code sets up the camera and instruction messages for the player. You’ll add
    the rest of the code shortly.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的 Python 文件，并输入 [清单 6-5](ch06.xhtml#ch06ex05) 中的代码。这段代码设置了摄像头和玩家的指令消息。稍后你将添加其余的代码。
- en: '[PRE4]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**LISTING 6-5** Setting up the camera and player instructions'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 6-5** 设置摄像头和玩家指令'
- en: Begin by importing the `PiCamera` ❶ class to control the camera. Then create
    a variable called `camera` to store the `PiCamera()` command so you don’t have
    to type it each time.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 首先导入 `PiCamera` ❶ 类来控制摄像头。然后创建一个名为 `camera` 的变量来存储 `PiCamera()` 命令，这样你每次就不用重复输入它了。
- en: 'Set the resolution of the camera image to 100 ❷. This is the *frame rate*:
    a high `framerate` value produces a smooth video, and a lower `framerate` value
    makes the video appear jerkier—but it’s a bit of a trade-off. A frame rate of
    100 is good, because if you make it too high, the Raspberry Pi will quickly run
    out of memory and struggle to take the image. You can change the `framerate` value
    later if you want to alter the video quality.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 将相机图像的分辨率设置为 100 ❷。这是 *帧率*：较高的 `framerate` 值会产生流畅的视频，较低的 `framerate` 值则使视频显得更加生硬——但这是一种权衡。帧率设为
    100 是合适的，因为如果设置得太高，树莓派会很快耗尽内存，导致无法顺利拍照。如果你想改变视频质量，可以稍后调整 `framerate` 值。
- en: Then import the usual Minecraft libraries, as well as the `block` library ❸,
    which lets you identify and refer to blocks by their name instead of their ID
    number. For example, you can specify gold, grass, sand, and brick by name. Finally,
    import the `time` module and the `datetime` library that will add a timestamp
    to the filename.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，导入常见的 Minecraft 库，以及 `block` 库 ❸，它允许你通过块的名称而不是 ID 号码来识别和引用块。例如，你可以通过名称指定金块、草块、沙块和砖块。最后，导入
    `time` 模块和 `datetime` 库，以便为文件名添加时间戳。
- en: Add a line to make a message appear in Minecraft that shows the title of your
    program ❹. Add a short delay to give the player time to read the message. Then
    post another message to inform the player of what action each block triggers;
    for example, gold takes a picture. Now let’s add the triggers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一行代码，在 Minecraft 中显示程序的标题 ❹。添加一个短暂的延迟，给玩家足够的时间读取信息。然后，再发送一条消息，告知玩家每个块触发的动作；例如，金块会拍照。现在，让我们添加触发器。
- en: Hitting the Gold Tower
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 击中金塔
- en: Now you’ll add the main section of the program, as shown in [Listing 6-6](ch06.xhtml#ch06ex06).
    This code checks which tower block has been hit and responds with the appropriate
    camera command. You’ll start with the gold tower and add the others in a moment.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将添加程序的主部分，如 [列表 6-6](ch06.xhtml#ch06ex06) 所示。该代码检查击中的塔块，并根据适当的相机命令做出响应。你将从金塔开始，稍后再添加其他塔。
- en: 'Make sure you indent the lines of code exactly as shown: lines inside the `while`
    loop need to be indented four spaces. Then the lines inside the `for` loop that
    follows need to be indented another four spaces, and finally the lines inside
    the `if` statement need to be indented four more spaces.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你按照示例缩进代码行：`while` 循环内的代码需要缩进四个空格。接下来，紧随其后的 `for` 循环内的代码需要再缩进四个空格，最后，`if`
    语句内的代码需要再缩进四个空格。
- en: '[PRE5]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**LISTING 6-6** Programming the gold tower'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表 6-6** 编写金塔程序'
- en: First create a `while True` loop, which means the program is constantly checking
    whether you’ve hit one of the towers. If a tower has been hit, take a reading
    of the current time and store it in a variable called `current_time`. Then print
    a line to the screen showing the details of the block you hit. This includes the
    player’s x-, y-, and z- coordinates as well as the tower’s ID and block name.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个 `while True` 循环，这意味着程序会不断检查你是否击中了某个塔。如果某个塔被击中，记录当前时间并将其存储在名为 `current_time`
    的变量中。然后，在屏幕上打印一行，显示你击中的块的详细信息。这包括玩家的 x、y 和 z 坐标，以及塔的 ID 和块的名称。
- en: Next, you need to determine which type of tower was hit and which camera action
    to take. You do this with an `if` statement that checks whether the block that
    you just hit is a gold block. If it is, the word *PICTURE* prints to the screen.
    At the same time, the word *Smile!* prints in the Minecraft chat messages to remind
    the character to smile. Wait a second for the character to pose, and then trigger
    the camera to take a picture.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要确定击中了哪种类型的塔，并采取相应的相机动作。你可以通过 `if` 语句检查你刚刚击中的块是否为金块。如果是，屏幕上会打印出 *PICTURE*
    字样。同时，Minecraft 聊天信息中会显示 *Smile!* 提醒角色微笑。等待一秒钟让角色摆好姿势，然后触发相机拍照。
- en: Store the picture that was taken on the desktop and assign it a filename of
    the current time, which you took earlier and stored in the `current_time` variable.
    Now the action for the gold tower is taken care of. Save your program as *camera_tower.py*,
    but keep it open to add more code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将拍摄的图片存储在桌面上，并赋予它当前时间作为文件名，这个时间是你之前记录并存储在 `current_time` 变量中的。现在，金塔的操作已经完成。将你的程序保存为
    *camera_tower.py*，但保持程序打开，以便添加更多代码。
- en: Hitting the Brick Tower
  id: totrans-140
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 击中砖塔
- en: Add the code in [Listing 6-7](ch06.xhtml#ch06ex07) to your *camera_tower.py*
    program. This code checks whether the player has hit the brick block. If so, the
    camera starts a video recording.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 将[示例 6-7](ch06.xhtml#ch06ex07)中的代码添加到你的 *camera_tower.py* 程序中。这段代码检查玩家是否击中了砖块。如果是，摄像头将开始录制视频。
- en: '[PRE6]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**LISTING 6-7** Programming the brick tower'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 6-7** 编程砖块塔'
- en: Add an `elif` statement to check whether the brick block has been hit ❶. This
    is like the `if` statement you added to check whether a gold tower had been hit.
    But the `elif` statement means *else if* and runs only if the tower hit wasn’t
    made of gold blocks.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个 `elif` 语句来检查砖块是否被击中 ❶。这就像你添加的 `if` 语句，用来检查金塔是否被击中。但 `elif` 语句表示 *else if*，只有在塔没有由金块构成时才会执行。
- en: Post a message to the Minecraft screen to inform the player that the video is
    about to start recording ❷. Start a preview on the screen so you can see what’s
    being filmed, wait a second, and then trigger the camera to start filming.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 向Minecraft屏幕发布一条消息，告知玩家视频即将开始录制 ❷。在屏幕上启动预览，以便你可以看到正在拍摄的内容，等待一秒钟，然后触发摄像头开始拍摄。
- en: Finally, save the file to your */home/pi* folder and name it *my_video.h264*
    ❸. The video will continue to record until the melon tower is hit or you stop
    the program by clicking the close button at the top-right corner of the IDLE window.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将文件保存到你的 */home/pi* 文件夹，并命名为 *my_video.h264* ❸。视频将继续录制，直到西瓜塔被击中，或者你通过点击IDLE窗口右上角的关闭按钮停止程序。
- en: Hitting the Melon Tower or Hitting Nothing
  id: totrans-147
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 击中西瓜塔或什么都没击中
- en: The last part of the program responds to the player hitting the melon tower,
    hitting any other block, or doing nothing. Add the code in [Listing 6-8](ch06.xhtml#ch06ex08)
    to the end of your *camera_tower.py* file.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后一部分响应玩家击中西瓜塔、击中其他任何方块或什么都不做的情况。将[示例 6-8](ch06.xhtml#ch06ex08)中的代码添加到你的
    *camera_tower.py* 文件的末尾。
- en: '[PRE7]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**LISTING 6-8** Programming the melon tower'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 6-8** 编程西瓜塔'
- en: Add another `elif` statement to check whether the block that was hit is a melon
    block. If it is, post a chat message to Minecraft informing the player that the
    video recording is about to stop, and stop the preview. Wait for 1 second and
    stop the recording.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 添加另一个 `elif` 语句来检查被击中的方块是否为西瓜块。如果是，向Minecraft发布一条聊天消息，告知玩家视频录制即将停止，并停止预览。等待1秒钟，然后停止录制。
- en: Then add a last `else` statement to respond to the player doing something else
    other than hitting one of the three towers. If the player doesn’t hit one of the
    three trigger towers, use a `pass` statement. A `pass` statement tells the program
    to take no action except to return to the start of the `while` loop in [Listing
    6-6](ch06.xhtml#ch06ex06). The program then checks for the next block interaction.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加最后一个 `else` 语句，以响应玩家做的其他事情，比如没有击中三座塔中的任何一座。如果玩家没有击中三座触发塔中的任何一座，使用 `pass`
    语句。`pass` 语句告诉程序不执行任何操作，除了返回到[示例 6-6](ch06.xhtml#ch06ex06)中的 `while` 循环开始部分。然后程序会检查下一个方块的交互。
- en: Running Your Program
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: Save your program and run it. If you encounter any errors, be sure to double-check
    that the indentation levels are correct. You can load the *camera_tower.py* file
    from the downloads section at *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*
    and compare your program against it (or just use mine!) if you can’t get yours
    to work. Also, make sure you’ve used uppercase and lowercase letters in the same
    places that they’re used in the program code. Remember to ensure that Minecraft
    is open and running too.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的程序并运行。如果遇到任何错误，请务必仔细检查缩进级别是否正确。如果你无法让程序运行，可以从下载部分加载 *camera_tower.py* 文件，地址是
    *[https://www.nostarch.com/raspiforkids/](https://www.nostarch.com/raspiforkids/)*，并与程序进行比较（或者直接使用我的！）。同时，确保你在代码中使用了正确的大小写字母。还要记得确保Minecraft已打开并运行。
- en: After you have taken some photos and videos, minimize the Minecraft windows
    by clicking the middle icon at the top right of the window. You should see the
    photo files on the Pi desktop. Simply click and open to view each one. To view
    your video, you need to execute it from the terminal. Click the terminal icon.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 拍完一些照片和视频后，点击窗口右上角的中间图标最小化Minecraft窗口。你应该能在Pi的桌面上看到照片文件。只需点击并打开即可查看每张照片。要查看视频，你需要从终端执行它。点击终端图标。
- en: 'In the terminal, enter this line, but replace my_video with the name of your
    file if you gave it a different name:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中输入这一行，但如果你给文件起了不同的名字，请将 `my_video` 替换为你的文件名：
- en: '[PRE8]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This line runs OMXPlayer, a video player specifically made for the Raspberry
    Pi. Press ENTER, and the video should play. To play it again, press the up arrow
    key. Don’t forget to share your photos and videos with your friends.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行运行的是OMXPlayer，一个专为树莓派制作的视频播放器。按下ENTER键，视频应该开始播放。要重新播放，按上箭头键。别忘了与朋友分享你的照片和视频。
- en: WRAPPING UP
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: As an extra challenge, try changing the towers to other blocks, like wool, sand,
    or even obsidian. You could also build additional towers to add further functionality
    to your program. Perhaps have a block that adds a filter to your photo.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的挑战，试着将塔楼改为其他方块，比如羊毛、沙子，甚至黑曜石。你还可以建造更多的塔楼，为你的程序增加更多功能。也许可以加入一个方块，用来为你的照片添加滤镜。
- en: If you’ve enjoyed these Minecraft hacks and want more, be sure to check out
    *Learn to Program with Minecraft* by Craig Richardson (No Starch Press, 2015)
    and *Coding with Minecraft* by Al Sweigart (No Starch Press, 2018).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这些Minecraft的技巧并想要更多，务必查看Craig Richardson的《*Learn to Program with Minecraft*》（No
    Starch Press，2015）和Al Sweigart的《*Coding with Minecraft*》（No Starch Press，2018）。
