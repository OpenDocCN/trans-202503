- en: '**7**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**7**'
- en: '**CROSS-SITE SCRIPTING ATTACKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: In the previous chapter, you saw how attackers can inject code into web servers
    to compromise websites. If your web server is secure, a hacker’s next best injection
    target is the web browser. Browsers obediently execute any JavaScript code that
    appears in a web page, so if an attacker can find a way to inject malicious JavaScript
    into a user’s browser while the user views your website, that user is in for a
    bad time. We call this type of code injection a *cross-site scripting (XSS) attack*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你了解了攻击者如何将代码注入到 web 服务器中以危害网站。如果你的 web 服务器是安全的，黑客的下一个注入目标通常是 web 浏览器。浏览器会顺从地执行网页中出现的任何
    JavaScript 代码，因此，如果攻击者能找到一种方法将恶意 JavaScript 注入到用户浏览器中，而该用户正在访问你的网站，那么这个用户将会面临麻烦。我们称这种代码注入为*跨站脚本（XSS）攻击*。
- en: JavaScript can read or modify any part of a web page, so there’s a lot an attacker
    can do with cross-site scripting vulnerabilities. They can steal login credentials
    or other sensitive information like credit card numbers as the user types them
    in. If JavaScript can read the HTTP session information, they can hijack a user’s
    session entirely, allowing them to log in as that user remotely. (You’ll learn
    more about session hijacking in [Chapter 10](ch10.xhtml#ch10)).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 可以读取或修改网页的任何部分，因此攻击者可以利用跨站脚本漏洞做很多事情。他们可以窃取登录凭据或用户输入的其他敏感信息，如信用卡号。如果
    JavaScript 能读取 HTTP 会话信息，他们可以完全劫持用户的会话，从而远程以该用户身份登录。（你将在[第10章](ch10.xhtml#ch10)中了解更多关于会话劫持的内容。）
- en: Cross-site scripting is a remarkably common type of attack, and the dangers
    it poses are clear. This chapter presents the three most common types of cross-site
    scripting attacks and explains how to protect against them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站脚本攻击是一种非常常见的攻击类型，其带来的危害显而易见。本章介绍了三种最常见的跨站脚本攻击类型，并解释了如何防范这些攻击。
- en: '**Stored Cross-Site Scripting Attacks**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**存储型跨站脚本攻击**'
- en: Websites routinely generate and render HTML using information stored in a database.
    Retail websites will store product information in a database, and social media
    sites will store user conversations. Websites will take content from the database
    according to the URL the user has navigated to, and interpolate it into the page
    to produce the finished HTML.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 网站通常会使用存储在数据库中的信息生成和渲染 HTML。零售网站会将产品信息存储在数据库中，社交媒体网站会存储用户对话。网站会根据用户访问的 URL 从数据库中提取内容，并将其插入页面中生成最终的
    HTML。
- en: 'Any page content coming from the database is a potential attack vector for
    hackers. Attackers will attempt to inject JavaScript code into the database so
    that the web server will write out the JavaScript when it renders HTML. We call
    this type of attack a *stored cross-site scripting* attack: the JavaScript is
    written to the database, but executed in the browser when an unsuspecting victim
    views a particular page on the site.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 来自数据库的任何页面内容都可能成为攻击者的攻击载体。攻击者会尝试将 JavaScript 代码注入到数据库中，以便 web 服务器在渲染 HTML 时将
    JavaScript 输出到页面。我们称这种攻击为*存储型跨站脚本*攻击：JavaScript 被写入数据库，但在无防备的受害者查看网站的特定页面时，在浏览器中执行。
- en: Malicious JavaScript can be planted in a database by using the SQL injection
    method described in [Chapter 6](ch06.xhtml#ch06), but attackers will more commonly
    insert malicious code through legitimate avenues. For instance, if a website allows
    users to post comments, the site will store the comment text in a database and
    display it back to other users who view the same comment thread. In this scenario,
    an easy way for a hacker to perform a cross-site scripting attack is to write
    a comment containing a `<script>` tag to the database. If the website fails to
    construct HTML securely, the `<script>` tag will get written out whenever the
    page is rendered to other users, and the JavaScript will be executed in the victim’s
    browser.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意 JavaScript 可以通过使用[第6章](ch06.xhtml#ch06)中描述的 SQL 注入方法植入数据库，但攻击者更常见的做法是通过合法途径插入恶意代码。例如，如果一个网站允许用户发布评论，网站会将评论文本存储在数据库中，并将其显示给查看相同评论线程的其他用户。在这种情况下，黑客执行跨站脚本攻击的一个简单方法是将包含
    `<script>` 标签的评论写入数据库。如果该网站未能安全构造 HTML，那么每当页面渲染给其他用户时，`<script>` 标签就会被输出，恶意 JavaScript
    就会在受害者的浏览器中执行。
- en: Let’s look at a concrete example. Imagine you run a popular website for people
    who like to bake, *https://breddit.com*. Your site encourages users to participate
    in discussion threads about bread-related topics. While using the online forum
    for discussion, the users themselves contribute most of the site’s content. When
    a user adds a post, your website records it to the database and shows it to other
    users participating in the same thread. This is a perfect opportunity for an attacker
    to inject some JavaScript through a comment, as shown in [Figure 7-1](ch07.xhtml#ch7fig1).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/07fig01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-1: An attacker injects JavaScript through a comment.*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: If your website doesn’t escape the injected script when it renders the HTML
    (as we’ll discuss in the following section), the next user to view the thread
    will have the attacker’s `<script>` tag written out to their browser and executed,
    as shown in [Figure 7-2](ch07.xhtml#ch7fig2).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/07fig02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7-2: An attacker’s <script> tag is written out to the victim’s browser
    and executed.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: A rogue `alert()` dialog is more of an annoyance than a genuine threat, but
    attackers typically start with this approach to check whether cross-site scripting
    attacks are possible. If an attacker can call the `alert()` function, they can
    escalate to more dangerous attacks, like stealing other users’ sessions, or redirecting
    victims to harmful sites. The baking community would never feel safe online again!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Comment threads aren’t the only place that can exhibit this type of vulnerability.
    *Any* user-controlled content is a potential avenue of attack that you need to
    secure. Attackers have performed cross-site scripting attacks by injecting malicious
    script tags into usernames, profile pages, and online reviews, for example. Let’s
    look at a couple of straightforward protections you should implement.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '***Mitigation 1: Escape HTML Characters***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To prevent stored cross-site scripting attacks, you need to escape all dynamic
    content coming from a datastore so that the browser knows to treat it as the *content*
    of HTML tags, as opposed to raw HTML. *Escaping* content in the browser means
    replacing control characters in the HTML with their corresponding *entity encoding*,
    as illustrated in [Table 7-1](ch07.xhtml#ch7tab01).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 7-1:** Entity Encodings of HTML Control Characters'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '| **Character** | **Entity encoding** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: '| `"` | `&quot;` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| `&` | `&amp;` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| `''` | `&apos;` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| `<` | `&lt;` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| `>` | `&gt;` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: Any character that has special meaning in HTML, like the `<` and `>` characters
    that denote the start and end of tags, has a corresponding safe entity encoding.
    Browsers that encounter *entity encodings* recognize them as escaped characters,
    and render them visually as the appropriate character, but, crucially, won’t treat
    them as HTML tags. [Listing 7-1](ch07.xhtml#ch7list1) shows how a secure website
    will write out the comment entered by the attack in [Figure 7-1](ch07.xhtml#ch7fig1).
    The bolded text represents characters that could be used to construct HTML tags.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Listing 7-1: This attempted XSS attack has been defused.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: The conversion of escaped characters to unescaped characters happens *after*
    the browser has constructed the DOM for the page, so the browser will *not* execute
    the `<script>` tag. Escaping HTML control characters in this fashion closes the
    door on most cross-site scripting attacks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Since cross-site scripting is such a common vulnerability, modern web frameworks
    tend to escape dynamic content by default. Templates, in particular, typically
    escape interpolated values without being asked. The syntax for interpolating a
    variable in an *Embedded Ruby (ERB)* template looks like [Listing 7-2](ch07.xhtml#ch7list2).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Listing 7-2: Implicit escaping of dynamic content in an Embedded Ruby template*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The ERB templating engine will automatically escape sensitive characters via
    the `<%= comment %>` syntax when dynamic content is evaluated.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: In order to write raw, unescaped HTML (and hence be vulnerable to XSS attacks),
    ERB templates require an explicit call to the `raw` function, as shown in [Listing
    7-3](ch07.xhtml#ch7list3).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Listing 7-3: The syntax to allow raw injection of HTML in Embedded Ruby templates*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'All secure templating languages follow the same design principle: the templating
    engine implicitly escapes dynamic content unless the developer explicitly chooses
    to construct raw HTML. Make sure you understand how escaping works in your templates,
    and check that dynamic content is securely escaped during code reviews! In particular,
    if you have helper functions or methods that construct raw HTML for injection
    into templates, check to see that an attacker can’t abuse their inputs to commit
    cross-site scripting attacks.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '***Mitigation 2: Implement a Content Security Policy***'
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Modern browsers allow websites to set a *content security policy*, which you
    can use to lock down JavaScript execution on your site. Cross-site scripting attacks
    rely on an attacker being able to run malicious scripts on a victim’s web page,
    usually by injecting `<script>` tags somewhere within the `<html>` tag of a page,
    also known as *inline* JavaScript. The example hack illustrated in [Figure 7-2](ch07.xhtml#ch7fig2)
    uses inline JavaScript, written out as the text of a comment.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: By setting a content security policy in your HTTP response headers, you can
    tell the browser to *never* execute inline JavaScript. The browser will execute
    JavaScript on your page only if it is imported via a `src` attribute in the `<script>`
    tag. A typical content security policy header will look like [Listing 7-4](ch07.xhtml#ch7list4).
    This policy specifies that scripts can be imported from the same domain (`'self'`),
    or the *apis.google.com* domain, but inline JavaScript should not be executed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在你的 HTTP 响应头中设置内容安全策略，你可以告诉浏览器*永远*不执行内联 JavaScript。浏览器只有在 JavaScript 通过 `<script>`
    标签的 `src` 属性导入时才会执行页面上的 JavaScript。一个典型的内容安全策略头部如下所示：[Listing 7-4](ch07.xhtml#ch7list4)。该策略指定脚本可以从同一域（`'self'`）或*apis.google.com*域导入，但不应执行内联
    JavaScript。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Listing 7-4: A content security policy set in an HTTP response header*'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-4: 在 HTTP 响应头中设置的内容安全策略*'
- en: You can also set your site’s content security policy in a `<meta>` tag in the
    `<head>` element of the HTML of your web pages, as shown in [Listing 7-5](ch07.xhtml#ch7list5).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在 HTML 页面的 `<head>` 元素中的 `<meta>` 标签里设置你网站的内容安全策略，如[Listing 7-5](ch07.xhtml#ch7list5)所示。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Listing 7-5: The equivalent content security policy set in a <head> element
    of the HTML document*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-5: 在 HTML 文档的 <head> 元素中设置的等效内容安全策略*'
- en: By whitelisting the domains from which your browser loads scripts, you implicitly
    state that inline JavaScript isn’t allowed. In this example content security policy,
    the browser will load JavaScript only from the domains *apis.google.com* and whatever
    the domain of the site is—for example, *[breddit.com](http://breddit.com)*. To
    permit inline JavaScript, the policy would have to include the keyword `unsafe-inline`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将浏览器加载脚本的域名列入白名单，你隐含地声明不允许使用内联 JavaScript。在这个示例的内容安全策略中，浏览器将仅从*apis.google.com*和网站的域名加载
    JavaScript——例如，* [breddit.com](http://breddit.com)*。要允许内联 JavaScript，策略中必须包含`unsafe-inline`关键词。
- en: Preventing the execution of inline JavaScript is a great security measure, but
    it means you’ll have to move any inline JavaScript your site currently implements
    into separate imports. In other words, `<script>` tags on a page have to reference
    JavaScript in a separate file via a `src` attribute, rather than writing the JavaScript
    between the start and end tags.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 阻止内联 JavaScript 执行是一个很好的安全措施，但这意味着你需要将你网站当前实现的任何内联 JavaScript 移动到单独的导入文件中。换句话说，页面上的
    `<script>` 标签必须通过 `src` 属性引用一个单独的 JavaScript 文件，而不是将 JavaScript 直接写在开始和结束标签之间。
- en: This separation of JavaScript into external files is the preferred approach
    in web development, since it makes for a more organized codebase. Inline script
    tags are considered bad practice in modern web development, so banning inline
    JavaScript actually forces your development team into good habits. Nevertheless,
    inline script tags are common in older, legacy sites. Indeed, it may take some
    time to refactor your templates to remove all inline JavaScript tags.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 将 JavaScript 分离到外部文件中是 Web 开发中推荐的方法，因为这样可以使代码库更加有序。内联脚本标签在现代 Web 开发中被认为是不好的实践，因此禁止内联
    JavaScript 实际上迫使你的开发团队养成良好的习惯。然而，内联脚本标签在旧的遗留网站中仍然很常见。事实上，可能需要一些时间来重构你的模板，以移除所有内联
    JavaScript 标签。
- en: To help with this refactoring, consider using content security policy *violation
    reports*. If you add a `report-uri` directive to your content security policy
    header, as shown in [Listing 7-6](ch07.xhtml#ch7list6), the browser will notify
    you of any policy violations, rather than preventing JavaScript from executing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助重构，考虑使用内容安全策略*违规报告*。如果你在内容安全策略头中添加`report-uri`指令，如[Listing 7-6](ch07.xhtml#ch7list6)所示，浏览器会通知你任何策略违规，而不是阻止
    JavaScript 执行。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*Listing 7-6: A content security policy that instructs the browser to report
    any content security violations to* https://example.com/csr-reports'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 7-6: 一个内容安全策略，它指示浏览器将任何内容安全违规报告到* https://example.com/csr-reports'
- en: If you collect all these violation reports in a log file, your development team
    should be able to see all the pages they need to rewrite in order to meet the
    restrictions imposed by the proposed content security policy.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将所有这些违规报告收集到日志文件中，开发团队应该能够看到他们需要重写的所有页面，以符合提议的内容安全策略所施加的限制。
- en: You should set a content security policy in addition to escaping HTML, since
    it’ll protect your users effectively! It’s difficult for an attacker to find an
    instance of unescaped content *and* to smuggle a malicious script onto your whitelisted
    domains. We call using multiple layers of defense for the same vulnerability defense
    in depth, as you learned in [Chapter 6](ch06.xhtml#ch06); this will be a theme
    throughout this book.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '**Reflected Cross-Site Scripting Attacks**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rogue JavaScript in the database isn’t the only vector for cross-site scripting
    attacks. If your site takes part of an HTTP request and displays it back in a
    rendered web page, your rendering code needs to protect against attacks that inject
    malicious JavaScript via the HTTP request. We call this type of attack a *reflected
    cross-site scripting* attack.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Virtually all websites display some part of HTTP requests in rendered HTML.
    Consider the Google search page: if you perform a search for “cats,” Google passes
    the search term as part of the HTTP in the URL: *[https://www.google.com/search?q=cats](https://www.google.com/search?q=cats)*.
    The search term `cats` displays in the search box above the search results.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if Google were a less secure company, it’d be possible to replace the
    *cats* parameter in the URL with malicious JavaScript, and have that JavaScript
    code execute whenever anybody opens that URL in their browser. An attacker could
    email the URL as a link to a victim, or trick a user into visiting the URL by
    adding it to a comment. This is the essence of a *reflected* cross-site scripting
    attack: an attacker sends the malicious code in the HTML request, and then the
    server reflects it back.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, Google employs more than a few security experts, so if you attempt
    to insert `<script>` tags into its search results, the server won’t execute the
    JavaScript. In the past, hackers *have* discovered reflected cross-site scripting
    vulnerabilities in the Google Apps admin interface found at *[https://admin.google.com](https://admin.google.com)*,
    so it goes to show that even big companies get caught out. If you want any chance
    of keeping your users safe, you need to protect against this attack vector.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '***Mitigation: Escape Dynamic Content from HTTP Requests***'
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You mitigate reflected cross-site scripting vulnerabilities the same way you
    mitigate stored cross-site scripting vulnerabilities: by escaping control characters
    in dynamic content that the website interpolates into HTML pages. Whether dynamic
    content comes from the backend database or the HTTP request, you need to escape
    it in the same way.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, template languages typically apply escaping to *all* interpolated
    variables, whether the templates load them from the database or pull them from
    the HTTP request. However, your development team still needs to be aware of the
    risk of injection via HTTP requests when auditing code. Code reviews often overlook
    reflected cross-site scripting vulnerabilities because developers are too busy
    looking for stored cross-site scripting vulnerabilities.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，模板语言通常会对*所有*插值变量进行转义，无论模板是从数据库加载它们还是从HTTP请求中提取它们。然而，你的开发团队仍然需要在审查代码时意识到通过HTTP请求进行注入的风险。代码审查通常会忽略反射型跨站脚本漏洞，因为开发人员过于专注于寻找存储型跨站脚本漏洞。
- en: Common target areas for reflected cross-site scripting attacks are search pages
    and error pages, since they usually display parts of the query string back to
    the user. Make sure your team understands the risks and knows how to spot the
    vulnerability when reviewing code changes. Stored cross-site scripting attacks
    tend to be more harmful, because a single malicious piece of JavaScript injected
    into your database table can attack your users over and over again. But reflected
    attacks are more common, since they’re easier to implement.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 反射型跨站脚本攻击的常见目标是搜索页面和错误页面，因为它们通常会将查询字符串的部分内容显示回用户。确保你的团队理解这些风险，并知道如何在审查代码更改时识别漏洞。存储型跨站脚本攻击往往更具危害性，因为单个恶意JavaScript注入到数据库表中后可以一再攻击你的用户。但是反射型攻击更常见，因为它们更容易实现。
- en: Before we close this chapter, let’s look at one more type of cross-site scripting
    attack.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，让我们再看看一种跨站脚本攻击类型。
- en: '**DOM-Based Cross-Site Scripting Attacks**'
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**基于DOM的跨站脚本攻击**'
- en: Defusing most cross-site scripting attacks means inspecting and securing server-side
    code; however, the increasing popularity of rich frameworks for client-side code
    has led to the rise of *DOM-based cross-site scripting*, whereby attackers smuggle
    malicious JavaScript into a user’s web page via the URI fragment.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 防御大多数跨站脚本攻击意味着检查和保护服务器端代码；然而，客户端代码的丰富框架越来越流行，导致了*基于DOM的跨站脚本攻击*的兴起，在这种攻击中，攻击者通过URI片段将恶意JavaScript偷偷塞入用户的网页中。
- en: To understand these attacks, you first need to understand how URI fragments
    operate. Let’s start with a reminder of how *URLs (universal resource locators)*,
    the addresses shown in the browser bar, are structured. A typical URL looks like
    [Figure 7-3](ch07.xhtml#ch7fig3).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这些攻击，首先需要了解URI片段的工作原理。让我们从回顾一下*URL（统一资源定位符）*开始，浏览器地址栏中显示的地址是如何构成的。一个典型的URL如[图7-3](ch07.xhtml#ch7fig3)所示。
- en: '![image](Images/07fig03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/07fig03.jpg)'
- en: '*Figure 7-3: The sections of a typical URL*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7-3：典型URL的各个部分*'
- en: The URI fragment is the optional part of the URL after the *#* sign. Browsers
    use *URI fragments* for *intra-page* navigation—if an HTML tag on the page has
    an `id` attribute matching the URI fragment, the browser scrolls to that tag after
    opening the page. For instance, if you load the URL *[https://en.wikipedia.org/wiki/Cat#Grooming](https://en.wikipedia.org/wiki/Cat#Grooming)*
    in a browser, the browser opens the web page and then scrolls to the Grooming
    section of the Wikipedia page about cats. It behaves this way because the heading
    tag for that section looks something like [Listing 7-7](ch07.xhtml#ch7list7).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: URI片段是URL中*#*符号后的可选部分。浏览器使用*URI片段*进行*页面内*导航——如果页面上的HTML标签具有与URI片段匹配的`id`属性，浏览器在打开页面后会滚动到该标签。例如，如果你在浏览器中加载URL
    *[https://en.wikipedia.org/wiki/Cat#Grooming](https://en.wikipedia.org/wiki/Cat#Grooming)*，浏览器会打开网页并滚动到Wikipedia猫咪页面的美容部分。之所以这样，是因为该部分的标题标签看起来像[清单7-7](ch07.xhtml#ch7list7)。
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Listing 7-7: An HTML tag corresponding to the URI fragment* #Grooming'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单7-7：与URI片段#Grooming对应的HTML标签*'
- en: With this helpful built-in browser behavior, Wikipedia lets users link directly
    to sections within a page, so that you and your roommate can finally settle that
    contentious argument about cat grooming.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 利用这一有用的浏览器内建行为，Wikipedia允许用户直接链接到页面中的某个部分，这样你和你的室友终于可以解决那个关于猫咪美容的争论了。
- en: '*Single-page apps* also often use URI fragments to record and reload state
    in an intuitive fashion. These types of apps, written in JavaScript frameworks
    like Angular, Vue.js, and React, are actually JavaScript-heavy web pages that
    seek to avoid the rendering *blink* that occurs when the browser reloads a web
    page.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*单页面应用*通常也使用URI片段以直观的方式记录和重新加载状态。这些类型的应用程序通常使用像Angular、Vue.js和React这样的JavaScript框架编写，实际上是基于JavaScript的网页，旨在避免浏览器重新加载网页时出现的渲染*闪烁*。'
- en: One potential way to avoid this rendering blink is designing the whole app to
    load under a static URL that never changes, because changing the URL in the browser
    bar is typically what causes a web page to reload. However, if a user refreshes
    a browser for an unchanging URL, the browser resets the web page to its initial
    state, losing any information about what the user was doing previously.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这种渲染闪烁的一个潜在方法是将整个应用设计为在一个永远不变的静态 URL 下加载，因为浏览器地址栏中 URL 的变化通常会导致网页重新加载。然而，如果用户刷新一个不变的
    URL，浏览器会将网页重置为初始状态，丢失用户之前的操作信息。
- en: 'Many single-page apps overcome this by using the URI fragment to keep state
    over browser refreshes. You’ll commonly see web pages implement *infinite scrolling*:
    a list of images dynamically loads in as the user scrolls down the page. The URI
    fragment updates with an indication of how far the user has scrolled down. Then,
    even if the browser refreshes, the JavaScript code can interpret the content of
    the URI fragment, and load in the relevant number of images as the page refreshes.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 许多单页面应用通过使用 URI 片段在浏览器刷新时保持状态来克服这一问题。你通常会看到网页实现*无限滚动*：用户向下滚动页面时，图片列表会动态加载。URI
    片段会更新，指示用户滚动的进度。即便浏览器刷新，JavaScript 代码也可以解释 URI 片段的内容，并在页面刷新时加载相关数量的图片。
- en: By design, browsers don’t send URI fragments to the server when the browser
    renders the page. When a browser receives a URL with a URI fragment, it makes
    a note of the fragment, strips it from the URL, and sends the stripped URL to
    the web server. Any JavaScript executed on the page can read the URI fragment,
    and the browser will write the full URL to the browser history, or to a bookmark,
    if the user bookmarks the page.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 从设计上讲，浏览器在渲染页面时不会将 URI 片段发送到服务器。当浏览器接收到带有 URI 片段的 URL 时，它会记录下该片段，将其从 URL 中剥离，并将剥离后的
    URL 发送到 Web 服务器。页面上执行的任何 JavaScript 都可以读取 URI 片段，且浏览器会将完整的 URL 写入浏览器历史记录或书签中，如果用户将页面加入书签的话。
- en: Unfortunately, this means that URI fragments aren’t available to any server-side
    code—securing server-side code *can’t* mitigate DOM-based XSS attacks. Client-side
    JavaScript code that interprets and uses URI fragments needs to be careful about
    how it interprets the content of those fragments. If the content is unescaped
    and written directly into the DOM of the web page, an attacker can smuggle malicious
    JavaScript through this channel. An attacker can craft a URL with some malicious
    JavaScript in the URI fragment, and then trick a user into visiting that URL to
    launch the cross-site scripting attack.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这意味着 URI 片段无法被任何服务器端代码使用——因此保护服务器端代码*不能*缓解基于 DOM 的 XSS 攻击。客户端 JavaScript
    代码在解释和使用 URI 片段时，必须小心如何处理这些片段的内容。如果内容没有转义并直接写入网页的 DOM，攻击者可以通过这个渠道偷偷注入恶意 JavaScript。攻击者可以构造一个带有恶意
    JavaScript 的 URL，利用 URI 片段中的内容，然后欺骗用户访问该 URL 发起跨站脚本攻击。
- en: DOM-based cross-site scripting is a relatively new form of attack, but is particularly
    dangerous because the injection of code happens completely on the client side,
    and can’t be detected by examining web server logs! This means you need to be
    keenly aware of the vulnerability when doing code reviews, and know how to mitigate
    it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 DOM 的跨站脚本攻击是一种相对较新的攻击方式，但它特别危险，因为代码注入完全发生在客户端，且通过检查 Web 服务器日志无法检测到！这意味着在进行代码审查时，你需要特别警觉这种漏洞，并知道如何缓解它。
- en: '***Mitigation: Escaping Dynamic Content from URI Fragments***'
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***缓解措施：转义来自 URI 片段的动态内容***'
- en: Any JavaScript code executing in the browser that takes part of the URI fragment
    and constructs HTML is prone to DOM-based cross-site scripting attacks. This means
    you need to take care to *escape* anything taken from a URI fragment before interpolating
    that value in HTML with the client-side code, just as you would with server-side
    code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中执行的任何 JavaScript 代码，如果使用 URI 片段构造 HTML，容易受到基于 DOM 的跨站脚本攻击。这意味着，在用客户端代码将
    URI 片段中的内容插入 HTML 时，需要特别注意*转义*这些内容，就像你在服务器端代码中处理时一样。
- en: The authors of modern JavaScript templating frameworks are fully aware of the
    risks posed by URI fragments and discourage the construction of raw HTML in code.
    For instance, the syntax to write unescaped HTML in the React framework requires
    the developer to call the function `dangerouslySetInnerHTML`, as shown in [Listing
    7-8](ch07.xhtml#ch7list8).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 JavaScript 模板框架的作者充分意识到 URI 片段所带来的风险，并且不鼓励在代码中构造原始 HTML。例如，在 React 框架中，编写未经转义的
    HTML 语法需要开发者调用 `dangerouslySetInnerHTML` 函数，如在[第 7-8 列表](ch07.xhtml#ch7list8)中所示。
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Listing 7-8: Dangerously setting raw HTML from text in the React framework*'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*列出 7-8：在 React 框架中危险地设置来自文本的原始 HTML*'
- en: Consider switching to a modern JavaScript framework if your client-side JavaScript
    code is complex. It should make the codebase more manageable and security considerations
    much more apparent. And as always, be sure to set an appropriate content security
    policy.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的客户端 JavaScript 代码比较复杂，可以考虑切换到一个现代的 JavaScript 框架。这将使代码库更加易于管理，安全性问题也会更加明显。而且，一如既往，务必设置适当的内容安全策略。
- en: '**Summary**'
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you learned about cross-site scripting attacks, whereby an
    attacker injects JavaScript into the pages of your site when users view them.
    Attackers usually inject malicious JavaScript into dynamic content that comes
    from a database, from the HTTP request, or from the URI fragment. You can defeat
    cross-site scripting attacks by escaping any HTML control characters in dynamic
    content, and by setting a content security policy that prevents the execution
    of inline JavaScript.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了跨站脚本攻击（XSS），攻击者通过在用户浏览页面时将 JavaScript 注入到你站点的页面中来实施攻击。攻击者通常将恶意 JavaScript
    注入到来自数据库、HTTP 请求或 URI 片段的动态内容中。你可以通过转义动态内容中的 HTML 控制字符，并设置内容安全策略来防止执行内联 JavaScript，从而抵御跨站脚本攻击。
- en: 'In the next chapter, you’ll look at another method that attackers can use to
    prey on the users of your website: cross-site request forgery.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解攻击者如何利用跨站请求伪造（CSRF）攻击你的站点用户。
