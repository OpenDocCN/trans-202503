["```\ni = 0\nwhile i<10\n  puts i\n  i += 1\n  break\nend\n```", "```\n10.times do |n|\n  puts n\n  break\nend\nputs \"continue from here\"\n```", "```\nfor i in 0..5\n   puts i\nend\n```", "```\n(0..5).each do |i|\n  puts i\nend\n```", "```\ncode = <<END\nfor i in 0..5\n  puts i\nend\nEND\nputs RubyVM::InstructionSequence.compile(code).disasm\n```", "```\n== disasm: <RubyVM::InstructionSequence:<compiled>@<compiled>>==========\n== catch table\n| catch type: break  st: 0002 ed: 0006 sp: 0000 cont: 0006\n|------------------------------------------------------------------------\nlocal table (size: 2, argc: 0 [opts: 0, rest: -1, post: 0, block: -1] s1)\n[ 2] i\n0000 trace            1                                               (   1)\n0002 putobject        0..5\n0004 send             <callinfo!mid:each, argc:0, block:block in <compiled>>\n0006 leave\n== disasm: <RubyVM::InstructionSequence:block in <compiled>@<compiled>>=\n== catch table\n| catch type: redo   st: 0004 ed: 0015 sp: 0000 cont: 0004\n| catch type: next   st: 0004 ed: 0015 sp: 0000 cont: 0015\n|------------------------------------------------------------------------\nlocal table (size: 2, argc: 1 [opts: 0, rest: -1, post: 0, block: -1] s3)\n[ 2] ?<Arg>\n0000 getlocal_OP__WC__0 2                                             (   3)\n0002 setlocal_OP__WC__1 2                                             (   1)\n0004 trace            256\n0006 trace            1                                               (   2)\n0008 putself\n0009 getlocal_OP__WC__1 2\n0011 opt_send_simple  <callinfo!mid:puts, argc:1, FCALL|ARGS_SKIP>\n0013 trace            512                                             (   3)\n0015 leave\n```", "```\ndef display_message\n  puts \"The quick brown fox jumps over the lazy dog.\"\nend\ndisplay_message\n```", "```\ndef five_argument_types(a, b = 1, *args, c, &d)\n  puts \"Standard argument #{a.inspect}\"\n  puts \"Optional argument #{b.inspect}\"\n  puts \"Splat argument array #{args.inspect}\"\n  puts \"Post argument #{c.inspect}\"\n  puts \"Block argument #{d.inspect}\"\nend\n\nfive_argument_types(1, 2, 3, 4, 5, 6) do\n  puts \"block\"\nend\n```", "```\n$ **ruby argument_types.rb**\nStandard argument 1\nOptional argument 2\nSplat argument array [3, 4, 5]\nPost argument 6\nBlock argument #<Proc:0x007ff4b2045ac0@argument_types.rb:9>\n```", "```\n    class InstanceVariableTest\n   def var\n        @var\n      end\n   def var=(val)\n        @var = val\n      end\n    end\n```", "```\nclass InstanceVariableTest\n  attr_reader :var\n  attr_writer :var\nend\n```", "```\nclass InstanceVariableTest\n  attr_accessor :var\nend\n```", "```\n def add_two(a: 2, b: 3)\n      a+b\n    end\n\n puts add_two(a: 1, b: 1)\n     => 2\n```", "```\n    class Hash\n   def key?(val)\n     puts \"Looking for key #{val}\"\n        false\n      end\n    end\n\n    def add_two(a: 2, b: 3)\n      a+b\n    end\n\n    puts add_two (a: 1, b: 1)\n```", "```\nLooking for key a\nLooking for key b\n5\n```", "```\ncode = <<END\ndef add_two(a: 2, b: 3)\n  a+b\nend\n\nputs add_two(a: 1, b: 1)\nEND\n\nputs RubyVM::InstructionSequence.compile(code).disasm\n```", "```\nhidden_hash.key?(:a)\n```", "```\nif hidden_hash.key?(:a)\n  a = hidden_hash.delete(:a)\nelse\n  a = 2\nend\n```", "```\ndef add_two(a: 2, b: 3)\n  a+b\nend\n\nputs add_two(c: 9)\n => unknown keyword: c (ArgumentError)\n```"]