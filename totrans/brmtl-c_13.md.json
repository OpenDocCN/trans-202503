["```\n#define SIZE 20    // Size of the array\nint array[SIZE];   // The array\n`--snip--`\n    for (unsigned int i = 0; i < SIZE; ++i) {\n```", "```\n#define SIZE 20\nThe size is SIZE\n```", "```\n$ **gcc -E size.c**\n```", "```\n# 1 \"size.c\"\n# 1 \"<built-in>\"\n# 1 \"<command-line>\"\n# 31 \"<command-line>\"\n# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n# 32 \"<command-line>\" 2\n1 # 1 \"size.c\"\n\n2 The size is 20\n```", "```\n#include <stdio.h>\n\n1 #define SIDE 10 + 2   // Size + margin\n\nint main()\n{\n  2 printf(\"Area %d\\n\", SIDE * SIDE);\n    return (0);\n} \n```", "```\n# 5 \"square.c\"\nint main()\n{\n    printf(\"Area %d\\n\", 10 + 2 * 10 + 2);\n    return (0);\n}\n```", "```\n#define SIDE 10 + 2   // Size + margin\n```", "```\n#define SIDE (10 + 2)   // Size + margin\n```", "```\nconst unsigned int SIDE = 10 + 2;       // This works.\n```", "```\n#define DOUBLE(x) (2 * (x))\n`--snip--`\n    printf(\"Twice %d is %d\\n\", 32, DOUBLE(32);\n```", "```\n#define DOUBLE_BAD(x) (2 * x)\n```", "```\n value = DOUBLE_BAD(1 + 2)\n```", "```\nDOUBLE(1+2) = (2 * 1 + 2) = 4   // Wrong\n```", "```\nDOUBLE(1+2) = (2 * (1 + 2)) = 6\n```", "```\n#define CUBE(x) ((x) * (x) * (x))\n\n    int x = 5;\n\n    int y = CUBE(x++);\n```", "```\nstatic inline int CUBE_INLINE(const int x) {\n    return (x * x * x);\n}\n```", "```\ny = CUBE_INLINE(x++);\n```", "```\nx++;\ny = CUBE_INLINE(x);\n```", "```\n#define FOR_EACH_VALUE for (unsigned int i = 0; i < VALUE_SIZE; ++i)\n`--snip--`\n    int sum = 0;\n    FOR_EACH_VALUE\n        sum += value[i]\n```", "```\n// Defined badly\n#define DIE(why)              \\\n    printf(\"Die: %s\\n\", why); \\\n    exit(99);\n```", "```\nvoid functionYetToBeImplemented(void) {\n    DIE(\"Function has not been written yet\");\n}\n```", "```\n// Problem code\nif (index < 0)\n    DIE(\"Illegal index\");\n```", "```\nif (index < 0)\n   printf(\"Die %s\\n\", \"Illegal index\");\n   exit(99); \n```", "```\nif (index < 0)\n    printf(\"Die %s\\n\", \"Illegal index\");\nexit(99); \n```", "```\n// Defined not as badly\n#define DIE(why) {            \\\n    printf(\"Die: %s\\n\", why); \\\n    exit(99);                 \\\n}\n```", "```\n// Problem code\nif (index < 0)\n    DIE(\"Illegal index\");\n```", "```\nif (index < 0)\n    DIE(\"Illegal index\");\nelse\n    printf(\"Did not die\\n\");\n```", "```\nif (index < 0)\n{\n    printf(\"Die: %s\\n\", why); \\\n    exit(99);                 \\\n};                 // <=== Notice two characters here.\nelse\n    print(\"Did not die\\n\");\n```", "```\ndo {\n   // Statements\n}\nwhile (`condition`);\n```", "```\n#define DIE(why)\ndo {            \\\n    printf(\"Die: %s\\n\", why); \\\n    exit(99);                 \\\n} while (0)\n```", "```\nif (index < 0)\n    DIE(\"Illegal index\");   // Note semicolon at the end of the statement.\nelse\n    printf(\"Did not die\\n\");\n```", "```\nif (index < 0)\n    do {\n        printf(\"Die: %s\\n\", \"Illegal index\");\n        exit(99);\n    } while (0);\nelse\n    printf(\"Did not die\\n\");\n```", "```\nint main()\n{\n#ifdef DEBUG\n    printf(\"Debug version\\n\");\n#endif // DEBUG\n```", "```\n#define DEBUG   // Debug version\n\nint main()\n{\n#ifdef DEBUG\n    printf(\"Debug version\\n\");\n#endif // DEBUG\n```", "```\nint main()\n{\n    printf(\"Debug version\\n\");\n```", "```\n//#define DEBUG         // Release version\n\nint main()\n{\n#ifdef DEBUG\n    printf(\"Debug version\\n\");\n#endif // DEBUG\n```", "```\nint main()\n{\n    // Nothing\n```", "```\nint main()\n{\n#ifdef DEBUG\n    printf(\"Debug version\\n\");\n#endif // DEBUG\n\n#ifdef DEBUG\n    printf(\"Starting main loop\\n\");\n#endif // DEBUG\n\n    while (1) {\n#ifdef DEBUG\n        printf(\"Before process file \\n\");\n#endif // DEBUG\n        processFile();\n#ifdef DEBUG\n        printf(\"After process file \\n\");\n#endif // DEBUG\n```", "```\n#ifdef DEBUG\n#define debug(msg) printf(msg)\n#else // DEBUG\n#define debug(msg) /* nothing */\n#endif // DEBUG\n\nint main()\n{\n    debug(\"Debug version\\n\");\n    debug(\"Starting main loop\\n\");\n\n    while (1) {\n        debug(\"Before process file \\n\");\n        processFile();\n        debug(\"After process file \\n\");\n```", "```\n**$ gcc -Wall -Wextra -DDEBUG -o prog prog.c**\n```", "```\n#if defined(STM32F030x6)\n  #include \"stm32f030x6.h\"\n#elif defined(STM32F030x8)\n  #include \"stm32f030x8.h\"\n#elif defined(STM32F031x6)\n  #include \"stm32f031x6.h\"\n#elif defined(STM32F038xx)\n```", "```\n$ **gcc -dM -E - < /dev/null**\n```", "```\n#ifdef   __cplusplus\nextern \"C\"\n{\n#endif\n```", "```\n#include <file.h>\n#include \"file.h\"\n```", "```\n#ifndef __FILE_NAME_H__\n#define __FILE_NAME_H__\n// Body of the file\n#endif __FILE_NAME_H__\n```", "```\n#ifndef PROCESSOR\n#define PROCESSOR DEFAULT_PROCESSOR\n#warning \"No processor -- taking default\"\n#endif // PROCESSOR\n```", "```\n#ifndef RELEASE_VERSION\n#error \"No release version defined. It must be defined.\"\n#endif // RELEASE_VERSION\n```", "```\n// I wish they would fix this include file.\n#pragma GCC diagnostic ignored \"-Wmissing-prototypes\"\n#include \"buggy.h\"\n#pragma GCC diagnostic warning \"-Wmissing-prototypes\"\n```", "```\nint processFile(void) {\n    readFile();\n    connectToAuditServer();\n    if (!audit()) {\n        printf(\"ERROR: Audit failed\\n\");\n        return;\n    }\n    crunchData();\n    writeReport();\n} \n```", "```\nint processFile(void) {\n    readFile();\n//    connectToAuditServer();\n//    if (!audit()) {\n//        printf(\"ERROR: Audit failed\\n\");\n//        return;\n//    }\n    crunchData();\n    writeReport();\n}\n```", "```\nint processFile(void) {\n    readFile();\n#ifdef UNDEF\n    connectToAuditServer();\n    if (!audit()) {\n        printf(\"ERROR: Audit failed\\n\");\n        return;\n    }\n#endif // UNDEF\n    crunchData();\n    writeReport();\n}\n```"]