["```\n          global    _start\n\n_start:   mov       rax, 1                  ; system call for write\n          mov       rdi, 1                  ; file handle 1 is stdout\n          mov       rsi, message            ; address of string to output\n          mov       rdx, 13                 ; number of bytes\n          syscall                           ; invoke OS to do the write\n          mov       rax, 60                 ; system call for exit\n          xor       rdi, rdi                ; exit code 0\n          syscall                           ; invoke OS to exit\n\nmessage: db         \"Hello, Kernel!\", 10    ; note the newline at the end\n```", "```\n> nasm -felf64 hellok.asm && ld -o hellok hellok.o && ./hellok\n```", "```\nglobal main\nextern printf\n\nmsg: db \"Hello libC!\", 0   ; 0 = ASCII endofstring\nfmtstr: db \"%s\", 10, 0     ; ASCII newline and endofstring\nfmtint: db '%10d', 10, 0   ; ASCII newline and endofstring\n\nmain:\n    mov rdi,fmtstr\n    mov rsi,msg     ; pointer to msg\n    mov rax,0       ; num of extra stack args used (none)\n    call printf     ; call C function\n\n    mov rdi,fmtint\n    mov rsi,124     ; 124 is an int to print out\n    mov rax,0       ; num of extra stack args used (none)\n    call printf     ; call C function\n    ret\n```", "```\n> nasm -felf64 helloc.asm ; gcc -no-pie -o helloc helloc.o ; ./helloc\n```", "```\n> objdump -d helloc\n```", "```\nif (0) LOAD BASE+(*TARGET) else LOAD 1\n```", "```\nfor (i=1:3) time(LOAD BASE+i)\n```"]