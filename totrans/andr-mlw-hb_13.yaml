- en: '**10'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: RANSOMWARE**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ransomware attacks have targeted hospitals, financial firms, academic institutions,
    and other organizations, garnering substantial media coverage. The WannaCry attack
    in 2017, for instance, has all the hallmarks of a spy thriller. Reports state
    that, among other capabilities, it abused unpatched vulnerabilities through exploit
    code called EternalBlue originally developed by the NSA and caused up to $8 billion
    in damages.
  prefs: []
  type: TYPE_NORMAL
- en: If there is any good news in this book, it’s that ransomware attacks like this
    one haven’t significantly impacted Android. Ransomware targeting the Android operating
    system has always been relatively uncommon and is now nearly extinct. We believe
    this is because Android ransomware apps cannot reliably spread from device to
    device. In addition, Android’s application isolation architecture makes it hard
    to encrypt files owned by other apps without an effective privilege escalation
    exploit. Another hurdle is that devices usually back up user files to the cloud
    automatically, so instead of paying a ransom, users can simply uninstall the ransomware
    or factory-reset their devices, then restore their cloud backups.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile ransomware is also less profitable than other forms. Most Android users
    are individuals, not corporations, so their devices contain less sensitive data,
    and they have a lower ability to pay, making them less attractive targets. In
    contrast, large corporations may end up paying millions of dollars after a ransomware
    attack to recover their data, the control of their systems, and the ability to
    continue their operations. For example, Bloomberg reports that the Chicago-based
    insurance giant CNA paid a ransom of $40 million in 2021.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin this chapter with a brief description of Android ransomware and
    a discussion of specific ransomware families. Then, we’ll analyze the performance
    of machine learning classifiers at detecting ransomware.
  prefs: []
  type: TYPE_NORMAL
- en: '**How Ransomware Attacks Work**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'On Android, there are two broad classes of ransomware: lockers and crypters.
    *Lockers* tend to lock a device at the operating system level. When the user tries
    to turn it on, a screen pops up demanding a ransom. To regain access, the user
    must follow instructions to pay the ransom, usually in cryptocurrency. Lockers
    typically don’t encrypt files, and because the integrity of the data hasn’t been
    compromised, it’s usually possible to recover the device by booting into *safe
    mode*, a little-known feature of all Android phones that loads a bare-bones operating
    system without running the user’s apps.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Crypto* ransomware encrypts some or all of the files on a device, at least
    to the extent permitted by Android’s app and storage isolation protections. The
    victim loses access to the files and can’t recover them until they pay the ransom.
    Although they should then receive a decryption key, not all victims who pay the
    ransom receive a functioning key. A third ransomware category, *cryptolockers*,
    combines encryption and locking ransomware.'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic backups can enable victims to avoid the worst effects of ransomware.
    In response, modern ransomware often uses an *encrypt, exfiltrate, and leak (EEL)*
    strategy. EEL ransomware encrypts the user’s files, exfiltrates them to a command-and-control
    center, and threatens to leak private data if the ransom isn’t paid. Sometimes,
    the attacker releases some of the data and then escalates their ransom demands,
    threatening to release more data if the increased amount isn’t paid.
  prefs: []
  type: TYPE_NORMAL
- en: As you’ll see in the next section, ransomware apps tend not to be found on Google
    Play, suggesting that most make their way onto user devices through app sideloading.
    This is because unofficial app stores may not have the sophisticated security
    mechanisms built into Google Play. Android users may also fall victim to malicious
    websites.
  prefs: []
  type: TYPE_NORMAL
- en: '**Android Ransomware Families**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chiffon, a well-known Android ransomware family, was discovered in 2015 by the
    security company Zscaler. It makes its way onto devices when users download what
    seems to be a pornographic app. Once installed, Chiffon attempts to use the device’s
    camera to capture a photo of the victim. The photo is then presented to them as
    part of the ransom note, causing the victim to worry that the photo will be sent
    to everyone in their contact list or that their contacts will receive a message
    that includes a link to the pornography app.
  prefs: []
  type: TYPE_NORMAL
- en: The Jisut ransomware family was first discovered in 2014 and subsequently generated
    thousands of variants. Once launched, the app would request administrative permissions
    and use these to lock the device or encrypt the user’s files. It would then announce
    to the user that their device was infected and make a ransom demand. Certain versions
    of this malware family also had characteristics of spyware, as they stole passwords
    to the Chinese social network QQ. For a technical paper about this ransomware
    family, see “An in-Depth Study of the Jisut Family of Android Ransomware” by Alejandro
    Martín et al.
  prefs: []
  type: TYPE_NORMAL
- en: 'LeakerLocker is a ransomware family that spread via bogus wallpaper and device
    cleaner apps. Instead of locking the device, LeakerLocker captured user data,
    such as personal photos, contacts, SMS messages, phone call history, Facebook
    messages, visits to websites, full email messages, and GPS information. The ransom
    note threatened to dump this data on the internet, then prompted the user to pay
    using a credit card. McAfee first described this malware in 2017 in a blog post
    titled “LeakerLocker: Mobile Ransomware Acts Without Encryption.”'
  prefs: []
  type: TYPE_NORMAL
- en: Simplocker is often considered the first crypto ransomware for Android. Discovered
    in 2014 and described by Czech anti-malware company ESET on its malware database
    website, this ransomware family was initially portrayed as an antivirus tool.
    Once downloaded, the app would encrypt files on the device’s SD card and demand
    payment. While different versions of this ransomware family have different features,
    some versions involve the use of the Tor network to facilitate communications
    between the app and the attacker’s command-and-control server.
  prefs: []
  type: TYPE_NORMAL
- en: Svpeng, which started out as a banking trojan, was discovered by Kaspersky in
    2013\. In 2017, Svpeng added ransomware functionality. Potential victims received
    an email that appeared to come from the FBI. The email claimed that the user had
    engaged in viewing or distributing pornographic content and threatened them with
    hefty fines and a jail term unless they complied with the instructions in the
    email, which involved electronically sending a prepaid MoneyPak card to the perpetrators.
  prefs: []
  type: TYPE_NORMAL
- en: Police is a family of Android ransomware similar in many ways to both Chiffon
    and Svpeng. Like Chiffon, it reaches devices via a pornography app, and like Svpeng,
    it masquerades as the police, accusing the user of distributing pornography and
    threatening all kinds of legal consequences unless the victim pays up. Similarly,
    SimpleLocker is a well-known ransomware family that infects devices when users
    attempt to visit a bogus pornography website. Once compromised, the app encrypts
    the contents of the victim’s SD card, such as their documents, images, and videos,
    and presents a ransom demand to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/ch10fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-1: Top 20 features that best distinguish Android ransomware from
    goodware*'
  prefs: []
  type: TYPE_NORMAL
- en: Discovered around 2017, Anubis is hybrid malware that operates as both a banking
    trojan and spyware by stealing login credentials for financial sites such as PayPal.
    The ransomware module was added in 2019, to lock screens and encrypt files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ransomware vs. Goodware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 10-1](ch10.xhtml#ch10fig1) shows the 20 features that play the biggest
    role in separating ransomware from goodware using the Extra-Trees classifier discussed
    in [Chapter 7](ch07.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, 11 of the top 20 features are related to permissions. Note that,
    unlike with ABTs, SMS-related permissions aren’t very important for distinguishing
    ransomware from goodware. Let’s explore the ones that are more helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '***Permission-Related Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `MOUNT_UNMOUNT_FILESYSTEMS` permission is one of the most important for
    classifying ransomware, as it is requested by over 40 percent of ransomware apps
    but only around 5 percent of goodware. This comes as a surprise, as the permission
    requires the use of a privilege escalation exploit that allows apps to manipulate
    the filesystem. We aren’t aware of any Android ransom-ware containing such an
    exploit, so the malware wouldn’t be able to use this permission in practice. The
    small number of ransomware families likely skews the statistical distribution
    of this feature. Several ransomware families request dozens of permissions, including
    `MOUNT_UNMOUNT_FILESYSTEMS`, but don’t actually use them.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve described the `GET_TASKS` permission in previous chapters. In a nutshell,
    it allows the app to see what processes are running on the device. This permission
    can be used defensively too, for example to check for the presence of security
    software on the device or to force the user to interact with the user interface
    in a certain way. The Svpeng ransomware family uses this permission to ensure
    that the user grants the ransomware device administrative permissions on the administration
    screen, while the Simplocker family continuously monitors the app that is in the
    foreground and tries to kill it as soon as possible if the user starts to interact
    with any app besides the ransomware itself. This permission is sought about four
    times more frequently by ransomware than by goodware.
  prefs: []
  type: TYPE_NORMAL
- en: The `INSTALL_PACKAGES` permission enables a privileged app to silently install
    other apps. As this permission is privileged, normal apps can’t use it, and goodware
    almost never requests it. Over 20 percent of ransomware apps do, however, for
    reasons that are unclear. As in the case of `MOUNT_UNMOUNT_FILESYSTEMS`, ransomware
    cannot actually use this permission, and spot-checking ransomware samples from
    our library showed that most samples that request `INSTALL_PACKAGES` also request
    the unprivileged and user-consented permission `REQUEST_INSTALL_PACKAGES`. It’s
    possible that ransomware developers request both permissions in case the app somehow
    ends up with elevated privileges.
  prefs: []
  type: TYPE_NORMAL
- en: The `READ_PHONE_STATE` permission is requested more than twice as frequently
    by ransomware than by goodware. It enables the ransomware to extract information
    about the user’s phone number, current calls, cell phone provider, and more. In
    principle, it could enable the ransomware developer to call the victim and speak
    to them over the phone.
  prefs: []
  type: TYPE_NORMAL
- en: The `ACCESS_WIFI_STATE` permission provides access to the Android `WifiManager`
    to get the state of the device’s Wi-Fi connection. We’ve seen this permission
    used by ransomware apps such as Simplocker to force a Wi-Fi connection and ensure
    that the ransomware can communicate with its command-and-control server. Over
    80 percent of ransomware samples request this permission, which is more than double
    the percentage of goodware apps that do.
  prefs: []
  type: TYPE_NORMAL
- en: Not surprisingly, ransomware apps use the `SYSTEM_ALERT_WINDOW` permission to
    place a window over the entire screen, presumably to display the ransom demand.
    Importantly, the overlay window prevents the user from operating the device. The
    probability of ransomware requesting this permission is about four times the probability
    of goodware requesting it.
  prefs: []
  type: TYPE_NORMAL
- en: The `READ_LOGS` permission is also requested about four times as frequently
    by ransomware as by goodware. We haven’t observed it used for functionality related
    to locking phones or asking for ransom, however, and suspect that it is an artifact
    of the technological choices made by ransomware developers. For example, several
    ransomware families use commercial app protection tools like Tencent Legu or Qihoo
    360 Jiagu to protect themselves from reverse engineering. These protection tools
    use the `READ_LOGS` permission to collect log information for crash diagnostics.
    Due to the small number of ransomware families, technological choices made by
    even a few will have an outsized impact on machine learning features.
  prefs: []
  type: TYPE_NORMAL
- en: Goodware almost never uses the `KILL_BACKGROUND_PROCESSES` permission, but over
    25 percent of ransomware does. This permission enables the ransomware to kill
    any antivirus processes that may be running on the device. As mentioned before,
    some ransomware families, like Simplocker, also try to blanket-kill all processes
    besides the ransomware’s, and some allow an explicit list of system setting dialogs
    that the ransomware wants the user to interact with.
  prefs: []
  type: TYPE_NORMAL
- en: Ransomware requests the `RECEIVE_BOOT_COMPLETED` permission almost three times
    more frequently than goodware. This permission is important because it lets ransomware
    start up when the user reboots the device. Once boot is complete, the malicious
    app can immediately block access to the device and show the ransom demand screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `RESTART_PACKAGES` permission is another one that is rarely used by goodware
    but is requested by over 25 percent of ransomware. We haven’t found it used in
    any actual ransomware behavior, but it is sometimes used by SDKs embedded in ransomware
    apps. Even that is surprising, as this permission was deprecated in 2011, in Android
    4.0.3 (Ice Cream Sandwich).
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 10-1](ch10.xhtml#ch10tab1) shows some of the common permissions requested
    by six important malware families. We see that some families, like Simplocker,
    request virtually every permission, while others are much more selective.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-1:** Permissions Requested by Ransomware Families'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Permission** | **Chiffon** | **LeakerLocker** | **Simplocker** | **Police**
    | **Jisut** | **SimpleLocker** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `MOUNT_UNMOUNT_FILESYSTEMS` | No | No | Yes | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `GET_TASKS` | Yes | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| `INSTALL_PACKAGES` | No | No | Yes | No | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `READ_PHONE_STATE` | Yes | Yes | Yes | No | No | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `GET_PACKAGE_SIZE` | No | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| `ACCESS_WIFI_STATE` | No | Yes | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| `SYSTEM_ALERT_WINDOW` | Yes | Yes | Yes | Yes | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `READ_LOGS` | No | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| `KILL_BACKGROUND_PROCESSES` | No | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| `RECEIVE_BOOT_COMPLETED` | Yes | Yes | Yes | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `RESTART_PACKAGES` | No | No | Yes | No | No | No |'
  prefs: []
  type: TYPE_TB
- en: Some permissions, such as `RECEIVE_BOOT_COMPLETED` are requested by all six
    of the families we’ve studied, while others, like `READ_LOGS` and `KILL_BACKGROUND_PROCESSES`,
    are requested by just one app. These simple analyses show the diversity of ransomware’s
    behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: '***Other Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Ransomware tends to make more calls to `org.apache.conn` and `org.apache.conn.scheme`
    than goodware, perhaps so it can maintain connections between the compromised
    device and the malware developers’ command-and-control server. Since ransomware
    apps on Android are rare and the number of identified families small, the use
    of Apache libraries by even a few of them makes the prediction power of features
    involving those calls relatively high, explaining these observations.
  prefs: []
  type: TYPE_NORMAL
- en: Our analysis also indicates that ransomware apps seem to make fewer calls to
    various Android API packages than goodware does. Ransomware apps tend to be small
    APKs that focus on their core business, and unlike legitimate apps, they need
    to use only a few Android API packages to achieve their goal.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prediction Efficacy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Table 10-2](ch10.xhtml#ch10tab2) shows the performance of selected machine
    learning classifiers at separating ransomware from goodware, given different sets
    of features. The first column lists the types of features used in the prediction,
    including basic API, static, and dynamic features as well as advanced features
    derived from TSGs, landmarks, feature clustering, and correlation graphs. We also
    show combinations of these types. The second column shows the best classification
    approach using the set of features in a given row, and subsequent columns show
    various predictive performance metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-2:** Metrics for Evaluating Android Ransomware vs. Goodware'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| API package | XGBoost | 0.8979 | 0.8670 | 0.7926 | 0.8282 | 0.1330 | 0.1918
    |'
  prefs: []
  type: TYPE_TB
- en: '| Static (S) | XGBoost | 0.8982 | 0.8570 | 0.7836 | 0.8187 | 0.1430 | 0.2009
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic (D) | MLP | 0.8082 | 0.7806 | 0.6359 | 0.7009 | 0.2194 | 0.3094 |'
  prefs: []
  type: TYPE_TB
- en: '| S + D | RF | 0.9100 | 0.8498 | 0.8106 | 0.8297 | 0.1502 | 0.1822 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D | GBDT | 0.9168 | 0.8635 | 0.8285 | 0.8456 | 0.1365 | 0.1659
    |'
  prefs: []
  type: TYPE_TB
- en: '| TSG | XGBoost | 0.8231 | 0.7353 | 0.7540 | 0.7445 | 0.2647 | 0.2541 |'
  prefs: []
  type: TYPE_TB
- en: '| LM | RF | 0.7947 | 0.7409 | 0.6350 | 0.6839 | 0.2591 | 0.3217 |'
  prefs: []
  type: TYPE_TB
- en: '| FC | SVM | 0.6571 | 0.9262 | 0.3189 | 0.4745 | 0.0738 | 0.4135 |'
  prefs: []
  type: TYPE_TB
- en: '| CG | RF | 0.6229 | 0.6022 | 0.4194 | 0.4944 | 0.3978 | 0.4477 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + TSG | GBDT | 0.9457 | 0.8845 | 0.8803 | 0.8824 | 0.1155 | 0.1199
    |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + LM | GBDT | 0.9431 | 0.8789 | 0.8822 | 0.8805 | 0.1211 | 0.1190
    |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + FC | RF | 0.9439 | 0.8789 | 0.8756 | 0.8772 | 0.1211 | 0.1248
    |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + CG | XGBoost | 0.9447 | 0.8794 | 0.8794 | 0.8794 | 0.1206 |
    0.1214 |'
  prefs: []
  type: TYPE_TB
- en: '| All features | XGBoost | 0.9243 | 0.8470 | 0.9329 | 0.8879 | 0.1530 | 0.0604
    |'
  prefs: []
  type: TYPE_TB
- en: '| Best late fusion | XGBoost | 0.9653 | 0.9197 | 0.9649 | **0.9418** | 0.0803
    | 0.0458 |'
  prefs: []
  type: TYPE_TB
- en: As you can see, the machine learning approaches described in this book can achieve
    a precision of almost 92 percent and a recall exceeding 96 percent, which are
    excellent performance numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ransomware vs. Other Malware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 10-2](ch10.xhtml#ch10fig2) shows the 20 most important features for
    distinguishing ransomware from other forms of malware.'
  prefs: []
  type: TYPE_NORMAL
- en: Permissions play the largest role here, so we’ll focus on those. Ransom-ware
    also seems to make more calls to `android.security`, `android.content.pm`, and
    `android.database` than other malware categories, but these differences are quite
    small. Similarly, we see once again that ransomware makes more calls to the functions
    `org.apache.http.conn`, `org.apache.http.conn.schema`, and `org.apache.http.params`
    compared to other malware.
  prefs: []
  type: TYPE_NORMAL
- en: '***Permission-Related Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You should immediately notice that other malware requests the SMS-related permissions
    `SEND_SMS`, `RECEIVE_SMS`, and `WRITE_SMS` more frequently than ransomware. This
    is not surprising, because other forms of malware use those permissions for tasks
    like intercepting two-factor authentication messages, which ransomware doesn’t
    need to do.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/ch10fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-2: Top 20 features that best distinguish Android ransomware from
    other malware*'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, ransomware is more likely than other forms of malware to
    request the `RESTART_PACKAGES` and `READ_LOGS` permissions, both of which were
    described in the previous section. Another permission that is far more frequently
    requested by ransomware apps than by other forms of malware is `DIAGNOSTIC`, which
    allows apps to read and write to diagnostic resources. Yet because this permission
    is privileged, unprivileged applications can’t use it, including all current ransomware
    families we are aware of.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prediction Efficacy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Table 10-3](ch10.xhtml#ch10tab3) shows how effective machine learning algorithms
    are at separating ransomware from other forms of malware.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-3:** Android Ransomware and Other Malware Classification'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| API package | XGBoost | 0.8075 | 0.8135 | 0.7921 | 0.8027 | 0.1865 | 0.2043
    |'
  prefs: []
  type: TYPE_TB
- en: '| Static (S | XGBoost | 0.7739 | 0.7652 | 0.7926 | 0.7787 | 0.2348 | 0.2165
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic (D) | RF | 0.6756 | 0.6395 | 0.6739 | 0.6563 | 0.3605 | 0.3470 |'
  prefs: []
  type: TYPE_TB
- en: '| S + D | GBDT | 0.7949 | 0.7977 | 0.7827 | 0.7901 | 0.2023 | 0.2151 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D | GBDT | 0.8209 | 0.8088 | 0.8172 | 0.8129 | 0.1912 | 0.1856
    |'
  prefs: []
  type: TYPE_TB
- en: '| TSG | RF | 0.7097 | 0.7110 | 0.7097 | 0.7104 | 0.2890 | 0.2917 |'
  prefs: []
  type: TYPE_TB
- en: '| LM | RF | 0.7443 | 0.7611 | 0.5992 | 0.6705 | 0.2389 | 0.3328 |'
  prefs: []
  type: TYPE_TB
- en: '| FC | SVM | 0.5459 | 0.5222 | 0.6211 | 0.5674 | 0.4778 | 0.4713 |'
  prefs: []
  type: TYPE_TB
- en: '| CG | RF | 0.7443 | 0.7611 | 0.5992 | 0.6705 | 0.2389 | 0.3328 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + TSG | GBDT | 0.9180 | 0.8619 | 0.8351 | 0.8483 | 0.1381 | 0.1610
    |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + LM | XGBoost | 0.8718 | 0.8385 | 0.7667 | 0.8010 | 0.1615 |
    0.2166 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + FC | GBDT | 0.8791 | 0.8388 | 0.7653 | 0.8004 | 0.1612 | 0.2171
    |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + CG | GBDT | 0.8983 | 0.8688 | 0.7912 | 0.8282 | 0.1312 | 0.1932
    |'
  prefs: []
  type: TYPE_TB
- en: '| All features | XGBoost | 0.9168 | 0.8635 | 0.8285 | 0.8456 | 0.1365 | 0.1659
    |'
  prefs: []
  type: TYPE_TB
- en: '| Best late fusion | XGBoost | 0.8593 | 0.8718 | 0.9497 | **0.9091** | 0.1282
    | 0.2545 |'
  prefs: []
  type: TYPE_TB
- en: The precision and recall are lower in this case, at just over 87 percent and
    about 95 percent, respectively. It isn’t surprising that separating ransomware
    from other malware is harder than separating ransomware from goodware, as ransomware
    often has more in common with other malware categories than with goodware.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simplocker: A Case Study**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we explore the Simplocker ransomware app *qok.wrrgz.xcfwc*
    (v1, a10b). This app requests an extensive list of permissions, too long to show
    here. The motivation for requesting so many permissions is unclear, as code analysis
    of the sample shows that the vast majority aren’t actually used. This behavior
    matches what we found when analyzing the machine learning results discussed earlier
    in this chapter: it seems that ransomware often requests permissions that it doesn’t
    or cannot use.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the app achieves its malicious behavior. [Listing 10-1](ch10.xhtml#ch10lis1)
    shows the dialog definition code used by Simplocker to craft its ransom note.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-1: Code used to display the ransom note in Simplocker*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This code includes the following text, which provides a clear indication that
    we’re dealing with ransomware:'
  prefs: []
  type: TYPE_NORMAL
- en: To unlock your device and to avoid other legal consequences, you are obligated
    to pay a release fee of $300\. Payable through GreenDot MoneyPak (you have to
    purchase MoneyPak card. load it with $300 and enter the code). You can buy the
    card at any store or gas station, payzone or paypoint.
  prefs: []
  type: TYPE_NORMAL
- en: Next, [Listing 10-2](ch10.xhtml#ch10lis2) shows the code that Simplocker uses
    to encrypt files. The encryption is exceptionally simple. For every file to which
    the ransom-ware can write in external storage (see `encryptAll`), it increases
    the byte values of all bytes in the file by 1 (see `goToDir`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-2: Code used to encrypt files in Simplocker*'
  prefs: []
  type: TYPE_NORMAL
- en: This encryption is trivial to break, but it’s enough to completely mangle all
    file contents from the point of view of inexperienced users. Note that we can
    find the decryption functionality in the same function. The presence of the Boolean
    flag `z` passed to `goToDir` determines whether the function performs encryption
    or decryption.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 10-3](ch10.xhtml#ch10lis3) shows a snippet of the code used to kill
    relevant processes and time the locking mechanism.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 10-3: Code used to kill processes*'
  prefs: []
  type: TYPE_NORMAL
- en: The ransomware sets up a repeating timer through `Timer.scheduleAtFixed Rate`.
    As a result, every 10 ms, the ransomware checks which app the user is currently
    interacting with and kills it if it’s not the ransomware itself or the Settings
    app. Why the ransomware allow-lists the Settings app is unclear.
  prefs: []
  type: TYPE_NORMAL
- en: '**Predictions for Important Ransomware Samples**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Table 10-4](ch10.xhtml#ch10tab4) shows how well our machine learning classifiers
    performed when presented with the ransomware samples we discussed in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 10-4:** Performance of Machine Learning Classifiers on Ransomware Families'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Ransomware** | **Distinguished from goodware** | **Distinguished from other
    malware** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Chiffon | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| LeakerLocker | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Simplocker | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Svpeng | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Police | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Jisut | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Anubis | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| SimpleLocker | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: We see that in all cases the machine learning classifiers are able to correctly
    identify the samples as ransomware rather than goodware, and in six out of eight
    cases they are able to correctly identify the type of malware, despite some of
    the samples sharing characteristics with other malware categories.
  prefs: []
  type: TYPE_NORMAL
- en: '**Up Next**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ransomware incidents aren’t nearly as common on the Android platform as on
    Windows, where most ransomware incidents take place. In this chapter, we’ve shown
    that permissions are once again the key features useful for distinguishing ransomware
    from goodware, though the permissions used by different ransomware samples can
    vary widely. In the next chapter, we’ll examine a form of malware that’s much
    more common on Android: SMS fraud.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  prefs: []
  type: TYPE_NORMAL
