- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: How to Finish
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如何完成
- en: When I was working for the United Nations (UN), my boss at the time would regularly
    start conversations with the words “When the website is done . . .” to which I
    would respond, “The website is never done.” I count among my accomplishments the
    fact that by the time I left the UN, people had bought in to the agile, iterative
    process that treats software as a living thing that needs to be constantly maintained
    and improved. They stopped saying “When the website is done . . .”
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在联合国（UN）工作时，我的老板常常以“当网站完成时……”开始对话，我会回答，“网站永远不会完成。”我认为自己的一项成就就是，在我离开联合国时，大家已经接受了敏捷、迭代的过程，将软件视为一个需要不断维护和改进的活的东西。大家不再说“当网站完成时……”
- en: Technology is never done, but modernization projects can be. This chapter covers
    how to define success in a way that makes it clear when the modernization effort
    is completed and what to do next. In the beginning of a project, what success
    looks like can seem obvious, but often some people in an organization make assumptions
    about what success means that are different from the assumptions of others. Getting
    everyone on the same page and keeping everyone on the same page is critical to
    ensuring that the project crosses the finish line.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 技术永远不会完成，但现代化项目是可以完成的。本章将介绍如何定义成功，以清楚地了解何时完成现代化工作以及下一步该做什么。在项目初期，成功的样子可能看起来显而易见，但通常组织中的某些人对成功的理解与其他人的假设不同。让所有人达成共识并始终保持一致，对于确保项目成功完成至关重要。
- en: Revealing Assumptions
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 揭示假设
- en: 'A fair number of broken systems end up that way because the units of the organization
    involved in the implementation saw their roles and how they contributed to the
    larger picture differently from one another. Any kind of modernization, rearchitecting,
    or rethinking of an existing technical system is a long game. Work will stretch
    on for months or years. For that reason, it is essential when you work on these
    projects that everyone on the team is able to answer this question: How do we
    know if it’s getting better?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 很多破碎的系统最终是这样形成的，因为参与实施的组织单元对自己的角色以及它们如何为更大的图景做出贡献的理解不一致。任何形式的现代化、重新架构或重新思考现有技术系统都是一场持久战。工作将持续几个月甚至几年。因此，在这些项目中工作时，团队中的每个人都必须能够回答这个问题：我们如何知道它在变得更好？
- en: The team should know the long-term answer to that, but they should also know
    what better looks like within days or weeks from where they are now. This kind
    of work is a slog. To do it well, you have to maintain your own resilience. You
    have to be mindful of how people behave when they think a project is going poorly.
    The only thing harder than managing your own doubts is dealing with sabotage from
    colleagues who don’t understand how much progress is being made because their
    expectations of what improvement will look like is different from other members
    of the team.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 团队应该知道长期的答案，但他们也应该知道，在从现在起的几天或几周内，什么是更好的。这种工作是一个长期的过程。要做好它，你必须保持自己的韧性。你必须注意当人们认为项目进展不顺利时他们的行为。管理自己的怀疑比处理来自不理解进展的同事的破坏行为要难得多，因为他们对改进的期望与团队其他成员的期望不同。
- en: 'Approach 1: Success Criteria'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 1：成功标准
- en: 'Success doesn’t happen quickly or all at once, which begs the question: How
    do you know whether a project is moving in the right direction? When I set success
    criteria with my teams (and usually my boss or other significant stakeholders),
    we first determine the time frame for evaluation. If two people agree that shipping
    a feature is an indication of success, they can still come into conflict if they
    disagree on the timeline. Shipping something in three months is not the same thing
    as shipping it in a week. For the person who believes the feature should be shipped
    in a week, a deploy much later feels like a warning sign. For the person who believes
    it should be shipped in a year, the same deploy is validation.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 成功不会迅速或一次性地发生，这就提出了一个问题：你如何知道一个项目是否朝着正确的方向发展？当我与我的团队（通常还有我的老板或其他重要利益相关者）设定成功标准时，我们首先确定评估的时间框架。如果两个人都同意发布一个功能是成功的标志，他们仍然可能在时间表上产生冲突。三个月内发布和一周内发布是不同的。对于认为功能应该在一周内发布的人来说，部署的时间推迟到很晚会像一个警告信号。对于认为应该在一年内发布的人来说，相同的部署则是验证。
- en: If you are familiar with *objectives and key results (OKRs),* success criteria
    can take on a similar shape. First, you define your goal, and then, you define
    how you’ll know that you’ve reached your goal. Except, OKRs usually focus on signs
    that the goal is completed, and success criteria should focus on signs that you’re
    heading in the right direction.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉*目标与关键成果（OKRs）*，那么成功标准可能会呈现类似的形式。首先，你定义你的目标，然后定义你如何知道自己已经达成目标。不同的是，OKRs通常侧重于目标已完成的迹象，而成功标准应该侧重于你朝着正确方向前进的迹象。
- en: The value of this strategy is that the criteria chosen indicates the approach
    that will be taken without anyone arguing about the approach. If the success criteria
    are all about implementing new features, it’s unlikely the team is going to prioritize
    resolving any technical debt. If the success criteria are instead about decreasing
    the number of errors or speeding up minimum time to recover, the team has to focus
    on improving existing code. Whenever you can avoid having people argue about principles,
    philosophies, and other generalities of good engineering versus bad engineering,
    take advantage of it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这个策略的价值在于，所选择的标准明确了将要采取的方式，避免了对方法的争论。如果成功标准全部聚焦于实施新功能，那么团队可能不会优先解决技术债务。如果成功标准关注的是减少错误数量或加快最小恢复时间，那么团队就必须专注于改进现有代码。只要能够避免人们争论原则、理念和其他有关好工程与差工程的普遍性问题，就应该抓住这个机会。
- en: The same goal can have wildly different success criteria depending on the team’s
    model. For example, a consulting model would focus on the client’s ability to
    absorb and adopt process and best practices, not deploys. Consultants don’t have
    much control over deploys, and the only way they get control is by not being consultants
    anymore. As software engineers, it is easy to fall into the trap of thinking that
    effective work will always look like writing code, but sometimes you get much
    closer to your desired outcome by teaching others to do the job rather than doing
    it yourself.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的目标根据团队的模型可以有非常不同的成功标准。例如，咨询模型会关注客户吸收和采纳过程及最佳实践的能力，而非部署次数。顾问无法对部署有太多控制，而唯一能获得控制的方式就是不再做顾问。作为软件工程师，我们很容易陷入一个误区，认为有效的工作总是像写代码一样，但有时，通过教别人如何完成工作，而不是自己做，往往能更接近你期望的结果。
- en: 'Example: Adding Continuous Integration/Continuous Deploy'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：添加持续集成/持续部署
- en: 'Goal: Move service on to its own deploy pipeline.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标：将服务迁移到自己的部署流水线。
- en: 'Timeline: One quarter.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间表：一个季度。
- en: 'Success Criteria:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功标准：
- en: Time to deploy drops by 20 percent.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署时间减少了20%。
- en: Any single person on the Service team can initiate and manage a deploy.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务团队中的任何人都可以发起并管理一次部署。
- en: Number of deploys in a week goes up.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周的部署次数增加。
- en: 'Approach 2: Diagnosis-Policy-Actions'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 2：诊断-政策-行动
- en: 'Developed by Richard Rumelt, this approach draws on the same information as
    success criteria but frames it a bit differently.^([1](#c09-footnote-1)) Information
    is represented in three segments: diagnosis, policy, and actions. *Diagnosis*
    is a definition of a problem being fixed. *Policy* refers to the boundaries of
    potential solutions—the rules about what the solution should involve doing or
    shouldn’t involve doing. Finally, *actions* are the steps the team will take to
    solve the problem without violating their policy.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由理查德·鲁梅尔特（Richard Rumelt）开发，这种方法与成功标准使用相同的信息，但呈现方式略有不同。^([1](#c09-footnote-1))
    信息分为三个部分：诊断、政策和行动。*诊断*是对待解决问题的定义。*政策*指的是潜在解决方案的边界——即关于解决方案应做什么或不应做什么的规则。最后，*行动*是团队在不违反政策的情况下为解决问题而采取的步骤。
- en: What’s useful about Rumelt’s approach is that it is more focused on what you’re
    going to do and how you’re going to do it. This might be better in situations
    when there is little consensus around what success should look like and no single
    authority to make that decision, but you may find this approach more difficult
    if your team struggles with road maps. The challenges of legacy modernization
    can be varied, intertwined, and politically complex. Teams might not agree on
    what success looks like, and they might also disagree on which tasks need to be
    executed to untangle problems. Rumelt’s approach is better for situations when
    it is easier to reach agreement on the steps forward and their order, but harder
    to reach consensus on what signs of improvement will look like.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Rumelt方法的有用之处在于，它更加专注于你要做什么以及如何做。当关于成功的定义没有达成广泛共识，且没有单一权威做出决定时，这种方法可能会更有效；但如果你的团队在路线图上遇到困难，可能会觉得这种方法更难实施。遗留系统现代化的挑战可能是多种多样的，交织在一起，且政治复杂。团队可能无法就成功的定义达成一致，他们也可能对解决问题需要执行的任务有不同意见。Rumelt方法更适用于那些在步骤和顺序上易于达成一致，但在改善标志的定义上较难达成共识的情况。
- en: 'Example: Upgrading a Database'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例：升级数据库
- en: 'Diagnosis: Our database software is several versions out of date. The vendor
    won’t provide support anymore.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 诊断：我们的数据库软件版本已经过时好几版了，供应商将不再提供支持。
- en: 'Policy: We want to use blue-green deploys. We will never just turn one database
    version off and the other on all at once.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 政策：我们希望使用蓝绿部署。我们绝不会一次性关闭一个数据库版本并开启另一个版本。
- en: 'Actions:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行动：
- en: We will back up our data before each upgrade.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在每次升级前备份数据。
- en: We will upgrade to 3.2 on this date.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在此日期升级到3.2版本。
- en: We will update to 3.3 on this date.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在此日期升级到3.3版本。
- en: Comparison
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较
- en: In terms of defining success, success criteria and diagnosis-policy-actions
    have different strengths and weaknesses. Success criteria connects modernization
    activities more directly to the value add they can demonstrate. It affords more
    flexibility in exactly what the team does by not prescribing a specific approach
    or set of tasks. It is an excellent exercise to run with bosses and any other
    oversight forces that might be inclined to micromanage a team. How to do something
    should be the decision of the people actually entrusted to do it. For that reason,
    the diagnosis-policy-actions approach is too detail oriented to help a team manage
    up. If the set of actions needs to be changed later, the team might be reluctant
    to do it and seem inconsistent in front of senior leadership. Discretion is so
    critical to success; don’t forfeit your team’s right to it by presenting implementation
    details for feedback if that’s not requested. What leadership needs to know is
    what outcomes you’re pushing for.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义成功方面，成功标准与诊断-政策-行动方法各有优缺点。成功标准能更直接地将现代化活动与其能够展示的附加价值联系起来。它在团队具体做什么上提供了更多灵活性，因为它不规定具体的做法或任务集。这是一个与上司和其他可能倾向于过度管理团队的监管者进行的极好的练习。做某事的方式应该由被信任执行任务的人来决定。因此，诊断-政策-行动方法过于注重细节，不利于团队向上管理。如果后续需要更改行动集，团队可能会不情愿这样做，并且在高级领导面前显得不一致。自由裁量权对于成功至关重要；如果没有被要求提供反馈，切勿通过呈现实施细节来放弃团队的自由裁量权。领导层需要知道的是你正在推动的成果。
- en: On the other hand, sometimes you know what better looks like but have no idea
    which set of actions will get you there. Research and experimentation might fail
    to signal a clear winner among competing road maps. One side of an organization
    might say this one thing needs to be fixed first, while another side might argue
    a completely different fix takes priority. If the situation can be resolved only
    by executive decision, the diagnosis-policy-action approach is a better fit. The
    same flexibility that makes success criteria effective at adapting to new information
    and changing tactics will create confusion when the team is undecided about the
    day-to-day work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，有时候你知道更好的结果是什么样子，但却不知道采取哪一组行动才能实现它。研究和实验可能无法在竞争的路线图中指出明确的赢家。组织的一方可能会说，首先需要解决这个问题，而另一方则可能争论完全不同的解决方案应该优先。若问题只能通过高层决策解决，诊断-政策-行动方法会更合适。正是这种使成功标准能够有效适应新信息和变化策略的灵活性，反而会在团队对日常工作犹豫不决时带来混乱。
- en: Marking Time
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记时间
- en: Defining what success looks like helps keep people on the same page, but since
    the success criteria and diagnosis-policy-actions approaches cut challenges into
    smaller accomplishments, you also need to stop people from losing faith in the
    significance of those small accomplishments. If the team feels like what they’ve
    succeeded in doing was not worth the time they invested in it, the effectiveness
    of your definition of success will be diminished.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 定义什么是成功有助于保持团队的统一，但由于成功标准和诊断—政策—行动的方法把挑战切分成更小的成就，你还需要防止团队失去对这些小成就的信心。如果团队觉得他们所取得的成就不值得他们投入的时间，那么你定义的成功就会失去效果。
- en: What’s to your advantage here is that the perception of time is just as variable
    as perception of risk. Finding a way to mark time is about finding a way to pull
    people out of day-to-day frustrations that slow down time and help them focus
    on the larger picture. My favorite way of marking time is bullet journaling. I
    have a book where every day I write down five things I am going to work on and
    how long I think they will take. Throughout the day, I check off those tasks as
    I complete them and jot down little notes with significant details. During slow
    periods, I often doodle in the margins or decorate pages with stickers I’ve gotten
    from vendors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对你有利的是，时间的感知和风险的感知一样是可变的。找到标记时间的方式，就是找到一种方法帮助人们脱离那些让时间变慢的日常挫折，帮助他们集中注意力于更大的图景。我最喜欢的标记时间的方法是子弹日记。我有一本书，每天我都会写下五件我打算做的事情，以及我认为它们需要多长时间。在一天中，我会在完成这些任务后打勾，并记下一些带有重要细节的小笔记。在工作进展缓慢的时候，我常常在边缘涂鸦或者用从供应商那得到的贴纸装饰页面。
- en: Whenever I flip two or three weeks back in my bullet journal, I am shocked by
    how much has changed. I’ve gotten so much more done than I realized. The tasks
    I’ve completed feel like months’ worth of work. Sometimes I am shocked when looking
    only one week back in time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我翻开子弹日记中两三周前的页面时，我都惊讶于事情变化的如此之大。我完成的任务比我想象的要多得多。这些完成的任务感觉像是几个月的工作。有时候，回顾仅仅一周前的事情，我都会感到震惊。
- en: Just as humans are terrible judges of probability, we’re also terrible judges
    of time. What feels like ages might only be a few days. By marking time, we can
    realign our emotional perception of how things are going. Find some way to record
    what you worked on and when so the team can easily go back and get a full picture
    of how far they’ve come.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如人类在判断概率时常常很糟糕，我们在判断时间时同样也很糟糕。感觉像是过去了很久的事情，可能实际上只不过是几天而已。通过标记时间，我们可以重新调整对事情进展的情感认知。找一种方式记录你工作的内容和时间，这样团队就可以轻松地回顾，全面了解他们的进展。
- en: You might be tempted to say, “Oh, well, they can do that with our project management
    system.” Except, project management tools are geared toward presenting one stream
    of work at a time. Marking time is more effective because of the more complete
    a picture it paints of one specific point in people’s lives. Knowing that such-and-such
    ticket was closed on a certain day doesn’t necessarily take me back to that moment.
    Sometimes a date is just a date. When you mark time, do so in a way that evokes
    memory, that highlights the feeling of distance between that moment and where
    the team is now.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想说：“哦，他们可以通过我们的项目管理系统来做到这一点。”但是，项目管理工具通常是一次展示一项工作的流。标记时间更为有效，因为它能呈现出更完整的图景，展示人们生活中某个特定时刻的情况。知道某个任务是在某天关闭的，并不一定能让我回到那个时刻。有时候，一个日期就是一个日期。当你标记时间时，要用一种能唤起记忆的方式，突出那个时刻和现在团队所在位置之间的距离感。
- en: Bullet journaling is effective for me because each page is a snapshot of everything
    that is on my mind at the time. I record work projects, personal projects, events
    and social activities, holidays, and illnesses. Anything that I expect to take
    up a large part of the day, I write down. Looking back on a project’s progress
    with that information gives it a sense of context that I hadn’t considered before.
    Once I consider it, I realize that I have not been standing in one place mindlessly
    banging my head against a wall. Bit by bit, piece by piece, I have made things
    better.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，子弹日记很有效，因为每一页都是当时我脑海中的所有内容的快照。我记录工作项目、个人项目、事件和社交活动、假期以及疾病。任何预计会占据大部分时间的事情，我都会写下来。回顾项目进展时，凭借这些信息，我能为它赋予一些我之前没有考虑过的背景。一旦我考虑到这一点，我就意识到自己并没有在一个地方无意识地撞墙。一点一滴，逐步地，我让事情变得更好。
- en: Postmortems on Success
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功的事后分析
- en: For software engineers, a *postmortem* is a review done after an outage that
    explores the timeline of the failure, contributing factors, and the ultimate resolution
    in detail. We typically tack on the prefix “blameless” when referring to postmortems
    to emphasize that the purpose of doing a postmortem is to understand what went
    wrong, not to assign blame to a particular group or individual who made a mistake.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件工程师来说，*事后总结*是在发生故障后进行的回顾，详细探讨故障的时间线、影响因素以及最终的解决方案。我们通常在提到事后总结时，会加上“无责”前缀，强调进行事后总结的目的是理解问题出在哪里，而不是将责任归咎于某个犯错的团队或个人。
- en: But postmortems are not specific to failure. If your modernization plan includes
    modeling your approach after another successful project, consider doing a postmortem
    on that project’s success instead. Remember that we tend to think of failure as
    bad luck and success as skill. We do postmortems on failure because we’re likely
    to see them as complex scenarios with a variety of contributing factors. We assume
    that success happens for simple, straightforward reasons.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但事后总结并不限于失败。如果你的现代化计划包括以另一个成功项目为模范，考虑对该项目的成功进行事后总结。记住，我们倾向于将失败视为运气不好，而将成功视为能力的体现。我们对失败进行事后总结，因为我们通常认为失败是复杂的，涉及多种因素。而成功则发生于简单、直接的原因。
- en: In reality, success is no more or less complex than failure. You should use
    the same methodology to learn from success that you use to learn from failure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，成功和失败一样复杂。你应该采用与从失败中学习相同的方法来从成功中学习。
- en: Postmortem vs. Retrospective
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事后总结与回顾会议
- en: Right now you might be thinking to yourself that your organization does do postmortems
    on success, you just call them *retrospectives*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想，你的组织确实会对成功进行事后总结，只不过你们叫它*回顾会议*。
- en: And, that’s true. The post-sprint or post-launch retrospective does ask many
    of the same questions as a postmortem. However, I have yet to work with a technical
    organization that treated retrospectives and postmortems the same. In practice,
    retrospectives are much more informal. They do not generate reports for others
    to read—at least, not that I’ve ever seen. I do not know of any organizations
    that post their retrospectives online for the public to read. I’ve been in a lot
    of retrospectives where we’ve captured great information and had deep soul-searching
    conversations, but rarely have I seen that output leave the whiteboard and be
    shared with other teams.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 没错。每次冲刺或上线后的回顾会议确实会问一些和事后总结相似的问题。然而，我还没有和任何一家技术组织合作过，他们会把回顾会议和事后总结看作同一回事。实际上，回顾会议要更加非正式。它们不会生成报告供其他人阅读——至少，至少我没见过。我不知道有哪个组织会把回顾会议的内容公开发布到网上供公众阅读。我参加过很多回顾会议，我们捕捉到了一些很有价值的信息并进行了深入的自我反思，但我很少见到这些成果会从白板上离开，并且被分享给其他团队。
- en: As an industry, we *reflect* on success but *study* failure. Sometimes obsessively.
    I’m suggesting that if you’re modeling your project after another team or another
    organization’s success, you should devote some time to actually researching how
    that success came to be in the first place.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个行业，我们*反思*成功，但*研究*失败。有时候甚至过度研究。我建议，如果你是以另一个团队或另一个组织的成功为模范，你应该花一些时间真正去研究该成功是如何产生的。
- en: Running Postmortems
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行事后总结
- en: Before discussing writing postmortems on success, it might be useful to give
    an overview of how postmortems are run in technical organizations in general.
    The conventional postmortem format has a couple characteristics that are impractical
    outside incident response. For example, an outage happens quickly and ideally
    is resolved within hours, so creating a detailed timeline of events for that is
    an easier task than it would be for a project that has run for months.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论如何写关于成功的事后总结之前，先概述一下技术组织中事后总结的常规流程可能会更有帮助。传统的事后总结格式有一些特征，除了事故响应之外不太适用。例如，故障发生得很快，并且理想情况下在几小时内解决，因此为其创建详细的事件时间线比起持续几个月的项目更为简单。
- en: A traditional postmortem describes the impact of the outage. The team discusses
    and documents what went well, what went poorly, and where people felt they got
    lucky. As mentioned, the postmortem often includes a detailed timeline of events
    around the incident response. These timelines break down what happened, when it
    happened, and who did what. Postmortems also do not usually reference people by
    name to protect them from blame. Instead, monikers like “SRE 1” or “Software Engineer
    2” are used to identify individuals and the actions they took. The postmortem
    concludes with actionable steps for improvement. How can the organization improve
    the things that went poorly or build on the things that went well?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的事后分析描述了故障的影响。团队会讨论并记录做得好的地方、做得不好的地方，以及在哪些地方人们认为自己得到了幸运。如前所述，事后分析通常会包括关于事件响应的详细时间线。这些时间线会分解发生了什么、何时发生以及谁做了什么。事后分析通常不会通过名字提到个人，以保护他们免受责备。相反，会使用“运维工程师1”或“软件工程师2”等别名来识别个人及其采取的行动。事后分析以可执行的改进步骤作为结束。组织如何改进做得不好的地方，或如何在做得好的地方进一步加强？
- en: Postmortems are written by reviewing communications and interviewing team members.
    Then a final review meeting is held to present and verify the gathered information
    with the full team.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 事后分析是通过回顾通讯记录和访谈团队成员来撰写的。然后，举行最终的回顾会议，向整个团队展示并验证所收集的信息。
- en: When running a postmortem on success, you have to weigh the investment of time
    and energy it will take to get that level of detail when the timeline stretches
    out over months instead of hours. Such efforts can become cumbersome and bureaucratic
    fast. Traditional postmortems are written by the software engineers who responded
    to the incident. These are people you want working on software, not writing reports.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在对成功进行事后分析时，你必须权衡需要投入多少时间和精力才能获得如此详细的信息，尤其是在时间线跨越几个月而非几小时的情况下。这种努力很快就会变得繁琐且官僚化。传统的事后分析通常是由应对事件的软件工程师撰写的。这些人是你希望投入到软件开发中的，而不是用来写报告的。
- en: For that reason, postmortems on success should be run like their lighter-weight
    cousin the retrospective, but documented with the philosophy of traditional postmortems.
    The value of the postmortem is not its level of detail, but the role it plays
    in knowledge sharing. Postmortems are about helping people not involved in the
    incident avoid the same mistakes. The best postmortems are also distributed outside
    the organization to cultivate trust through transparency.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个原因，成功的事后分析应该像它的轻量级版本回顾一样进行，但文档记录时应遵循传统事后分析的理念。事后分析的价值不在于其详细程度，而在于它在知识共享中所扮演的角色。事后分析是为了帮助未参与事件的人避免犯同样的错误。最好的事后分析还应当传播到组织外部，以通过透明度来培养信任。
- en: 'Postmortems establish a record about what really happened and how specific
    actions affected the outcome. They do not document failure; they provide context.
    Postmortems on success should serve a similar purpose. Why was a specific approach
    or technique successful? Did the final strategy look like what the team had planned
    at the start? Your timeline in a postmortem for success should be built around
    these questions: How did the organization execute on the original strategy, how
    did the strategy change, when did those changes happen, and what triggered them?'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 事后分析建立了一个关于实际发生了什么以及具体行动如何影响结果的记录。它们并不记录失败；而是提供了背景。成功的事后分析应当发挥类似的作用。为什么某种特定的方法或技巧能够成功？最终的策略是否与团队最初的计划一致？在成功的事后分析中，你的时间线应该围绕以下问题展开：组织是如何执行原始策略的，策略发生了哪些变化，这些变化发生了何时，以及是什么促发了这些变化？
- en: Even the biggest successes have challenges that could have gone better and places
    where good fortune saved the day. Documenting those helps people evaluate the
    suitability of your approach for their own problems and ultimately reproduce your
    success.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最大的成功，也有一些本可以做得更好的挑战和幸运的时刻。记录这些内容有助于人们评估你的方法是否适用于他们自己的问题，并最终复制你的成功。
- en: If you’re convinced the strategy from another organization will work for your
    issue, don’t wait for those engineers to start doing postmortems. You can gather
    most of the information you need by taking people out for coffee. If there’s an
    organization whose success you want to copy, spend a couple weeks interviewing
    people about their strategy using the postmortem’s key questions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确信另一家组织的策略对你的问题有效，不要等那些工程师开始做事后分析。你可以通过和人们喝咖啡来收集你所需的大部分信息。如果有一个你想复制成功的组织，花几周时间采访他们的人员，了解他们的策略，并使用事后分析的关键问题来引导你的访谈。
- en: What went well?
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么做得好？
- en: What could have gone better?
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有什么可以改进的地方吗？
- en: Where did you get lucky?
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你们在哪儿运气好？
- en: The Tale of Two War Rooms
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两个战情室的故事
- en: I examine the contributing factors to success before finalizing a strategy,
    because I’ve seen organizations learn the wrong lessons from success. For example,
    an organization I was working with had a project that was hopelessly behind schedule.
    Not only did team members not have a realistic end date for even the smallest
    part of the project, they did not know why the project kept getting delayed in
    the first place. It was a large project that required a couple different organizational
    units to work together and share information. My consulting team was just rolling
    off a successful project that had faced a similar challenge. The organization
    had heard that on our project, we had arranged for representatives from each organizational
    unit to work out of the same room. For several months, instead of reporting to
    their offices or cubicles every day, this group sat down together in a large conference
    room with their laptops. This was a war room, not a meeting. Over time, the conference
    room looked more like an open plan co-working space.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终确定战略之前，我会分析成功的各种因素，因为我曾看到过组织从成功中学到错误的教训。例如，我曾与一个项目严重滞后的组织合作。团队成员不仅没有对项目的任何一部分设定一个现实的结束日期，他们甚至不知道为什么项目一开始就一直在延误。这是一个需要多个不同组织单位共同合作和共享信息的大型项目。我的咨询团队刚刚结束了一个成功的项目，该项目面临类似的挑战。这个组织听说我们的项目中，我们安排了来自各个组织单位的代表在同一个房间里工作。几个月来，除了每天不再回到他们的办公室或工作区，这些人一起坐在一个大会议室里，带着他们的笔记本电脑。这就是一个战情室，而不是一个会议室。随着时间的推移，这个会议室看起来更像一个开放式的共享工作空间。
- en: The organization with the failing project decided to copy our strategy without
    talking to us or learning much about how this war room worked. A large conference
    room was booked for a month, and representatives from each affected operational
    unit were pulled in and told they had to work in that conference room together.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目失败的组织决定在没有与我们沟通或了解我们如何运作的情况下，复制我们的战略。一个大型会议室被预定了一个月，来自各个受影响的运营单位的代表们被召集进来，并告诉他们必须一起在那个会议室里工作。
- en: The organization didn’t see the same results that we had, and eventually leadership
    representatives reached out and asked us why. Having neglected to research our
    success, they were forced to research their own failure again.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这个组织没有看到我们所取得的相同结果，最终领导层的代表们主动联系了我们，问我们为什么会这样。由于没有研究我们的成功，他们只好再次研究自己的失败。
- en: I understood their frustrations. After all, they had followed our process to
    the letter and gotten different results. Or at least, that’s what the situation
    looked like from their perspective, but when they asked for my thoughts, I noticed
    they had missed one critical component of that war room.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我理解他们的沮丧。毕竟，他们完全按照我们的流程进行操作，却得到了不同的结果。至少从他们的角度来看是这样的，但当他们征求我的意见时，我注意到他们错过了战情室中的一个关键因素。
- en: They put the wrong people in it.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 他们把错误的人放了进去。
- en: Working Groups vs. Committees
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作小组与委员会
- en: Throughout this book, I have suggested structures that involve one small group
    of people advising, planning for, and, at times, delegating work to a larger team.
    These are working groups. It has become popular as of late to use the term *working
    group* instead of the word *committee* because committee just sounds bureaucratic
    to most people. Committees have a reputation for not getting anything done or,
    worse, for building through compromise. A camel, the old expression goes, is a
    horse built by committee.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我提到过一些结构，它们涉及一小群人，为更大的团队提供建议、制定计划，并在某些时候将工作委派出去。这些就是工作小组。近年来，*工作小组*这个词变得流行，取代了*委员会*一词，因为对大多数人来说，委员会听起来有些官僚化。委员会有着什么都做不成的名声，或者更糟糕的是，它们通过妥协来推动工作。就像那句老话说的，骆驼是由委员会设计出来的马。
- en: Working groups do not have this baggage, so people will often say they want
    to start a working group and turn around and start a committee instead—as if simply
    changing the name of a structure somehow makes the structure a more effective
    tool. Worse still, most people can no longer tell the difference between a working
    group and a committee. That was what the leaders had missed when they copied our
    successful strategy. The people in the war room of our project were a working
    group. The people in the war room of the failed project were a committee.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 工作小组没有这些包袱，因此人们经常会说他们想要成立一个工作小组，结果却转而成立了一个委员会——仿佛仅仅改变一个结构的名称就能让这个结构成为更有效的工具。更糟糕的是，大多数人已经无法区分工作小组和委员会的区别。这正是领导者在复制我们成功策略时忽视的地方。我们项目的战情室成员是工作小组，而失败项目的战情室成员则是委员会。
- en: What exactly is the difference?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到底有什么区别呢？
- en: Working groups relax hierarchy to allow people to solve problems across organizational
    units, whereas committees both reflect and reinforce those organizational boundaries
    and hierarchies. Our war room was made up of software engineers and network administrators.
    We brought people who had to work together to implement the project into the same
    room to work next to one another instead of communicating over email, through
    bosses, and scheduling any number of conference calls.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 工作小组放松了等级制度，允许人们跨组织单位解决问题，而委员会则既反映了组织边界，又强化了这些等级制度。我们的战情室由软件工程师和网络管理员组成。我们将需要共同合作实施项目的人聚集在同一个房间里，肩并肩工作，而不是通过电子邮件、上级和无数的电话会议进行沟通。
- en: The failed war room, on the other hand, was made up of executives. Rather than
    bringing together people who are peers but report up to different chains of command,
    this war room just mimicked the existing structure and the existing politics of
    the organization. Worse, the day to day of most of these executives consisted
    almost entirely of meetings. Instead of working shoulder to shoulder with colleagues,
    they used the war room as a place to throw their belongings as they ran in and
    out of other conference rooms to conduct business as usual.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，失败的战情室由高层管理人员组成。这个战情室并没有将报告给不同指挥链的同事聚集在一起，而是仅仅模仿了现有的结构和组织内部的政治。更糟糕的是，大多数这些高管的日常工作几乎完全由会议构成。他们并没有和同事肩并肩地工作，而是将战情室当作一个放置自己物品的地方，在此匆忙进出其他会议室，继续进行日常工作。
- en: Working groups are internally facing; the customers for a working group are
    the members of the working group itself. People join working groups to share their
    knowledge and experience with peers. They are effective because they establish
    a space for cross-organizational collaboration and troubleshooting. People on
    the implementation layer of an organization can bring their challenges to peers
    who have already experienced those challenges and hear their stories or bounce
    ideas off them. Sometimes this results in recommendations for leadership, but
    the primary purpose of a working group is to troubleshoot and evangelize across
    an organization or industry. Working groups are typically initiated and staffed
    by people on the implementation layer of the organization.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 工作小组是面向内部的；工作小组的客户是工作小组的成员。人们加入工作小组是为了与同侪分享自己的知识和经验。工作小组之所以有效，是因为它为跨组织合作和问题解决提供了空间。组织中的执行层人员可以向那些已经经历过类似挑战的同行提出自己的问题，并听取他们的经验或与他们交换想法。有时这会导致对领导层的建议，但工作小组的主要目的是解决问题并在整个组织或行业中进行宣传。工作小组通常由组织执行层的人员发起和组成。
- en: A committee is formed to advise an audience external to the committee itself,
    typically someone in senior leadership. Whereas the working group is open to those
    who consider themselves operating in the same space as the working group’s topic
    area, committees are selected by the entity they will be advising and typically
    closed off to everyone else. That external authority decides the committee’s scope
    and goals. The committee reports up to that external authority and exists solely
    for its benefit.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 委员会的成立是为了为委员会外部的听众提供建议，通常是为高级领导提供建议。而工作小组则向那些认为自己与工作小组主题领域相关的人开放，委员会由它们所服务的实体选定，通常对其他人封闭。这个外部权威决定了委员会的范围和目标。委员会向外部权威报告，并且仅为其利益存在。
- en: Committees also tend to have a lot of procedure around them, but the absence
    of chairpeople and *Robert’s Rules of Order* does not make a committee a working
    group.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 委员会通常会有很多程序性规定，但没有主席和*罗伯特议事规则*，并不意味着委员会就是一个工作小组。
- en: The model can have a fair amount of variation. A Code Yellow team, for example,
    might not be self-selecting, and ignoring its advice might have serious consequences,
    but the point of a Code Yellow team is to reorganize and redistribute resources
    temporarily across an organization. That team ultimately reports up to a leader
    who is closer to a peer than an executive. The important takeaway is working groups
    relax organizational boundaries while committees reinforce them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式可能会有很大的变化。例如，黄色警戒小组可能不是自我选择的，忽视其建议可能会带来严重后果，但黄色警戒小组的目的是暂时重新组织和重新分配资源。这个小组最终向一个更接近同级别而非高层的领导汇报。重要的结论是，工作小组放松了组织边界，而委员会则强化了这些边界。
- en: There is little value in having senior managers represent their units in a war
    room. Since they are not implementing the technology themselves, they cannot speak
    to what compromises would unblock the project without going back to their own
    engineers. Our war room was successful because it shortened the distance those
    conversations had to travel. The failed war room added a game of telephone on
    top of the existing barriers to communication. One could never be sure that the
    message coming out of that war room was accurate or if the manager representing
    you had misunderstood an implementation detail.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 高级管理人员在战情室里代表他们的部门，几乎没有什么价值。由于他们并没有直接实施技术，他们无法在没有回去向自己团队的工程师请教的情况下，说明哪些妥协措施能够推动项目进展。我们的战情室之所以成功，是因为它缩短了这些对话所需的时间距离。失败的战情室则在现有的沟通障碍上又增加了一层“电话游戏”。人们永远无法确信，战情室传递出的信息是否准确，或者代表你的经理是否误解了某个实现细节。
- en: 'Funny story: I would, from time to time, run war rooms filled with senior executives.
    It was a tactic I resorted to when the organization was in such a state of panic
    that senior leadership members were micromanaging their teams. Software engineers
    can’t fix problems if they spend all their time in meetings giving their managers
    updates about the problems. The boot has to be moved off their necks.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有个有趣的故事：我曾不时地组织一些由高级管理人员组成的战情室。每当组织处于一种极度恐慌的状态，高层领导们开始对自己的团队进行微观管理时，我就会采取这种策略。如果软件工程师将所有时间都花在开会向经理汇报问题，他们是无法解决问题的。必须把“靴子”从他们的脖子上拿下来。
- en: 'In that situation, my team would typically run two war rooms: one where the
    engineers were solving problems together and one outfitted with lots of fancy
    dashboards where I was babysitting the senior executives. The most valuable skill
    a leader can have is knowing when to get out of the way.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种情况下，我的团队通常会组织两个战情室：一个让工程师们一起解决问题，另一个则配备了大量的华丽仪表盘，用来让我照看高级管理人员。一个领导者最有价值的技能，就是知道何时需要退出，让团队自主运作。
- en: Success Is Not Obvious If Undefined
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成功如果没有定义，是不明显的
- en: Modernization projects without a clear definition of what success looks like
    will find themselves with a finish line that only moves further back the closer
    they get to it. Don’t assume that success is obvious. Different members of your
    team may have different and competing visions of what better looks like. Everyone
    needs to be able to explain how they know that their efforts are moving the project
    forward for people to be able to work together. Projects that need something as
    extreme as a legacy modernization effort have no shortage of problems to solve.
    By defining success, you keep the finish line from moving.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现代化项目没有清晰的成功定义，它们会发现自己在接近终点时，终点反而越来越远。不要认为成功是显而易见的。你团队的不同成员可能对“更好”有不同且相互竞争的看法。每个人都需要能够解释他们是如何知道自己的努力正在推动项目向前发展的，这样大家才能合作。需要像遗留系统现代化这种极端努力的项目，解决问题的需求永远不会短缺。通过定义成功，你能够防止终点线不断移动。
- en: In the next chapter, I will explain how to maintain software on a day-to-day
    basis to avoid having to run legacy modernizations in the first place. The finish
    line of a modernization effort need not be that everything is fixed and the technology
    is now perfect. I have yet to encounter a system that could be described that
    way, and I have worked for organizations as young as six months and as old as
    200 years. All technology is imperfect, so the goal of legacy modernization should
    not be restoring mythical perfection but bringing the system to a state where
    it is possible to maintain modern best practices around security, stability, and
    availability.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将解释如何在日常维护中保持软件，以避免首先需要进行遗留系统现代化的情况。现代化工作的终点不一定是所有问题都解决，技术也达到完美。我至今还没有遇到过可以用这种方式描述的系统，我曾为从成立六个月到已经存在200年的组织工作过。所有技术都是不完美的，因此遗留系统现代化的目标不应是恢复神话般的完美，而是将系统带入一个可以围绕安全性、稳定性和可用性保持现代最佳实践的状态。
