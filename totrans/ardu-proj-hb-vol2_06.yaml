- en: '**Security**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**20'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ultrasonic Soaker**
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll use an ultrasonic sensor to trigger a toy water pistol.
    You could set this up to soak unsuspecting victims when they venture into forbidden
    territory!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0168-01.jpg)![Image](../images/p0169-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HC-SR04 ultrasonic sensor**'
  prefs: []
  type: TYPE_NORMAL
- en: '**WLtoys V959-18 Water Jet Pistol**'
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARY REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**NewPing**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For our soaker, we’ll use the WLtoys V959-18 Water Jet Pistol ([Figure 20-1](ch20.xhtml#ch20fig1))
    attachment for RC helicopters, which is inexpensive and widely available online.
    The pistol has a small reservoir to hold water and a mini-pump that shoots the
    water through a nozzle at the front. The pistol has only two wires: red is positive
    power and white is ground. It requires only a little current, which lets us trigger
    the pump using the current supplied by the Arduino.'
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 20-1:** The WLtoys V959-18 Water Jet Pistol'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f20-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember that water and electricity do not mix well, so try to keep your Arduino
    away from the water jet to minimize the chance of water short-circuiting your*
    *Arduino board.*'
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed in Project 13, the ultrasonic sensor sends out a burst of ultrasound
    and listens for the echo that bounces off an object to determine its distance.
    Here, the ultrasonic sensor looks for a bounceback that indicates an object is
    less than 15 centimeters away, in which case the Arduino sends power to the soaker
    to squirt water on our victims.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add the ultrasonic sensor module ([Figure 20-2](ch20.xhtml#ch20fig2)) to your
    breadboard and connect VCC to +5V, Trig to Arduino pin 12, Echo to Arduino pin
    13, and GND to GND, as shown in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **ULTRASONIC SENSOR** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Trig | Pin 12 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Echo | Pin 13 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 20-2:** The ultrasonic sensor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f20-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the pistol’s red power wire to Arduino pin 3 and its white wire to Arduino
    GND via the breadboard power rail. Connect the power rails of the breadboard to
    Arduino power. The pistol comes with a small pipette to help you fill the reservoir.
    [Figure 20-3](ch20.xhtml#ch20fig3) shows where to fill the reservoir.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-3:** Use the pipette provided to fill the reservoir shown with
    water through the opening at the top.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f20-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Once you’ve confirmed that your setup matches the circuit diagram in [Figure
    20-4](ch20.xhtml#ch20fig4), upload the code in “[The Sketch](ch20.xhtml#ch00lev1sec84)”
    on [page 172](ch20.xhtml#page_172) to your Arduino, making sure to add the NewPing
    library to the Arduino IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 20-4:** The circuit diagram for the ultrasonic soaker'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f20-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before entering the sketch, download the NewPing library from *[http://www.nostarch.com/arduinohandbook2/](http://www.nostarch.com/arduinohandbook2/)*.
    The sketch calls on the NewPing library and defines the Arduino pin connections.
    Arduino pin 12 is connected to the sensor’s trigger pin and sends out an ultrasonic
    signal, and Arduino pin 13, connected to the sensor’s Echo pin, receives the returning
    signal. The Arduino converts the time between sending and receiving the signal
    into distance. The soaker is attached to Arduino pin 3, and a loop checks the
    distance to the detected object. If the distance is less than 15 centimeters,
    power is sent to pin 3 and the soaker shoots water at your unsuspecting friends!
  prefs: []
  type: TYPE_NORMAL
- en: '#include <NewPing.h>   // This calls the NewPing library'
  prefs: []
  type: TYPE_NORMAL
- en: '#define trigPin 12     // Trig pin attached to Arduino 12'
  prefs: []
  type: TYPE_NORMAL
- en: '#define echoPin 13     // Echo pin attached to Arduino 13'
  prefs: []
  type: TYPE_NORMAL
- en: '#define soakerPin 3'
  prefs: []
  type: TYPE_NORMAL
- en: '#define MAX_DISTANCE 500'
  prefs: []
  type: TYPE_NORMAL
- en: NewPing sonar(trigPin, echoPin, MAX_DISTANCE);
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  prefs: []
  type: TYPE_NORMAL
- en: Serial.begin(9600);
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(soakerPin, OUTPUT);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: void loop() {
  prefs: []
  type: TYPE_NORMAL
- en: int distance;
  prefs: []
  type: TYPE_NORMAL
- en: distance = sonar.ping_cm();
  prefs: []
  type: TYPE_NORMAL
- en: Serial.print(distance);
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println(" cm");
  prefs: []
  type: TYPE_NORMAL
- en: if (distance <= 15) { // If distance is less than 15
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(soakerPin, HIGH); // Soaker shoots water
  prefs: []
  type: TYPE_NORMAL
- en: delay(250);
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(soakerPin, LOW);  // Short pulse of water
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else {
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(soakerPin, LOW);  // Soaker will remain off
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: delay(500);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The ultrasonic soaker does not shoot.*'
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure the connections match the setup for the ultrasonic sensor by rechecking
    this chapter’s tables and the circuit diagram in [Figure 20-4](ch20.xhtml#ch20fig4).
  prefs: []
  type: TYPE_NORMAL
- en: • Remember that the water will shoot only when the sensor detects someone or
    something in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure you have added power to the breadboard power rails.
  prefs: []
  type: TYPE_NORMAL
- en: • Check that the water jet is working correctly by disconnecting it from the
    circuit and then connecting the wires to +5V and GND on the Arduino directly.
    You should hear the buzz of the pump motor; if you don’t, your component may be
    faulty.
  prefs: []
  type: TYPE_NORMAL
- en: '**21'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fingerprint Scanner**
  prefs: []
  type: TYPE_NORMAL
- en: In this project we’ll use a fingerprint sensor, a servomotor, and some LEDs
    to create a cool biometric entry system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/p0174-01.jpg)![Image](../images/p0175-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Arduino board**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Breadboard**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jumper wires**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Red LED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Green LED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**2 220-ohm resistors**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tower Pro SG90 9g servomotor**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optical fingerprint sensor (ZFM-20 Series)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**LIBRARIES REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adafruit_Fingerprint**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Servo**'
  prefs: []
  type: TYPE_NORMAL
- en: '**SoftwareSerial**'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*The software we’re using in this project operates only on Windows.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**HOW IT WORKS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Biometric identification is used to identify a person from a specific biological
    characteristic that remains the same even over a long period of time, such as
    a fingerprint or iris pattern. Since fingerprints are unique to each person, they’re
    often used to help identify individuals for purposes like criminal investigations
    and security authentication. In this project, we’ll use a fingerprint sensor to
    read a fingerprint and, if it matches a print on record with the right security
    clearance, allow access by moving a servomotor.
  prefs: []
  type: TYPE_NORMAL
- en: The sensor we’ll use is the ZFM-20 Series Fingerprint Identification Module
    (see [Figure 21-1](ch21.xhtml#ch21fig1)) but will generally be referred to as
    an *optical fingerprint sensor module*. The sensor takes a photograph of a fingerprint,
    adds it to the module’s database, and then checks the scanned fingerprint for
    a match. It can hold up to 162 fingerprints. The sensor is available online and
    from retailers such as Adafruit, which has also created a specific Arduino library
    for the module that we’ll use in the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 21-1:** The ZFM-20 Series Fingerprint Identification Module is an
    optical fingerprint sensor.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/f21-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PREPARING THE FINGERPRINT SENSOR**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use the sensor, we must first get the SFG Demo software, available to download
    from *[http://www.adafruit.com/datasheets/SFGDemoV2.0.rar](http://www.adafruit.com/datasheets/SFGDemoV2.0.rar)*.
    The SFG Demo software is a simple, free program that connects your PC to the Fingerprint
    ID module via an Arduino so you can control it, add or delete fingerprints, and
    assign an ID for each one.
  prefs: []
  type: TYPE_NORMAL
- en: Download the *SFGDemoV2.0.rar* file and unzip to a destination of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have unzipped the *.rar* file, double-click the *SFGDemo.exe* file
    to run the program, and you’ll see the screen shown in [Figure 21-2](ch21.xhtml#ch21fig2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-2:** The SFGDemo control screen'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now you need to connect the fingerprint sensor module to your PC via the Arduino.
    The connections for the module to Arduino are shown in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **FINGERPRINT SENSOR** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND (black wire) | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| RX (white wire) | Pin 0 (RX) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TX (green wire) | Pin 1 (TX) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| +5V (red wire) | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: You’ll be using the Arduino as a bypass to connect the fingerprint scanner to
    your PC via the USB cable, so you need to load a blank sketch to get the Arduino
    to connect to the PC without carrying out a function. The easiest way to do this
    is to open the latest version of the Arduino IDE and upload the default sketch,
    shown next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: void setup() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '// put your setup code here, to run once:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: void loop() {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '// put your main code here, to run repeatedly:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, connect the Arduino to your PC and in the SFGDemo program, select the
    **Open Device** button. From the **Com Port** drop-down menu that opens, choose
    the port your Arduino is connected to and click **OK**. You’ll see a message indicating
    that your module is connected and recognized, as shown in [Figure 21-3](ch21.xhtml#ch21fig3).
    Here my module is connected to the Arduino through com port 4, but you might need
    to use a different port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-3:** When the device is connected correctly, the program shows
    the message “Open Device Success!”'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Next, you’ll add a fingerprint to the database. Click **Enroll** on the SFGDemo
    control screen. When you see the message “Waiting for fingerprint,” press a finger
    firmly against the fingerprint sensor module window and wait a few seconds. When
    the print is registered, you’ll see the message “Success!” (as shown in [Figure
    21-4](ch21.xhtml#ch21fig4)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-4:** The module has successfully captured a fingerprint and shows
    a preview of the print in the top-left window.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now you’ll test whether the module recognizes the fingerprint you just recorded.
    Click the **Match** button on the SFGDemo control screen. When prompted, press
    your finger against the window firmly for a few seconds. If the demo finds a match,
    you’ll see the “Pass!” message shown in [Figure 21-5](ch21.xhtml#ch21fig5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-5:** The fingerprint matches and a “Pass!” message displays in
    the information panel of the SFGDemo control panel.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now you need to check that the module recognizes your fingerprint when it’s
    attached to the Arduino and not the PC. Close the SFGDemo program and, from the
    resources you downloaded from *[https://www.nostarch.com/arduinohandbook2/](https://www.nostarch.com/arduinohandbook2/)*,
    add the Adafruit Fingerprint Sensor library to your IDE. If you need a refresher
    on adding libraries, check out the library section at the start of this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you’ve added the Adafruit Fingerprint Sensor library, open the IDE and
    select **Files** ▸ **Examples** ▸ **Adafruit-fingerprint-sensor-master** ▸ **Fingerprint**
    to choose the library fingerprint sketch shown in [Figure 21-6](ch21.xhtml#ch21fig6).
    Upload this sketch to your Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-6:** The fingerprint demo sketch from the Adafruit Fingerprint
    Sensor library'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Your sensor may come with six wires, two of which aren’t necessary for the
    demo.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you’ve uploaded the fingerprint sketch to your Arduino, disconnect from
    the PC. You now need to change your module/ Arduino pin setup. Instead of connecting
    the module to the TX and RX pins, change these connections to pins 2 and 3 on
    the Arduino, respectively, as shown in the following table. This keeps the TX
    and RX serial communication free to use the Arduino IDE Serial Monitor in the
    next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|  **FINGERPRINT SENSOR**  | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND (black wire) | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TX (green wire) | Pin 2 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| RX (white wire) | Pin 3 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| +5V (red wire) | +5V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Now, reconnect your Arduino to the PC and open the Arduino IDE. Open the Serial
    Monitor of the IDE. When you press your finger to the module window, you should
    see something like [Figure 21-7](ch21.xhtml#ch21fig7).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-7:** The module processes are displayed in the Arduino IDE serial
    screen.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE BUILD**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know the module is working as expected, you’ll use what you’ve
    learned to create the fingerprint entry system.
  prefs: []
  type: TYPE_NORMAL
- en: The fingerprint module should now be connected to the Arduino, but if you’re
    starting at this point, follow the connections given in step 10 before proceeding.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the servomotor to the GND and +5V power rails on the breadboard and
    connect the signal pin to Arduino pin 9, as shown in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **SERVO** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Signal (yellow wire) | Pin 9 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Positive power (red wire) | Breadboard +5V rail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative power (black wire) | Breadboard GND rail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Insert the LEDs into the breadboard so that the shorter, negative leg is connected
    to the GND power rail of the breadboard and the positive, longer leg is connected
    to Arduino pins 7 and 8 via a 220-ohm resistor, as shown in the following table.
    The resistors should straddle the center of the breadboard, as shown in [Figure
    21-8](ch21.xhtml#ch21fig8).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **LEDS** | **ARDUINO** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Green LED (positive, longer leg) | Pin 7 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Red LED (positive, longer leg) | Pin 8 via 220-ohm resistor |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Negative power of both LEDs (shorter leg) | Breadboard GND rail |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**FIGURE 21-8:** The LEDs are connected to the Arduino pins via 220-ohm resistors.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the power rails of the breadboard to +5V and GND on the Arduino, and
    then check that your circuit matches [Figure 21-9](ch21.xhtml#ch21fig9).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the code in “[The Sketch](ch21.xhtml#ch00lev1sec89)” on [page 183](ch21.xhtml#page_183).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 21-9:** The circuit diagram for the fingerprint scanner'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Image](../images/f21-09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**THE SKETCH**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sketch first calls on the Servo, SoftwareSerial, and Adafruit_ Fingerprint
    libraries. The LED and servo pins are defined as 7, 8, and 9, respectively, and
    pins 2 and 3 are defined for serial connection to the fingerprint sensor module.
    The fingerprint library handles the functionality of the module, and the sketch
    has a series of steps to read and store a fingerprint.
  prefs: []
  type: TYPE_NORMAL
- en: The sensor automatically scans every 5 seconds and reads the fingerprint when
    it is pressed to the window. If the fingerprint matches one in the module memory
    (which we stored earlier in the project), the red LED will turn off, the green
    LED will light, and the servomotor will turn 180 degrees. This state will continue
    for 5 seconds, and the setup will reset and wait for another valid entry.
  prefs: []
  type: TYPE_NORMAL
- en: // Fingerprint Sensor Library reproduced with kind permission
  prefs: []
  type: TYPE_NORMAL
- en: // from Adafruit Industries
  prefs: []
  type: TYPE_NORMAL
- en: /***************************************************
  prefs: []
  type: TYPE_NORMAL
- en: This is an example sketch for our optical Fingerprint sensor
  prefs: []
  type: TYPE_NORMAL
- en: Designed specifically to work with the Adafruit BMP085 Breakout
  prefs: []
  type: TYPE_NORMAL
- en: '----> [http://www.adafruit.com/products/751](http://www.adafruit.com/products/751)'
  prefs: []
  type: TYPE_NORMAL
- en: These displays use TTL Serial to communicate, 2 pins are required to
  prefs: []
  type: TYPE_NORMAL
- en: interface
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit invests time and resources providing this open source code,
  prefs: []
  type: TYPE_NORMAL
- en: please support Adafruit and open-source hardware by purchasing
  prefs: []
  type: TYPE_NORMAL
- en: products from Adafruit!
  prefs: []
  type: TYPE_NORMAL
- en: Written by Limor Fried/Ladyada for Adafruit Industries.
  prefs: []
  type: TYPE_NORMAL
- en: BSD license, all text above must be included in any redistribution
  prefs: []
  type: TYPE_NORMAL
- en: '****************************************************/'
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Servo.h>'
  prefs: []
  type: TYPE_NORMAL
- en: '#include <Adafruit_Fingerprint.h>'
  prefs: []
  type: TYPE_NORMAL
- en: '#if ARDUINO >= 100'
  prefs: []
  type: TYPE_NORMAL
- en: '#include <SoftwareSerial.h>'
  prefs: []
  type: TYPE_NORMAL
- en: '#else'
  prefs: []
  type: TYPE_NORMAL
- en: '#include <NewSoftSerial.h>'
  prefs: []
  type: TYPE_NORMAL
- en: '#endif'
  prefs: []
  type: TYPE_NORMAL
- en: int getFingerprintIDez();
  prefs: []
  type: TYPE_NORMAL
- en: int ledaccess = 7; // Green LED pin
  prefs: []
  type: TYPE_NORMAL
- en: int leddeny = 8; // Red LED pin
  prefs: []
  type: TYPE_NORMAL
- en: int servoPin = 9; // Servo pin
  prefs: []
  type: TYPE_NORMAL
- en: Servo doorLock;
  prefs: []
  type: TYPE_NORMAL
- en: '// Pin #2 is IN from sensor (GREEN wire)'
  prefs: []
  type: TYPE_NORMAL
- en: '// Pin #3 is OUT from arduino (WHITE wire)'
  prefs: []
  type: TYPE_NORMAL
- en: '#if ARDUINO >= 100'
  prefs: []
  type: TYPE_NORMAL
- en: SoftwareSerial mySerial(2, 3); // Pins for the fingerprint sensor
  prefs: []
  type: TYPE_NORMAL
- en: '#else'
  prefs: []
  type: TYPE_NORMAL
- en: NewSoftSerial mySerial(2, 3);
  prefs: []
  type: TYPE_NORMAL
- en: '#endif'
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit_Fingerprint finger = Adafruit_Fingerprint(&mySerial);
  prefs: []
  type: TYPE_NORMAL
- en: void setup() {
  prefs: []
  type: TYPE_NORMAL
- en: doorLock.attach(servoPin); // We define the servo pin
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(ledaccess, OUTPUT); // Green LED pin set as an ouput
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(leddeny, OUTPUT); // Red LED pin set as an output
  prefs: []
  type: TYPE_NORMAL
- en: pinMode(servoPin, OUTPUT); // Servo pin set as an output
  prefs: []
  type: TYPE_NORMAL
- en: Serial.begin(9600); // Start sending messages to the Serial Monitor
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("fingertest");
  prefs: []
  type: TYPE_NORMAL
- en: finger.begin(57600); // Set data rate for the sensor serial port
  prefs: []
  type: TYPE_NORMAL
- en: // Start the module and checking for fingerprint
  prefs: []
  type: TYPE_NORMAL
- en: if (finger.verifyPassword()) {
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Found fingerprint sensor!");
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Did not find fingerprint sensor :(");
  prefs: []
  type: TYPE_NORMAL
- en: while (1);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Waiting for valid finger...");
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: void loop() {
  prefs: []
  type: TYPE_NORMAL
- en: int ID = getFingerprintIDez(); // Get the fingerprint ID#
  prefs: []
  type: TYPE_NORMAL
- en: // Reset the device to the test state
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledaccess, HIGH);
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(leddeny, HIGH);
  prefs: []
  type: TYPE_NORMAL
- en: doorLock.write(0);
  prefs: []
  type: TYPE_NORMAL
- en: if (ID >= 0) { // Valid ID. Unlocked state
  prefs: []
  type: TYPE_NORMAL
- en: // Enable the access LED, turn off the deny LED
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledaccess, HIGH);
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(leddeny, LOW);
  prefs: []
  type: TYPE_NORMAL
- en: // Unlock the servo
  prefs: []
  type: TYPE_NORMAL
- en: doorLock.write(180);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: else if (ID == -3) { // ID doesn't match any registed print
  prefs: []
  type: TYPE_NORMAL
- en: // Locked state
  prefs: []
  type: TYPE_NORMAL
- en: // Enable the deny LED, turn off the access LED
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(ledaccess, LOW);
  prefs: []
  type: TYPE_NORMAL
- en: digitalWrite(leddeny, HIGH);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: delay(5000);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: uint8_t getFingerprintID() {
  prefs: []
  type: TYPE_NORMAL
- en: uint8_t p = finger.getImage();
  prefs: []
  type: TYPE_NORMAL
- en: switch (p) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_OK: // Sensor takes a photo when a finger is'
  prefs: []
  type: TYPE_NORMAL
- en: // placed on the module window
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Image taken");
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_NOFINGER:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("No finger detected");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_PACKETRECIEVEERR:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Communication error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_IMAGEFAIL:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Imaging error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Unknown error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: p = finger.image2Tz(); // OK success! We have a fingerprint and
  prefs: []
  type: TYPE_NORMAL
- en: // now check that it can be read
  prefs: []
  type: TYPE_NORMAL
- en: switch (p) {
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_OK:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Image converted");
  prefs: []
  type: TYPE_NORMAL
- en: break;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_IMAGEMESS:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Image too messy");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_PACKETRECIEVEERR:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Communication error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_FEATUREFAIL:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Could not find fingerprint features");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'case FINGERPRINT_INVALIDIMAGE:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Could not find fingerprint features");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: 'default:'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Unknown error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: p = finger.fingerFastSearch(); // OK converted! It's valid, so
  prefs: []
  type: TYPE_NORMAL
- en: // check it against module memory
  prefs: []
  type: TYPE_NORMAL
- en: if (p == FINGERPRINT_OK) {
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Found a print match!");
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (p == FINGERPRINT_PACKETRECIEVEERR) {'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Communication error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: '} else if (p == FINGERPRINT_NOTFOUND) {'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Did not find a match"); // No match found,
  prefs: []
  type: TYPE_NORMAL
- en: // back to the start
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: '} else {'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("Unknown error");
  prefs: []
  type: TYPE_NORMAL
- en: return p;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// We found a match! So the following will run:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Serial.print("Found ID #"); Serial.print(finger.fingerID);'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.print(" with confidence of "); Serial.println(finger.confidence);
  prefs: []
  type: TYPE_NORMAL
- en: return finger.fingerID;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '// Returns -1 if failed, otherwise returns ID #'
  prefs: []
  type: TYPE_NORMAL
- en: int getFingerprintIDez() {
  prefs: []
  type: TYPE_NORMAL
- en: int p = finger.getImage();
  prefs: []
  type: TYPE_NORMAL
- en: if (p != FINGERPRINT_OK) return -1;
  prefs: []
  type: TYPE_NORMAL
- en: p = finger.image2Tz();
  prefs: []
  type: TYPE_NORMAL
- en: if (p != FINGERPRINT_OK) return -2;
  prefs: []
  type: TYPE_NORMAL
- en: p = finger.fingerFastSearch();
  prefs: []
  type: TYPE_NORMAL
- en: if (p != FINGERPRINT_OK) ; {
  prefs: []
  type: TYPE_NORMAL
- en: Serial.println("No match found");
  prefs: []
  type: TYPE_NORMAL
- en: return -3;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Found a match!
  prefs: []
  type: TYPE_NORMAL
- en: 'Serial.print("Found ID #"); Serial.print(finger.fingerID);'
  prefs: []
  type: TYPE_NORMAL
- en: Serial.print(" with confidence of "); Serial.println(finger.confidence);
  prefs: []
  type: TYPE_NORMAL
- en: return finger.fingerID;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '**TROUBLESHOOTING**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Q.** *The code compiles, but the fingerprint sensor does not light up or
    function.*'
  prefs: []
  type: TYPE_NORMAL
- en: • Make sure that your wiring matches the tables on [page 181](ch21.xhtml#page_181)
    and [page 182](ch21.xhtml#page_182). This code will work only with the fingerprint
    sensor I’ve used in this project.
  prefs: []
  type: TYPE_NORMAL
- en: '• If your sensor has six wires instead of the expected four and the wire colors
    don’t match as described, it is the first four pins you need: GND, TX, RX, and
    +5V. The other two connections are not used in this project, so you can remove
    these wires.'
  prefs: []
  type: TYPE_NORMAL
- en: • If your module still does not light up, check the data sheet for the actual
    pin configuration and reconnect the wires according to that.
  prefs: []
  type: TYPE_NORMAL
- en: • Remember you need to set up the module first and test it as described in “[Preparing
    the Fingerprint Sensor](ch21.xhtml#ch00lev1sec87)” on [page 176](ch21.xhtml#page_176).
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *The LEDs do not light up as expected.*'
  prefs: []
  type: TYPE_NORMAL
- en: • Ensure the LEDs are firmly inserted into the breadboard and the resistors
    line up with the connections to the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: • Remember to connect power to the breadboard rails.
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** *The servomotor does not move as expected.*'
  prefs: []
  type: TYPE_NORMAL
- en: • Double-check that the wiring matches the servo connections shown in [Figure
    21-9](ch21.xhtml#ch21fig9).
  prefs: []
  type: TYPE_NORMAL
- en: • The module, servo, and LEDs combined draw a fair amount of power from your
    battery pack, and while the Arduino can still function at a lower voltage, the
    servomotor cannot. Change to fresh batteries.
  prefs: []
  type: TYPE_NORMAL
