["```\n❶ sage: p = random_prime(2^32); p\n   1103222539\n❷ sage: q = random_prime(2^32); q\n   17870599\n❸ sage: n = p*q; n\n   19715247602230861‬\n❹ sage: phi = (p-1)*(q-1); phi\n   36567230045260644\n❺ sage: e = random_prime(phi); e\n   13771927877214701\n❻ sage: d = xgcd(e, phi)[1]; d\n   15417970063428857\n❼ sage: mod(d*e, phi)\n   1\n```", "```\n❶ sage: x = 1234567\n❷ sage: y = power_mod(x, e, n); y\n  19048323055755904\n❸ sage: power_mod(y, d, n)\n  1234567\n```", "```\nfunc EncryptOAEP(hash hash.Hash, random io.Reader, pub *PublicKey, msg []byte,\nlabel []byte) (out []byte, err error)\n```", "```\nfunc encrypt(c *big.Int, pub *PublicKey, m *big.Int) *big.Int {\n    e := big.NewInt(int64(pub.E))\n    c.Exp(m, e, pub.N)\n    return c\n  }\n```", "```\nexpModNaive(x, e, n) {\n    y = x\n    for i = 1 to e – 1 {\n        y = y * x  mod n\n    }\n    return y\n}\n```", "```\nexpMod(x, e, n) {\n    y = x\n    for i = m – 1 to 0 {\n        y = y * y  mod n\n        if ei == 1 then\n            y = y * x  mod n\n    }\n    return y\n}\n```", "```\n$ openssl speed rsa512 rsa1024 rsa2048 rsa4096\nDoing 512 bit private rsa's for 10s: 161476 512 bit private RSA's in 9.59s\nDoing 512 bit public rsa's for 10s: 1875805 512 bit public RSA's in 9.68s\nDoing 1024 bit private rsa's for 10s: 51500 1024 bit private RSA's in 8.97s\nDoing 1024 bit public rsa's for 10s: 715835 1024 bit public RSA's in 8.45s\nDoing 2048 bit private rsa's for 10s: 13111 2048 bit private RSA's in 9.65s\nDoing 2048 bit public rsa's for 10s: 288772 2048 bit public RSA's in 9.68s\nDoing 4096 bit private rsa's for 10s: 1273 4096 bit private RSA's in 9.71s\nDoing 4096 bit public rsa's for 10s: 63987 4096 bit public RSA's in 8.50s\nOpenSSL 1.0.2g  1 Mar 2016\n--snip--\n                  sign    verify    sign/s verify/s\nrsa  512 bits 0.000059s 0.000005s  16838.0 193781.5\nrsa 1024 bits 0.000174s 0.000012s   5741.4  84714.2\nrsa 2048 bits 0.000736s 0.000034s   1358.7  29831.8\nrsa 4096 bits 0.007628s 0.000133s    131.1   7527.9\n```", "```\n  from math import gcd\n\n  n = 36567232109354321\n  e = 13771927877214701\n  d = 15417970063428857\n\n❶ kphi = d*e - 1\n   t = kphi\n\n❷ while t % 2 == 0:\n      t = divmod(t, 2)[0]\n\n❸ a = 2\n  while a < 100:\n   ❹ k = t\n      while k < kphi:\n          x = pow(a, k, n)\n       ❺ if x ! = 1 and x ! = (n - 1) and pow(x, 2, n) == 1:\n           ❻ p = gcd(x - 1, n)\n              break\n          k = k*2\n      a = a + 2\n\n  q = n//p\n❼ assert (p*q) == n\n  print('p = ', p)\n  print('q = ', q)\n```", "```\np = 2046223079\nq = 17870599\n```"]