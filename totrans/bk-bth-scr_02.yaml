- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 1 BATCH
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 批处理
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: If you are reading this book (and I’m pretty sure that you are), you are looking
    to write some Batch code. By the end of this chapter, you will have done just
    that, coding and executing what may be your very first bat file.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这本书（我敢肯定你正在阅读），你是想编写一些批处理代码。在本章结束时，你将实现这一目标，编写并执行你可能的第一个 bat 文件。
- en: 'Along the way, I will introduce the Batch scripting language and its origins
    in the MS-DOS command prompt, along with the two types of files that contain its
    source code: the bat and cmd. I’ll also discuss editors, which are the primary
    tools for writing a bat file, and the options available to you. Finally, no introduction
    to the Batch universe would be complete without an overview of the interpreter.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我将介绍批处理脚本语言及其起源于 MS-DOS 命令提示符，以及包含其源代码的两种文件类型：bat 和 cmd。我还将讨论编辑器，它们是编写
    bat 文件的主要工具，以及你可以使用的选项。最后，没有对批处理世界的介绍，就不能算完整，必须提及解释器的概况。
- en: The MS-DOS Command Prompt
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MS-DOS 命令提示符
- en: The MS-DOS (Microsoft Disk Operating System) command prompt lives on every computer
    loaded with Microsoft Windows. If you are of a certain age—that is, if you were
    around for the infancy of personal computers—you might remember that black rectangle
    (or an entire screen if you go back to the pre-Windows era) where you entered
    commands to perform various tasks such as installing or launching programs, or
    copying or deleting files. The average user rarely if ever deals with this anymore
    because graphical user interfaces have streamlined those tasks so that they can
    be performed in a few clicks, but it still exists.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: MS-DOS（微软磁盘操作系统）命令提示符存在于每台安装了 Microsoft Windows 的计算机上。如果你年纪稍大一点——也就是，如果你见证过个人计算机的初期发展——你可能还记得那个黑色的矩形框（或者如果你回到
    Windows 之前的时代，可能是整个屏幕），你在其中输入命令来执行各种任务，比如安装或启动程序，复制或删除文件。如今，普通用户几乎不再接触它了，因为图形用户界面将这些任务简化到几次点击就能完成，但它依然存在。
- en: To access the command prompt on your Windows computer, go to **Start** and enter
    **CMD**, which is short for *command*, in the search box. Hit ENTER, and the MS-DOS
    command prompt will open. From this prompt you can enter a number of commands.
    You can execute programs, copy files, or even delete your entire *C:\* drive.
    Don’t panic, though; you would have to know the command for that. I won’t get
    into all the possible commands here because that’s what this entire book is about,
    and even it isn’t exhaustive, but let’s look at one example. Say you’re working
    on a project with several documents in a folder. After working on those documents
    for a few hours each day, it’s a good idea to back up the files onto another drive.
    To do that, you could enter the single command in [Listing 1-1](#Lis1-1) into
    the command prompt and press ENTER.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问 Windows 计算机上的命令提示符，进入**开始**菜单，在搜索框中输入**CMD**，即*命令*的缩写。按回车，MS-DOS 命令提示符将打开。在这个提示符下，你可以输入多种命令。你可以执行程序、复制文件，甚至删除整个*C:\*驱动器。别担心，不过；你得知道相关命令才能做到这一点。我不会在这里列出所有可能的命令，因为这本书就是讲这个的，甚至它也并非详尽无遗，但我们可以看一个例子。假设你在一个项目中，文件夹里有好几个文档。每天下来，工作几个小时后，备份文件到另一个驱动器是个好主意。为此，你可以将[列表
    1-1](#Lis1-1)中的单个命令输入命令提示符并按回车。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 1-1: The command to back up some files'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-1：备份一些文件的命令
- en: Don’t worry about the syntax yet (wait for [Chapter 7](chapter7.xhtml)). The
    important point is that you can enter this command into the command prompt each
    day to copy all of your files. You might protest that it’s far too easy to mistype
    something in this line, such as one of the two paths or one of those letters following
    the slashes at the end of the line, whatever the heck those are for. Wouldn’t
    it be easier to use Windows, that is, navigate to one folder, select all, right-click,
    select Copy, navigate to the other folder, right-click, select Paste, and click
    to verify the copy? I would agree that this would be easier than typing out the
    command, but notice that the Windows process involves eight discrete steps and
    likely a dozen or more mouse clicks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不用担心语法（等到[第七章](chapter7.xhtml)再说）。重点是，你可以每天在命令提示符中输入这个命令来复制所有文件。你可能会反驳说，这行命令很容易出错，比如路径中的某个部分或者那些斜杠后面的字母，这些字母到底是干什么的呢。难道不应该使用
    Windows，即进入某个文件夹，选择所有文件，右击选择“复制”，然后进入另一个文件夹，右击选择“粘贴”，最后点击确认复制吗？我同意，这种方式比输入命令更简单，但请注意，Windows
    的操作涉及八个独立步骤，并且可能需要十几个鼠标点击。
- en: A third option is easier than both the command prompt method and the click-intensive
    Windows method. That option is to program with the Batch scripting language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法比命令提示符方法和点击密集的 Windows 方法都要简单。这种方法就是使用批处理脚本语言进行编程。
- en: The Batch Scripting Language
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 批处理脚本语言
- en: Batch is an unfortunate handle for any coding language, scripting or otherwise.
    Some popular languages are distinctively named for coffee, gemstones, music notes,
    or British comedy troupes. Even the much-maligned COBOL has an acronym unique
    to itself, and when Pascal is mentioned, the 20th-century coding language usually
    comes to mind before the 17th-century mathematician. At the other extreme of the
    continuum, the term *batch* is banal; even in the context of computer science,
    it’s ambiguous. *Batch processing* is a generic term for the act of running several
    jobs or a large batch of data at once and is quite distinct from the topic of
    this book, Batch scripting.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理对任何编码语言来说都是一个不太合适的名字，无论是脚本语言还是其他语言。一些流行的语言通常以咖啡、宝石、音乐符号或英国喜剧团体的名字命名。即便是被广泛诟病的
    COBOL 也有自己独特的缩写，当提到 Pascal 时，大多数人首先想到的通常是20世纪的编程语言，而非17世纪的数学家。在这个谱系的另一端，“批处理”一词显得平淡无奇；即便在计算机科学的语境中，它也很模糊。*批处理*是指一次性运行多个作业或大量数据的通用术语，与本书的主题——批处理脚本语言截然不同。
- en: Microsoft developed the Batch scripting or coding language in the early 1980s
    for the MS-DOS operating system, and it has been installed on every machine running
    Windows since 1985\. I suspect that somebody at Microsoft who grew tired of typing
    a repetitive series of commands into the command prompt said, “Wouldn’t it be
    great if we could take these commands and batch them together into a single file
    that could then be executed quickly and easily?”
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在1980年代初为 MS-DOS 操作系统开发了批处理脚本或编码语言，并且自1985年以来，这一语言已被安装在每一台运行 Windows 的机器上。我猜想，微软的一位员工在厌倦了不断输入一系列重复命令后，可能会想，“如果我们能把这些命令批量处理成一个单一的文件，然后快速而轻松地执行，那该多好？”
- en: Those *batched* commands represented the genesis of Batch, the coding language.
    Individual commands don’t constitute a language; a language is a framework to
    execute those commands. Batching these commands into a file allowed for branching
    logic, complex loops, and reusable code—the makings of a real language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些*批处理*命令代表了批处理语言的起源。单独的命令并不构成一种语言；语言是执行这些命令的框架。将这些命令批量处理成一个文件使得分支逻辑、复杂循环和可重用代码成为可能——这就是一种真正语言的雏形。
- en: 'Batch has many uses. Its command line origins make it an ideal language for
    computer or system administration: creating, copying, moving, and deleting files.
    Batch can also examine and modify directories and the registry and set up a computer’s
    environment.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 批处理有许多用途。它的命令行起源使它成为计算机或系统管理的理想语言：创建、复制、移动和删除文件。批处理还可以检查和修改目录、注册表，并设置计算机的环境。
- en: A simple bat file can set some variables and execute programs written in many
    other languages. Batch can interact with a user, displaying information and gathering
    data. Files can be read, written, and altered. Rudimentary reports can be created,
    and before long you will see that Batch supports intricate and sophisticated scripts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的批处理文件可以设置一些变量，并执行用许多其他语言编写的程序。批处理可以与用户互动，显示信息并收集数据。文件可以被读取、写入和修改。可以生成基本的报告，久而久之，你会发现批处理能够支持复杂而精密的脚本。
- en: Before personal computers became available, other operating systems had their
    own scripting languages analogous to Batch. Unix shell scripts execute on Unix-based
    operating systems, and JCL, or job control language, is instrumental to the IBM
    mainframe. When introducing Batch to new co-workers familiar with the mainframe,
    I’ll dispense with rigor and describe it as “JCL for the PC.”
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在个人电脑普及之前，其他操作系统也有类似批处理的脚本语言。Unix Shell 脚本在基于 Unix 的操作系统上执行，而 JCL（作业控制语言）对于
    IBM 大型机至关重要。在向熟悉大型机的新同事介绍批处理时，我通常不会太严谨，而是将其描述为“PC 版的 JCL”。
- en: In my experience, knowledge of Batch among coders is broad yet shallow. (An
    image of a large group of coders, laptops in hand, standing in the kiddie pool
    with their pant cuffs rolled up, afraid to enter the adult pool, much less its
    deep end, comes to mind.) Most coders can create a simple Batch application but
    instinctively fall back onto other languages for more complex problems that could
    be more easily handled in Batch.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，程序员对批处理的知识既广泛又浅薄。（我脑海里浮现出一群程序员，手持笔记本电脑，站在儿童游泳池中，裤脚卷起，害怕进入成人池，更不用说它的深水区了。）大多数程序员能够创建一个简单的批处理应用程序，但在面对更复杂的问题时，他们本能地会转而使用其他语言，而这些问题其实可以通过批处理更容易地解决。
- en: Bat Files
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bat 文件
- en: Although the term *batch* is ambiguous, a bat file is known to most coders.
    A batch of commands is entered into a batch file (shortened to bat file). Hence,
    a *bat file* is a file containing Batch source code. (A *batphile*, however, is
    someone with a great enthusiasm for, or even a lover of, nocturnal flying mammals.)
    When a bat file is executed, a series of the commands it contains is performed
    until reaching either a command to terminate its execution or the end of the file.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然“*批处理*”这个术语含糊不清，但大多数程序员都知道什么是 bat 文件。命令批处理被输入到批处理文件中（简称为 bat 文件）。因此，*bat 文件*是包含批处理源代码的文件。（然而，*batphile*是指那些对夜行性飞行哺乳动物有极大热情甚至是爱好的人。）当执行
    bat 文件时，它包含的命令将依次执行，直到遇到终止执行的命令或文件末尾。
- en: Most Windows files have a file extension at the end of the filename after the
    dot. Modern Word documents end in *.docx*. Excel spreadsheets end in *.xlsx*.
    Simple text files often end in *.txt*, and PDF files end in ... well, you have
    the idea. To distinguish a bat file from other files, it must have a *.bat* extension.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Windows 文件在文件名后面都有扩展名。现代的 Word 文档以 *.docx* 结尾。Excel 电子表格以 *.xlsx* 结尾。简单的文本文件通常以
    *.txt* 结尾，PDF 文件则以...嗯，你应该明白了。为了区分 bat 文件与其他文件，它必须具有 *.bat* 扩展名。
- en: By default, file extensions aren’t shown after the filename in Windows, but
    we’ll need them. To show them, look for an option to show filename extensions
    under the **View** menu in Windows Explorer. If it isn’t readily obvious, search
    the web for “show filename extensions” and your operating system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Windows 中文件扩展名不会显示在文件名后面，但我们需要显示它们。要显示扩展名，请在 Windows 资源管理器的 **查看** 菜单下寻找显示文件扩展名的选项。如果不容易找到，可以在网上搜索“显示文件扩展名”以及你的操作系统名称。
- en: Now your files will show their extensions; for instance, your Word documents
    will likely be suffixed with *.docx*. More important, your bat files will be appended
    with *.bat*. Many refer to these as *batch files*, but in the pages ahead I’ll
    refer to them simply as *bat files*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的文件会显示扩展名；例如，你的 Word 文档可能会以 *.docx* 为后缀。更重要的是，你的 bat 文件会以 *.bat* 为后缀。许多人称之为
    *批处理文件*，但在接下来的内容中，我将简单地称它们为 *bat 文件*。
- en: Your First Bat File
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你的第一个 bat 文件
- en: Let’s create a bat file. To start, right-click on the desktop to bring up the
    context menu and select **New** ▶ **Text Document**. Rename the text file to something
    like *SaveProject.bat*. The name can be whatever makes sense to you, but the file
    extension after the filename must be changed from *.txt* to *.bat*. Right-click
    the file, select **Rename**, enter the new name and extension, and press ENTER.
    A pop-up will likely warn you that changing the extension might cause great harm.
    It will not; just select **Yes** to confirm. Right-click the new file on the desktop
    and select **Edit** (not Open; I’ll get to that momentarily). It should open for
    editing in Notepad.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 bat 文件。首先，右键点击桌面以弹出上下文菜单，选择 **新建** ▶ **文本文档**。将文本文件重命名为类似 *SaveProject.bat*
    的名称。文件名可以是你认为合适的任何名称，但文件名后的扩展名必须从 *.txt* 改为 *.bat*。右键点击文件，选择 **重命名**，输入新的名称和扩展名，然后按下
    ENTER 键。弹出的提示可能会警告你更改扩展名可能会造成严重后果。其实不会；只需选择 **是** 确认即可。右键点击桌面上的新文件，选择 **编辑**（不要选择打开，我稍后会解释）。它应该会在记事本中打开供你编辑。
- en: Enter the two lines of text in [Listing 1-2](#Lis1-2) into your bat file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将[清单 1-2](#Lis1-2)中的两行文本输入到你的 bat 文件中。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 1-2: The entire contents of your first bat file'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-2：你第一个 bat 文件的完整内容
- en: 'Change C:\YourPath\ to the folder you want backed up and change D:\YourBackUpPath\
    to the folder to which you want to save everything. (I am assuming that your backup
    device, such as a flash drive, is assigned *D:\* as the drive, but it might be
    something else. If nothing else, just to see this work, you could even define
    a backup path also on the same drive.) Notice that the first line of code in [Listing
    1-2](#Lis1-2) is identical to what we typed into the command prompt in [Listing
    1-1](#Lis1-1), but it is now followed by a second line containing a single word:
    pause.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将 C:\YourPath\ 更改为你想要备份的文件夹，并将 D:\YourBackUpPath\ 更改为你想要保存所有内容的文件夹。（我假设你的备份设备，例如闪存驱动器，被分配为
    *D:\* 盘符，但它可能是其他盘符。如果没有其他方法，至少为了测试这个功能，你可以在同一个驱动器上定义一个备份路径。）请注意，[清单 1-2](#Lis1-2)
    中的第一行代码与我们在 [清单 1-1](#Lis1-1) 中输入到命令提示符的代码完全相同，但现在它后面跟着第二行，包含一个单词：pause。
- en: After investing the effort to put this together, you can reap the benefits.
    Whenever you want to make this backup in the future, simply execute this bat file.
    To do so you have multiple options; one is to double-click its icon on the desktop,
    and another is to right-click the bat file and select **Open**. You might expect
    **Open** to open the file for editing, but it really executes the bat file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在付出努力整理这些内容之后，你可以获得收益。无论何时你想在未来进行备份，只需执行这个 bat 文件。为此，你有多种选择；一种是双击桌面上的图标，另一种是右键点击
    bat 文件并选择 **打开**。你可能会期望 **打开** 选项打开文件进行编辑，但它实际上是执行 bat 文件。
- en: That’s it. A window will open showing all the copied files along with the locations
    that they were copied from and to. The bat file will hold the window open until
    you press any key to close it. Without this, the copy would still happen, but
    the window would likely close so quickly you wouldn’t know whether it worked.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。一个窗口将会打开，显示所有被复制的文件以及它们从哪里复制到哪里。bat 文件会保持窗口打开，直到你按下任意键关闭它。如果没有这一点，复制过程仍然会发生，但窗口可能会迅速关闭，以至于你无法确定是否成功。
- en: WARNING
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*From time to time Windows file associations aren’t assigned properly. That
    is, Word documents should be associated with and opened by Word. Likewise, bat
    files should be associated with the Windows program that executes bat files. If
    your bat file opens in Notepad, for instance, the file association for files with
    the .*bat *extension is broken. The fix for this varies depending on the operating
    system. Search the web for “bat file association fix” along with your operating
    system to learn how to fix the issue.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*有时，Windows 文件关联可能没有正确分配。也就是说，Word 文档应该与 Word 关联并通过 Word 打开。同样，bat 文件应该与执行
    bat 文件的 Windows 程序关联。例如，如果你的 bat 文件在记事本中打开，那么具有 .*bat *扩展名的文件关联就已损坏。解决此问题的方法因操作系统而异。请在网上搜索“bat
    文件关联修复”和你的操作系统，以了解如何修复该问题。*'
- en: Almost anything that you can type into the MS-DOS command prompt can be coded
    into a bat file so that it can be executed easily and repeatedly. You don’t have
    to download anything from the internet. Everything you need is already on your
    Windows machine.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 MS-DOS 命令提示符中输入的几乎任何内容，都可以编写成 bat 文件，这样就可以轻松并重复执行。你不需要从互联网上下载任何东西。你需要的一切都已经存在于你的
    Windows 计算机上。
- en: I prefixed the last paragraph with *almost* because certain commands, especially
    the all-important for command yet to be discussed, have slightly different syntaxes
    in a bat file versus inside the command prompt. Even more bizarre, a command in
    a bat file can occasionally produce slightly different output compared to the
    exact same command entered at the command prompt.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我在上一段前加上了 *几乎*，因为某些命令，尤其是即将讨论的重要 for 命令，在 bat 文件和命令提示符中有稍微不同的语法。更奇怪的是，bat 文件中的命令有时可能会与在命令提示符中输入的完全相同的命令产生略微不同的输出。
- en: This book is geared to writing bat files, not using the command prompt, so all
    code listings found in this book will work in a bat file, and all examples of
    output will be the output of code from a bat file. The help command, also yet
    to be discussed, will explain any differences in syntax. By the same reasoning,
    this book doesn’t cover commands that are primarily used in the command prompt.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的重点是编写 bat 文件，而不是使用命令提示符，因此本书中的所有代码示例都将适用于 bat 文件，所有输出示例也将是 bat 文件代码的输出。帮助命令，虽然尚未讨论，将解释任何语法上的差异。基于同样的原因，本书不会涉及主要在命令提示符中使用的命令。
- en: cmd Files
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: cmd 文件
- en: In [Listing 1-2](#Lis1-2) we created a bat file with—I know I’m stating the
    obvious here—the *.bat* extension. With the release of Windows NT, Microsoft introduced
    a very similar file with the *.cmd* extension, a file that also contains Batch
    source code. Any Batch command from a bat file can be entered into a cmd file.
    In fact, if you rename your first bat file from [Listing 1-2](#Lis1-2) with a
    *.cmd* extension and execute it exactly as you did the bat file, you’ll get the
    same results.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 1-2](#Lis1-2)中，我们创建了一个带有——我知道我说的很明显——*.bat* 扩展名的批处理文件。在Windows NT发布时，微软引入了一个非常相似的文件，扩展名为*.cmd*，它同样包含批处理源代码。任何来自bat文件的批处理命令都可以输入到cmd文件中。事实上，如果你将第一个批处理文件从[示例
    1-2](#Lis1-2)改名为*.cmd* 扩展名，并以与bat文件相同的方式执行它，你将得到相同的结果。
- en: There are some technical differences concerning how your computer executes the
    two types of files, but from a user perspective, they are nearly identical. The
    only significant difference (which I will discuss in [Chapter 21](chapter21.xhtml))
    concerns how and when the return code is set, and even then, that difference manifests
    itself only in a very narrow set of circumstances.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在如何执行这两种类型的文件方面，存在一些技术上的差异，但从用户的角度来看，它们几乎是相同的。唯一显著的区别（我将在[第21章](chapter21.xhtml)中讨论）是关于返回码的设置时机和方式，即便如此，这个差异也只会在非常狭窄的情况下显现出来。
- en: 'Nearly every mention of bat files throughout this book applies equally to cmd
    files, but I’ll refer to them solely as bat files for many reasons. In common
    usage among coders, *bat file* is the norm. A file with a *.cmd* extension will
    often be referred to as a bat file, but the opposite never occurs. The single-syllable
    word *bat* rolls off the tongue effortlessly compared to its vowelless alternative,
    which is usually referred to as a “see-em-dee” file, an exhausting three syllables
    when used often. One last not-so-insignificant reason: the cover art on the book
    you are holding. A book about cmd files would have been far less eye-catching.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中几乎所有提到的bat文件同样适用于cmd文件，但出于多种原因，我会仅仅称其为bat文件。在程序员的日常用语中，*bat文件*是常态。带有*.cmd*扩展名的文件通常也会被称为bat文件，但反过来却很少发生。单音节的*bat*相比其没有元音的替代词（通常被称为“see-em-dee”文件）更容易发音，而后者一旦频繁使用，就显得相当累赘。最后一个不容忽视的原因是：你手中这本书的封面艺术。如果这本书是关于cmd文件的，它的视觉吸引力肯定会差很多。
- en: Because cmd files are newer, one could argue that they’ll be better supported
    in the future and are the better option for new development. I can’t dispute that,
    but I still find myself creating files with the .*bat* extension, and Microsoft
    continues to support both. If cmd files have not supplanted bat files in the past
    three decades, I don’t envision the bat’s demise anytime soon.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于cmd文件较新，有人可能会认为它们在未来会得到更好的支持，且更适合用于新的开发。我无法反驳这个观点，但我仍然发现自己创建带有*.bat*扩展名的文件，而微软继续支持这两种格式。如果在过去三十年中，cmd文件并没有取代bat文件，我不认为bat文件会很快消失。
- en: Editor Recommendations
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编辑器推荐
- en: I mentioned earlier that when you edit your first bat file, it’ll likely open
    in Notepad. Notepad is the barest of bare-bones editors for text files. Word is
    considered by many to be a bloated monstrosity by this stage of its evolution,
    but Notepad is just the opposite, devoid of useful features. It can be used for
    a simple bat file, but before we go any further, I must make the case for getting
    a better editor. By *editor* I mean a utility that allows you to open (not execute)
    a bat file in a window to read it and make modifications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过，当你编辑第一个批处理文件时，它可能会在记事本中打开。记事本是最基础的文本文件编辑器。虽然许多人认为Word已经发展成了一个臃肿的庞然大物，但记事本则正好相反，缺乏任何有用的功能。它可以用来编辑一个简单的批处理文件，但在我们继续之前，我必须强调使用更好的编辑器的重要性。这里所说的*编辑器*，是指一个可以在窗口中打开（而非执行）批处理文件，用于阅读和修改的工具。
- en: My personal favorite is Notepad++. On first hearing the name I mistakenly dismissed
    it as a glorified Notepad, but it really is a pleasure to use. Commands, variables,
    operators, labels, comments, and more items we haven’t covered yet are displayed
    in different colors to aid in readability. Most editors have that, but if you
    double-click a variable, it highlights not just that variable but also all the
    other instances of that variable in the file, making it even easier to find misspellings,
    although misspellings aren’t very common with Notepad++ because of its easy-to-use
    auto-complete functionality. If you enter a variable name such as myVeryVerboseVariableName—first
    off, shame on you, abbreviations were invented for a reason—the next time you
    start to type myVe, Notepad++ will subtly give you the option of inserting the
    remaining 21 characters with a single keystroke.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人最喜欢的是 Notepad++。初次听到这个名字时，我错误地认为它不过是一个强化版的记事本，但实际使用起来真的很令人愉悦。命令、变量、运算符、标签、注释，以及我们尚未覆盖的更多项目，都以不同的颜色显示，帮助提高可读性。大多数编辑器都有这个功能，但如果你双击一个变量，它不仅会高亮该变量，还会高亮文件中所有该变量的其他实例，这使得查找拼写错误变得更加容易，尽管由于
    Notepad++ 的易用自动完成功能，拼写错误在其中并不常见。如果你输入一个变量名，比如 myVeryVerboseVariableName——首先，真丢脸，缩写是有原因的——下次你开始输入
    myVe 时，Notepad++ 会巧妙地给你一个选项，通过按一个键就能插入剩下的 21 个字符。
- en: Notepad++ is very configurable. If you find the orange color for variables a
    bit too harsh, you can change it to a burnt orange or maybe go in the direction
    of a mauve. It will also work for dozens of other programming languages, and best
    of all, it’s free. Just go to *[https://<wbr>notepad<wbr>-plus<wbr>-plus<wbr>.org](https://notepad-plus-plus.org)*
    or search the web for “Notepad++ download,” and you are a couple mouse clicks
    away.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Notepad++ 非常可配置。如果你觉得变量的橙色有点刺眼，你可以将其改为烧橙色，或者改为紫红色。它也适用于其他多种编程语言，最棒的是，它是免费的。只需访问
    *[https://<wbr>notepad<wbr>-plus<wbr>-plus<wbr>.org](https://notepad-plus-plus.org)*
    或在网上搜索 “Notepad++ 下载”，你就能轻松完成下载。
- en: UltraEdit is also a solid editor, and Visual Studio Code is fast becoming a
    very popular editor for many coding languages, including Batch. You’ll find several
    others on the internet, many of which are free. Download two or three and experiment,
    but whatever you do, don’t settle for Notepad.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: UltraEdit 也是一个强大的编辑器，Visual Studio Code 正快速成为多种编程语言（包括 Batch）中非常流行的编辑器。在互联网上，你还会找到其他几个编辑器，其中许多是免费的。下载两个或三个并进行试验，但无论如何，千万不要满足于记事本。
- en: The Batch Interpreter
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Batch 解释器
- en: Batch is a scripting language, not a compiled language. Compiled languages,
    such as Java, Visual Basic, and C# are written in text, but that text cannot be
    executed. Instead, the coder usually writes the program in an integrated development
    environment (IDE) where the click of a button or two runs the *compiler* to translate
    the code into an executable file. The resulting file is not at all human-readable,
    but it will be quite computer-readable and optimized for execution. The lack of
    readable text has the additional benefit of hiding any proprietary information
    from the user.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Batch 是一种脚本语言，而不是编译语言。编译语言，如 Java、Visual Basic 和 C#，是以文本形式编写的，但这些文本不能直接执行。相反，程序员通常在集成开发环境（IDE）中编写程序，通过点击一个或两个按钮运行
    *编译器*，将代码转换为可执行文件。生成的文件完全不可读，但对计算机而言是可读的，并且经过优化以便执行。无法阅读的文本还有一个附加好处，就是能将任何专有信息隐藏起来，不被用户看到。
- en: The next piece of this compiled-code puzzle is the *runtime*; runtimes come
    in different forms, but a runtime is loaded on a computer and is used to run any
    executable file written in a specific language.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这段编译代码的下一个组成部分是 *运行时*；运行时有不同的形式，但运行时会加载到计算机上，并用于运行任何用特定语言编写的可执行文件。
- en: As a scripting language, Batch is also written in text, but the rest of the
    process deviates greatly from compiled languages. There is no compiler and no
    runtime; instead, the *Batch interpreter*, or the *cmd.exe* executable file, effectively
    handles both roles. (Its 16-bit forerunner was *command.com*.) The Batch interpreter
    is sometimes referred to as the *command interpreter* or *command line interpreter*,
    but usually it is simply and unassumingly called the *interpreter*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种脚本语言，Batch 也是以文本形式编写的，但其余的过程与编译语言大相径庭。没有编译器，也没有运行时；相反，*Batch 解释器*，或者说 *cmd.exe*
    可执行文件，实际上承担了两者的角色。（它的 16 位前身是 *command.com*。）Batch 解释器有时被称为 *命令解释器* 或 *命令行解释器*，但通常它仅仅被简单地称为
    *解释器*。
- en: The interpreter executes the bat file containing the text. The lack of the intermediate
    compilation step does have some advantages. Before long, I’ll share some interesting
    Batch techniques available to us precisely because the code is not compiled, but
    it also presents some challenges to the coder. When a program is compiled, the
    compiler will catch syntax errors and even make suggestions on how to improve
    the code. For instance, a compiler will easily catch a missing parenthesis so
    the coder can fix it in seconds. A missing character in a bat file will not be
    caught until it is executed by the interpreter, and maybe not even the first time
    it executes. In this way, the interpreter plays one of the roles performed by
    a compiler—a very inefficient compiler.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器执行包含文本的 bat 文件。缺少中间编译步骤确实有一些优势。很快，我会分享一些有趣的批处理技巧，正是因为代码没有编译，这些技巧才得以实现，但它也给编码者带来了一些挑战。当一个程序被编译时，编译器会捕捉到语法错误，甚至会给出如何改进代码的建议。例如，编译器很容易捕捉到缺少的括号，这样编码者可以在几秒钟内修复它。在
    bat 文件中，缺少的字符不会被捕捉，直到解释器执行它，甚至可能在第一次执行时也不会发现。通过这种方式，解释器扮演了编译器的角色——一个非常低效的编译器。
- en: The interpreter is much more analogous to a runtime. When the bat file described
    earlier in this chapter is opened or executed, a call is being put out to the
    interpreter to read in the bat file and execute it—or interpret it—line by line.
    This means that the bat file isn’t optimized for execution, and for better or
    worse, the code is available to any user with Notepad technology. Also, the bat
    file can be executed on any Windows machine because all such machines are loaded
    with the interpreter. A curious upshot is that later stages of a particularly
    long-running bat file can actually be coded as the prior logic is being executed,
    an impressive albeit not very useful feature.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 解释器更像是一个运行时。当本章前面描述的 bat 文件被打开或执行时，就会发出一个调用给解释器，读取 bat 文件并逐行执行——或者说解释它。这意味着
    bat 文件并未针对执行进行优化，且无论好坏，任何拥有记事本技术的用户都可以看到代码。此外，bat 文件可以在任何 Windows 机器上执行，因为所有这些机器都装有解释器。一个有趣的副作用是，特别长时间运行的
    bat 文件的后期阶段实际上可以在先前逻辑执行时进行编码，这是一个令人印象深刻的，但并不特别实用的功能。
- en: 'All modern IDEs also have an animator or debugger, which allows you to execute
    code line by line, analyzing variables and maybe even altering them. You can set
    the execution to stop at a particular line or multiple lines. It’s a very useful
    tool for any coder, but Batch doesn’t support an animator. The life cycle of a
    bat file is as follows: it’s written, and it’s executed. That’s the list.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代集成开发环境（IDE）都配有动画器或调试器，允许你逐行执行代码，分析变量，甚至可能修改它们。你可以设置执行在特定行或多行时停止。这是任何编码者都非常有用的工具，但批处理不支持动画器。bat
    文件的生命周期如下：它被编写，然后被执行。就是这样。
- en: Some scripting languages, such as JavaScript, commonly work both ways—the source
    code can be run with an interpreter or be compiled into an executable file with
    products available from multiple companies. Nothing like that is in common use
    with Batch. Bat files are run only via the interpreter, and it’s important to
    understand what the interpreter is because I reference it often in the chapters
    ahead.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一些脚本语言，如 JavaScript，通常可以两种方式运行——源代码可以通过解释器运行，或者使用来自多个公司的产品将其编译成可执行文件。批处理文件中并没有类似的常用方式。bat
    文件只能通过解释器运行，理解解释器是什么非常重要，因为在接下来的章节中我会经常提到它。
- en: Summary
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I introduced the Batch scripting language, bat files, cmd files,
    and the interpreter. You wrote and executed a bat file (maybe your first) and
    learned about editors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我介绍了批处理脚本语言、bat 文件、cmd 文件和解释器。你编写并执行了一个 bat 文件（也许是你的第一个），并学习了有关编辑器的知识。
- en: You are now ready to truly start coding. In [Chapter 2](chapter2.xhtml), you’ll
    learn how to assign values to variables with the oft-used set command and how
    to resolve or extract those values. You’ll also explore a few other commands that
    are used extensively in the Batch universe, giving you the necessary foundation
    for building any bat file in the future.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好真正开始编码了。在[第2章](chapter2.xhtml)中，你将学习如何使用常用的 set 命令给变量赋值，以及如何解析或提取这些值。你还将探索一些在批处理世界中广泛使用的其他命令，为你未来编写任何
    bat 文件奠定必要的基础。
