- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: 1 BATCH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are reading this book (and I’m pretty sure that you are), you are looking
    to write some Batch code. By the end of this chapter, you will have done just
    that, coding and executing what may be your very first bat file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along the way, I will introduce the Batch scripting language and its origins
    in the MS-DOS command prompt, along with the two types of files that contain its
    source code: the bat and cmd. I’ll also discuss editors, which are the primary
    tools for writing a bat file, and the options available to you. Finally, no introduction
    to the Batch universe would be complete without an overview of the interpreter.'
  prefs: []
  type: TYPE_NORMAL
- en: The MS-DOS Command Prompt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The MS-DOS (Microsoft Disk Operating System) command prompt lives on every computer
    loaded with Microsoft Windows. If you are of a certain age—that is, if you were
    around for the infancy of personal computers—you might remember that black rectangle
    (or an entire screen if you go back to the pre-Windows era) where you entered
    commands to perform various tasks such as installing or launching programs, or
    copying or deleting files. The average user rarely if ever deals with this anymore
    because graphical user interfaces have streamlined those tasks so that they can
    be performed in a few clicks, but it still exists.
  prefs: []
  type: TYPE_NORMAL
- en: To access the command prompt on your Windows computer, go to **Start** and enter
    **CMD**, which is short for *command*, in the search box. Hit ENTER, and the MS-DOS
    command prompt will open. From this prompt you can enter a number of commands.
    You can execute programs, copy files, or even delete your entire *C:\* drive.
    Don’t panic, though; you would have to know the command for that. I won’t get
    into all the possible commands here because that’s what this entire book is about,
    and even it isn’t exhaustive, but let’s look at one example. Say you’re working
    on a project with several documents in a folder. After working on those documents
    for a few hours each day, it’s a good idea to back up the files onto another drive.
    To do that, you could enter the single command in [Listing 1-1](#Lis1-1) into
    the command prompt and press ENTER.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-1: The command to back up some files'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry about the syntax yet (wait for [Chapter 7](chapter7.xhtml)). The
    important point is that you can enter this command into the command prompt each
    day to copy all of your files. You might protest that it’s far too easy to mistype
    something in this line, such as one of the two paths or one of those letters following
    the slashes at the end of the line, whatever the heck those are for. Wouldn’t
    it be easier to use Windows, that is, navigate to one folder, select all, right-click,
    select Copy, navigate to the other folder, right-click, select Paste, and click
    to verify the copy? I would agree that this would be easier than typing out the
    command, but notice that the Windows process involves eight discrete steps and
    likely a dozen or more mouse clicks.
  prefs: []
  type: TYPE_NORMAL
- en: A third option is easier than both the command prompt method and the click-intensive
    Windows method. That option is to program with the Batch scripting language.
  prefs: []
  type: TYPE_NORMAL
- en: The Batch Scripting Language
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Batch is an unfortunate handle for any coding language, scripting or otherwise.
    Some popular languages are distinctively named for coffee, gemstones, music notes,
    or British comedy troupes. Even the much-maligned COBOL has an acronym unique
    to itself, and when Pascal is mentioned, the 20th-century coding language usually
    comes to mind before the 17th-century mathematician. At the other extreme of the
    continuum, the term *batch* is banal; even in the context of computer science,
    it’s ambiguous. *Batch processing* is a generic term for the act of running several
    jobs or a large batch of data at once and is quite distinct from the topic of
    this book, Batch scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft developed the Batch scripting or coding language in the early 1980s
    for the MS-DOS operating system, and it has been installed on every machine running
    Windows since 1985\. I suspect that somebody at Microsoft who grew tired of typing
    a repetitive series of commands into the command prompt said, “Wouldn’t it be
    great if we could take these commands and batch them together into a single file
    that could then be executed quickly and easily?”
  prefs: []
  type: TYPE_NORMAL
- en: Those *batched* commands represented the genesis of Batch, the coding language.
    Individual commands don’t constitute a language; a language is a framework to
    execute those commands. Batching these commands into a file allowed for branching
    logic, complex loops, and reusable code—the makings of a real language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Batch has many uses. Its command line origins make it an ideal language for
    computer or system administration: creating, copying, moving, and deleting files.
    Batch can also examine and modify directories and the registry and set up a computer’s
    environment.'
  prefs: []
  type: TYPE_NORMAL
- en: A simple bat file can set some variables and execute programs written in many
    other languages. Batch can interact with a user, displaying information and gathering
    data. Files can be read, written, and altered. Rudimentary reports can be created,
    and before long you will see that Batch supports intricate and sophisticated scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Before personal computers became available, other operating systems had their
    own scripting languages analogous to Batch. Unix shell scripts execute on Unix-based
    operating systems, and JCL, or job control language, is instrumental to the IBM
    mainframe. When introducing Batch to new co-workers familiar with the mainframe,
    I’ll dispense with rigor and describe it as “JCL for the PC.”
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, knowledge of Batch among coders is broad yet shallow. (An
    image of a large group of coders, laptops in hand, standing in the kiddie pool
    with their pant cuffs rolled up, afraid to enter the adult pool, much less its
    deep end, comes to mind.) Most coders can create a simple Batch application but
    instinctively fall back onto other languages for more complex problems that could
    be more easily handled in Batch.
  prefs: []
  type: TYPE_NORMAL
- en: Bat Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the term *batch* is ambiguous, a bat file is known to most coders.
    A batch of commands is entered into a batch file (shortened to bat file). Hence,
    a *bat file* is a file containing Batch source code. (A *batphile*, however, is
    someone with a great enthusiasm for, or even a lover of, nocturnal flying mammals.)
    When a bat file is executed, a series of the commands it contains is performed
    until reaching either a command to terminate its execution or the end of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Most Windows files have a file extension at the end of the filename after the
    dot. Modern Word documents end in *.docx*. Excel spreadsheets end in *.xlsx*.
    Simple text files often end in *.txt*, and PDF files end in ... well, you have
    the idea. To distinguish a bat file from other files, it must have a *.bat* extension.
  prefs: []
  type: TYPE_NORMAL
- en: By default, file extensions aren’t shown after the filename in Windows, but
    we’ll need them. To show them, look for an option to show filename extensions
    under the **View** menu in Windows Explorer. If it isn’t readily obvious, search
    the web for “show filename extensions” and your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Now your files will show their extensions; for instance, your Word documents
    will likely be suffixed with *.docx*. More important, your bat files will be appended
    with *.bat*. Many refer to these as *batch files*, but in the pages ahead I’ll
    refer to them simply as *bat files*.
  prefs: []
  type: TYPE_NORMAL
- en: Your First Bat File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s create a bat file. To start, right-click on the desktop to bring up the
    context menu and select **New** ▶ **Text Document**. Rename the text file to something
    like *SaveProject.bat*. The name can be whatever makes sense to you, but the file
    extension after the filename must be changed from *.txt* to *.bat*. Right-click
    the file, select **Rename**, enter the new name and extension, and press ENTER.
    A pop-up will likely warn you that changing the extension might cause great harm.
    It will not; just select **Yes** to confirm. Right-click the new file on the desktop
    and select **Edit** (not Open; I’ll get to that momentarily). It should open for
    editing in Notepad.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the two lines of text in [Listing 1-2](#Lis1-2) into your bat file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 1-2: The entire contents of your first bat file'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change C:\YourPath\ to the folder you want backed up and change D:\YourBackUpPath\
    to the folder to which you want to save everything. (I am assuming that your backup
    device, such as a flash drive, is assigned *D:\* as the drive, but it might be
    something else. If nothing else, just to see this work, you could even define
    a backup path also on the same drive.) Notice that the first line of code in [Listing
    1-2](#Lis1-2) is identical to what we typed into the command prompt in [Listing
    1-1](#Lis1-1), but it is now followed by a second line containing a single word:
    pause.'
  prefs: []
  type: TYPE_NORMAL
- en: After investing the effort to put this together, you can reap the benefits.
    Whenever you want to make this backup in the future, simply execute this bat file.
    To do so you have multiple options; one is to double-click its icon on the desktop,
    and another is to right-click the bat file and select **Open**. You might expect
    **Open** to open the file for editing, but it really executes the bat file.
  prefs: []
  type: TYPE_NORMAL
- en: That’s it. A window will open showing all the copied files along with the locations
    that they were copied from and to. The bat file will hold the window open until
    you press any key to close it. Without this, the copy would still happen, but
    the window would likely close so quickly you wouldn’t know whether it worked.
  prefs: []
  type: TYPE_NORMAL
- en: WARNING
  prefs: []
  type: TYPE_NORMAL
- en: '*From time to time Windows file associations aren’t assigned properly. That
    is, Word documents should be associated with and opened by Word. Likewise, bat
    files should be associated with the Windows program that executes bat files. If
    your bat file opens in Notepad, for instance, the file association for files with
    the .*bat *extension is broken. The fix for this varies depending on the operating
    system. Search the web for “bat file association fix” along with your operating
    system to learn how to fix the issue.*'
  prefs: []
  type: TYPE_NORMAL
- en: Almost anything that you can type into the MS-DOS command prompt can be coded
    into a bat file so that it can be executed easily and repeatedly. You don’t have
    to download anything from the internet. Everything you need is already on your
    Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: I prefixed the last paragraph with *almost* because certain commands, especially
    the all-important for command yet to be discussed, have slightly different syntaxes
    in a bat file versus inside the command prompt. Even more bizarre, a command in
    a bat file can occasionally produce slightly different output compared to the
    exact same command entered at the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: This book is geared to writing bat files, not using the command prompt, so all
    code listings found in this book will work in a bat file, and all examples of
    output will be the output of code from a bat file. The help command, also yet
    to be discussed, will explain any differences in syntax. By the same reasoning,
    this book doesn’t cover commands that are primarily used in the command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: cmd Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Listing 1-2](#Lis1-2) we created a bat file with—I know I’m stating the
    obvious here—the *.bat* extension. With the release of Windows NT, Microsoft introduced
    a very similar file with the *.cmd* extension, a file that also contains Batch
    source code. Any Batch command from a bat file can be entered into a cmd file.
    In fact, if you rename your first bat file from [Listing 1-2](#Lis1-2) with a
    *.cmd* extension and execute it exactly as you did the bat file, you’ll get the
    same results.
  prefs: []
  type: TYPE_NORMAL
- en: There are some technical differences concerning how your computer executes the
    two types of files, but from a user perspective, they are nearly identical. The
    only significant difference (which I will discuss in [Chapter 21](chapter21.xhtml))
    concerns how and when the return code is set, and even then, that difference manifests
    itself only in a very narrow set of circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nearly every mention of bat files throughout this book applies equally to cmd
    files, but I’ll refer to them solely as bat files for many reasons. In common
    usage among coders, *bat file* is the norm. A file with a *.cmd* extension will
    often be referred to as a bat file, but the opposite never occurs. The single-syllable
    word *bat* rolls off the tongue effortlessly compared to its vowelless alternative,
    which is usually referred to as a “see-em-dee” file, an exhausting three syllables
    when used often. One last not-so-insignificant reason: the cover art on the book
    you are holding. A book about cmd files would have been far less eye-catching.'
  prefs: []
  type: TYPE_NORMAL
- en: Because cmd files are newer, one could argue that they’ll be better supported
    in the future and are the better option for new development. I can’t dispute that,
    but I still find myself creating files with the .*bat* extension, and Microsoft
    continues to support both. If cmd files have not supplanted bat files in the past
    three decades, I don’t envision the bat’s demise anytime soon.
  prefs: []
  type: TYPE_NORMAL
- en: Editor Recommendations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I mentioned earlier that when you edit your first bat file, it’ll likely open
    in Notepad. Notepad is the barest of bare-bones editors for text files. Word is
    considered by many to be a bloated monstrosity by this stage of its evolution,
    but Notepad is just the opposite, devoid of useful features. It can be used for
    a simple bat file, but before we go any further, I must make the case for getting
    a better editor. By *editor* I mean a utility that allows you to open (not execute)
    a bat file in a window to read it and make modifications.
  prefs: []
  type: TYPE_NORMAL
- en: My personal favorite is Notepad++. On first hearing the name I mistakenly dismissed
    it as a glorified Notepad, but it really is a pleasure to use. Commands, variables,
    operators, labels, comments, and more items we haven’t covered yet are displayed
    in different colors to aid in readability. Most editors have that, but if you
    double-click a variable, it highlights not just that variable but also all the
    other instances of that variable in the file, making it even easier to find misspellings,
    although misspellings aren’t very common with Notepad++ because of its easy-to-use
    auto-complete functionality. If you enter a variable name such as myVeryVerboseVariableName—first
    off, shame on you, abbreviations were invented for a reason—the next time you
    start to type myVe, Notepad++ will subtly give you the option of inserting the
    remaining 21 characters with a single keystroke.
  prefs: []
  type: TYPE_NORMAL
- en: Notepad++ is very configurable. If you find the orange color for variables a
    bit too harsh, you can change it to a burnt orange or maybe go in the direction
    of a mauve. It will also work for dozens of other programming languages, and best
    of all, it’s free. Just go to *[https://<wbr>notepad<wbr>-plus<wbr>-plus<wbr>.org](https://notepad-plus-plus.org)*
    or search the web for “Notepad++ download,” and you are a couple mouse clicks
    away.
  prefs: []
  type: TYPE_NORMAL
- en: UltraEdit is also a solid editor, and Visual Studio Code is fast becoming a
    very popular editor for many coding languages, including Batch. You’ll find several
    others on the internet, many of which are free. Download two or three and experiment,
    but whatever you do, don’t settle for Notepad.
  prefs: []
  type: TYPE_NORMAL
- en: The Batch Interpreter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Batch is a scripting language, not a compiled language. Compiled languages,
    such as Java, Visual Basic, and C# are written in text, but that text cannot be
    executed. Instead, the coder usually writes the program in an integrated development
    environment (IDE) where the click of a button or two runs the *compiler* to translate
    the code into an executable file. The resulting file is not at all human-readable,
    but it will be quite computer-readable and optimized for execution. The lack of
    readable text has the additional benefit of hiding any proprietary information
    from the user.
  prefs: []
  type: TYPE_NORMAL
- en: The next piece of this compiled-code puzzle is the *runtime*; runtimes come
    in different forms, but a runtime is loaded on a computer and is used to run any
    executable file written in a specific language.
  prefs: []
  type: TYPE_NORMAL
- en: As a scripting language, Batch is also written in text, but the rest of the
    process deviates greatly from compiled languages. There is no compiler and no
    runtime; instead, the *Batch interpreter*, or the *cmd.exe* executable file, effectively
    handles both roles. (Its 16-bit forerunner was *command.com*.) The Batch interpreter
    is sometimes referred to as the *command interpreter* or *command line interpreter*,
    but usually it is simply and unassumingly called the *interpreter*.
  prefs: []
  type: TYPE_NORMAL
- en: The interpreter executes the bat file containing the text. The lack of the intermediate
    compilation step does have some advantages. Before long, I’ll share some interesting
    Batch techniques available to us precisely because the code is not compiled, but
    it also presents some challenges to the coder. When a program is compiled, the
    compiler will catch syntax errors and even make suggestions on how to improve
    the code. For instance, a compiler will easily catch a missing parenthesis so
    the coder can fix it in seconds. A missing character in a bat file will not be
    caught until it is executed by the interpreter, and maybe not even the first time
    it executes. In this way, the interpreter plays one of the roles performed by
    a compiler—a very inefficient compiler.
  prefs: []
  type: TYPE_NORMAL
- en: The interpreter is much more analogous to a runtime. When the bat file described
    earlier in this chapter is opened or executed, a call is being put out to the
    interpreter to read in the bat file and execute it—or interpret it—line by line.
    This means that the bat file isn’t optimized for execution, and for better or
    worse, the code is available to any user with Notepad technology. Also, the bat
    file can be executed on any Windows machine because all such machines are loaded
    with the interpreter. A curious upshot is that later stages of a particularly
    long-running bat file can actually be coded as the prior logic is being executed,
    an impressive albeit not very useful feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'All modern IDEs also have an animator or debugger, which allows you to execute
    code line by line, analyzing variables and maybe even altering them. You can set
    the execution to stop at a particular line or multiple lines. It’s a very useful
    tool for any coder, but Batch doesn’t support an animator. The life cycle of a
    bat file is as follows: it’s written, and it’s executed. That’s the list.'
  prefs: []
  type: TYPE_NORMAL
- en: Some scripting languages, such as JavaScript, commonly work both ways—the source
    code can be run with an interpreter or be compiled into an executable file with
    products available from multiple companies. Nothing like that is in common use
    with Batch. Bat files are run only via the interpreter, and it’s important to
    understand what the interpreter is because I reference it often in the chapters
    ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, I introduced the Batch scripting language, bat files, cmd files,
    and the interpreter. You wrote and executed a bat file (maybe your first) and
    learned about editors.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to truly start coding. In [Chapter 2](chapter2.xhtml), you’ll
    learn how to assign values to variables with the oft-used set command and how
    to resolve or extract those values. You’ll also explore a few other commands that
    are used extensively in the Batch universe, giving you the necessary foundation
    for building any bat file in the future.
  prefs: []
  type: TYPE_NORMAL
