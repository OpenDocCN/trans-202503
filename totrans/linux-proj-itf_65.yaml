- en: Appendix A. Tracing System Calls
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录A. 系统调用跟踪
- en: 'The *strace* command allows us to trace the system calls made by a program.
    This is useful for debugging, or simply to find out what a program is doing. In
    its simplest form, we use *strace* as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*strace*命令允许我们跟踪程序所执行的系统调用。这对于调试或仅仅是想了解程序在做什么非常有用。在其最简单的形式下，我们可以如下使用*strace*：'
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This runs *command*, with the given command-line arguments, producing a trace
    of the system calls it makes. By default, *strace* writes its output to *stderr*,
    but we can change this using the *-o filename* option.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这会运行*command*，并带上给定的命令行参数，生成它所执行的系统调用的跟踪。默认情况下，*strace*将输出写入*stderr*，但我们可以使用*-o
    filename*选项来更改此行为。
- en: 'Examples of the type of output produced by *strace* include the following (taken
    from the output of the command *strace date*):'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*strace*产生的输出类型的例子包括以下内容（摘自命令*strace date*的输出）：'
- en: '[PRE1]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Each system call is displayed in the form of a function call, with both input
    and output arguments shown in parentheses. As can be seen from the above examples,
    arguments are printed in symbolic form:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个系统调用以函数调用的形式显示，输入和输出参数都显示在括号内。从上面的例子可以看出，参数以符号形式打印：
- en: Bit masks are represented using the corresponding symbolic constants.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位掩码使用相应的符号常量表示。
- en: Strings are printed in text form (up to a limit of 32 characters, but the *-s
    strsize* option can be used to change this limit).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串以文本形式打印（最多限制为32个字符，但可以使用*-s strsize*选项更改此限制）。
- en: Structure fields are individually displayed (by default, only an abbreviated
    subset of large structures is displayed, but the *-v* option can be used to display
    the whole structure).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构字段单独显示（默认情况下，只显示大型结构的简化子集，但可以使用*-v*选项显示整个结构）。
- en: After the closing parenthesis of the traced call, *strace* prints an equal sign
    (`=`), followed by the return value of the system call. If the system call failed,
    the symbolic *errno* value is also displayed. Thus, we see `ENOENT` displayed
    for the failure of the *access()* call above.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在跟踪调用的右括号后，*strace*打印一个等号（`=`），后面跟着系统调用的返回值。如果系统调用失败，还会显示符号化的*errno*值。因此，我们可以看到`ENOENT`在上面*access()*调用失败时被显示出来。
- en: 'Even for a simple program, the output produced by *strace* is made voluminous
    by the system calls executed by the C run-time startup code and the loading of
    shared libraries. For a complex program, the *strace* output can be extremely
    long. For these reasons, it is sometimes useful to selectively filter the output
    of *strace*. One way to do this is to use *grep*, like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一个简单的程序，*strace*产生的输出也会因为C运行时启动代码和共享库的加载而变得非常庞大。对于一个复杂的程序，*strace*的输出可能会非常长。由于这些原因，有时选择性地过滤*strace*的输出会很有用。一种方法是使用*grep*，如下所示：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Another method is to use the -e option to select the events to be traced. For
    example, we can use the following command to trace *open()* and *close()* system
    calls:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是使用-e选项选择要跟踪的事件。例如，我们可以使用以下命令来跟踪*open()*和*close()*系统调用：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When using either of the above techniques, we need to be aware that, in a few
    cases, the true name of a system call differs from the name of its *glibc* wrapper.
    For example, though we refer to all of the *wait()*-type functions as system calls
    in [Chapter 26](ch26.html "Chapter 26. Monitoring Child Processes"), most of them
    (*wait()*, *waitpid()*, and *wait3()*) are wrappers that invoke the kernel’s *wait4()*
    system call service routine. This latter name is displayed by *strace*, and we
    must specify that name in the *-e trace=* option. Similarly, all of the *exec*
    library functions (Section 27.2) invoke the *execve()* system call. Often, we
    can make a good guess about such transformations by looking at the *strace* output
    (or looking at the output produced by *strace -c*, described below), but, failing
    that, we may need to check the *glibc* source code to see what transformations
    may be occurring inside wrapper functions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用上述任一技术时，我们需要注意，在某些情况下，系统调用的真实名称与其*glibc*包装器的名称不同。例如，尽管我们在[第26章](ch26.html
    "第26章。监控子进程")中将所有*wait()*类型的函数称为系统调用，但其中大多数（*wait()*, *waitpid()*, 和*wait3()*）是调用内核*wait4()*系统调用服务例程的包装器。这个后者的名称由*strace*显示，我们必须在*-e
    trace=*选项中指定该名称。同样，所有的*exec*库函数（第27.2节）都会调用*execve()*系统调用。通常，我们可以通过查看*strace*输出（或查看下面描述的*strace
    -c*产生的输出）来对这种转换做出合理的猜测，但如果不行，我们可能需要查看*glibc*源代码，看看在包装函数内部可能发生了什么转换。
- en: 'The *strace(1)* manual page documents a host of further options to *strace*,
    including the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*strace(1)* 手册页面记录了 *strace* 的更多选项，包括以下内容：'
- en: The *-p pid* option is used to trace an existing process, by specifying its
    process ID. Unprivileged users are restricted to tracing only processes that they
    own and that are not executing set-user-ID or set-group-ID programs (Section 9.3).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*-p pid* 选项用于追踪一个现有的进程，通过指定其进程 ID。普通用户只能追踪他们拥有的进程，并且这些进程不能执行设置用户 ID 或设置组 ID
    的程序（参见第 9.3 节）。'
- en: The *-c* option causes *strace* to print a summary of all system calls made
    by the program. For each system call, the summary information includes the total
    number of calls, the number of calls that failed, and the total time spent executing
    the calls.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*-c* 选项使得 *strace* 打印程序所做的所有系统调用的汇总信息。对于每个系统调用，汇总信息包括调用的总次数、失败的调用次数，以及执行调用所花费的总时间。'
- en: The *-f* option causes children of this process also to be traced. If we are
    sending trace output to a file (*-o filename*), then the alternative *-ff* option
    causes each process to write its trace output to a file named *filename.PID*.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*-f* 选项使得该进程的子进程也被追踪。如果我们将跟踪输出发送到一个文件（*-o filename*），那么替代的 *-ff* 选项会使每个进程将其跟踪输出写入一个名为
    *filename.PID* 的文件。'
- en: The *strace* command is Linux-specific, but most UNIX implementations provide
    their own equivalents (e.g., *truss* on Solaris and *ktrace* on the BSDs).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*strace* 命令是 Linux 专用的，但大多数 UNIX 实现也提供了它们自己的类似工具（例如，Solaris 上的 *truss* 和 BSD
    系统上的 *ktrace*）。'
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The *ltrace* command performs an analogous task to *strace*, but for library
    functions. See the *ltrace(1)* manual page for details.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*ltrace* 命令执行的任务与 *strace* 类似，但它用于库函数。详细信息请参见 *ltrace(1)* 手册页面。'
