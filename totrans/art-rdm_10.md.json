["```\ndef Population(npop):\n    pop = []\n    for i in range(npop):\n        age = 20 + int(55*rng.random())\n        income = int(age*200 + age*1000*rng.random())\n        income = int(income/1000)\n        smoker = 0\n        if (rng.random() < (0.75 - age/100)):\n            smoker = 1\n        drink = 1.0 - age/100\n        drink = int(14*drink*rng.random())\n        pop.append([age, income, smoker, drink])\n    return np.array(pop)\n```", "```\n> python3 bad_sample.py 1000 10 1 mt19937 4004\nage   : 47.22  42.20  (t= 0.9782, p=0.32823)\nincome: 33.20  24.80  (t= 1.4284, p=0.15350)\nsmoker:  0.27   0.10  (t= 1.2126, p=0.22555)\ndrink :  3.14   3.20  (t=-0.0714, p=0.94309)\n```", "```\n> python3 bad_sample.py 1000 10 1 mt19937 6502\nage   : 47.35  56.10  (t=-1.7258, p=0.08468)\nincome: 32.43  31.80  (t= 0.1118, p=0.91097)\nsmoker:  0.29   0.10  (t= 1.3255, p=0.18530)\ndrink :  3.20   2.60  (t= 0.7774, p=0.43713)\n```", "```\n> python3 bad_sample.py 1000 10 40 mt19937 8080\n10 6.36529487 0.49581353\n```", "```\n> python3 bad_sample.py 1000 100 40 mt19937 8080\n100 2.12064926 0.23245698\n```", "```\n>>> from RE import * \n>>> RE(mode=\"int\", low=0, high=2).random(10)\narray([1, 1, 1, 0, 0, 0, 0, 1, 0, 1])\n>>> RE(mode=\"int\", low=0, high=2).random(10)\narray([0, 1, 1, 0, 1, 1, 0, 0, 1, 1])\n```", "```\n>>> RE(mode=\"int\", low=0, high=2).random(10)\narray([0, 1, 1, 1, 0, 0, 1, 1, 1, 1])\n```", "```\n>>> s = RE(mode=\"int\", low=0, high=2).random(10000)\n>>> np.bincount(s)\narray([4852, 5148])\n```", "```\n>>> from RE import * \n>>> b = [\"1100\",\"1010\",\"1001\",\"0110\",\"0101\",\"0011\"]\n>>> r = RE(mode=\"int\", low=0, high=6)\n>>> \"\".join([b[i] for i in r.random(8)])\n'11000011101010101010100100110110'\n```", "```\nresults = []\nfor nsim in range(nsimulations):\n    pop = []\n    for i in range(npop):\n        pop.append(Person())\n\n    control, treatment = [Simple, Block, Stratified][typ](pop, nsubj)\n\n    for subject in treatment:\n        subject.Treat(beta)\n\n    ch, c_age, c_income, c_smoker, c_drink = Summarize(control)\n    th, t_age, t_income, t_smoker, t_drink = Summarize(treatment)\n\n    results.append({\n        \"c_age\": c_age,\n        \"c_income\": c_income,\n        \"c_smoker\": c_smoker,\n        \"c_drink\": c_drink,\n        \"t_age\": t_age,\n        \"t_income\": t_income,\n        \"t_smoker\": t_smoker,\n        \"t_drink\": t_drink,\n        \"ttest\": ttest_ind(th,ch),\n        \"d\": Cohen_d(th,ch),\n    })\n```", "```\nclass Person():\n    def __init__(self):\n        self.age = int(3*rng.random())\n        self.income = int(3*rng.random())\n        self.smoker = 0\n        if (rng.random() < 0.2):\n            self.smoker = 1\n        self.drink = int(3*rng.random())\n        self.adj = 2*(rng.random() - 0.5)\n\n    def Health(self):\n        return 3*(2-self.age) + 2*self.income - 2*self.smoker - self.drink + self.adj\n\n    def Treat(self, beta=0.03):\n        self.adj += 3*binomial(300, beta, rng) / 300  # [0,1]\n```", "```\ndef binomial(n,a,rng):\n    k = 0\n    p = a if (a <= 0.5) else 1.0-a\n    for i in range(n):\n        if (rng.random() <= p):\n            k += 1\n    return k if (a <= 0.5) else n-k\n```", "```\ndef Cohen_d(a,b):\n    s1 = np.std(a, ddof=1)**2\n    s2 = np.std(b, ddof=1)**2\n    return (a.mean()-b.mean())/np.sqrt(0.5*(s1+s2))\n\ndef Summarize(subjects):\n    h = []\n    age = income = smoker = drink = 0.0\n    for subject in subjects:\n        h.append(subject.Health())\n        age += subject.age\n        income += subject.income\n        smoker += subject.smoker\n        drink += subject.drink\n    age /= len(subjects)\n    income /= len(subjects)\n    smoker /= len(subjects)\n    drink /= len(subjects)\n    return np.array(h), age, income, smoker, drink\n```", "```\ndef Simple(pop, nsubj):\n    order = np.argsort(rng.random(len(pop)))\n    c = []; t = []\n    for k in range(nsubj):\n        if (rng.random() < 0.5):\n            c.append(pop[order[k]])\n        else:\n            t.append(pop[order[k]])\n    return c,t\n```", "```\ndef Block(pop, nsubj):\n    ns = 4*(nsubj//4)\n    blocks = [\"1100\",\"1010\",\"1001\",\"0110\",\"0101\",\"0011\"]\n    nblocks = ns//4\n    seq = \"\"\n    for i in range(nblocks):\n        n = int(len(blocks)*rng.random())\n        seq += blocks[n]\n    order = np.argsort(rng.random(len(pop)))\n    c = [];  t = []\n    for i in range(ns):\n        if (seq[i] == \"1\"):\n            t.append(pop[order[i]])\n        else:\n            c.append(pop[order[i]])\n    return c,t\n```", "```\ndef Stratified(pop, nsubj):\n    def match(n,m,pop,selected):\n        if (selected[m]):\n            return False\n        if (pop[n].age != pop[m].age):\n            return False\n        if (pop[n].income != pop[m].income):\n            return False\n        if (pop[n].smoker != pop[m].smoker):\n            return False\n        if (pop[n].drink != pop[m].drink):\n            return False\n        return True\n\n    selected = np.zeros(len(pop), dtype=\"uint8\")\n    c = [];  t = []\n    while (len(t) < nsubj//2):\n        n = int(len(pop)*rng.random())\n        while (selected[n] == 1):\n            n = int(len(pop)*rng.random())\n        selected[n] = 1\n        t.append(pop[n])\n        m = int(len(pop)*rng.random())\n        while (not match(n,m, pop, selected)):\n            m = int(len(pop)*rng.random())\n        selected[m] = 1\n        c.append(pop[m])\n    return c,t\n```", "```\n> python3 design.py\ndesign <npop> <nsubj> <beta> <nsim> <type> <plot> [<kind> | <kind> <seed>]\n\n  <npop>  -  population size (e.g. 1000)\n  <nsubj> -  number of subjects in the experiment (e.g. 40)\n  <beta>  -  supplement effect strength [0..1]\n  <nsim>  -  number of simulations to run (e.g. 100)\n  <typ>   -  selection type: 0=simple, 1=block, 2=stratified\n  <plot>  -  1=show plot, 0=no plot\n  <kind>  -  randomness source\n  <seed>  -  seed value\n```", "```\n> python3 design.py 10000 32 0.3 40 0 1 minstd 6809\n\nmean p-value (lowest) : 0.01138\nmean p-value (highest): 0.82919\n\nmean Cohen's (lowest) : 1.00568\nmean Cohen's (highest): 0.07732\n\ndelta age   : (high, low, t, p) = (0.16556, 0.41945, -3.27589, 0.01691)\ndelta income: (high, low, t, p) = (0.21191, 0.30570, -0.64742, 0.54132)\ndelta smoker: (high, low, t, p) = (0.12377, 0.11255,  0.21945, 0.83357)\ndelta drink : (high, low, t, p) = (0.38284, 0.22193,  0.83403, 0.43620)\n```", "```\n> python3 design.py 10000 32 0.3 40 1 1 minstd 6809\n\nmean p-value (lowest) : 0.02021\nmean p-value (highest): 0.94917\n\nmean Cohen's (lowest) : 0.89363\nmean Cohen's (highest): 0.00087\n\ndelta age   : (high, low, t, p) = (0.15625, 0.45312, -2.12870, 0.07735)\ndelta income: (high, low, t, p) = (0.21875, 0.42188, -1.53562, 0.17554)\ndelta smoker: (high, low, t, p) = (0.10938, 0.14062, -0.35729, 0.73310)\ndelta drink : (high, low, t, p) = (0.37500, 0.17188,  1.80858, 0.12051)\n```", "```\n> python3 design.py 10000 32 0.3 40 2 1 minstd 6809\n\nmean p-value (lowest) : 0.19833\nmean p-value (highest): 0.64602\n\nmean Cohen's (lowest) : 0.46910\nmean Cohen's (highest): 0.16422\n```", "```\n> python3 design.py 10000 128 0.3 40 2 1 minstd 6809\n\nmean p-value (lowest) : 0.06149\nmean p-value (highest): 0.20789\n\nmean Cohen's (lowest) : 0.33364\nmean Cohen's (highest): 0.22381\n```", "```\n> python3 design.py 10000 256 0.3 40 2 1 minstd 6809\n\nmean p-value (lowest) : 0.00781\nmean p-value (highest): 0.05495\n\nmean Cohen's (lowest) : 0.33582\nmean Cohen's (highest): 0.24168\n```", "```\n0.9:   50 subjects, p=0.03350000, d=0.7079\n0.8:   60 subjects, p=0.03402000, d=0.6172\n0.7:   80 subjects, p=0.02784000, d=0.5373\n0.6:   90 subjects, p=0.03872000, d=0.4702\n0.5:  110 subjects, p=0.04107000, d=0.4141\n0.4:  170 subjects, p=0.04417000, d=0.3213\n0.3:  280 subjects, p=0.04682000, d=0.2431\n0.2:  580 subjects, p=0.04017000, d=0.1724\n0.1: 2370 subjects, p=0.04922000, d=0.0811\n```", "```\ndef RunTest(beta, nsubj):\n    cmd = \"python3 design.py 100000 %d %0.1f 20 2 minstd 6809 >/tmp/xyzzy\"\n    os.system(cmd % (nsubj,beta))\n    lines = [i[:-1] for i in open(\"/tmp/xyzzy\")]\n    pv = float(lines[2].split()[-1])\n    d =  float(lines[5].split()[-1])\n    return pv,d\n\nbase = 10\nfor beta in [0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1]:\n    pvalue = 10.0\n    k = 1\n    while (pvalue > 0.05):\n        pvalue,d = RunTest(beta, k*base)\n        k += 1\n    print(\"%0.1f: %3d subjects, p=%0.8f, d=%0.4f\" % (beta, k*base, pvalue, d), flush=True)\n```", "```\nimport numpy as np\nfrom itertools import permutations\nb = [0,0,1,1,2,2]\nl = list(set(permutations(b)))\nblocks = np.array(l)\n```"]