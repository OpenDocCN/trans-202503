- en: '**15'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Building your First Website**
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll build a simple website with headings, paragraphs, images,
    links, and buttons. You’ll use HTML to create the page and CSS to style it how
    you want. The skills you’ll learn here can be used to build any website you’d
    like.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0181-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING UP THE PROJECT FILES**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this project you won’t need any circuitry; everything is done in your Raspberry
    Pi desktop computer. You’ll use the Text Editor program to create HTML and CSS
    files. To access the Text Editor, from the desktop’s main menu go to **Accessories**
    ▸ **Text Editor**.
  prefs: []
  type: TYPE_NORMAL
- en: This project requires several files, so we suggest you create a folder specifically
    for this project. Create a new folder inside your *Projects* directory called
    *Web_Applications*, and then create a project folder called *Project_15*.
  prefs: []
  type: TYPE_NORMAL
- en: After opening the Text Editor, create two blank files with CTRL-N; you’ll have
    to do this once for each file. Then save those files within the *Project_15* folder,
    and name them *index.html* and *style.css* as shown in [Figure 15-1](ch15.xhtml#ch15fig1).
    You can download the scripts a*t [https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0182-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 15-1:** Creating the HTML and CSS files'
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING UP AN HTML WEB PAGE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*HTML*, short for *HyperText Markup Language*, is the predominant markup language
    used to create web pages. Web browsers were designed to read HTML *tags*, which
    tell the browser how to display content on the page. Let’s take a look at how
    tags work.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting Up the Basic Content**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The following snippet shows the basic structure of an HTML document. Open your
    *index.html* file using the Text Editor and enter the content from [Listing 15-1](ch15.xhtml#ch15list1).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-1:** The basic structure of an HTML web page'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This document is simply a list of HTML tags, denoted by the enclosing `< >`
    symbols. The first line of any HTML document is always `<!DOCTYPE html>`. This
    tells the web browser this document is an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining structure needs to be sandwiched between the tags `<html>` ➊ and
    `</html>`, the former indicating the beginning of a web page and the latter indicating
    the end of the page. Note that the closing tag must have a `/` after the `<` symbol;
    this is true of all HTML closing tags. Not all HTML tags need a closing tag, however,
    as you’ll see later.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML documents have two main parts: the head and the body. The *head*, which
    goes within the tags `<head>` ➋ and `</head>`, is where you insert data about
    the HTML document that is not directly visible on the page but that adds functionality
    to the web page, like the title that shows up in the browser tab, scripts, styles,
    and more. The *body*, which falls within the tags `<body>` ➌ and `</body>`, includes
    the content of the page, such as headings, text, images, tables, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding the Title, Headings, and Paragraphs**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To see how your web page looks, go to the taskbar menu and open Chromium, and
    then drag the *index.html* file into the Chromium web browser. At the moment,
    you should see only a blank page, because you haven’t added anything to the HTML
    file yet. In this section, you’ll add the title, headings, and paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Title Tags**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The title goes between the `<title>` and `</title>` tags, which should go within
    the `<head>` and `</head>` tags. Add a title to your file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Instead of dragging the file into the browser again, you can simply refresh
    the web page after saving the HTML; the changes are updated immediately.*'
  prefs: []
  type: TYPE_NORMAL
- en: If you save *index.html* and again drag the file into your browser, don’t be
    surprised to still see a blank page. The title shows in the web browser tab, not
    on the page itself. We titled our web page “Max – The Dog,” but you can title
    your page whatever you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Heading Tags**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You can use headings to structure the text on the web page. Heading tags begin
    with an `h` followed by a number that indicates the heading level. For example,
    `<h1>` and `</h1>` are the tags for heading 1, or the top level; `<h2>` and `</h2>`
    are for heading 2, and so on until heading 6, which is the bottom level of heading.
    Heading tags should go between the `<body>` and `</body>` tags. Make a couple
    of headings and place them in the body of your file now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve added two headings to our page: “MAX – THE DOG” at the top level and
    “About Max” at a level below that. Now it’s time to put some text under those
    headings.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Paragraph Tags**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'You should put most of your readable content in paragraphs. Every paragraph
    needs to go between the `<p>` and `</p>` tags. Add a paragraph or two to your
    file, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You now have your very own web page! Feel free to add as many paragraphs and
    headings as you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: '**Seeing Your Web Page**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Save your *index.html* document and refresh the web page. [Figure 15-2](ch15.xhtml#ch15fig2)
    shows how Max’s web page looks at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0184-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 15-2:** A simple HTML page'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, HTML doesn’t do much besides adding raw text to your page; it’s
    mainly a series of paragraphs and doesn’t look pretty at all. You’re going to
    use CSS in a later section to style details and make your page look attractive.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Links, Images, and Buttons**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Any self-respecting website should contain way more than just text. We’ll show
    you how to add images, buttons, more pages, and links to other pages too.
  prefs: []
  type: TYPE_NORMAL
- en: '**Including Hyperlinks**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To add a hyperlink to another page on the internet, add the `<a>` tag anywhere
    between the `<body>` and `</body>` tags. For example, you can insert a hyperlink
    to the Inspector Rex Wikipedia page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `a` stands for *anchor* and the text that goes between these tags is called
    *anchor text*, which is `Inspector Rex` in this case. Inside the `<a>` tag, we’ve
    included the `href` attribute, which specifies where the link should go. The anchor
    text is what the page’s visitors see on the page; when they click that text, the
    Inspector Rex Wikipedia web page opens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most websites have multiple pages you can navigate through. That navigation
    between pages is also done using hyperlinks. For example, if you want to insert
    a new page—say, a photo gallery for Max—you would link to it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: On its own, this link won’t take you anywhere because the page it’s pointing
    to doesn’t yet exist. You have to create the *gallery.html* file and save it in
    the same folder as your *index.html* file. You won’t create another page in this
    project, but now you know how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Including Images**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Images make any website more appealing. To insert an image, you use the `<img>`
    tag, which doesn’t have a closing tag because you list the image you want shown
    within the angle brackets, `<>`. The file for the image you want to include has
    to be saved in the website’s folder—in this case, *Project_15*—to make it onto
    the web page. To insert an image called *max.jpg*, you use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `src` indicates the location of the image file. Because we have the image
    stored in the website’s folder, we can just use the image filename. Replace `max.jpg`
    in the code with your own image filename. You can also use a hyperlink to an image
    by replacing `max.jpg` with the hyperlink.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can resize your image either by editing the image file manually or by using
    the `height` attribute within the `<img>` tag. For example, to resize the image
    to 350 pixels in height, you use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The width adjusts automatically according to the height. You could also change
    the width with the `width` attribute and the height would readjust automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The `<img>` tag must be inside a `<p>` or a `<div>` tag—you can use a `<div>`
    tag to create a section inside your body content (see this in [Listing 15-2](ch15.xhtml#ch15list2)).
  prefs: []
  type: TYPE_NORMAL
- en: '**Including Buttons**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'To include a button on your page, insert the label you want for your button
    between the `<button>` and `</button>` tags. We want to insert a button that leads
    to a funny police dog chase video, so we use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the button clickable so it redirects you to the video page, insert
    the button tags between the `<a>` hyperlink tags to the video in question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Viewing Max’s HTML File**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: We’ve added an image, a link, and a button to Max’s web page. The code in [Listing
    15-2](ch15.xhtml#ch15list2) shows how the HTML document looks at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-2:** The HTML document for Max’s web page with a link, an image,
    and a button'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we’ve added three new tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<header>` ➊ and `</header>` ➍ contain introductory content. Inside these tags
    is the first-level heading.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="title">` ➋ and `</div>` ➌ define a division or section. The `class`
    attribute called `title` indicates that an HTML element is a member of a particular
    class—in this case, the `title` class, but you can give it any name you want.
    Using the `class` attribute is useful because it allows you to define the same
    style in CSS for multiple elements that belong to the same class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<main>` ➎ and `</main>` ➏ specify the main content of a document. This is
    where you should place content that is unique to the document—that is, content
    that isn’t repeated in the website. A single HTML document shouldn’t have more
    than one `<main>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We structured the HTML content this way because it makes it easier to use CSS
    later to format the page. [Figure 15-3](ch15.xhtml#ch15fig3) shows how the web
    page looks with the HTML file in [Listing 15-2](ch15.xhtml#ch15list2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0188-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 15-3:** Max’s web page with a link, an image, and a button'
  prefs: []
  type: TYPE_NORMAL
- en: '**STYLING YOUR PAGE WITH CSS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now you’ll add *CSS*, or *Cascading Style Sheets*, a style sheet language used
    to describe how the elements in a web page will look when rendered. You can add
    CSS either directly to the HTML file or in a separate file that you reference
    in the HTML file. In this project, you’ll create a separate file for the CSS document;
    this way, it’ll be easier to read both the CSS and HTML files and understand what
    they do.
  prefs: []
  type: TYPE_NORMAL
- en: '**Embedding a Style Sheet**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before getting to the CSS document itself, you need to embed the style sheet
    in the *index.html* file so that the HTML knows to reference an external CSS file.
    To do this, add the following line between the `<head>` and `</head>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This `<link>` tag tells the HTML file that you’re using an external style sheet
    to format how the page looks. The `rel` attribute specifies the nature of the
    external file, in this case that it is a style sheet—the CSS file—that will be
    used to alter the appearance of the page. The `type` attribute is set to `"text/css"`
    to indicate that you’re using a CSS file for the styles. The `href` attribute
    indicates the file location; again, since the file is in the website’s folder,
    you just need to reference the filename.
  prefs: []
  type: TYPE_NORMAL
- en: After you’ve added the link to refer to the style sheet, your header should
    look like [Listing 15-3](ch15.xhtml#ch15list3).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-3:** Linking to a CSS style sheet in your HTML document'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With this extra tag, the style sheet is connected to the HTML document. Creating
    a separate style sheet is useful because you can embed the same style sheet in
    several web pages with just one line.
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling Your HTML Content**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To style your HTML content, CSS uses *selectors* that define which elements
    a set of CSS rules applies to. They have *properties*, which in turn have *values*.
    The code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The set of rules that defines the style for a certain selector should go between
    curly brackets, `{}`. You attribute a value to a property with a colon (`:`),
    and every value should end with a semicolon (`;`). Each selector can have, and
    normally does have, more than one property.
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling the Header**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you’ve been following the instructions, you should have a *style.css* file
    inside the *Project_15* folder along with your *index.html* file. Open your *style.css*
    file and edit the header by entering the content in [Listing 15-4](ch15.xhtml#ch15list4).
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-4:** Styling the header with CSS'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this listing, `header` is the selector, which means that the style rules
    you’re going to describe between curly brackets will apply to the header section
    of your web page. Remember that the header section is what goes between the `<header>`
    and `</header>` tags and includes the introductory content. Here we insert a background
    image—a beautiful photo of Max. For that, we use the `background` property, whose
    value is `url(background.jpg)` ➊; inside the `url()` you write the path directory
    for the image. Replace `background.jpg` with the name of the image you want to
    use as the background. Since you’re going to save the image file in the same folder
    as the HTML and CSS files, you reference only the image filename.
  prefs: []
  type: TYPE_NORMAL
- en: Assign the `cover` value to the `background-size` property ➋. This says that
    the background image should fill the entire header section.
  prefs: []
  type: TYPE_NORMAL
- en: The `height` property has a value of `70vh` ➌, which specifies the height of
    the header. You can use one of several units for the height, but we are using
    `vh` (viewport height), which is relative to 1 percent of the height of the viewport
    and ensures the header elements can fit into the viewport. This instruction means
    the header fills 70 percent of the web browser’s window regardless of its size.
    Experiment with other percentage values and see how your page looks.
  prefs: []
  type: TYPE_NORMAL
- en: Save the CSS file and refresh the browser tab that contains the HTML document
    in order to see how your newly styled web page looks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling the title Class**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now you’ll edit the `title` class, which includes any content that goes between
    the `<div class="title">` and `</div>` tags. These tags are between the `<header>`
    and `</header>` tags, which means that the `header` is an *ancestor* of the `title`
    class. Add the snippet in [Listing 15-5](ch15.xhtml#ch15list5) to your CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-5:** Styling the `title` class'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To select elements with a specific class, use a period (`.`) followed by the
    class name, like `.title`. We’ll walk you through each element.
  prefs: []
  type: TYPE_NORMAL
- en: '**Adjusting Positions**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You can position elements using the `top`, `bottom`, `left`, and `right` properties,
    but first you need to set the `position` property ➊.
  prefs: []
  type: TYPE_NORMAL
- en: The way the elements are positioned on the page works differently depending
    on whether the `position` value is set to `static`, `relative`, `fixed`, or `absolute`.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE POSITION PROPERTY**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `position` property can have the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: static
  prefs: []
  type: TYPE_NORMAL
- en: An element with the `static` value is positioned according to the normal flow
    of the page and is not affected by the `top`, `bottom`, `left`, and `right` properties.
    By default, HTML elements are `static`.
  prefs: []
  type: TYPE_NORMAL
- en: relative
  prefs: []
  type: TYPE_NORMAL
- en: An element with the `relative` value is positioned relative to its default position
    using the `top`, `bottom`, `left`, and `right` properties.
  prefs: []
  type: TYPE_NORMAL
- en: fixed
  prefs: []
  type: TYPE_NORMAL
- en: An element with the `fixed` value remains in the same position even when the
    page is scrolled. To position the elements on the viewport, use the `top`, `bottom`,
    `left`, and `right` properties.
  prefs: []
  type: TYPE_NORMAL
- en: absolute
  prefs: []
  type: TYPE_NORMAL
- en: An element with the `absolute` value is positioned relative to its nearest ancestor.
    To adjust the position, use the `top`, `bottom`, `left`, and `right` properties.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we are using the `absolute` value. This means each element is
    positioned relative to its nearest ancestor, in this case the header section.
    Take a look at [Figure 15-4](ch15.xhtml#ch15fig4) to understand how the `title`
    class elements are positioned in relation to the header.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0191-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 15-4:** Positioning the `title` class elements inside the header section'
  prefs: []
  type: TYPE_NORMAL
- en: The `top` ➋ and `left` ➌ properties specify where each element is positioned
    in relation to its ancestor, given as a percentage, which represents how far across
    the page it appears, with `0%` being the far left and top edge of its ancestor.
    The `50%` values for `top` and `left` move the top-left corner of the `title`
    class section to the middle of its ancestor. This means the top-left corner of
    the `title` class section, rather than its center point, will be positioned at
    the center of the header section; take a look at [Figure 15-4](ch15.xhtml#ch15fig4)
    (A). You can adjust this with the `transform` property.
  prefs: []
  type: TYPE_NORMAL
- en: The `transform` property ➍, with the `translate(–50%, –40%)` values, shifts
    the position of the element. The `–``50%` value moves the `title` class element
    50 percent to the left in relation to its size, which will center it horizontally
    inside the header section—take a look at [Figure 15-4](ch15.xhtml#ch15fig4) (B).
    We also apply `–``40%` to the vertical position, to move it 40 percent up from
    the bottom (see [Figure 15-4](ch15.xhtml#ch15fig4) (C)). Try this with different
    values and see how it changes. The `–``50%` and `–``40%` work just fine for Max’s
    page, but you may want to move the text to a different position depending on your
    background image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting Text Color and Alignment**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `color` ➎ and `text-align` ➏ properties define text color and text alignment,
    respectively. You can set colors with their name—HTML recognizes basic color names—or
    by using a hexadecimal or RGB color code. We’re using hexadecimal. You can google
    *hexadecimal color picker* for a hexadecimal reference to a specific color. The
    `text-align` property takes several values like `left`, `right`, `center`, and
    `justify`, to align text to the left or right or center or justify it, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling the Headings, Paragraphs, and Links**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 15-6](ch15.xhtml#ch15list6) styles the headings, paragraphs, and links.
    Add these styles to your CSS document.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-6:** Styling headings, paragraphs, and hyperlinks'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To define the text size, use the `font-size` property ➊. There are several units
    to define the font size, but we’re going to use the `rem` unit. *Rem* is the computed
    value of `font-size` on the root element—we use one font size as a reference across
    the page. This means all font sizes are relative to each other, reducing issues
    arising from older font size units, which would cause irregularities when viewing
    the page on devices with different screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: When used in the `font-size` property of the root element, the rem units refer
    to the property’s initial value. So 1 rem is equal to the font size of the HTML
    element—that is, 16 pixels by default in most browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 15-6](ch15.xhtml#ch15list6), we define `4`, `2.5`, and `1.3` rem
    font size for the heading 1, heading 2, and paragraphs, respectively, to make
    each heading level subsequently smaller than the one above, with the lowest level
    slightly larger than the default text.
  prefs: []
  type: TYPE_NORMAL
- en: The `main` section formats the main content of your page ➋. We’re setting the
    maximum width of content to `500px`. Defining the width of an element prevents
    the element from stretching to the boundaries of its container; in this case,
    it prevents the text from spreading horizontally on the web browser window. Then,
    we set the margins with `auto` to center the element horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperlinks are underlined by default. Set `text-``decoration` to `none` ➌ to
    remove the underline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Styling the Button**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To style the button, copy the styles in [Listing 15-7](ch15.xhtml#ch15list7)
    to your *style.css* document file.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 15-7:** Styling the button'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Setting `display` to `block` ensures the button is displayed as a block element,
    like a paragraph; so, for example, the button will not be on the same line as
    a text element. We use the `padding` property to add space around content. We
    define a padding of `10px` for the top and bottom margins of the button and `20px`
    for the right and left margins—this sets how much space surrounds the button’s
    content. Notice that here we’re using the hexadecimal color code for setting the
    color of the button text and the button background color. The other button properties
    are self-explanatory. Play with these properties to style the button to your liking.
    You can also search for *button properties CSS* on the web for more properties
    and values.
  prefs: []
  type: TYPE_NORMAL
- en: Save your *style.css* file and refresh your browser to see the changes you’ve
    made. You should now have a simple web page similar to the one shown at the beginning
    of this project.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This project was just a quick introduction on how to build a simple web page
    with HTML and CSS. There are endless ways in which you can edit and improve it.
    We encourage you to play around with all the options introduced here. For inspiration,
    you could:'
  prefs: []
  type: TYPE_NORMAL
- en: Add multiple pages to your main page with hyperlinks to each other.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a web page that showcases one of your Raspberry Pi projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search the web for more CSS properties and values and edit the way your page
    looks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
