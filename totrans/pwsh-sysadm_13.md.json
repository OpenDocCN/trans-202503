["```\nPS> Get-Module -Name ActiveDirectory -List  \nDirectory: C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\n\nModuleType  Version  Name             ExportedCommands\n----------  -------  ----             ----------------\nManifest    1.0.0.0  ActiveDirectory  {Add-ADCentralAccessPolicyMember,...\n```", "```\nPS> Get-Command -Module ActiveDirectory -Verb Get -Noun *computer*\n\nCommandType     Name                               Version    Source\n-----------     ----                               -------    ------\nCmdlet          Get-ADComputer                     1.0.0.0    ActiveDirectory\nCmdlet          Get-ADComputerServiceAccount       1.0.0.0    ActiveDirectory\n\nPS> Get-Command -Module ActiveDirectory -Verb Get -Noun *user*\n\nCommandType     Name                               Version    Source\n-----------     ----                               -------    ------\nCmdlet          Get-ADUser                         1.0.0.0    ActiveDirectory\nCmdlet          Get-ADUserResultantPasswordPolicy  1.0.0.0    ActiveDirectory\n\nPS> Get-Command -Module ActiveDirectory -Verb Get -Noun *group*\n\nCommandType     Name                               Version    Source\n-----------     ----                               -------    ------\nCmdlet          Get-ADAccountAuthorizationGroup    1.0.0.0    ActiveDirectory\nCmdlet          Get-ADGroup                        1.0.0.0    ActiveDirectory\nCmdlet          Get-ADGroupMember                  1.0.0.0    ActiveDirectory\nCmdlet          Get-ADPrincipalGroupMembership     1.0.0.0    ActiveDirectory\n```", "```\nPS> Get-ADUser -Filter *\n\nDistinguishedName : CN=adam,CN=Users,DC=lab,DC=local\nEnabled           : True\nGivenName         :\nName              : adam\nObjectClass       : user\nObjectGUID        : 5e53c562-4fd8-4620-950b-aad8fbaa84db\nSamAccountName    : adam\nSID               : S-1-5-21-930245869-402111599-3553179568-500\nSurname           :\nUserPrincipalName :\n--snip--\n```", "```\nPS> Search-ADAccount -AccountInactive -TimeSpan 90.00:00:00 -UsersOnly\n```", "```\nGet-ADUser -Filter \"samAccountName -eq 'jjones'\"\n```", "```\nGet-ADUser -Identity jjones\n```", "```\nPS> Get-AdUser -Filter * -Properties passwordlastset  | select name,passwordlastset\n\nname           passwordlastset\n----           ---------------\nadam           2/22/2019 6:45:40 AM\nGuest\nDefaultAccount\nkrbtgt         2/22/2019 3:03:32 PM\nNon-Priv User  2/22/2019 3:12:38 PM\nabertram\nabertram2\nfbar\n--snip--\n```", "```\nPS> $today = Get-Date\nPS> $30DaysAgo = $today.AddDays(-30)\n```", "```\nPS> Get-ADUser -Filter \"passwordlastset -lt '$30DaysAgo'\"\n```", "```\n$today = Get-Date\n$30DaysAgo = $today.AddDays(-30)\nGet-ADUser -Filter \"Enabled -eq 'True' -and passwordlastset –lt\n'$30DaysAgo'\"\n```", "```\n$schema =[DirectoryServices.ActiveDirectory.ActiveDirectorySchema]::GetCurrentSchema()\n$userClass = $schema.FindClass('user')\n$userClass.GetAllProperties().Name\n```", "```\nPS> Get-ADUser -Filter \"givenName -eq 'Jane' -and surName –eq\n'Jones'\" | Set-ADUser -Surname 'Smith'\nPS> Get-ADUser -Filter \"givenName -eq 'Jane' -and surName –eq\n'Smith'\"\n\nDistinguishedName : CN=jjones,CN=Users,DC=lab,DC=local\nEnabled           : False\nGivenName         : Jane\nName              : jjones\nObjectClass       : user\nObjectGUID        : fbddbd77-ac35-4664-899c-0683c6ce8457\nSamAccountName    : jjones\nSID               : S-1-5-21-930245869-402111599-3553179568-3103\nSurname           : Smith\nUserPrincipalName :\n```", "```\nPS> Get-ADUser -Filter \"givenName -eq 'Jane' -and surname –eq\n'Smith'\" | Set-ADUser -Department 'HR' -Title Director\nPS> Get-ADUser -Filter \"givenName -eq 'Jane' -and surname –eq\n'Smith'\" -Properties GivenName,SurName,Department,Title\n\nDepartment        : HR\nDistinguishedName : CN=jjones,CN=Users,DC=lab,DC=local\nEnabled           : False\nGivenName         : Jane\nName              : jjones\nObjectClass       : user\nObjectGUID        : fbddbd77-ac35-4664-899c-0683c6ce8457\nSamAccountName    : jjones\nSID               : S-1-5-21-930245869-402111599-3553179568-3103\nSurname           : Smith\nTitle             : Director\nUserPrincipalName :\n```", "```\nPS> New-ADGroup -Name 'AdamBertramLovers' \n-Description 'All Adam Bertram lovers in the company' \n-GroupScope DomainLocal\n```", "```\nPS> Get-ADGroup -Identity AdamBertramLovers | \nSet-ADGroup -Description 'More Adam Bertram lovers'\n```", "```\nPS> Get-ADGroup -Identity AdamBertramLovers | Add-ADGroupMember Members 'jjones'\nPS> Get-ADGroup -Identity AdamBertramLovers | Remove-ADGroupMember-Members 'jjones'\n\n    Confirm\nAre you sure you want to perform this action?\nPerforming the operation \"Set\" on target\n\"CN=AdamBertramLovers,CN=Users,DC=lab,DC=local\".\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  \n[?]\nHelp (default is \"Y\"): a\n```", "```\n#requires -Module ActiveDirectory\n\n[CmdletBinding()]\nparam (\n    [Parameter(Mandatory)]\n    [string]$FirstName,\n\n    [Parameter(Mandatory)]\n    [string]$LastName,\n\n    [Parameter(Mandatory)]\n    [string]$Department,\n\n [Parameter(Mandatory)]\n    [int]$EmployeeNumber\n)\n\ntry {\n\n} catch {\n    Write-Error -Message $_.Exception.Message\n}\n```", "```\n$userName = '{0}{1}' -f $FirstName.Substring(0, 1), $LastName\n```", "```\nGet-ADUser -Filter \"samAccountName -eq '$userName'\"\n```", "```\n(Get-ADUser -Filter \"samAccountName -eq '$userName'\") –and\n($userName -notlike \"$FirstName*\")\n```", "```\n$i = 2\nwhile ((Get-ADUser -Filter \"samAccountName -eq '$userName'\") –and\n($userName -notlike \"$FirstName*\")) {\n    Write-Warning -Message \"The username [$($userName)] already exists. Trying another...\"\n    $userName = '{0}{1}' -f $FirstName.Substring(0, $i), $LastName\n    Start-Sleep -Seconds 1\n    $i++\n}\n```", "```\nif (-not ($ou = Get-ADOrganizationalUnit -Filter \"Name –eq '$Department'\")) {\n    throw \"The Active Directory OU for department [$($Department)] could not be found.\"\n} elseif (-not (Get-ADGroup -Filter \"Name -eq '$Department'\")) {\n    throw \"The group [$($Department)] does not exist.\"\n}\n```", "```\nAdd-Type -AssemblyName 'System.Web'\n$password = [System.Web.Security.Membership]::GeneratePassword(\n    (Get-Random Minimum 20 -Maximum 32), 3)\n$secPw = ConvertTo-SecureString -String $password -AsPlainText -Force\n```", "```\n$newUserParams = @{\n    GivenName             = $FirstName\n    EmployeeNumber        = $EmployeeNumber\n    Surname               = $LastName\n    Name                  = $userName\n    AccountPassword       = $secPw\n    ChangePasswordAtLogon = $true\n    Enabled               = $true\n    Department            = $Department\n    Path                  = $ou.DistinguishedName\n    Confirm               = $false\n}\nNew-ADUser @newUserParams\n```", "```\nAdd-ADGroupMember -Identity $Department -Members $userName\n```", "```\n\"fname\",\"lname\",\"dept\"\n\"Adam\",\"Bertram\",\"IT\"\n\"Barack\",\"Obama\",\"Executive Office\"\n\"Miranda\",\"Bertram\",\"Executive Office\"\n\"Michelle\",\"Obama\",\"Executive Office\"\n```", "```\n$syncFieldMap = @{   \n    fname = 'GivenName'\n    lname = 'Surname'   \n    dept = 'Department'\n}\n```", "```\n$fieldMatchIds = @{\n    AD = @('givenName','surName')\n    CSV = @('fname','lname')\n}\n```", "```\nfunction Get-AcmeEmployeeFromCsv\n{    \n[CmdletBinding()]\n    param (\n        [Parameter()]\n        [string]$CsvFilePath = 'C:\\Employees.csv',\n        [Parameter(Mandatory)]\n        [hashtable]$SyncFieldMap,\n [Parameter(Mandatory)]\n        [hashtable]$FieldMatchIds\n    )\n    try {\n        ## Read each key/value pair in $SyncFieldMap to create calculated\n        ## fields which we can pass to Select-Object later. This allows us to\n        ## return property names that match Active Directory attributes rather\n        ## than what's in the CSV file.\n     ❶ $properties = $SyncFieldMap.GetEnumerator() | ForEach-Object {\n            @{\n                Name = $_.Value\n                Expression = [scriptblock]::Create(\"`$_.$($_.Key)\")\n            }\n        }\n        ## Create the unique ID based on the unique fields defined in\n        ## $FieldMatchIds\n     ❷ $uniqueIdProperty = '\"{0}{1}\" -f '\n        $uniqueIdProperty = $uniqueIdProperty += \n        ($FieldMatchIds.CSV | ForEach-Object { '$_.{0}' -f $_ }) – join ','\n        $properties += @{\n            Name = 'UniqueID'\n            Expression = [scriptblock]::Create($uniqueIdProperty)\n        }\n        ## Read the CSV file and \"transform\" the CSV fields to AD attributes\n        ## so we can compare apples to apples\n     ❸ Import-Csv -Path $CsvFilePath | Select-Object – Property $properties\n    } catch {\n        Write-Error -Message $_.Exception.Message\n    }\n}\n```", "```\nPS> Get-AcmeEmployeeFromCsv -SyncFieldMap $syncFieldMap \n-FieldMatchIds $fieldMatchIds\n\nGivenName Department       Surname UniqueID\n--------- ----------       ------- --------\nAdam      IT               Bertram AdamBertram\nBarack    Executive Office Obama   BarackObama\nMiranda   Executive Office Bertram MirandaBertram\nMichelle  Executive Office Obama   MichelleObama\n```", "```\nfunction Get-AcmeEmployeeFromAD\n{\n    [CmdletBinding()]\n    param (\n        [Parameter(Mandatory)]\n        [hashtable]$SyncFieldMap,\n\n        [Parameter(Mandatory)]\n        [hashtable]$FieldMatchIds\n    )\n\n    try {\n        $uniqueIdProperty = '\"{0}{1}\" -f '\n        $uniqueIdProperty += ($FieldMatchIds.AD | ForEach Object { '$_.{0}' -f $_ }) -join ','\n\n        $uniqueIdProperty = @{ ❶\n            Name = 'UniqueID'\n            Expression = [scriptblock]::Create($uniqueIdProperty)\n        }\n\n        Get-ADUser -Filter * -Properties @($SyncFieldMap.Values) | Select-Object *,$uniqueIdProperty ❷\n\n    } catch {\n        Write-Error -Message $_.Exception.Message\n    }\n}\n```", "```\nfunction Find-UserMatch {\n    [OutputType()]\n    [CmdletBinding()]\n    param\n    (\n        [Parameter(Mandatory)]\n        [hashtable]$SyncFieldMap,\n\n        [Parameter(Mandatory)]\n        [hashtable]$FieldMatchIds \n    )\n    $adusers = Get-AcmeEmployeeFromAD -SyncFieldMap $SyncFieldMap -FieldMatchIds $FieldMatchIds ❶\n\n    $csvUsers = Get-AcmeEmployeeFromCSV -SyncFieldMap $SyncFieldMap -FieldMatchIds $FieldMatchIds ❷\n\n    $adUsers.foreach({\n        $adUniqueId = $_.UniqueID\n        if ($adUniqueId) { ❸\n            $output = @{\n                CSVProperties = 'NoMatch'\n                ADSamAccountName = $_.samAccountName\n            }\n            if ($adUniqueId -in $csvUsers.UniqueId) { ❹\n                $output.CSVProperties = ($csvUsers.Where({$_.UniqueId -eq $adUniqueId})) ❺\n            }\n            [pscustomobject]$output\n        }\n    })\n}\n```", "```\nPS> Find-UserMatch -SyncFieldMap $syncFieldMap -FieldMatchIds $fieldMatchIds\n\nADSamAccountName CSVProperties\n---------------- -------------\nuser             NoMatch\nabertram         {@{GivenName=Adam; Department=IT;\n                 Surname=Bertram; UniqueID=AdamBertram}}\ndbddar           NoMatch\njjones           NoMatch\nBSmith           NoMatch\n```", "```\n## Find all of the CSV <--> AD user account matches\n$positiveMatches = (Find-UserMatch -SyncFieldMap $syncFieldMap -FieldMatchIds $fieldMatchIds).where({ $_.CSVProperties -ne 'NoMatch' })\nforeach ($positiveMatch in $positiveMatches) {\n    ## Create the splatting parameters for Set-ADUser using\n    ## the identity of the AD samAccountName\n    $setADUserParams = @{\n        Identity = $positiveMatch.ADSamAccountName\n    }\n\n    ## Read each property value that was in the CSV file\n    $positiveMatch.CSVProperties.foreach({\n        ## Add a parameter to Set-ADUser for all of the CSV\n        ## properties excluding UniqueId\n        ## Find all of the properties on the CSV row that are NOT UniqueId\n        $_.PSObject.Properties.where({ $_.Name –ne 'UniqueID' }).foreach({\n            $setADUserParams[$_.Name] = $_.Value\n        })\n    })\n    Set-ADUser @setADUserParams\n}\n```"]