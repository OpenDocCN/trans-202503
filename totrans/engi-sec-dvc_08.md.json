["```\nBase address: 0x5C00 5000 (BSEC base address on APB5)\nAddress offset: 0x234 = UID[31:0]\nAddress offset: 0x238 = UID[63:32]\nAddress offset: 0x23C = UID[95:64]\n```", "```\n# devmem2 0x5c005234\n...\nRead at address  0x5C005234 (0xb6fb0234): 0x0038003D\n# devmem2 0x5c005238\n...\nRead at address  0x5C005238 (0xb6fb9238): 0x34385114\n # devmem2 0x5c00523c\n...\nRead at address  0x5C00523C (0xb6f1423c): 0x36383238\n```", "```\n# cat /proc/cpuinfo | grep Serial\nSerial : 0038003D3438511436383238\n```", "```\n# cat /sys/class/net/eth0/address\n10:e7:7a:e1:81:65\n# cat /sys/class/net/wlan0/address\n48:eb:62:c4:0a:08\n# cat /sys/kernel/debug/bluetooth/hci0/identity\n43:43:a1:12:1f:ac (type 0) 00000000000000000000000000000000 00:00:00:00:00:00\n```", "```\n# cat /sys/block/mmcblk0/device/cid\n275048534431364760dad3df9a013780\n# cat /sys/block/mmcblk0/device/serial\n0xdad3df9a\n```", "```\nimport subprocess\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography import x509\nfrom cryptography.x509.oid import NameOID\nfrom cryptography.hazmat.primitives import hashes\n```", "```\n# Generate RSA key\nkey = rsa.generate_private_key(public_exponent=65537, key_size=4096 ➊)\n\n# Write key to disk\nwith open('dev.key', 'wb') as f:\n    f.write(key.private_bytes(\n        encoding=serialization.Encoding.PEM,\n        format=serialization.PrivateFormat.TraditionalOpenSSL,\n        encryption_algorithm=\n        serialization.BestAvailableEncryption(➋ b'PrivateKeyPassphrase'),\n    ))\n```", "```\n   # Collect system data\n➊ output = subprocess.Popen('cat /proc/cpuinfo | grep Serial',\n            shell=True, stdout=subprocess.PIPE)\n   cpu_serial = output.stdout.read().split()[2](@\\newpage@)\n➋ output = subprocess.Popen('cat /sys/class/net/wlan0/address',\n            shell=True, stdout=subprocess.PIPE)\n   wifi_mac = output.stdout.read().split()[0]\n\n   # Hash collected system data\n➌ digest = hashes.Hash(hashes.SHA256())\n   digest.update(cpu_serial)\n   digest.update(wifi_mac)\n   system_id = digest.finalize()\n➍ system_id = system_id[:4].hex()\n```", "```\n   # Manufacturer data\n   manufacturer = 'IoT Devices Corp'\n   manufacturer_device_serial_no = 'IOTDEV-1337-08151234'\n\n   # System name for CSR and certificate\n➊ cert_common_name = manufacturer_device_serial_no + '-' + system_id\n\n   # Generate CSR and sign with private key\n   csr = x509.CertificateSigningRequestBuilder().subject_name(x509.Name([\n       x509.NameAttribute(NameOID.ORGANIZATION_NAME, manufacturer),\n    ➋  x509.NameAttribute(NameOID.COMMON_NAME, cert_common_name),\n➋ ])).sign(key, hashes.SHA256())\n\n   # Write CSR to disk\n   with open('dev.csr', 'wb') as f:\n       f.write(csr.public_bytes(serialization.Encoding.PEM))\n```", "```\nCollected CPU serial number:  0038003D3438511436383238\nCollected Wi-Fi MAC address:  48:eb:62:c4:0a:08\nDerived system identifier:    f30cf858\nGiven device serial number:   IOTDEV-1337-08151234\nCommon name in certificate:   IOTDEV-1337-08151234-f30cf858\n```", "```\n$ openssl req -in dev.csr -noout -text\nCertificate Request:\n    Data:\n        Version: 1 (0x0)\n      ➊ Subject: O = IoT Devices Corp, CN = IOTDEV-1337-08151234-f30cf858\n      ➋ Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (4096 bit)\n                Modulus:\n                    00:d3:a0:14:fb:e1:0e:d0:74:3d:26:d4:ef:a1:ed:\n                    ...\n                    c9:2a:f5:46:e4:b2:ad:a9:5e:ee:cb:79:85:d9:1e:\n                    9f:3e:57\n                Exponent: 65537 (0x10001)\n        Attributes:\n            (none)\n            Requested Extensions:\n    Signature Algorithm: sha256WithRSAEncryption\n  ➌ Signature Value:\n         81:98:b1:e8:c2:fe:3a:55:32:39:2e:27:ce:2c:a8:54:bd:04:\n         ...\n         17:77:6c:a1:5b:4a:a7:ed:22:55:33:23:26:55:05:90:26:d2:\n         90:7a:5e:34:65:80:32:4e\n```", "```\n$ openssl genrsa -out ca.key 4096\n$ openssl req -new -x509 -key ca.key \\\n              -subj \"/C=DE/L=Augsburg/O=Super Trusted Party/CN=CA 123\" \\\n              -out ca.crt\n```", "```\n$ openssl x509 -req -in dev.csr -CA ca.crt -CAkey ca.key -CAcreateserial \\\n               -days 3650 -out dev.crt\n```", "```\n$ openssl x509 -in dev.crt -noout -text\nCertificate:\n    Data:\n        Version: 1 (0x0)\n        Serial Number:\n         ➊ 45:3c:c3:30:c1:e3:c2:a9:49:5c:14:d6:16:5d:79:69:24:6c:31:66\n        Signature Algorithm: sha256WithRSAEncryption\n      ➋ Issuer: C = DE, L = Augsburg, O = Super Trusted Party, CN = CA 123\n        Validity\n            Not Before: Apr  5 11:18:13 2024 GMT\n ➌ Not After : Apr  2 11:18:13 2034 GMT\n        Subject: O = IoT Devices Corp, CN = IOTDEV-1337-08151234-f30cf858\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                RSA Public-Key: (4096 bit)\n                Modulus:\n                    00:d3:a0:14:fb:e1:0e:d0:74:3d:26:d4:ef:a1:ed:\n                    ...\n                    c9:2a:f5:46:e4:b2:ad:a9:5e:ee:cb:79:85:d9:1e:\n                    9f:3e:57\n                Exponent: 65537 (0x10001)\n    Signature Algorithm: sha256WithRSAEncryption\n  ➍ Signature Value:\n         75:d5:07:71:ec:fe:c6:27:fd:e2:a7:1c:fa:b9:89:b3:9c:0f:\n         ...\n         8d:fa:f6:f1:53:79:32:1e:a8:ec:6f:f7:03:57:2f:7b:f4:fb:\n         45:77:6a:f8:c6:70:72:41\n```", "```\nimport time\nfrom cryptography.hazmat.primitives.asymmetric import rsa\n\ntime_data = []\nfor n in range(16):\n    start_time   = time.time()\n    key = rsa.generate_private_key(public_exponent=65537, key_size=4096)\n elapsed_time = time.time() - start_time\n    print('Try', n, ': RSA 4096-bit key generation took',\n          '{:.3f}'.format(elapsed_time), 'seconds!')\n    time_data.append(elapsed_time)\nprint('MIN:', '{:.3f}'.format(min(time_data)), 'seconds')\nprint('MAX:', '{:.3f}'.format(max(time_data)), 'seconds')\nprint('AVG:', '{:.3f}'.format(sum(time_data)/len(time_data)), 'seconds')\n```", "```\n# python3 rsa_key_gen_time.py\nTry 0 : RSA 4096-bit key generation took 59.920 seconds!\nTry 1 : RSA 4096-bit key generation took 28.696 seconds!\nTry 2 : RSA 4096-bit key generation took 72.872 seconds!\nTry 3 : RSA 4096-bit key generation took 109.765 seconds!\n...\nTry 12 : RSA 4096-bit key generation took 48.925 seconds!\nTry 13 : RSA 4096-bit key generation took 50.885 seconds!\nTry 14 : RSA 4096-bit key generation took 90.907 seconds!\nTry 15 : RSA 4096-bit key generation took 40.634 seconds!\nMIN: 28.696 seconds\nMAX: 109.765 seconds\nAVG: 62.768 seconds\n```"]