- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Infrared Remote Control
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter you will
  prefs: []
  type: TYPE_NORMAL
- en: Create and test a simple infrared receiver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remotely control Arduino digital output pins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a remote control system to the robot vehicle we created in Chapter 14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you’ll see, with the addition of an inexpensive receiver module, your Arduino
    can receive the signals from an infrared remote and act upon them.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Infrared?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many people use infrared remote controls in a variety of daily actions, and
    most don’t know how they work. Infrared (IR) signals are beams of light at a wavelength
    that cannot be seen by the naked eye. So when you look at the little LED poking
    out of a remote control and press a button, you won’t see the LED light up.
  prefs: []
  type: TYPE_NORMAL
- en: That’s because IR remote controls contain one or more special infrared light–generating
    LEDs that transmit the IR signals. When you press a button on the remote, the
    LED turns on and off repeatedly in a pattern that is unique for each button pressed.
    This signal is received by a special IR receiver on the device being controlled
    and converted to pulses of electrical current that are read as data by the receiver’s
    electronics. If you are curious about these patterns, you can view them by looking
    at the IR LED on a remote through the viewfinder of a phone camera or digital
    camera.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up for Infrared
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before moving forward, we need to install the Arduino IRremote library, so visit
    [https://github.com/z3t0/Arduino-IRremote/archive/master.zip](https://github.com/z3t0/Arduino-IRremote/archive/master.zip)to
    download the required files and install them using the method described in Chapter
    7.
  prefs: []
  type: TYPE_NORMAL
- en: The IR Receiver
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is to set up the IR receiver and test that it is working. You
    can choose either an independent IR receiver (shown in [Figure 17-1](#figure17-1))
    or a prewired module (shown in [Figure 17-2](#figure17-2)), whichever is easier
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: '![f17001](image_fi/500587c17/f17001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-1: An IR receiver'
  prefs: []
  type: TYPE_NORMAL
- en: '![f17002](image_fi/500587c17/f17002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-2: A prewired IR receiver module'
  prefs: []
  type: TYPE_NORMAL
- en: The independent IR receiver shown in [Figure 17-1](#figure17-1) is a Vishay
    TSOP4138\. The bottom leg of the receiver (as shown in the figure) connects to
    an Arduino digital pin, the center leg to GND, and the top leg to 5 V.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 17-2](#figure17-2) shows a prewired IR module. Prewired receiver modules
    are available from PMD Way and other retailers. The benefit of using these modules
    is that they include connection wires and are labeled for easy reference.'
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of your choice of module, in all of the following examples, you’ll
    connect D (the data line) to Arduino digital pin 2, VCC to 5 V, and GND to GND.
  prefs: []
  type: TYPE_NORMAL
- en: The Remote Control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, you will need a remote control. I’ve used a surplus Sony TV remote
    like the one shown in [Figure 17-3](#figure17-3). If you don’t have access to
    a Sony remote, any inexpensive universal remote control can be used after you
    reset it to Sony codes. See the instructions included with your remote control
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: '![f17003](image_fi/500587c17/f17003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-3: A typical Sony remote control'
  prefs: []
  type: TYPE_NORMAL
- en: A Test Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s make sure that everything works. After connecting your IR receiver
    to the Arduino, enter and upload the sketch in [Listing 17-1](#listing17-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 17-1: IR receiver test'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch is relatively simple, because most of the work is done in the background
    by the IR library. At 4, we check whether a signal has been received from the
    remote control. If so, it is displayed in the Serial Monitor in hexadecimal at
    5. The lines at 1, 2, and 3 activate the IR library and create an instance of
    the infrared library function to refer to in the rest of the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you’ve uploaded the sketch, open the Serial Monitor, aim the remote at
    the receiver, and start pressing buttons. You should see codes for the buttons
    displayed in the Serial Monitor after each button press. For example, [Figure
    17-4](#figure17-4) shows the results of pressing 1, 2, and 3, once each.
  prefs: []
  type: TYPE_NORMAL
- en: '![f17004](image_fi/500587c17/f17004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-4: Results of pressing buttons after running the code in [Listing
    17-1](#listing17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 17-1](#table17-1) lists the codes from a basic Sony remote control that
    we’ll use in upcoming sketches. However, when running [Listing 17-1](#listing17-1),
    notice that each code number repeats three times. This is an idiosyncrasy of Sony
    IR systems, which send the code three times for each button press. You can ignore
    these repeats with some clever coding, but for now, let’s skip to remote controlling
    with the next project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 17-1: Example Sony IR codes'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Button** | **Code** | **Button** | **Code** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Power | A90 | 7 | 610 |'
  prefs: []
  type: TYPE_TB
- en: '| Mute | 290 | 8 | E10 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 10 | 9 | 110 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 810 | 0 | 910 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 410 | Volume up | 490 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | C10 | Volume down | C90 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 210 | Channel up | 90 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | A10 | Channel down | 890 |'
  prefs: []
  type: TYPE_TB
- en: 'Project #50: Creating an IR Remote Control Arduino'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This project will demonstrate how to control digital output pins using an IR
    remote control. You’ll control digital pins 3 through 7 with the matching numerical
    buttons 3 through 7 on a Sony remote control. When you press a button on the remote
    control, the matching digital output pin will change state to `HIGH` for 1 second
    and then return to `LOW`. You’ll be able to use this project as a base or guide
    to add remote control capabilities to your other projects.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following hardware is required for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Arduino and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Five LEDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Five 560 Ω resistors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrared receiver or module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Schematic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The circuit consists of the infrared receiver with the output connected to digital
    pin 2 and five LEDs with current-limiting resistors connected to digital pins
    3 to 7 inclusive, as shown in [Figure 17-5](#figure17-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![f17005](image_fi/500587c17/f17005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17-5: Schematic for Project 50'
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This sketch has three major parts. First, it waits for a signal from the remote
    at 4. When a signal is received, the signal is tested in the function `translateIR()`
    at 1 to determine which button was pressed and what action to take.
  prefs: []
  type: TYPE_NORMAL
- en: Notice at 2 that we compare the hexadecimal codes returned by the IR library.
    These are the codes returned by the test conducted in [Listing 17-1](#listing17-1).
    When the codes for buttons 3 through 7 are received, the function `pinOn()` at
    3 is called, which turns on the matching digital pin for 1 second.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, Sony remotes send the code three times for each button press,
    so we use a small loop at 5 to ignore the second and third codes. Finally, note
    the addition of `0x` in front of the hexadecimal numbers used in the `case` statements
    at 2.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can expand the options or controls available for controlling your receiving
    device by testing more buttons. To do so, use [Listing 17-1](#listing17-1) to
    determine which button creates which code and then add each new code to the `switch
    case` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project #51: Creating an IR Remote Control Robot Vehicle'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To show you how to integrate an IR remote control into an existing project,
    we’ll add IR to the robot described in Project 39 in Chapter 14. In this project,
    instead of presetting the robot’s direction and distances, the sketch will show
    you how to control these actions with a simple Sony TV remote.
  prefs: []
  type: TYPE_NORMAL
- en: The Hardware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The required hardware is the same as that required for the robot you built
    for Project 39, with the addition of the IR receiver module described earlier
    in this chapter. In the following sketch, the robot will respond to the buttons
    that you press on the remote control as follows: press 2 for forward, 8 for backward,
    4 for rotate left, and 6 for rotate right.'
  prefs: []
  type: TYPE_NORMAL
- en: The Sketch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After reassembling your vehicle and adding the IR receiver, enter and upload
    the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This sketch should look somewhat familiar to you. Basically, instead of lighting
    up LEDs on digital pins, it calls the motor control functions that were used in
    the robot vehicle from Chapter 14.
  prefs: []
  type: TYPE_NORMAL
- en: Looking Ahead
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having worked through the projects in this chapter, you should understand how
    to send commands to your Arduino via an infrared remote control device. Using
    these skills and your knowledge from previous chapters, you now can replace physical
    forms of input such as buttons with a remote control.
  prefs: []
  type: TYPE_NORMAL
- en: 'But the fun doesn’t stop here. In the next chapter, we’ll use an Arduino to
    harness something that, to the untrained eye, is fascinating and futuristic: radio
    frequency identification systems.'
  prefs: []
  type: TYPE_NORMAL
