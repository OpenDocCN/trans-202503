- en: '**16'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Connecting your Electronics to the Web**
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll create your own Internet of Things web server you can
    use to control a lamp remotely from your phone. The simple web server you’ll build
    can then be added to other projects so you can control other electronic appliances.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0196-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PARTS REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Raspberry Pi
  prefs: []
  type: TYPE_NORMAL
- en: Relay module HL-52S
  prefs: []
  type: TYPE_NORMAL
- en: 12 V lamp and holder
  prefs: []
  type: TYPE_NORMAL
- en: 12 V power adapter
  prefs: []
  type: TYPE_NORMAL
- en: Male DC bar rel power jack
  prefs: []
  type: TYPE_NORMAL
- en: Plastic box enclosure
  prefs: []
  type: TYPE_NORMAL
- en: Jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '**SOFTWARE REQUIRED**'
  prefs: []
  type: TYPE_NORMAL
- en: Flask framework
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’re going to create your own web server to control your electronics
    through a browser. You’ll control a 12 V lamp using a dynamic web page with buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING WEB SERVERS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A web server is a computer that provides web pages. It stores the website’s
    files, including all HTML documents and related assets like images, CSS style
    sheets, fonts, and video. It also brings those files to the user’s device web
    browser when the user makes a request to the server’s URL.
  prefs: []
  type: TYPE_NORMAL
- en: When you access a web page in your browser, you’re actually sending a request
    via *Hypertext Transfer Protocol (HTTP)* to a server. This is simply a process
    for requesting and returning information on the internet. The server sends back
    the web page you requested—also through HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: In this project you’ll use your Raspberry Pi to host a web server on the local
    network, as illustrated in [Figure 16-1](ch16.xhtml#ch16fig1).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0197-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-1:** Your Raspberry Pi running a web server'
  prefs: []
  type: TYPE_NORMAL
- en: As a server, your Raspberry Pi can provide some output through its GPIO pins.
    In other words, using a browser on your local network, you can access the Pi web
    server to remotely control the GPIOs and turn something on.
  prefs: []
  type: TYPE_NORMAL
- en: Web servers can serve *static* or *dynamic* content. The content of a static
    website doesn’t change unless you edit its HTML file. The website built in [Project
    15](ch15.xhtml#ch15) is an example of a static website. With a dynamic website,
    the content changes based on user interactions. In this project, you’ll create
    a dynamic website that controls and shows the current state of a 12 V lamp connected
    to a relay, which we’ll look at more closely in a second.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Only devices that are connected to the same router as your Pi can access a
    web page hosted in your Pi through a browser. Accessing your web server from*
    outside *your network is more difficult. You can make your Raspberry Pi web server
    accessible from any computer anywhere by using a technique called* router port
    forwarding, *but that subject is beyond the book’s scope.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**INTRODUCING THE RELAY MODULE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *relay* is an electrically operated switch that can be turned on or off, letting
    the current go through or not, and can be controlled with low voltages, like the
    3.3 V provided by the Raspberry Pi. The relay module you’ll use in this project
    has two relays—the two blue cubes shown in [Figure 16-2](ch16.xhtml#ch16fig2).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0198-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-2:** Relay module with two channels'
  prefs: []
  type: TYPE_NORMAL
- en: The six pins on the left side of the relay module connect high voltage, and
    the pins on the right side connect the component that requires low voltage—the
    Raspberry Pi GPIOs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Relay Pinout**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The high-voltage side has two connectors, each with three sockets: *common
    (COM)*, *normally closed (NC)*, and *normally open (NO)*. The normally closed
    configuration is used when you want the relay to be closed by default, meaning
    the current is flowing unless you send a signal from the Pi to the relay module
    to open the circuit and stop the current. The normally open configuration works
    the other way around: the relay is always open, so the circuit is broken unless
    you send a signal from the Pi to close it.'
  prefs: []
  type: TYPE_NORMAL
- en: The low-voltage side has a set of four pins and a set of three pins. The first
    set consists of VCC and GND to power up the module, and input 1 (IN1) and input
    2 (IN2) to control the bottom and top relays, respectively. The second set of
    pins consists of GND, VCC, and JD-VCC pins. The JD-VCC pin powers the electromagnet
    of the relay. Notice that the module has a jumper cap connecting the VCC and JD-VCC
    pins; the one shown here is blue, but yours may be a different color.
  prefs: []
  type: TYPE_NORMAL
- en: The jumper cap allows you to choose whether the circuit is physically connected
    to the Pi circuit or not, and you can choose to have it on or not. With the jumper
    cap on, the VCC and JD-VCC pins are connected. That means the relay electromagnet
    is directly powered from the Pi’s power pin, so the relay module and the Raspberry
    Pi circuits are not physically isolated from each other. This is the configuration
    we’ll use. Without the jumper cap, you need to provide an independent power source
    to power up the relay’s electromagnet through the JD-VCC pin. That configuration
    physically isolates the relays from the Raspberry Pi with the module’s built-in
    optocoupler, which prevents damage to the Pi in case of electrical spikes.
  prefs: []
  type: TYPE_NORMAL
- en: '**THE OPTOCOUPLER**'
  prefs: []
  type: TYPE_NORMAL
- en: We won’t go into too much detail about the optocoupler. It is basically a component
    that allows you to send signals between two isolated circuits so that you can
    control high voltages with low voltages without actually having a physical connection
    between those two circuits. The optocoupler makes the “connection” between the
    circuits using an LED that emits light and a phototransistor that receives the
    light and then activates or deactivates the relay.
  prefs: []
  type: TYPE_NORMAL
- en: '**Relay Usage**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll use a normally open configuration for this project. You want to light
    the lamp only when you choose to, so the circuit should be broken until you say
    otherwise. For this, you use the COM and NO sockets.
  prefs: []
  type: TYPE_NORMAL
- en: In a normally open configuration, there is no contact between the COM and NO
    sockets unless you trigger the relay. The relay is triggered when the input goes
    below about 2 V. That means if you send a LOW signal from the Pi, the relay turns
    on, and if you send a HIGH signal, the relay turns off; this is called *inverted
    logic*. You’ll control just one relay, so you’ll connect IN1 to one of the Pi’s
    GPIO pins.
  prefs: []
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you’re not comfortable dealing with higher voltages like 12 V, but you
    want to do the project, you can replace the relay module with an LED. You’ll also
    need to make some minor changes to the Python script, since the relay works with
    inverted logic and the LED doesn’t.*'
  prefs: []
  type: TYPE_NORMAL
- en: The hardware for the project involves connecting an AC 12 V power adapter that
    can provide 1 A to a relay module to control a 12 V lamp. We’ll use a DC barrel
    power jack to make the connections between the adapter and the relay easier. The
    barrel jack connects perfectly to the power adapter terminal, as shown in [Figure
    16-3](ch16.xhtml#ch16fig3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0199-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-3:** Power adapter terminal and DC barrel power jack'
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT OVERVIEW**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before getting into building this project, let’s go through a quick overview
    so you better understand each step (see [Figure 16-4](ch16.xhtml#ch16fig4)). You
    should also know the basics of HTML and CSS, so we recommend that you complete
    [Project 15](ch15.xhtml#ch15) if you haven’t already before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0200-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-4:** Project overview'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll create your web server with Flask, a Python web framework, by creating
    a file called *app.py*. When you access the Raspberry Pi IP address, port 80,
    your web browser requests the web page files stored in your Raspberry Pi—*index.html*
    and *style.css*—and then displays the web page. Your web page will have ON and
    OFF buttons that trigger an event that turns the lamp on and off, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**WIRING THE CIRCUIT**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For safety reasons, you’ll want to place your relay inside a plastic box enclosure.
    You may need to drill some holes in the plastic box for the wires—one hole for
    the Pi wires, another for the lamp wires, and one for the power adapter. [Figure
    16-5](ch16.xhtml#ch16fig5) shows how the enclosure looks without the lid. The
    Raspberry Pi wires will go through a hole on the lid.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0200-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-5:** Circuit with the relay in a plastic box enclosure'
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Make sure you have the jumper cap on the JD-VCC and VCC pins.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'With your Pi powered *off*, follow these instructions to build the circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect one of the lamp holder terminals to the negative (–) terminal on the
    DC barrel power jack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the DC barrel power jack positive (+) terminal to the relay COM socket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect the other lamp terminal to the relay NO socket. You need a screwdriver
    to connect the relay sockets tightly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the table to wire the Raspberry Pi to the relay, and make sure your completed
    setup matches [Figure 16-6](ch16.xhtml#ch16fig6).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **RELAY** | **RASPBERRY PI** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| VCC | 5 V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| IN2 | Don’t connect |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| IN1 | GPIO 17 |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| GND | GND |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '![image](../images/f0201-01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**FIGURE 16-6:** Controlling a 12 V lamp with the Raspberry Pi using a relay'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**WARNING**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Do not touch the relay or any live wires while they are connected to 12 V.
    If something isn’t working and you decide to make changes to the circuit, remove
    the 12 V power adapter plug from the socket before touching anything.*'
  prefs: []
  type: TYPE_NORMAL
- en: After completing the circuit and double-checking all the connections, apply
    power to the Raspberry Pi, connect a 12 V power adapter to the DC barrel power
    jack, and apply power by plugging the 12 V power adapter into a wall socket.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to control an LED instead, use the [Project 1](ch01.xhtml#ch01)
    schematic diagram on [page 41](ch01.xhtml#page_41) as a reference, connecting
    the LED to GPIO 17.
  prefs: []
  type: TYPE_NORMAL
- en: '**PREPARING YOUR PI TO RUN A WEB SERVER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Raspberry Pi supports a number of web servers, but we’re going to use Flask,
    a Python web framework, to turn the Pi into a dynamic web server.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing Flask**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To install Flask, you need to have pip, a tool to install libraries from the
    Python Package Index. Open the terminal and run the following commands to update
    your Pi and install pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use pip to install Flask and its dependencies by entering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If Flask installs correctly, the terminal will display the message `successfully
    installed Flask`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Organizing Your Files**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Keeping your files organized is essential in this project because Flask needs
    your files structured in a particular way to work correctly. Create a folder specifically
    for this project called *Project_16* inside the *Web_Applications* folder. Then
    create the folders and files you’ll need by following the structure shown in [Figure
    16-7](ch16.xhtml#ch16fig7).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0202-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-7:** Files and folders structure'
  prefs: []
  type: TYPE_NORMAL
- en: Create the *index.html* and *style.css* files using the Text Editor and the
    *app.py* file using Python 3 (IDLE). The *static* folder will store static files
    like the CSS file. The *templates* folder will store files that can be changed;
    for example, the *index.html* file is a template that dynamically changes the
    relay status label according to user input.
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITING THE SCRIPTS**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You’ll need to write three scripts for this project: a Python script that will
    create your Pi web server, an HTML file that builds your web page, and a CSS file
    to style your web page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating the Web Server**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create the web server, open your *app.py* file, currently empty, and enter
    the code in [Listing 16-1](ch16.xhtml#ch16list1). This code creates the web server
    on Raspberry Pi port 80 and generates a web page that you can access on the local
    network, from any web browser. You can download all the code used throughout this
    project at *[https://www.nostarch.com/RaspberryPiProject/](https://www.nostarch.com/RaspberryPiProject/)*.
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 16-1:** Creating a web server with Flask'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First you import the needed libraries ➊, and then you create a Flask object
    called `app` ➋. You initialize the relay on GPIO 17 ➌ and set the relay as *off*
    by default. The relay works with inverted logic, so you use `relay.on()` to turn
    it off.
  prefs: []
  type: TYPE_NORMAL
- en: The `@app.route('/')` decorator ➍ runs the `main()` function when someone accesses
    the root URL—the main Pi IP address of the server. In Python, a *decorator* starts
    with the `@` symbol and goes above a function definition. A decorator is basically
    a function that takes in another function, but you don’t need to worry about this
    for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: You render the *index.html* file to the web browser and print the current relay
    state, using the `relay_state` variable value on the HTML file ➎. Then you add
    a dynamic route with `action` as a variable ➏. This runs the `control()` function
    when someone accesses the dynamic route. If the action from the URL is `on`, the
    program turns the relay on and saves the current relay state ➐. This means when
    you access your Raspberry Pi IP address followed by `/on` (for example, `http://192.168.1.112/on`),
    the relay turns on. You’ll fetch your own IP address shortly.
  prefs: []
  type: TYPE_NORMAL
- en: If the action from the URL is `off`, the program turns the relay off and saves
    the current relay state. The server is listening on port 80 and the debug is set
    to `True` to report any errors ➑.
  prefs: []
  type: TYPE_NORMAL
- en: '**Writing the HTML File**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 16-2](ch16.xhtml#ch16list2) is a simple HTML document that structures
    the web page. Feel free to add more paragraphs and headings to personalize it
    using what you learned in [Project 15](ch15.xhtml#ch15). Copy this code to your
    *index.html* file, which should be located in the *templates* folder as shown
    earlier in [Figure 16-7](ch16.xhtml#ch16fig7).'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 16-2:** Writing the HTML file for your web page'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple HTML structure, and we won’t go into too much detail in this
    HTML code, because you should already be familiar with most of it from [Project
    15](ch15.xhtml#ch15). You can always refer back to that project for a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: The `<meta>` tag and the given attributes make your web page responsive in any
    mobile browser ➊. With this tag, the browser will render the width of the page
    to the width of the mobile screen. At line ➋, between double curly brackets `{{
    }}`, is `relay_state`, the variable we’re using in *app.py* to save the current
    relay state. This paragraph displays the state saved in the `relay_state` variable.
    When you click the ON button, you are redirected to `/on` root ➌, which turns
    the relay on, as seen in *app.py*. When you click the OFF button, you are redirected
    to the `/off` root ➍, which turns the relay off.
  prefs: []
  type: TYPE_NORMAL
- en: '**Writing the CSS File**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Listing 16-3](ch16.xhtml#ch16list3) styles your web page. This is just an
    example of how you can style your page; you can edit the properties as you like.
    Your *style.css* file should be inside the *static* folder, as you saw earlier
    in [Figure 16-7](ch16.xhtml#ch16fig7).'
  prefs: []
  type: TYPE_NORMAL
- en: '**LISTING 16-3:** Styling the web page with CSS'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In summary, we’ve set font sizes for the heading 2 and the paragraph ➊. Then,
    we’ve aligned all our page body ➋. Finally, we’ve edited the appearance of the
    ON and OFF buttons ➌.
  prefs: []
  type: TYPE_NORMAL
- en: '**Launching Your Web Server**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'With the Python script, HTML file, and CSS file completed, it’s time to run
    your web server. Open the terminal window and navigate to the *Project_16* folder
    by entering this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run *app.py* with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Your web server is now running. Open any browser on the local network and enter
    your Raspberry Pi IP address.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find your Pi’s IP address, go to the terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This prints the Pi’s IP address.
  prefs: []
  type: TYPE_NORMAL
- en: With your circuit ready and your server running, open a browser and navigate
    to your Raspberry Pi IP address. Your browser will display the web server page.
    Now click the buttons to remotely control the lamp! [Figure 16-8](ch16.xhtml#ch16fig8)
    shows the web page in a smartphone’s browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0207-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 16-8:** Raspberry Pi web server page on a smartphone’s browser'
  prefs: []
  type: TYPE_NORMAL
- en: To stop the web server, simply press CTRL-C.
  prefs: []
  type: TYPE_NORMAL
- en: '**TAKING IT FURTHER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this project, you learned how to use a relay and how to set up a web server
    to serve a web page, as well as put your HTML and CSS skills into practice. Here
    are some ideas for taking these concepts further:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit this project to control more than one output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the CSS and HTML files to suit your own tastes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control other electronic appliances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit previous projects to control lamps connected to relays instead of LEDs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
