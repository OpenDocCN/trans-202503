- en: '<samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">GLOBAL
    DATA ANALYSIS: ADVANCED LAYOUTS</samp> <samp class="SANS_Dogma_OT_Bold_B_11">AND
    GRAPHS</samp>'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">全球数据分析：高级布局</samp>
    <samp class="SANS_Dogma_OT_Bold_B_11">和图表</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: 'In this chapter you’ll expand your knowledge of Dash by building an app that
    compares and analyzes world data on three metrics: internet usage, proportion
    of females in parliament, and carbon dioxide (CO[2]) emissions. We’ll refer to
    these metrics as *indicators*. We’ll look more closely at Dash callbacks, and
    you’ll learn to plot a *choropleth map*, which represents quantitative data in
    the form of shades and colors within certain spatial areas on a map: countries,
    states, provinces, and so on. You’ll also discover a new way to manage layout
    and styling using dash-bootstrap-components, a library that provides complex and
    responsive layouts.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将通过构建一个应用程序来扩展 Dash 的知识，该应用程序比较和分析三个指标的世界数据：互联网使用率、议会中女性比例和二氧化碳（CO[2]）排放量。我们将这些指标称为
    *指标*。我们将更深入地了解 Dash 的回调函数，并学习如何绘制 *分层图*，它在地图的特定空间区域（如国家、州、省等）中以阴影和颜色的形式表示定量数据。你还将发现使用
    dash-bootstrap-components 管理布局和样式的新方法，这个库提供了复杂和响应式的布局。
- en: To gather the data for this app, we’ll access the World Bank application programming
    interface (API) using pandas. *APIs* provide an interface that allows you to connect
    to an external server and request data to feed into your app.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集这个应用程序所需的数据，我们将使用 pandas 访问世界银行的应用程序编程接口（API）。*API* 提供了一个接口，允许你连接到外部服务器并请求数据，以便将其输入到应用程序中。
- en: 'By the end of this chapter, you’ll be a lot more comfortable plotting data
    on a map, managing more advanced layouts, understanding callbacks, and working
    with dash-core-components. But first things first: let’s set up the app and the
    corresponding code.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将更加熟悉如何在地图上绘制数据，管理更高级的布局，理解回调函数，并使用 dash-core-components。首先，设置应用程序和相应的代码是重中之重。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the Project</samp>
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">设置项目</samp>
- en: 'As usual, first you need to create your project folder and place the app code
    inside it. Create a new project folder called *world-bank-app*, and locate the
    *[Chapter-5](chapter5.xhtml)* folder included in the ZIP file you downloaded from
    [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    at the beginning of [Chapter 4](chapter4.xhtml). The folder should contain two
    files: *worldbank.py* and *our_indicator.py*. Copy these files into your world-bank-app
    folder.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，首先你需要创建项目文件夹，并将应用程序代码放在其中。创建一个名为 *world-bank-app* 的新项目文件夹，并定位到你从 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    下载的 ZIP 文件中包含的 *[Chapter-5](chapter5.xhtml)* 文件夹，该文件夹在 [第 4 章](chapter4.xhtml)的开始部分。该文件夹应包含两个文件：*worldbank.py*
    和 *our_indicator.py*。将这些文件复制到你的 world-bank-app 文件夹中。
- en: 'The project folder should look like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件夹应如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- world-bank-app</samp>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- world-bank-app</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--our_indicator.py</samp>
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--our_indicator.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--worldbank.py</samp>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--worldbank.py</samp>
- en: 'We’ll need four libraries: the usual pandas and Dash libraries, as well as
    dash-bootstrap-components and pandas datareader. Open your command prompt (Terminal
    for Mac users) or the Terminal tab in PyCharm or your Python IDE of choice. Then,
    line by line, enter the following to install the four libraries:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要四个库：常用的 pandas 和 Dash 库，以及 dash-bootstrap-components 和 pandas datareader。打开命令提示符（Mac
    用户使用终端）或 PyCharm 中的终端标签，或者你选择的 Python IDE。然后逐行输入以下内容以安装这四个库：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-components</samp>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-components</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas-datareader</samp>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas-datareader</samp>
- en: 'To check that the libraries have installed properly, enter:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查这些库是否已正确安装，请输入：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
- en: This will list all Python packages you currently have installed. If any of the
    four libraries we need isn’t listed, try reentering the corresponding <samp class="SANS_TheSansMonoCd_W5Regular_11">install</samp>
    line.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出你当前安装的所有 Python 包。如果我们需要的四个库中有任何一个没有列出，请尝试重新输入相应的 <samp class="SANS_TheSansMonoCd_W5Regular_11">install</samp>
    命令。
- en: 'Before we look at the code, let’s check out the app. Open *worldbank.py* in
    your IDE and run the script. You should see a message with an HTTP link. Click
    that link or copy it into your web browser:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看代码之前，先来看看应用。打开 *worldbank.py* 文件，在你的 IDE 中运行该脚本。你应该会看到一个带有 HTTP 链接的消息。点击该链接，或将其复制到你的浏览器中：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash 正在运行于</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * Serving Flask app "worldbank"
    (lazy loading)</samp>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 正在服务 Flask 应用 "worldbank"（延迟加载）</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Environment: production</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 环境：生产</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     警告：这是一个开发服务器。请勿在生产环境中使用。</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     Use a production WSGI server
    instead.</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     请改用生产环境中的 WSGI 服务器。</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Debug mode: on</samp>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 调试模式：开启</samp>
- en: You should now see the World Bank Data Analysis dashboard app, as shown in [Figure
    5-1](chapter5.xhtml#fig5-1).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能看到世界银行数据分析仪表盘应用，如 [图 5-1](chapter5.xhtml#fig5-1) 所示。
- en: '![](../images/Figure5-1.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: The World Bank
    Data Analysis app</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-1：世界银行数据分析应用</samp>
- en: Have a little fun! Use the slider to change the dates, and use the radio buttons
    to choose a different World Bank data indicator, such as the one for parliament
    seats or the one for CO[2] emissions. Move the map around and hover your mouse
    cursor over certain countries to compare their data. Which country has the highest
    percentage of females in parliament? Which country has seen the biggest growth
    in percentage of internet usage over time? Get familiar with the app, and the
    code should make more sense as we go through it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心点！使用滑块来更改日期，并使用单选按钮选择不同的世界银行数据指标，比如议会席位数或二氧化碳排放量。移动地图并将鼠标悬停在某些国家上，以比较它们的数据。哪个国家议会中的女性比例最高？哪个国家的互联网使用比例增长最快？熟悉一下这个应用，随着我们逐步讲解，代码会变得更易理解。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Importing the Libraries</samp>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">导入库</samp>
- en: 'In this app we’re introducing two new Python libraries: dash-bootstrap-components
    and pandas datareader.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，我们引入了两个新的 Python 库：dash-bootstrap-components 和 pandas datareader。
- en: dash-bootstrap-components is a package that makes it easier to manage the layout
    of the app. Bootstrap supplies components that allow you to do things like place
    app elements more precisely on a page, create more components like graphs and
    radio buttons, and style each element in very detailed ways. It’s basically an
    add-on to the built-in Dash layout capabilities.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: dash-bootstrap-components 是一个包，它使得管理应用布局变得更加简单。Bootstrap 提供了组件，允许你更精确地将应用元素放置在页面上，创建更多组件（如图表和单选按钮），并以非常详细的方式对每个元素进行样式设置。它本质上是
    Dash 内建布局功能的扩展。
- en: We’ll use pandas to filter and prepare the data for plotting, as we did with
    the app in [Chapter 4](chapter4.xhtml). This app, however, will also use pandas
    datareader, a pandas extension that retrieves data via APIs and creates DataFrames
    from that data. The pandas datareader extension has methods for extracting data
    from multiple common internet sources, such as NASDAQ, the Bank of Canada, the
    World Bank, and several more. Our app uses data from the World Bank only, so to
    access that data we need to import the <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp>
    World Bank module from the datareader extension, as shown in [Listing 5-1](chapter5.xhtml#List5-1).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 pandas 来筛选并准备数据以进行绘图，就像我们在[第 4 章](chapter4.xhtml)的应用中所做的那样。然而，这个应用还将使用
    pandas datareader，这是 pandas 的一个扩展，它通过 API 获取数据并基于这些数据创建 DataFrame。pandas datareader
    扩展提供了从多个常见互联网来源提取数据的方法，例如 NASDAQ、加拿大银行、世界银行等。我们的应用只使用来自世界银行的数据，因此为了访问这些数据，我们需要从
    datareader 扩展中导入 <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp> 世界银行模块，如[列表
    5-1](chapter5.xhtml#List5-1)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-1: The import section
    of the</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-1：世界银行应用的导入部分</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">应用</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Management</samp>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据管理</samp>
- en: The next section is the data management code, where we incorporate data into
    our app from the World Bank API. We’ll also clean the data, taking out corrupt
    values, taking out corrupt values, extracting only the data we need, and merging
    it with another DataFrame to get the missing values.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分是数据管理代码，在这里我们将世界银行 API 中的数据整合到我们的应用中。我们还将清理数据，去除损坏的值，提取我们需要的数据，并将其与另一个
    DataFrame 合并，以获取缺失的值。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Connecting to an API</samp>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">连接到 API</samp>
- en: Connecting to an API lets our app read data dynamically, allowing us to add
    and change the data we’re reading on the fly, without having to alter and upload
    a static Excel file. By connecting to the API via pandas datareader, we can upload
    new data into the app immediately upon request.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 API 让我们的应用能够动态读取数据，使我们可以随时添加和更改读取的数据，而无需修改和上传静态的 Excel 文件。通过通过 pandas datareader
    连接到 API，我们可以在收到请求后立即将新数据上传到应用中。
- en: It’s important to note that some APIs enforce a limit on the number of requests
    an individual can make, in order to prevent an API from being overwhelmed. If
    that limit is surpassed, you may be blocked from making more requests for a certain
    amount of time. Taking timeouts between requests is one way to avoid overloading
    the API.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，一些 API 会限制个人可以发出的请求数量，以防止 API 被过度使用。如果超过了此限制，您可能会被阻止在一定时间内发送更多请求。请求之间设置超时是避免过载
    API 的一种方法。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp> module contains
    functions for getting different types of data pertaining to the World Bank. For
    example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">download()</samp> function
    will extract information from the World Bank’s World Development Indicators when
    passed an indicator as an argument, while <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    will query information about specified countries. We will focus on these two for
    our app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp> 模块包含用于获取与世界银行相关的不同类型数据的函数。例如，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">download()</samp> 函数将在传入指标作为参数时，从世界银行的世界发展指标中提取信息，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp> 函数将查询有关指定国家的信息。我们将重点关注这两个函数来构建我们的应用。
- en: Let’s start by downloading the necessary country data into our app, as shown
    in [Listing 5-2](chapter5.xhtml#List5-2).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将必要的国家数据下载到应用中，如[列表 5-2](chapter5.xhtml#List5-2)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.get_countries()</samp>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.get_countries()</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries["capitalCity"].replace({"
    ": None}, inplace=True)</samp>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries["capitalCity"].replace({"
    ": None}, inplace=True)</samp>'
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries.dropna(subset=["capitalCity"],
    inplace=True)</samp>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries.dropna(subset=["capitalCity"],
    inplace=True)</samp>
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[["name",
    "iso3c"]]</samp>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[["name",
    "iso3c"]]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[countries["name"]
    != "Kosovo"]</samp>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[countries["name"]
    != "Kosovo"]</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries.rename(columns=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">{"name": "country"})</samp>'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries.rename(columns=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">{"name": "country"})</samp>'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-2: Downloading country
    data from the World Bank API</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-2：从世界银行 API 下载国家数据</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>
- en: 'First we connect to the World Bank API and use <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    to extract the names of all the countries. However, the data isn’t as clean as
    we’d like, and some of the rows actually contain names of regions rather than
    countries. For example, if you print the first 10 rows using the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们连接到世界银行 API，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    提取所有国家的名称。然而，数据并不像我们希望的那样干净，有些行实际上包含的是地区名称而不是国家名称。例如，如果你使用以下代码打印前 10 行：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = wb.get_countries()</samp>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = wb.get_countries()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(countries.head(10)[['name']])</samp>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(countries.head(10)[['name']])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">exit()</samp>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">exit()</samp>
- en: you will find that row 1 contains the “Africa Eastern and Southern” region.
    Our app is focused on just countries, so we use <samp class="SANS_TheSansMonoCd_W5Regular_11">dropna()</samp>
    to exclude regions by dropping all rows that don’t have a capital city ❶, which
    should leave us with country names only.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现第 1 行包含了“东部和南部非洲”这个地区。我们的应用专注于国家，所以我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">dropna()</samp>
    来排除地区，通过删除所有没有首都城市的行 ❶，这样剩下的应该只有国家名称。
- en: To plot points on a map Plotly uses country codes rather than country names,
    so next we need to provide the app with country codes. These codes are called
    *alpha-3* or *ISO3* codes, and each country has a different code. For example,
    Austria’s is AUT, Azerbaijan’s is AZE, Burundi’s is BDI, and so on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在地图上绘制点，Plotly 使用的是国家代码而非国家名称，因此接下来我们需要为应用提供国家代码。这些代码被称为*alpha-3*或*ISO3*代码，每个国家都有不同的代码。例如，奥地利的代码是
    AUT，阿塞拜疆的是 AZE，布隆迪的是 BDI，依此类推。
- en: 'We don’t need the other information <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    returns, so we limit the DataFrame to two necessary columns: the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column and the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> country
    code column ❷.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要 <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp> 返回的其他信息，所以我们将数据框限制为两个必要的列：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">name</samp> 列和 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    国家代码列 ❷。
- en: The authors’ previous experiments with our app have shown that the ISO3 data
    for Kosovo is corrupt, so we filter the DataFrame to take out the Kosovo row.
    Lastly, we rename the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column to <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> to make
    the DataFrame easier to merge with another DataFrame later on (in [Listing 5-4](chapter5.xhtml#List5-4)).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作者们之前的实验表明，科索沃的 ISO3 数据是损坏的，因此我们过滤数据框，删除科索沃的行。最后，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    列重命名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>，这样以后合并数据框时会更加方便（见[清单
    5-4](chapter5.xhtml#List5-4)）。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Identifying the Indicators</samp>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">识别指标</samp>
- en: 'With the countries’ DataFrame built, we need to extract the World Bank data
    tied to our three indicators: internet usage, female politicians, and emissions
    data. We first need to find the indicator’s exact name and then find its respective
    ID so that we can query the API correctly. We get the indicator name directly
    from the World Bank website. Go to [*https://<wbr>data<wbr>.worldbank<wbr>.org<wbr>/indicator*](https://data.worldbank.org/indicator).
    To get the name for the internet usage indicator, click the **All Indicators**
    tab at the top of the page. Then, under the Infrastructure section, click **Individuals
    Using the Internet (% of Population)**. This is the exact name of the indicator
    we will be using in our app. If the World Bank website changes the names of the
    indicators, make sure you search for something similar and grab the exact name.
    We’ll also keep the code in the book’s resources up-to-date, if you get stuck.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了各国的数据框后，我们需要提取与我们的三个指标相关的世界银行数据：互联网使用、女性政治家和排放数据。我们首先需要找到指标的确切名称，然后找到其相应的
    ID，以便我们能够正确查询 API。我们直接从世界银行网站获取指标名称。访问 [*https://<wbr>data<wbr>.worldbank<wbr>.org<wbr>/indicator*](https://data.worldbank.org/indicator)。要获取互联网使用指标的名称，请点击页面顶部的
    **所有指标** 标签。然后，在基础设施部分，点击 **个人使用互联网（占人口百分比）**。这就是我们在应用程序中将使用的指标的确切名称。如果世界银行网站更改了指标名称，请确保搜索类似的内容并获取确切的名称。如果你遇到问题，我们会确保书中的代码保持最新。
- en: 'Next we use the indicator name to get its ID using the *our_indicator.py* file
    you downloaded with the book’s resources. In your project folder, open the *our_indicator.py*
    file in a new IDE window and run it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用指标名称通过你下载的包含在书籍资源中的 *our_indicator.py* 文件来获取其 ID。在你的项目文件夹中，打开 *our_indicator.py*
    文件并在一个新的 IDE 窗口中运行它：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = wb.get_indicators()[['id','name']]</samp>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = wb.get_indicators()[['id','name']]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df[df.name
    == 'Individuals using the Internet (% of population)']</samp>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df[df.name
    == '个人使用互联网（占人口百分比）']</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
- en: 'This simply scrapes the entries from the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> columns of the DataFrame
    pertaining to the World Bank site. The output should reveal the ID pertaining
    to that indicator:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是从数据框中提取与世界银行网站相关的 <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 列的条目。输出应该显示与该指标相关的 ID：
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    |  |  |  |  |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    |  |  |  |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8045</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using the Internet
    (% of population)</samp> |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8045</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">个人使用互联网（占人口百分比）</samp> |'
- en: 'You’ll need to repeat this process to get the names for the remaining two indicators
    from the World Bank website by replacing <samp class="SANS_TheSansMonoCd_W5Regular_11">''Individuals
    using the Internet (% of population)''</samp> with the name of the other two indicators:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''Proportion of seats held by women
    in national parliaments (%)''</samp>, found in the Gender section, and <samp class="SANS_TheSansMonoCd_W5Regular_11">''CO2
    emissions (kt)''</samp>, found in the Climate Change section. Again, these names
    change every now and then, so if you don’t get a result, make sure you search
    the World Bank indicators page and find the closest match. We then store the indicator
    names and IDs inside a dictionary located in the *worldbank.py* file, which we’ll
    use later on, as shown in [Listing 5-3](chapter5.xhtml#List5-3).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要重复这个过程，从世界银行网站获取剩余两个指标的名称，方法是将 <samp class="SANS_TheSansMonoCd_W5Regular_11">'Individuals
    using the Internet (% of population)'</samp> 替换为其他两个指标的名称：<samp class="SANS_TheSansMonoCd_W5Regular_11">'Proportion
    of seats held by women in national parliaments (%)'</samp>，该指标位于性别部分，和 <samp class="SANS_TheSansMonoCd_W5Regular_11">'CO2
    emissions (kt)'</samp>，该指标位于气候变化部分。再次提醒，这些名称时常会变化，所以如果你没有找到结果，请确保搜索世界银行的指标页面并找到最接近的匹配项。然后，我们将指标名称和
    ID 存储在 *worldbank.py* 文件中的字典里，后续我们将使用它，如 [示例 5-3](chapter5.xhtml#List5-3) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators = {</samp>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators = {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "IT.NET.USER.ZS": "Individuals
    using the Internet (% of population)",</samp>'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "IT.NET.USER.ZS": "使用互联网的个人（占人口百分比）",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "SG.GEN.PARL.ZS": "Proportion
    of seats held by women in national parliaments (%)",</samp>'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "SG.GEN.PARL.ZS": "女性在国家议会中占据的席位比例（%）",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "EN.ATM.CO2E.KT": "CO2 emissions
    (kt)",</samp>'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "EN.ATM.CO2E.KT": "二氧化碳排放量（千吨）",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-3: Defining indicators
    inside</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-3：在</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">中定义指标</samp>
- en: The main code you downloaded will have these IDs, but it’s useful to practice
    retrieving them yourself since they do change from time to time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你下载的主要代码将包含这些ID，但自己练习获取这些ID会很有用，因为它们会不时发生变化。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Extracting the Data</samp>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">提取数据</samp>
- en: Now we can build a function that downloads historical data for these three World
    Bank indicators, shown in [Listing 5-4](chapter5.xhtml#List5-4). We’ll save the
    data in a new DataFrame called <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个函数，下载这三个世界银行指标的历史数据，见[列表 5-4](chapter5.xhtml#List5-4)。我们将把数据保存在一个新的DataFrame中，命名为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">df</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_wb_data():</samp>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_wb_data():</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Retrieve specific world bank
    data from API</samp>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 从API获取特定的世界银行数据</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = wb.download(</samp>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = wb.download(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      indicator=(list(indicators)),
    country=countries["iso3c"],</samp>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      indicator=(list(indicators)),
    country=countries["iso3c"],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start=2005, end=2016</samp>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start=2005, end=2016</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.reset_index()</samp>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.reset_index()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.year =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df.year.astype(int)</samp>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.year =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df.year.astype(int)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Add country ISO3 ID to main
    df</samp>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # 将国家的ISO3 ID添加到主df中</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = pd.merge(df, countries,
    on="country")</samp>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = pd.merge(df, countries,
    on="country")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.rename(columns=indicators)</samp>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.rename(columns=indicators)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return df</samp>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return df</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-4: The</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">section
    where historical data is downloaded</samp>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-4：下载历史数据的</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">部分</samp>
- en: We retrieve the data with the <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.download()</samp>
    method, which has a few parameters. The first is <samp class="SANS_TheSansMonoCd_W5Regular_11">indicator</samp>,
    which takes a list of strings that represent the indicator IDs. Here we assign
    it the keys of the <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators</samp>
    dictionary from [Listing 5-3](chapter5.xhtml#List5-3). The next parameter is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">country</samp>, which takes a list of
    strings that represent the countries’ ISO3 codes. We assign it the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp> DataFrame
    created in [Listing 5-2](chapter5.xhtml#List5-2). Lastly, the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">end</samp> parameters allow
    us to define the range of years for which we would like the data pulled. We stop
    at 2016 simply because that’s the last year for which the World Bank has complete
    data for the CO[2] indicator.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.download()</samp> 方法来检索数据，该方法有几个参数。第一个是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">indicator</samp>，它接受一个表示指标 ID 的字符串列表。这里我们将其赋值为
    [第 5-3 节](chapter5.xhtml#List5-3) 中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators</samp>
    字典的键。接下来的参数是 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>，它接受一个表示国家
    ISO3 代码的字符串列表。我们将其赋值为 [第 5-2 节](chapter5.xhtml#List5-2) 中创建的 <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> 列。最后，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">start</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">end</samp>
    参数允许我们定义所需数据的年份范围。我们选择截至2016年，因为那是世界银行完整记录二氧化碳指标的最后一年。
- en: We then reset the index so that <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp>, which are part
    of the index, become new columns, and we have a dedicated <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp>
    column with nothing but integers, which will help with filtering later. You can
    see the effect of resetting an index in [Listing 5-5](chapter5.xhtml#List5-5),
    where we showcase the DataFrame before and after resetting the index.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们重置索引，使得原本作为索引的 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> 变成新的列，并且创建一个专门的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">index</samp> 列，其中仅包含整数，这将有助于后续的筛选。您可以在
    [第 5-5 节](chapter5.xhtml#List5-5) 中看到重置索引的效果，我们在那里展示了重置索引前后的 DataFrame。
- en: '|  |  | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp> |  |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '|  |  | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp> |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    |  |  |  |  |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">国家</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">年份</samp>
    |  |  |  |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> |  |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> |  |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp> |  |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp> |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |  |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |  |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |  |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |  |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |  |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 3 columns]</samp>
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 行 x 3 列]</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">>>> df.reset_index()</samp>
    |  |  |  |  |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">>>> df.reset_index()</samp>
    |  |  |  |  |'
- en: '|  | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp>
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '|  | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">国家</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">年份</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">阿鲁巴</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2515</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp>
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2515</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2516</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2516</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2517</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2517</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2518</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2518</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2519</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2519</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">津巴布韦</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 5 columns]</samp>
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 行 x 5 列]</samp> |'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-5: The DataFrame
    before and after resetting the index</samp>'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-5：重置索引前后的 DataFrame</samp>
- en: Before resetting the index, <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> were part of the
    index, but not part of the resultant row associated with an index element. After
    resetting the index, they are both individual columns of the DataFrame, which
    makes it a lot easier to access the individual rows that contain the country and
    year data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在重置索引之前，<samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">year</samp> 是索引的一部分，但不是与索引元素关联的结果行的一部分。重置索引后，它们都变成了
    DataFrame 的独立列，这样可以更容易地访问包含国家和年份数据的单独行。
- en: Next we convert the values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp>
    column from strings to integers so that the data can be filtered correctly with
    pandas later on. The original <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame does not contain the ISO3 country codes we need for querying the API,
    so we extract those codes from the <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame and merge the two DataFrames with <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.merge</samp>
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> column. Finally,
    we rename the columns so that they show the indicator names rather than the IDs,
    for human readability. For example, the column <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    will now be named <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using
    the Internet (% of population)</samp>.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> 列中的值从字符串转换为整数，这样以后就可以用
    pandas 正确地筛选数据。原始的 <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp> DataFrame
    不包含我们查询 API 所需的 ISO3 国家代码，因此我们从 <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame 中提取这些代码，并通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.merge</samp>
    在 <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> 列上合并两个 DataFrame。最后，我们重命名列，使它们显示指标名称，而不是
    ID，以便更易于阅读。例如，列 <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    将被命名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">使用互联网的个人（占总人口百分比）</samp>。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data()</samp> function
    is now complete and will be called inside the first callback as soon as the app
    starts. You’ll learn all about this process later in the chapter. In the meantime,
    let’s learn how to use dash-bootstrap-components to create the layout and style
    the app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data()</samp> 函数现在已完成，并将在应用启动时立即在第一个回调函数内被调用。你将在本章稍后学到这个过程。与此同时，让我们学习如何使用
    dash-bootstrap-components 来创建布局并美化应用。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Dash Bootstrap Styling</samp>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Dash Bootstrap 样式</samp>
- en: Dash Bootstrap is a powerful tool for styling Dash apps, helping us create the
    layout, style the app, and add Bootstrap components such as buttons and radio
    items. Buttons and radio items also exist in dash-core-components, but we’ll use
    the dash-bootstrap-components versions for better compatibility with the rest
    of our Bootstrap styling. Bootstrap also contains modules that store items for
    various stylesheet themes as strings, which allows us to simply include links
    to those modules to style the elements.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Dash Bootstrap 是一个强大的工具，帮助我们为 Dash 应用创建布局、样式，并添加像按钮和单选项这样的 Bootstrap 组件。按钮和单选项也存在于
    dash-core-components 中，但我们将使用 dash-bootstrap-components 版本，以更好地与我们其余的 Bootstrap
    样式兼容。Bootstrap 还包含用于存储各种样式表主题的模块，作为字符串提供，这使得我们只需引用这些模块链接来美化元素。
- en: To incorporate Bootstrap into the Dash app, we must first choose a theme and
    assign it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter right below our imports section, as shown in [Listing 5-6](chapter5.xhtml#List5-6).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Bootstrap 集成到 Dash 应用中，我们首先需要选择一个主题，并将其分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    参数，该参数位于我们的导入部分下方，如 [清单 5-6](chapter5.xhtml#List5-6) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-6: The</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">section
    where Dash is instantiated</samp>'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-6: Dash 被实例化的</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">部分</samp>'
- en: A Bootstrap theme is a stylesheet hosted online that determines the type of
    font, color, shape, and size of the elements on the page.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 主题是一个在线托管的样式表，决定了页面元素的字体类型、颜色、形状和大小。
- en: In this app, we use the default theme <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>,
    which is the first theme on the themes list. Bootstrap has several other themes
    at your disposal. To check out the themes, you can go to [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com)
    and click the **Change Theme** button on the left side of the page. You can switch
    up the theme for this app if you like; just make sure you use the exact name in
    capital letters when assigning it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter. You should only assign one theme at a time, so if you choose a new
    theme, make sure you replace <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，我们使用默认主题 <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>，它是主题列表中的第一个主题。Bootstrap
    还有其他多个主题供你选择。要查看这些主题，你可以访问 [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com)，然后点击页面左侧的
    **Change Theme** 按钮。如果你愿意，可以为这个应用更换主题；只需确保在为 <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    参数指定时使用完全大写的主题名称。每次只能指定一个主题，因此如果选择了新主题，请确保替换掉 <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>。
- en: For a complete video tutorial on Dash Bootstrap, see the video “Complete Guide
    to Bootstrap Dashboard Apps” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 Dash Bootstrap 的完整视频教程，请观看视频“Complete Guide to Bootstrap Dashboard Apps”，网址为
    [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Layout</samp>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">布局</samp>
- en: As you know, we generally refer to the layout of an app as a grid, which commonly
    consists of 12 columns and an infinite number of rows. To start building the layout,
    we need to create a container that will house all our rows and columns as well
    as the components that will go inside them. The <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp>
    syntax is pretty much like an <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>,
    but it is more compatible with Bootstrap styling. First we’ll declare the rows,
    then we’ll declare the columns that go inside each row. Finally, we’ll put the
    app components inside the columns. This final step defines the location of each
    component on the page.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所知，我们通常将应用的布局称为网格，它通常由12列和无限行组成。要开始构建布局，我们需要创建一个容器来容纳所有的行和列，以及将放置其中的组件。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp> 语法与 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>
    非常相似，但它与 Bootstrap 样式更加兼容。首先，我们声明行，然后声明每行中包含的列。最后，我们将应用组件放入列中。最后一步定义了每个组件在页面上的位置。
- en: To avoid overwhelming you with the 80 lines of code used to create the layout
    in our app, [Listing 5-7](chapter5.xhtml#List5-7) is a simplified version that
    removes the props within each <samp class="SANS_TheSansMonoCd_W5Regular_11">html</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc</samp>
    component to just show the general structure.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免给你展示创建应用布局所需的80行代码，[列表 5-7](chapter5.xhtml#List5-7) 是一个简化版本，去除了每个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">html</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc</samp> 组件中的属性，仅展示了整体结构。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              [</samp>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                html.H1(),</samp>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                html.H1(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dcc.Graph()</samp>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dcc.Graph()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=12,</samp>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=12,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">       )，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    [</samp>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.Label(),</samp>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.Label(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.RadioItems(),</samp>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.RadioItems(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=4,</samp>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=4,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">       )，</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Label(),</samp>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Label(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              dcc.RangeSlider(),</samp>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              dcc.RangeSlider(),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Button()</samp>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Button()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ],</samp>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  width=6,</samp>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  width=6,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          ]</samp>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-7: App layout simplified</samp>'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">示例 5-7：应用布局简化</samp>
- en: This app contains three rows. The first row ❶ has a column component that stretches
    12 columns wide and contains the <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    heading and <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> visualization
    components. These correspond to the title and the choropleth map in the app, shown
    in [Figure 5-1](chapter5.xhtml#fig5-1).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本应用包含三行。第一行❶有一个列组件，宽度为12列，并包含<samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>标题和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>可视化组件。这些对应应用中的标题和分级地图，见[图
    5-1](chapter5.xhtml#fig5-1)。
- en: In the second row ❷ we place a column component that stretches only four columns
    wide, inside which we place the <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>. These correspond
    to the “Select Data Set” subtitle and the three radio buttons beneath it in the
    app.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行❷，我们放置了一个宽度仅为四列的列组件，内部放置了<samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>。它们对应应用中的“选择数据集”子标题以及其下方的三个单选按钮。
- en: The last row ❸ contains the <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>,
    all of which are wrapped in a column component that is six columns wide.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行❸包含了<samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>，这些都被包含在一个宽度为六列的列组件中。
- en: <samp class="SANS_Dogma_OT_Bold_B_11">MULTICOMPONENT ROWS</samp>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">多组件行</samp>
- en: <samp class="SANS_Futura_Std_Book_11">It’s important to reiterate that an effective
    and popular approach to building dashboards is to set a maximum of 12 columns
    per page and allow components to span the width of multiple columns. In this app,
    each row has just one column component, but if we were to add several components
    in a row, we would have to make sure that, combined, they do not surpass the width
    of 12\. Let’s see an example:</samp>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">需要重申的是，构建仪表盘的一种有效且流行的方法是每页最多设置12列，并允许组件跨越多个列的宽度。在这个应用中，每一行只有一个列组件，但如果我们要在一行中添加多个组件，我们必须确保它们的宽度总和不超过12列。我们来看一个例子：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=6),</samp>
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=6),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5),</samp>
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
- en: <samp class="SANS_Futura_Std_Book_11">In the preceding code, the total width
    is 11, which means that all the Dash components will be displayed on one row.
    Here’s an example of what</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">not</samp>
    <samp class="SANS_Futura_Std_Book_11">to do:</samp>
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">在前面的代码中，总宽度为11，这意味着所有的Dash组件将显示在一行上。以下是一个例子，展示了</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">不</samp> <samp class="SANS_Futura_Std_Book_11">应该这样做：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=8),</samp>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=8),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=6),</samp>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=6),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
- en: <samp class="SANS_Futura_Std_Book_11">With a total width of 14, the Dash components
    from the second</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp>
    <samp class="SANS_Futura_Std_Book_11">will wrap into a row underneath the first</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp><samp class="SANS_Futura_Std_Book_11">,
    resulting in two rows instead of one. This can mess up your layout.</samp>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">在总宽度为14的情况下，第二个</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp>
    <samp class="SANS_Futura_Std_Book_11">的Dash组件会换行到第一个</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp><samp
    class="SANS_Futura_Std_Book_11">下方，导致出现两行而不是一行。这可能会破坏你的布局。</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Components and Styling</samp>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">组件和样式</samp>
- en: 'Dash Bootstrap components are similar to Dash Core components, but with the
    advantage that they are easier to use and integrate with Bootstrap stylesheets.
    In our app, we use three Bootstrap components: <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>.
    Let’s look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> components.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Dash Bootstrap组件与Dash核心组件类似，但它们的优势在于更易于使用，并且能够与Bootstrap样式表集成。在我们的应用中，我们使用了三个Bootstrap组件：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>。我们来看看<samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>组件。
- en: 'We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp> using
    five props: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>, as shown in
    [Listing 5-8](chapter5.xhtml#List5-8).'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过五个属性定义了<Button>：<samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">children</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">color</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>，如[列表5-8](chapter5.xhtml#List5-8)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="提交",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)，</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-8: Defining a Bootstrap
    Button</samp>'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表5-8：定义一个Bootstrap按钮</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop is used to
    uniquely identify this component and will be assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    inside the Dash callback to allow interaction with other components. Here we call
    it <samp class="SANS_TheSansMonoCd_W5Regular_11">my-button</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop represents the text displayed on the button. The <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    prop counts the number of times the button has been clicked by the user, so we
    initialize it at 0\. The <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>
    prop sets the color of the button background. Here it is assigned the Bootstrap
    contextual color <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>,
    which represents the color blue (we could also use <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp>
    to make it gray, <samp class="SANS_TheSansMonoCd_W5Regular_11">success</samp>
    for green, <samp class="SANS_TheSansMonoCd_W5Regular_11">warning</samp> for orange,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">danger</samp> for red). Note
    that the color represented by <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>
    depends on which theme you’ve chosen; if you were to choose the LUX theme for
    your Dash app, <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp> would
    represent the color black, and <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp>
    would be white.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 属性用于唯一标识此组件，并将在 Dash
    回调中分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>，以允许与其他组件交互。在这里，我们将其命名为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">my-button</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    属性表示按钮上显示的文本。<samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp> 属性计数按钮被用户点击的次数，因此我们将其初始化为
    0。<samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp> 属性设置按钮背景的颜色。这里，它被分配了
    Bootstrap 上下文颜色 <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>，表示蓝色（我们也可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp> 来使其变灰，<samp class="SANS_TheSansMonoCd_W5Regular_11">success</samp>
    变绿，<samp class="SANS_TheSansMonoCd_W5Regular_11">warning</samp> 变橙，或者 <samp class="SANS_TheSansMonoCd_W5Regular_11">danger</samp>
    变红）。请注意，<samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp> 表示的颜色取决于你选择的主题；如果你选择了
    LUX 主题，那么 <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp> 会表示黑色，而
    <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp> 会是白色。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> controls
    the styling of the component. Here we assign it the Bootstrap class <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp>,
    which controls how much margin there is between the top of the button and the
    component above it. The <samp class="SANS_TheSansMonoCd_W5Regular_11">mt</samp>
    stands for *margin top*, and <samp class="SANS_TheSansMonoCd_W5Regular_11">–4</samp>
    creates four units of space in the margin above the component. All of this creates
    the button shown in [Figure 5-2](chapter5.xhtml#fig5-2).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 控制组件的样式。在这里，我们为其分配了
    Bootstrap 类 <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp>，该类控制按钮顶部与上方组件之间的间距。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">mt</samp> 代表 *上边距*，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">–4</samp>
    在组件上方的边距中创建了四个单位的空间。所有这些共同作用形成了[图 5-2](chapter5.xhtml#fig5-2)中显示的按钮。
- en: '![](../images/Figure5-2.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: The Submit button
    for our app</samp>'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-2：我们应用的提交按钮</samp>
- en: Try changing the margin to <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-1</samp>
    and see how the space shrinks between the button and the range slider above it.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试将边距更改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-1</samp>，看看按钮和上方的范围滑块之间的空间如何缩小。
- en: 'You can also combine multiple classes within the <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    prop to add more styling by adding space between every additional class. For example,
    try adding <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp> after
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> as one string to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> prop to make the
    Submit text bold, like so:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过在 <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 属性中添加空格来组合多个类，从而为组件添加更多样式。例如，尝试在
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> 后面添加 <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp>，并将它们作为一个字符串传递给
    <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> 属性，使得提交文本变为粗体，如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="提交",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4</samp> <samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">fw-bold</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">",</samp>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4</samp> <samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">fw-bold</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: 'There are a few other <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    props that we aren’t using but are worth highlighting. The <samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp>
    prop can be assigned a URL, thereby taking the user to a new website once the
    button is clicked. The <samp class="SANS_TheSansMonoCd_W5Regular_11">size</samp>
    prop controls the size of the button by assigning one of the following values:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''lg''</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">''md''</samp>,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">''sm''</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">disabled</samp>
    prop disables the button when we assign <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    to it; we might want to, for example, create a callback to instruct the app to
    disable the button if it’s no longer needed.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些其他的<samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>属性我们没有使用，但值得注意。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">href</samp>属性可以分配一个网址，这样当按钮被点击时，用户将跳转到一个新的网站。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">size</samp>属性通过分配以下值之一来控制按钮的大小：<samp class="SANS_TheSansMonoCd_W5Regular_11">'lg'</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">'md'</samp>或<samp class="SANS_TheSansMonoCd_W5Regular_11">'sm'</samp>。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">disabled</samp>属性在我们将<samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>赋值给它时禁用按钮；例如，如果按钮不再需要，我们可能希望创建一个回调函数来指示应用禁用该按钮。
- en: Next we have <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    (also known as radio buttons), which are small circles or boxes next to a label
    that can be clicked. A radio button is similar to a checkbox except that, while
    the checkbox allows the user to choose multiple labels, the radio button only
    allows one label to be chosen at a time. The user will use it to choose which
    indicator they want to show the data for, as in [Figure 5-3](chapter5.xhtml#fig5-3).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是<samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>（也叫单选按钮），它是标签旁边可以点击的小圆圈或方框。单选按钮类似于复选框，不同之处在于复选框允许用户选择多个标签，而单选按钮一次只能选择一个标签。用户将使用它来选择他们希望显示数据的指标，如[图
    5-3](chapter5.xhtml#fig5-3)所示。
- en: '![](../images/Figure5-3.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: The indicator selection
    RadioItems component</samp>'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-3：指标选择的 RadioItems 组件</samp>
- en: We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    with the four props shown in [Listing 5-9](chapter5.xhtml#List5-9).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过[列表 5-9](chapter5.xhtml#List5-9)中显示的四个属性来定义<samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems(</samp>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="radio-indicator",</samp>
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="radio-indicator",</samp>
- en: '❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[{"label": i, "value":
    i} for i in indicators.values()],</samp>'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[{"label": i, "value":
    i} for i in indicators.values()],</samp>'
- en: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">value=list(indicators.values())
    [0],</samp>
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">value=list(indicators.values())
    [0],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   input_class_name=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"me-2",</samp>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   input_class_name=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"me-2",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-9: The RadioItems
    component in the layout section of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-9：在</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>的布局部分中的
    RadioItems 组件
- en: 'We first give the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> name. The <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    prop is responsible for displaying the labels. We pass it a list of dictionaries
    ❶, each of which represents a label; we use list comprehension to loop over all
    the indicators and create a label for each item. Alternatively, written out the
    long way in the following code, we could have assigned a list of three dictionaries
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems options</samp>
    prop like this (abridged) version. This would have achieved the exact same result:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为<сamp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>组件指定一个<сamp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp>名称。<samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>属性负责显示标签。我们传递给它一个字典列表❶，每个字典代表一个标签；我们使用列表推导遍历所有指示器并为每个项目创建一个标签。或者，按照下面的代码写法，我们可以将三个字典的列表分配给<сamp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItems options</samp>属性，这样的（简化版）写法也会得到相同的结果：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[</samp>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "Individuals using…",
    "value": "Individuals using…"},</samp>'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "使用者数量…", "value":
    "使用者数量…"},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "Proportion of seats…",
    "value": "Proportion of seats…"},</samp>'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "座位比例…", "value":
    "座位比例…"},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "CO2 emissions (kt)",
    "value": "CO2 emissions (kt)"}</samp>'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "CO2 排放量（千吨）", "value":
    "CO2 排放量（千吨）"}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
- en: 'Each dictionary has two keys: the <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key determines the text to display to the user, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    key is the actual value of the indicator. For example, we use the exact text “CO2
    emissions (kt)” for the value in order to match the indicator’s dictionary key
    value, as in [Listing 5-3](chapter5.xhtml#List5-3). This makes it a lot easier
    to filter the data later in the callback section. The <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key can be anything you want to display, but here we use the same string for the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> and the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    since the string is already clear, informative, and not too long to display.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 每个字典有两个键：<samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>键决定了显示给用户的文本，而<samp
    class="SANS_TheSansMonoCd_W5Regular_11">value</samp>键则是指示器的实际值。例如，我们使用“CO2 排放量（千吨）”作为值，以便与指示器的字典键值相匹配，如[列表
    5-3](chapter5.xhtml#List5-3)所示。这使得后续在回调部分过滤数据变得更加容易。<samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>键可以是你希望显示的任何内容，但在这里我们使用相同的字符串作为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">label</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>，因为该字符串已经很清晰、信息量大且显示长度适中。
- en: The next prop is <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    ❷, which registers the value selected by the user, depending on which radio button
    the user clicks; the object assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    prop in [Listing 5-9](chapter5.xhtml#List5-9) represents the value chosen by default
    as the app loads for the first time. We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">input_class_name</samp>
    prop to style the radio button; in this case, we assign it the Bootstrap class
    <samp class="SANS_TheSansMonoCd_W5Regular_11">me-2</samp> to set the circle two
    units of space to the left of the label. Try changing the number to see how this
    affects the appearance. Note that we can use Bootstrap classes to style Dash Core
    components, as well as Bootstrap components
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个属性是<сamp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> ❷，它记录用户选择的值，具体取决于用户点击了哪个单选按钮；在[列表
    5-9](chapter5.xhtml#List5-9)中，分配给<сamp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>属性的对象表示应用首次加载时默认选择的值。我们使用<сamp
    class="SANS_TheSansMonoCd_W5Regular_11">input_class_name</samp>属性来为单选按钮设置样式；在本例中，我们为它分配了Bootstrap类<сamp
    class="SANS_TheSansMonoCd_W5Regular_11">me-2</samp>，将圆形与标签左侧的间距设置为两个单位。尝试更改数字，看看这如何影响外观。请注意，我们可以使用Bootstrap类来为Dash
    Core组件以及Bootstrap组件设置样式。
- en: There are innumerable Bootstrap classes, helpfully summarized and organized
    in the cheat sheet at [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> class, for example,
    is located under the <samp class="SANS_TheSansMonoCd_W5Regular_11">Spacing</samp>
    utility section, while <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp>
    is located under the <samp class="SANS_TheSansMonoCd_W5Regular_11">Text</samp>
    utility section. Play around with the other utilities and give the app your own
    personal style. We won’t go over all the Bootstrap classes here, given the sheer
    number of them; instead, we recommend that you use the cheat sheet and experiment
    with incorporating different classes.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 有无数的 Bootstrap 类，这些类已经在[*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com)的备忘单中做了有用的总结和组织。例如，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> 类位于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Spacing</samp>
    工具部分，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp> 类位于 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Text</samp> 工具部分。可以尝试使用其他工具类，为应用程序赋予个人风格。由于
    Bootstrap 类的数量庞大，我们不会在这里详细介绍所有类；相反，我们建议你使用备忘单并尝试结合不同的类。
- en: Always assign a Bootstrap theme to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter, as we did in [Listing 5-6](chapter5.xhtml#List5-6), or the Bootstrap
    layout, styling, and elements will fail to function throughout the app.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 始终将 Bootstrap 主题分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    参数，就像我们在[示例 5-6](chapter5.xhtml#List5-6)中做的那样，否则 Bootstrap 布局、样式和元素将在整个应用程序中无法正常工作。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Core Components</samp>
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 核心组件</samp>
- en: We’ll add a few new Dash Core components to the app, namely <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向应用程序中添加一些新的 Dash 核心组件，分别是 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> is commonly
    used when we want to present a wide range of values to select from or when the
    user can select a range rather than discrete values. In this case, we’ll use it
    to allow the user to select a single year or a range of years, as shown in [Figure
    5-4](chapter5.xhtml#fig5-4).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 通常在我们需要展示一系列可选择值，或者当用户可以选择一个范围而不是离散值时使用。在本例中，我们将使用它让用户选择单个年份或一系列年份，如[图
    5-4](chapter5.xhtml#fig5-4)所示。
- en: '![](../images/Figure5-4.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: The years selection
    RangeSlider component</samp>'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-4：年份选择范围滑块组件</samp>
- en: We’ll define our <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    with six props, as shown in [Listing 5-10](chapter5.xhtml#List5-10).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用六个属性来定义我们的 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>，如[示例
    5-10](chapter5.xhtml#List5-10)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider(</samp>
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="years-range",</samp>
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="years-range",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=2005,</samp>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=2005,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=2016,</samp>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=2016,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   step=1,</samp>
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   step=1,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=[2005, 2006],</samp>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=[2005, 2006],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2005: "2005",</samp>'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2005: "2005",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2006: " ''06",</samp>'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2006: " ''06",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2007: " ''07",</samp>'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2007: " ''07",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2008: " ''08",</samp>'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2008: " ''08",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2009: " ''09",</samp>'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2009: " ''09",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2010:
    " ''10",</samp>'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2010:
    " ''10",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2011: " ''11",</samp>'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2011: " ''11",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2012: " ''12",</samp>'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2012: " ''12",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2013: " ''13",</samp>'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2013: " ''13",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2014:
    " ''14",</samp>'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2014:
    " ''14",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2015: " ''15",</samp>'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2015: " ''15",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2016: "2016",</samp>'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2016: "2016",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-10: The RangeSlider
    component in the layout section of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">示例 5-10: 布局部分的 RangeSlider
    组件</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    props define the lowest and highest values on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    usually from left to right. The <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    prop determines the increment to make when the slider is moved. We set the value
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> so that each movement
    of the slider will change the year by one. However, because we have marks for
    every year, assigning <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    to another value, say <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>,
    would achieve the same result; the user’s selection will automatically snap to
    the nearest mark. If we removed the marks for all the years between 2005 and 2016
    and just kept those two, the slider would move to the nearest value in increments
    of three, assuming you assigned <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    属性定义了 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 上的最小值和最大值，通常是从左到右。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">step</samp> 属性决定了滑块移动时的增量。我们将值设置为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，这样每次滑块移动时年份都会增加一个。然而，由于我们为每年设置了标记，将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp> 设置为另一个值，比如 <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>，也会达到相同的效果；用户的选择会自动对齐到最近的标记。如果我们删除了2005年到2016年之间所有年份的标记，仅保留这两个标记，滑块将以每三年的增量移动，假设你将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp> 设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> prop determines
    the initial range that’s selected by default when the app loads; it will also
    detect the range of years selected by the app user. The <samp class="SANS_TheSansMonoCd_W5Regular_11">marks</samp>
    prop labels the marks. We assign it a dictionary: the key determines the position
    of the year on the slider, while the value indicates the text to display in that
    position on the app.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> 属性决定了应用加载时默认选择的初始范围；它还会检测应用用户选择的年份范围。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">marks</samp> 属性标记了各个年份的标记。我们为其分配一个字典：键决定了年份在滑块上的位置，而值表示在该位置上显示的文本。
- en: Another common <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    prop, not used here, is <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross</samp>,
    which allows the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    handles (the blue circles you see above 2005 and ’06 in [Figure 5-4](chapter5.xhtml#fig5-4))
    to cross each other when set to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>.
    By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross=False</samp>,
    but if you changed that to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    you would be able to pull the 2005 handle to the right and over the ’06 handle.
    For a full list of <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    props, go to the Dash components documentation (*http://dash.plotly.com/dash-core-components*)
    and select <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>.
    The props can be found at the bottom of the page. For a complete video tutorial
    on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    see the video “Range Slider—Python Dash Plotly” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 属性，在此未使用，是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross</samp>，它允许 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    的滑块（如[图 5-4](chapter5.xhtml#fig5-4)中 2005 和 ’06 上方看到的蓝色圆圈）在设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    时交叉。默认情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross=False</samp>，但如果你将其改为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>，你将能够将 2005 的滑块拉到右侧，跨过
    ’06 的滑块。有关完整的 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    属性列表，请访问 Dash 组件文档（*http://dash.plotly.com/dash-core-components*），并选择 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>。这些属性可以在页面底部找到。有关
    Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 的完整视频教程，请查看视频“Range
    Slider—Python Dash Plotly”在 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: The Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component
    is typically used to save dashboard data in memory on the user’s web browser so
    that the data can be called and recalled quickly and efficiently. The store is
    invisible and does not appear on the user’s page, though we must still declare
    it in the layout section, as shown in [Listing 5-11](chapter5.xhtml#List5-11).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 组件通常用于将仪表板数据保存在用户的网页浏览器的内存中，以便数据可以快速高效地被调用和恢复。该存储是不可见的，并不会出现在用户的页面上，但我们仍然必须在布局部分声明它，如[清单
    5-11](chapter5.xhtml#List5-11)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Store(id="storage", storage_type="local",
    data={}),</samp>
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Store(id="storage", storage_type="local",
    data={}),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-11: The Store component
    in the last section of the layout in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-11：在布局的最后部分中使用的 Store 组件</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: 'This component allows for seamless and quick sharing of data between callbacks.
    There is a limit to the amount of data it can store, however: around 2MB of data
    in mobile environments and from 5MB to approximately 10MB in most desktop-only
    applications. We’ll see how callbacks use the store in the next section.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件允许回调之间无缝且快速地共享数据。然而，它可以存储的数据量是有限的：在移动环境中大约为 2MB，在大多数仅桌面应用程序中则为 5MB 到大约 10MB。我们将在下一部分中看到回调如何使用该存储。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop will be used
    later in the callback to identify this component. The <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    prop represents the stored data; this data can be in the form of a dictionary,
    list, integer, string, or Boolean. We don’t actually need to declare the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp> prop or assign an empty dictionary,
    as we did in [Listing 5-11](chapter5.xhtml#List5-11), but we’ve added it here
    for descriptive purposes. The <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    component will always assume it’s there, which is why we don’t have to declare
    it.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> 属性将在回调中用于标识该组件。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp> 属性表示存储的数据；这些数据可以是字典、列表、整数、字符串或布尔值。实际上，我们不需要声明
    <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp> 属性或分配一个空字典，如在[清单 5-11](chapter5.xhtml#List5-11)中所做的那样，但我们在这里添加它是为了描述目的。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 组件总是假设它存在，这就是为什么我们不需要显式声明它。
- en: 'The prop <samp class="SANS_TheSansMonoCd_W5Regular_11">storage_type</samp>
    declares how we want to store the data. It has three options: <samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp> option retains
    the data until the browser tab or the browser itself is closed and a new one is
    opened. The <samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp> option
    saves the data to the browser until all browsing history and cookies are deleted.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp> option resets
    the data when the browser is refreshed.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 <samp class="SANS_TheSansMonoCd_W5Regular_11">storage_type</samp> 声明了我们希望如何存储数据。它有三个选项：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">session</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp>
    选项会保留数据，直到浏览器标签页或浏览器本身关闭并重新打开。<samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>
    选项会将数据保存在浏览器中，直到所有浏览历史和 cookie 被删除。<samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>
    选项会在浏览器刷新时重置数据。
- en: Our last component is the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>,
    used to automatically update the app without having to refresh the browser page
    manually. This is typically used with apps that use data in real time, such as
    financial apps, which need to update themselves with new data every couple of
    seconds. In our app, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    activates the first callback, which itself creates the DataFrame from the data
    pulled from the World Bank pandas API. Then, every 60 seconds, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    reactivates the callback to pull the data again and create a new DataFrame.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一个组件是 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>，用于自动更新应用程序，而无需手动刷新浏览器页面。这个组件通常用于需要实时数据的应用程序，如金融应用程序，它们需要每几秒钟就用新数据更新自己。在我们的应用中，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 激活第一个回调，回调从世界银行 pandas
    API 获取数据并创建 DataFrame。然后，每隔 60 秒，<samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    会重新激活回调，以再次拉取数据并创建新的 DataFrame。
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> has a few
    important props, shown in [Listing 5-12](chapter5.xhtml#List5-12).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 组件有一些重要的属性，如[清单
    5-12](chapter5.xhtml#List5-12)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 60, n_intervals=0),</samp>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 60, n_intervals=0),</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-12: The Interval
    component in the last section of the layout in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-12：布局最后部分的 Interval 组件</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">interval</samp> prop tells
    the app how much time should transpire between every activation of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>.
    We assign this interval in milliseconds, so here we use <samp class="SANS_TheSansMonoCd_W5Regular_11">1000
    * 60</samp>, which is equal to 60 seconds. Every 60 seconds you should see the
    word “Updating” appear in the browser’s window tab. The <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>
    prop counts the number of times the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    has been activated: after 60 seconds <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=1</samp>,
    after 120 seconds <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=2</samp>,
    and so on until the end of time. One other common prop not presented here is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">max_intervals</samp>, which defines the
    maximum number of times <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    will be activated. If, for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals=2</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">interval=1000*60</samp>, the
    app will stop updating itself after 120 seconds.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">interval</samp> 属性告诉应用程序每次激活 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 之间应该间隔多少时间。我们以毫秒为单位设置这个间隔，因此这里我们使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1000 * 60</samp>，即 60 秒。每 60 秒，你应该看到浏览器窗口标签中出现“Updating”字样。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp> 属性计算 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    被激活的次数：60 秒后 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=1</samp>，120
    秒后 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=2</samp>，以此类推，直到永远。另一个常见的属性是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals</samp>，它定义了 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 激活的最大次数。例如，如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals=2</samp>
    且 <samp class="SANS_TheSansMonoCd_W5Regular_11">interval=1000*60</samp>，则应用将在
    120 秒后停止更新。
- en: In reality, we don’t really need to update the data every 60 seconds, because
    the World Bank probably only updates its data every couple of weeks. We simply
    chose 60-second intervals so that you can see the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    component in action.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们并不需要每 60 秒更新一次数据，因为世界银行可能每隔几周才更新一次数据。我们选择 60 秒的间隔只是为了让你能够看到 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    组件的实际效果。
- en: For a complete video tutorial on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>,
    see the video “The Dash Interval Overview” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 的完整视频教程，请参见视频“Dash
    Interval 概述”，网址为 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Callbacks</samp>
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Dash 回调函数</samp>
- en: Our app uses two callbacks. The first callback is responsible for retrieving
    data from the World Bank through the pandas datareader API, while the second callback
    is responsible for creating and displaying the choropleth map on the app.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用使用了两个回调函数。第一个回调函数负责通过 pandas datareader API 从世界银行获取数据，而第二个回调函数则负责在应用中创建并显示
    choropleth 地图。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Retrieval Callback</samp>
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据获取回调函数</samp>
- en: 'The data retrieval callback will call on the appropriate components to retrieve
    the chosen data every 60 seconds and return a DataFrame of that data, which is
    stored on the user’s web browser. As always, the callback has two sections: the
    callback decorator and the callback function, as shown in [Listing 5-13](chapter5.xhtml#List5-13).'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 数据获取回调函数将调用相应的组件，每 60 秒检索一次所选数据，并返回该数据的 DataFrame，数据存储在用户的网页浏览器中。与往常一样，回调函数有两个部分：回调装饰器和回调函数，如
    [列表 5-13](chapter5.xhtml#List5-13) 所示。
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"))</samp>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"))</samp>
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">def store_data(n_time):</samp>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">def store_data(n_time):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dataframe = update_wb_data()</samp>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dataframe = update_wb_data()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dataframe.to_dict("records")</samp>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dataframe.to_dict("records")</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-13: The first callback
    in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-13：在</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
    中的第一个回调
- en: 'Within the callback decorator ❶ the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> parameters take
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp> and a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>, whose assigned
    values refer to components in the layout section of the app. The <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> parameter in
    this case is <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>, and
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> refers
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp>. These are
    positional arguments, so we don’t need to include the parameters in the decorator
    function code. In fact, the same line of code written the long way would look
    like this:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调装饰器 ❶ 内，<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> 参数包含 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>，它们的赋值引用应用布局部分中的组件。在这种情况下，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    是 <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>
    是 <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp>。这些是位置参数，因此我们不需要在装饰器函数代码中包括这些参数。实际上，按长方式写出的相同代码如下所示：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="storage",
    component_property="data"),</samp>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="storage",
    component_property="data"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input(component_id="timer",
    component_property=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals")</samp>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input(component_id="timer",
    component_property=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: As shown in [Listing 5-13](chapter5.xhtml#List5-13), <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>
    refers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of the Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> component and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp> refers to the prop
    that represents the number of times the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    has been fired. Following the same logic, <samp class="SANS_TheSansMonoCd_W5Regular_11">"storage"</samp>
    refers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of the Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"data"</samp> refers to the prop that
    represents the data being stored on the user’s browser.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如[清单 5-13](chapter5.xhtml#List5-13)所示，<samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>
    指的是 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 组件的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp>
    指的是表示 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> 已触发次数的属性。按照相同的逻辑，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"storage"</samp> 指的是 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    组件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">"data"</samp>
    指的是表示存储在用户浏览器中的数据的属性。
- en: Inside the callback function ❷ we pass in the single <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    argument <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>. The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp> argument refers to the value
    assigned to <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>’s <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>, which is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>. Because <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    refers to <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>, every
    time the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> is triggered
    (every 60 seconds) the callback function will be triggered as well. The first
    trigger occurs as soon as the app is rendered on the page for the first time or
    as soon as the page is refreshed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在回调函数 ❷ 内，我们传入了单个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    参数 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>。<samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    参数指代分配给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>，即
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>。因为 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    指向 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>，每当 <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    被触发（每60秒触发一次），回调函数也会被触发。第一次触发发生在应用首次渲染页面时，或页面刷新时。
- en: You can call this argument anything you’d like; it doesn’t have to be called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>. However, it’s important
    to note that only one argument is passed into the callback function because the
    callback decorator only has one <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随意命名这个参数，它不必叫作 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>。但是需要注意的是，回调函数只传入了一个参数，因为回调装饰器只有一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>。
- en: Once the function is triggered, it activates the <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data</samp>
    function at the beginning of the app ([Listing 5-4](chapter5.xhtml#List5-4)),
    and it saves the results to the <samp class="SANS_TheSansMonoCd_W5Regular_11">dataframe</samp>
    object. This DataFrame now contains data from the World Bank. The DataFrame is
    then returned. Every object returned in the callback function corresponds to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> argument. In this
    case, the returned DataFrame corresponds to the <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    prop of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component,
    as seen in [Listing 5-13](chapter5.xhtml#List5-13). As a result, the retrieved
    World Bank data is stored on the user’s web browser for future use.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数被触发，它会在应用的开始时激活 <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data</samp>
    函数（见 [Listing 5-4](chapter5.xhtml#List5-4)），并将结果保存到 <samp class="SANS_TheSansMonoCd_W5Regular_11">dataframe</samp>
    对象中。这个 DataFrame 现在包含来自世界银行的数据。然后，DataFrame 被返回。在回调函数中返回的每个对象对应于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>
    参数的 <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>。在这个例子中，返回的
    DataFrame 对应于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> 组件的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp> 属性，见 [Listing 5-13](chapter5.xhtml#List5-13)。因此，检索到的世界银行数据被存储在用户的网页浏览器中以供将来使用。
- en: 'Our callback decorator has only one output, so one object is returned in the
    callback function. In apps where the callback decorator has multiple outputs,
    you will have to return the same number of objects in the callback function. For
    example, here the callback function returns two messages because the decorator
    function has two outputs:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的回调装饰器只有一个输出，因此回调函数中返回一个对象。如果回调装饰器有多个输出，那么你必须在回调函数中返回相同数量的对象。例如，在这里，回调函数返回了两个消息，因为装饰器函数有两个输出：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content1",
    "children"),</samp>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content1",
    "children"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content2",
    "children"),</samp>
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content2",
    "children"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("timer", "n_intervals")</samp>
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("timer", "n_intervals")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_data(n_time):</samp>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_data(n_time):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message1 = "text to display
    in the children prop of the 1st Output."</samp>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message1 = "显示在第一个 Output 的
    children 属性中的文本."</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message2 = "text to display
    in the children prop of the 2nd Output."</samp>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message2 = "显示在第二个 Output 的
    children 属性中的文本."</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return message1, message2</samp>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return message1, message2</samp>
- en: For a complete video tutorial on the Dash callback function, see the video “The
    Dash Callback—Input, Output, State, and more” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Dash 回调函数的完整视频教程，请观看视频“Dash 回调—输入、输出、状态及更多”，链接见 [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Dogma_OT_Bold_B_11">DISABLING CALLBACKS ON STARTUP</samp>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">禁用启动时回调函数</samp>
- en: <samp class="SANS_Futura_Std_Book_11">By default, all callbacks are triggered
    when the app starts. However, sometimes you’ll need to stop this from occurring.
    For example, you might have a callback that returns a graph only when a button
    is clicked, so you don’t want that callback to activate at startup before the
    button is clicked. There are two ways to stop the callback from being triggered
    automatically when the app first loads. One is by adding the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_callbacks</samp>
    <samp class="SANS_Futura_Std_Book_11">line to the start of the app where Dash
    is instantiated and setting it to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp
    class="SANS_Futura_Std_Book_11">, as such:</samp>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">默认情况下，所有回调函数在应用启动时都会被触发。然而，有时你需要阻止这种情况发生。例如，你可能有一个回调函数，只有在点击按钮时才返回图表，因此你不希望这个回调函数在启动时就被触发，而是等到按钮点击后才触发。阻止回调函数在应用首次加载时自动触发的方式有两种。一种是通过在应用启动时添加</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_callbacks</samp>
    <samp class="SANS_Futura_Std_Book_11">这一行，并将其设置为</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp
    class="SANS_Futura_Std_Book_11">，如下所示：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP],</samp>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">prevent_initial_callbacks=True</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">prevent_initial_callbacks=True</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_Futura_Std_Book_11">This will stop all callbacks from triggering
    when the page loads for the first time or when the page is refreshed. The second
    method is to enter</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_Futura_Std_Book_11">inside
    the particular callback you don’t want to trigger when the page loads. If we were
    to do so in our first callback, it would look like this:</samp>
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">这将阻止所有回调函数在页面首次加载或页面刷新时触发。第二种方法是在不希望在页面加载时触发的特定回调函数中输入</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_Futura_Std_Book_11">。如果我们在第一个回调函数中这么做，代码将如下所示：</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"),</samp>
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=True)</samp>
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=True)</samp>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Figure Creation Callback</samp>
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">图形创建回调</samp>
- en: The figure creation callback will retrieve the stored DataFrame from the user’s
    browser, filter the DataFrame based on the years and dataset selected by the user,
    and return a graph that represents that data visually. The decorator function
    has two <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> arguments,
    two <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments, and
    one <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>, as seen in [Listing
    5-14](chapter5.xhtml#List5-14).
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 图形创建回调将从用户的浏览器中检索存储的 DataFrame，根据用户选择的年份和数据集过滤该 DataFrame，并返回一个可视化表示该数据的图形。装饰器函数有两个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数，两个 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数，以及一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>，如 [列表 5-14](chapter5.xhtml#List5-14)
    所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("my-choropleth", "figure"),</samp>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("my-choropleth", "figure"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("my-button", "n_clicks"),</samp>
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("my-button", "n_clicks"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("storage", "data"),</samp>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("storage", "data"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("years-range", "value"),</samp>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("years-range", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("radio-indicator", "value"),</samp>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("radio-indicator", "value"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-14: The callback
    decorator of the second callback in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 5-14：第二个回调的回调装饰器</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: The first <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> refers
    to the number of times the button is clicked, and the second refers to the data
    stored on the user’s browser by the first callback. Next we define a couple of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments. A <samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp> argument doesn’t trigger
    the callback when its components are altered, but rather makes note of the user’s
    selection. Here, the first <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    argument checks which range of years the user has chosen on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    and the second one refers to the indicator chosen from the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数表示按钮被点击的次数，第二个则表示由第一个回调存储在用户浏览器中的数据。接下来，我们定义了几个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> 参数。<samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数不会在其组件被更改时触发回调，而是记录用户的选择。这里，第一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数检查用户在 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 上选择的年份范围，第二个则指向用户从
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> 中选择的指标。
- en: When the user changes the year(s) selected on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    or chooses a different <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    World Bank indicator, the values are saved, but the choropleth map does not update
    until the button is clicked. This is because the button’s <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    is a component property of an <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    argument ([Listing 5-14](chapter5.xhtml#List5-14)). Remember, <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    arguments always trigger callbacks. <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    arguments do not.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户更改 <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> 上选择的年份，或选择不同的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> 世界银行指标时，值会被保存，但直到按钮被点击时，等值的
    choropleth 地图才会更新。这是因为按钮的 <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    是一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数的组件属性（[列表 5-14](chapter5.xhtml#List5-14)）。记住，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> 参数总是触发回调，而 <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    参数不会触发回调。
- en: Now let’s look at the callback function. The callback decorator has four arguments
    that are not <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>s, so
    the callback function must also be assigned four arguments, as shown in [Listing
    5-15](chapter5.xhtml#List5-15).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看回调函数。回调装饰器有四个参数，这些参数不是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>，所以回调函数必须也被分配四个参数，如[示例
    5-15](chapter5.xhtml#List5-15)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(n_clicks, stored_dataframe,
    years_chosen, indct_chosen):</samp>
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(n_clicks, stored_dataframe,
    years_chosen, indct_chosen):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = pd.DataFrame.from_records(stored_dataframe)</samp>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = pd.DataFrame.from_records(stored_dataframe)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      print(years_chosen)</samp>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      print(years_chosen)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] != years_chosen[1]:</samp>
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] != years_chosen[1]:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❸   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff.year.between(years_chosen[0], years_chosen[1])]</samp>
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❸   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff.year.between(years_chosen[0], years_chosen[1])]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❹   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff.groupby(["iso3c", "country"])[indct_chosen].mean()</samp>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❹   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff.groupby(["iso3c", "country"])[indct_chosen].mean()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         dff = dff.reset_index()</samp>
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         dff = dff.reset_index()</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth(</samp>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations="iso3c",</samp>
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations="iso3c",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          scope="world",</samp>
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          scope="world",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❺  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] == years_chosen[1]:</samp>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❻   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff["year"].isin(years_chosen)]</samp>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❼   <samp class="SANS_TheSansMonoCd_W5Regular_11">fig
    = px.choropleth(</samp>
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"iso3c",</samp>
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    scope="world",</samp>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           )</samp>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=50, t=50, b=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50),</samp>
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-15: Defining the
    callback function of the second callback in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'The four arguments correspond to the component properties of <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> in [Listing 5-14](chapter5.xhtml#List5-14)
    in the following manner:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">stored_dataframe</samp> to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: The first line of code within the callback function ❶ converts the stored data,
    which is currently a list of dictionaries, to a pandas DataFrame to make it easier
    to create the Plotly Express graphs.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数中的第一行代码❶将存储的数据（目前是一个字典列表）转换为pandas DataFrame，以便更容易创建Plotly Express图表。
- en: 'We next need to filter the data to prepare it for plotting the choropleth map.
    To see how best to filter the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    data, go to the app and try to move the slider handles to select multiple years
    or only one year and hit **Submit**. See what’s then printed out in the Python
    IDE. You should see something like this:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要过滤数据，为绘制分层地图做准备。要了解如何最佳过滤<samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>数据，请进入应用程序，尝试移动滑块手柄选择多个年份或仅选择一个年份，然后点击**提交**。查看在Python
    IDE中打印出的内容。你应该会看到类似下面的内容：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2006]</samp>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2006]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2009]</samp>
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2009]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2009, 2009]</samp>
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2009, 2009]</samp>
- en: We can see that the app must distinguish whether the two values in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> list are different
    from each other ❷ or the same ❺ so that it knows whether to use data from a range
    or a single year. Now that we know what the data looks like, it’s easier to filter.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，应用程序必须区分<samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>列表中的两个值是不同的❷还是相同的❺，以便判断是使用年份范围的数据还是单一年份的数据。现在我们知道了数据的形态，过滤变得更加容易。
- en: If the two values are different, it means the user has selected a range. First
    we create a DataFrame that is limited to only those rows pertaining to the range
    of years selected by the user ❸. If the user moved the slider handles to choose
    [2005, 2009], the new DataFrame will include all the years between 2005 and 2009\.
    Next, for each country we extract the mean value for the indicator chosen. Because
    each country appears multiple times on multiple rows—once for each year—we also
    group the DataFrame by the <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> columns ❹. This
    ensures that each country will be represented only once in the new DataFrame.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个值不同，则意味着用户选择了一个范围。首先，我们创建一个仅限于用户选择的年份范围内行的DataFrame❸。如果用户移动滑块手柄选择了[2005,
    2009]，新的DataFrame将包括2005到2009年之间的所有年份。接下来，对于每个国家，我们提取所选指标的平均值。由于每个国家会在多行中出现——每个年份对应一行——我们还会按<samp
    class="SANS_TheSansMonoCd_W5Regular_11">country</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>列对DataFrame进行分组❹。这样可以确保每个国家在新的DataFrame中只出现一次。
- en: If you’re not sure what certain lines of code do, add print statements between
    the lines to clarify what the data looks like before and after each manipulation.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定某些代码行的作用，可以在代码行之间添加print语句，以便在每次操作前后查看数据的变化。
- en: If the two values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    list are the same ❺, it means the user selected only one year (for example, [2009,
    2009]). Consequently, there is no need to use <samp class="SANS_TheSansMonoCd_W5Regular_11">groupby</samp>,
    because every country will appear only once. Lastly, we filter the DataFrame so
    that it contains only rows with the selected year ❻.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 如果<samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>列表中的两个值相同❺，则意味着用户只选择了一个年份（例如，[2009,
    2009]）。因此，无需使用<samp class="SANS_TheSansMonoCd_W5Regular_11">groupby</samp>，因为每个国家将只出现一次。最后，我们过滤DataFrame，使其仅包含所选年份❻的行。
- en: With the data fully filtered, it is now ready to be used to plot the choropleth
    map. We will use the last section of this chapter, “Plotly Express Choropleth
    Maps,” to go over the creation of the choropleth ❼.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 数据完全过滤后，现已准备好用于绘制分层地图。我们将在本章的最后部分“Plotly Express 分层地图”中介绍分层地图的创建❼。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Diagram</samp>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调图</samp>
- en: To depict more clearly what’s happening in the callbacks, we’ll look at the
    callback diagram, as we did in [Chapter 4](chapter4.xhtml), to get information
    on the order in which the callbacks are triggered, the amount of time it takes
    to fully render each callback, and the component within the callback that’s being
    activated.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清晰地描述回调的发生情况，我们将查看回调图表，就像我们在[第 4 章](chapter4.xhtml)中所做的那样，以获取关于触发回调的顺序、完全渲染每个回调所需的时间以及激活回调内部组件的信息。
- en: First, as shown in [Listing 5-16](chapter5.xhtml#List5-16), reduce the interval
    in the layout section to 10 seconds so that the callback is triggered more frequently
    and you can see what’s happening in the callback diagram every 10 seconds. Also
    check that <samp class="SANS_TheSansMonoCd_W5Regular_11">debug=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    at the end of the code; otherwise, the diagram won’t appear.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如[清单 5-16](chapter5.xhtml#List5-16)所示，在布局部分将间隔减少到10秒，以便更频繁地触发回调，并且可以在每10秒查看回调图表中发生的情况。还要检查代码末尾的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">debug=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>；否则，图表将不会显示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 10, n_intervals=0),</samp>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 10, n_intervals=0),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-16: The Interval
    component and the last line of code in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-16：Interval 组件及</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp> 文件中的最后一行代码
- en: Now run the app, and in the browser click the **Callbacks** button in the lower-right
    corner. [Figure 5-5](chapter5.xhtml#fig5-5) shows the diagram that should appear.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行应用程序，在浏览器中点击右下角的**Callbacks**按钮。[图 5-5](chapter5.xhtml#fig5-5) 显示应该出现的图表。
- en: '![](../images/Figure5-5.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: The callback diagram</samp>'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-5：回调图表</samp>
- en: Each callback argument (<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>)
    is represented by a box, and another box tells you the number of times a callback
    was triggered and how quickly. As you can see, the first input refers to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> component. The box in
    the second row tells us that the callback has been triggered once (when the page
    loaded), and that it took a little over one second (1,428 milliseconds) to complete
    the callback and store the data on the browser. Observe how the arrow from that
    box points to the storage component in the third row. You should see the top digit
    in the box in the second row increase by one every 10 seconds.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 每个回调参数（<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>或<samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp>）都用一个框表示，另一个框告诉你回调被触发的次数及其执行速度。正如你所看到的，第一个输入指的是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>组件。第二行的框告诉我们，该回调已触发一次（页面加载时），并且花了一点多一秒钟（1,428
    毫秒）来完成回调并将数据存储在浏览器上。注意第二行框中的箭头指向第三行的存储组件。你应该看到第二行框中的顶部数字每隔10秒增加一次。
- en: The four boxes in the third row represent the two <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    and two <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments in
    the second callback. The box beneath informs us that the second callback has been
    triggered once and that it took less than one-tenth of a second to return a figure
    of the choropleth map as an <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 第三行中的四个框代表第二个回调中的两个<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>和两个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp>参数。下面的框通知我们，第二个回调已触发一次，而且只花了不到十分之一秒的时间返回一个区域地图图表作为一个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>。
- en: Approximately one second after the first callback is complete, you should see
    the outline of the storage component highlighted in purple on your screen. This
    is because the storage component activates the second callback.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在第一个回调完成后一秒钟，您应该能看到存储组件的轮廓在屏幕上用紫色高亮显示。这是因为存储组件激活了第二个回调。
- en: Let’s see how the diagram changes as the user interacts with the app. Click
    the button, choose a different <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>,
    and move the years of the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>.
    Whenever you interact with a component, its respective blue box in the diagram
    should highlight. Notice how the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> do not
    trigger the second callback; only the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> components trigger
    the second callback because they are <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    arguments, as opposed to <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    arguments.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看用户与应用交互时图示的变化。点击按钮，选择不同的<samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>，并调整<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>的年份。每当您与组件交互时，相应的蓝色框应该在图示中高亮显示。注意，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>并不会触发第二个回调；只有<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>组件会触发第二个回调，因为它们是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>参数，而不是<samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>参数。
- en: Don’t forget to change the interval in the layout section back to 60 seconds
    to avoid overloading the API with requests.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 别忘了将布局部分的时间间隔改回60秒，以避免通过请求过载API。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Ordering</samp>
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">回调函数顺序</samp>
- en: Before we move on, it’s important to discuss the order in which we write callbacks.
    If callbacks do not depend on each other, the order does not matter because when
    the page first loads, the callbacks can be called in any order. However, for callbacks
    that do depend on each other, as they do in this app, the writing order is important.
    The callback that needs to be triggered first should be written above any callbacks
    that depend on it; accordingly, we placed the callback that stores the data above
    the callback that uses the stored data to plot the figure.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，重要的是要讨论回调函数的编写顺序。如果回调函数之间没有相互依赖，那么顺序并不重要，因为页面首次加载时，回调函数可以按任何顺序调用。然而，对于那些彼此依赖的回调函数，就像本应用中的情况一样，编写顺序非常重要。需要先触发的回调函数应该写在依赖它的回调函数之前；因此，我们将存储数据的回调写在使用存储数据绘制图形的回调之上。
- en: For a complete video tutorial on Dash chained callbacks, see the video “Chained
    Callback in Dash” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 要观看有关Dash链式回调的完整视频教程，请访问视频“Dash中的链式回调”：[*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express Choropleth Maps</samp>
  id: totrans-402
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express 柱状图地图</samp>
- en: The choropleth map represents quantitative data in shades and colors over a
    map of certain spatial areas. The choropleth map is a great data visualization
    tool for displaying variations in data across regions. The earliest known choropleth
    map was created by Charles Dupin in 1826 to depict the availability of basic education
    in departments of France, as seen in [Figure 5-6](chapter5.xhtml#fig5-6). Choropleths
    were first referred to as *cartes teintées*, or “color maps.”
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 柱状图地图通过不同的阴影和颜色在特定的空间区域上呈现定量数据。柱状图地图是展示区域数据变化的一个很好的数据可视化工具。已知最早的柱状图地图由查尔斯·杜潘（Charles
    Dupin）于1826年创建，用于展示法国各部门基础教育的普及程度，如[图5-6](chapter5.xhtml#fig5-6)所示。柱状图地图最初被称为*cartes
    teintées*，或“色彩图”。
- en: '![](../images/Figure5-6.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: The earliest known
    choropleth map (Source:</samp> [<samp class="SANS_Futura_Std_Book_11">https://en.wikipedia.org/wiki/Choropleth_map</samp>](https://en.wikipedia.org/wiki/Choropleth_map))'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-6：已知最早的柱状图地图（来源：</samp> [<samp
    class="SANS_Futura_Std_Book_11">https://en.wikipedia.org/wiki/Choropleth_map</samp>](https://en.wikipedia.org/wiki/Choropleth_map))
- en: 'We visualize our data as a choropleth using the Plotly Express method <samp
    class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth</samp>. Here is a complete
    list of the attributes pertaining to the choropleth map in Plotly Express:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用 Plotly Express 方法 <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth</samp>
    将数据可视化为 choropleth 图。以下是与 Plotly Express 中 choropleth 地图相关的完整属性列表：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.choropleth(data_frame=None,
    lat=None, lon=None, locations=None, locationmode=None, geojson=None, featureidkey=None,
    color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, facet_row=None,
    facet_col=None, facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None,
    hover_name=None, hover_data=None, custom_data=None, animation_frame=None, animation_group=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, category_orders=None, labels=None,
    color_discrete_sequence=None, color_discrete_map=None, color_continuous_scale=None,
    range_color=None, color_continuous_midpoint=None, projection=None, scope=None,
    center=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, fitbounds=None,
    basemap_visible=None, title=None, template=None, width=None, height=None)</samp>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.choropleth(data_frame=None,
    lat=None, lon=None, locations=None, locationmode=None, geojson=None, featureidkey=None,
    color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, facet_row=None,
    facet_col=None, facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None,
    hover_name=None, hover_data=None, custom_data=None, animation_frame=None, animation_group=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, category_orders=None, labels=None,
    color_discrete_sequence=None, color_discrete_map=None, color_continuous_scale=None,
    range_color=None, color_continuous_midpoint=None, projection=None, scope=None,
    center=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, fitbounds=None,
    basemap_visible=None, title=None, template=None, width=None, height=None)</samp>
- en: To build our choropleth, we only need six of these attributes, as shown in [Listing
    5-17](chapter5.xhtml#List5-17).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们的 choropleth 图，我们只需要其中六个属性，如 [Listing 5-17](chapter5.xhtml#List5-17) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.choropleth(</samp>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.choropleth(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=dff,</samp>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=dff,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   locations="iso3c",</samp>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   locations="iso3c",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen,</samp>
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   scope="world",</samp>
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   scope="world",</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   hover_data={"iso3c": False,
    "country": True},</samp>'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   hover_data={"iso3c": False,
    "country": True},</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           indicators["IT.NET.USER.ZS"]:
    "pop % using internet"},</samp>'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           indicators["IT.NET.USER.ZS"]:
    "pop % using internet"},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-17: The choropleth
    figure inside the second callback function of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-17: 第二个回调函数中的 choropleth
    图</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
- en: To the <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp> attribute
    we assign the dataset we filtered earlier, according to the <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    argument. To <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp> we
    assign the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> column,
    which contains three-letter country codes as defined at the Natural Earth website
    ([*https://<wbr>www<wbr>.naturalearthdata<wbr>.com*](https://www.naturalearthdata.com)).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp> attribute controls
    how the map uses color distinctions. We pass it <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp>,
    which corresponds to the indicator that the user chooses from the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp> 属性，我们将之前根据
    <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> 参数筛选的数据集赋值给它。对于
    <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp>，我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    列赋值给它，该列包含三个字母的国家代码，按自然地球网站的定义（[*https://<wbr>www<wbr>.naturalearthdata<wbr>.com*](https://www.naturalearthdata.com)）。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">color</samp> 属性控制地图如何使用颜色区分。我们将 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp> 传递给它，该变量对应用户从 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp> 中选择的指标。
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> attribute describes
    the area of the map that the figure will feature, and has specific keywords we
    can assign to it: <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">usa</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">asia</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">europe</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">north america</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">south
    america</samp>. For example, if the data plotted was only for Africa, the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> chosen should be <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>
    instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>. Here we
    choose the whole world. The <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    attribute controls what information appears in the tool tips when the user hovers
    their mouse over the map. Here we assign <samp class="SANS_TheSansMonoCd_W5Regular_11">"country":
    True</samp> to show the country names but hide the country codes. The <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>
    attribute instructs the app to change the names of certain columns. Because in
    this case the names are used in the hover tool tip and in the title of the color
    bar to the right of the graph, space is limited. We therefore change the names
    of the labels so that they are shorter and can fit in their respective displayed
    location in the app.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> 属性描述了地图上将展示的区域，并且有一些特定的关键词可以分配给它：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">world</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">usa</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">asia</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">europe</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">north
    america</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">south america</samp>。例如，如果绘制的数据仅针对非洲，则应选择
    <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp> 而不是 <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>。在这里，我们选择整个世界。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp> 属性控制用户将鼠标悬停在地图上时出现的工具提示信息。在这里，我们将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"country": True</samp> 赋值给它，以显示国家名称，但隐藏国家代码。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">labels</samp> 属性指示应用程序更改某些列的名称。因为在这种情况下，这些名称将在悬停工具提示和图表右侧的颜色条标题中使用，空间有限，因此我们改变标签的名称，使其更简短，能够适应应用中相应的位置。'
- en: 'To manipulate certain aspects of the choropleth layout, we must turn to Plotly
    Graph Objects: the low-level interface for creating graphs from the bottom up.
    Given that Plotly Express is built on top of Plotly Graph Objects, anytime a figure
    needs more elaborate customization features that don’t exist in Plotly Express,
    you can use figure attributes from Graph Objects. In [Listing 5-18](chapter5.xhtml#List5-18),
    we use it to change the displayed shape of the map and reduce the empty margin
    space around it, thereby enlarging the map itself.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 要调整 choropleth 布局的某些方面，我们必须转向 Plotly 图形对象：用于从底层创建图表的低级接口。由于 Plotly Express 是建立在
    Plotly 图形对象之上的，每当一个图表需要更复杂的自定义功能，而这些功能在 Plotly Express 中没有时，就可以使用来自图形对象的图表属性。在
    [清单 5-18](chapter5.xhtml#List5-18) 中，我们使用它来更改地图的显示形状，并减少周围的空白边距，从而放大地图本身。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout(</samp>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   geo={"projection": {"type":
    "natural earth"}},</samp>'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   geo={"projection": {"type":
    "natural earth"}},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   margin=dict(l=50, r=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   margin=dict(l=50, r=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-18: Updating the
    layout of the choropleth figure inside the second callback function of</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 5-18：在第二个回调函数内更新 choropleth
    图的布局</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">geo</samp> attribute can take
    many dictionary keys that are responsible for changing the layout of the map,
    including <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">oceancolor</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">resolution</samp>,
    among others. The <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>
    key has its own dictionary key called <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>,
    which determines the shape of the frame for the map. Assigning <samp class="SANS_TheSansMonoCd_W5Regular_11">natural
    earth</samp> to the <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    key displays the map in an oblong frame instead of a boxed frame. Try changing
    <samp class="SANS_TheSansMonoCd_W5Regular_11">natural earth</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">satellite</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">bonne</samp> and see how the
    shape of the map is altered. The second attribute, <samp class="SANS_TheSansMonoCd_W5Regular_11">margin</samp>,
    enlarges the map size displayed by reducing the margins from the default of 80
    pixels to 50 pixels. A complete list of the Plotly Graph Objects attributes for
    choropleths is available at [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>/reference<wbr>/choropleth*](https://plotly.com/python/reference/choropleth).
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">geo</samp> 属性可以包含许多字典键，用于更改地图布局，包括
    <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">oceancolor</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">resolution</samp> 等等。<samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>
    键有一个自己的字典键，叫做 <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>，它决定地图框架的形状。将
    <samp class="SANS_TheSansMonoCd_W5Regular_11">natural earth</samp> 赋值给 <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    键会显示为椭圆形的框架，而不是方形框架。试着将 <samp class="SANS_TheSansMonoCd_W5Regular_11">natural
    earth</samp> 改为 <samp class="SANS_TheSansMonoCd_W5Regular_11">satellite</samp>
    或 <samp class="SANS_TheSansMonoCd_W5Regular_11">bonne</samp>，看看地图的形状如何改变。第二个属性
    <samp class="SANS_TheSansMonoCd_W5Regular_11">margin</samp> 通过将默认的 80 像素边距减少到
    50 像素，扩大了地图的显示大小。有关 choropleth 的 Plotly 图形对象属性的完整列表，请访问 [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>/reference<wbr>/choropleth*](https://plotly.com/python/reference/choropleth)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">摘要</samp>
- en: 'In this chapter you learned several new concepts: you learned to use pandas
    datareader to extract data from the web; you were introduced to Dash Bootstrap
    components to manage the layout and styling of an app and to some new and important
    Dash Core components, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>; you learned
    how to create an app with multiple callbacks; and you dove headfirst into the
    trendy choropleth map. With these skills, you can create ever more effective and
    complex dashboards that update in real time.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了几个新概念：你学习了如何使用 pandas datareader 从网页提取数据；你了解了 Dash Bootstrap 组件，用于管理应用的布局和样式，以及一些新的重要
    Dash Core 组件，如<samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>；你学习了如何创建具有多个回调的应用；并且你深入了解了流行的分区图（choropleth
    map）。掌握了这些技能后，你可以创建更加高效和复杂的实时更新仪表盘。
