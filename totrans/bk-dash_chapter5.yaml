- en: '<samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">GLOBAL
    DATA ANALYSIS: ADVANCED LAYOUTS</samp> <samp class="SANS_Dogma_OT_Bold_B_11">AND
    GRAPHS</samp>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter you’ll expand your knowledge of Dash by building an app that
    compares and analyzes world data on three metrics: internet usage, proportion
    of females in parliament, and carbon dioxide (CO[2]) emissions. We’ll refer to
    these metrics as *indicators*. We’ll look more closely at Dash callbacks, and
    you’ll learn to plot a *choropleth map*, which represents quantitative data in
    the form of shades and colors within certain spatial areas on a map: countries,
    states, provinces, and so on. You’ll also discover a new way to manage layout
    and styling using dash-bootstrap-components, a library that provides complex and
    responsive layouts.'
  prefs: []
  type: TYPE_NORMAL
- en: To gather the data for this app, we’ll access the World Bank application programming
    interface (API) using pandas. *APIs* provide an interface that allows you to connect
    to an external server and request data to feed into your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you’ll be a lot more comfortable plotting data
    on a map, managing more advanced layouts, understanding callbacks, and working
    with dash-core-components. But first things first: let’s set up the app and the
    corresponding code.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Setting Up the Project</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As usual, first you need to create your project folder and place the app code
    inside it. Create a new project folder called *world-bank-app*, and locate the
    *[Chapter-5](chapter5.xhtml)* folder included in the ZIP file you downloaded from
    [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash*](https://github.com/DashBookProject/Plotly-Dash)
    at the beginning of [Chapter 4](chapter4.xhtml). The folder should contain two
    files: *worldbank.py* and *our_indicator.py*. Copy these files into your world-bank-app
    folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The project folder should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- world-bank-app</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--our_indicator.py</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">|--worldbank.py</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll need four libraries: the usual pandas and Dash libraries, as well as
    dash-bootstrap-components and pandas datareader. Open your command prompt (Terminal
    for Mac users) or the Terminal tab in PyCharm or your Python IDE of choice. Then,
    line by line, enter the following to install the four libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash-bootstrap-components</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install pandas-datareader</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'To check that the libraries have installed properly, enter:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    list</samp>
  prefs: []
  type: TYPE_NORMAL
- en: This will list all Python packages you currently have installed. If any of the
    four libraries we need isn’t listed, try reentering the corresponding <samp class="SANS_TheSansMonoCd_W5Regular_11">install</samp>
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we look at the code, let’s check out the app. Open *worldbank.py* in
    your IDE and run the script. You should see a message with an HTTP link. Click
    that link or copy it into your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * Serving Flask app "worldbank"
    (lazy loading)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Environment: production</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     Use a production WSGI server
    instead.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Debug mode: on</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You should now see the World Bank Data Analysis dashboard app, as shown in [Figure
    5-1](chapter5.xhtml#fig5-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: The World Bank
    Data Analysis app</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Have a little fun! Use the slider to change the dates, and use the radio buttons
    to choose a different World Bank data indicator, such as the one for parliament
    seats or the one for CO[2] emissions. Move the map around and hover your mouse
    cursor over certain countries to compare their data. Which country has the highest
    percentage of females in parliament? Which country has seen the biggest growth
    in percentage of internet usage over time? Get familiar with the app, and the
    code should make more sense as we go through it.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Importing the Libraries</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'In this app we’re introducing two new Python libraries: dash-bootstrap-components
    and pandas datareader.'
  prefs: []
  type: TYPE_NORMAL
- en: dash-bootstrap-components is a package that makes it easier to manage the layout
    of the app. Bootstrap supplies components that allow you to do things like place
    app elements more precisely on a page, create more components like graphs and
    radio buttons, and style each element in very detailed ways. It’s basically an
    add-on to the built-in Dash layout capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use pandas to filter and prepare the data for plotting, as we did with
    the app in [Chapter 4](chapter4.xhtml). This app, however, will also use pandas
    datareader, a pandas extension that retrieves data via APIs and creates DataFrames
    from that data. The pandas datareader extension has methods for extracting data
    from multiple common internet sources, such as NASDAQ, the Bank of Canada, the
    World Bank, and several more. Our app uses data from the World Bank only, so to
    access that data we need to import the <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp>
    World Bank module from the datareader extension, as shown in [Listing 5-1](chapter5.xhtml#List5-1).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-1: The import section
    of the</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp
    class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Management</samp>
  prefs: []
  type: TYPE_NORMAL
- en: The next section is the data management code, where we incorporate data into
    our app from the World Bank API. We’ll also clean the data, taking out corrupt
    values, taking out corrupt values, extracting only the data we need, and merging
    it with another DataFrame to get the missing values.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Connecting to an API</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to an API lets our app read data dynamically, allowing us to add
    and change the data we’re reading on the fly, without having to alter and upload
    a static Excel file. By connecting to the API via pandas datareader, we can upload
    new data into the app immediately upon request.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that some APIs enforce a limit on the number of requests
    an individual can make, in order to prevent an API from being overwhelmed. If
    that limit is surpassed, you may be blocked from making more requests for a certain
    amount of time. Taking timeouts between requests is one way to avoid overloading
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">wb</samp> module contains
    functions for getting different types of data pertaining to the World Bank. For
    example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">download()</samp> function
    will extract information from the World Bank’s World Development Indicators when
    passed an indicator as an argument, while <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    will query information about specified countries. We will focus on these two for
    our app.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by downloading the necessary country data into our app, as shown
    in [Listing 5-2](chapter5.xhtml#List5-2).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.get_countries()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries["capitalCity"].replace({"
    ": None}, inplace=True)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries.dropna(subset=["capitalCity"],
    inplace=True)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[["name",
    "iso3c"]]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries[countries["name"]
    != "Kosovo"]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">countries = countries.rename(columns=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">{"name": "country"})</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-2: Downloading country
    data from the World Bank API</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">app</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we connect to the World Bank API and use <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    to extract the names of all the countries. However, the data isn’t as clean as
    we’d like, and some of the rows actually contain names of regions rather than
    countries. For example, if you print the first 10 rows using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">countries = wb.get_countries()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(countries.head(10)[['name']])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">exit()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: you will find that row 1 contains the “Africa Eastern and Southern” region.
    Our app is focused on just countries, so we use <samp class="SANS_TheSansMonoCd_W5Regular_11">dropna()</samp>
    to exclude regions by dropping all rows that don’t have a capital city ❶, which
    should leave us with country names only.
  prefs: []
  type: TYPE_NORMAL
- en: To plot points on a map Plotly uses country codes rather than country names,
    so next we need to provide the app with country codes. These codes are called
    *alpha-3* or *ISO3* codes, and each country has a different code. For example,
    Austria’s is AUT, Azerbaijan’s is AZE, Burundi’s is BDI, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don’t need the other information <samp class="SANS_TheSansMonoCd_W5Regular_11">get_countries()</samp>
    returns, so we limit the DataFrame to two necessary columns: the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column and the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> country
    code column ❷.'
  prefs: []
  type: TYPE_NORMAL
- en: The authors’ previous experiments with our app have shown that the ISO3 data
    for Kosovo is corrupt, so we filter the DataFrame to take out the Kosovo row.
    Lastly, we rename the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    column to <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> to make
    the DataFrame easier to merge with another DataFrame later on (in [Listing 5-4](chapter5.xhtml#List5-4)).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Identifying the Indicators</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'With the countries’ DataFrame built, we need to extract the World Bank data
    tied to our three indicators: internet usage, female politicians, and emissions
    data. We first need to find the indicator’s exact name and then find its respective
    ID so that we can query the API correctly. We get the indicator name directly
    from the World Bank website. Go to [*https://<wbr>data<wbr>.worldbank<wbr>.org<wbr>/indicator*](https://data.worldbank.org/indicator).
    To get the name for the internet usage indicator, click the **All Indicators**
    tab at the top of the page. Then, under the Infrastructure section, click **Individuals
    Using the Internet (% of Population)**. This is the exact name of the indicator
    we will be using in our app. If the World Bank website changes the names of the
    indicators, make sure you search for something similar and grab the exact name.
    We’ll also keep the code in the book’s resources up-to-date, if you get stuck.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we use the indicator name to get its ID using the *our_indicator.py* file
    you downloaded with the book’s resources. In your project folder, open the *our_indicator.py*
    file in a new IDE window and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = wb.get_indicators()[['id','name']]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df[df.name
    == 'Individuals using the Internet (% of population)']</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(df)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'This simply scrapes the entries from the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> columns of the DataFrame
    pertaining to the World Bank site. The output should reveal the ID pertaining
    to that indicator:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">8045</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using the Internet
    (% of population)</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'You’ll need to repeat this process to get the names for the remaining two indicators
    from the World Bank website by replacing <samp class="SANS_TheSansMonoCd_W5Regular_11">''Individuals
    using the Internet (% of population)''</samp> with the name of the other two indicators:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''Proportion of seats held by women
    in national parliaments (%)''</samp>, found in the Gender section, and <samp class="SANS_TheSansMonoCd_W5Regular_11">''CO2
    emissions (kt)''</samp>, found in the Climate Change section. Again, these names
    change every now and then, so if you don’t get a result, make sure you search
    the World Bank indicators page and find the closest match. We then store the indicator
    names and IDs inside a dictionary located in the *worldbank.py* file, which we’ll
    use later on, as shown in [Listing 5-3](chapter5.xhtml#List5-3).'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators = {</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "IT.NET.USER.ZS": "Individuals
    using the Internet (% of population)",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "SG.GEN.PARL.ZS": "Proportion
    of seats held by women in national parliaments (%)",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "EN.ATM.CO2E.KT": "CO2 emissions
    (kt)",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-3: Defining indicators
    inside</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The main code you downloaded will have these IDs, but it’s useful to practice
    retrieving them yourself since they do change from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Extracting the Data</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Now we can build a function that downloads historical data for these three World
    Bank indicators, shown in [Listing 5-4](chapter5.xhtml#List5-4). We’ll save the
    data in a new DataFrame called <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_wb_data():</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Retrieve specific world bank
    data from API</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = wb.download(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      indicator=(list(indicators)),
    country=countries["iso3c"],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      start=2005, end=2016</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.reset_index()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df.year =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">df.year.astype(int)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Add country ISO3 ID to main
    df</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = pd.merge(df, countries,
    on="country")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   df = df.rename(columns=indicators)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return df</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-4: The</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">section
    where historical data is downloaded</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We retrieve the data with the <samp class="SANS_TheSansMonoCd_W5Regular_11">wb.download()</samp>
    method, which has a few parameters. The first is <samp class="SANS_TheSansMonoCd_W5Regular_11">indicator</samp>,
    which takes a list of strings that represent the indicator IDs. Here we assign
    it the keys of the <samp class="SANS_TheSansMonoCd_W5Regular_11">indicators</samp>
    dictionary from [Listing 5-3](chapter5.xhtml#List5-3). The next parameter is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">country</samp>, which takes a list of
    strings that represent the countries’ ISO3 codes. We assign it the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp>
    column of the <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp> DataFrame
    created in [Listing 5-2](chapter5.xhtml#List5-2). Lastly, the <samp class="SANS_TheSansMonoCd_W5Regular_11">start</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">end</samp> parameters allow
    us to define the range of years for which we would like the data pulled. We stop
    at 2016 simply because that’s the last year for which the World Bank has complete
    data for the CO[2] indicator.
  prefs: []
  type: TYPE_NORMAL
- en: We then reset the index so that <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp>, which are part
    of the index, become new columns, and we have a dedicated <samp class="SANS_TheSansMonoCd_W5Regular_11">index</samp>
    column with nothing but integers, which will help with filtering later. You can
    see the effect of resetting an index in [Listing 5-5](chapter5.xhtml#List5-5),
    where we showcase the DataFrame before and after resetting the index.
  prefs: []
  type: TYPE_NORMAL
- en: '|  |  | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp> |  |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> |  |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp> |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 3 columns]</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">>>> df.reset_index()</samp>
    |  |  |  |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">country</samp> | <samp class="SANS_TheSansMonoCd_W7Bold_B_11">year</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SG.GEN.PARL.ZS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">EN.ATM.CO2E.KT</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2016</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">93.542454</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2015</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">88.661227</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2014</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">83.780000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2013</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">78.900000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Aruba</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2012</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">74.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NaN</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2515</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2009</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">4.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">14.953271</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7750.0</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2516</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2008</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.500000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">15.238095</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">7600.0</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2517</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2007</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3.000000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9760.0</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2518</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2006</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.666667</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">9830.0</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">2519</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Zimbabwe</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">2005</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2.400000</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">16.000000</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">10510.0</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">[2520 rows x 5 columns]</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-5: The DataFrame
    before and after resetting the index</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Before resetting the index, <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp> were part of the
    index, but not part of the resultant row associated with an index element. After
    resetting the index, they are both individual columns of the DataFrame, which
    makes it a lot easier to access the individual rows that contain the country and
    year data.
  prefs: []
  type: TYPE_NORMAL
- en: Next we convert the values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">year</samp>
    column from strings to integers so that the data can be filtered correctly with
    pandas later on. The original <samp class="SANS_TheSansMonoCd_W5Regular_11">df</samp>
    DataFrame does not contain the ISO3 country codes we need for querying the API,
    so we extract those codes from the <samp class="SANS_TheSansMonoCd_W5Regular_11">countries</samp>
    DataFrame and merge the two DataFrames with <samp class="SANS_TheSansMonoCd_W5Regular_11">pd.merge</samp>
    on the <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> column. Finally,
    we rename the columns so that they show the indicator names rather than the IDs,
    for human readability. For example, the column <samp class="SANS_TheSansMonoCd_W5Regular_11">IT.NET.USER.ZS</samp>
    will now be named <samp class="SANS_TheSansMonoCd_W5Regular_11">Individuals using
    the Internet (% of population)</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data()</samp> function
    is now complete and will be called inside the first callback as soon as the app
    starts. You’ll learn all about this process later in the chapter. In the meantime,
    let’s learn how to use dash-bootstrap-components to create the layout and style
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Dash Bootstrap Styling</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Dash Bootstrap is a powerful tool for styling Dash apps, helping us create the
    layout, style the app, and add Bootstrap components such as buttons and radio
    items. Buttons and radio items also exist in dash-core-components, but we’ll use
    the dash-bootstrap-components versions for better compatibility with the rest
    of our Bootstrap styling. Bootstrap also contains modules that store items for
    various stylesheet themes as strings, which allows us to simply include links
    to those modules to style the elements.
  prefs: []
  type: TYPE_NORMAL
- en: To incorporate Bootstrap into the Dash app, we must first choose a theme and
    assign it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter right below our imports section, as shown in [Listing 5-6](chapter5.xhtml#List5-6).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import dash_bootstrap_components
    as dbc</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from pandas_datareader import
    wb</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-6: The</samp> <samp
    class="SANS_Futura_Std_Book_11">worldbank.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">section
    where Dash is instantiated</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: A Bootstrap theme is a stylesheet hosted online that determines the type of
    font, color, shape, and size of the elements on the page.
  prefs: []
  type: TYPE_NORMAL
- en: In this app, we use the default theme <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>,
    which is the first theme on the themes list. Bootstrap has several other themes
    at your disposal. To check out the themes, you can go to [*https://<wbr>hellodash<wbr>.pythonanywhere<wbr>.com*](https://hellodash.pythonanywhere.com)
    and click the **Change Theme** button on the left side of the page. You can switch
    up the theme for this app if you like; just make sure you use the exact name in
    capital letters when assigning it to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter. You should only assign one theme at a time, so if you choose a new
    theme, make sure you replace <samp class="SANS_TheSansMonoCd_W5Regular_11">BOOTSTRAP</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete video tutorial on Dash Bootstrap, see the video “Complete Guide
    to Bootstrap Dashboard Apps” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Layout</samp>
  prefs: []
  type: TYPE_NORMAL
- en: As you know, we generally refer to the layout of an app as a grid, which commonly
    consists of 12 columns and an infinite number of rows. To start building the layout,
    we need to create a container that will house all our rows and columns as well
    as the components that will go inside them. The <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Container</samp>
    syntax is pretty much like an <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>,
    but it is more compatible with Bootstrap styling. First we’ll declare the rows,
    then we’ll declare the columns that go inside each row. Finally, we’ll put the
    app components inside the columns. This final step defines the location of each
    component on the page.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid overwhelming you with the 80 lines of code used to create the layout
    in our app, [Listing 5-7](chapter5.xhtml#List5-7) is a simplified version that
    removes the props within each <samp class="SANS_TheSansMonoCd_W5Regular_11">html</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc</samp>
    component to just show the general structure.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = dbc.Container(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              [</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                html.H1(),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dcc.Graph()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=12,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          dbc.Col(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    [</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.Label(),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                dbc.RadioItems(),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              width=4,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">       ),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              dbc.Col(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          [</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Label(),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              dcc.RangeSlider(),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    dbc.Button()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                ],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  width=6,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          ]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-7: App layout simplified</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This app contains three rows. The first row ❶ has a column component that stretches
    12 columns wide and contains the <samp class="SANS_TheSansMonoCd_W5Regular_11">H1</samp>
    heading and <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp> visualization
    components. These correspond to the title and the choropleth map in the app, shown
    in [Figure 5-1](chapter5.xhtml#fig5-1).
  prefs: []
  type: TYPE_NORMAL
- en: In the second row ❷ we place a column component that stretches only four columns
    wide, inside which we place the <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>. These correspond
    to the “Select Data Set” subtitle and the three radio buttons beneath it in the
    app.
  prefs: []
  type: TYPE_NORMAL
- en: The last row ❸ contains the <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>,
    all of which are wrapped in a column component that is six columns wide.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">MULTICOMPONENT ROWS</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">It’s important to reiterate that an effective
    and popular approach to building dashboards is to set a maximum of 12 columns
    per page and allow components to span the width of multiple columns. In this app,
    each row has just one column component, but if we were to add several components
    in a row, we would have to make sure that, combined, they do not surpass the width
    of 12\. Let’s see an example:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=6),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">5),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">In the preceding code, the total width
    is 11, which means that all the Dash components will be displayed on one row.
    Here’s an example of what</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">not</samp>
    <samp class="SANS_Futura_Std_Book_11">to do:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Row([</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, button,
    checkbox], width=8),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     dbc.Col([dropdown, slider,
    date-picker], width=6),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">With a total width of 14, the Dash components
    from the second</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp>
    <samp class="SANS_Futura_Std_Book_11">will wrap into a row underneath the first</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Col</samp><samp class="SANS_Futura_Std_Book_11">,
    resulting in two rows instead of one. This can mess up your layout.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">Components and Styling</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'Dash Bootstrap components are similar to Dash Core components, but with the
    advantage that they are easier to use and integrate with Bootstrap stylesheets.
    In our app, we use three Bootstrap components: <samp class="SANS_TheSansMonoCd_W5Regular_11">Label</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>.
    Let’s look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp> components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp> using
    five props: <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>, as shown in
    [Listing 5-8](chapter5.xhtml#List5-8).'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-8: Defining a Bootstrap
    Button</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop is used to
    uniquely identify this component and will be assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    inside the Dash callback to allow interaction with other components. Here we call
    it <samp class="SANS_TheSansMonoCd_W5Regular_11">my-button</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">children</samp>
    prop represents the text displayed on the button. The <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    prop counts the number of times the button has been clicked by the user, so we
    initialize it at 0\. The <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp>
    prop sets the color of the button background. Here it is assigned the Bootstrap
    contextual color <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>,
    which represents the color blue (we could also use <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp>
    to make it gray, <samp class="SANS_TheSansMonoCd_W5Regular_11">success</samp>
    for green, <samp class="SANS_TheSansMonoCd_W5Regular_11">warning</samp> for orange,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">danger</samp> for red). Note
    that the color represented by <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp>
    depends on which theme you’ve chosen; if you were to choose the LUX theme for
    your Dash app, <samp class="SANS_TheSansMonoCd_W5Regular_11">primary</samp> would
    represent the color black, and <samp class="SANS_TheSansMonoCd_W5Regular_11">secondary</samp>
    would be white.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> controls
    the styling of the component. Here we assign it the Bootstrap class <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp>,
    which controls how much margin there is between the top of the button and the
    component above it. The <samp class="SANS_TheSansMonoCd_W5Regular_11">mt</samp>
    stands for *margin top*, and <samp class="SANS_TheSansMonoCd_W5Regular_11">–4</samp>
    creates four units of space in the margin above the component. All of this creates
    the button shown in [Figure 5-2](chapter5.xhtml#fig5-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: The Submit button
    for our app</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Try changing the margin to <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-1</samp>
    and see how the space shrinks between the button and the range slider above it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also combine multiple classes within the <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp>
    prop to add more styling by adding space between every additional class. For example,
    try adding <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp> after
    <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> as one string to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">className</samp> prop to make the
    Submit text bold, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.Button(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="my-button",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children="Submit",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   n_clicks=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color="primary",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className="mt-4</samp> <samp
    class="SANS_TheSansMonoCd_W7Bold_B_11">fw-bold</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few other <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    props that we aren’t using but are worth highlighting. The <samp class="SANS_TheSansMonoCd_W5Regular_11">href</samp>
    prop can be assigned a URL, thereby taking the user to a new website once the
    button is clicked. The <samp class="SANS_TheSansMonoCd_W5Regular_11">size</samp>
    prop controls the size of the button by assigning one of the following values:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">''lg''</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">''md''</samp>,
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">''sm''</samp>. The <samp class="SANS_TheSansMonoCd_W5Regular_11">disabled</samp>
    prop disables the button when we assign <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    to it; we might want to, for example, create a callback to instruct the app to
    disable the button if it’s no longer needed.'
  prefs: []
  type: TYPE_NORMAL
- en: Next we have <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    (also known as radio buttons), which are small circles or boxes next to a label
    that can be clicked. A radio button is similar to a checkbox except that, while
    the checkbox allows the user to choose multiple labels, the radio button only
    allows one label to be chosen at a time. The user will use it to choose which
    indicator they want to show the data for, as in [Figure 5-3](chapter5.xhtml#fig5-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: The indicator selection
    RadioItems component</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We define the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    with the four props shown in [Listing 5-9](chapter5.xhtml#List5-9).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dbc.RadioItems(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="radio-indicator",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[{"label": i, "value":
    i} for i in indicators.values()],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: ❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">value=list(indicators.values())
    [0],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   input_class_name=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"me-2",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-9: The RadioItems
    component in the layout section of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first give the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    an <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> name. The <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    prop is responsible for displaying the labels. We pass it a list of dictionaries
    ❶, each of which represents a label; we use list comprehension to loop over all
    the indicators and create a label for each item. Alternatively, written out the
    long way in the following code, we could have assigned a list of three dictionaries
    to the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems options</samp>
    prop like this (abridged) version. This would have achieved the exact same result:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">options=[</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "Individuals using…",
    "value": "Individuals using…"},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "Proportion of seats…",
    "value": "Proportion of seats…"},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   {"label": "CO2 emissions (kt)",
    "value": "CO2 emissions (kt)"}</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'Each dictionary has two keys: the <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key determines the text to display to the user, while the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    key is the actual value of the indicator. For example, we use the exact text “CO2
    emissions (kt)” for the value in order to match the indicator’s dictionary key
    value, as in [Listing 5-3](chapter5.xhtml#List5-3). This makes it a lot easier
    to filter the data later in the callback section. The <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp>
    key can be anything you want to display, but here we use the same string for the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">label</samp> and the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    since the string is already clear, informative, and not too long to display.'
  prefs: []
  type: TYPE_NORMAL
- en: The next prop is <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    ❷, which registers the value selected by the user, depending on which radio button
    the user clicks; the object assigned to the <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
    prop in [Listing 5-9](chapter5.xhtml#List5-9) represents the value chosen by default
    as the app loads for the first time. We use the <samp class="SANS_TheSansMonoCd_W5Regular_11">input_class_name</samp>
    prop to style the radio button; in this case, we assign it the Bootstrap class
    <samp class="SANS_TheSansMonoCd_W5Regular_11">me-2</samp> to set the circle two
    units of space to the left of the label. Try changing the number to see how this
    affects the appearance. Note that we can use Bootstrap classes to style Dash Core
    components, as well as Bootstrap components
  prefs: []
  type: TYPE_NORMAL
- en: There are innumerable Bootstrap classes, helpfully summarized and organized
    in the cheat sheet at [*https://<wbr>dashcheatsheet<wbr>.pythonanywhere<wbr>.com*](https://dashcheatsheet.pythonanywhere.com).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">mt-4</samp> class, for example,
    is located under the <samp class="SANS_TheSansMonoCd_W5Regular_11">Spacing</samp>
    utility section, while <samp class="SANS_TheSansMonoCd_W5Regular_11">fw-bold</samp>
    is located under the <samp class="SANS_TheSansMonoCd_W5Regular_11">Text</samp>
    utility section. Play around with the other utilities and give the app your own
    personal style. We won’t go over all the Bootstrap classes here, given the sheer
    number of them; instead, we recommend that you use the cheat sheet and experiment
    with incorporating different classes.
  prefs: []
  type: TYPE_NORMAL
- en: Always assign a Bootstrap theme to the <samp class="SANS_TheSansMonoCd_W5Regular_11">external_stylesheets</samp>
    parameter, as we did in [Listing 5-6](chapter5.xhtml#List5-6), or the Bootstrap
    layout, styling, and elements will fail to function throughout the app.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Core Components</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll add a few new Dash Core components to the app, namely <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> is commonly
    used when we want to present a wide range of values to select from or when the
    user can select a range rather than discrete values. In this case, we’ll use it
    to allow the user to select a single year or a range of years, as shown in [Figure
    5-4](chapter5.xhtml#fig5-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: The years selection
    RangeSlider component</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll define our <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    with six props, as shown in [Listing 5-10](chapter5.xhtml#List5-10).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="years-range",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=2005,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=2016,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   step=1,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=[2005, 2006],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2005: "2005",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2006: " ''06",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2007: " ''07",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2008: " ''08",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2009: " ''09",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2010:
    " ''10",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2011: " ''11",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2012: " ''12",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2013: " ''13",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">    2014:
    " ''14",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2015: " ''15",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">         2016: "2016",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-10: The RangeSlider
    component in the layout section of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">min</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">max</samp>
    props define the lowest and highest values on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    usually from left to right. The <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    prop determines the increment to make when the slider is moved. We set the value
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> so that each movement
    of the slider will change the year by one. However, because we have marks for
    every year, assigning <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>
    to another value, say <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>,
    would achieve the same result; the user’s selection will automatically snap to
    the nearest mark. If we removed the marks for all the years between 2005 and 2016
    and just kept those two, the slider would move to the nearest value in increments
    of three, assuming you assigned <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">step</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> prop determines
    the initial range that’s selected by default when the app loads; it will also
    detect the range of years selected by the app user. The <samp class="SANS_TheSansMonoCd_W5Regular_11">marks</samp>
    prop labels the marks. We assign it a dictionary: the key determines the position
    of the year on the slider, while the value indicates the text to display in that
    position on the app.'
  prefs: []
  type: TYPE_NORMAL
- en: Another common <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    prop, not used here, is <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross</samp>,
    which allows the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    handles (the blue circles you see above 2005 and ’06 in [Figure 5-4](chapter5.xhtml#fig5-4))
    to cross each other when set to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>.
    By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">allowCross=False</samp>,
    but if you changed that to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    you would be able to pull the 2005 handle to the right and over the ’06 handle.
    For a full list of <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    props, go to the Dash components documentation (*http://dash.plotly.com/dash-core-components*)
    and select <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.RangeSlider</samp>.
    The props can be found at the bottom of the page. For a complete video tutorial
    on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    see the video “Range Slider—Python Dash Plotly” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  prefs: []
  type: TYPE_NORMAL
- en: The Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component
    is typically used to save dashboard data in memory on the user’s web browser so
    that the data can be called and recalled quickly and efficiently. The store is
    invisible and does not appear on the user’s page, though we must still declare
    it in the layout section, as shown in [Listing 5-11](chapter5.xhtml#List5-11).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Store(id="storage", storage_type="local",
    data={}),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-11: The Store component
    in the last section of the layout in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This component allows for seamless and quick sharing of data between callbacks.
    There is a limit to the amount of data it can store, however: around 2MB of data
    in mobile environments and from 5MB to approximately 10MB in most desktop-only
    applications. We’ll see how callbacks use the store in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> prop will be used
    later in the callback to identify this component. The <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    prop represents the stored data; this data can be in the form of a dictionary,
    list, integer, string, or Boolean. We don’t actually need to declare the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp> prop or assign an empty dictionary,
    as we did in [Listing 5-11](chapter5.xhtml#List5-11), but we’ve added it here
    for descriptive purposes. The <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    component will always assume it’s there, which is why we don’t have to declare
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The prop <samp class="SANS_TheSansMonoCd_W5Regular_11">storage_type</samp>
    declares how we want to store the data. It has three options: <samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp>.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">session</samp> option retains
    the data until the browser tab or the browser itself is closed and a new one is
    opened. The <samp class="SANS_TheSansMonoCd_W5Regular_11">local</samp> option
    saves the data to the browser until all browsing history and cookies are deleted.
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">memory</samp> option resets
    the data when the browser is refreshed.'
  prefs: []
  type: TYPE_NORMAL
- en: Our last component is the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>,
    used to automatically update the app without having to refresh the browser page
    manually. This is typically used with apps that use data in real time, such as
    financial apps, which need to update themselves with new data every couple of
    seconds. In our app, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    activates the first callback, which itself creates the DataFrame from the data
    pulled from the World Bank pandas API. Then, every 60 seconds, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    reactivates the callback to pull the data again and create a new DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> has a few
    important props, shown in [Listing 5-12](chapter5.xhtml#List5-12).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 60, n_intervals=0),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-12: The Interval
    component in the last section of the layout in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">interval</samp> prop tells
    the app how much time should transpire between every activation of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>.
    We assign this interval in milliseconds, so here we use <samp class="SANS_TheSansMonoCd_W5Regular_11">1000
    * 60</samp>, which is equal to 60 seconds. Every 60 seconds you should see the
    word “Updating” appear in the browser’s window tab. The <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>
    prop counts the number of times the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    has been activated: after 60 seconds <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=1</samp>,
    after 120 seconds <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals=2</samp>,
    and so on until the end of time. One other common prop not presented here is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">max_intervals</samp>, which defines the
    maximum number of times <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    will be activated. If, for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">max_intervals=2</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">interval=1000*60</samp>, the
    app will stop updating itself after 120 seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: In reality, we don’t really need to update the data every 60 seconds, because
    the World Bank probably only updates its data every couple of weeks. We simply
    chose 60-second intervals so that you can see the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    component in action.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete video tutorial on the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>,
    see the video “The Dash Interval Overview” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Callbacks</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our app uses two callbacks. The first callback is responsible for retrieving
    data from the World Bank through the pandas datareader API, while the second callback
    is responsible for creating and displaying the choropleth map on the app.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Retrieval Callback</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'The data retrieval callback will call on the appropriate components to retrieve
    the chosen data every 60 seconds and return a DataFrame of that data, which is
    stored on the user’s web browser. As always, the callback has two sections: the
    callback decorator and the callback function, as shown in [Listing 5-13](chapter5.xhtml#List5-13).'
  prefs: []
  type: TYPE_NORMAL
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"))</samp>
  prefs: []
  type: TYPE_NORMAL
- en: ❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">def store_data(n_time):</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dataframe = update_wb_data()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return dataframe.to_dict("records")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-13: The first callback
    in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the callback decorator ❶ the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> parameters take
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp> and a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>, whose assigned
    values refer to components in the layout section of the app. The <samp class="SANS_TheSansMonoCd_W5Regular_11">component_id</samp>
    of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> parameter in
    this case is <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>, and
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> refers
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp>. These are
    positional arguments, so we don’t need to include the parameters in the decorator
    function code. In fact, the same line of code written the long way would look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output(component_id="storage",
    component_property="data"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input(component_id="timer",
    component_property=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: As shown in [Listing 5-13](chapter5.xhtml#List5-13), <samp class="SANS_TheSansMonoCd_W5Regular_11">"timer"</samp>
    refers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of the Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> component and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"n_intervals"</samp> refers to the prop
    that represents the number of times the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>
    has been fired. Following the same logic, <samp class="SANS_TheSansMonoCd_W5Regular_11">"storage"</samp>
    refers to the <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> of the Dash
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"data"</samp> refers to the prop that
    represents the data being stored on the user’s browser.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the callback function ❷ we pass in the single <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    argument <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>. The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp> argument refers to the value
    assigned to <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>’s <samp
    class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp>, which is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>. Because <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>
    refers to <samp class="SANS_TheSansMonoCd_W5Regular_11">n_intervals</samp>, every
    time the <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> is triggered
    (every 60 seconds) the callback function will be triggered as well. The first
    trigger occurs as soon as the app is rendered on the page for the first time or
    as soon as the page is refreshed.
  prefs: []
  type: TYPE_NORMAL
- en: You can call this argument anything you’d like; it doesn’t have to be called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">n_time</samp>. However, it’s important
    to note that only one argument is passed into the callback function because the
    callback decorator only has one <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Once the function is triggered, it activates the <samp class="SANS_TheSansMonoCd_W5Regular_11">update_wb_data</samp>
    function at the beginning of the app ([Listing 5-4](chapter5.xhtml#List5-4)),
    and it saves the results to the <samp class="SANS_TheSansMonoCd_W5Regular_11">dataframe</samp>
    object. This DataFrame now contains data from the World Bank. The DataFrame is
    then returned. Every object returned in the callback function corresponds to the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">component_property</samp> of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp> argument. In this
    case, the returned DataFrame corresponds to the <samp class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
    prop of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> component,
    as seen in [Listing 5-13](chapter5.xhtml#List5-13). As a result, the retrieved
    World Bank data is stored on the user’s web browser for future use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our callback decorator has only one output, so one object is returned in the
    callback function. In apps where the callback decorator has multiple outputs,
    you will have to return the same number of objects in the callback function. For
    example, here the callback function returns two messages because the decorator
    function has two outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content1",
    "children"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("example-content2",
    "children"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("timer", "n_intervals")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_data(n_time):</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message1 = "text to display
    in the children prop of the 1st Output."</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   message2 = "text to display
    in the children prop of the 2nd Output."</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return message1, message2</samp>
  prefs: []
  type: TYPE_NORMAL
- en: For a complete video tutorial on the Dash callback function, see the video “The
    Dash Callback—Input, Output, State, and more” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_11">DISABLING CALLBACKS ON STARTUP</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">By default, all callbacks are triggered
    when the app starts. However, sometimes you’ll need to stop this from occurring.
    For example, you might have a callback that returns a graph only when a button
    is clicked, so you don’t want that callback to activate at startup before the
    button is clicked. There are two ways to stop the callback from being triggered
    automatically when the app first loads. One is by adding the</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_callbacks</samp>
    <samp class="SANS_Futura_Std_Book_11">line to the start of the app where Dash
    is instantiated and setting it to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp><samp
    class="SANS_Futura_Std_Book_11">, as such:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app = Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP],</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">prevent_initial_callbacks=True</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Book_11">This will stop all callbacks from triggering
    when the page loads for the first time or when the page is refreshed. The second
    method is to enter</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_Futura_Std_Book_11">inside
    the particular callback you don’t want to trigger when the page loads. If we were
    to do so in our first callback, it would look like this:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(Output("storage",
    "data"), Input("timer", "n_intervals"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">prevent_initial_call=True)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Figure Creation Callback</samp>
  prefs: []
  type: TYPE_NORMAL
- en: The figure creation callback will retrieve the stored DataFrame from the user’s
    browser, filter the DataFrame based on the years and dataset selected by the user,
    and return a graph that represents that data visually. The decorator function
    has two <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> arguments,
    two <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments, and
    one <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>, as seen in [Listing
    5-14](chapter5.xhtml#List5-14).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("my-choropleth", "figure"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("my-button", "n_clicks"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Input("storage", "data"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("years-range", "value"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   State("radio-indicator", "value"),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-14: The callback
    decorator of the second callback in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The first <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> refers
    to the number of times the button is clicked, and the second refers to the data
    stored on the user’s browser by the first callback. Next we define a couple of
    <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments. A <samp
    class="SANS_TheSansMonoCd_W5Regular_11">State</samp> argument doesn’t trigger
    the callback when its components are altered, but rather makes note of the user’s
    selection. Here, the first <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    argument checks which range of years the user has chosen on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>,
    and the second one refers to the indicator chosen from the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: When the user changes the year(s) selected on the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    or chooses a different <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItems</samp>
    World Bank indicator, the values are saved, but the choropleth map does not update
    until the button is clicked. This is because the button’s <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
    is a component property of an <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    argument ([Listing 5-14](chapter5.xhtml#List5-14)). Remember, <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    arguments always trigger callbacks. <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    arguments do not.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at the callback function. The callback decorator has four arguments
    that are not <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>s, so
    the callback function must also be assigned four arguments, as shown in [Listing
    5-15](chapter5.xhtml#List5-15).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_graph(n_clicks, stored_dataframe,
    years_chosen, indct_chosen):</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❶  <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = pd.DataFrame.from_records(stored_dataframe)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      print(years_chosen)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] != years_chosen[1]:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❸   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff.year.between(years_chosen[0], years_chosen[1])]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❹   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff.groupby(["iso3c", "country"])[indct_chosen].mean()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         dff = dff.reset_index()</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations="iso3c",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          scope="world",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                           indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❺  <samp class="SANS_TheSansMonoCd_W5Regular_11">if
    years_chosen[0] == years_chosen[1]:</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❻   <samp class="SANS_TheSansMonoCd_W5Regular_11">dff
    = dff[dff["year"].isin(years_chosen)]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      </samp>❼   <samp class="SANS_TheSansMonoCd_W5Regular_11">fig
    = px.choropleth(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    data_frame=dff,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    locations=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"iso3c",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    color=indct_chosen,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    scope="world",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    hover_data={"iso3c":
    False, "country": True},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    labels={</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            indicators["IT.NET.USER.ZS"]:
    "pop % using internet",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    },</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           fig.update_layout(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                    geo={"projection":
    {"type": "natural earth"}},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    margin=dict(l=50,
    r=50, t=50, b=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">50),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return fig</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-15: Defining the
    callback function of the second callback in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'The four arguments correspond to the component properties of <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp> in [Listing 5-14](chapter5.xhtml#List5-14)
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">n_clicks</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">stored_dataframe</samp> to <samp
    class="SANS_TheSansMonoCd_W5Regular_11">data</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp>
  prefs: []
  type: TYPE_NORMAL
- en: The first line of code within the callback function ❶ converts the stored data,
    which is currently a list of dictionaries, to a pandas DataFrame to make it easier
    to create the Plotly Express graphs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We next need to filter the data to prepare it for plotting the choropleth map.
    To see how best to filter the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>
    data, go to the app and try to move the slider handles to select multiple years
    or only one year and hit **Submit**. See what’s then printed out in the Python
    IDE. You should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2006]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2005, 2009]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">[2009, 2009]</samp>
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the app must distinguish whether the two values in the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp> list are different
    from each other ❷ or the same ❺ so that it knows whether to use data from a range
    or a single year. Now that we know what the data looks like, it’s easier to filter.
  prefs: []
  type: TYPE_NORMAL
- en: If the two values are different, it means the user has selected a range. First
    we create a DataFrame that is limited to only those rows pertaining to the range
    of years selected by the user ❸. If the user moved the slider handles to choose
    [2005, 2009], the new DataFrame will include all the years between 2005 and 2009\.
    Next, for each country we extract the mean value for the indicator chosen. Because
    each country appears multiple times on multiple rows—once for each year—we also
    group the DataFrame by the <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> columns ❹. This
    ensures that each country will be represented only once in the new DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not sure what certain lines of code do, add print statements between
    the lines to clarify what the data looks like before and after each manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: If the two values in the <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    list are the same ❺, it means the user selected only one year (for example, [2009,
    2009]). Consequently, there is no need to use <samp class="SANS_TheSansMonoCd_W5Regular_11">groupby</samp>,
    because every country will appear only once. Lastly, we filter the DataFrame so
    that it contains only rows with the selected year ❻.
  prefs: []
  type: TYPE_NORMAL
- en: With the data fully filtered, it is now ready to be used to plot the choropleth
    map. We will use the last section of this chapter, “Plotly Express Choropleth
    Maps,” to go over the creation of the choropleth ❼.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Diagram</samp>
  prefs: []
  type: TYPE_NORMAL
- en: To depict more clearly what’s happening in the callbacks, we’ll look at the
    callback diagram, as we did in [Chapter 4](chapter4.xhtml), to get information
    on the order in which the callbacks are triggered, the amount of time it takes
    to fully render each callback, and the component within the callback that’s being
    activated.
  prefs: []
  type: TYPE_NORMAL
- en: First, as shown in [Listing 5-16](chapter5.xhtml#List5-16), reduce the interval
    in the layout section to 10 seconds so that the callback is triggered more frequently
    and you can see what’s happening in the callback diagram every 10 seconds. Also
    check that <samp class="SANS_TheSansMonoCd_W5Regular_11">debug=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    at the end of the code; otherwise, the diagram won’t appear.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Interval(id="timer", interval=1000
    * 10, n_intervals=0),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-16: The Interval
    component and the last line of code in</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Now run the app, and in the browser click the **Callbacks** button in the lower-right
    corner. [Figure 5-5](chapter5.xhtml#fig5-5) shows the diagram that should appear.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: The callback diagram</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Each callback argument (<samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>)
    is represented by a box, and another box tells you the number of times a callback
    was triggered and how quickly. As you can see, the first input refers to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp> component. The box in
    the second row tells us that the callback has been triggered once (when the page
    loaded), and that it took a little over one second (1,428 milliseconds) to complete
    the callback and store the data on the browser. Observe how the arrow from that
    box points to the storage component in the third row. You should see the top digit
    in the box in the second row increase by one every 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The four boxes in the third row represent the two <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    and two <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp> arguments in
    the second callback. The box beneath informs us that the second callback has been
    triggered once and that it took less than one-tenth of a second to return a figure
    of the choropleth map as an <samp class="SANS_TheSansMonoCd_W5Regular_11">Output</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Approximately one second after the first callback is complete, you should see
    the outline of the storage component highlighted in purple on your screen. This
    is because the storage component activates the second callback.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the diagram changes as the user interacts with the app. Click
    the button, choose a different <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>,
    and move the years of the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp>.
    Whenever you interact with a component, its respective blue box in the diagram
    should highlight. Notice how the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">RangeSlider</samp> do not
    trigger the second callback; only the <samp class="SANS_TheSansMonoCd_W5Regular_11">Button</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp> components trigger
    the second callback because they are <samp class="SANS_TheSansMonoCd_W5Regular_11">Input</samp>
    arguments, as opposed to <samp class="SANS_TheSansMonoCd_W5Regular_11">State</samp>
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to change the interval in the layout section back to 60 seconds
    to avoid overloading the API with requests.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Callback Ordering</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on, it’s important to discuss the order in which we write callbacks.
    If callbacks do not depend on each other, the order does not matter because when
    the page first loads, the callbacks can be called in any order. However, for callbacks
    that do depend on each other, as they do in this app, the writing order is important.
    The callback that needs to be triggered first should be written above any callbacks
    that depend on it; accordingly, we placed the callback that stores the data above
    the callback that uses the stored data to plot the figure.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete video tutorial on Dash chained callbacks, see the video “Chained
    Callback in Dash” at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Plotly Express Choropleth Maps</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The choropleth map represents quantitative data in shades and colors over a
    map of certain spatial areas. The choropleth map is a great data visualization
    tool for displaying variations in data across regions. The earliest known choropleth
    map was created by Charles Dupin in 1826 to depict the availability of basic education
    in departments of France, as seen in [Figure 5-6](chapter5.xhtml#fig5-6). Choropleths
    were first referred to as *cartes teintées*, or “color maps.”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: The earliest known
    choropleth map (Source:</samp> [<samp class="SANS_Futura_Std_Book_11">https://en.wikipedia.org/wiki/Choropleth_map</samp>](https://en.wikipedia.org/wiki/Choropleth_map))'
  prefs: []
  type: TYPE_NORMAL
- en: 'We visualize our data as a choropleth using the Plotly Express method <samp
    class="SANS_TheSansMonoCd_W5Regular_11">px.choropleth</samp>. Here is a complete
    list of the attributes pertaining to the choropleth map in Plotly Express:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">plotly.express.choropleth(data_frame=None,
    lat=None, lon=None, locations=None, locationmode=None, geojson=None, featureidkey=None,
    color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, facet_row=None,
    facet_col=None, facet_col_wrap=0, facet_row_spacing=None, facet_col_spacing=None,
    hover_name=None, hover_data=None, custom_data=None, animation_frame=None, animation_group=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">None, category_orders=None, labels=None,
    color_discrete_sequence=None, color_discrete_map=None, color_continuous_scale=None,
    range_color=None, color_continuous_midpoint=None, projection=None, scope=None,
    center=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">None, fitbounds=None,
    basemap_visible=None, title=None, template=None, width=None, height=None)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: To build our choropleth, we only need six of these attributes, as shown in [Listing
    5-17](chapter5.xhtml#List5-17).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = px.choropleth(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data_frame=dff,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   locations="iso3c",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   color=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen,</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   scope="world",</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   hover_data={"iso3c": False,
    "country": True},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   labels={indicators["SG.GEN.PARL.ZS"]:
    "% parliament women",</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           indicators["IT.NET.USER.ZS"]:
    "pop % using internet"},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-17: The choropleth
    figure inside the second callback function of</samp> <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: To the <samp class="SANS_TheSansMonoCd_W5Regular_11">data_frame</samp> attribute
    we assign the dataset we filtered earlier, according to the <samp class="SANS_TheSansMonoCd_W5Regular_11">years_chosen</samp>
    argument. To <samp class="SANS_TheSansMonoCd_W5Regular_11">locations</samp> we
    assign the <samp class="SANS_TheSansMonoCd_W5Regular_11">iso3c</samp> column,
    which contains three-letter country codes as defined at the Natural Earth website
    ([*https://<wbr>www<wbr>.naturalearthdata<wbr>.com*](https://www.naturalearthdata.com)).
    The <samp class="SANS_TheSansMonoCd_W5Regular_11">color</samp> attribute controls
    how the map uses color distinctions. We pass it <samp class="SANS_TheSansMonoCd_W5Regular_11">indct_chosen</samp>,
    which corresponds to the indicator that the user chooses from the <samp class="SANS_TheSansMonoCd_W5Regular_11">RadioItem</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> attribute describes
    the area of the map that the figure will feature, and has specific keywords we
    can assign to it: <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">usa</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">asia</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">europe</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">north america</samp>, or <samp class="SANS_TheSansMonoCd_W5Regular_11">south
    america</samp>. For example, if the data plotted was only for Africa, the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">scope</samp> chosen should be <samp class="SANS_TheSansMonoCd_W5Regular_11">africa</samp>
    instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">world</samp>. Here we
    choose the whole world. The <samp class="SANS_TheSansMonoCd_W5Regular_11">hover_data</samp>
    attribute controls what information appears in the tool tips when the user hovers
    their mouse over the map. Here we assign <samp class="SANS_TheSansMonoCd_W5Regular_11">"country":
    True</samp> to show the country names but hide the country codes. The <samp class="SANS_TheSansMonoCd_W5Regular_11">labels</samp>
    attribute instructs the app to change the names of certain columns. Because in
    this case the names are used in the hover tool tip and in the title of the color
    bar to the right of the graph, space is limited. We therefore change the names
    of the labels so that they are shorter and can fit in their respective displayed
    location in the app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To manipulate certain aspects of the choropleth layout, we must turn to Plotly
    Graph Objects: the low-level interface for creating graphs from the bottom up.
    Given that Plotly Express is built on top of Plotly Graph Objects, anytime a figure
    needs more elaborate customization features that don’t exist in Plotly Express,
    you can use figure attributes from Graph Objects. In [Listing 5-18](chapter5.xhtml#List5-18),
    we use it to change the displayed shape of the map and reduce the empty margin
    space around it, thereby enlarging the map itself.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.update_layout(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   geo={"projection": {"type":
    "natural earth"}},</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   margin=dict(l=50, r=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">50, t=50, b=50),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 5-18: Updating the
    layout of the choropleth figure inside the second callback function of</samp>
    <samp class="SANS_Futura_Std_Book_11">worldbank.py</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">geo</samp> attribute can take
    many dictionary keys that are responsible for changing the layout of the map,
    including <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">oceancolor</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">resolution</samp>,
    among others. The <samp class="SANS_TheSansMonoCd_W5Regular_11">projection</samp>
    key has its own dictionary key called <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>,
    which determines the shape of the frame for the map. Assigning <samp class="SANS_TheSansMonoCd_W5Regular_11">natural
    earth</samp> to the <samp class="SANS_TheSansMonoCd_W5Regular_11">type</samp>
    key displays the map in an oblong frame instead of a boxed frame. Try changing
    <samp class="SANS_TheSansMonoCd_W5Regular_11">natural earth</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">satellite</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">bonne</samp> and see how the
    shape of the map is altered. The second attribute, <samp class="SANS_TheSansMonoCd_W5Regular_11">margin</samp>,
    enlarges the map size displayed by reducing the margins from the default of 80
    pixels to 50 pixels. A complete list of the Plotly Graph Objects attributes for
    choropleths is available at [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>/reference<wbr>/choropleth*](https://plotly.com/python/reference/choropleth).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this chapter you learned several new concepts: you learned to use pandas
    datareader to extract data from the web; you were introduced to Dash Bootstrap
    components to manage the layout and styling of an app and to some new and important
    Dash Core components, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Store</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Interval</samp>; you learned
    how to create an app with multiple callbacks; and you dove headfirst into the
    trendy choropleth map. With these skills, you can create ever more effective and
    complex dashboards that update in real time.'
  prefs: []
  type: TYPE_NORMAL
