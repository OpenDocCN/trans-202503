- en: '![Image](../images/common1.jpg)'
  id: totrans-0
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common1.jpg)'
- en: '**6**'
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6**'
- en: '**MAD MOVEMENT**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**疯狂的运动**'
- en: 'In this chapter, you’ll use a few different types of motors to make two of
    the most impressive projects in this book: an animatronic head that swivels its
    eyes and talks and a robotic, remote-controlled rover. These toys can amuse the
    Mad Scientist for hours.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将使用几种不同类型的电机，制作本书中最令人印象深刻的两个项目：一个可以转动眼睛并说话的仿生头，以及一个遥控的机器人漫游者。这些玩具能让疯狂的科学家玩上几个小时。
- en: '**EXPERIMENT 8: MAKING A SERVOMOTOR MOVE**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**实验 8：使伺服电机运动**'
- en: '![Image](../images/common2.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common2.jpg)'
- en: One way to get things moving is to use a servomotor, like the one shown in [Figure
    6-1](ch06.xhtml#ch6fig1).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让事情开始运动的一种方法是使用伺服电机，像 [图 6-1](ch06.xhtml#ch6fig1) 所示的那样。
- en: '![Image](../images/06fig01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig01.jpg)'
- en: '*Figure 6-1: A servomotor connected to a micro:bit*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-1：伺服电机连接到 micro:bit*'
- en: A *servomotor* is a small, low-powered motor with an arm you can control with
    your program. Unlike most other motors, servomotors don’t rotate all the way around.
    Instead, they have a 180-degree range of motion. Your program can set the position
    of the motor arm to a particular angle.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*伺服电机* 是一种小型低功率电机，配有可以通过程序控制的臂。与大多数其他电机不同，伺服电机不会完全旋转。相反，它们具有 180 度的运动范围。你的程序可以将电机臂设置到特定的角度。'
- en: In this experiment, you’ll learn how to connect a servomotor to a micro:bit
    and investigate how the servomotor moves.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实验中，你将学习如何将伺服电机连接到 micro:bit，并研究伺服电机的运动方式。
- en: '![Image](../images/f0132-01.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0132-01.jpg)'
- en: '**What You’ll Need**'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你将需要的材料**'
- en: '**Micro:bit**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Micro:bit**'
- en: '**Servomotor** A 9-g servomotor is ideal. A micro:bit has just enough power
    to drive a small servomotor but would struggle with a full-size one. Choose a
    servomotor that is 3V compatible. See the [appendix](app01.xhtml) for more details.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**伺服电机** 理想的伺服电机是 9 克的伺服电机。micro:bit 仅有足够的电力来驱动一个小型伺服电机，但对于全尺寸的伺服电机来说则不够。请选择一个兼容
    3V 的伺服电机。更多详情请参见 [附录](app01.xhtml)。'
- en: '**Alligator clip-to-male jumper cables** These connect the micro:bit to the
    servomotor. (You can also use male-to-male jumper cables; see below.)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**鳄鱼夹-公头跳线电缆** 这些电缆将 micro:bit 连接到伺服电机。（你也可以使用公对公跳线电缆；见下文。）'
- en: '**USB connection to a computer, Monk Makes Power for micro:bit or USB battery
    pack** An AAA battery box may (depending on the servo) work, but AAA batteries
    may not provide enough voltage for the servomotor. See the [appendix](app01.xhtml)
    for options for powering your micro:bit.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**USB 连接到计算机，Monk 为 micro:bit 或 USB 电池包提供电源** 一个 AAA 电池盒可能（取决于伺服电机）能工作，但 AAA
    电池可能无法提供足够的电压来驱动伺服电机。有关为 micro:bit 提供电源的选项，请参见 [附录](app01.xhtml)。'
- en: Instead of using the alligator clip-to-male jumper cables, you could use the
    more common male-to-male jumper cables by pushing one end of the cable into the
    servomotor connector and clipping an alligator cable to the other end. However,
    you would need to make sure the connections don’t accidentally short out. In general,
    alligator clip-to-male jumper cables will be a useful thing to have in your micro:bit
    toolbox, so it’s worth getting some.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用更常见的公对公跳线电缆，而不是使用鳄鱼夹-公头跳线电缆，只需将电缆的一端插入伺服电机连接器，另一端夹上鳄鱼夹。但你需要确保连接不会意外短路。通常，鳄鱼夹-公头跳线电缆将是你
    micro:bit 工具箱中的一项有用物品，所以值得准备一些。
- en: '**Construction**'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: Connect the servomotor to your micro:bit.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将伺服电机连接到你的 micro:bit。
- en: 'Go to *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    to access the book’s code repository and click the link for **Experiment 8: Servomotors**.
    Once the program has opened, click **Download** and then copy the hex file onto
    your micro:bit. If you get stuck on this, head back to [Chapter 1](ch01.xhtml#ch01).'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    访问本书的代码库，点击 **实验 8：伺服电机** 的链接。程序打开后，点击 **下载**，然后将 hex 文件复制到你的 micro:bit 上。如果你在这方面遇到困难，请返回查看
    [第 1 章](ch01.xhtml#ch01)。
- en: If you prefer to use Python, you’ll find the code for this at the same website.
    For instructions for downloading and using the book’s examples, see “Downloading
    the Code” on [page 34](ch01.xhtml#page_34). The Python file for this experiment
    is *Experiment_08.py*.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你更喜欢使用 Python，可以在同一网站上找到相应的代码。有关下载和使用书中示例的说明，请参见 [第 34 页](ch01.xhtml#page_34)中的“下载代码”部分。本实验的
    Python 文件是 *Experiment_08.py*。
- en: Servomotors come with different kinds of arms that can be attached to the cog-like
    shaft of the motor. For this project, select a simple arm like the one shown in
    [Figure 6-1](ch06.xhtml#ch6fig1).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伺服电机有不同种类的手臂，可以连接到电机的齿轮状轴上。对于这个项目，选择一个简单的手臂，如[图 6-1](ch06.xhtml#ch6fig1)所示。
- en: '**NOTE** *Your servomotor should come with a little screw. This is intended
    to fix the arm more permanently to the shaft. If you’re planning to do the animatronic
    head project, keep the screw nearby; otherwise, put it in a safe place for later
    use.*'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意** *你的伺服电机应该附带一个小螺丝。这个螺丝用于将手臂更稳固地固定在轴上。如果你计划制作仿生头项目，请将螺丝放在手边；否则，放在安全的地方以备后用。*'
- en: Connect your micro:bit to the servomotor using the alligator clip, as shown
    in [Figure 6-2](ch06.xhtml#ch6fig2).![Image](../images/06fig02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用鳄鱼夹将你的 micro:bit 连接到伺服电机，如[图 6-2](ch06.xhtml#ch6fig2)所示。![Image](../images/06fig02.jpg)
- en: '*Figure 6-2: A servomotor connected to a micro:bit*'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-2：一个连接到 micro:bit 的伺服电机*'
- en: 'The servomotor has three connections, which are color-coded:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 伺服电机有三个连接，按颜色编码：
- en: '**Control** Orange or yellow (This pin controls the position of the servomotor’s
    arm.)'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**控制** 橙色或黄色（这个引脚控制伺服电机手臂的位置。）'
- en: '**+V** The red wire is the positive power wire. Servomotors ideally use 5V,
    but most small servomotors will also work with the 3V of a micro:bit.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**+V** 红色线是正电源线。伺服电机理想情况下使用 5V，但大多数小型伺服电机也可以在 micro:bit 的 3V 上工作。'
- en: '**GND** Usually brown, sometimes black (This is the negative power wire.)'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**GND** 通常是棕色的，有时是黑色的（这是负电源线。）'
- en: Once powered up, the servomotor arm should jump to a 90-degree position, perpendicular
    to the servomotor. The micro:bit will use this position as a reference point.
    If the arm isn’t at 90 degrees, take it off and put it back on so that it is,
    as shown in [Figure 6-1](ch06.xhtml#ch6fig1). If you plan to make the animatronic
    head, use the small screw to fix the arm in place.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦通电，伺服电机的手臂应该跳到 90 度位置，与伺服电机垂直。micro:bit 将使用这个位置作为参考点。如果手臂不是 90 度位置，请将其取下并重新安装，使其处于
    90 度位置，如[图 6-1](ch06.xhtml#ch6fig1)所示。如果你计划制作仿生头，请使用小螺丝将手臂固定在位置上。
- en: You now have a functioning servomotor! Pressing button A should move the servo
    arm 10 degrees in one direction. Pressing button B should move the servo arm 10
    degrees in the other direction. If you press both buttons together, the current
    angle of the arm should scroll across the micro:bit’s display.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经有了一个功能正常的伺服电机！按下按钮 A 应该使伺服手臂向一个方向移动 10 度。按下按钮 B 应该使伺服手臂向另一个方向移动 10 度。如果同时按下两个按钮，手臂的当前角度应该会在
    micro:bit 的显示屏上滚动显示。
- en: '**Code**'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**代码**'
- en: Both programs follow the same approach of first setting the servomotor’s angle
    to 90 degrees and then waiting for button presses to increase the angle, decrease
    it, or display it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 两个程序遵循相同的方式，首先将伺服电机的角度设置为 90 度，然后等待按钮按下，增加或减少角度，或者显示角度。
- en: '**Blocks Code**'
  id: totrans-34
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**块代码**'
- en: Here is the Blocks code for this experiment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是此实验的块代码。
- en: '![Image](../images/f0135-01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0135-01.jpg)'
- en: We use a variable called `angle` to remember the current angle of the servomotor.
    We define the `angle` variable in the `on start` block and give it an initial
    value of 90\. When the next servo `write pin` block runs, it moves the servo arm
    to the position set in `angle` so that the arm jumps to a 90-degree angle on power-up.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个名为 `angle` 的变量来记住伺服电机的当前角度。我们在 `on start` 块中定义 `angle` 变量，并赋予它初始值 90。在下一次运行
    `servo write pin` 块时，它将把伺服电机的手臂移动到 `angle` 中设置的位置，从而使手臂在上电时跳到 90 度位置。
- en: If you press button A, the `on button A pressed` block is called. If you press
    button B, `on button B pressed` is called. The buttons work in a similar way.
    The block for button A first checks whether the angle is still greater than or
    equal to 10 and, if so, subtracts 10 from the angle to move the arm in one direction.
    The block for Button B checks whether the angle is less than or equal to 170 and,
    if it is, adds 10 to the angle and moves the arm in the opposite direction. Both
    use the `servo write pin` to set the servo to the new angle as a result of the
    buttons being pressed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按下按钮 A，将调用 `on button A pressed` 块。如果按下按钮 B，将调用 `on button B pressed` 块。这两个按钮的工作方式类似。按钮
    A 的块首先检查角度是否仍大于或等于 10，如果是，则从角度中减去 10，将手臂向一个方向移动。按钮 B 的块检查角度是否小于或等于 170，如果是，则向角度添加
    10，并将手臂向相反方向移动。两个块都使用 `servo write pin` 来设置伺服电机的新角度，作为按钮按下后的结果。
- en: '**MicroPython Code**'
  id: totrans-39
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**MicroPython 代码**'
- en: Here is the MicroPython version of the code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 MicroPython 版本的代码。
- en: from microbit import *
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从 microbit 导入 *
- en: 'def set_servo_angle(pin, angle):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'def set_servo_angle(pin, angle):'
- en: duty = 26 + (angle * 51) / 90
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: duty = 26 + (angle * 51) / 90
- en: pin.write_analog(duty)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: pin.write_analog(duty)
- en: angle = 90
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: angle = 90
- en: set_servo_angle(pin2, angle)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: set_servo_angle(pin2, angle)
- en: 'while True:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: 'if button_a.was_pressed() and angle >= 10:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'if button_a.was_pressed() and angle >= 10:'
- en: angle -= 10
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: angle -= 10
- en: set_servo_angle(pin2, angle)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: set_servo_angle(pin2, angle)
- en: 'if button_b.was_pressed() and angle <= 170:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'if button_b.was_pressed() and angle <= 170:'
- en: angle += 10
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: angle += 10
- en: set_servo_angle(pin2, angle)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: set_servo_angle(pin2, angle)
- en: 'if button_a.is_pressed() and button_b.is_pressed():'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'if button_a.is_pressed() and button_b.is_pressed():'
- en: display.scroll(str(angle))
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: display.scroll(str(angle))
- en: 'The MicroPython code works in much the same way as the Blocks code. But unlike
    in the Blocks code, there is no predefined function to set the servomotor to a
    particular angle. Fortunately, we can write our own method using a little math
    and PWM analog outputs (see “Making an Analog Signal: Pulse Width Modulation”
    on [page 8](ch01.xhtml#page_8)), which generate the pulses that our servomotor
    expects (more on this next).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: MicroPython 代码与 Blocks 代码的工作方式非常相似。但与 Blocks 代码不同的是，MicroPython 中没有预定义的函数来将伺服电机设置为特定角度。幸运的是，我们可以使用一些数学和
    PWM 模拟输出（参见 [第 8 页](ch01.xhtml#page_8)的“制作模拟信号：脉宽调制”），编写自己的方法，生成伺服电机所需的脉冲（稍后会详细介绍）。
- en: '**How It Works: Servomotors and Pulses**'
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**工作原理：伺服电机与脉冲**'
- en: You control servomotors by sending them a series of repeating electrical pulses—in
    this case, from the micro:bit. The pulses are generated by turning a pin on and
    off very quickly. The servomotor knows how to act based on how long the pulse
    has been high (3V) over a certain time period. The proportion of time that the
    signal is high, and thus the pin is on, is known as the *duty cycle*. This is
    different from the actual amount of time that the signal is high, which is known
    as the *pulse width*. We refer to this amount of time, measured in milliseconds
    (ms), as a *width* because we can visualize pulses as a square wave (see [Figure
    6-3](ch06.xhtml#ch6fig3)). The total length of the wave (between each *on* pulse)
    is the *period*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过发送一系列重复的电脉冲来控制伺服电机——在本例中，脉冲来自 micro:bit。脉冲通过快速打开和关闭一个引脚来生成。伺服电机根据脉冲保持高电平（3V）的时间来判断如何动作。信号处于高电平的时间比例，即引脚打开的时间比例，称为
    *占空比*。这与信号高电平的实际持续时间不同，后者称为 *脉冲宽度*。我们将这一段时间（以毫秒为单位）称为 *宽度*，因为我们可以将脉冲可视化为方波（参见
    [图 6-3](ch06.xhtml#ch6fig3)）。波形的总长度（每个 *开* 脉冲之间）称为 *周期*。
- en: '![Image](../images/06fig03.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig03.jpg)'
- en: '*Figure 6-3: Pulses controlling a servomotor*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-3：控制伺服电机的脉冲*'
- en: A servomotor expects to receive a pulse every 20 milliseconds, or at a rate
    of 50 pulses a second. Each pulse has a width between 0.5 milliseconds and 2.5
    milliseconds.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服电机期望每 20 毫秒接收到一个脉冲，或者每秒 50 个脉冲。每个脉冲的宽度在 0.5 毫秒和 2.5 毫秒之间。
- en: As you can see in [Figure 6-3](ch06.xhtml#ch6fig3), the length of the pulse
    determines the position of the arm. If the pulse width is 0.5 ms, the servomotor’s
    arm will be at one end of its range (0 degrees). If the pulse width is 1.5 ms,
    the arm will be at its center position (90 degrees). And if the width is 2.5 ms,
    the arm will be at 180 degrees.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在 [图 6-3](ch06.xhtml#ch6fig3) 中看到的，脉冲的长度决定了伺服电机臂的位置。如果脉冲宽度为 0.5 毫秒，伺服电机的臂将处于范围的一端（0
    度）。如果脉冲宽度为 1.5 毫秒，臂将处于中心位置（90 度）。如果宽度为 2.5 毫秒，臂将处于 180 度位置。
- en: Conveniently, the micro:bit’s default frequency for analog output (see [Chapter
    1](ch01.xhtml#ch01)) is 50Hz—exactly the right frequency for a servomotor. However,
    even the longest pulse is only 2.5 ms out of a total period of 20 ms, meaning
    that the longest pulse will only be high about one-tenth of the time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，micro:bit 的模拟输出默认频率（参见 [第 1 章](ch01.xhtml#ch01)）是 50Hz——正好是伺服电机所需的频率。然而，即使是最长的脉冲，也只有
    2.5 毫秒，占总周期 20 毫秒的十分之一，这意味着最长的脉冲只有大约十分之一的时间是高电平。
- en: '[Figure 6-4](ch06.xhtml#ch6fig4) helps to explain how the numbers used in the
    MicroPython `set_servo_angle` function were calculated. The *duty value* is the
    number supplied to the `set_servo_angle` function. This value must be between
    0 and 1023, where 0 is no pulse at all and 1023 is a pulse so long that it lasts
    until the next cycle.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 6-4](ch06.xhtml#ch6fig4) 有助于解释如何计算 MicroPython 中 `set_servo_angle` 函数使用的数字。*占空比*是传递给
    `set_servo_angle` 函数的数字。该值必须在 0 到 1023 之间，其中 0 表示没有脉冲，1023 表示脉冲持续的时间长到下一周期才结束。'
- en: '![Image](../images/06fig04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig04.jpg)'
- en: '*Figure 6-4: Correspondence of duty values to pulse widths to servo arm angles*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-4：占空比值与脉冲宽度与伺服臂角度的对应关系*'
- en: The top line of [Figure 6-4](ch06.xhtml#ch6fig4) shows the servo arm’s range
    of positions in terms of angles from 0 to 180 degrees. The code must convert this
    into a different range of numbers, from 0.5 to 2.5, that are the pulse widths
    corresponding to those angles.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[图6-4](ch06.xhtml#ch6fig4)的顶部显示了伺服臂在0到180度范围内的位置。代码必须将这个范围转换为另一组数字，从0.5到2.5，这些数字是与这些角度对应的脉冲宽度。'
- en: To convert an angle in degrees to a pulse width in milliseconds, we’ll start
    with the information that a pulse of length 0.5 ms is equal to an angle of 0 degrees
    and a pulse of length 2.5 ms is equal to an angle of 180 degrees. We can then
    find the degrees per millisecond by dividing the range of degrees (180) by the
    range of pulse lengths (2), giving 90 degrees per millisecond. Then, to calculate
    the pulse length of a new angle, we begin with our baseline, 0.5 ms and add the
    angle we are using divided by 90, the degrees per millisecond.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要将角度（以度为单位）转换为脉冲宽度（以毫秒为单位），我们从以下信息开始：一个长度为0.5毫秒的脉冲等于0度的角度，长度为2.5毫秒的脉冲等于180度的角度。然后，我们可以通过将度数范围（180）除以脉冲长度范围（2）来计算每毫秒的度数，从而得出每毫秒90度。接着，为了计算新角度的脉冲长度，我们从基准值0.5毫秒开始，并加上我们使用的角度除以每毫秒的度数（90）。
- en: Let’s consider an example. If the angle is 0 degrees, the pulse length in milliseconds
    will be 0.5 (0.5 + 0/90 = 0.5). If the angle is 90 degrees, the pulse length will
    be 0.5 + (90/90) = 1.5 ms. And if the angle is 180 degrees, the pulse length will
    be 0.5 + (180/90) = 2.5 ms.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来考虑一个例子。如果角度为0度，脉冲长度将为0.5毫秒（0.5 + 0/90 = 0.5）。如果角度为90度，脉冲长度将为0.5 + (90/90)
    = 1.5毫秒。如果角度为180度，脉冲长度将为0.5 + (180/90) = 2.5毫秒。
- en: 'Now we have a formula for the pulse length for an angle:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个关于角度的脉冲长度公式：
- en: '`pulse_length` = 0.5 + `angle`/90'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`pulse_length` = 0.5 + `angle`/90'
- en: But, referring to [Figure 6-5](ch06.xhtml#ch6fig5) again, we need to convert
    the pulse length in milliseconds to a duty value between 0 and 1023 because the
    `set_servo_angle` function expects a value in that range.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但再次参考[图6-5](ch06.xhtml#ch6fig5)，我们需要将脉冲长度（毫秒）转换为0到1023之间的占空比值，因为`set_servo_angle`函数需要这个范围的值。
- en: The duty value (0 to 1023) is calculated by multiplying the pulse length in
    milliseconds by the number of steps per millisecond (1023/20 ≈ 51). For example,
    a pulse length of 1.5 milliseconds would require a duty value of 1.5 × 51 ≈ 77.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 占空比值（0到1023）是通过将脉冲长度（毫秒）乘以每毫秒的步数（1023/20 ≈ 51）来计算的。例如，一个1.5毫秒的脉冲长度将需要一个占空比值为1.5
    × 51 ≈ 77。
- en: 'In other words:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说：
- en: '`duty_value` = `pulse_length` × 51'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`duty_value` = `pulse_length` × 51'
- en: 'Combining these two formulas, we have:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个公式结合起来，我们得到：
- en: '`duty_value` = (0.5 + `angle`/90) × 51'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`duty_value` = (0.5 + `angle`/90) × 51'
- en: 'This can also be written as (with rounding):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以写成（四舍五入后）：
- en: '`duty_value` = 26 + `angle` × 51/90'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`duty_value` = 26 + `angle` × 51/90'
- en: So the values used in the `write_analog` function are between 26 and 128\. This
    range reflects the fact that the pulses are quite short in comparison to the maximum
    duty cycle value of 1023.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`write_analog`函数中使用的值在26到128之间。这个范围反映了脉冲与最大占空比值1023相比非常短的事实。
- en: '**PROJECT: ANIMATRONIC HEAD (MIKE THE MICRO:BIT ROBOT)**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目：动画头（MIKE THE MICRO:BIT 机器人）**'
- en: '![Image](../images/common3.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/common3.jpg)'
- en: '*Difficulty: Hard*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*难度：难*'
- en: This animatronic head, shown in [Figure 6-5](ch06.xhtml#ch6fig5), makes a great
    project for a Halloween display. A servomotor moves a pair of ping-pong ball eyes
    from left to right, and it uses the micro:bit’s display as a mouth. When the head
    talks, the lights simulate a simple animation of lips moving.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个动画头，如[图6-5](ch06.xhtml#ch6fig5)所示，是一个非常适合万圣节展示的项目。一个伺服电机将一对乒乓球眼睛从左到右移动，它还使用micro:bit的显示屏作为嘴巴。当头部讲话时，灯光模拟出嘴唇移动的简单动画。
- en: '![Image](../images/06fig05.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/06fig05.jpg)'
- en: '*Figure 6-5: The animatronic head*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-5：动画头*'
- en: '**What You’ll Need**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**你将需要的材料**'
- en: 'For this project, you’ll need the following items:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你将需要以下物品：
- en: '**Micro:bit**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Micro:bit**'
- en: '**Servomotor** A small 9g servomotor is ideal.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**伺服电机** 一款小型9克伺服电机是理想选择。'
- en: '**Amplified speaker** For the head’s voice (Monk Makes Speaker for micro:bit
    is a good choice.)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**放大扬声器** 用于头部的声音（Monk Makes扬声器是一个不错的选择。）'
- en: '**3 × Alligator clip-to-male jumper cables** To attach the servomotor'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**3 × 鳄鱼夹到公头跳线** 用于连接伺服电机'
- en: '**3 × Alligator clip cables** To attach the speaker'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**3 × 鳄鱼夹电缆** 用于连接扬声器'
- en: '**2 × Ping-pong balls** For the eyeballs (Balls without any writing or logos
    on them make decoration easier. Grab a couple of spares, just in case.)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**2 × 乒乓球** 用作眼球（没有任何文字或标志的球更易于装饰。准备几个备用球，以防万一。）'
- en: '**Thick card** Roughly letter or A4 card that is 3 mm or more thick'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**厚纸板** 大约是字母纸或A4纸，厚度在3毫米或以上'
- en: '**Paper and access to a printer** To print a template for cutting out the framework'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**纸张和打印机** 用于打印框架的模板'
- en: '**2 × 3-inch (75 mm) paper clips** These are used to make the axles that allow
    the eyes to swivel and the frame that connects the eyes to the servomotor. Ideally,
    these are 1.5 mm in diameter.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**2 × 3英寸（75毫米）回形针** 用于制作允许眼球旋转的轴，以及连接眼球与伺服电机的框架。理想情况下，这些回形针直径为1.5毫米。'
- en: '**Adhesive tape** For sticking the cardboard together and sticking various
    things to the cardboard'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**胶带** 用于将纸板粘合在一起，并将各种物品粘贴到纸板上'
- en: '**Blu-Tack adhesive putty** To attach the speaker to the cardboard'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**蓝丁胶粘土** 用于将扬声器固定在纸板上'
- en: '**Paper glue** To stick the template onto the cardboard'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**纸胶水** 用于将模板粘贴到纸板上'
- en: '**Scissors and/or craft knife**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**剪刀和/或美工刀**'
- en: '**Paint or pens** To draw the eyeballs'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**画笔或马克笔** 用于绘制眼球'
- en: '**A drill with 5/64-inch (#47) or 2-mm bit** To make holes in the ping-pong
    balls'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**带有5/64英寸（#47）或2毫米钻头的电钻** 用于在乒乓球上钻孔'
- en: '**Pliers** To bend the wire'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**钳子** 用于弯曲线材'
- en: '**Construction**'
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构建**'
- en: We’ll begin by creating the eyeballs.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从制作眼球开始。
- en: Grab two ping-pong balls ([Figure 6-6](ch06.xhtml#ch6fig6)) and prepare to decorate.
    The best way to draw an eyeball is to first find two small circular items, one
    a bit bigger than the other (perhaps the lid of a toothpaste tube and a ring)
    and then, using the circular items and a pencil, trace two concentric circles
    on the surface of the ping-pong ball. Once this is done, color the outer ring
    (the iris) and the inner circle (the pupil) two different colors.![Image](../images/06fig06.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拿两个乒乓球（[图6-6](ch06.xhtml#ch6fig6)），准备装饰。画眼球的最佳方法是先找到两个小圆物品，一个稍大于另一个（也许是牙膏盖和一个环），然后用圆物品和铅笔在乒乓球表面上描出两个同心圆。完成后，将外圈（虹膜）和内圈（瞳孔）涂上两种不同的颜色。![图片](../images/06fig06.jpg)
- en: '*Figure 6-6: Decorating an eyeball*'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图6-6：装饰眼球*'
- en: 'Once you’ve drawn on the two balls to make them look like eyes, drill three
    holes in each, through which you’ll feed wires. Using a pencil, make three marks:
    with the pupil of the eye facing you, make one mark at the bottom of the ball,
    one at the top, and a final mark on the back opposite the pupil. The holes on
    the top and bottom will be used to thread the eyeball onto a vertical wire to
    hold it in position. The hole in the back will be used to attach the second wire,
    which will move the eye left and right.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在两个乒乓球上画好眼球图案后，在每个球上钻三个孔，用来穿线。用铅笔做三个标记：以瞳孔朝向自己时，在球的底部、顶部和瞳孔的背面分别做一个标记。顶部和底部的孔将用于将眼球固定在垂直的线材上，保持其位置。背面的孔将用于连接第二根线，用于左右移动眼球。
- en: '**WARNING** *Using a drill can be dangerous! For this part of the project,
    a responsible adult should use the drill or at least supervise. The main precaution
    is to keep the ping-pong ball on a flat surface and hold it from the sides. Then
    drill from above, as shown in [Figure 6-7](ch06.xhtml#ch6fig7). If you have a
    vise to clamp the ball in place, that’s even better.*'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告** *使用电钻可能会有危险！在项目的这一部分，应该由一位负责任的成年人使用电钻，或至少进行监督。主要的安全措施是将乒乓球放在平坦的表面上，双手握住两侧。然后从上方钻孔，如[图6-7](ch06.xhtml#ch6fig7)所示。如果有台钳固定球体，那就更好了。*'
- en: '![Image](../images/06fig07.jpg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](../images/06fig07.jpg)'
- en: '*Figure 6-7 Drilling the eyeball*'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图6-7：钻孔眼球*'
- en: Once you’re happy with the position of the marks, grab a drill bit with a diameter
    slightly larger than that of the paper clip wire and drill into the ping-pong
    ball. For the 1.5 mm paper clips, a 5/64-inch (#47) or 2-mm drill bit is perfect.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你对标记的位置满意后，拿一个钻头，直径稍大于回形针的线径，开始在乒乓球上钻孔。对于1.5毫米的回形针，5/64英寸（#47）或2毫米的钻头非常合适。
- en: Make a frame for the eyeballs. Start by completely straightening out a paper
    clip. Then make the three bends labeled A, B, and C in [Figure 6-8](ch06.xhtml#ch6fig8).![Image](../images/06fig08.jpg)
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制作眼球框架。首先将回形针完全拉直。然后按照[图6-8](ch06.xhtml#ch6fig8)中的A、B、C三处弯曲。![图片](../images/06fig08.jpg)
- en: '*Figure 6-8: Where to bend the paper clip to make the eye frame*'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图6-8：如何弯曲回形针以制作眼球框架*'
- en: Make bends A and C first. Both should be 90 degrees. These will hold the eyeballs
    upright. Next, make a slight bend at the center of the wire—this is bend B. Bend
    B will provide something to tape onto the cardboard chassis you will make next.
    Place the eyeballs on the frame as shown in [Figure 6-9](ch06.xhtml#ch6fig9).![Image](../images/06fig09.jpg)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 先做 A 和 C 两个弯曲。两者都应为 90 度。这些弯曲将使眼球保持直立。接下来，在电线的中心处做一个轻微的弯曲——这就是弯曲 B。弯曲 B 将提供一个可以粘贴到你接下来将制作的纸板底盘上的地方。将眼球按[图
    6-9](ch06.xhtml#ch6fig9)所示放置在框架上。![Image](../images/06fig09.jpg)
- en: '*Figure 6-9: Placing the eyes on the frame*'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-9：将眼睛放置在框架上*'
- en: Once you’ve mounted the eyeballs, you can bend the 10 mm tips of the wires over
    the eyeballs to prevent them from falling off, as shown in [Figure 6-9](ch06.xhtml#ch6fig9).
    Use pliers to avoid hurting your fingers.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你安装了眼球，可以将电线的 10 毫米尖端弯曲到眼球上方，以防它们掉落，如[图 6-9](ch06.xhtml#ch6fig9)所示。使用钳子以避免伤到手指。
- en: '**NOTE** *These bends don’t have to be perfect the first time. Plan to make
    some adjustments as you build the project.*'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意** *这些弯曲第一次做得不必完美。在制作项目的过程中，你可以进行一些调整。*'
- en: Now let’s start assembling the cardboard chassis that will hold everything together.
    To make this easier, I’ve provided a template that can be downloaded with the
    code for the book. The template is in the folder *other downloads* and is called
    *Animatronic_Head_Template*. It is available in PDF, PNG, and SVG formats. Download
    it, print it out, and fix it onto a slightly larger piece of cardboard, as shown
    in [Figure 6-10](ch06.xhtml#ch6fig10).![Image](../images/06fig10.jpg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们开始组装底盘，它将把所有部件固定在一起。为了让这一步更容易，我提供了一个可以与书籍代码一起下载的模板。模板位于 *其他下载* 文件夹中，名为
    *Animatronic_Head_Template*。它有 PDF、PNG 和 SVG 格式可供选择。下载后，打印出来并将其固定在稍大的纸板上，如[图 6-10](ch06.xhtml#ch6fig10)所示。![Image](../images/06fig10.jpg)
- en: '*Figure 6-10: The paper template glued to a piece of cardboard*'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-10：将纸模板粘贴到纸板上的过程*'
- en: Except for the places noted in [Figure 6-10](ch06.xhtml#ch6fig10), cut along
    the lines. This will give you the pieces of cardboard shown in [Figure 6-11](ch06.xhtml#ch6fig11).
    For many of the cuts, scissors will be fine, but you’ll really need a craft knife
    to make the cutouts for the slots and servomotor.![Image](../images/06fig11.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了[图 6-10](ch06.xhtml#ch6fig10)中标出的地方外，沿着线条切割。这将得到[图 6-11](ch06.xhtml#ch6fig11)中所示的纸板件。大多数切割使用剪刀就可以，但你需要一把工艺刀来切割插槽和伺服电机的开口。![Image](../images/06fig11.jpg)
- en: '*Figure 6-11: The cardboard pieces for the chassis*'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-11：底盘的纸板零件*'
- en: '**WARNING** *Only use a craft knife with adult supervision. Craft knives are
    very sharp, and it’s easy to accidentally cut yourself with them.*'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告** *仅在成人监督下使用工艺刀。工艺刀非常锋利，使用时很容易不小心割伤自己。*'
- en: Attach the micro:bit to the front card by poking holes through the pairs of
    small circles marked on the front of the board. Then, for each pair of holes,
    clip an alligator clip through the back. These clips will both allow you to make
    electrical connections and keep the micro:bit securely attached to the card.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 micro:bit 固定到前面的纸板上，通过板上标记的小圆圈对打孔。然后，对于每一对孔，背面用鳄鱼夹夹住。这些夹子不仅可以帮助你建立电气连接，还能将
    micro:bit 安全地固定在纸板上。
- en: 'Attach the alligator clips in the order suggested in [Figure 6-12](ch06.xhtml#ch6fig12):
    red to 3V, black to GND, and yellow to pin 0\. Make sure to attach two alligator
    clips each to the GND and 3V connections of the micro:bit.'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按照[图 6-12](ch06.xhtml#ch6fig12)中建议的顺序连接鳄鱼夹：红色连接到 3V，黑色连接到 GND，黄色连接到 0 引脚。确保每个
    GND 和 3V 连接各连接两个鳄鱼夹。
- en: '![Image](../images/06fig12.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![Image](../images/06fig12.jpg)'
- en: '*Figure 6-12: Connecting cables to the micro:bit*'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-12：连接电缆到 micro:bit*'
- en: To connect the micro:bit to the servomotor, you’ll need to attach three alligator
    clips with male jumper cables on one end. Clip a yellow alligator clip with a
    male jumper cables to pin 2\. Then, pull back the insulating sheath on the red
    alligator clip already attached to the 3V, expose some of the metal, and clip
    the red alligator clip with male jumper cable to the red clip. Do the same with
    the black GND cable, pulling back the insulating sheath of GND’s black alligator
    clip and attaching the black alligator to male jumper cable ([Figure 6-13](ch06.xhtml#ch6fig13)).![Image](../images/06fig13.jpg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将 micro:bit 连接到伺服电机，你需要使用三根带公头跳线的鳄鱼夹。一端将一根黄色鳄鱼夹夹到第 2 针上。然后，拉开已经连接到 3V 的红色鳄鱼夹的绝缘外皮，暴露出一些金属部分，将红色鳄鱼夹连接到红色夹子上。对黑色的
    GND 电缆执行相同的操作，拉开 GND 黑色鳄鱼夹的绝缘外皮，将黑色鳄鱼夹连接到公头跳线（参见 [图 6-13](ch06.xhtml#ch6fig13)）。![Image](../images/06fig13.jpg)
- en: '*Figure 6-13: Attaching the micro:bit to the front of the cardboard*'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-13：将 micro:bit 附加到纸板的前面*'
- en: Now slot the bottom piece of cardboard into the front piece and fix it in place
    using adhesive tape ([Figure 6-14](ch06.xhtml#ch6fig14)).![Image](../images/06fig14.jpg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将底部纸板插入前部纸板，并使用粘合带将其固定在位（参见 [图 6-14](ch06.xhtml#ch6fig14)）。![Image](../images/06fig14.jpg)
- en: '*Figure 6-14: Attaching the bottom card to the front card*'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-14：将底部卡片连接到前部卡片*'
- en: Now attach the speaker to the back card; use adhesive tape or putty to secure
    it. Clip the other end of the three alligator clips you’ve connected to the micro:bit
    (black, red, and yellow) to their corresponding ports on the speaker (GND, 3V,
    and 0, respectively). Affix the back card to the bottom card using adhesive tape.
    As you can see in [Figure 6-15](ch06.xhtml#ch6fig15), your chassis should now
    be in a U shape. The red, blue, and yellow alligator clips here are waiting to
    be attached to the servomotor.![Image](../images/06fig15.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将扬声器固定到背部卡片上；使用粘合带或胶泥将其固定。将你已连接到 micro:bit 的三根鳄鱼夹（黑色、红色和黄色）连接到扬声器的相应端口（分别为
    GND、3V 和 0）。使用粘合带将背部卡片固定到底部卡片上。如 [图 6-15](ch06.xhtml#ch6fig15) 所示，你的底盘现在应该是 U
    形的。这里的红色、蓝色和黄色鳄鱼夹等待与伺服电机连接。![Image](../images/06fig15.jpg)
- en: '*Figure 6-15: The back card and speaker*'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-15：背部卡片和扬声器*'
- en: With the servomotor arm fixed in place at 90 degrees (review the end of Experiment
    8 if needed), push the servomotor through the top card (the round face), threading
    the servomotor’s wire through first. Notice that the servomotor’s shaft is not
    in the center of the servomotor but rather toward one end; that end should be
    at the end of the servomotor cutout that is closest to the center of the top card
    (see [Figure 6-16](ch06.xhtml#ch6fig16)).![Image](../images/06fig16.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将伺服电机臂固定在 90 度位置（如有需要，请回顾实验 8 的末尾），然后将伺服电机穿过顶部卡片（圆形面），首先穿过伺服电机的电缆。注意，伺服电机的轴并不位于伺服电机的中心，而是偏向一端；这一端应位于靠近顶部卡片中心的伺服电机切口位置（参见
    [图 6-16](ch06.xhtml#ch6fig16)）。![Image](../images/06fig16.jpg)
- en: '*Figure 6-16: Connecting the servomotor*'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-16：连接伺服电机*'
- en: Attach the male jumper pins to the servomotor’s socket, as described in Experiment
    8.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将公头跳线插针连接到伺服电机的插座上，如实验 8 中所述。
- en: With everything connected together, attach the top piece of cardboard to the
    rest of the chassis. The two circles marking the position of the eyes on the top
    piece should face the micro:bit end of the chassis (refer to [Figure 6-5](ch06.xhtml#ch6fig5)).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当所有部件连接完毕后，将顶部纸板附加到其余的底盘部分。顶部纸板上标示眼睛位置的两个圆圈应面朝 micro:bit 所在的一端（参见 [图 6-5](ch06.xhtml#ch6fig5)）。
- en: Now attach the eyeballs and wire frame to the top card, as shown in [Figure
    6-17](ch06.xhtml#ch6fig17). Adjust the bend in the middle of the wire frame so
    that the eyeballs are centered over the two circles drawn on the top card. Then
    use adhesive tape to hold the wire in place. Give the eyeballs a little spin to
    make sure they can turn freely.![Image](../images/06fig17.jpg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将眼球和金属框架固定到顶部卡片上，如 [图 6-17](ch06.xhtml#ch6fig17) 所示。调整金属框架中间的弯曲部分，使眼球居中放置在顶部卡片上的两个圆圈上。然后使用粘合带将金属线固定。轻轻转动眼球，确保它们可以自由旋转。![Image](../images/06fig17.jpg)
- en: '*Figure 6-17: Connecting the eyeballs*'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-17：连接眼球*'
- en: To connect the servomotor to the eyeballs, you’ll need to straighten out the
    other paper clip, as shown in [Figure 6-18](ch06.xhtml#ch6fig18).![Image](../images/06fig18.jpg)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将伺服电机连接到眼球，你需要按照 [图 6-18](ch06.xhtml#ch6fig18) 中的示意图将另一根回形针弄直。![Image](../images/06fig18.jpg)
- en: '*Figure 6-18: Making the connector between the servomotor and the eyeballs*'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-18：制作伺服电机和眼球之间的连接器*'
- en: To make the loop in the center of the wire, wrap the wire tightly around a small
    screwdriver shaft (shown in [Figure 6-19](ch06.xhtml#ch6fig19)). The diameter
    of the screwdriver I used was about 3 mm, making the outside diameter of the little
    loop around 5 mm. Use a screwdriver with a sharp end that’s narrower than the
    shaft, or it will be hard to slide the wire off once it’s been bent. Make sure
    to straighten the legs of the wire as shown.![Image](../images/06fig19.jpg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了制作电线中间的环，将电线紧紧地绕在一个小螺丝刀的轴上（如[图 6-19](ch06.xhtml#ch6fig19)所示）。我使用的螺丝刀直径大约是
    3 毫米，这样环的外径大约是 5 毫米。使用一个比轴细的尖端螺丝刀，否则弯曲后就很难把电线从螺丝刀上滑下来。确保如图所示将电线的两腿拉直。![Image](../images/06fig19.jpg)
- en: '*Figure 6-19: Using a screwdriver to bend a loop in the servomotor-to-eyeball
    connector*'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-19：使用螺丝刀弯曲伺服电机到眼球连接器中的环*'
- en: '**NOTE** Screwdrivers are sharp and it takes strong hands to bend the thick
    wire around the screwdriver, so you might need adult help for this bit.'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**注意** 螺丝刀很锋利，且弯曲厚电线需要很大的力量，所以你可能需要大人的帮助来完成这个部分。'
- en: Adjust the connector by bending the paper clip until the arms are the same distance
    apart as the holes in the backs of the eyeballs. Then, hook the wire into the
    backs of the eyeballs. Use one of the screws provided with the servomotor to fasten
    the loop to the tip of the servomotor’s arm, as shown in [Figure 6-20](ch06.xhtml#ch6fig20).
    Depending on how snugly the servomotor fits its cutout in the top card, you may
    need to tape down the motor to prevent it from moving.![Image](../images/06fig20.jpg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过弯曲回形针来调整连接器，直到两臂与眼球后面的孔的距离相同。然后，将电线挂到眼球的后面。使用伺服电机提供的一个螺丝将环固定在伺服电机臂的尖端，如[图
    6-20](ch06.xhtml#ch6fig20)所示。根据伺服电机是否合适地安装在上卡片的切口中，你可能需要用胶带将电机固定，以防止它移动。![Image](../images/06fig20.jpg)
- en: '*Figure 6-20: Fitting the servomotor–eyeball connector to the card*'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-20：将伺服电机-眼球连接器安装到卡片上*'
- en: Now connect the USB cable from your micro:bit and try the project out!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在连接你的 micro:bit 的 USB 数据线并尝试这个项目！
- en: '**Code**'
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**代码**'
- en: First, we’ll use the code from Experiment 8 to test that our mechanisms are
    all working. Once you’re sure everything is working well, switch to the code for
    this project.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用实验 8 中的代码来测试我们的机制是否都在正常工作。一旦确认一切都运作良好，再切换到这个项目的代码。
- en: '**Using the Code from Experiment 8 as a Test**'
  id: totrans-151
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用实验 8 中的代码进行测试**'
- en: 'Go to *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    and click the link for **Experiment 8: Servomotors**. Once the program has opened,
    click **Download** and then copy the hex file onto your micro:bit. If you prefer
    to use Python while testing, download the Python file, *Experiment_08.py*, from
    the same website.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    并点击 **实验 8：伺服电机** 的链接。一旦程序打开，点击 **下载**，然后将 hex 文件复制到你的 micro:bit 上。如果你更喜欢使用 Python
    进行测试，可以从同一网站下载 Python 文件，*Experiment_08.py*。
- en: Once the code is loaded, try pressing the A and B buttons to move the servomotor’s
    arm left and right. You will probably need to adjust the connector wire slightly
    so that the eyes are lined up and move freely left to right. Only take the servomotor
    arm a few steps to either side of the 90-degree position or the linkage might
    get jammed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码加载完成，尝试按下 A 和 B 按钮，让伺服电机的臂部左右移动。你可能需要稍微调整连接线的位置，以确保眼球对准并能自由地左右移动。只需将伺服电机的臂部带动到
    90 度位置的几步之内，否则连杆可能会卡住。
- en: '**Using the Real Project Code**'
  id: totrans-154
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用真实项目代码**'
- en: Once you’re satisfied that the eyeballs are moving the way they should, you
    can switch to the real project code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定眼球的运动方式正确，你就可以切换到真实项目的代码。
- en: Because this project uses a speech library, it is only available in MicroPython
    form. Go to *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    to download the Python file is *ch_06_Animatronic_Head.py*.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这个项目使用了语音库，所以只能以 MicroPython 形式提供。访问 *[https://github.com/simonmonk/mbms/](https://github.com/simonmonk/mbms/)*
    下载 Python 文件 *ch_06_Animatronic_Head.py*。
- en: Flash it onto your micro:bit and then gently poke the robot. The accelerometer
    should pick up the movement and tell your animatronic head to swivel its eyes,
    say something witty, and then look straight ahead again. For a video of this project,
    go to my YouTube channel (*[https://www.youtube.com/watch?v=FAJTS2Z8ZDA](https://www.youtube.com/watch?v=FAJTS2Z8ZDA)*).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 将它上传到你的 micro:bit 上，然后轻轻戳一下机器人。加速度计应该能检测到运动并指示你的机器人头转动眼睛，说些俏皮话，然后再直视前方。关于这个项目的视频，可以访问我的
    YouTube 频道 (*[https://www.youtube.com/watch?v=FAJTS2Z8ZDA](https://www.youtube.com/watch?v=FAJTS2Z8ZDA)*)。
- en: 'The software for this project does two things: it detects when the head is
    poked, and it triggers talking events after random periods of time have elapsed.
    The code is rather long, so instead of showing all of it, I’ll just highlight
    the key parts. If you want to follow along, load the code into Mu.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的软件做了两件事：它检测头部是否被戳到，并在随机时间经过后触发说话事件。代码比较长，因此我不会展示全部，只会突出关键部分。如果你想跟着做，可以将代码加载到
    Mu 中。
- en: 'To make it seem as though your animatronic head has a mind of its own, we use
    the Python random library to give us random numbers, which will trigger random
    events:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你的机器人头看起来像有思维一样，我们使用 Python 的随机库来生成随机数，触发随机事件：
- en: import random
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: import random
- en: Rather than give the head a free range of eye movements, we keep a list of possible
    eye angles in the array `eye_angles`. When we want to set the eyes in a random
    direction, we simply use the `random` function from the random library to take
    an angle from this array.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 与其让头部的眼睛自由移动，我们将可能的眼睛角度保存在数组 `eye_angles` 中。当我们想让眼睛朝随机方向看时，只需使用随机库的 `random`
    函数从这个数组中选择一个角度。
- en: 'If you’ve played around with the head, you’ve probably noticed that it doesn’t
    know that many sentences. The phrases it speaks are contained in the array `sentences`,
    shown here:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你玩过这个机器人，你可能会注意到它并不知道太多句子。它说的短语都包含在数组 `sentences` 中，如下所示：
- en: sentences = [
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: sentences = [
- en: '"Hello my name is Mike",'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '"你好，我叫 Mike",'
- en: '"What is your name",'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '"你叫什么名字",'
- en: '"I am looking at you",'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '"我在看着你",'
- en: '"Exterminate exterminate exterminate",'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '"消灭 消灭 消灭",'
- en: '"Number Five is alive",'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '"第五号正在活跃"'
- en: '"I cant do that Dave",'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '"我做不到，Dave",'
- en: '"daisee daisee give me your answer do"'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '"daisee daisee give me your answer do"'
- en: ']'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: As with the eye angles, when we want a sentence, we’ll take it from this array.
    As you can see in the code, with robotic speakers, sometimes it’s better to spell
    a word phonetically than spell it correctly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 和眼睛角度一样，当我们想要一个句子时，我们就从这个数组中选择。正如你在代码中看到的那样，对于机器人扬声器，有时拼写一个单词的音标比正确拼写更好。
- en: 'The three lip images for the speech animation are created as custom `Image`
    objects. Here is the one for the resting lip animation, a horizontal line:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 三个用于语音动画的嘴唇图像作为自定义 `Image` 对象创建。这里是用于静止嘴唇动画的一个水平线：
- en: lips0 = Image("00000:"
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: lips0 = Image("00000:"
- en: '"00000:"'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '"00000:"'
- en: '"99999:"'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '"99999:"'
- en: '"00000:"'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '"00000:"'
- en: '"00000")'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '"00000")'
- en: Each of the five rows in `Image` is a string representing one row of the display;
    each digit in the string represents the brightness from 0 to 9 of a particular
    LED.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image` 中的每一行是一个字符串，表示显示屏的一行；字符串中的每个数字代表一个特定 LED 的亮度，从 0 到 9。'
- en: 'The images for the lips are held as an array in the variable `lips`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 嘴唇的图像保存在变量 `lips` 的数组中：
- en: lips = [lips0, lips1, lips2]
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: lips = [lips0, lips1, lips2]
- en: 'Both the speaking and the lip animation are controlled by the function `speak`,
    which takes in the `sentence` to speak as a parameter:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`speak` 函数控制着说话和嘴唇动画，它接受一个参数 `sentence`，即要说的句子：'
- en: def speak
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: def speak
- en: '(sentence):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: （句子）：
- en: words = sentence.split()
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: words = sentence.split()
- en: 'for i in range(0, len(words)):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(0, len(words)):'
- en: display.show(random.choice(lips))
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: display.show(random.choice(lips))
- en: speech.say(words[i])
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: speech.say(words[i])
- en: display.show(lips0)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: display.show(lips0)
- en: To make sure that the lips animate as the words are spoken, we use the `split`
    method to break the sentence into the list of individual words saved as `words`.
    Then, for every word in the list, we display one of the lip images (chosen at
    random using the `choice` method from the random library) and have `speech` speak
    the word. When all the words have been spoken, the lip display shows the default
    `lips0` image.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保嘴唇动画与说出的单词同步，我们使用 `split` 方法将句子分解成单个单词列表 `words`。然后，对于列表中的每个单词，我们随机选择一个嘴唇图像（使用随机库的
    `choice` 方法）并让 `speech` 说出该单词。当所有单词都被说完时，嘴唇显示会恢复为默认的 `lips0` 图像。
- en: 'Next, we define an `act()` function:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个 `act()` 函数：
- en: 'def act():'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 'def act():'
- en: set_servo_angle(pin2, random.choice(eye_angles))
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: set_servo_angle(pin2, random.choice(eye_angles))
- en: sleep(300)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: sleep(300)
- en: speak(random.choice(sentences))
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: speak(random.choice(sentences))
- en: set_servo_angle(pin2, 90)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: set_servo_angle(pin2, 90)
- en: sleep(2000)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: sleep(2000)
- en: 'The `act` function does three things: it moves the eyes at random by setting
    the servomotor to a random angle, it selects a sentence to speak by calling `speak`,
    and it resets the eyes by setting the servomotor angle back to 90 degrees. To
    allow for some time between each step, the code makes a call to `sleep`.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`act`函数完成三件事：它通过将伺服电机设置为一个随机角度来随机移动眼睛，它通过调用`speak`选择一句话来播放，并通过将伺服电机角度重置为90度来重置眼睛。为了在每个步骤之间留出一些时间，代码会调用`sleep`函数。'
- en: 'Here is the main body of our code that uses all of our variables and functions:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们代码的主体部分，包含了所有的变量和函数：
- en: 'while True:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: new_z = abs(accelerometer.get_z())
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: new_z = abs(accelerometer.get_z())
- en: 'if abs(new_z - base_z) > 20:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 'if abs(new_z - base_z) > 20:'
- en: base_z = new_z
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: base_z = new_z
- en: act()
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: act()
- en: 'if random.randint(0, 1000) == 0:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'if random.randint(0, 1000) == 0:'
- en: act()
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: act()
- en: sleep(50)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: sleep(50)
- en: In the main body of the code, we have a `while True` loop, which means the commands
    execute until the code is signaled to stop. This is useful for when you need code
    to respond continuously to input. Here, we want to be ready for the sudden change
    in acceleration caused by a tap on the robot’s head. First, the loop registers
    the acceleration from the accelerometer. Then, it uses the `abs` function to get
    the magnitude of the acceleration—in this case, we don’t care about the direction,
    just how large the acceleration is.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的主体部分，我们有一个`while True`循环，这意味着命令会一直执行，直到收到停止信号。这对于需要代码持续响应输入的情况非常有用。在这里，我们希望准备好应对机器人头部被敲击时加速度的突然变化。首先，循环会注册来自加速度计的加速度。然后，它使用`abs`函数获取加速度的大小——在这个例子中，我们不关心方向，只关心加速度有多大。
- en: In the first `if` statement, we check whether the acceleration value has changed
    by more than 20 mg (milligravities). If so, the base acceleration is updated to
    the new acceleration (ensuring that the next time through the loop, the acceleration
    has to change by *another* 20 mg), and `act` is called.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个`if`语句中，我们检查加速度值是否发生了超过20毫伽（毫重力）的变化。如果是这样，基础加速度会更新为新的加速度（确保下一次循环时，加速度必须变化超过*另外*20毫伽），并调用`act`函数。
- en: In the second `if` statement, we give the animatronic head a bit of randomness.
    The code picks a random number between 0 and 1,000\. If it is equal to 0 (a 1
    in 1,001 chance), the `act` function is called. Even though this probability is
    very low, since the value gets checked hundreds of times a second, the head springs
    into action several times a minute.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个`if`语句中，我们为机器人的头部添加了一些随机性。代码会在0到1,000之间随机选择一个数字。如果数字等于0（1/1,001的机会），则调用`act`函数。尽管这个概率非常低，但由于该值每秒检查数百次，头部会每分钟跳跃几次。
- en: '**Things to Try**'
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**尝试的事项**'
- en: Try using a USB battery or AAA battery box to power the head instead of keeping
    it tethered to your computer with a USB cable.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用USB电池或AAA电池盒来为头部供电，而不是通过USB电缆将其连接到计算机。
- en: If you want to change up your head’s speech, go into the code and add more sentences
    to the `sentences` array.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想改变头部的语音，可以进入代码并向`sentences`数组中添加更多句子。
- en: The speech library produces rather quiet speech that is also quite indistinct.
    You can improve this a little by connecting a bigger amplified speaker.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 语音库产生的语音相当安静且不清晰。你可以通过连接一个更大功率的扬声器来稍微改善这一点。
- en: 'If you want to add a bit more to the project, take a look at the code examples
    here: *[https://microbit-micropython.readthedocs.io/en/latest/tutorials/speech.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/speech.html)*.
    In this code, the speech library is used to produce singing.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想给项目增加一些内容，可以看看这里的代码示例：*[https://microbit-micropython.readthedocs.io/en/latest/tutorials/speech.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/speech.html)*。在这段代码中，语音库被用来产生唱歌的效果。
- en: '**PROJECT: ROBOT ROVER**'
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**项目：机器人探测车**'
- en: '![Image](../images/common3.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common3.jpg)'
- en: '*Difficulty: Hard*'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '*难度：困难*'
- en: In this project, we’ll create a robotic rover. Using a clever app called Bitty
    Controller, you’ll be able to control the little buggy with your Android phone
    ([Figure 6-21](ch06.xhtml#ch6fig21)). The Mad Scientist likes to use the rover
    to deliver notes to the lab assistants.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一个机器人探测车。通过使用一个名为Bitty Controller的巧妙应用程序，你可以通过安卓手机控制这个小型越野车（[图6-21](ch06.xhtml#ch6fig21)）。疯狂科学家喜欢用这个探测车给实验室助手送消息。
- en: '**WARNING** *We’re going to use some low-cost chassis kits for this project,
    but the wires that come with these kits are usually loose—meaning you’ll need
    to solder the wires onto the motors. This is the only project in the book that
    requires soldering. The soldering isn’t difficult, but it is dangerous and you
    can easily get burned. So please find an adult to do this part.*'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告** *我们将在这个项目中使用一些低成本底盘套件，但这些套件附带的电线通常比较松散——这意味着你需要将电线焊接到电机上。这是本书中唯一需要焊接的项目。焊接不难，但它很危险，你很容易被烫伤。所以请找一位成年人来完成这一部分。*'
- en: '![Image](../images/06fig21.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig21.jpg)'
- en: '*Figure 6-21: A micro:bit-controlled roving robot*'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-21：一个由 micro:bit 控制的巡航机器人*'
- en: '**What You’ll Need**'
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**所需物品**'
- en: 'For this project, you’ll need the following items:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你需要以下物品：
- en: '**Micro:bit**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**Micro:bit**'
- en: '**Android phone**'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**安卓手机**'
- en: '**Kitronik Motor Driver Board for micro:bit (V2)** To control the motors'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kitronik Motor Driver Board for micro:bit (V2)** 用于控制电机'
- en: '**Low-cost robot chassis kit** Includes two gear motors and a 4 × AA battery
    box'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**低成本机器人底盘套件** 包括两个齿轮电机和一个 4 × AA 电池盒'
- en: '**4 × AA batteries**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**4 × AA 电池**'
- en: '**Bitty Controller App for Android** From Google Play Store (about $5)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bitty Controller 安卓应用** 从 Google Play 商店下载（约 $5）'
- en: '**Assorted screwdrivers** Suitable for both the nuts and bolts on the chassis
    and the screw terminals on the motor controller board'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**各种螺丝刀** 适用于底盘上的螺母和螺栓，以及电机控制板上的接线端子'
- en: '**Soldering equipment** To attach the wires to the gearmotors'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**焊接设备** 用于将电线连接到齿轮电机'
- en: '**Blu-Tack adhesive putty** To attach the motor control board and micro:bit
    to the chassis'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blu-Tack 粘合膏** 用于将电机控制板和 micro:bit 固定到底盘上'
- en: If you search eBay or Amazon for robot chassis, you’ll find low-cost robot chassis
    kits like the one shown in [Figure 6-22](ch06.xhtml#ch6fig22). Look for one that
    includes a 4 × AA battery box and two gearmotors (motors with a built-in gearbox).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 eBay 或 Amazon 上搜索机器人底盘，你会找到像[图 6-22](ch06.xhtml#ch6fig22)所示的低成本机器人底盘套件。寻找那些包含
    4 × AA 电池盒和两个齿轮电机（带内置齿轮箱的电机）的套件。
- en: '![Image](../images/06fig22.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig22.jpg)'
- en: '*Figure 6-22: The low-cost robot chassis used by this Mad Scientist*'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6-22：该疯狂科学家使用的低成本机器人底盘*'
- en: '**Construction**'
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**构造**'
- en: Maybe the trickiest part of this project is the chassis kit assembly. Getting
    the screws and bolts in the right place will require precision and finesse.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目中最棘手的部分可能就是底盘套件的组装。将螺丝和螺栓放到正确的位置需要精确和技巧。
- en: Not all chassis will be the same, so instead of taking you through the assembly
    step-by-step, I’ll just give you some high-level advice. Your chassis should come
    with instructions, although they may be somewhat cryptic. In general, you’ll need
    to attach the gear motors, the castor wheel (the wheel that can turn freely in
    any direction), the motor controller, and the micro:bit.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的底盘都相同，所以我不会逐步带你进行组装，而是给你一些高层次的建议。你的底盘应该会附带说明书，尽管它们可能有些难以理解。一般来说，你需要连接齿轮电机、万向轮（能够自由转动的轮子）、电机控制器和
    micro:bit。
- en: Solder the supplied wires onto the motor terminals, as shown in [Figure 6-23a–c](ch06.xhtml#ch6fig23).
    If you work quickly, a good soldering joint can be made by melting a generous
    amount of solder onto the motor terminal and then pressing the wire onto the dome
    of solder with the iron ([Figure 6-23a](ch06.xhtml#ch6fig23)).![Image](../images/06fig23.jpg)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提供的电线焊接到电机接线端子上，如[图 6-23a–c](ch06.xhtml#ch6fig23)所示。如果你工作迅速，可以通过将大量焊锡熔化到电机接线端子上，然后用烙铁将电线按压到焊锡的顶部来制作一个良好的焊接点（见[图
    6-23a](ch06.xhtml#ch6fig23)）。![Image](../images/06fig23.jpg)
- en: '*Figure 6-23: Soldering wires onto the motor*'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-23：将电线焊接到电机上*'
- en: It doesn’t matter much which terminal you attach the red wire to. Just be sure
    to be consistent between the two motors. That is, if you decide to attach the
    red wire to the right-hand terminal on one motor, solder the red wire to the right-hand
    terminal of the other motor as well.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 红色电线连接到哪个端子并不太重要。只要确保两台电机之间保持一致。如果你决定将红线连接到一台电机的右侧端子上，那么另一台电机的红线也要连接到右侧端子。
- en: Remove the layer of paper covering the chassis. [Figure 6-24a–e](ch06.xhtml#ch6fig24)
    shows the assembly process at a high level. You may find that your chassis is
    different.![Image](../images/06fig24.jpg)
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去除覆盖底盘的纸层。[图 6-24a–e](ch06.xhtml#ch6fig24) 展示了组装过程的大致步骤。你可能会发现你的底盘与展示的不同。![Image](../images/06fig24.jpg)
- en: '*Figure 6-24: Building the chassis*'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-24：组装底盘*'
- en: 'Here are a few things to remember when building the chassis:'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在组装底盘时，有几个事项需要记住：
- en: '![Image](../images/play.jpg)  Don’t overtighten the nuts and bolts, as doing
    so can cause the plastic chassis to crack.'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 不要过度拧紧螺母和螺栓，因为这样可能会导致塑料底盘开裂。'
- en: '![Image](../images/play.jpg)  When attaching the gearmotors, put the nuts toward
    the inside of the chassis so that the motor-fixing bolts that stick out beyond
    the nut won’t get in the way of the wheels.'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 安装齿轮电机时，将螺母朝向底盘的内部，这样突出在螺母外的电机固定螺栓就不会妨碍车轮。'
- en: '![Image](../images/play.jpg)  If the bolt doesn’t turn smoothly into the nut,
    try turning the bolt counterclockwise a little to find the start of the nut’s
    thread. You may want to use a pair of small pliers to grip the nut while you turn
    the screw with a screwdriver.'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 如果螺栓不能顺利旋入螺母中，可以试着将螺栓逆时针旋转一点，找到螺母的螺纹起始位置。你可以用一把小钳子抓住螺母，然后用螺丝刀转动螺丝。'
- en: Once you have the chassis securely assembled, attach the micro:bit to the Kitronik
    Motor Driver board with the micro:bit’s screen facing outward, as shown in [Figure
    6-25](ch06.xhtml#ch6fig25). Line up the micro:bit’s edge connector carefully with
    the socket on the Motor Controller and press it firmly into place. When your controller
    looks like [Figure 6-25](ch06.xhtml#ch6fig25), stick it to the chassis using adhesive
    putty, also shown in [Figure 6-25](ch06.xhtml#ch6fig25).![Image](../images/06fig25.jpg)
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦底盘安全组装好，将 micro:bit 安装到 Kitronik 电机驱动板上，确保 micro:bit 的屏幕朝外，如 [图 6-25](ch06.xhtml#ch6fig25)
    所示。小心对准 micro:bit 的边缘连接器与电机控制器上的插座，并将其牢固按入到位。当你的控制器看起来像 [图 6-25](ch06.xhtml#ch6fig25)
    时，使用粘性粘土将其固定到底盘上，粘土在 [图 6-25](ch06.xhtml#ch6fig25) 中也有展示。![Image](../images/06fig25.jpg)
- en: '*Figure 6-25: Attaching the micro:bit*'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-25：安装 micro:bit*'
- en: It’s time to wire up the motors and battery box. First, look at [Figure 6-26](ch06.xhtml#ch6fig26)
    to see what you are aiming for. Unscrew the screw on the relevant terminal, place
    the wire firmly inside the terminal, and then screw the screw back in fairly tightly.![Image](../images/06fig26.jpg)
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是接线电机和电池盒的时候了。首先，查看 [图 6-26](ch06.xhtml#ch6fig26) 了解你要实现的连接。旋松相关端子的螺丝，将电线牢固地放入端子中，然后将螺丝重新旋紧。![Image](../images/06fig26.jpg)
- en: '*Figure 6-26: Wiring up*'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*图 6-26：接线*'
- en: 'Make the following connections:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行以下连接：
- en: '![Image](../images/play.jpg)  Red (positive) wire from the battery box to the
    screw terminal marked `RED +` on the Motor Controller'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 从电池盒引出的红色（正极）电线连接到电机控制器上标记为 `RED +` 的螺丝端子'
- en: '![Image](../images/play.jpg)  Black (negative) wire from the battery box to
    the screw terminal marked `BLACK -` on the Motor Controller'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 从电池盒引出的黑色（负极）电线连接到电机控制器上标记为 `BLACK -` 的螺丝端子'
- en: '![Image](../images/play.jpg)  Red wire from the left (as viewed from the back
    of the rover) motor to the screw terminal on the Motor Controller labeled `MOTOR1
    P12`'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 从左侧电机（从后方看）引出的红线连接到电机控制器上的螺丝端子，标记为 `MOTOR1 P12`'
- en: '![Image](../images/play.jpg)  Black wire from the left motor to the screw terminal
    on the Motor Controller labeled `MOTOR1 P8`'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 从左侧电机引出的黑线连接到电机控制器上的螺丝端子，标记为 `MOTOR1 P8`'
- en: '![Image](../images/play.jpg)  Red wire from the right motor to the screw terminal
    on the Motor Controller labeled `MOTOR2 P0`'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 从右侧电机引出的红线连接到电机控制器上的螺丝端子，标记为 `MOTOR2 P0`'
- en: '![Image](../images/play.jpg)  Black wire from the right motor to the screw
    terminal on the Motor Controller labeled `MOTOR1 P16`'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Image](../images/play.jpg) 从右侧电机引出的黑线连接到电机控制器上的螺丝端子，标记为 `MOTOR1 P16`'
- en: In this project, you’ll use an Android app to control the rover via Bluetooth.
    You can find the code that runs on the micro:bit at *[http://www.bittysoftware.com/downloads.html#controller](http://www.bittysoftware.com/downloads.html#controller)*.
    Click the link **micro:bit hex file for** **Kitronik Buggy - no pairing required**
    and download the hex file. This file is also available with the book downloads
    in the *Other Downloads* folder. Next, connect the micro:bit to your computer
    with a USB and copy the downloaded hex file onto your micro:bit. You won’t need
    batteries just yet.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本项目中，你将使用 Android 应用通过蓝牙控制车载机器人。你可以在 *[http://www.bittysoftware.com/downloads.html#controller](http://www.bittysoftware.com/downloads.html#controller)*
    上找到运行在 micro:bit 上的代码。点击链接 **micro:bit hex 文件用于** **Kitronik Buggy - 无需配对** 并下载
    hex 文件。该文件也可以在 *其他下载* 文件夹中与书籍下载一起获取。接下来，通过 USB 将 micro:bit 连接到电脑，并将下载的 hex 文件复制到你的
    micro:bit 中。此时你还不需要电池。
- en: To install the app on your Android phone, open Google Play and search for *Bitty
    Controller*. You’ll have to pay a few dollars for the app. Download and install
    the app.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在你的安卓手机上安装应用程序，打开Google Play并搜索*Bitty Controller*。你需要为该应用支付几美元。下载并安装该应用。
- en: We’re one step away from trying out the project! Put four AA batteries into
    the battery box. These will power both the motors and your micro:bit, meaning
    you can disconnect the USB cable—it’s time to set your rover free.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们离试验这个项目只差一步了！把四节AA电池放入电池盒中。这些电池将为电动机和你的micro:bit提供电力，这意味着你可以拔掉USB电缆——是时候让你的探测器自由了。
- en: Open the Bitty Controller app ([Figure 6-27](ch06.xhtml#ch6fig27)) and click
    **Scan**. This should find your micro:bit. In [Figure 6-27](ch06.xhtml#ch6fig27),
    it’s called *BBC micro:bit [gaviv]*. Click this and the RC-style controller of
    [Figure 6-28](ch06.xhtml#ch6fig28) should appear. The micro:bit’s display should
    also show a `C`, indicating that it’s connected to your phone.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Bitty Controller应用程序（[图6-27](ch06.xhtml#ch6fig27)），点击**扫描**。这应该能够找到你的micro:bit。在[图6-27](ch06.xhtml#ch6fig27)中，它被称为*BBC
    micro:bit [gaviv]*。点击它后，RC风格的控制器（见[图6-28](ch06.xhtml#ch6fig28)）应该会出现。micro:bit的显示屏上也应该会显示一个`C`，表示它已连接到你的手机。
- en: '![Image](../images/06fig27.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig27.jpg)'
- en: '*Figure 6-27: Starting Bitty Controller*'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-27：启动Bitty Controller*'
- en: '![Image](../images/06fig28.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig28.jpg)'
- en: '*Figure 6-28: The Dual D-Pad Controller*'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-28：双D-pad控制器*'
- en: Use the top and bottom square buttons to control the forward and backward motion
    of the rover. To turn the rover left and right, use the left and right round buttons.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 使用顶部和底部的方形按钮来控制探测器的前进和后退。要让探测器向左和向右转动，使用左右圆形按钮。
- en: 'For a first test, do something simple: flip the rover onto its back and use
    the app to control the wheels. Do they spin? Once the rover passes that test,
    put it on the floor and try driving it around. If you don’t like the controller
    layout, head to Options on the Bitty Controller app to find other layouts.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次测试时，做点简单的事：将探测器翻到背面，用应用程序控制车轮。它们会转动吗？一旦探测器通过了这一测试，就把它放到地板上，尝试驾驶它。如果你不喜欢控制器布局，可以前往Bitty
    Controller应用中的“选项”来寻找其他布局。
- en: 'The rover may move forward when you tell it to go backward and vice versa.
    If this happens, your wires are swapped: switch the red and black wires for motor
    1 and motor 2\. If your rover drives around in a circle, swap one of the pairs
    of wires on one of the motors.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的探测器在你让它后退时却向前进，反之亦然，说明你的电线接错了：交换电机1和电机2的红线和黑线。如果你的探测器绕圈行驶，交换其中一个电机的电线对。
- en: When you want to turn off your rover (a good way to make your batteries last
    longer), just lift one end of one of the batteries out of the battery holder.
    Ta-da! Now you have a crude switch.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想关闭你的探测器时（这是一种延长电池使用寿命的好方法），只需将电池架中的一端电池抬起。瞧！你现在就有了一个粗糙的开关。
- en: '**How It Works: Motors and the Flow of Electricity**'
  id: totrans-272
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**工作原理：电动机与电流流动**'
- en: The direction of the gear motors is controlled by the direction of the current
    flowing through them—if you reverse the direction, you reverse the motors. As
    you can see in [Figure 6-29](ch06.xhtml#ch6fig29), a motor turns clockwise if
    connection A is positive and connection B is negative. If A and B are reversed,
    so that A is negative and B is positive, the motor moves the other way.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 齿轮电动机的方向由流经它们的电流方向控制——如果你反转电流方向，电动机的转向也会反转。如[图6-29](ch06.xhtml#ch6fig29)所示，当连接A为正，连接B为负时，电动机顺时针转动。如果A和B反向连接，使得A为负，B为正，则电动机反向旋转。
- en: '![Image](../images/06fig29.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/06fig29.jpg)'
- en: '*Figure 6-29: Controlling the direction of a motor*'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6-29：控制电动机的方向*'
- en: The Kitronik Motor Controller contains a chip that controls the direction of
    current in two motors. It also supplies the relatively high current that the motors
    need.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Kitronik马达控制器包含一个芯片，控制两个电动机的电流方向。它还提供电动机所需的相对较高电流。
- en: '**SUMMARY**'
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: 'We covered a lot of ground in this chapter. First, we learned about servomotors
    and how to set one up using the micro:bit. Then, we built two complex projects:
    the animatronic head and the remote-controlled rover. Along the way, we learned
    about PWM and current flow and picked up a few basic programming tricks to boot.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们涵盖了很多内容。首先，我们了解了伺服电动机以及如何使用micro:bit设置一个伺服电动机。然后，我们构建了两个复杂的项目：动画头和遥控探测器。在这个过程中，我们学习了PWM和电流流动，还掌握了一些基本的编程技巧。
- en: Now that you know how to make things move, you can start thinking about other
    projects you’d like to make. What things would you like to have move all on their
    own? In the next chapter, we’ll look at how to deal with time.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何让物体移动了，你可以开始考虑其他你想要制作的项目了。你希望哪些物体能够自动移动呢？在下一章，我们将探讨如何处理时间。
