- en: '**2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2'
- en: APP INVENTOR AND EVENT-DRIVEN PROGRAMMING**
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**APP INVENTOR与事件驱动编程**'
- en: '![Image](../images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/common.jpg)'
- en: App Inventor apps use a model called *event-driven programming*, where we program
    behaviors to respond to certain events. An *event* can be something the user does
    or something that happens within or to the device.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: App Inventor应用使用一种称为*事件驱动编程*的模型，我们编写程序让行为响应特定事件。*事件*可以是用户执行的操作，也可以是设备内或设备发生的事情。
- en: As App Inventor programmers, we use *event handlers* called `when`…`do` blocks
    to tell the app how to respond to an event. For each `when`…`do` block, we can
    include one or more commands for the app to follow in sequence once the event
    occurs. Those commands include blocks to get and set values as well as `call`
    blocks to start built-in *methods* or our own written *procedures*, which are
    a series of defined tasks for the app to execute.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 作为App Inventor程序员，我们使用名为`when`…`do`的*事件处理器*来告诉应用如何响应事件。对于每个`when`…`do`块，我们可以包括一个或多个命令，当事件发生时，应用按顺序执行这些命令。这些命令包括获取和设置值的代码块，以及`call`代码块来启动内置*方法*或我们自己编写的*过程*，即一系列定义好的任务供应用执行。
- en: In fact, you already used event handlers to create the “Hi, World!” app in [Chapter
    1](ch01.xhtml#ch01). Let’s review all the blocks you used for “Hi, World!”.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，你已经使用事件处理器创建了[第一章](ch01.xhtml#ch01)中的“你好，世界！”应用。让我们回顾一下你为“你好，世界！”使用的所有代码块。
- en: '![Image](../images/f0024-01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0024-01.jpg)'
- en: We can see the app’s three events ➊, which are the two button *clicks* on `SayMessageBtn`
    and `SendTextBtn` and the *touch down* event on `PhoneNumberPicker1`. You used
    three `when`…`do` event handlers ➋ to program the actions the app should take
    in response to those events, such as calling the `SpeechRecognizer` method to
    get text from speech, calling the `PhoneNumberPicker.Open` method to open the
    phone’s contact list, and setting the `Texting` component’s required properties
    before calling the method that sends a text.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到应用的三个事件 ➊，分别是`SayMessageBtn`和`SendTextBtn`的两个按钮*点击*事件，以及`PhoneNumberPicker1`的*触摸按下*事件。你使用了三个`when`…`do`事件处理器
    ➋，编程处理这些事件时应用应采取的动作，如调用`SpeechRecognizer`方法从语音中获取文本，调用`PhoneNumberPicker.Open`方法打开电话的联系人列表，并在调用发送短信方法之前设置`Texting`组件所需的属性。
- en: Although the user triggered all the events in “Hi, World!”, that’s not always
    the case. Some events are caused when something happens to the device. For instance,
    when a phone receives a call, you can use an event handler to deal with that event.
    You also can use event handlers to respond to automatic events or events that
    happen to screens or components in your apps. For instance, you can add blocks
    to program actions that should occur when the screen of an app first opens.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管用户在“你好，世界！”中触发了所有事件，但并非总是如此。有些事件是由于设备发生某些情况而引起的。例如，当手机接到电话时，你可以使用事件处理器来处理该事件。你还可以使用事件处理器来响应自动事件或发生在应用屏幕或组件上的事件。例如，你可以添加代码块来编程在应用屏幕首次打开时应发生的动作。
- en: We’ll play with several event handlers as we build the next app.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建下一个应用时，我们将玩弄几个事件处理器。
- en: '**BUILDING THE “PRACTICE MAKES PERFECT” APP**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建“实践出真知”应用**'
- en: In this chapter, you’ll create the “Practice Makes Perfect” app, which uses
    the `Clock`, `Camcorder`, and `VideoPlayer` components to let users repeatedly
    record videos of themselves practicing speeches or songs and then watch the videos
    to review their performance. For convenience, we’ll program “Practice Makes Perfect”
    to automatically open the device’s video camera, getting it ready to record right
    away. That’s different from many camera apps, which require the user to open the
    app, switch to video mode, and then record.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将创建“实践出真知”应用，它使用`Clock`、`Camcorder`和`VideoPlayer`组件，让用户反复录制自己练习演讲或歌曲的视频，然后观看这些视频来回顾自己的表现。为了方便起见，我们将编程让“实践出真知”自动打开设备的视频摄像头，使其准备好立即开始录制。这与许多相机应用不同，因为后者要求用户打开应用、切换到视频模式，然后再开始录制。
- en: We’ll program six event handlers for “Practice Makes Perfect,” one to direct
    the action after a timer goes off five seconds after the app opens, another that
    tells the app what to do after the video camera records, and four that respond
    to the user’s button clicks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为“实践出真知”编写六个事件处理器，一个是在应用打开五秒钟后触发定时器的操作，另一个是在摄像头录制后告诉应用应该做什么，还有四个响应用户点击按钮的事件处理器。
- en: Let’s get started! Log into App Inventor following the instructions outlined
    in “Getting Started with App Inventor” on [page xviii](intro.xhtml#page_xviii).
    App Inventor should open to the last app you worked on. To start a new app, click
    **Projects** ▸ **Start new project** to open the dialog where you enter the project
    name, enter PracticeMakesPerfect without any spaces, and click **OK**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始吧！按照《App Inventor入门》中的说明，在[第xviii页](intro.xhtml#page_xviii)登录App Inventor。App
    Inventor应该会打开你上次工作的应用程序。要开始一个新项目，点击**项目** ▸ **新建项目**，打开对话框后输入项目名称，输入PracticeMakesPerfect（不要有空格），然后点击**确定**。
- en: '**DECOMPOSING “PRACTICE MAKES PERFECT”**'
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**分解“Practice Makes Perfect”**'
- en: “Practice Makes Perfect” will automatically open the device’s video camera to
    record a video and then play the video back on the app’s own video player. After
    that, the app will let users record and view as many additional videos as they
    want. The app will also display a decorative temporary, or *splash*, title screen
    when the user first opens it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “Practice Makes Perfect”应用程序将自动打开设备的视频摄像头录制视频，然后在应用的自带视频播放器中回放视频。之后，应用将允许用户录制和观看任意数量的额外视频。应用在用户首次打开时还会显示一个装饰性临时的或*启动*标题屏幕。
- en: 'We can break this action down into four steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将这个操作分解成四个步骤：
- en: When a user opens the app, display the splash screen for 5 seconds before displaying
    the Record button, Watch button, and the VideoPlayer. Open the device’s video
    recorder so the user can record.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户打开应用程序时，首先显示启动屏幕5秒钟，然后再显示录制按钮、观看按钮和视频播放器。打开设备的视频录制器，供用户录制。
- en: When the user clicks the Record button, open the device’s video camera so the
    user can record.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击录制按钮时，打开设备的视频摄像头，供用户录制。
- en: Once the user records a video, set the recorded clip to play the next time the
    app’s VideoPlayer starts.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦用户录制了一个视频，设置已录制的片段，在下次应用的VideoPlayer启动时播放。
- en: When the user clicks the Watch button, play the user’s video clip in the app’s
    VideoPlayer.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击观看按钮时，在应用的VideoPlayer中播放用户的视频片段。
- en: 'You’ll need the following components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要以下组件：
- en: Button (2) for the user to click to manually start action
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮（2个）供用户点击手动启动动作
- en: Camcorder to open the app’s video camera
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摄像机组件用于打开应用的视频摄像头
- en: Clock to automatically start the action after a set interval
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时钟组件用于在设定的时间间隔后自动启动动作
- en: Image displaying the temporary splash graphic
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示临时启动图形的图像组件
- en: VerticalScrollArrangement to hold the app’s `Button` and `VideoPlayer` components
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 垂直滚动排列用于容纳应用的`Button`和`VideoPlayer`组件
- en: VideoPlayer to play video clips within the app
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频播放器组件用于在应用中播放视频片段
- en: '**LAYING OUT “PRACTICE MAKES PERFECT” IN THE DESIGNER**'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**在设计器中布局“Practice Makes Perfect”**'
- en: Let’s begin by laying out all the components, keeping in mind that we want the
    app to start with a separate splash screen and then automatically open the video
    camera to record the first video clip. We also want to arrange the components
    so that the app’s easy to use and understand.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先布局所有组件，记住我们希望应用程序从一个独立的启动屏幕开始，然后自动打开视频摄像头录制第一段视频片段。我们还希望组件布局简洁，方便用户使用和理解。
- en: '**Adding the Components**'
  id: totrans-30
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**添加组件**'
- en: Go to the Designer window and drag the listed components from their drawers
    in the Palette pane onto the Viewer pane. From the User Interface drawer, drag
    an Image and two Button components; from the Layout drawer, drag a VerticalScrollArrangement;
    from the Media drawer, drag a VideoPlayer and a Camcorder component; and from
    the Sensors drawer, drag a Clock component. Your screen should now look like [Figure
    2-1](ch02.xhtml#ch2fig1).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 进入设计器窗口，将调色板窗格中列出的组件拖动到查看窗格中。从用户界面抽屉中，拖动一个图像组件和两个按钮组件；从布局抽屉中，拖动一个垂直滚动排列组件；从媒体抽屉中，拖动一个视频播放器和一个摄像机组件；从传感器抽屉中，拖动一个时钟组件。你的屏幕现在应该像[图2-1](ch02.xhtml#ch2fig1)一样。
- en: '![Image](../images/02fig01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig01.jpg)'
- en: '*Figure 2-1: The screen after you drag the “Practice Makes Perfect” app components
    into the Viewer pane*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-1：将“Practice Makes Perfect”应用组件拖入查看窗格后的屏幕*'
- en: In the Viewer pane, all visible components should show on `Screen1` ➊, and the
    non-visible components (`Camcorder` and `Clock`) should show below the Screen
    ➋. In the Components pane ➌, you should see a list of all the components you’ve
    dragged onto the Viewer pane.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看窗格中，所有可见组件应显示在`Screen1` ➊上，而不可见组件（`Camcorder`和`Clock`）应显示在屏幕下方 ➋。在组件窗格 ➌
    中，你应该看到所有拖入查看窗格的组件列表。
- en: '**Creating a Splash Screen**'
  id: totrans-35
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建启动屏幕**'
- en: As mentioned, we’ll display a full-screen introductory graphic that creatively
    illustrates the app’s name and purpose, but we’ll show it only temporarily to
    keep it from taking up too much screen space. We’ll use `Image1` as the splash
    screen, and we need to adjust several properties to get it to display as desired.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将显示一个全屏的介绍性图形，创意地展示应用的名称和目的，但为了不占用过多的屏幕空间，我们只会暂时显示它。我们将使用`Image1`作为启动画面，并且需要调整几个属性，以使其按预期显示。
- en: First, click Image1 in the Components pane, and set its height and width to
    fill the screen by clicking the text boxes under both **Height** and **Width**
    in the Properties pane. When you click each text box, you should see the dialog
    shown in [Figure 2-2](ch02.xhtml#ch2fig2).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在组件面板中点击`Image1`，然后通过点击属性面板中**高度**和**宽度**下的文本框，设置其高度和宽度填充屏幕。当你点击每个文本框时，你应该能看到[图2-2](ch02.xhtml#ch2fig2)中显示的对话框。
- en: '![Image](../images/02fig02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig02.jpg)'
- en: '*Figure 2-2: The Properties dialog that allows you to change a component’s
    height or width*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-2：属性对话框，允许你更改组件的高度或宽度*'
- en: Click the **Fill parent** radio button and then click **OK**. This will make
    the height and width of `Image1` take up the entire height and width of the screen
    once the picture is uploaded.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**填充父元素**单选按钮，然后点击**确定**。这将使`Image1`的高度和宽度在图片上传后占据整个屏幕的高度和宽度。
- en: '**Uploading a Picture**'
  id: totrans-41
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**上传图片**'
- en: We now need to upload the picture we want to display as `Image1` on the app
    screen. To upload a picture, click the text box under **Picture** and click the
    **Upload File …** button shown on the left in [Figure 2-3](ch02.xhtml#ch2fig3),
    which should open the dialog shown on the right.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要上传我们想要在应用屏幕上显示的图片，即`Image1`。要上传图片，请点击**图片**下方的文本框，然后点击[图2-3](ch02.xhtml#ch2fig3)左侧显示的**上传文件
    …**按钮，这将打开右侧显示的对话框。
- en: '![Image](../images/02fig03.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig03.jpg)'
- en: '*Figure 2-3: The Picture and Upload File … dialogs*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-3：图片和上传文件 … 对话框*'
- en: Click the **Choose File** button. The file manager should open to show the files
    on your computer and allow you to find the picture you want to upload, as shown
    in [Figure 2-4](ch02.xhtml#ch2fig4).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**选择文件**按钮。文件管理器将打开，显示你计算机上的文件，并允许你找到你想要上传的图片，如[图2-4](ch02.xhtml#ch2fig4)所示。
- en: '![Image](../images/02fig04.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig04.jpg)'
- en: '*Figure 2-4: The file manager window allows you to select a file from your
    computer.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2-4：文件管理器窗口允许你从计算机中选择文件。*'
- en: Click the image you want to use, click the **Open** button, and then click **OK**
    on the Upload File … dialog shown on the right in [Figure 2-3](ch02.xhtml#ch2fig3).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 点击你想要使用的图片，点击**打开**按钮，然后在[图2-3](ch02.xhtml#ch2fig3)右侧显示的上传文件对话框中点击**确定**。
- en: '**NOTE**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For some of the apps in this book, I created the decorative images we’re using
    by searching the web for pictures, saving them, and then adding text to them using
    a graphics editor. Before saving any images from the web, however, I made sure
    I had the license, or right, to use and modify them, and I checked whether the
    license requires attribution, which means I’d need to give credit to the original
    artist when using the pictures. If you use images or other files you find on the
    web, always make sure that they are labeled as free to use in the way you intend
    and that you give credit to the creator if directed.*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于本书中的一些应用，我通过在网上搜索图片、保存它们，然后使用图形编辑器添加文本来创建我们使用的装饰性图片。然而，在保存任何来自网络的图片之前，我确保我拥有使用和修改它们的许可证或权限，并检查许可证是否要求注明出处，这意味着在使用这些图片时，我需要向原作者致谢。如果你使用从网络上找到的图片或其他文件，一定要确保它们被标注为可以按你意图的方式使用，并且如果有要求的话，要给创作者署名。*'
- en: You should now see the picture on `Screen1` in the Viewer pane. Its width fills
    the screen, just as we want, but its height doesn’t because the other visible
    components are taking up most of the screen’s vertical space. We’ll adjust this
    later when we make those components invisible.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该能在`Screen1`的查看面板中看到图片。它的宽度填充了整个屏幕，正如我们所希望的那样，但高度并没有填满，因为其他可见的组件占据了屏幕的大部分垂直空间。我们稍后会在将这些组件设为不可见时进行调整。
- en: You’ll also notice in the Properties pane that, by default, the checkbox under
    the `Image1 Visible` property is checked, meaning users should see `Image1` when
    the app opens. But because we want `Image1` to show only temporarily, soon we’ll
    program the app to change the value of the `Image1 Visible` property to hide the
    splash screen when we no longer want it to show.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你还会注意到，在属性窗格中，默认情况下，`Image1 Visible`属性下的复选框被选中，这意味着应用程序打开时用户应该能看到`Image1`。但是因为我们只希望`Image1`临时显示，所以接下来我们将编程使得`Image1
    Visible`属性的值发生变化，当我们不再需要它显示时，隐藏启动画面。
- en: Finally, while in the `Image1` Properties pane, click the checkbox under ScalePicturetoFit.
    This will distort `Image1` for now, making it take up even more of the screen
    width, but later, when `Image1` is the only visible component on the screen as
    planned, you’ll see that this is the effect we want.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`Image1`的属性窗格中，点击**ScalePicturetoFit**下的复选框。现在，这会扭曲`Image1`，使其占据更多屏幕宽度，但稍后，当`Image1`成为屏幕上唯一可见的组件时，你会发现这正是我们想要的效果。
- en: '**Creating the Record and Watch Buttons**'
  id: totrans-54
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**创建录制和观看按钮**'
- en: Next, let’s set the properties for both `Button` components. To avoid confusion,
    let’s give each `Button` a name that describes its function in the app, as we
    did in [Chapter 1](ch01.xhtml#ch01).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们为两个`Button`组件设置属性。为了避免混淆，让我们为每个`Button`取一个能描述其功能的名字，正如我们在[第1章](ch01.xhtml#ch01)中所做的那样。
- en: Click Button1 in the Components pane and then click the **Rename** button near
    the bottom of the pane. Replace `Button1` with RecordBtn in the **New name:**
    text box and click **OK**. You should now see `RecordBtn` in the Components and
    Properties panes in the Designer window. Follow the same steps to change the name
    of `Button2` to `WatchBtn`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件窗格中点击Button1，然后点击窗格底部附近的**重命名**按钮。在**新名称：**文本框中将`Button1`替换为`RecordBtn`，然后点击**确定**。现在你应该能在设计器窗口中的组件和属性窗格中看到`RecordBtn`。按照相同的步骤将`Button2`的名称改为`WatchBtn`。
- en: '**Using Images as Buttons**'
  id: totrans-57
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**使用图片作为按钮**'
- en: Let’s also change the look of the buttons. For that, we’ll use images with text
    and icons instead of the default App Inventor buttons. Click the text box under
    **Image** in the Properties pane for each button. Then upload the picture you
    want to use by following the steps just described in “Uploading a Picture” on
    [page 27](ch02.xhtml#page_27).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将改变按钮的外观。为此，我们将使用带有文本和图标的图片，而不是默认的App Inventor按钮。点击每个按钮属性窗格中**图片**下的文本框，然后按照[第27页](ch02.xhtml#page_27)中“上传图片”部分的步骤上传你想要使用的图片。
- en: Once you upload the button images, be sure to delete the default text that’s
    displayed on the buttons. To do so, click the text box under **Text** in the Properties
    pane for each button, delete the existing text, and then remove your cursor from
    the text box.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上传按钮图片后，记得删除按钮上显示的默认文本。操作方法是，点击每个按钮属性窗格中**文本**下的文本框，删除现有文本，然后将光标移出文本框。
- en: Finally, let’s make each `Button` component and the `VideoPlayer` the width
    of the screen by clicking the text box under **Width** in the Properties pane
    for each component, clicking the **Fill parent** radio button and then clicking
    **OK**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们通过点击每个组件属性窗格中**宽度**下的文本框，将每个`Button`组件和`VideoPlayer`的宽度设置为屏幕宽度，点击**填充父项**单选按钮，然后点击**确定**。
- en: '**Grouping Components Vertically**'
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**垂直分组组件**'
- en: As outlined earlier, step 1 of this app requires the `Button` components and
    `VideoPlayer` to be invisible for 5 seconds after the app opens. We can accomplish
    this by using the `VerticalScrollArrangement` component from the Layout drawer.
    Layout components allow you not only to uniformly align other components but also
    to combine components so you can program them as a group.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，本应用的第一步要求在应用启动后，`Button`组件和`VideoPlayer`在5秒钟内保持不可见。我们可以通过使用布局抽屉中的`VerticalScrollArrangement`组件来实现这一点。布局组件不仅可以使其他组件统一对齐，还可以将组件组合在一起，从而将它们作为一个组进行编程。
- en: In this app, we’re grouping all the components we want to hide temporarily when
    the app opens—`RecordBtn`, `WatchBtn`, and `VideoPlayer1`—inside a `VerticalScrollArrangement`.
    We’re using the `VerticalScrollArrangement` in particular because we want to stack
    the components on top of each other, and we want to allow users to scroll vertically
    if necessary to see the videos in `VideoPlayer1`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本应用中，我们将所有需要在应用打开时临时隐藏的组件——`RecordBtn`、`WatchBtn`和`VideoPlayer1`——放入一个`VerticalScrollArrangement`中。我们特别使用`VerticalScrollArrangement`是因为我们希望将组件垂直堆叠，并且希望允许用户在需要时滚动查看`VideoPlayer1`中的视频。
- en: To group `RecordBtn`, `WatchBtn`, and `VideoPlayer1` inside `VerticalScrollArrangement1`
    in that order, click each component in the Viewer pane, and drag it into **VerticalScrollArrangement1**.
    You should then see the components *nested within*, or contained inside, VerticalScrollArrangement1
    in the Viewer and in the Components pane, as shown in [Figure 2-5](ch02.xhtml#ch2fig5).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要按顺序将`RecordBtn`、`WatchBtn`和`VideoPlayer1`分组到`VerticalScrollArrangement1`中，请在查看器面板中点击每个组件，然后将其拖入**VerticalScrollArrangement1**。你应该能在查看器和组件面板中看到这些组件*嵌套在*`VerticalScrollArrangement1`内，正如[图
    2-5](ch02.xhtml#ch2fig5)所示。
- en: '![Image](../images/02fig05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig05.jpg)'
- en: '*Figure 2-5: The Designer window after you drag `RecordBtn`, `WatchBtn`, and
    `VideoPlayer1` inside `VerticalScrollArrangement1`*'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-5：将`RecordBtn`、`WatchBtn`和`VideoPlayer1`拖入`VerticalScrollArrangement1`后的设计器窗口*'
- en: Let’s now change the `Visible` property of `VerticalScrollArrangement1`. Click
    that component in the Components pane, and then click the checkbox in the Properties
    pane under **Visible** to remove the check mark. This should make `VerticalScrollArrangement1`
    and all its contents invisible in the Viewer now and when the app starts. When
    we program the app, we’ll have it adjust this setting while it’s running to display
    these components 5 seconds after the app starts. Also, you’ll see that because
    `VerticalScrollArrangement1` is invisible, `Image1` now fills the screen as planned.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们改变`VerticalScrollArrangement1`的`Visible`属性。在组件面板中点击该组件，然后在属性面板中点击**Visible**下的复选框，去掉勾选。这应该会使得`VerticalScrollArrangement1`及其所有内容在查看器中变得不可见，无论是在现在还是应用启动时。当我们编程时，我们会在应用运行时调整这个设置，以便在应用启动后5秒显示这些组件。同时，你会看到，因为`VerticalScrollArrangement1`是不可见的，`Image1`现在会按预期填充整个屏幕。
- en: The last component we need to adjust before we can start programming is the
    `Clock`. Click the Clock component in the Components pane to change its `TimerInterval`
    property, as shown in [Figure 2-6](ch02.xhtml#ch2fig6).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要调整的最后一个组件是`Clock`。在组件面板中点击`Clock`组件，改变它的`TimerInterval`属性，如[图 2-6](ch02.xhtml#ch2fig6)所示。
- en: '![Image](../images/02fig06.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig06.jpg)'
- en: '*Figure 2-6: The Designer window after you lay out “Practice Makes Perfect,”
    showing the adjusted property pane for `Clock1`*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2-6：你布局完“熟能生巧”后，设计器窗口，显示调整后的`Clock1`属性面板*'
- en: To make the change, click the text box under **TimerInterval**, replace the
    default value of 1000 with 5000, and then click your cursor outside of the text
    box. This sets the `Clock` component’s timer interval to 5,000 milliseconds, or
    5 seconds. This means that, as long as the `Clock` component’s timer is enabled
    and set to *fire*, or go off, as in [Figure 2-6](ch02.xhtml#ch2fig6), it will
    automatically do what we program it to do every 5 seconds. But for your app, you’ll
    need to adjust the `Clock1` properties while the app’s running so the timer fires
    just once to make `Image1` disappear after 5 seconds when the `Button`, `VideoPlayer`,
    and `Camcorder` components appear, instead of firing every 5 seconds without stopping.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更改，点击**TimerInterval**下的文本框，将默认值1000替换为5000，然后将光标点击到文本框外。这将把`Clock`组件的计时器间隔设置为5000毫秒，即5秒。这意味着，只要`Clock`组件的计时器被启用并设置为*触发*，如[图
    2-6](ch02.xhtml#ch2fig6)所示，它将每5秒自动执行我们编程的操作。但对于你的应用，你需要在应用运行时调整`Clock1`的属性，使计时器仅触发一次，以便在5秒后让`Image1`消失，同时显示`Button`、`VideoPlayer`和`Camcorder`组件，而不是每5秒触发一次，持续不断地执行。
- en: '**PROGRAMMING “PRACTICE MAKES PERFECT” IN THE BLOCKS EDITOR**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**在块编辑器中编程“熟能生巧”**'
- en: Now that you’ve laid out all the components, you can move to the Blocks Editor
    to program the app. Click the **Blocks** button to switch to the Blocks Editor,
    and let’s begin programming the four steps in order.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经布局了所有组件，可以进入块编辑器来编程应用。点击**块**按钮切换到块编辑器，我们开始按顺序编程四个步骤。
- en: '**STEP 1: STARTING THE APP**'
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第一步：启动应用**'
- en: We start by telling the app what to do when it opens with the splash screen,
    `Image1`, displayed. We want it to wait 5 seconds before hiding `Image1`, showing
    the `Button` and `VideoPlayer` components for the remaining time that the app
    is open, and opening the `Camcorder`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先告诉应用在打开时做什么，当启动画面`Image1`显示时。我们希望它等待5秒钟后隐藏`Image1`，然后在应用剩余的时间内显示`Button`和`VideoPlayer`组件，并打开`Camcorder`。
- en: This code shows how to set up this first step using the `Clock` component’s
    *timer* event handler.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码展示了如何使用`Clock`组件的*计时器*事件处理器设置这个第一步。
- en: '![Image](../images/f0032-01.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0032-01.jpg)'
- en: In the Blocks pane, click Clock1, and when the blocks for the component appear,
    drag the whenClock1.Timer event handler block ➊ to the Viewer. Next, in the Blocks
    pane, click Image1 and drag the setImage1.Visibleto block ➋ to the Viewer and
    snap it inside the whenClock1.Timer block next to the word `do`. Then, return
    to the Blocks pane, click the **Logic** blocks drawer, and drag the false block
    ➌ to the Viewer and snap it to the right side of the `setImage1.Visibleto` block.
    These are the blocks that set the value of the `Image1 Visible` property to `false`
    after the `Clock` component’s timer fires, which hides the `Image1` splash screen
    after the 5-second time interval we set for the `Clock` in the Designer.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中，点击Clock1，当组件的代码块出现时，将`whenClock1.Timer`事件处理块➊拖动到Viewer中。接着，在“Blocks”面板中，点击Image1，拖动`setImage1.Visibleto`块➋到Viewer中，并将其紧挨着`do`字样放入`whenClock1.Timer`块内。然后，返回“Blocks”面板，点击**逻辑**块抽屉，拖动`false`块➌到Viewer中，并将其拖到`setImage1.Visibleto`块的右侧。这些代码块在`Clock`组件的定时器触发后将`Image1
    Visible`属性的值设置为`false`，从而在我们在设计器中为`Clock`设置的5秒时间间隔后隐藏`Image1`的启动画面。
- en: '**NOTE**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*In the Logic blocks drawer, App Inventor provides two Boolean value blocks,
    one with a value of true and the other with a value of false. Boolean variables
    and properties—such as the Visible property of most visible components and the
    Clock component’s TimerEnabled property—have only two possible values, true and
    false. You can set the initial values of these properties in the Properties pane
    by checking or unchecking the property’s checkbox, and you can change the values
    with the blocks while the app’s running.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*在逻辑块抽屉中，App Inventor提供了两个布尔值块，一个值为true，另一个值为false。布尔变量和属性——如大多数可见组件的Visible属性以及Clock组件的TimerEnabled属性——只有两个可能的值，true和false。你可以通过选中或取消选中属性的复选框，在属性面板中设置这些属性的初始值，并且在应用运行时可以通过代码块改变这些值。*'
- en: Now that we’ve programmed the splash screen to disappear after 5 seconds, we
    need to make the buttons and video player visible. To do this, click VerticalScrollArrangement1,
    drag the setVerticalScrollArrangement1.Visibleto block ➍ to the Viewer, and snap
    it inside the whenClock1.Timer block under the `setImage1.Visibleto` block. Then,
    in the Blocks pane, click the **Logic** blocks drawer, and drag the true block
    ➎ to the Viewer and snap it to the right side of the `setVerticalScrollArrangement1.Visibleto`
    block. These blocks set the value of the `VerticalScrollArrangement1 Visible`
    property to `true` after the `Clock` component’s timer fires, which makes `VerticalScrollArrangement1`
    and everything inside of it visible after the 5-second time interval we set for
    the `Clock` in the Designer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编程使启动画面在5秒后消失，接下来我们需要使按钮和视频播放器可见。为此，点击VerticalScrollArrangement1，将`setVerticalScrollArrangement1.Visibleto`块➍拖动到Viewer中，并将其放入`whenClock1.Timer`块内，位置在`setImage1.Visibleto`块下方。然后，在“Blocks”面板中，点击**逻辑**块抽屉，拖动`true`块➎到Viewer中，并将其放到`setVerticalScrollArrangement1.Visibleto`块的右侧。这些代码块在`Clock`组件的定时器触发后将`VerticalScrollArrangement1
    Visible`属性的值设置为`true`，从而在我们为`Clock`设置的5秒时间间隔后，使得`VerticalScrollArrangement1`及其内部所有内容可见。
- en: Next, in the Blocks pane, click Camcorder1, drag the callCamcorder1.RecordVideo
    block ➏ to the Viewer, and snap it inside the whenClock1.Timer block under the
    `setVerticalScrollArrangement1.Visibleto` block. These blocks call the `Camcorder`
    component’s built-in `RecordVideo` method to automatically open the user’s video
    camera after the `Clock`’s 5-second time interval.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在“Blocks”面板中，点击Camcorder1，将`callCamcorder1.RecordVideo`块➏拖动到Viewer中，并将其放入`whenClock1.Timer`块内，位置在`setVerticalScrollArrangement1.Visibleto`块下方。这些代码块调用`Camcorder`组件的内置`RecordVideo`方法，在`Clock`的5秒时间间隔后自动打开用户的视频摄像头。
- en: Finally, click Clock1, scroll down to find the setClock1.TimerEnabledto block
    ➐, drag it to the Viewer, and snap it inside the whenClock1.Timer block under
    the `callCamcorder1.RecordVideo` block. Then, in the Blocks pane, click the **Logic**
    blocks drawer, and drag the false block ➑ to the Viewer and snap it to the right
    side of the `setClock1.TimerEnabledto` block. These blocks set the value of the
    `TimerEnabled` property for `Clock1` to `false`, which stops the `Clock1` timer.
    This means that the timer will fire only once to execute the commands in this
    event handler after the first 5 seconds the app is open, and will not fire again
    until the app reopens.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击`Clock1`，向下滚动找到`setClock1.TimerEnabledto`代码块 ➐，将其拖到“Viewer”中，并将其放入`whenClock1.Timer`代码块下的`callCamcorder1.RecordVideo`代码块内。然后，在“Blocks”面板中，点击**Logic**代码块抽屉，拖动`false`代码块
    ➑ 到“Viewer”中，并将其放入`setClock1.TimerEnabledto`代码块的右侧。这些代码块将`Clock1`的`TimerEnabled`属性值设置为`false`，从而停止`Clock1`计时器。这意味着计时器将在应用程序打开后的前5秒钟内触发一次，并执行事件处理程序中的命令，在应用程序重新打开之前不会再次触发。
- en: In plain English, for step 1, you set the Designer properties to display the
    splash screen (`Image1`) when the app opens. Then, after 5 seconds, the code blocks
    tell the app to hide the image, display the buttons and video player, and open
    the video recorder to record a video.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，步骤1是设置Designer属性，在应用程序打开时显示启动画面（`Image1`）。然后，5秒后，代码块会告诉应用程序隐藏图片，显示按钮和视频播放器，并打开视频录制器以录制视频。
- en: Now live-test to see how these blocks work, preferably with your phone using
    the MIT AI2 Companion app, as outlined in “Live-Testing Your Apps” on [page xxii](intro.xhtml#page_xxii).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行实时测试，查看这些代码块如何工作，最好使用你的手机并通过MIT AI2 Companion应用程序进行测试，详细步骤请参考“实时测试你的应用程序”部分，在[第xxii页](intro.xhtml#page_xxii)。
- en: Once you click **Connect** ▸ **AI Companion** in the top menu bar and scan the
    QR code with your phone’s Companion app, your “Practice Makes Perfect” app should
    open on your phone. As long as your blocks are placed as shown in the code example,
    you should see `Image1` for 5 seconds before the buttons and video player appear
    and the video camera opens. You should not see the buttons and video player until
    you close the video camera. If you close the video camera without recording, you’ll
    likely see an error saying you didn’t record a video, which is true and fine for
    now. Leave the app open on your phone so you can keep live-testing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击顶部菜单栏中的**Connect** ▸ **AI Companion**并用手机的Companion应用程序扫描二维码，你的“Practice
    Makes Perfect”应用程序应该会在手机上打开。只要你的代码块与示例代码相符，你应该会看到`Image1`显示5秒钟，随后按钮和视频播放器出现，视频摄像头打开。你应该在关闭视频摄像头之前看不到按钮和视频播放器。如果你在没有录制的情况下关闭了视频摄像头，你可能会看到一个错误提示，告诉你没有录制视频，这也是正常的。保持应用程序在手机上打开，这样你可以继续进行实时测试。
- en: '**STEP 2: OPENING THE VIDEO RECORDER**'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**步骤2：打开视频录制器**'
- en: So far we’ve programmed what the app should do when the user first opens it.
    Now let’s program step 2 of the app, which lets the user manually open the video
    camera to record a video when needed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经编写了应用程序在用户首次打开时应执行的操作。现在让我们编写应用程序的步骤2，允许用户在需要时手动打开视频摄像头以录制视频。
- en: Here’s where we tell the app what to do when users click `RecordBtn`, which
    is the way users reopen the video camera after it closes. When `RecordBtn` is
    clicked, we want the app to open the device’s video camera so the user can record.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们需要告诉应用程序，当用户点击`RecordBtn`时应该做什么，`RecordBtn`是用户重新打开视频摄像头的方式。当点击`RecordBtn`时，我们希望应用程序打开设备的视频摄像头，以便用户能够进行录制。
- en: '![Image](../images/f0033-01.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0033-01.jpg)'
- en: In the Blocks pane, click RecordBtn, and when the blocks for the component appear,
    drag the whenRecordBtn.Click block ➊ to the Viewer. Then, in the Blocks pane,
    click Camcorder1, drag another callCamcorder1.RecordVideo block ➋ to the Viewer,
    and snap it inside the whenRecordBtn.Click block next to the word `do`. These
    blocks call the `Camcorder` component’s built-in `RecordVideo` method to open
    the phone’s video camera when the `RecordBtn` is clicked, just as we planned.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中，点击`RecordBtn`，当组件的代码块出现时，将`whenRecordBtn.Click`代码块 ➊ 拖到“Viewer”中。然后，在“Blocks”面板中，点击`Camcorder1`，将另一个`callCamcorder1.RecordVideo`代码块
    ➋ 拖到“Viewer”中，并将其放入`whenRecordBtn.Click`代码块的`do`一侧。这些代码块调用`Camcorder`组件内置的`RecordVideo`方法，当点击`RecordBtn`时，它会打开手机的视频摄像头，正如我们所计划的那样。
- en: '**NOTE**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Seeing the RecordVideo method call in two different event handlers might initially
    confuse other programmers who see these blocks. To explain why you’re calling
    the method in two places, you can comment your code by right-clicking the second
    when...do block, selecting ***Add Comment***, clicking the blue question mark
    icon that appears, and entering your explanation in the text area that opens.
    Readers can open and close your comment by clicking the question mark icon. Programmers
    often comment their code to add reminders for themselves and explanations for
    other coders.*'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*在两个不同的事件处理程序中看到RecordVideo方法的调用，可能会让其他看到这些块的程序员感到困惑。为了说明为什么你在两个地方调用这个方法，你可以通过右键点击第二个when...do块，选择***添加评论***，点击出现的蓝色问号图标，并在弹出的文本框中输入你的解释。读者可以通过点击问号图标来打开或关闭你的评论。程序员通常会对代码进行注释，以便为自己添加提醒或为其他程序员提供解释。*'
- en: Now live-test to see how these blocks work. When you click **Record**, your
    phone’s video camera opens and you can then click the camera’s record button to
    record a video. But don’t record just yet! First we need to tell the app what
    to do after the camera records. If you close the video camera again without recording,
    you’ll likely see the error saying you didn’t record a video, which is okay for
    now.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行实时测试，查看这些块是如何工作的。当你点击**Record**时，你手机的摄像头将开启，然后你可以点击摄像头的录制按钮录制视频。但现在不要录制！首先，我们需要告诉应用程序在摄像头录制后应该做什么。如果你在没有录制视频的情况下关闭摄像头，你可能会看到错误提示，说你没有录制视频，暂时这样是可以的。
- en: '**STEP 3: CHOOSING THE VIDEO CLIP TO PLAY**'
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第3步：选择要播放的视频片段**'
- en: Let’s program step 3 of the app so that, after the user records a video, the
    app knows what to do with the recording. We want the app to set the *path* or
    storage location of the video as the source for the `VideoPlayer` component, which
    will ensure the recording will play next in the video player. Here are the blocks
    that handle this *after recording* event.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写应用程序的第3步，使其在用户录制视频后，知道该如何处理录制内容。我们希望应用程序将视频的*路径*或存储位置设置为`VideoPlayer`组件的源，这样就能确保录制的视频接下来会在视频播放器中播放。以下是处理此*录制后*事件的块。
- en: '![Image](../images/f0034-01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0034-01.jpg)'
- en: In the Blocks pane, click Camcorder1, and when the blocks for the component
    appear, drag the whenCamcorder1.AfterRecording block ➊ to the Viewer. Then, in
    the Blocks pane, click the VideoPlayer1 component, drag the setVideoPlayer1.Sourceto
    block ➌ to the Viewer, and snap it inside the whenCamcorder1.AfterRecording block
    next to the word `do`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Blocks”面板中，点击Camcorder1，当该组件的块出现时，将whenCamcorder1.AfterRecording块 ➊ 拖动到“Viewer”中。然后，在“Blocks”面板中，点击VideoPlayer1组件，将setVideoPlayer1.Sourceto块
    ➌ 拖动到“Viewer”中，并将其连接到whenCamcorder1.AfterRecording块中的`do`单词旁边。
- en: The `clip` ➋ on the `whenCamcorder1.AfterRecording` block is an *event parameter*,
    which is a container that holds an *argument* or information provided about an
    event. This information can only be used in the event handler that provides it.
    The `clip` parameter holds the path to the video clip recorded by `Camcorder1`
    in part 1 or 2 of the app, and the video player can’t play the video until you
    set its *source*—the path to the file for it to play—to the path of the recorded
    clip.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`clip` ➋ 在`whenCamcorder1.AfterRecording`块上是一个*事件参数*，它是一个容器，用来存放事件的*参数*或提供的相关信息。这些信息只能在提供该信息的事件处理程序中使用。`clip`参数存储了在应用程序的第一或第二部分中，`Camcorder1`录制的视频片段的路径，视频播放器在设置其*源*（即播放文件的路径）之前，无法播放该视频。'
- en: To set the source, mouse over the clip parameter until you see a `get clip`
    block ➍. Drag the get clip block to the Viewer, and snap it to the right side
    of the setVideoPlayer1.Sourceto block. The blocks in this step set the path to
    the last recorded video clip as the source for `VideoPlayer1`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置源，鼠标悬停在clip参数上，直到你看到`get clip`块 ➍。将get clip块拖动到“Viewer”中，并将其连接到setVideoPlayer1.Sourceto块的右侧。这些块设置了最后录制的视频片段的路径作为`VideoPlayer1`的源。
- en: '**STEP 4: PLAYING THE VIDEO CLIP**'
  id: totrans-101
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**第4步：播放视频片段**'
- en: Finally, let’s program step 4 of the app, telling it what to do when the user
    clicks `WatchBtn`. When the user clicks this button, we want the app’s video player
    to start playing the user’s recorded video. Here is the code for programming this
    event handler.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们编写应用程序的第4步，告诉它当用户点击`WatchBtn`时应该做什么。当用户点击此按钮时，我们希望应用程序的视频播放器开始播放用户录制的视频。下面是编写此事件处理程序的代码。
- en: '![Image](../images/f0035-01.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0035-01.jpg)'
- en: In the Blocks pane, click WatchBtn, and when the blocks for the component appear,
    drag the whenWatchBtn.Click block ➊ to the Viewer. Then, in the Blocks pane, click
    VideoPlayer1, drag the callVideoPlayer1.Start block ➋ to the screen, and snap
    it inside the whenWatchBtn.Click block next to the word `do`. These blocks tell
    the app to call the built-in `Start` method for `VideoPlayer1` to start the video
    player when the watch button is clicked, as planned.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在“块”面板中，点击 WatchBtn，当组件的块出现时，将 whenWatchBtn.Click 块 ➊ 拖动到“查看器”中。然后，在“块”面板中，点击
    VideoPlayer1，将 callVideoPlayer1.Start 块 ➋ 拖动到屏幕上，并将其插入到 whenWatchBtn.Click 块中，放在单词
    `do` 的旁边。这些块指示应用在点击观看按钮时，调用内置的 `Start` 方法来启动 `VideoPlayer1` 播放视频，按照计划进行。
- en: Now live-test your completed app! Open the app on your phone, and you should
    see the splash screen for 5 seconds before the record and watch buttons and `VideoPlayer1`
    appear and your phone’s video camera opens. Take a video and then click **Watch**
    to view the video in the app’s integrated video player. If you placed your blocks
    as shown in the code examples, you should be able to record and watch videos over
    and over again, and you’ve successfully created the “Practice Makes Perfect” app!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进行实时测试你的完成应用！在手机上打开应用，你应该看到启动画面显示 5 秒钟，然后是录制和观看按钮，接着是 `VideoPlayer1` 出现，同时你的手机视频摄像头打开。录制视频后，点击
    **观看** 以在应用集成的视频播放器中查看视频。如果你按照代码示例放置块，你应该能够反复录制和观看视频，并且成功创建了“练习使完美”应用！
- en: '**SUMMARY**'
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this chapter, you built the “Practice Makes Perfect” app, where users can
    record, watch, and re-record temporary video clips of themselves practicing speeches
    or songs. In the process, you examined how App Inventor uses event-driven programming
    to set app behavior, and you became familiar with different types of events and
    event handlers. You also learned about App Inventor’s Boolean value blocks and
    event parameters and used both to set values in this app.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你构建了“练习使完美”应用，用户可以录制、观看并重新录制临时的视频片段，内容是他们自己练习演讲或歌曲的录像。在这个过程中，你学习了 App Inventor
    如何通过事件驱动编程来设置应用行为，并且熟悉了不同类型的事件和事件处理程序。你还了解了 App Inventor 的布尔值块和事件参数，并使用它们设置了应用中的值。
- en: In the next chapter, you’ll learn how to animate images; use random numbers;
    and create, set, and change the values of *variables* using App Inventor’s Animation,
    Math, and Variables blocks. We’ll use these tools to create a noisy, animated
    “Fruit Loot” game app, where players get points for catching fruit as it drops
    down the screen.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何动画化图像；使用随机数；以及使用 App Inventor 的动画、数学和变量块来创建、设置和更改 *变量* 的值。我们将使用这些工具来创建一个嘈杂的、动画化的“水果猎物”游戏应用，玩家通过捕捉下落的水果来获得积分。
- en: '**ON YOUR OWN**'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**独立完成**'
- en: Save new versions of “Practice Makes Perfect” as you modify and extend it working
    on these exercises. You can find solutions online at *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在你修改和扩展“练习使完美”应用时，保存新的版本，并进行这些练习。你可以在网上找到解决方案，链接是 *[https://nostarch.com/programwithappinventor/](https://nostarch.com/programwithappinventor/)*。
- en: Extend the app so that the user can record, watch, and compare two practice
    video clips side by side. Which Layout and other component(s) would you need to
    drag to the Viewer to enable this? How will your blocks change?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展应用，使用户能够录制、观看并并排比较两个练习视频片段。你需要拖动哪些布局和其他组件到“查看器”中才能实现这一功能？你的块将如何改变？
- en: Change the app so that it records and plays sound clips instead of videos. What
    components and blocks would you use to record and play sound?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改应用，使其录制并播放音频片段而不是视频。你会使用哪些组件和块来录制和播放音频？
