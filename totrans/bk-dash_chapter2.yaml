- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">2</samp> <samp class="SANS_Dogma_OT_Bold_B_11">PYCHARM
    TUTORIAL</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter we’ll introduce you to the PyCharm IDE. An *IDE*, short for
    *integrated development environment*, is a text editor that provides various tools
    to help you write code and has the potential to accelerate your programming productivity
    significantly. Modern IDEs generally have features like code highlighting, dynamic
    tool tips, auto-completion, syntax checking, code linters that check for style
    issues, version control to safeguard the history of your edits, debugging, visual
    aids, and performance optimization tools and profilers, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: As your Python dashboard applications grow, so will your need to aggregate all
    your source code in a single spot and in a single development environment. Increasing
    complexity quickly demands the use of an IDE. To follow along with the provided
    code examples in this book, we recommend you use PyCharm, an IDE specifically
    for Python. PyCharm is one of the most popular IDEs and is available for all operating
    systems. It simplifies the development of advanced applications, and the plethora
    of online tutorials and documentation is phenomenal for support. PyCharm also
    integrates well with Dash applications in that it allows you to run and debug
    them, install the required libraries quickly and easily, and use syntax checking
    and linters. However, if you have a preference for another IDE, such as VS Code,
    the instructions in this book will be easy to adapt.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing PyCharm</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start by downloading the latest version of PyCharm. The examples here
    are for the Windows operating system, but the steps are similar on macOS. If you’re
    using Linux, you can check out the instructions to unpack and install the IDE
    in our PyCharm tutorial at [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pycharm<wbr>-a<wbr>-simple<wbr>-illustrated<wbr>-guide*](https://blog.finxter.com/pycharm-a-simple-illustrated-guide).
    Using PyCharm is very similar across different operating systems. Go to [*https://<wbr>www<wbr>.jetbrains<wbr>.com<wbr>/pycharm<wbr>/download*](https://www.jetbrains.com/pycharm/download)
    and you should see something like [Figure 2-1](chapter2.xhtml#fig2-1)*.*
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-1: The PyCharm download
    page</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Download** for the free community version ([Figure 2-1](chapter2.xhtml#fig2-1)),
    and once it’s downloaded, run the executable installer and follow the installation
    steps. We recommend simply accepting all the default settings suggested by the
    installer.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating a Project</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Find PyCharm on your system and run it. Select **New Project**, and you should
    see a window similar to [Figure 2-2](chapter2.xhtml#fig2-2). There are a few options
    in this user interface to pay attention to: a project name, which you enter as
    the suffix in the Location field; the virtual environment; the Python interpreter;
    and the checkbox for creating a *main.py* script.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-2: Setting up a PyCharm
    project</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll call our project *firstDashProject*, but you can use any name you want.
    A short, all-lowercase project name would be more idiomatic, but we’ll use something
    more obvious for the time being. To give it another name, just modify the suffix
    text after the last backslash (\) in the Location field.
  prefs: []
  type: TYPE_NORMAL
- en: The virtual environment and interpreter fields should auto-populate with whatever
    PyCharm detects on your system. In [Figure 2-2](chapter2.xhtml#fig2-2), that’s
    Python 3.7\. We’ll therefore use the virtual environment that comes with the standard
    Python installation, Virtualenv. Using a virtual environment means that all packages
    you install, by default, will be installed only within the project environment
    and not on your machine, keeping everything relevant to a project in one neat
    place. One of the many advantages of virtualizing your project’s dependencies
    like this is that you can install conflicting versions for different projects
    without cluttering up your operating system. For example, if one project uses
    an older version of Dash and you need a newer version of Dash for another project,
    installing Dash globally will almost certainly cause problems. When you install
    the different Dash versions in different virtual environments—one per project—you
    avoid those version conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, choose not to create a *main.py* welcome script by unchecking the box
    at the bottom. Many Python programs use *main.py* as the main entry point of their
    program. To execute the project, they execute the file *main.py*, which in turn
    kicks off all other functionality provided by the program. However, for Dash applications,
    the main entry point for your code is the file *app.py* per convention—although
    you can generally use arbitrary filenames. We therefore recommend unchecking the
    *main.py* box for all Dash projects.
  prefs: []
  type: TYPE_NORMAL
- en: Everything else we’ll leave as it appears.
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** and you should see your first PyCharm dashboard project! It
    should look like [Figure 2-3](chapter2.xhtml#fig2-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-3: Your first PyCharm
    dashboard project</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Before we dive into the details of how to create a dashboard application in
    PyCharm, let’s take a quick tour of the PyCharm interface (see [Figure 2-4](chapter2.xhtml#fig2-4)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-4: Overview of the
    PyCharm interface</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2-4](chapter2.xhtml#fig2-4) shows the most important elements of the
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  The *project tool window* gives you an overview of the project folder structure.
    For larger projects, it’s critical that you maintain a high-level overview of
    how all the code functions and all the modules play together to provide a coherent
    whole.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  The *editor window* allows you to open, write, and edit multiple code files
    from your code project. You can browse the project in the project tool window
    and double-click files to open them in the editor window. Here’s where you’ll
    write and edit the code.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  The *navigation bar* provides buttons and shortcuts to quickly perform the
    most important functions, such as starting and stopping the application, selecting
    the main module to be executed, searching files, and debugging your application.
  prefs: []
  type: TYPE_NORMAL
- en: 4.  After you’ve started your application, you’ll observe its output and execution
    state in the *run tool window*. In [Figure 2-4](chapter2.xhtml#fig2-4), we’ve
    just started our first dashboard application, so the run window shows the URL
    we can click or enter into the browser to check our dashboard application. If
    you use a <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp> statement
    in your code, this is where the printed output will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 5.  The run tool window also provides another navigation bar that allows you
    to switch between different *tabs* of the run tool window. For example, you can
    open a Python shell, open a command line in Windows or the Terminal in macOS to
    access functionality from your operating system, or debug your application in
    a step-by-step manner.
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm comes with a lot of additional windows, but these are the most important
    ones you’ll use in any application, whether it’s a dashboard app or not. We’ll
    leave the rest for you to explore at your leisure.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Running a Dash App</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we’ll have a look at an example dashboard app from the official Dash documentation.
    This code creates the example dashboard app showing a simple bar plot graph in
    [Figure 2-5](chapter2.xhtml#fig2-5). It also starts a server on your local computer
    so that you can view the dashboard app in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-5: A sample Dash app</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In PyCharm, right-click the project in the menu panel on the left, and select
    **New**►**File**. Name your file *app.py* and copy in the code from [*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/layout*](https://dash.plotly.com/layout),
    also shown in [Listing 2-1](chapter2.xhtml#List2-1).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># Run this app with 'python app.py'
    and</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># visit</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">in your web browser.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, html, dcc</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># assume you have a "long-form"
    data frame</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># see</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">https://plotly.com/python/px-arguments/</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for more options</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "Fruit": ["Apples", "Oranges",
    "Bananas", "Apples", "Oranges", "Bananas"],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "Amount": [4, 1, 2, 2, 4,
    5],</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "City": ["SF", "SF", "SF",
    "Montreal", "Montreal", "Montreal"]</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">})</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.bar(df,
    x="Fruit", y="Amount", color="City", barmode="group")</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(children=[</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1(children='Hello Dash'),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(children='''</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      Dash: A web application
    framework for your data.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   '''),</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dcc.Graph(</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      id='example-graph',</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      figure=fig</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 2-1: Example app from
    the Dash documentation</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: We don’t expect you to understand this code yet, and we won’t go into details
    now. At a very high level, this code imports the necessary libraries, builds the
    app and sets its style, creates the data and visualizes it in a bar plot, and
    sets the overall layout to include things like headings. The last two lines start
    the server so that you can view it in your browser (see [Figure 2-6](chapter2.xhtml#fig2-6)).
    After studying the subsequent chapters, you’ll find this simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now run your project: go to the top menu and select **Run**►**app.py**. You
    can also click the green play button in the navigation bar. However, you’ll see
    we’ve hit a snag: running the program displays an error in the run tool window
    at the bottom, shown in [Figure 2-6](chapter2.xhtml#fig2-6). Our app doesn’t yet
    work because we’re importing Dash, but PyCharm doesn’t recognize Dash! The reason
    is that Dash is not part of the Python standard library: you’ll need to install
    it manually before you can use it in your project.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-6: PyCharm Dash error</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You may wonder why we didn’t just install Dash earlier. As you’ll see in a moment,
    because each project is isolated in its own virtual environment, this is good
    practice for how you’ll actually use Dash in the future.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing Dash Through PyCharm</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two ways to install Dash: globally on your computer, which means
    each future project will be able to import Dash, or locally in your virtual environment,
    which means only this project will be able to import Dash and you’ll need to install
    it again for any projects in different virtual environments. The recommended way
    is to install it in the virtual environment.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '*PyCharm may run slightly differently on different systems, so if you run into
    trouble with this step, check out our full guide at* [https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/how<wbr>-to<wbr>-install<wbr>-a<wbr>-library<wbr>-on<wbr>-pycharm](https://blog.finxter.com/how-to-install-a-library-on-pycharm)
    *for help.*'
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm allows us to install Dash directly through our app code. Click the red
    underlined dash library import line and hover your cursor there; a small red lightbulb
    should appear with a menu. Choose the **Install Package Dash** option shown in
    [Figure 2-7](chapter2.xhtml#fig2-7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-7: Installing Dash
    through PyCharm</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this option only appears if you have created the PyCharm project
    within a virtual environment (see [Figure 2-2](chapter2.xhtml#fig2-2)). If you
    don’t see the package installation option, you can open the Terminal tab in your
    run tool window and enter:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
  prefs: []
  type: TYPE_NORMAL
- en: Installing the dash library will take a few moments. It’s important to remember
    that the library is installed only in this *virtual environment*—that is, not
    on your global operating system but only on a project level. For a different project,
    you may have to install Dash again.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your local environment, you may have to repeat the same procedure
    to install the pandas library as well. Visit the pandas installation guide at
    [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/how<wbr>-to<wbr>-install<wbr>-pandas<wbr>-on<wbr>-pycharm*](https://blog.finxter.com/how-to-install-pandas-on-pycharm).
    We’ll cover pandas installation in [Chapter 3](chapter3.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now try running *app.py* again, and you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * Serving Flask app "app" (lazy
    loading)</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Environment: production</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     Use a production WSGI server
    instead.</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Debug mode: on</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Your app is being hosted on your local machine, so nobody can access it from
    the outside world. Internally, Dash uses Python’s Flask library for the heavy
    lifting to serve the website to users. To test your application, copy *http://127.0.0.1:8050/*
    into your browser or click it in the output window in PyCharm. This URL indicates
    that the dashboard app runs on a local server hosted on your machine with IP address
    127.0.0.1—this is a *loopback* address commonly referred to as *localhost* that
    you could read as “your local computer”—and port 8050.
  prefs: []
  type: TYPE_NORMAL
- en: For further information on PyCharm, see our multipage blog tutorial at [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pycharm<wbr>-a<wbr>-simple<wbr>-illustrated<wbr>-guide*](https://blog.finxter.com/pycharm-a-simple-illustrated-guide).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Using Dash with GitHub</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An excellent way to learn about Dash and get used to PyCharm is to copy existing
    Dash projects from experts and play around with their code. Studying code projects
    from the experts is one of the best ways to test and improve your thinking. Earlier,
    you tried out the example app by copying and pasting the code in the file *app.py*.
    This is not always the most convenient way, given that many code projects consist
    of multiple files and more complicated folder structures. Here we’ll clone a GitHub
    project. Most open source projects are available on GitHub, so there are plenty
    for you to look at.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '*Before we begin, you’ll need to have GitHub installed. If you don’t, you can
    either download Git from the official website (*[https://git-scm.com/downloads](https://git-scm.com/downloads))
    *or install it through PyCharm.*'
  prefs: []
  type: TYPE_NORMAL
- en: To clone a GitHub project into a new PyCharm project, first get the URL of the
    GitHub repository you want to clone; there are lots at [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-sample<wbr>-apps*](https://github.com/plotly/dash-sample-apps)
    to choose from. [Figure 2-8](chapter2.xhtml#fig2-8) shows some sample Dash Gallery
    apps from Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-8.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-8: Sample Dash Gallery
    apps on GitHub</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Code** in the repository and copy the URL. For example, you can use
    [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-sample<wbr>-apps<wbr>.git*](https://github.com/plotly/dash-sample-apps.git)
    to access a repository of all Dash apps from the gallery.
  prefs: []
  type: TYPE_NORMAL
- en: Open PyCharm and click **VCS**►**Get from Version Control**, shown in [Figure
    2-9](chapter2.xhtml#fig2-9). Enter the URL in the URL field. Note that building
    this project will create a new project from the Git project URL, so it doesn’t
    matter from which project you start.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-9.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-9: Opening a GitHub
    repository in PyCharm</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Clone** and wait for the operation to finish. This may take some time
    because the repository contains all Dash Gallery projects. Installing the whole
    repository allows you to quickly try out many different Dash projects and examine
    how the experts implement the Dash features you’re interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Next, PyCharm asks you to set up a virtual environment to install the libraries
    the sample apps need (see [Figure 2-10](chapter2.xhtml#fig2-10)). Click **OK**.
    For troubleshooting, please follow the detailed strategy outlined at [*https://<wbr>www<wbr>.jetbrains<wbr>.com<wbr>/help<wbr>/pycharm<wbr>/creating<wbr>-virtual<wbr>-environment<wbr>.xhtml*](https://www.jetbrains.com/help/pycharm/creating-virtual-environment.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-10.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-10: Installing libraries
    in a virtual environment for a checked-out GitHub repository in PyCharm</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! Your PyCharm project should now work. You’ve created a clone
    of the original GitHub project. A *clone* is simply a copy of the original project,
    so if you change the code in your clone, nobody but you can see the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 2-11](chapter2.xhtml#fig2-11) shows how you can open an individual
    dashboard app’s main entry point: the file *app.py*. Open the file in PyCharm,
    install any dependencies it relies on, run it, and view it in your own browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure2-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-11: Opening the</samp>
    <samp class="SANS_Futura_Std_Book_11">app.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    of a dashboard app from the Dash Gallery</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like to see more example Dash apps, the Dash Gallery at [*https://<wbr>dash<wbr>.gallery<wbr>/Portal*](https://dash.gallery/Portal)
    points to many GitHub repositories created by Dash experts. Cloning them is as
    simple as replicating these steps using the URLs provided by the Dash Gallery.
    If you’re not using PyCharm, you can check out this guide on how to clone an existing
    repository: [*https://<wbr>docs<wbr>.github<wbr>.com<wbr>/en<wbr>/github<wbr>/creating<wbr>-cloning<wbr>-and<wbr>-archiving<wbr>-repositories<wbr>/cloning<wbr>-a<wbr>-repository*](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository).
    And don’t worry—you cannot destroy anything, so feel free to play with the code.
    A version control system such as Git allows you to go back to the initial state
    easily.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up PyCharm, one of the most popular
    Python IDEs. PyCharm integrates well with Python Dash. Specifically, you learned
    how to install PyCharm and third-party libraries like Dash through PyCharm, create
    a first simple Dash project, run the project, and view your dashboard app in the
    browser. Furthermore, you learned how to integrate PyCharm with the most popular
    version control system, Git, so that you can check out existing Dash apps to learn
    and collaborate with others.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, now would be a great time to follow the steps in this tutorial, clone
    one of the existing dashboard apps in the gallery, run it, and tweak simple things
    like colors and text labels to get accustomed to Dash! We’ll explain everything
    in detail in the upcoming chapters, but it doesn’t hurt to open the knowledge
    gap before trying to close it, does it?
  prefs: []
  type: TYPE_NORMAL
- en: With PyCharm installed, we’ll move on to an introduction of the pandas library.
    The pandas library helps you organize and process the data you want to visualize
    in your dashboard app!
  prefs: []
  type: TYPE_NORMAL
