- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">2</samp> <samp class="SANS_Dogma_OT_Bold_B_11">PYCHARM
    TUTORIAL</samp>
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">2</samp> <samp class="SANS_Dogma_OT_Bold_B_11">PYCHARM
    教程</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: In this chapter we’ll introduce you to the PyCharm IDE. An *IDE*, short for
    *integrated development environment*, is a text editor that provides various tools
    to help you write code and has the potential to accelerate your programming productivity
    significantly. Modern IDEs generally have features like code highlighting, dynamic
    tool tips, auto-completion, syntax checking, code linters that check for style
    issues, version control to safeguard the history of your edits, debugging, visual
    aids, and performance optimization tools and profilers, to name a few.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向你介绍 PyCharm IDE。*IDE*（集成开发环境）是一种文本编辑器，提供各种工具来帮助你编写代码，并有潜力显著提高你的编程生产力。现代
    IDE 通常具有代码高亮、动态工具提示、自动补全、语法检查、检查代码风格的代码检查工具、版本控制以保护你编辑的历史记录、调试、视觉辅助工具、性能优化工具和分析器等功能。
- en: As your Python dashboard applications grow, so will your need to aggregate all
    your source code in a single spot and in a single development environment. Increasing
    complexity quickly demands the use of an IDE. To follow along with the provided
    code examples in this book, we recommend you use PyCharm, an IDE specifically
    for Python. PyCharm is one of the most popular IDEs and is available for all operating
    systems. It simplifies the development of advanced applications, and the plethora
    of online tutorials and documentation is phenomenal for support. PyCharm also
    integrates well with Dash applications in that it allows you to run and debug
    them, install the required libraries quickly and easily, and use syntax checking
    and linters. However, if you have a preference for another IDE, such as VS Code,
    the instructions in this book will be easy to adapt.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的 Python 仪表板应用程序的增长，你将需要将所有源代码聚合到一个地方，并在一个开发环境中进行管理。不断增加的复杂性很快就要求使用 IDE。为了跟随本书提供的代码示例，我们建议你使用专门为
    Python 设计的 IDE——PyCharm。PyCharm 是最流行的 IDE 之一，适用于所有操作系统。它简化了高级应用程序的开发，并且大量的在线教程和文档为你提供了极好的支持。PyCharm
    还与 Dash 应用程序良好集成，允许你运行和调试它们，快速而轻松地安装所需的库，并使用语法检查和代码检查工具。不过，如果你更喜欢使用其他 IDE，比如 VS
    Code，本书中的指令同样容易调整以适应其他 IDE。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing PyCharm</samp>
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">安装 PyCharm</samp>
- en: Let’s start by downloading the latest version of PyCharm. The examples here
    are for the Windows operating system, but the steps are similar on macOS. If you’re
    using Linux, you can check out the instructions to unpack and install the IDE
    in our PyCharm tutorial at [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pycharm<wbr>-a<wbr>-simple<wbr>-illustrated<wbr>-guide*](https://blog.finxter.com/pycharm-a-simple-illustrated-guide).
    Using PyCharm is very similar across different operating systems. Go to [*https://<wbr>www<wbr>.jetbrains<wbr>.com<wbr>/pycharm<wbr>/download*](https://www.jetbrains.com/pycharm/download)
    and you should see something like [Figure 2-1](chapter2.xhtml#fig2-1)*.*
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从下载最新版本的 PyCharm 开始。这里的示例适用于 Windows 操作系统，但在 macOS 上的步骤类似。如果你使用的是 Linux，可以查看我们在
    PyCharm 教程中提供的关于如何解压和安装 IDE 的指令，网址是 [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pycharm<wbr>-a<wbr>-simple<wbr>-illustrated<wbr>-guide*](https://blog.finxter.com/pycharm-a-simple-illustrated-guide)。在不同操作系统中使用
    PyCharm 的方式非常相似。访问 [*https://<wbr>www<wbr>.jetbrains<wbr>.com<wbr>/pycharm<wbr>/download*](https://www.jetbrains.com/pycharm/download)，你应该能看到类似
    [图 2-1](chapter2.xhtml#fig2-1) 的页面。
- en: '![](../images/Figure2-1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-1: The PyCharm download
    page</samp>'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-1：PyCharm 下载页面</samp>
- en: Click **Download** for the free community version ([Figure 2-1](chapter2.xhtml#fig2-1)),
    and once it’s downloaded, run the executable installer and follow the installation
    steps. We recommend simply accepting all the default settings suggested by the
    installer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **下载** 以获取免费的社区版（[图 2-1](chapter2.xhtml#fig2-1)），下载完成后，运行可执行安装程序并按照安装步骤进行操作。我们建议你直接接受安装程序建议的所有默认设置。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Creating a Project</samp>
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">创建项目</samp>
- en: 'Find PyCharm on your system and run it. Select **New Project**, and you should
    see a window similar to [Figure 2-2](chapter2.xhtml#fig2-2). There are a few options
    in this user interface to pay attention to: a project name, which you enter as
    the suffix in the Location field; the virtual environment; the Python interpreter;
    and the checkbox for creating a *main.py* script.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的系统上找到 PyCharm 并运行它。选择**新建项目**，你应该会看到一个类似于[图 2-2](chapter2.xhtml#fig2-2)的窗口。这个用户界面中有几个需要注意的选项：一个项目名称，你将其作为
    Location 字段中的后缀；虚拟环境；Python 解释器；以及用于创建*main.py* 脚本的复选框。
- en: '![](../images/Figure2-2.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-2: Setting up a PyCharm
    project</samp>'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-2：设置 PyCharm 项目</samp>
- en: We’ll call our project *firstDashProject*, but you can use any name you want.
    A short, all-lowercase project name would be more idiomatic, but we’ll use something
    more obvious for the time being. To give it another name, just modify the suffix
    text after the last backslash (\) in the Location field.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把项目命名为*firstDashProject*，但你可以使用任何你喜欢的名称。一个简短的全小写项目名称会更符合惯例，但暂时我们使用一个更明显的名称。如果要更改名称，只需修改
    Location 字段中最后一个反斜杠（\）后的文本。
- en: The virtual environment and interpreter fields should auto-populate with whatever
    PyCharm detects on your system. In [Figure 2-2](chapter2.xhtml#fig2-2), that’s
    Python 3.7\. We’ll therefore use the virtual environment that comes with the standard
    Python installation, Virtualenv. Using a virtual environment means that all packages
    you install, by default, will be installed only within the project environment
    and not on your machine, keeping everything relevant to a project in one neat
    place. One of the many advantages of virtualizing your project’s dependencies
    like this is that you can install conflicting versions for different projects
    without cluttering up your operating system. For example, if one project uses
    an older version of Dash and you need a newer version of Dash for another project,
    installing Dash globally will almost certainly cause problems. When you install
    the different Dash versions in different virtual environments—one per project—you
    avoid those version conflicts.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境和解释器字段应会自动填充 PyCharm 在你系统上检测到的内容。在[图 2-2](chapter2.xhtml#fig2-2)中，使用的是 Python
    3.7。我们因此将使用与标准 Python 安装一起提供的虚拟环境 Virtualenv。使用虚拟环境意味着你安装的所有软件包默认情况下将仅安装在项目环境中，而不会安装到你的计算机上，这样可以将所有与项目相关的内容保存在一个整洁的地方。虚拟化项目依赖项的众多优点之一是，你可以为不同的项目安装不同版本的软件包，而不会使操作系统变得混乱。例如，如果一个项目使用的是
    Dash 的旧版本，而另一个项目需要一个更新的 Dash 版本，全局安装 Dash 几乎肯定会导致问题。当你在不同的虚拟环境中为每个项目安装不同的 Dash
    版本时——每个项目一个虚拟环境——你就避免了版本冲突。
- en: Finally, choose not to create a *main.py* welcome script by unchecking the box
    at the bottom. Many Python programs use *main.py* as the main entry point of their
    program. To execute the project, they execute the file *main.py*, which in turn
    kicks off all other functionality provided by the program. However, for Dash applications,
    the main entry point for your code is the file *app.py* per convention—although
    you can generally use arbitrary filenames. We therefore recommend unchecking the
    *main.py* box for all Dash projects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，选择不创建*main.py* 欢迎脚本，方法是取消选中底部的复选框。许多 Python 程序使用*main.py*作为程序的主要入口点。为了执行项目，它们执行
    *main.py* 文件，进而启动程序提供的所有其他功能。然而，对于 Dash 应用程序，按照惯例，代码的主要入口点是 *app.py* 文件——尽管通常你可以使用任意文件名。因此，我们建议在所有
    Dash 项目中取消选中 *main.py* 复选框。
- en: Everything else we’ll leave as it appears.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 其他部分我们将保持原样。
- en: Click **Create** and you should see your first PyCharm dashboard project! It
    should look like [Figure 2-3](chapter2.xhtml#fig2-3).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**，你应该会看到你的第一个 PyCharm 仪表盘项目！它应该像[图 2-3](chapter2.xhtml#fig2-3)一样。
- en: '![](../images/Figure2-3.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-3: Your first PyCharm
    dashboard project</samp>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-3：你的第一个 PyCharm 仪表盘项目</samp>
- en: Before we dive into the details of how to create a dashboard application in
    PyCharm, let’s take a quick tour of the PyCharm interface (see [Figure 2-4](chapter2.xhtml#fig2-4)).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨如何在 PyCharm 中创建仪表盘应用程序的细节之前，让我们快速浏览一下 PyCharm 的界面（见[图 2-4](chapter2.xhtml#fig2-4)）。
- en: '![](../images/Figure2-4.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-4: Overview of the
    PyCharm interface</samp>'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-4：PyCharm 界面概览</samp>
- en: '[Figure 2-4](chapter2.xhtml#fig2-4) shows the most important elements of the
    interface:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-4](chapter2.xhtml#fig2-4)显示了界面中最重要的元素：'
- en: 1.  The *project tool window* gives you an overview of the project folder structure.
    For larger projects, it’s critical that you maintain a high-level overview of
    how all the code functions and all the modules play together to provide a coherent
    whole.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*项目工具窗口*为你提供项目文件夹结构的概览。对于较大的项目，保持对所有代码功能以及各模块如何协同工作以提供一个连贯整体的高层次概览至关重要。'
- en: 2.  The *editor window* allows you to open, write, and edit multiple code files
    from your code project. You can browse the project in the project tool window
    and double-click files to open them in the editor window. Here’s where you’ll
    write and edit the code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  *编辑窗口*允许你打开、编写和编辑来自代码项目的多个代码文件。你可以在项目工具窗口中浏览项目，并双击文件以在编辑窗口中打开它们。这里是你编写和编辑代码的地方。
- en: 3.  The *navigation bar* provides buttons and shortcuts to quickly perform the
    most important functions, such as starting and stopping the application, selecting
    the main module to be executed, searching files, and debugging your application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*导航栏*提供了按钮和快捷方式，可以快速执行最重要的功能，例如启动和停止应用程序、选择要执行的主模块、搜索文件和调试应用程序。'
- en: 4.  After you’ve started your application, you’ll observe its output and execution
    state in the *run tool window*. In [Figure 2-4](chapter2.xhtml#fig2-4), we’ve
    just started our first dashboard application, so the run window shows the URL
    we can click or enter into the browser to check our dashboard application. If
    you use a <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp> statement
    in your code, this is where the printed output will appear.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  在你启动应用程序之后，你将会在*运行工具窗口*中观察到其输出和执行状态。在[图 2-4](chapter2.xhtml#fig2-4)中，我们刚刚启动了第一个仪表盘应用程序，因此运行窗口显示了我们可以点击或输入浏览器的
    URL 来查看我们的仪表盘应用。如果你在代码中使用了 <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    语句，打印输出将显示在这里。
- en: 5.  The run tool window also provides another navigation bar that allows you
    to switch between different *tabs* of the run tool window. For example, you can
    open a Python shell, open a command line in Windows or the Terminal in macOS to
    access functionality from your operating system, or debug your application in
    a step-by-step manner.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 5.  运行工具窗口还提供了另一个导航栏，允许你在运行工具窗口的不同*标签页*之间切换。例如，你可以打开一个 Python shell、在 Windows
    中打开命令行或在 macOS 中打开终端，以访问操作系统的功能，或者逐步调试你的应用程序。
- en: PyCharm comes with a lot of additional windows, but these are the most important
    ones you’ll use in any application, whether it’s a dashboard app or not. We’ll
    leave the rest for you to explore at your leisure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 附带了许多额外的窗口，但这些是你在任何应用程序中都会使用到的最重要的窗口，无论是否是仪表盘应用。其余的窗口留给你在闲暇时自行探索。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Running a Dash App</samp>
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">运行 Dash 应用</samp>
- en: Now we’ll have a look at an example dashboard app from the official Dash documentation.
    This code creates the example dashboard app showing a simple bar plot graph in
    [Figure 2-5](chapter2.xhtml#fig2-5). It also starts a server on your local computer
    so that you can view the dashboard app in your browser.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下官方 Dash 文档中的示例仪表盘应用程序。此代码创建了一个示例的仪表盘应用程序，展示了一个简单的条形图，如[图 2-5](chapter2.xhtml#fig2-5)所示。它还在本地计算机上启动了一个服务器，以便你可以在浏览器中查看仪表盘应用。
- en: '![](../images/Figure2-5.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-5: A sample Dash app</samp>'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-5：一个示例的 Dash 应用</samp>
- en: In PyCharm, right-click the project in the menu panel on the left, and select
    **New**►**File**. Name your file *app.py* and copy in the code from [*https://<wbr>dash<wbr>.plotly<wbr>.com<wbr>/layout*](https://dash.plotly.com/layout),
    also shown in [Listing 2-1](chapter2.xhtml#List2-1).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyCharm 中，右键点击左侧菜单面板中的项目，选择**新建**►**文件**。命名你的文件为*app.py*，并复制[此处代码](https://dash.plotly.com/layout)，也如[清单
    2-1](chapter2.xhtml#List2-1)所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># Run this app with 'python app.py'
    and</samp>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"># 使用 'python app.py' 运行此应用并</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># visit</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">in your web browser.</samp>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"># 访问</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">在你的网页浏览器中。</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, html, dcc</samp>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, html, dcc</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.express as px</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import pandas as pd</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># assume you have a "long-form"
    data frame</samp>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"># assume you have a "long-form"
    data frame</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># see</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">https://plotly.com/python/px-arguments/</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for more options</samp>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"># see</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">https://plotly.com/python/px-arguments/</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for more options</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({</samp>
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">df = pd.DataFrame({</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "Fruit": ["Apples", "Oranges",
    "Bananas", "Apples", "Oranges", "Bananas"],</samp>'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "Fruit": ["Apples", "Oranges",
    "Bananas", "Apples", "Oranges", "Bananas"],</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "Amount": [4, 1, 2, 2, 4,
    5],</samp>'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "Amount": [4, 1, 2, 2, 4,
    5],</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "City": ["SF", "SF", "SF",
    "Montreal", "Montreal", "Montreal"]</samp>'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   "City": ["SF", "SF", "SF",
    "Montreal", "Montreal", "Montreal"]</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">})</samp>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">})</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.bar(df,
    x="Fruit", y="Amount", color="City", barmode="group")</samp>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig =</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">px.bar(df,
    x="Fruit", y="Amount", color="City", barmode="group")</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(children=[</samp>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1(children='Hello Dash'),</samp>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.H1(children='Hello Dash'),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(children='''</samp>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   html.Div(children='''</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      Dash: A web application
    framework for your data.</samp>'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      Dash: A web application
    framework for your data.</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   '''),</samp>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   '''),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dcc.Graph(</samp>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dcc.Graph(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      id='example-graph',</samp>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      id='example-graph',</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      figure=fig</samp>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      figure=fig</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">])</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == '__main__':</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 2-1: Example app from
    the Dash documentation</samp>'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 2-1: Example app from
    the Dash documentation</samp>'
- en: We don’t expect you to understand this code yet, and we won’t go into details
    now. At a very high level, this code imports the necessary libraries, builds the
    app and sets its style, creates the data and visualizes it in a bar plot, and
    sets the overall layout to include things like headings. The last two lines start
    the server so that you can view it in your browser (see [Figure 2-6](chapter2.xhtml#fig2-6)).
    After studying the subsequent chapters, you’ll find this simple.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不指望你现在理解这段代码，也不会在此时详细讲解。从高层次来看，这段代码导入了必要的库，构建了应用并设置了其样式，创建了数据并通过条形图进行可视化，同时设置了整体布局，包含了标题等元素。最后两行启动了服务器，这样你就可以在浏览器中查看它了（参见[图
    2-6](chapter2.xhtml#fig2-6)）。在学习后续章节后，你会发现这很简单。
- en: 'Now run your project: go to the top menu and select **Run**►**app.py**. You
    can also click the green play button in the navigation bar. However, you’ll see
    we’ve hit a snag: running the program displays an error in the run tool window
    at the bottom, shown in [Figure 2-6](chapter2.xhtml#fig2-6). Our app doesn’t yet
    work because we’re importing Dash, but PyCharm doesn’t recognize Dash! The reason
    is that Dash is not part of the Python standard library: you’ll need to install
    it manually before you can use it in your project.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行你的项目：进入顶部菜单并选择 **运行**►**app.py**。你也可以点击导航栏中的绿色播放按钮。然而，你会发现我们遇到了一个问题：运行程序时，底部的运行工具窗口显示了一个错误，见
    [图 2-6](chapter2.xhtml#fig2-6)。我们的应用程序现在不能运行，因为我们正在导入 Dash，但 PyCharm 并没有识别 Dash！原因是
    Dash 不是 Python 标准库的一部分：你需要手动安装它，才能在项目中使用。
- en: '![](../images/Figure2-6.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-6: PyCharm Dash error</samp>'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-6：PyCharm Dash 错误</samp>
- en: You may wonder why we didn’t just install Dash earlier. As you’ll see in a moment,
    because each project is isolated in its own virtual environment, this is good
    practice for how you’ll actually use Dash in the future.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我们不早点安装 Dash？正如你稍后会看到的那样，因为每个项目都被隔离在各自的虚拟环境中，这样的做法有助于你将来更好地使用 Dash。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Installing Dash Through PyCharm</samp>
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">通过 PyCharm 安装 Dash</samp>
- en: 'There are two ways to install Dash: globally on your computer, which means
    each future project will be able to import Dash, or locally in your virtual environment,
    which means only this project will be able to import Dash and you’ll need to install
    it again for any projects in different virtual environments. The recommended way
    is to install it in the virtual environment.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Dash 有两种方式：一种是全局安装到你的计算机上，这意味着每个未来的项目都可以导入 Dash；另一种是在你的虚拟环境中本地安装，这意味着只有当前项目可以导入
    Dash，对于不同虚拟环境中的项目，你需要重新安装 Dash。推荐的方式是在虚拟环境中安装。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*PyCharm may run slightly differently on different systems, so if you run into
    trouble with this step, check out our full guide at* [https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/how<wbr>-to<wbr>-install<wbr>-a<wbr>-library<wbr>-on<wbr>-pycharm](https://blog.finxter.com/how-to-install-a-library-on-pycharm)
    *for help.*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*PyCharm 在不同系统上可能会有所不同，因此如果你在此步骤遇到问题，可以查看我们的完整指南，访问* [https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/how<wbr>-to<wbr>-install<wbr>-a<wbr>-library<wbr>-on<wbr>-pycharm](https://blog.finxter.com/how-to-install-a-library-on-pycharm)
    *获取帮助。*'
- en: PyCharm allows us to install Dash directly through our app code. Click the red
    underlined dash library import line and hover your cursor there; a small red lightbulb
    should appear with a menu. Choose the **Install Package Dash** option shown in
    [Figure 2-7](chapter2.xhtml#fig2-7).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm 允许我们通过应用程序代码直接安装 Dash。点击红色下划线的 Dash 库导入行，将光标悬停在上面；一个小红色灯泡会出现，并显示一个菜单。选择**安装
    Dash 包**选项，见 [图 2-7](chapter2.xhtml#fig2-7)。
- en: '![](../images/Figure2-7.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-7: Installing Dash
    through PyCharm</samp>'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-7：通过 PyCharm 安装 Dash</samp>
- en: 'Note that this option only appears if you have created the PyCharm project
    within a virtual environment (see [Figure 2-2](chapter2.xhtml#fig2-2)). If you
    don’t see the package installation option, you can open the Terminal tab in your
    run tool window and enter:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，只有在你在虚拟环境中创建 PyCharm 项目时，才会出现这个选项（见 [图 2-2](chapter2.xhtml#fig2-2)）。如果你看不到包安装选项，可以在运行工具窗口中打开
    Terminal 标签，并输入：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">$</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">pip
    install dash</samp>
- en: Installing the dash library will take a few moments. It’s important to remember
    that the library is installed only in this *virtual environment*—that is, not
    on your global operating system but only on a project level. For a different project,
    you may have to install Dash again.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Dash 库需要几分钟时间。重要的是要记住，库只会安装在这个*虚拟环境*中——也就是说，它不会安装在全局操作系统中，而只是作用于项目级别。对于不同的项目，你可能需要再次安装
    Dash。
- en: Depending on your local environment, you may have to repeat the same procedure
    to install the pandas library as well. Visit the pandas installation guide at
    [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/how<wbr>-to<wbr>-install<wbr>-pandas<wbr>-on<wbr>-pycharm*](https://blog.finxter.com/how-to-install-pandas-on-pycharm).
    We’ll cover pandas installation in [Chapter 3](chapter3.xhtml).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的本地环境，您可能还需要重复相同的程序来安装 pandas 库。请访问 pandas 安装指南：[*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/how<wbr>-to<wbr>-install<wbr>-pandas<wbr>-on<wbr>-pycharm*](https://blog.finxter.com/how-to-install-pandas-on-pycharm)。我们将在[第3章](chapter3.xhtml)中介绍
    pandas 的安装。
- en: 'Now try running *app.py* again, and you should see something like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在再次尝试运行 *app.py*，您应该会看到类似这样的内容：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash is running on</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Dash 正在运行于</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">http://127.0.0.1:8050/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * Serving Flask app "app" (lazy
    loading)</samp>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 正在提供 Flask 应用 "app"（延迟加载）</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Environment: production</samp>'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 环境：生产</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">     WARNING: This is a development
    server. Do not use it in a production deployment.</samp>'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     警告：这是一个开发服务器，请勿在生产环境中使用。</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     Use a production WSGI server
    instead.</samp>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     请改用生产环境的 WSGI 服务器。</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   * Debug mode: on</samp>'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   * 调试模式：开启</samp>
- en: Your app is being hosted on your local machine, so nobody can access it from
    the outside world. Internally, Dash uses Python’s Flask library for the heavy
    lifting to serve the website to users. To test your application, copy *http://127.0.0.1:8050/*
    into your browser or click it in the output window in PyCharm. This URL indicates
    that the dashboard app runs on a local server hosted on your machine with IP address
    127.0.0.1—this is a *loopback* address commonly referred to as *localhost* that
    you could read as “your local computer”—and port 8050.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您的应用程序托管在本地计算机上，因此外部无法访问它。在内部，Dash 使用 Python 的 Flask 库来执行重任，将网站提供给用户。要测试您的应用程序，请将
    *http://127.0.0.1:8050/* 粘贴到浏览器中，或者在 PyCharm 的输出窗口中点击它。该 URL 表示仪表盘应用程序在您的本地计算机上运行，IP
    地址为 127.0.0.1——这是一个通常被称为 *localhost* 的 *环回* 地址，您可以将其理解为“您的本地计算机”——并且端口为 8050。
- en: For further information on PyCharm, see our multipage blog tutorial at [*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pycharm<wbr>-a<wbr>-simple<wbr>-illustrated<wbr>-guide*](https://blog.finxter.com/pycharm-a-simple-illustrated-guide).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 PyCharm 的更多信息，请参见我们的多页博客教程：[*https://<wbr>blog<wbr>.finxter<wbr>.com<wbr>/pycharm<wbr>-a<wbr>-simple<wbr>-illustrated<wbr>-guide*](https://blog.finxter.com/pycharm-a-simple-illustrated-guide)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Using Dash with GitHub</samp>
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">在 GitHub 上使用 Dash</samp>
- en: An excellent way to learn about Dash and get used to PyCharm is to copy existing
    Dash projects from experts and play around with their code. Studying code projects
    from the experts is one of the best ways to test and improve your thinking. Earlier,
    you tried out the example app by copying and pasting the code in the file *app.py*.
    This is not always the most convenient way, given that many code projects consist
    of multiple files and more complicated folder structures. Here we’ll clone a GitHub
    project. Most open source projects are available on GitHub, so there are plenty
    for you to look at.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Dash 和习惯使用 PyCharm 的一个绝佳方式是从专家那里复制现有的 Dash 项目，并尝试修改他们的代码。学习专家的代码项目是测试和提升您思维的最佳方式之一。之前，您通过复制并粘贴
    *app.py* 文件中的代码尝试了示例应用程序。考虑到许多代码项目包含多个文件和更复杂的文件夹结构，这种方式并不总是最方便的。这里我们将克隆一个 GitHub
    项目。大多数开源项目都托管在 GitHub 上，因此您可以浏览大量项目。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*Before we begin, you’ll need to have GitHub installed. If you don’t, you can
    either download Git from the official website (*[https://git-scm.com/downloads](https://git-scm.com/downloads))
    *or install it through PyCharm.*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*在我们开始之前，您需要安装 GitHub。如果没有安装，您可以从官方网站下载 Git（*[https://git-scm.com/downloads](https://git-scm.com/downloads)）*或通过
    PyCharm 安装它。*'
- en: To clone a GitHub project into a new PyCharm project, first get the URL of the
    GitHub repository you want to clone; there are lots at [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-sample<wbr>-apps*](https://github.com/plotly/dash-sample-apps)
    to choose from. [Figure 2-8](chapter2.xhtml#fig2-8) shows some sample Dash Gallery
    apps from Plotly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 GitHub 项目克隆到一个新的 PyCharm 项目中，首先获取你想要克隆的 GitHub 仓库的 URL；可以从[*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-sample<wbr>-apps*](https://github.com/plotly/dash-sample-apps)中选择许多项目。[图
    2-8](chapter2.xhtml#fig2-8)展示了一些来自 Plotly 的 Dash Gallery 应用示例。
- en: '![](../images/Figure2-8.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-8.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-8: Sample Dash Gallery
    apps on GitHub</samp>'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-8：GitHub 上的 Dash Gallery
    应用示例</samp>
- en: Click **Code** in the repository and copy the URL. For example, you can use
    [*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-sample<wbr>-apps<wbr>.git*](https://github.com/plotly/dash-sample-apps.git)
    to access a repository of all Dash apps from the gallery.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 点击仓库中的**代码**并复制 URL。例如，你可以使用[*https://<wbr>github<wbr>.com<wbr>/plotly<wbr>/dash<wbr>-sample<wbr>-apps<wbr>.git*](https://github.com/plotly/dash-sample-apps.git)访问一个包含所有
    Dash 应用的仓库。
- en: Open PyCharm and click **VCS**►**Get from Version Control**, shown in [Figure
    2-9](chapter2.xhtml#fig2-9). Enter the URL in the URL field. Note that building
    this project will create a new project from the Git project URL, so it doesn’t
    matter from which project you start.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 PyCharm 并点击**VCS**►**从版本控制获取**，如[图 2-9](chapter2.xhtml#fig2-9)所示。输入 URL。请注意，构建此项目将从
    Git 项目 URL 创建一个新项目，因此你从哪个项目开始并不重要。
- en: '![](../images/Figure2-9.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-9.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-9: Opening a GitHub
    repository in PyCharm</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-9：在 PyCharm 中打开 GitHub 仓库</samp>
- en: Click **Clone** and wait for the operation to finish. This may take some time
    because the repository contains all Dash Gallery projects. Installing the whole
    repository allows you to quickly try out many different Dash projects and examine
    how the experts implement the Dash features you’re interested in.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**克隆**并等待操作完成。因为该仓库包含了所有的 Dash Gallery 项目，所以这可能需要一些时间。安装整个仓库使你能够快速尝试许多不同的
    Dash 项目，并检查专家是如何实现你感兴趣的 Dash 特性的。
- en: Next, PyCharm asks you to set up a virtual environment to install the libraries
    the sample apps need (see [Figure 2-10](chapter2.xhtml#fig2-10)). Click **OK**.
    For troubleshooting, please follow the detailed strategy outlined at [*https://<wbr>www<wbr>.jetbrains<wbr>.com<wbr>/help<wbr>/pycharm<wbr>/creating<wbr>-virtual<wbr>-environment<wbr>.xhtml*](https://www.jetbrains.com/help/pycharm/creating-virtual-environment.xhtml).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，PyCharm 会要求你设置一个虚拟环境来安装示例应用所需的库（见[图 2-10](chapter2.xhtml#fig2-10)）。点击**确定**。如需故障排除，请按照[此处](https://www.jetbrains.com/help/pycharm/creating-virtual-environment.xhtml)提供的详细策略进行操作。
- en: '![](../images/Figure2-10.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-10.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-10: Installing libraries
    in a virtual environment for a checked-out GitHub repository in PyCharm</samp>'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-10：在 PyCharm 中为已签出的 GitHub
    仓库安装虚拟环境中的库</samp>
- en: Congratulations! Your PyCharm project should now work. You’ve created a clone
    of the original GitHub project. A *clone* is simply a copy of the original project,
    so if you change the code in your clone, nobody but you can see the changes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你的 PyCharm 项目现在应该可以正常工作了。你已经创建了原始 GitHub 项目的克隆。*克隆*只是原始项目的副本，因此如果你更改了克隆中的代码，除了你自己，其他人无法看到这些更改。
- en: '[Figure 2-11](chapter2.xhtml#fig2-11) shows how you can open an individual
    dashboard app’s main entry point: the file *app.py*. Open the file in PyCharm,
    install any dependencies it relies on, run it, and view it in your own browser.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-11](chapter2.xhtml#fig2-11)展示了如何打开单个仪表板应用的主入口文件：*app.py*。在 PyCharm 中打开该文件，安装它所依赖的任何库，运行并在你自己的浏览器中查看。'
- en: '![](../images/Figure2-11.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure2-11.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 2-11: Opening the</samp>
    <samp class="SANS_Futura_Std_Book_11">app.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">file
    of a dashboard app from the Dash Gallery</samp>'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 2-11：从 Dash Gallery 打开仪表板应用的</samp>
    <samp class="SANS_Futura_Std_Book_11">app.py</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件</samp>
- en: 'If you’d like to see more example Dash apps, the Dash Gallery at [*https://<wbr>dash<wbr>.gallery<wbr>/Portal*](https://dash.gallery/Portal)
    points to many GitHub repositories created by Dash experts. Cloning them is as
    simple as replicating these steps using the URLs provided by the Dash Gallery.
    If you’re not using PyCharm, you can check out this guide on how to clone an existing
    repository: [*https://<wbr>docs<wbr>.github<wbr>.com<wbr>/en<wbr>/github<wbr>/creating<wbr>-cloning<wbr>-and<wbr>-archiving<wbr>-repositories<wbr>/cloning<wbr>-a<wbr>-repository*](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository).
    And don’t worry—you cannot destroy anything, so feel free to play with the code.
    A version control system such as Git allows you to go back to the initial state
    easily.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看更多示例 Dash 应用，[*Dash 画廊*](https://dash.gallery/Portal) 提供了许多由 Dash 专家创建的
    GitHub 仓库。克隆它们就像使用 Dash 画廊提供的 URL 按照这些步骤操作一样简单。如果你没有使用 PyCharm，你可以查看这篇关于如何克隆现有仓库的指南：[*https://<wbr>docs<wbr>.github<wbr>.com<wbr>/en<wbr>/github<wbr>/creating<wbr>-cloning<wbr>-and<wbr>-archiving<wbr>-repositories<wbr>/cloning<wbr>-a<wbr>-repository*](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository)。别担心——你无法破坏任何东西，所以尽管放心玩弄代码。像
    Git 这样的版本控制系统可以让你轻松恢复到初始状态。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, you learned how to set up PyCharm, one of the most popular
    Python IDEs. PyCharm integrates well with Python Dash. Specifically, you learned
    how to install PyCharm and third-party libraries like Dash through PyCharm, create
    a first simple Dash project, run the project, and view your dashboard app in the
    browser. Furthermore, you learned how to integrate PyCharm with the most popular
    version control system, Git, so that you can check out existing Dash apps to learn
    and collaborate with others.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何设置 PyCharm，这是最受欢迎的 Python 集成开发环境之一。PyCharm 与 Python Dash 集成良好。具体来说，你学习了如何通过
    PyCharm 安装 PyCharm 本身以及像 Dash 这样的第三方库，创建第一个简单的 Dash 项目，运行该项目，并在浏览器中查看你的仪表盘应用。此外，你还学习了如何将
    PyCharm 与最流行的版本控制系统 Git 集成，这样你就可以检查现有的 Dash 应用，进行学习并与他人协作。
- en: In fact, now would be a great time to follow the steps in this tutorial, clone
    one of the existing dashboard apps in the gallery, run it, and tweak simple things
    like colors and text labels to get accustomed to Dash! We’ll explain everything
    in detail in the upcoming chapters, but it doesn’t hurt to open the knowledge
    gap before trying to close it, does it?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，现在正是跟随本教程步骤，克隆画廊中现有的仪表盘应用，运行它，并调整颜色和文本标签等简单内容以熟悉 Dash 的绝佳时机！我们将在接下来的章节中详细解释一切，但在尝试弥补知识空白之前，先打开这个空白也无妨，不是吗？
- en: With PyCharm installed, we’ll move on to an introduction of the pandas library.
    The pandas library helps you organize and process the data you want to visualize
    in your dashboard app!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好 PyCharm 后，我们将继续介绍 pandas 库。pandas 库帮助你组织和处理你希望在仪表盘应用中可视化的数据！
