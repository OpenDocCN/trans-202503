- en: '2'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2'
- en: PYTHON PROGRAMMING
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: PYTHON编程
- en: THE MAJORITY OF THE PROJECTS IN THIS BOOK ARE WRITTEN IN THE PYTHON PROGRAMMING
    LANGUAGE, WHICH COMES PREINSTALLED WITH THE RASPBIAN OPERATING SYSTEM. PYTHON
    IS A FAIRLY SIMPLE LANGUAGE TO LEARN, BECAUSE ITS STRUCTURE MAKES IT EXTREMELY
    USER-FRIENDLY. BUT IT ALSO HAS COMPLEX FEATURES SUITABLE FOR MORE ADVANCED PROGRAMMERS
    AND CAN ACCOMPLISH TASKS EFFICIENTLY.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的大多数项目使用**Python编程语言**编写，该语言已预装在Raspbian操作系统中。Python是一种相对简单的语言，因为其结构使得它极其用户友好。但它也有适合更高级程序员的复杂特性，并且能够高效地完成任务。
- en: When building the projects in this book, I’ll walk you through writing Python
    code for each program. As a result, you’ll learn the basics of the language as
    you complete the projects. Before we get started, we’ll look at some programming
    basics, such as printing statements, making choices, and avoiding common errors
    in Python.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建本书中的项目时，我会引导你为每个程序编写Python代码。通过这些项目，你将学习语言的基础知识。在我们开始之前，我们将先了解一些编程基础，如打印语句、做出选择和避免Python中的常见错误。
- en: EXPLORING PYTHON
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索Python
- en: To illustrate Python’s efficiency, imagine you’re writing the classic first
    program to display *Hello World* on your screen.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明Python的高效性，假设你正在编写经典的第一个程序，以在屏幕上显示*Hello World*。
- en: 'In the Java programming language, you would write this code:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java编程语言中，你将写出以下代码：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In Python, you can achieve the same output with just a single line of code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你只需一行代码就可以实现相同的输出：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Python code is written in an *integrated development environment* *(IDE)*. An
    IDE is the software you use to write Python code, in the same way you might use
    a word processor to write a document or a web browser to load and view a website.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python代码是在*集成开发环境*（*IDE*）中编写的。IDE是你用来编写Python代码的软件，就像你可能使用文字处理软件来编写文档，或使用网页浏览器来加载和查看网站一样。
- en: INTRODUCING THONNY AND IDLE
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍Thonny和IDLE
- en: 'The Raspbian operating system comes preinstalled with access to a Python IDE
    named *Thonny* ([Figure 2-1](ch02.xhtml#ch02fig01)). This default Python editor
    includes a wide range of error-detecting and code-highlighting features. If you
    need to install Thonny manually for any reason, open the terminal and enter this
    command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Raspbian操作系统预装了一个名为*Thonny*的Python IDE（[图2-1](ch02.xhtml#ch02fig01)）。这个默认的Python编辑器包括广泛的错误检测和代码高亮功能。如果你因某些原因需要手动安装Thonny，请打开终端并输入以下命令：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Thonny IDE has a section for you to write full program code as well as a
    Shell. The *Shell area* is where you can write single lines of code and test them
    without having to save the full program code. You can read more about Thonny’s
    features at *[http://thonny.org/](http://thonny.org/).*
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Thonny IDE有一个区域供你编写完整的程序代码，以及一个Shell。*Shell区域*是你可以编写单行代码并测试它们的地方，而无需保存完整的程序代码。你可以在*[http://thonny.org/](http://thonny.org/)*了解更多关于Thonny的功能。
- en: '![Image](../images/02fig01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig01.jpg)'
- en: '**FIGURE 2-1** Thonny, the default Python IDE'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-1** Thonny，默认的Python集成开发环境'
- en: Python has other editors available, including IDLE (pronounced *idol*), the
    classic IDE for writing Python code. When you download Python onto something other
    than Raspbian, say your regular laptop, this is the editor that is supplied.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Python还有其他可用的编辑器，包括IDLE（发音为*idol*），这是编写Python代码的经典集成开发环境。当你将Python下载到除Raspbian以外的其他设备上，例如你常用的笔记本时，通常会提供这个编辑器。
- en: 'The program code for each project can be written in any Python editor, but
    IDLE has been used throughout this book and the code is colored to match it. If
    you want to use IDLE, open the terminal window and enter this code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目的程序代码可以在任何Python编辑器中编写，但本书中始终使用IDLE，代码的颜色也与其相匹配。如果你想使用IDLE，打开终端窗口并输入以下代码：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You’ll find more information and download details at *[https://www.python.org/downloads/](https://www.python.org/downloads/)*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在*[https://www.python.org/downloads/](https://www.python.org/downloads/)*找到更多信息和下载详情。
- en: 'When you load IDLE, two windows will open ([Figure 2-2](ch02.xhtml#ch02fig02)).
    The window on the left is the *Shell* *window*. You can use this window to test
    single lines of code: when you write code and press ENTER, the code immediately
    runs. The *Untitled* window on the right lets you write and save multiple lines
    of code or full programs. Then you can return to them whenever you want to.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 加载IDLE时，将会打开两个窗口（[图2-2](ch02.xhtml#ch02fig02)）。左侧窗口是*Shell* *窗口*，你可以在这个窗口中测试单行代码：编写代码并按ENTER键，代码会立即运行。右侧的*Untitled*窗口允许你编写并保存多行代码或完整程序。然后，你可以随时返回它们。
- en: '![Image](../images/02fig02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig02.jpg)'
- en: '**FIGURE 2-2** IDLE is the classic IDE for writing Python code.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-2** IDLE 是编写 Python 代码的经典 IDE。'
- en: Once you’ve written your program, you’ll want to run, or *execute*, it to test
    that it works correctly. For both of the installed IDEs, you use the F5 key to
    save and execute a program. Most programmers write and test their programs as
    they’re developing them to catch and remove errors early in the process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你写完程序，就需要运行或 *执行* 它，测试它是否能正确工作。对于两个已安装的 IDE，你都可以按 F5 键来保存并执行程序。大多数程序员在开发程序时会边写边测试，以便及早发现并去除错误。
- en: WRITING YOUR FIRST PROGRAM
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写你的第一个程序
- en: 'Let’s write your first program, which will *print* a simple message to the
    screen. From the main menu, select the Programming option, select either Thonny
    or Python 3 (IDLE), and click **File** ▶ **New**. You can also click **File**
    ▶ **New File** from IDLE. At the top of your new window, enter this line exactly
    as shown (although you can change the text between the quotation marks to a message
    of your own if you want to):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写你的第一个程序，它将 *打印* 一条简单的消息到屏幕上。从主菜单中选择“编程”选项，选择 Thonny 或 Python 3（IDLE），然后点击
    **文件** ▶ **新建**。你也可以从 IDLE 点击 **文件** ▶ **新建文件**。在新窗口的顶部，精确输入这一行（虽然你可以根据需要修改引号中的文本，输入你自己的消息）：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To run the program, press F5 on your keyboard; you’ll be prompted to save the
    program. Click **OK**, and the program will save and run. The text `I can code`
    will appear in the Shell window.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行程序，按键盘上的 F5 键；系统会提示你保存程序。点击 **确定**，程序将保存并运行。文本 `I can code` 将出现在 Shell 窗口中。
- en: 'Return to the previous window, and below your earlier code, enter this line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到上一个窗口，并在你之前的代码下方输入这一行：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once again, press F5 to save and run the program, which should now look like
    this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按 F5 键保存并运行程序，现在它应该像这样：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that you’ve written your first program, let’s review some Python basics.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经写了第一个程序，让我们复习一些 Python 基础知识。
- en: STRINGS
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: '*Strings* are a data type that represents text. You make a string by entering
    characters inside single or double quotes: either method works as long as you
    use the same type of quotes at either end of the string.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*字符串* 是一种表示文本的数据类型。你可以通过将字符输入到单引号或双引号内来创建一个字符串：只要两端使用相同类型的引号，两种方法都可以。'
- en: Inside the quotes, you usually enter text, such as `"Welcome to Raspberry Pi
    Projects for Kids"`. You can print a string (display it onscreen), save it, and
    even manipulate it. You can also search strings for a particular word or character,
    measure the length of a string, and even replace a section of a string, all by
    using Python code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在引号内，你通常输入文本，比如 `"欢迎来到树莓派儿童项目"`。你可以打印字符串（在屏幕上显示），保存它，甚至修改它。你还可以用 Python 代码搜索字符串中的特定词或字符，测量字符串的长度，甚至替换字符串的一部分。
- en: Strings are not just for letters. They can also contain numbers and symbols.
    For example, the string `"C3P0"` contains letters and numbers. However, the numbers
    in a string have no value; they simply represent the symbol for the number 3 and
    the symbol for the number 0\. Even a number by itself, such as `"465"`, has no
    value, meaning you can’t use it as a number in your code by, say, adding it to
    another number.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串不仅仅用于字母。它们也可以包含数字和符号。例如，字符串 `"C3P0"` 包含字母和数字。然而，字符串中的数字没有实际的值；它们仅仅表示数字 3
    和数字 0 的符号。即使是单独的数字，如 `"465"`，也没有值，这意味着你不能像在代码中将它加到另一个数字上一样使用它作为数字。
- en: 'Try it out: enter the following program, which looks like it should add two
    numbers:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 试试这个：输入以下程序，它看起来应该是用来加两个数字的：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you run this program, you’ll get an error. It won’t work because the program
    tries to add one number and one string, and strings don’t have a value. To solve
    this error, you need to remove the quotation marks from "`500`", which changes
    500 from a string to a number. Both numbers now have a value, so you can add them
    together. Try running the program now.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这个程序时，你会遇到一个错误。它无法正常工作，因为程序试图将一个数字和一个字符串相加，而字符串没有值。要解决这个错误，你需要去掉 "`500`"
    中的引号，这样 500 就从字符串变成了数字。现在两个数字都有值了，你可以将它们相加。现在试着运行这个程序。
- en: VARIABLES
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Some of the programs you’ll write will require the user to enter their own data
    into the code. Imagine a program that asks a player to input their name. Because
    this data will change for each user, you can store it in a *variable*. Think of
    variables as boxes inside the computer’s memory that hold information. You give
    each box a label so you can find it again.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你编写的一些程序需要用户输入他们自己的数据。想象一个程序，要求玩家输入他们的名字。因为这个数据会因用户而异，你可以将其存储在一个*变量*中。可以将变量视为计算机内存中的盒子，里面存储着信息。你给每个盒子一个标签，这样你就可以再次找到它。
- en: 'In Python, you define a variable by first giving it a label, which is known
    as *declaring* the variable. For example, let’s use `NameOfMyPet` as the variable
    label. Next, you use the equal sign (`=`) to indicate that the variable contains
    a string or a value. The technical term for this is *assignment*, meaning you
    assign something to the variable. Finally, you state what the variable should
    contain. For example, the name of my pet is Iron Cat, so I could declare a variable
    like this: `NameOfMyPet = "Iron Cat"`. The string "`Iron Cat"` is now stored in
    the computer’s memory, and I can retrieve it at any time by calling the variable
    `NameOfMyPet`. To print the contents of a variable, use the code `print(NameOfMyPet)`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，首先通过给变量一个标签来定义变量，这就是*声明*变量。例如，假设我们使用`NameOfMyPet`作为变量标签。接下来，使用等号（`=`）表示该变量包含一个字符串或一个值。这个过程的术语是*赋值*，即将某物赋给变量。最后，声明变量应该包含的内容。例如，我的宠物名字是
    Iron Cat，所以我可以这样声明一个变量：`NameOfMyPet = "Iron Cat"`。字符串"`Iron Cat"`现在存储在计算机的内存中，我可以随时通过调用变量`NameOfMyPet`来获取它。要打印变量的内容，使用代码`print(NameOfMyPet)`：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You can change the contents of the variable by editing the string. For example,
    you might change the pet name to Tony Bark. When you run the program after the
    change, the original contents of the variable are overwritten with the new pet
    name.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过编辑字符串来更改变量的内容。例如，你可能会把宠物的名字改为 Tony Bark。当你更改后运行程序时，变量的原始内容将被新的宠物名字覆盖。
- en: '**NOTE**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*You could use a variable label in lowercase style, such as* nameofmypet. *But
    this is harder to read and understand at a glance. Python programmers use a technique
    known as* camel case*: a capital letter indicates the first letter of each new
    word in the variable label (for example,* NameOfMyPet*).*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以使用小写风格的变量标签，例如* nameofmypet。*但是，这样的变量名不容易阅读和理解。Python 程序员使用一种被称为*驼峰命名法*的技巧：大写字母表示每个新单词的首字母（例如，*NameOfMyPet*）。*'
- en: You can also use variables to store user responses to questions, such as “What
    is your name?”.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用变量来存储用户对问题的回答，例如“你的名字是什么？”。
- en: 'To create a variable to store user input, you begin by declaring the variable.
    Then you use the equal sign (`=`) and add the question that you want answered
    or a prompt within parentheses on the other side of the equal sign. Delete the
    contents in your IDLE or Thonny file, and enter the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个存储用户输入的变量，你首先声明该变量。然后使用等号（`=`），在等号的另一侧加上你想要回答的问题或提示，括号内写上内容。删除你在 IDLE 或
    Thonny 文件中的内容，并输入以下代码：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The program stores the name that the user enters in a variable called `name`.
    When you run the program, it retrieves the name from the variable `name`, combines
    it with the word `Welcome`, and prints that on the bottom line. For instance,
    if your name was Sarah, it would print `Welcome Sarah`. You may notice that there
    is a deliberate space after `What is your name?` and `Welcome`. This ensures that
    words are separated by spaces. Otherwise, it will print something like this: `WelcomeSarah.`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 程序将用户输入的名字存储在一个名为`name`的变量中。当你运行程序时，它会从`name`变量中获取名字，将其与单词`Welcome`结合，然后在底部打印出来。例如，如果你的名字是
    Sarah，它将打印`Welcome Sarah`。你可能会注意到在`What is your name?`和`Welcome`后面有一个刻意的空格。这是为了确保单词之间有空格分隔，否则它会打印出类似`WelcomeSarah.`这样的内容。
- en: LOOPS
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环
- en: In some of the projects in this book, you’ll need your program to continuously
    repeat a set of instructions. For instance, in [Chapter 3](ch03.xhtml#ch03), the
    program needs to constantly check the level of light in the room to know when
    to trigger your hot glue night-light to turn on, meaning the code needs to keep
    running again and again. In [Chapter 6](ch06.xhtml#ch06), the trampoline program
    continuously checks whether you’re standing on a block of grass in Minecraft.
    If you are, it’s trampoline time, and you’re sent springing up into the air!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: This programming technique is more commonly known as *looping*. The two types
    of loops are `while` loops and `for` loops.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: while Loops
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A `while` loop continues to repeat its code while a particular condition is
    met. The following example shows how you might use this loop:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You set the value of the `count` variable to 5 ❶ to begin with. While the value
    in `count` is greater than 0 ❷, the program asks the question `"Do you like cheese?
    (yes or no) "`. Then it prints a blank line ❸ to keep the layout looking neat
    and tidy. Each time the program loops—meaning each time the indented code after
    the `while` loop line ❷ runs—it subtracts 1 from the `count` value in the code
    `count = count – 1` ❹.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: After the first time the loop runs, the new `count` value is set to 4\. Because
    4 is still bigger than 0, the loop runs again and, at the end of the loop, another
    1 is subtracted. The program continues to loop until `count` reaches a value of
    0\. Then the loop stops, and the program ends. So this program will run five times
    and then stop. Notice that the lines at ❸ and ❹ are indented. Indentation indicates
    to the program that these three lines are part of the loop and run only while
    the loop is running.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'When you use a `while True` statement, as shown here, the program will keep
    running until the user stops or closes the program:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Try it and you’ll be asked “Do you like cheese?” for eternity (well, at least
    until you exit the program).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: for Loops
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A `for` loop repeats its lines of code for a set number of times. In this example,
    the `range` value is set to 5, which means you’ll be asked whether you like cheese
    five times and then the loop will stop:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice that the `for` loop accomplishes the same task as the first `while` loop
    we created earlier. But it uses less code, making the program simpler and more
    efficient.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: CONDITIONALS
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Conditionals* in Python let your program make decisions: when *this* is true,
    *this* happens, but when *that* is true, *that* happens. Think of conditionals
    like buttons: when you press one button, it makes a sound, but when you press
    another button, it flashes a light.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Conditionals let your code respond differently to various inputs or outputs.
    You create conditionals by using `if`, `elif`, and `else` statements.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: An `if` statement is the start of the conditional and checks whether the first
    condition has been met. For example, *if* button A is pressed, play sound A.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: If the first condition isn’t met, you can then check for conditions by using
    an `elif` statement, short for *else if*. This statement checks for the next choice
    if the previous choice wasn’t selected. In this example, if button A was not pressed,
    it might check whether button B was pressed. You can add as many `elif` statements
    as your program needs, checking for buttons C, D, and so on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果第一个条件没有满足，你可以使用`elif`语句来检查其他条件，`elif`是*else if*的缩写。这个语句会检查下一个选项，如果前一个选项没有被选择的话。在这个例子中，如果按钮A没有被按下，它可能会检查按钮B是否被按下。你可以根据需要添加任意多个`elif`语句，检查按钮C、D，等等。
- en: The last part of the conditional is the `else` statement. This tells the program
    what to do if none of the other conditions are met; in this example, if none of
    the buttons are pressed, the code in the `else` statement runs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 条件语句的最后部分是`else`语句。它告诉程序在其他条件不满足时应该做什么；在这个例子中，如果没有按下任何按钮，则执行`else`语句中的代码。
- en: 'Consider the following program to see how conditionals work:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下程序，看看条件语句是如何工作的：
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You begin by asking the user whether they like cheese ❶. The user enters a response.
    You then use an `if` statement ❷ to check whether the user’s response is `yes`.
    If it is, the program prints the message `Good choice`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始时会询问用户是否喜欢奶酪❶。用户输入一个回答。然后你使用`if`语句❷来检查用户的回答是否是`yes`。如果是，程序将打印出信息`Good choice`。
- en: If the user didn’t enter `yes`, the program skips to the `elif` statement ❸
    to check whether the user said `no`. If they did, an alternative message is printed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户没有输入`yes`，程序将跳到`elif`语句❸，检查用户是否输入了`no`。如果是，将打印出一个备用信息。
- en: Finally, you use an `else` statement ❹ to respond to any answer that isn’t `yes`
    or `no`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你使用`else`语句❹来回应任何不是`yes`或`no`的回答。
- en: Enter the program and run it. You might want to try making your own examples.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 进入程序并运行它。你可能想尝试编写你自己的示例。
- en: FUNCTIONS
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数
- en: A *function* is a useful way to store multiple lines of code that perform a
    single task, like a set of instructions. Then, when you want to do that task elsewhere
    in your code, you just enter the function name rather than type all the code again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*函数*是一种存储执行单一任务的多行代码的有用方式，就像一组指令。然后，当你想在代码的其他地方执行这个任务时，你只需输入函数名，而无需再次键入所有代码。'
- en: To create a function, you enter `def` followed by the name of the function,
    a pair of empty parentheses, and a colon (the colon is very important!). Then
    press ENTER to move to the next line so you can type the instructions that the
    function will run. Notice that when you press ENTER, the cursor appears indented,
    not at the start of the line. As with loops, code lines that belong to a function
    need to be indented so Python knows they belong to the function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个函数，你输入`def`，然后是函数的名称、一对空括号和一个冒号（冒号非常重要！）。然后按ENTER键移到下一行，输入函数将要执行的指令。注意，当你按ENTER键时，光标会出现缩进位置，而不是在行的开始。像循环一样，属于函数的代码行需要缩进，这样Python才知道它们属于该函数。
- en: 'To run the function at any point in the program, you write the function’s name
    followed by the empty parentheses. This is known as *calling* a function, as shown
    in the following example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要在程序的任何位置运行函数，你写出函数的名称，后跟空括号。这称为*调用*函数，如下例所示：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You begin by defining a function named `PocketMoney()`. The indented lines following
    the function definition calculate the amount of pocket money the user gets paid
    and how much they owe for “tax” based on information that the user inputs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始时定义一个名为`PocketMoney()`的函数。函数定义后的缩进行计算用户获得的零花钱金额以及他们根据输入的“税费”信息所需支付的金额。
- en: 'If you ran this program now, it wouldn’t do anything because you haven’t *called*
    the function; you’ve just defined it. The completed program, including the function
    call, looks like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行这个程序，它不会做任何事情，因为你还没有*调用*这个函数；你只是定义了它。包括函数调用的完整程序如下所示：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now the program will ask the user to enter the number of days they were well-behaved
    and how much pocket money they were paid per day. Then it calculates and prints
    the user’s final amount of pocket money minus an amount for tax!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在程序会要求用户输入他们表现良好的天数以及每天获得的零花钱数额。然后它会计算并打印用户的最终零花钱金额，减去税费！
- en: RUNNING PYTHON CODE FROM THE TERMINAL
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从终端运行 Python 代码
- en: Sometimes, you’ll need to run a program from somewhere other than IDLE or Thonny.
    For example, you might run a program remotely from another computer, or you might
    not have a screen attached to your Raspberry Pi (as in the nature box project
    in [Chapter 11](ch11.xhtml#ch11)). In such cases, you can run programs from the
    terminal. Doing so frees up the processor, RAM, and graphics for the Python program.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你需要从IDLE或Thonny之外的地方运行程序。例如，你可能从另一台计算机远程运行程序，或者你可能没有将显示器连接到树莓派（如[第11章](ch11.xhtml#ch11)中的自然盒子项目）。在这种情况下，你可以通过终端运行程序。这样做可以释放处理器、内存和图形，专注于Python程序的运行。
- en: 'To run a program from the terminal, open the terminal and use it to navigate
    to the folder that holds the program you want to run. Then enter the following
    command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要从终端运行程序，首先打开终端，使用它导航到包含你想要运行的程序的文件夹。然后输入以下命令：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Replace name_of_the_program.py with the name of your Python program, and it
    will run!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 用你的Python程序的名字替换name_of_the_program.py，它就会运行！
- en: '**NOTE**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*When I show code that you should run in the terminal, I’ll precede it with
    the prompt, which looks like this:* pi@raspberrypi:- $. *But you need to enter
    only the commands that come after the prompt, not the actual prompt.*'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '*当我展示你应该在终端中运行的代码时，我会在前面加上提示符，像这样：* pi@raspberrypi:- $. *但是你只需要输入提示符后面的命令，不需要输入实际的提示符。*'
- en: COMMON PROGRAMMING MISTAKES
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常见编程错误
- en: Programmers love to say that programming is 20 percent coding and 80 percent
    *debugging*, which is the term for correcting errors in your code. The word *bug*
    dates back to the days when computers were so big that they filled several rooms.
    The story goes that on September 9, 1947, a now famous programmer by the name
    of Grace Hopper realized that the computer had stopped working. When she inspected
    the computer, she discovered that a moth had gotten trapped between some of the
    moving parts. Hopper subsequently stuck the moth in her log book and wrote, “case
    of bug being found.”
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员常说，编程是20%的编码和80%的*调试*，调试指的是修正代码中的错误。*bug*这个词可以追溯到计算机刚开始非常庞大，几乎占满整个房间的时代。故事是这样的：1947年9月9日，一位著名的程序员Grace
    Hopper发现计算机停止工作。当她检查计算机时，发现一只飞蛾卡在了某些活动部件之间。Hopper随后把这只飞蛾粘在了她的日志本上，并写下了“发现bug”的字样。
- en: Errors, bugs, and mistakes will cause your program to run incorrectly, stall,
    or not even start. Adopting a methodical, line-by-line approach to debugging will
    make the process easier. But be prepared to spend a lot of time looking for one
    small error. Hopefully, you won’t find a moth.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 错误、bug和失误会导致程序运行不正常、卡顿或甚至无法启动。采用一种有条理的逐行调试方法可以使这一过程变得更加容易。但要做好准备，可能需要花费大量时间来找出一个小小的错误。希望你不会找到一只飞蛾。
- en: Many common mistakes are syntax issues. *Syntax* is a set of rules that govern
    how you must write your code. For example, a line of code inside a conditional
    must always end with a colon. Different programming languages use different syntax.
    When presented with errors, first check that you used the correct syntax. Two
    common syntax issues are the misuse of letter case and indentation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的错误都是语法问题。*语法*是规定你必须如何编写代码的一套规则。例如，条件语句中的代码行必须始终以冒号结尾。不同的编程语言使用不同的语法。当遇到错误时，首先检查你是否使用了正确的语法。两种常见的语法问题是字母大小写的错误使用和缩进问题。
- en: Capital Letters
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 大写字母
- en: One of the most common syntax errors is using uppercase and lowercase letters
    incorrectly. Programming languages don’t always follow standard English grammar
    rules. Some lines of code begin with a lowercase letter, and sometimes a word
    might appear to have a random capital letter in the middle of it. Python is sensitive
    to the use of capital letters! Don’t try to correct what might look like a mistake
    but isn’t; you must enter the code in this book exactly as it’s shown.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的语法错误之一就是错误使用大小写字母。编程语言并不总是遵循标准的英语语法规则。有些代码行以小写字母开头，有时一个单词中间可能会出现一个随机的大写字母。Python对大写字母的使用非常敏感！不要尝试修正看起来像是错误但实际上并不是的地方；你必须完全按照书中所示的方式输入代码。
- en: 'For example, consider the following two lines of code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下两行代码：
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: and
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Only one of them works. Which do you think it is? Try them both to see whether
    you’re right.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 只有其中一个是有效的。你认为是哪一个？试着运行它们，看看自己是否正确。
- en: Indentation
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 缩进
- en: 'Another common cause of error is *indentation*—the number of spaces at the
    beginning of a line of code. In general, it doesn’t matter how many spaces you
    use to indent your lines in Python, as long as you’re consistent. A good practice
    is to always leave four spaces, or one tab, for each indentation. You can use
    either, but ensure that you’re consistent and use only one method in your program.
    Don’t use both methods in the same program. As an example of correct indentation,
    consider this code snippet from the next chapter:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的错误原因是*缩进*——代码行开头的空格数。通常来说，在 Python 中，缩进的空格数并不重要，只要保持一致。一个好的做法是每次缩进留四个空格或一个制表符。你可以任选其一，但请确保一致，且在程序中只使用一种方法。不要在同一程序中同时使用两种方法。作为正确缩进的示例，请参见下章中的代码片段：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The lines at ❶, ❷, ❸, and ❻ are aligned. So are the lines at ❹, ❺, and ❼. This
    program code is indented properly, so it will run.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ❶、❷、❸ 和 ❻ 处的行是对齐的。❹、❺ 和 ❼ 处的行也是对齐的。此程序代码的缩进正确，因此可以运行。
- en: Recall that you need to indent code lines when you’re using conditionals and
    loops and when you’re defining functions. More generally, anytime a line ends
    in a colon, the following line or lines must be indented. If your indentations
    don’t align properly, your program will fail and produce an error message, as
    shown in [Figure 2-3](ch02.xhtml#ch02fig03).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当你使用条件语句和循环，或者定义函数时，需要对代码行进行缩进。更一般地说，任何以冒号结尾的行，后面的行都必须缩进。如果你的缩进没有对齐，程序将失败并产生错误消息，如[图
    2-3](ch02.xhtml#ch02fig03)所示。
- en: '![Image](../images/02fig03.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/02fig03.jpg)'
- en: '**FIGURE 2-3** If your code contains a syntax error, it will produce an error
    message like this one.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-3** 如果你的代码包含语法错误，它会产生如下的错误消息。'
- en: 'For example, this program has indentation errors:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的程序有缩进错误：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Can you figure out which lines are incorrectly indented and will cause an error?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你能找出哪些行缩进不正确并会导致错误吗？
- en: When you want an event to happen outside a loop or after a conditional, the
    code must be *dedented*, or realigned in line with the code before the start of
    the loop or conditional. For example, if you added a `print` statement at the
    end, but it was in line with the `if` statement ❶, the `if` statement would also
    run this `print` command.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当你希望某个事件发生在循环外部或条件判断之后时，代码必须*去缩进*，即与循环或条件语句开始前的代码对齐。例如，如果你在末尾添加了一个 `print` 语句，但它与
    `if` 语句❶对齐，那么 `if` 语句也会执行这个 `print` 命令。
- en: To read more about indentation, see the official Python website at [*https://www.python.org/dev/peps/pep-0008/#indentation/*](https://www.python.org/dev/peps/pep-0008/#indentation/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于缩进的信息，请参阅 Python 官方网站上的[*https://www.python.org/dev/peps/pep-0008/#indentation/*](https://www.python.org/dev/peps/pep-0008/#indentation/)。
- en: USING COMMENTS
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用注释
- en: When you finish a program and you look back at it later, you might find sections
    of the coding confusing, even though you wrote it. To help you and others understand
    what your code does, you can use comments. A *comment* is a note that gives the
    reader information about a section of code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成一个程序并且稍后回过头来看时，你可能会发现某些编码部分令人困惑，尽管是你自己写的。为了帮助自己和他人理解代码的作用，你可以使用注释。*注释*是为读者提供关于代码某部分的说明。
- en: 'Python provides two methods for adding comments. The first is to use the hash
    mark (`#`). Usually, you’ll use one hash mark in front of the comment, like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了两种添加注释的方法。第一种是使用井号 (`#`)。通常，你会在注释前加一个井号，如下所示：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The second way to create comments is to use three single quote marks to open
    a comment and three to close it, like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建注释的第二种方法是使用三个单引号标记打开注释，再用三个单引号标记关闭注释，如下所示：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Remember that comments aren’t commands; they won’t execute when you run the
    program. Their only purpose is to provide a description and reminder of what the
    code does. So, which comment method should you use? If the comment is a single
    line, use the `#` option. If the comment spans more than one line, use the '''
    method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，注释不是命令；当你运行程序时，它们不会执行。它们的唯一作用是提供对代码的描述和提醒。那么，应该使用哪种注释方法呢？如果注释是单行的，使用 `#`
    选项。如果注释跨越多行，使用 ''' 方法。
- en: WRAPPING UP
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: With this brief introduction to Python, you’re now ready to start the book’s
    activities. Each chapter walks you through one complete project. You can complete
    the projects in any order, although they get progressively more challenging. You
    can also sample code, techniques, and elements from each chapter to invent your
    own customized hacks. For more guidance, check out the Raspberry Pi Foundation’s
    website and help forums.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这本简短的Python介绍，你现在已经准备好开始本书的活动了。每一章都会带你完成一个完整的项目。你可以按任何顺序完成这些项目，尽管它们的难度会逐渐增加。你还可以从每一章中提取代码、技术和元素，发明你自己定制的小技巧。如需更多指导，可以查看树莓派基金会的网站和帮助论坛。
- en: Let’s start a project!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个项目吧！
