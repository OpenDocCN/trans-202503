- en: 2 A Stoplight for Your House
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 A 你家的红绿灯
- en: In your first big step toward world domination through embedded electronics,
    you set up the Arduino IDE and blinked an LED. That’s huge, but with an Arduino,
    no project needs to stop at just one LED. This project will show you how to expand
    your first LED sketch to display a blinking pattern on *three* LEDs. Your mission,
    should you choose to accept it, is to build and program a stoplight for a busy
    hallway in your house (see [Figure 2-1](ch02.xhtml#ch02fig01)).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在你通过嵌入式电子学迈出的第一大步中，你设置了Arduino IDE并让LED闪烁。这是一个巨大的进步，但有了Arduino，任何项目都不必止步于一个LED。本项目将展示如何扩展你的第一个LED草图，使三个LED显示闪烁模式。你的任务，如果你选择接受的话，是为你家一个繁忙的走廊制作并编程一个红绿灯（见[图2-1](ch02.xhtml#ch02fig01)）。
- en: '**FIGURE 2-1:** The completed Stoplight project'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-1：** 完成的红绿灯项目'
- en: '![Image](../images/fig2_1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_1.jpg)'
- en: '**MATERIALS TO GATHER**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**所需材料**'
- en: The materials in this project are all pretty simple. All of the electronic parts
    are standard in the SparkFun Inventor’s Kit, except for the ones marked with an
    asterisk (*). If you’re using your own kit or piecing together parts yourself,
    see the following parts list. [Figure 2-2](ch02.xhtml#ch02fig02) shows all of
    the parts used in this project.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的材料都很简单。所有电子零件都在SparkFun Inventor’s Kit标准套件中，除了带星号（*）标记的部分。如果你使用的是自己的工具包或自行拼凑零件，请参见以下零件清单。[图2-2](ch02.xhtml#ch02fig02)展示了本项目中使用的所有零件。
- en: '**Electronic Parts**'
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**电子零件**'
- en: • One SparkFun RedBoard (DEV-13975), Arduino Uno (DEV-11021), or any other Arduino-compatible
    board
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块SparkFun RedBoard（DEV-13975），Arduino Uno（DEV-11021），或任何其他兼容Arduino的电路板
- en: • One USB Mini-B cable (CAB-11301 or your board’s USB cable; not shown)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • 一根USB Mini-B电缆（CAB-11301或你电路板的USB电缆；未显示）
- en: • One solderless breadboard (PRT-12002)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: • 一块无焊面包板（PRT-12002）
- en: • One red LED, one yellow LED, and one green LED (COM-12062)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: • 一只红色LED、一只黄色LED和一只绿色LED（COM-12062）
- en: • Three 330 Ω resistors (COM-08377, or COM-11507 for a pack of 20)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: • 三个330 Ω电阻（COM-08377，或一包20个的COM-11507）
- en: • Male-to-male jumper wires (PRT-11026)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对公跳线（PRT-11026）
- en: • Male-to-female jumper wires (PRT-09140*)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: • 公对母跳线（PRT-09140*）
- en: • (Optional) One 4 AA battery holder (PRT-09835*; not shown)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）一个4节AA电池盒（PRT-09835*；未显示）
- en: '**FIGURE 2-2:** Components for the Stoplight'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-2：** 红绿灯组件'
- en: '![Image](../images/fig2_2.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_2.jpg)'
- en: '**Other Materials and Tools**'
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**其他材料和工具**'
- en: 'If you want to build an enclosure like the one in [Figure 2-1](ch02.xhtml#ch02fig01)
    or follow the suggestions in “[Going Further](ch02.xhtml#ch02lev1sec6)” on page
    [64](ch02.xhtml#page_64), you’ll also need the following supplies, shown in [Figures
    2-3](ch02.xhtml#ch02fig03) and [2-4](ch02.xhtml#ch02fig04):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要构建像[图2-1](ch02.xhtml#ch02fig01)中那样的外壳，或按照第[64](ch02.xhtml#page_64)页“[进一步学习](ch02.xhtml#ch02lev1sec6)”中的建议进行操作，你还需要以下材料，这些材料展示在[图2-3](ch02.xhtml#ch02fig03)和[图2-4](ch02.xhtml#ch02fig04)中：
- en: • Pencil
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: • 铅笔
- en: • Craft knife
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: • 工艺刀
- en: • Metal ruler
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: • 金属尺
- en: • Pliers
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: • 钳子
- en: • Wire stripper
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: • 剥线钳
- en: • Glue (hot glue gun or craft glue)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: • 胶水（热熔胶枪或工艺胶水）
- en: • (Optional) Drill and a 3/16-inch drill bit
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）钻机和3/16英寸的钻头
- en: • (Optional) Soldering iron
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）电烙铁
- en: • (Optional) Solder
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）焊锡
- en: • (Optional) Helping hands (not shown)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: • （可选）辅助工具（未显示）
- en: • Cardboard (about 12 inches square) or a cardboard box
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: • 纸板（大约12英寸见方）或纸盒
- en: • Two ping-pong balls
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: • 两个乒乓球
- en: • Enclosure template (see [Figure 2-15](ch02.xhtml#ch02fig15) on page [55](ch02.xhtml#page_55))
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: • 外壳模板（参见[图2-15](ch02.xhtml#ch02fig15)，第[55](ch02.xhtml#page_55)页）
- en: '**NOTE**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*Good, clean cardboard will be worth its weight in gold in these projects.
    We suggest picking up cardboard sheets from a craft or art supply store.*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*好的干净的纸板在这些项目中将是非常宝贵的。我们建议从手工艺或美术用品商店购买纸板。*'
- en: '**FIGURE 2-3:** Recommended tools'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-3：** 推荐工具'
- en: '![Image](../images/fig2_3.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_3.jpg)'
- en: '**FIGURE 2-4:** Recommended building materials'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-4：** 推荐的建筑材料'
- en: '![Image](../images/fig2_4.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_4.jpg)'
- en: '**NEW COMPONENT: THE RESISTOR**'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**新组件：电阻**'
- en: Although you used an LED on its own in [Project 1](ch01.xhtml#ch01), in most
    cases it’s best to use a *resistor* to protect the LED from too much current.
    Resistors like the ones in [Figure 2-5](ch02.xhtml#ch02fig05) are everywhere.
    They are indispensable when you’re building circuits, and you’ll need them to
    complete this project, too.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在[项目1](ch01.xhtml#ch01)中你单独使用了LED，但在大多数情况下，最好使用*电阻*来保护LED免受过多电流的损害。像[图2-5](ch02.xhtml#ch02fig05)中所示的电阻是非常常见的。它们在构建电路时是必不可少的，你在完成本项目时也需要用到它们。
- en: '**FIGURE 2-5:** Resistors up close and personal'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-5：** 近距离看电阻'
- en: '![Image](../images/fig2_5.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_5.jpg)'
- en: If you think of electricity like the flow of water through a pipe, a resistor
    is analogous to a point where the pipe size narrows, reducing the water flow.
    (If you’re curious, see “[Visualizing Electricity as Water in a Pipe](ch00.xhtml#ch00lev2sec5)”
    on page [4](ch00.xhtml#page_4), which describes this metaphor in detail.) Resistors
    control or limit the flow of current.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将电流比作水流通过管道，那么电阻器就像是管道变窄的地方，减少了水流的流量。（如果你感兴趣，可以参考 “[将电流比作管道中的水流](ch00.xhtml#ch00lev2sec5)”
    第 [4](ch00.xhtml#page_4) 页，这里详细描述了这个比喻。）电阻器用于控制或限制电流的流动。
- en: 'Resistance is measured in *ohms* (typically shortened to Ω, the Greek symbol
    omega), and the colored bands on resistors represent their resistance. You’ll
    find a resistor color band decoder in “[Resistors and Bands](app01.xhtml#app01lev1sec4)”
    on page [308](app01.xhtml#page_308); however, in this book, you only need to be
    able to identify two different values of resistors: 330 Ω and 10 kΩ. The bands
    on a 330 Ω resistor are orange, orange, and brown (see [Figure 2-5](ch02.xhtml#ch02fig05)),
    while on a 10 kΩ resistor they’re brown, black, and orange. There is also a fourth
    band on a resistor, and its color indicates the resistor’s *tolerance*. A resistor’s
    value will be accurate within a certain tolerance: silver means the resistor has
    a 5 percent tolerance, while gold indicates a 10 percent tolerance. The projects
    in this book aren’t sensitive enough for the tolerance level to make a difference,
    though, so we’ll just refer to the resistors by their assumed value, which will
    work for either tolerance band.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 电阻以*欧姆*为单位（通常缩写为 Ω，希腊字母欧米伽），电阻器上的彩色带表示其电阻值。你可以在 “[电阻器与带](app01.xhtml#app01lev1sec4)”
    第 [308](app01.xhtml#page_308) 页找到电阻器色带解码器；然而，在本书中，你只需要识别两种不同的电阻器值：330 Ω 和 10 kΩ。330
    Ω 电阻器的色带为橙色、橙色和棕色（见 [图 2-5](ch02.xhtml#ch02fig05)），而 10 kΩ 电阻器的色带则为棕色、黑色和橙色。电阻器上还有第四个带，其颜色表示电阻器的*公差*。电阻器的值将在一定公差范围内准确：银色表示电阻器有
    5% 的公差，而金色则表示 10% 的公差。然而，本书中的项目对公差的要求不高，因此我们将仅按其假定值来使用这些电阻器，这对于任何公差带都适用。
- en: Some components, like LEDs, can be damaged if the current flowing to them is
    too high, and resistors can protect those components by reducing the current.
    Having a resistor in line with an LED to limit the current to a safe level is
    a good precaution so your LED doesn’t burn out—or, in the worst case, pop! (Yes,
    they can literally pop.) From here on, we’ll use current-limiting resistors in
    all projects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些元件，如 LED，如果流向它们的电流过高，可能会受到损坏，电阻器可以通过减少电流来保护这些元件。在 LED 上使用电阻器将电流限制在安全范围内，是一种很好的预防措施，避免
    LED 灯泡烧坏——或者在最坏的情况下，烧爆！（是的，它们真的会爆炸。）从现在开始，我们将在所有项目中使用限流电阻器。
- en: '**WHY THE STOPLIGHT USES 330 Ω RESISTORS**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么红绿灯使用 330 Ω 电阻器**'
- en: An average red LED has a maximum current rating of about 20 mA, as listed on
    its datasheet. In order to protect it, you need to add a resistor to keep the
    current below this limit. But how do you know to use a 330 Ω resistor?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一般红色 LED 的最大电流额定值大约为 20 mA，如其数据表所列。为了保护 LED，你需要添加一个电阻器，以确保电流不超过这一限制。那么，如何知道要使用
    330 Ω 电阻器呢？
- en: 'The output pins on the Arduino provide 5 V when they are turned on. Depending
    on the color, each LED needs a slightly different amount of voltage to turn on,
    typically in the range of 2.0 to 3.5 V. A red LED turns on at about 2 V, and that
    leaves 3 V remaining. The 3 V will be dissipated across a resistor or anything
    else that is in line in the circuit. It’s generally good practice to limit the
    current going through an LED to about half the maximum, so for the red LED with
    a maximum current rating of 20 mA, you get 10 mA. You can calculate the resistor
    needed for 3 V and 10 mA with *Ohm’s law* (remember 10 mA = 0.01 A):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 上的输出引脚在开启时提供 5 V。根据颜色，每个 LED 需要的电压略有不同，通常在 2.0 到 3.5 V 之间。红色 LED 大约在
    2 V 时点亮，剩下 3 V 的电压将通过电阻器或电路中的其他元件被消耗。通常的好做法是将通过 LED 的电流限制在最大电流的一半左右，因此对于最大电流额定值为
    20 mA 的红色 LED，你会得到 10 mA 的电流。你可以利用*欧姆定律*（记得 10 mA = 0.01 A）来计算所需的电阻器：
- en: '![Image](../images/042equ01.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/042equ01.jpg)'
- en: But 300 Ω isn’t a standard resistor value. The closest standard resistor value
    is 330 Ω, and usually the nearest standard resistor is good enough. This should
    ensure that the LED lasts for a very, very long time. Since the resistor will
    be dictating the current, this is a *current-limiting resistor*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，300 Ω 并不是一个标准的电阻值。最接近的标准电阻值是 330 Ω，通常最接近的标准电阻已经足够使用。这应该能确保 LED 使用很长时间。由于电阻器将决定电流，因此这是一个*限流电阻器*。
- en: If you have different resistors available, you could use a different value resistor
    and see what happens. Bigger resistors will make the current smaller, and smaller
    resistors will make the current bigger. What happens if you use the 10 kΩ resistor
    instead?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有不同的电阻器可用，可以尝试使用不同阻值的电阻，看看会发生什么。较大的电阻器会使电流减小，而较小的电阻器会使电流增大。如果你使用 10 kΩ 电阻器，会发生什么呢？
- en: '**BUILD THE STOPLIGHT PROTOTYPE**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**构建交通灯原型**'
- en: Now it’s time to build the circuit. First, take a look at the schematic shown
    in [Figure 2-6](ch02.xhtml#ch02fig06). You’ll build this on a breadboard, as shown
    in [Figure 2-7](ch02.xhtml#ch02fig07).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候构建电路了。首先，查看 [图 2-6](ch02.xhtml#ch02fig06) 中显示的原理图。你将在面包板上构建此电路，如 [图 2-7](ch02.xhtml#ch02fig07)
    所示。
- en: '**FIGURE 2-6:** Schematic diagram for the Stoplight project'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-6：** 交通灯项目的原理图'
- en: '![Image](../images/fig2_6.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_6.jpg)'
- en: The schematic illustrates how each component is connected electrically. Pin
    13, pin 12, and pin 11 on the Arduino will each be used to control an individual
    LED on the Stoplight circuit. As you can see in the schematic, each LED is connected
    to an individual resistor, and each resistor is connected to GND (ground). Next,
    let’s look at the wiring.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 原理图展示了每个组件如何在电路中连接。Arduino 的引脚 13、引脚 12 和引脚 11 将分别用于控制交通灯电路中的每个 LED。正如原理图所示，每个
    LED 都连接到一个独立的电阻器，而每个电阻器又连接到 GND（地）。接下来，让我们来看一下布线。
- en: '**FIGURE 2-7:** Connecting a red LED to a breadboard with a current-limiting
    resistor'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-7：** 将红色 LED 和限流电阻连接到面包板'
- en: '![Image](../images/fig2_7.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_7.jpg)'
- en: '**Connect the Red LED to the Breadboard**'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**将红色 LED 连接到面包板**'
- en: Now you’ll start to translate the schematic into an actual circuit. In the first
    project, you blinked an LED built into the Arduino board. This LED was internally
    wired to pin 13 on the Arduino. Because you’ll be using three discrete LEDs, you
    need to wire these up yourself. Take out your breadboard, and, following the schematic
    in [Figure 2-6](ch02.xhtml#ch02fig06) or the illustrated diagram in [Figure 2-7](ch02.xhtml#ch02fig07),
    connect pin 13 to the positive (long) leg of the LED.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将开始把原理图转换为实际的电路。在第一个项目中，你闪烁了一个内置于 Arduino 板上的 LED。这个 LED 是通过 Arduino 的引脚
    13 内部接线的。由于你将使用三个独立的 LED，你需要自己将它们接线。取出你的面包板，并按照 [图 2-6](ch02.xhtml#ch02fig06)
    中的原理图或 [图 2-7](ch02.xhtml#ch02fig07) 中的示意图，将引脚 13 连接到 LED 的正极（较长的腿）。
- en: '**NOTE**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For a refresher on how breadboards work, see “[Prototyping Circuits](ch00.xhtml#ch00lev1sec3)”
    on page [6](ch00.xhtml#page_6).*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*如需复习面包板的工作原理，请参见第 [6](ch00.xhtml#page_6) 页的“[电路原型制作](ch00.xhtml#ch00lev1sec3)”章节。*'
- en: To wire this on the breadboard, we suggest that you first position your Arduino
    and breadboard as shown in [Figure 2-7](ch02.xhtml#ch02fig07). (This will be the
    standard layout throughout the book.) Then, find a red LED and a 330 Ω resistor.
    Bend the resistor legs as shown in [Figure 2-8](ch02.xhtml#ch02fig08) so that
    the resistor is easier to insert into the breadboard. We suggest using wire cutters
    to trim both resistor legs by about half their length to make the resistor easier
    to work with. Resistors aren’t polarized like LEDs, so you don’t have to keep
    track of which leg is positive or negative.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要在面包板上连接这些，我们建议你首先按照 [图 2-7](ch02.xhtml#ch02fig07) 中所示的位置放置 Arduino 和面包板。（这将在本书中作为标准布局。）然后，找到一个红色
    LED 和一个 330 Ω 电阻器。按 [图 2-8](ch02.xhtml#ch02fig08) 中所示弯曲电阻器的腿，这样电阻器就更容易插入面包板。我们建议使用剪线钳将电阻器的两条腿各修剪约一半长度，以便更方便操作。电阻器不像
    LED 那样有极性，因此你不必记住哪一条腿是正极或负极。
- en: '**FIGURE 2-8:** Bending a resistor'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-8：** 弯曲电阻器'
- en: '![Image](../images/fig2_8.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_8.jpg)'
- en: '[Figure 2-9](ch02.xhtml#ch02fig09) shows a diagram of a typical breadboard.
    Most breadboards have labeled columns and numbered rows as references. Using these
    reference points, insert the LED into your breadboard as shown in [Figure 2-7](ch02.xhtml#ch02fig07).
    The long, positive leg (anode) should be in column E, row 1 (E1) on the breadboard,
    and the short, negative leg (cathode) should be in column E, row 2 (E2). Now,
    find a 330 Ω (orange-orange-brown) resistor. Insert one leg of the resistor into
    any hole in row 2 of the breadboard to connect the resistor to the short leg of
    the LED. In our diagram, we insert this leg of the resistor into A2 on the breadboard.
    On all standard breadboards, for each row, columns A–E are connected, and columns
    F–J are connected. Now, insert the other leg of the resistor into the breadboard’s
    *negative power rail*, which is the column marked with a blue or black line and
    a – (minus) symbol.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[图2-9](ch02.xhtml#ch02fig09)展示了典型面包板的示意图。大多数面包板都有标记的列和编号的行作为参考。利用这些参考点，将LED按照[图2-7](ch02.xhtml#ch02fig07)所示插入面包板。长的正极腿（阳极）应插入面包板的E列第1行（E1），而短的负极腿（阴极）应插入面包板的E列第2行（E2）。现在，找到一个330
    Ω（橙色-橙色-棕色）电阻器。将电阻器的一条腿插入面包板第2行的任意孔中，以将电阻器连接到LED的短腿。在我们的示意图中，我们将电阻器的这一腿插入面包板上的A2孔。在所有标准面包板上，每行的A–E列是相连的，F–J列也是相连的。现在，将电阻器的另一条腿插入面包板的*负电源轨*，即标有蓝色或黑色线条和负号（–）符号的列。'
- en: '**FIGURE 2-9:** A breadboard has numbered rows and columns labeled with letters.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-9：** 面包板具有编号的行和标有字母的列。'
- en: '![Image](../images/fig2_9.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_9.jpg)'
- en: '**Add Power to the Breadboard**'
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**为面包板供电**'
- en: Grab two male-to-male jumper wires. We suggest using black for ground (GND)
    and red for power, and that’s the convention we’ll follow throughout this book.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 拿两根公对公的跳线。我们建议使用黑色表示接地（GND），红色表示电源，这也是本书中采用的标准。
- en: Connect the black wire from the GND pin on the Arduino to the negative power
    rail on the breadboard. There are three pins labeled GND on the Arduino. You can
    use any of these. The power for each LED will actually come from the digital pins.
    Since pin 13 will power the red LED, connect a wire from pin 13 on the Arduino
    to A1 on the breadboard.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将Arduino上的GND引脚的黑线连接到面包板上的负电源轨。Arduino上有三个标有GND的引脚，您可以使用其中任何一个。每个LED的电源实际上来自数字引脚。由于引脚13将为红色LED供电，因此将一根线从Arduino的13号引脚连接到面包板上的A1。
- en: Plug your Arduino board into your computer using a USB cable, and the “Hello,
    world!” sketch from [Project 1](ch01.xhtml#ch01) should run, causing your LED
    to blink. In fact, both the LED on the breadboard and the LED on the Arduino should
    be blinking, because they’re both wired into pin 13.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用USB线将Arduino板连接到计算机，并且[项目1](ch01.xhtml#ch01)中的“Hello, world!”示例程序应该会运行，从而使您的LED开始闪烁。实际上，面包板上的LED和Arduino上的LED都会闪烁，因为它们都连接到13号引脚。
- en: If the breadboard LED doesn’t blink but the Arduino one does, double-check your
    wiring and the orientation of the LED. Make sure that the shorter leg is in the
    second row of the breadboard, connected to the resistor, and that the resistor
    is connected to GND through the negative power rail. After you get the red LED
    blinking, disconnect the Arduino from the computer so that you can safely build
    the rest of the circuit. It’s best practice to disconnect the board while building
    your circuit.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果面包板上的LED没有闪烁，而Arduino上的LED闪烁，请仔细检查您的接线和LED的方向。确保短腿插入面包板的第二行，连接到电阻器，并且电阻器通过负电源轨连接到GND。在红色LED闪烁后，请断开Arduino与计算机的连接，以便您可以安全地完成电路的其余部分。搭建电路时，最好断开电路板的连接。
- en: '**Add the Yellow and Green LEDs**'
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**添加黄色和绿色LED**'
- en: Now, connect the yellow LED to pin 12 on the Arduino and the green LED to pin
    11; you can follow the same basic instructions you followed for the red LED, but
    use different pairs of rows for each new LED, as in the final wiring diagram in
    [Figure 2-10](ch02.xhtml#ch02fig10).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将黄色LED连接到Arduino的12号引脚，将绿色LED连接到11号引脚；您可以按照为红色LED所做的相同基本步骤操作，但为每个新LED使用不同的行对，就像在[图2-10](ch02.xhtml#ch02fig10)中的最终接线图所示。
- en: '**FIGURE 2-10:** The final Stoplight circuit, using pins 11, 12, and 13'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-10：** 使用11、12和13号引脚的最终交通信号灯电路'
- en: '![Image](../images/fig2_10.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_10.jpg)'
- en: Each LED should have its own resistor wired to the ground rail, just like the
    schematic from [Figure 2-6](ch02.xhtml#ch02fig06). Notice, too, that we gave each
    LED a little space on the breadboard so that we could have room to plug in wires
    without messing up other parts of the circuit. Although we suggested a specific
    way to plug in this circuit, remember that you can use any part of the breadboard—so
    long as the two wires you’re trying to connect are in the same row. Once you’re
    done, your circuit should resemble [Figure 2-11](ch02.xhtml#ch02fig11).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 每个LED都应该有自己的电阻器连接到地轨，就像[图2-6](ch02.xhtml#ch02fig06)中的原理图一样。还要注意，我们给每个LED在面包板上留了一些空间，以便有足够的地方插入线缆而不会弄乱电路的其他部分。虽然我们建议了一种特定的接线方式，但请记住，您可以使用面包板的任何部分——只要您要连接的两根线在同一行。一旦完成，您的电路应该类似于[图2-11](ch02.xhtml#ch02fig11)。
- en: '**FIGURE 2-11:** The completed Stoplight circuit, including the Arduino, LEDs,
    and resistors'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-11：** 完成的交通信号灯电路，包括Arduino、LED和电阻器'
- en: '![Image](../images/fig2_11.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_11.jpg)'
- en: To mimic a real stoplight, this project needs a way to turn on each light for
    a certain amount of time and then switch to the next one. Fortunately, an Arduino
    sketch can use all kinds of instructions, including timing commands, to control
    a circuit.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟一个真实的交通信号灯，该项目需要一种方式来依次点亮每个灯，并在一段时间后切换到下一个。幸运的是，Arduino草图可以使用各种指令，包括定时命令，来控制电路。
- en: '**PROGRAM THE STOPLIGHT**'
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**编程交通信号灯**'
- en: Now, plug your Arduino back into your computer. It’s time to get programming!
    Open the Arduino IDE to start a new sketch.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将您的Arduino重新连接到计算机。是时候开始编程了！打开Arduino IDE，开始一个新的草图。
- en: '**Confirm Your IDE Settings**'
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**确认您的IDE设置**'
- en: When writing any sketch, you should always start with a little housekeeping.
    First, check that the Board type and Port are properly set. Click **Tools ▸ Board**
    now. If you’re using the SparkFun RedBoard or a standard Arduino Uno, select **Arduino/Genuino
    Uno**. Then, click **Tools ▸ Port**. In Windows, your Arduino should be set to
    the highest numbered COM port. On OS X or Linux, the port should be listed as
    */dev/cu.usbserial-A<xxxx>*, where *<xxxx>* is a string of random characters unique
    to your Arduino.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何草图时，您应该始终从一些基础工作开始。首先，检查板类型和端口是否正确设置。现在点击**工具 ▸ 板**。如果您使用的是SparkFun RedBoard或标准的Arduino
    Uno，选择**Arduino/Genuino Uno**。然后，点击**工具 ▸ 端口**。在Windows上，您的Arduino应该设置为最高编号的COM端口。在OS
    X或Linux上，端口应该列出为*/dev/cu.usbserial-A<xxxx>*，其中*<xxxx>*是一个独特的随机字符字符串。
- en: '**Create Placeholders for Pin Numbers**'
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**为引脚编号创建占位符**'
- en: 'With your IDE settings confirmed, you’re ready to create the sketch. As discussed
    in “[Anatomy of an Arduino Sketch](ch01.xhtml#ch01lev1sec9)” on page [27](ch01.xhtml#page_27),
    a basic Arduino sketch consists of two parts: the `setup()` function and the `loop()`
    function. That simplified description is true for most simple sketches, but more
    complex sketches have many different parts. One new part that the Stoplight sketch
    uses is the *global namespace*, which is the part of your sketch above the `setup()`
    function and completely outside of any function. In this space, you can define
    certain names (*variables*) as placeholders for values, and these values will
    then be available for all parts of your sketch to use. Arduino sketches can work
    with several types of values.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认了IDE设置后，您准备好创建草图了。如在“[Arduino草图的结构](ch01.xhtml#ch01lev1sec9)”第[27页](ch01.xhtml#page_27)中讨论的那样，一个基本的Arduino草图由两个部分组成：`setup()`函数和`loop()`函数。这个简化的描述适用于大多数简单的草图，但更复杂的草图有许多不同的部分。停止灯草图使用的一个新部分是*全局命名空间*，这是草图中位于`setup()`函数上方并完全在任何函数之外的部分。在这个区域，您可以将某些名称（*变量*）定义为值的占位符，并且这些值将在草图的所有部分中使用。Arduino草图可以处理几种类型的值。
- en: '**Data That Sketches Understand**'
  id: totrans-87
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**草图能够理解的数据**'
- en: 'The Arduino language includes a number of possible *data types* for values,
    and there are a few you’ll run into often when writing sketches. The following
    list isn’t exhaustive, but it touches on the big ones and shows how their names
    appear in code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino语言包含多种可能的*数据类型*，在编写草图时，您会经常遇到其中的一些。以下列表并不详尽，但涵盖了主要的类型，并展示了它们在代码中出现的方式：
- en: '**Integer (**int**)** A whole number that ranges from –32,768 to 32,767'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数（**int**）** 一个范围从-32,768到32,767的整数'
- en: '**Float (**float**)** A number that has a decimal point and ranges from –3.4028235E+38
    to 3.4028235E+38'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**浮点数（**float**）** 一个带小数点的数字，范围从-3.4028235E+38到3.4028235E+38'
- en: '**Byte (**byte**)** A number that ranges from 0 to 255'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**字节（**byte**）** 一个范围从0到255的数字'
- en: '**Character (**char**)** A single letter, denoted by a set of single quotes,
    such as `‘a’`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符（**char**）** 一个单一的字母，用一对单引号括起来，例如`‘a’`'
- en: '**String (**String**)** A series of characters, denoted by a set of double
    quotes, such as `"hello"`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符串（**String**）** 一系列字符，用一对双引号括起来，例如`"hello"`'
- en: '**Boolean (**Boolean**)** A value of either `true` or `false`, which maps to
    `1` or `0` in the sketch and `HIGH` or `LOW` in terms of pin output'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔值（**Boolean**）** 一个值，可以是`true`或`false`，在程序中映射为`1`或`0`，在引脚输出方面则为`HIGH`或`LOW`'
- en: Arduino sketches require you to specify the data type of a variable when you
    define it. Let’s look at how that works.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino 程序要求在定义变量时指定其数据类型。我们来看看这是如何工作的。
- en: '**Values That Can Change**'
  id: totrans-96
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: '**可变值**'
- en: Most values you’ll create to use in your sketches will be variables. Think of
    a variable as a placeholder for a piece of data. That data can be a number, a
    letter, or even a whole sentence.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你在编写程序时大部分创建的值将是变量。可以把变量看作是数据的占位符。这个数据可以是一个数字，一个字母，甚至是一个完整的句子。
- en: 'Before you can use a variable, you have to *define* it, which includes giving
    it a name, declaring its data type, and initializing it with a value. It’s a good
    habit to give a variable a value at the moment you define it, which looks something
    like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用变量之前，你必须*定义*它，这包括给它命名、声明它的数据类型，并给它一个初始值。养成在定义变量时同时赋值的习惯，看起来大概是这样：
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This variable definition has three parts: the data type ➊, the name of the
    variable ➋, and the variable’s value ➌. At the end of this line, notice that there
    is a semicolon—this denotes the end of a statement or instruction. The semicolon
    is very important, and forgetting it is often the root cause of many compiler
    errors or bugs in code, so be careful to remember it!'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量定义有三个部分：数据类型 ➊、变量名 ➋ 和变量的值 ➌。注意，在这一行的末尾有一个分号——它表示语句或指令的结束。分号非常重要，忘记加它常常是导致许多编译错误或代码中的bug的根本原因，因此要小心记住它！
- en: 'When choosing a variable name, you can use any unbroken set of characters,
    including letters and numbers. There is one caveat here: variables cannot start
    with a number or consist of any special characters. We suggest making variable
    names as descriptive as possible, while keeping them short. It’s a chance for
    you to be a little creative with abbreviating words and descriptions. In this
    example, we chose to name the variable `val` (short for *value*), and `10` is
    the variable’s *initialized value*, or the value assigned to a variable to start
    with. You don’t need to initialize a variable when you define it, but doing both
    at the same time is helpful and a good practice.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择变量名时，你可以使用任何未被打断的字符集，包括字母和数字。这里有一个注意事项：变量不能以数字开头，也不能包含任何特殊字符。我们建议尽可能地使变量名具有描述性，同时保持简洁。这是一个发挥创意的机会，你可以用缩写词和描述来简化变量名。在这个例子中，我们选择将变量命名为`val`（即*value*的缩写），而`10`是变量的*初始化值*，即给变量赋予的初始值。你在定义变量时不一定要初始化它，但同时进行定义和初始化是一个好习惯，也有助于代码的清晰性。
- en: For this project, you’ll create three variables to store pin numbers for the
    three LEDs the Arduino will control. It’s a lot easier to work with a variable
    that describes an LED color than it is to try to remember which LED is connected
    to which pin!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建三个变量，用来存储 Arduino 控制的三个 LED 的引脚编号。用一个描述 LED 颜色的变量要比记住哪个 LED 连接到哪个引脚要容易得多！
- en: Start a new sketch, and add the code in [Listing 2-1](ch02.xhtml#ch02ex01) to
    the global namespace of your sketch.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个新的程序，并将[清单 2-1](ch02.xhtml#ch02ex01)中的代码添加到你程序的全局命名空间中。
- en: '**LISTING 2-1:** Variables that represent pin numbers'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 2-1：** 表示引脚编号的变量'
- en: '[PRE1]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Again, these three variables store the pin numbers for the three LEDs. On the
    Arduino, pin numbers are limited to whole numbers between 0 and 13, so we use
    the `byte` data type. We can use `byte` because we know that the pin number will
    be less than 255\. Notice that each variable’s name describes what it contains:
    `redPin` is for the red LED pin, `ylwPin` is the yellow LED pin, and `grnPin`
    is the green LED pin. And, just as [Figure 2-10](ch02.xhtml#ch02fig10) shows,
    the red pin is pin 13, yellow is pin 12, and green is pin 11\. Now, anytime you
    use a pin number in your sketch, you can use the descriptive variable name instead.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，这三个变量存储三个LED的引脚编号。在Arduino上，引脚编号限制为0到13之间的整数，因此我们使用`byte`数据类型。我们可以使用`byte`，因为我们知道引脚编号不会超过255。请注意，每个变量的名称都描述了它包含的内容：`redPin`是红色LED的引脚，`ylwPin`是黄色LED的引脚，`grnPin`是绿色LED的引脚。而且正如[图2-10](ch02.xhtml#ch02fig10)所示，红色引脚是13号引脚，黄色是12号引脚，绿色是11号引脚。现在，每当你在草图中使用引脚编号时，可以使用描述性的变量名代替。
- en: '**NOTE**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*For legibility, we* camel-cased *the variable names by capitalizing the* *`p`*
    *in* *`pin`*. *Camel-casing is a coding convention that allows you to separate
    words in a variable without using spaces.*'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了易读性，我们* 使用驼峰命名法 *为变量命名，* *将`p`* *大写，* *这就是*`pin`*的命名方式。* *驼峰命名法是一种编码约定，它允许你在变量中使用大写字母分隔单词，而无需使用空格。*'
- en: '**Write the setup() Function**'
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写setup()函数**'
- en: To continue writing the Stoplight sketch, add the `setup()` function in [Listing
    2-2](ch02.xhtml#ch02ex02).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续编写停车信号灯草图，请在[清单2-2](ch02.xhtml#ch02ex02)中添加`setup()`函数。
- en: '**LISTING 2-2:** `setup()` code for the Stoplight'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单2-2：** 停车信号灯的`setup()`代码'
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Just like the “Hello, world!” sketch in [Project 1](ch01.xhtml#ch01) (see “[The
    `setup()` Function](ch01.xhtml#ch01lev2sec9)” on page [30](ch01.xhtml#page_30)),
    this sketch configures the digital pins of the Arduino in `setup()` with the `pinMode()`
    function.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在[项目1](ch01.xhtml#ch01)中的“Hello, world!”草图一样（见第[30](ch01.xhtml#page_30)页中的“[setup()函数](ch01.xhtml#ch01lev2sec9)”），本草图在`setup()`中使用`pinMode()`函数来配置Arduino的数字引脚。
- en: This project uses three different digital pins, so the sketch has three separate
    `pinMode()` functions. Each function call includes a pin number as its variable
    ➊ (`redPin`, `ylwPin`, and `grnPin`) and the constant `OUTPUT` ➋. It uses `OUTPUT`
    because this sketch controls LEDs, which are output devices. We’ll introduce `INPUT`
    devices in [Project 4](ch04.xhtml#ch04).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用了三个不同的数字引脚，因此草图中有三个单独的`pinMode()`函数。每个函数调用包括一个引脚编号作为其变量➊（`redPin`、`ylwPin`和`grnPin`）和常量`OUTPUT`➋。使用`OUTPUT`是因为本草图控制的是LED，这些是输出设备。我们将在[项目4](ch04.xhtml#ch04)中介绍`INPUT`设备。
- en: '**Write the loop() Function**'
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**编写loop()函数**'
- en: Next comes the `loop()` function. Normal stoplights cycle from red to green
    to yellow and then back to red, so this project does, too. Copy the code from
    [Listing 2-3](ch02.xhtml#ch02ex03) into the `loop()` portion of your sketch.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`loop()`函数。普通的停车信号灯会从红色转到绿色再转到黄色，然后再回到红色，所以本项目也做到了这一点。将[清单2-3](ch02.xhtml#ch02ex03)中的代码复制到草图的`loop()`部分。
- en: '**LISTING 2-3:** `loop()` code for the Stoplight'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单2-3：** 停车信号灯的`loop()`代码'
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Stoplight will have only one light on at a time, to avoid confusing your
    hallway traffic and causing chaos. To maintain order, each time an LED is turned
    on, the other LEDs should be turned off. For example, if you wanted the red light
    to be on, you’d call the function `digitalWrite(redPin, HIGH)`, followed by `digitalWrite(ylwPin,
    LOW)` and `digitalWrite(grnPin, LOW)`. The first call writes `HIGH` to turn on
    the red LED on `redPin` (pin 13), and the other two calls write `LOW` to `ylwPin`
    and `grnPin` (pins 12 and 11) to turn off the yellow and green LEDs. Because the
    Arduino runs at 16 MHz (roughly one instruction per 16 millionth of a second),
    the time between these commands is on the order of a few microseconds. These three
    commands run so fast that you can assume they all happen at the same time. Finally,
    notice the function `delay(2000)`. This function pauses the sketch and keeps the
    red light on for 2,000 ms, or 2 seconds, before executing the next set of instructions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 停车信号灯一次只有一个灯亮，以避免混乱的走廊交通并防止造成混乱。为了保持秩序，每次点亮一个LED时，其他LED应该熄灭。例如，如果你想让红灯亮起，你会调用`digitalWrite(redPin,
    HIGH)`，接着调用`digitalWrite(ylwPin, LOW)`和`digitalWrite(grnPin, LOW)`。第一次调用会写入`HIGH`，使红色LED在`redPin`（第13号引脚）上点亮，另外两次调用会写入`LOW`，使`ylwPin`和`grnPin`（第12号和第11号引脚）上的黄色和绿色LED熄灭。由于Arduino运行在16
    MHz（大约每秒执行1600万次指令），这些命令之间的时间只有几微秒。因此，可以认为这三条命令几乎是同时执行的。最后，请注意`delay(2000)`函数。此函数会暂停草图，并保持红灯亮起2,000毫秒（即2秒），然后再执行下一组指令。
- en: The code for the yellow and green LEDs repeats the same concept, setting the
    corresponding pin to `HIGH` and the others to `LOW` and delaying for different
    lengths of time. For your own Stoplight, try changing the delay times to something
    a little more realistic for your hallway’s traffic. Remember that the value you
    pass to the `delay()` function is the amount of time you want the LED to stay
    on in milliseconds.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 黄色和绿色LED的代码重复了相同的概念，将相应的引脚设置为`HIGH`，其余引脚设置为`LOW`，并延迟不同的时间。对于你自己的红绿灯项目，试着调整延迟时间，使其更符合你走廊的交通情况。记住，你传递给`delay()`函数的值是LED保持亮起的时间，单位是毫秒。
- en: '**Upload the Sketch**'
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**上传草图**'
- en: After you’ve typed in all of the code, double-check that it looks like the code
    in [Listing 2-4](ch02.xhtml#ch02ex04), save your sketch, and upload it to your
    Arduino by clicking **Sketch ▸ Upload** or pressing CTRL-U. If the IDE gives you
    any errors, double-check your code to make sure that it matches the example code
    exactly. Your instructions should have the same spelling, capitalization, and
    punctuation, and don’t forget the semicolon at the end of each instruction.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在你输入完所有代码后，仔细检查它是否与[清单2-4](ch02.xhtml#ch02ex04)中的代码一致，保存你的草图，然后点击**草图 ▸ 上传**或按CTRL-U将其上传到你的Arduino。如果IDE给出了任何错误，请仔细检查你的代码，确保它与示例代码完全一致。你的指令应当保持相同的拼写、大小写和标点符号，并且不要忘记在每条指令的末尾加上分号。
- en: When everything works, your LEDs should turn on and off in a cycle that is similar
    to a real stoplight—starting with a red light, followed by a green light, and
    then a short yellow light before returning to the top of the `loop()` function
    and going back to red. Your sketch should continue to run this way indefinitely
    while the Arduino is powered.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切正常时，你的LED灯应当按照类似真实红绿灯的方式循环开关——首先是红灯，接着是绿灯，然后是短暂的黄灯，最后返回到`loop()`函数的顶部，再次变为红灯。只要Arduino持续供电，你的程序将不断以这种方式运行。
- en: '**LISTING 2-4:** Complete code for the Stoplight'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**清单 2-4：** 红绿灯的完整代码'
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Make the Stoplight Portable**'
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**让红绿灯变得便捷**'
- en: When your Arduino is connected to your computer, it’s receiving power through
    the USB port. But what if you want to move your project or show it around? You’ll
    need to add a portable power source—namely, a battery pack. The Arduino board
    has a barrel jack power port for plugging battery packs into, as well as an on-board
    voltage regulator that will accept any voltages from about 6 V to 18 V. There
    are many different battery adapters available, but we like using a 4 AA battery
    adapter for a lot of our projects, as shown in [Figure 2-12](ch02.xhtml#ch02fig12).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的Arduino连接到电脑时，它是通过USB端口接收电源的。但如果你想移动项目或者展示它呢？你需要添加一个便携式电源——也就是电池包。Arduino板有一个桶形插孔电源端口，可以插入电池包，并且配有一个板载电压调节器，能够接受大约6V到18V的电压。市场上有很多不同的电池适配器，但我们喜欢使用4节AA电池适配器，因为它非常适合我们的很多项目，如[图2-12](ch02.xhtml#ch02fig12)所示。
- en: '**FIGURE 2-12:** A 4 AA battery pack with a barrel jack adapter'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-12：** 配有桶形插孔适配器的4节AA电池包'
- en: '![Image](../images/fig2_12.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_12.jpg)'
- en: Unplug the USB cable from your computer, insert four AA batteries into your
    battery pack, and plug your portable battery pack into your Arduino, as shown
    in [Figure 2-13](ch02.xhtml#ch02fig13). If your batteries are charged, you can
    move your project around or embed it directly into a model stoplight!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 拔掉USB线，将四节AA电池放入电池包中，然后将便携式电池包插入Arduino，如[图2-13](ch02.xhtml#ch02fig13)所示。如果你的电池已充电，你就可以随意移动项目，或将它嵌入到一个模型红绿灯中！
- en: '**FIGURE 2-13:** Making the Stoplight portable by adding a battery pack'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-13：** 通过添加电池包使红绿灯变得便捷'
- en: '![Image](../images/fig2_13.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_13.jpg)'
- en: Now you’ll level up this project. In the next section, we’ll show you how to
    turn these LEDs into a model stoplight that you can mount in high-traffic areas
    of your house.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将提升这个项目。在接下来的部分中，我们将向你展示如何将这些LED变成一个可以安装在你家高流量区域的模型红绿灯。
- en: '**BUILD THE STOPLIGHT ENCLOSURE**'
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**制作红绿灯外壳**'
- en: Once your Arduino isn’t tethered to a computer, you can build any electronics
    project into a more permanent enclosure. The circuit on your breadboard is great,
    but you probably have to use your imagination to picture it as a stoplight. For
    maximum effect, the Stoplight just needs a good housing and lenses that will make
    the lights visible from a distance. The enclosure is optional if all you want
    to do is prototype, but we hope you’ll try it out.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的Arduino不再依赖计算机，你就可以将任何电子项目制作成更为永久的外壳。面包板上的电路很好，但你可能需要发挥想象力才能将它想象成一个红绿灯。为了达到最佳效果，红绿灯只需要一个好的外壳和能让灯光从远处可见的镜片。如果你仅仅是想进行原型制作，外壳是可选的，但我们希望你尝试一下。
- en: For this project, we’ll show you how to build a more realistic-looking stoplight
    with some cardboard or cardstock, but you can use any material that you happen
    to have lying around. Be creative! Our example, shown in [Figure 2-14](ch02.xhtml#ch02fig14),
    is made from some cardboard, ping-pong balls, and a bit of crafting skill.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将教你如何使用纸板或卡纸制作一个更逼真的红绿灯模型，但你也可以使用任何手头有的材料。发挥创造力！我们的示例，如[图 2-14](ch02.xhtml#ch02fig14)所示，是由一些纸板、乒乓球和一点手工技巧制成的。
- en: '**FIGURE 2-14:** An enclosure made from cardboard and ping-pong balls'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-14：** 用纸板和乒乓球制作的外壳'
- en: '![Image](../images/fig2_14.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_14.jpg)'
- en: You can either build a stoplight on your own using this project only as an inspiration
    or, if you want to reproduce this project exactly as you see it here, download
    the ZIP file of templates and sketches at *[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)*.
    Each project in this book includes templates that you can print, trace, and hand-cut
    the old-fashioned way with a craft knife and a metal ruler.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以单独根据这个项目的灵感制作一个红绿灯，或者如果你想完全复制这个项目，就下载[https://www.nostarch.com/arduinoinventor/](https://www.nostarch.com/arduinoinventor/)上的ZIP文件，包括模板和草图。书中的每个项目都附有可以打印、描绘和用工艺刀与金属尺手工切割的模板。
- en: '**NOTE**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: '*If you’re lucky enough to have access to a cutting machine like a Cricut,
    a Silhouette Cameo, or a laser cutter, these files should easily translate to
    those tools, too.*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你有幸可以使用像Cricut、Silhouette Cameo或激光切割机这样的切割机器，这些文件也应该能轻松适用于这些工具。*'
- en: Extract the [Project 2](ch02.xhtml#ch02) files from the ZIP file, and print
    the Stoplight template PDF at full size if you’d like a cutting guide. With your
    templates in hand, collect the other items listed in “[Other Materials and Tools](ch02.xhtml#ch02lev2sec2)”
    on page [39](ch02.xhtml#page_39) and start building.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 从ZIP文件中提取[项目 2](ch02.xhtml#ch02)文件，如果你需要切割指南，可以将红绿灯模板PDF按实际大小打印出来。拿到模板后，收集页面[39](ch02.xhtml#page_39)中“[其他材料和工具](ch02.xhtml#ch02lev2sec2)”里列出的其他物品，开始制作。
- en: '**Cardboard Construction**'
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**纸板制作**'
- en: First, cut out the templates, shown in [Figure 2-15](ch02.xhtml#ch02fig15).
    In our template, the housing body is a single piece of cardboard that is meant
    to be cut out, scored, and folded.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，剪下模板，如[图 2-15](ch02.xhtml#ch02fig15)所示。在我们的模板中，外壳主体是一个单一的纸板片，设计为切割、压痕并折叠。
- en: Trace the template onto your cardboard, and make careful note of the dashed
    lines, perhaps by drawing them on your cardboard in a different color. You’ll
    score the cardboard along those lines to bend it, so whatever you do, don’t cut
    along them yet.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将模板描绘到纸板上，并仔细注意虚线的位置，可以用不同的颜色在纸板上标出虚线。你将沿着这些线进行压痕，所以千万不要沿着这些线切割。
- en: '**FIGURE 2-15:** Enclosure template for the Stoplight (not full size)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-15：** 红绿灯外壳模板（非实际大小）'
- en: '![Image](../images/fig2_15.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_15.jpg)'
- en: Once you have everything traced, cut out the stoplight pieces along the solid
    lines using a craft knife and a metal ruler, as shown in [Figure 2-16](ch02.xhtml#ch02fig16).
    If you’ve never used a craft knife before, be sure to read “[Using Craft Knives
    Safely](ch02.xhtml#ch02sb01)” on page [56](ch02.xhtml#page_56). Score the cardboard
    for the housing along each dotted line, on the exterior side of the cardboard.
    When scoring cardboard, you take a couple of shallow passes with the craft knife
    (don’t cut all the way through). Don’t score the shades yet.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了所有的描绘，沿着实线使用工艺刀和金属尺剪下红绿灯的各个部分，如[图 2-16](ch02.xhtml#ch02fig16)所示。如果你从未使用过工艺刀，请务必阅读页面[56](ch02.xhtml#page_56)中的“[安全使用工艺刀](ch02.xhtml#ch02sb01)”一节。在纸板上为外壳沿每条虚线进行压痕，压痕应在纸板的外侧进行。压痕时，用工艺刀进行几次浅切（不要完全切透）。暂时不要压痕遮光罩部分。
- en: '**FIGURE 2-16:** Scoring along the template with a craft knife and metal ruler'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-16：** 用工艺刀和金属尺沿模板划线'
- en: '![Image](../images/fig2_16.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_16.jpg)'
- en: '**USING CRAFT KNIVES SAFELY**'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全使用工艺刀**'
- en: You’ll use craft knives a lot in this book, so it’s important to know how to
    safely use them. Just like any tool, when used incorrectly, craft knives like
    the one here can cause injury.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在本书中经常使用工艺刀，因此了解如何安全使用它们非常重要。就像任何工具一样，使用不当时，像这种工艺刀也可能导致受伤。
- en: '![Image](../images/056fig01.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/056fig01.jpg)'
- en: 'Here are a few tips for using craft knives safely:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用工艺刀的安全小贴士：
- en: • Always pull the blade when slicing through sheet materials. Pushing or forcing
    the blade in any other direction raises the potential for slipping or breaking
    the blade.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: • 切割板材时，始终拉动刀片。向其他方向推或强行操作刀片会增加刀片滑脱或断裂的风险。
- en: • Be patient. Don’t try to cut through the entire thickness of the material
    in a single pass. Make multiple passes with medium pressure. This will save your
    blade and also produce a cleaner finished product in the end.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: • 耐心点。不要试图在一次切割中穿透整个材料的厚度。用适中的压力进行多次切割。这不仅能保护刀片，还能最终产生更干净的成品。
- en: • Use a straightedge made of metal, such as a metal ruler. If you use a wooden
    or plastic ruler as a straightedge, you run a higher chance of your blade catching
    the straightedge, rebounding off the material, and ultimately moving toward your
    hand.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: • 使用金属材质的直尺作为直线工具。例如金属尺。如果使用木制或塑料尺，刀片有更大的机会卡住直尺，反弹并最终朝着你的手移去。
- en: • Keep your fingers out of the way. This may seem obvious, but accidents happen.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: • 保持手指远离刀片。这看起来显而易见，但意外时常发生。
- en: • If your knife starts to roll off your desk, let it fall, and just pick it
    up off the floor. If you reach for it and catch it before it falls, you run the
    risk of stabbing yourself in the hand. Ouch!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: • 如果你的刀开始从桌面上滚落，任其掉落，然后从地板上捡起来。如果你在刀掉落前伸手去接，可能会刺伤自己的手。哎呀！
- en: • Finally, use sharp, new, and intact blades. If a blade breaks, replace it.
    If a blade is dull, replace it. Cutting through paper and cardboard dulls blades
    very quickly. Keep a supply of extra blades around, and if it’s starting to get
    hard to cut, replace the blade.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: • 最后，使用锋利、新的和完好的刀片。如果刀片断裂，请更换它。如果刀片钝了，也需要更换。切割纸张和纸板会迅速使刀片变钝。保持备用刀片，并且如果开始切割困难，及时更换刀片。
- en: Once you have cut out your cardboard enclosure, add the mounting holes for the
    three LEDs; these should be at the little solid-lined circles inside the big dashed
    circles. One easy option is to carefully press a sharp pencil through the cardboard
    to make the holes. For cleaner holes, however, we suggest using a 3/16-inch drill
    bit and power drill to make holes in the cardboard, as in [Figure 2-17](ch02.xhtml#ch02fig17).
    The LEDs are about 5 mm (about 0.197 inches) in diameter. You want the hole to
    be a nice, tight fit. So, a 3/16-inch hole (0.1875 inches) is perfect for making
    the fit snug for the LED.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你切出了纸板外壳，添加三个LED的安装孔；这些孔应位于大虚线圈内的小实线圆圈处。一个简单的做法是用锋利的铅笔轻轻按压纸板以打孔。然而，为了获得更干净的孔，我们建议使用3/16英寸的钻头和电钻在纸板上打孔，如[图2-17](ch02.xhtml#ch02fig17)所示。LED的直径大约是5毫米（约0.197英寸）。你希望孔的大小恰到好处，因此3/16英寸（0.1875英寸）的孔非常适合LED的紧密安装。
- en: Be careful when completing this step, and make sure to watch where your fingers
    and hands are relative to the drill bit. You don’t want to drill into yourself!
    You can also use the drill bit without the drill and manually spin it through
    the cardboard if you don’t have a drill or aren’t comfortable using one.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步时要小心，确保注意手指和手的位置，避免钻头伤到自己！如果你没有电钻或不习惯使用电钻，也可以不用电钻，手动旋转钻头穿透纸板。
- en: '**FIGURE 2-17:** Drilling holes for the LEDs'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-17：** 为LED打孔'
- en: '![Image](../images/fig2_17.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_17.jpg)'
- en: Once you have the holes drilled, remove the three LEDs from your breadboard
    and insert them through the back side of the cardboard, as shown in [Figure 2-18](ch02.xhtml#ch02fig18).
    Remember that standard traffic lights are usually ordered red, yellow, and green
    from the top to the bottom. Pay attention to where the LEDs connect on the board,
    because we’re going to reconnect them at the end.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打好孔，将三个LED从面包板上取下，从纸板的背面插入，如[图2-18](ch02.xhtml#ch02fig18)所示。记住，标准的交通信号灯通常是从上到下依次排列为红、黄、绿。注意LED在电路板上的连接位置，因为我们最后会重新连接它们。
- en: '**FIGURE 2-18:** All three LEDs pressed into the cardboard'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-18：** 所有三颗LED灯已压入纸板中'
- en: '![Image](../images/fig2_18.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_18.jpg)'
- en: Next, bend the cardboard along the scored lines, as shown in [Figure 2-19](ch02.xhtml#ch02fig19).
    Bend the vertical sides ➊ toward the interior, and then do the same with the top
    and bottom sides ➋ and the tabs ➌. (The sides and tabs are labeled in [Figure
    2-15](ch02.xhtml#ch02fig15).)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如[图2-19](ch02.xhtml#ch02fig19)所示，沿着刻痕将纸板弯曲。将垂直侧面➊朝内弯曲，然后对顶部和底部侧面➋以及标签➌进行同样操作。（侧面和标签在[图2-15](ch02.xhtml#ch02fig15)中有标注。）
- en: '**FIGURE 2-19:** Prefolding the scored cardboard to form an enclosure for the
    Stoplight'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-19：** 预折叠刻痕纸板，形成交通信号灯的外壳'
- en: '![Image](../images/fig2_19.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_19.jpg)'
- en: Position the tabs ➌ inside the vertical sides ➊, and glue them in place as shown
    in [Figure 2-20](ch02.xhtml#ch02fig20). You can use hot glue, tape, or craft glue—we
    prefer hot glue because it’s easy to work with, sets quickly, and has a pretty
    strong bond.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将标签➌放入垂直侧面➊内，并按照[图2-20](ch02.xhtml#ch02fig20)所示将其粘合到位。你可以使用热胶、胶带或工艺胶——我们推荐使用热胶，因为它易于操作、快速固化且粘合力较强。
- en: Repeat this for the top and bottom corners. You should end up with a shallow
    rectangular box with an open back.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 重复此步骤，用于上下角。你将最终得到一个浅的矩形盒子，后部保持开口。
- en: '**FIGURE 2-20:** Folding and gluing the cardboard housing'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-20：** 折叠和粘合纸板外壳'
- en: '![Image](../images/fig2_20.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_20.jpg)'
- en: '**Make the Stoplight Lenses**'
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作交通信号灯透镜**'
- en: The Stoplight’s lenses are made from ping-pong balls cut in half, but you can
    use anything that’s moderately translucent.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 交通信号灯的透镜是用乒乓球切成两半制成的，但你也可以使用任何适度透明的物品。
- en: If you’re using ping-pong balls or something similar, carefully cut two balls
    in half. When doing this, place the ball against a cutting mat or thick piece
    of cardboard and hold it firmly at the sides with your fingertips. Carefully push
    the knife blade down toward the mat and into the ping-pong ball (making sure the
    blade isn’t pointing at you or your hand) to make an incision as shown in [Figure
    2-21](ch02.xhtml#ch02fig21). Rotate the ping-pong ball and repeat until you’ve
    cut all the way through. Make sure to keep your fingers away from the blade, and
    always cut on a cutting mat or a piece of cardboard.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是乒乓球或类似的物品，小心地将两个乒乓球切成两半。在切割时，将球放在切割垫或厚纸板上，并用指尖牢牢按住两侧。小心地将刀片推向垫子并切入乒乓球（确保刀片没有指向你或你的手），如[图2-21](ch02.xhtml#ch02fig21)所示，进行切割。旋转乒乓球并重复操作，直到完全切割穿透。确保手指远离刀片，并始终在切割垫或纸板上切割。
- en: '**FIGURE 2-21:** Safely cutting a ping-pong ball'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-21：** 安全切割乒乓球'
- en: '![Image](../images/fig2_21.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_21.jpg)'
- en: Once you have three ping-pong ball halves (you’ll have four; one’s an extra
    to use in future projects or as a small hat for your favorite stuffed animal),
    secure them with a dab of hot glue as shown in [Figure 2-22](ch02.xhtml#ch02fig22).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了三半个乒乓球（你将有四个，一个是多余的，可以用于未来的项目或作为你最喜欢的填充玩具的小帽子），如[图2-22](ch02.xhtml#ch02fig22)所示，用热胶将它们固定在一起。
- en: '**FIGURE 2-22:** The enclosure with ping-pong balls as lenses'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-22：** 使用乒乓球作为透镜的外壳'
- en: '![Image](../images/fig2_22.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_22.jpg)'
- en: '**Make the Shades**'
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**制作阴影**'
- en: Finally, add the shades to the Stoplight. For a nice curve, make a number of
    parallel scores, about 1/8 inch apart, as shown in [Figure 2-23](ch02.xhtml#ch02fig23).
    There are example score lines in the template, so you can follow those. After
    making all of your scores, bend each shade into a curve, as shown in [Figure 2-24](ch02.xhtml#ch02fig24).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为交通信号灯添加阴影。为了得到漂亮的曲线，做出多条平行的刻痕，间距约为1/8英寸，如[图2-23](ch02.xhtml#ch02fig23)所示。模板中有刻痕示例，你可以参照这些进行操作。完成所有刻痕后，将每个阴影弯曲成曲线，如[图2-24](ch02.xhtml#ch02fig24)所示。
- en: '**FIGURE 2-23:** Scoring a shade'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-23：** 刻痕阴影'
- en: '![Image](../images/fig2_23.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_23.jpg)'
- en: '**FIGURE 2-24:** Bending the shade into a curve'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**图2-24：** 将阴影弯曲成曲线'
- en: '![Image](../images/fig2_24.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_24.jpg)'
- en: Once you have the shades bent and shaped to your liking, fit them into the housing
    just above each lens, as shown in [Figure 2-25](ch02.xhtml#ch02fig25), and then
    glue them in place. If you’re going for a more finished or realistic look, you
    can spray paint the housing black. Make sure you either remove the lenses or cover
    them with masking tape first so that they don’t get coated in spray paint.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你把遮光罩弯曲并塑形到满意的样子，就可以将它们安装到每个透镜上方的外壳中，如[图 2-25](ch02.xhtml#ch02fig25)所示，然后用胶水固定。如果你想要更完美或更逼真的外观，可以将外壳喷成黑色。请确保在喷漆之前，要么将透镜取下，要么用遮蔽胶带将其遮住，以免它们被喷漆覆盖。
- en: '**FIGURE 2-25:** Fitting a shade into the housing'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-25：** 将遮光罩安装到外壳中'
- en: '![Image](../images/fig2_25.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_25.jpg)'
- en: '**Mount the LEDs and Arduino**'
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**安装 LED 灯和 Arduino**'
- en: All you have left to do is to connect the LEDs from the new enclosure to your
    Arduino. First, use two male-to-female jumper wires (SparkFun PRT-09385) to extend
    each of the LEDs. You’ll need a total of six of these jumper wires. Simply plug
    each LED leg into the female end of the jumper wire. To keep things organized,
    we like to use black wires for the negative (shorter) leg and colored wires for
    the positive (longer) leg, as shown in [Figure 2-26](ch02.xhtml#ch02fig26).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要将新外壳中的 LED 灯连接到你的 Arduino 上。首先，使用两根公对母跳线（SparkFun PRT-09385）延长每个 LED
    灯。你将需要六根这样的跳线。只需将每根 LED 的引脚插入跳线的母头即可。为了保持线路整洁，我们建议使用黑色线材连接负极（较短的引脚），而使用彩色线材连接正极（较长的引脚），如[图
    2-26](ch02.xhtml#ch02fig26)所示。
- en: '**FIGURE 2-26:** Attaching jumper wires to the LEDs'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-26：** 连接跳线到 LED 灯'
- en: '![Image](../images/fig2_26.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_26.jpg)'
- en: With the jumper wires connected to the LEDs, plug the male end into the breadboard
    in the same place where the LED came out, as shown in [Figure 2-27](ch02.xhtml#ch02fig27).
    Again, pay attention to which LED goes where. If you don’t remember, consult the
    original diagram in [Figure 2-10](ch02.xhtml#ch02fig10).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将跳线连接到 LED 灯后，将公头插入面包板中与 LED 灯所在位置相同的插孔，如[图 2-27](ch02.xhtml#ch02fig27)所示。再次提醒，注意每个
    LED 灯的位置。如果不记得了，可以参考原始图示[图 2-10](ch02.xhtml#ch02fig10)。
- en: '**FIGURE 2-27:** Inserting the male end of each jumper wire into the breadboard'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-27：** 将每根跳线的公头插入面包板'
- en: '![Image](../images/fig2_27.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_27.jpg)'
- en: Check to make sure your connections work by plugging in the Arduino to your
    computer or to a battery pack. If one of the lights isn’t working, try jiggling
    the connections or double-checking that the wires are plugged into the correct
    row on the breadboard.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 Arduino 插入电脑或电池包，检查你的连接是否正常工作。如果某个灯不亮，尝试轻轻晃动连接处，或者再检查一下跳线是否插入了面包板上的正确位置。
- en: You can either leave the Arduino and breadboard outside the Stoplight housing
    or tack them inside the housing with glue or double-sided tape. Whatever you decide,
    when you’re done, power up your Stoplight, and go find a busy hallway intersection
    in need of traffic safety.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 Arduino 和面包板留在交通信号灯外面，或者用胶水或双面胶将它们固定在外壳内部。不管你选择哪种方式，完成后，打开你的交通信号灯，去找一个需要交通安全管理的繁忙走廊交叉口。
- en: '[Figure 2-28](ch02.xhtml#ch02fig28) shows the finished Stoplight in all its
    glory.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 2-28](ch02.xhtml#ch02fig28)展示了完成的交通信号灯，尽显其光彩。'
- en: '**FIGURE 2-28:** Finished Stoplight project'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-28：** 完成的交通信号灯项目'
- en: '![Image](../images/fig2_28.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/fig2_28.jpg)'
- en: '**GOING FURTHER**'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**更进一步**'
- en: The concepts you saw while building the Stoplight, such as timing the control
    of output (LEDs), can be applied to a number of different uses in your house and
    life. Here are a couple of suggestions for adapting the Stoplight.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作交通信号灯的过程中，你学到的一些概念，比如控制输出（LED 灯）的定时，可以应用到你家里和生活中的许多不同场景。以下是对交通信号灯进行调整的几个建议。
- en: '**Hack**'
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**改进**'
- en: The basic concept of a stoplight is all about timing. When else would a timer
    be useful? What about changing the code to help you time frying an egg? You could
    rework the Stoplight so that the red LED is lit while the egg is still in a state
    of “iffy” or “rare” doneness, the yellow LED lights when it’s almost cooked the
    way you like it, and then the green LED lights when the egg is done.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 交通信号灯的基本概念就是定时。什么时候定时器会有用呢？比如你可以修改代码来帮助你控制煎蛋的时间？你可以将交通信号灯进行改造，当蛋的熟度还处于“生”或“半熟”时，红灯亮起；当蛋快煎熟时，黄灯亮起；蛋煎熟时，绿灯亮起。
- en: We can’t give you the timing, as we probably have different preferences for
    how we like our eggs cooked. There are also a number of variables that will affect
    the timing, like the temperature, the type of pan, and the size of the egg. You’ll
    have to figure that all out on your own.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能给你具体的时间，因为我们每个人对鸡蛋烹饪的喜好不同。还有许多变量会影响烹饪时间，比如温度、锅具类型和鸡蛋的大小。你得自己摸索出合适的时间。
- en: 'In the code, you’d need to work with pretty big numbers for the delay, since
    it’s measured in milliseconds. To set a delay in minutes, all you need is a little
    multiplication. Remember that 1,000 ms equals 1 second; multiply by 60, and you’ll
    find that 60,000 ms equals 60 seconds, or 1 minute. For a delay of 3 minutes,
    you can multiply 3 by 60,000 directly in the `delay()` function, like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，你需要使用比较大的数字来设置延时，因为它是以毫秒为单位的。要设置分钟级别的延时，你只需要做一点乘法运算。记住，1,000毫秒等于1秒；再乘以60，你就能得出60,000毫秒等于60秒，或者1分钟。对于3分钟的延时，你可以直接在`delay()`函数中将3乘以60,000，如下所示：
- en: '[PRE5]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You may be wondering how long you can set the `delay()` function for. The data
    type that `delay()` receives is an *unsigned long*, which is any number that falls
    in the range of 0 to 4,294,967,295\. So the maximum delay is 1,193 hours or so.
    Pretty cool! Knowing this, is there anything else you’d want to time with the
    `delay()` function?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道`delay()`函数的最大延时时间是多少。`delay()`接收的数据类型是*无符号长整型*，它的值范围是从0到4,294,967,295。所以最大延时大约是1,193小时。相当酷吧！知道这一点后，你是否想到其它用`delay()`函数可以计时的事情？
- en: '**Modify**'
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '**修改**'
- en: If you’re looking to make this project more permanent and sturdy, you can solder
    wires to the LEDs instead of using the male-to-female jumpers. If you’ve never
    soldered before, turn to “[How to Solder](app01.xhtml#app01lev1sec2)” on page
    [302](app01.xhtml#page_302) for some soldering instructions before you start.
    You’ll need to snip the end off of a male-to-male jumper wire, strip the insulation
    back about 1/2 inch using wire strippers, and then solder the stripped end to
    each leg of a trimmed LED, as shown in [Figure 2-29](ch02.xhtml#ch02fig29). Notice
    that we twisted the wire around the leg of the LED to hold it securely while soldering.
    After soldering, the connection will be more durable, and you’ll be able to use
    the LEDs for other projects since the other end is still a male jumper.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让这个项目更加持久和坚固，你可以选择将导线焊接到LED上，而不是使用公对母跳线。如果你从未焊接过，可以参考第[302](app01.xhtml#page_302)页的“[如何焊接](app01.xhtml#app01lev1sec2)”部分，在开始前学习一些焊接的基本技巧。你需要剪掉一根公对公跳线的末端，使用剥线钳将绝缘层剥离大约1/2英寸，然后将剥去的部分焊接到修剪过的LED的每个引脚上，正如[图
    2-29](ch02.xhtml#ch02fig29)所示。注意，我们在焊接时将导线绕在LED的引脚上，以确保它牢固。焊接后，连接会更加耐用，而且你还可以在其他项目中使用这些LED，因为另一端仍然是公头跳线。
- en: '**FIGURE 2-29:** Soldering a cut jumper wire to an LED'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2-29：** 将切割的跳线焊接到LED上'
- en: '![Image](../images/fig2_29.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/fig2_29.jpg)'
- en: Though this project looks impressive, the programming and hardware are pretty
    simple. As you read about sensors and logic over the next few chapters, we encourage
    you to think back to this project and brainstorm ways you can elaborate on it
    with what you learn.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个项目看起来很令人印象深刻，但编程和硬件其实非常简单。在接下来的几章中，阅读关于传感器和逻辑的内容时，我们鼓励你回顾这个项目，并思考如何利用你所学的内容对其进行扩展。
