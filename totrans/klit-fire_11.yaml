- en: Conclusion
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The hard part about legacy modernization is the system around the system. The
    organization, its communication structures, its politics, and its incentives are
    all intertwined with the technical product in such a way that to move the product,
    you must do it by turning the gears of this other, complex, undocumented system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 传统现代化的难点在于围绕系统的系统。组织、其沟通结构、政治和激励机制与技术产品交织在一起，以至于要推动产品发展，必须通过转动这个复杂且未记录的系统的齿轮来实现。
- en: Part of the reason legacy modernizations fail so often is that human beings
    are incentivized to mute or otherwise remove feedback loops that establish accountability.
    We are often unable to stop this because we insist on talking about that problem
    as a moral failing instead of an unconscious bias. Engineering organizations that
    maintain a separation between operations and development, for example, inevitably
    find that their development teams design solutions so that when they go wrong,
    they impact the operations team first and most severely. Meanwhile, their operations
    team builds processes that throw barriers in front of development, passing the
    negative consequences of that to those teams. These are both examples of muted
    feedback loops. The implementers of a decision cannot feel the impacts of their
    decisions as directly as some other group.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 传统现代化失败的部分原因是，人类往往被激励去静音或去除建立责任制的反馈循环。我们通常无法停止这种行为，因为我们坚持将这个问题看作道德上的失败，而非无意识的偏见。例如，保持运维与开发之间分离的工程组织，最终发现他们的开发团队会设计出这样的解决方案：当出问题时，首先且最严重地影响到运维团队。与此同时，运维团队则构建了会阻碍开发的流程，将负面后果传递给开发团队。这些都是静音反馈循环的例子。决策的实施者无法像其他团队那样直接感受到决策的影响。
- en: One of the reasons the DevOps and SRE movements have had such a beneficial effect
    on software development is that they seek to re-establish accountability. If product
    engineering teams play a role in running and maintaining their own infrastructure,
    they are the ones who feel the impact of their own decisions. When they build
    something that doesn’t scale, they are the ones who are awakened at 3 am with
    a page. Making software engineers responsible for the health of their infrastructure
    instead of a separate operations team unmutes the feedback loop.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 和 SRE 运动对软件开发产生如此有益影响的原因之一是它们旨在重新确立责任制。如果产品工程团队参与运行和维护自己的基础设施，他们就是那些感受到自己决策影响的人。当他们构建的东西无法扩展时，他们会在凌晨
    3 点收到警报。让软件工程师负责基础设施的健康，而不是由独立的运维团队负责，这样可以让反馈循环变得更加清晰。
- en: But anyone who has ever tried to run an SRE or DevOps team will tell you that
    maintaining the expectation that product engineering teams should be responsible
    for their infrastructure is easier said than done. There will always be a need
    for specialists on the infrastructure side of things—either because the organization
    is running its own data centers and needs the hardware expertise or because the
    tools that engineers interact with to maintain their infrastructure need themselves
    to be maintained—and, therefore, there is always someone to dump responsibilities
    on.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但任何曾经尝试运营 SRE 或 DevOps 团队的人都会告诉你，让产品工程团队对其基础设施负责的期望，确实说起来容易做起来难。基础设施方面始终需要专业人才——无论是因为组织自己运营数据中心并需要硬件专长，还是因为工程师在维护基础设施时使用的工具本身也需要维护——因此，总会有人把责任推给他们。
- en: People do not mute feedback loops because they do not care. They mute feedback
    loops because human beings can hold only so much information in their minds at
    one point. Keeping a feedback loop open means listening for information from it,
    which means first considering what information might come back and how to interpret
    it. Developers mute operations because they usually do not understand the details
    of how infrastructure works. Engineers typically mute the feedback loop from the
    business side of the organization, because that feedback is delivered in metrics
    they’re not trained on and struggle to extract insight from. Each group is capable
    of learning the language of the other, but how many disciplines should a single
    person be expected to master to do her job? When running a system, engineers must
    consider resource usage, capacity projections, test coverage, inheritance structure,
    lines of code, and more. Is it any wonder most restrict their scope to the massive
    technical complexity directly relevant to what their job actually is?
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 人们并不是因为不在乎而静音反馈环路。人们之所以静音反馈环路，是因为人类一次只能在大脑中处理有限的信息。保持反馈环路开启意味着要倾听来自它的信息，这意味着首先要考虑可能回传的信息以及如何解读这些信息。开发人员静音操作通常是因为他们通常不了解基础设施如何运作的细节。工程师通常会静音来自业务方面的反馈环路，因为这些反馈以他们没有接受过培训的指标形式传递，他们很难从中提取洞察力。每个群体都有能力学习另一方的语言，但一个人应该掌握多少学科才能完成她的工作呢？在运行系统时，工程师必须考虑资源使用、容量预测、测试覆盖率、继承结构、代码行数等更多因素。难怪大多数人将自己的工作范围限制在与其实际工作直接相关的庞大技术复杂性之内。
- en: 'A high-functioning organization cannot have all feedback loops open all the
    time. It must decide which loops have the biggest impact on operational excellence.
    Throughout this book, I have emphasized thinking about modernization projects
    not in terms of technical correctness but in terms of value add because it re-establishes
    the most important feedback loop: Is the technology serving the needs of its users?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个高效运作的组织不能始终保持所有反馈环路开启。它必须决定哪些反馈环路对运营卓越的影响最大。在本书中，我强调了从增值的角度来思考现代化项目，而非从技术正确性的角度，因为这重新建立了最重要的反馈环路：这项技术是否服务于用户的需求？
- en: Meetings, reports, and dialogues are the least efficient feedback loops. Feedback
    loops are most effective when the operator *feels* the impact, rather than just
    hearing about it. That’s because people are naturally inclined to misinterpret
    information to suit what they already want to believe. It is more difficult to
    do that when the feedback is delivered in the form of inconvenience, disruption,
    interruptions, and additional work.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 会议、报告和对话是效率最低的反馈环路。反馈环路最有效的方式是当操作员*感受到*其影响时，而不仅仅是听说其影响。这是因为人们天生倾向于误解信息，以符合他们已经想要相信的东西。当反馈以不便、干扰、打断和额外工作等形式传递时，人们更难做出这种曲解。
- en: Nevertheless, since we cannot have all feedback loops open all the time, traditional
    communication can help fill in where impacts are not serious enough to warrant
    an open loop. Designing a modernization effort is about iteration, and iteration
    is about feedback. Therefore, the real challenge of legacy modernization is not
    the technical tasks, but making sure the feedback loops are open in the critical
    places and communication is orderly everywhere else.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，由于我们不能始终保持所有反馈环路开启，传统沟通可以在影响不足以需要开启环路时起到填补作用。设计现代化工作是一个迭代的过程，而迭代本身就是关于反馈的。因此，遗留系统现代化的真正挑战并不是技术任务，而是确保在关键地方保持反馈环路开启，并且在其他地方确保沟通有序。
- en: As a general rule, the discretion to make decisions should be delegated to the
    people who must implement those decisions. If you are not contributing code or
    being woken up in the middle of the night to answer a page, have the good sense
    to remember that no matter how important your job is, you are not the implementor.
    You do not operate the system, but you can find the operators and make sure they
    have the air cover they need to be successful. Empower the operators.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，决策的裁量权应该委托给那些必须执行这些决策的人。如果你不是在贡献代码或在深夜被叫醒回答故障警报，请记住，不论你的工作有多重要，你都不是实施者。你不操作系统，但你可以找到操作员，并确保他们有成功所需的支持。授权操作员。
- en: It should go without saying that this requires trust. Teams are ultimately governed
    by trust. Leaders of large organizations do not like hearing this, because it
    means they will be held accountable for outcomes that are beyond their control.
    It is easier to cling to a popular strategy that offers guarantees. That way,
    if it fails, it can be passed off as a freak occurrence no leader could have prevented.
    There are no silver bullets with legacy modernization; every technique in this
    book could fail under the wrong conditions. I’ve done my best to describe the
    right conditions, and the vulnerabilities of each approach, but I am limited by
    my knowledge and experience, which are not (and never will be) infinite. The person
    in the best position to find a working strategy is the person on the ground watching
    the gears of the system turn.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该不言而喻，这需要信任。团队最终是由信任所主导的。大组织的领导者不喜欢听到这一点，因为这意味着他们将对超出自己控制范围的结果负责。依附于提供保证的流行策略更容易。这样，如果失败了，可以将其归结为不可避免的偶然事件，没有任何领导者能预防。这是遗留系统现代化的现实，没有灵丹妙药；本书中的每一种技术在不适当的条件下都可能失败。我已经尽力描述了正确的条件和每种方法的脆弱性，但我的知识和经验是有限的（并且永远不会是无限的）。最有可能找到有效策略的人，是那些在现场观察系统运转的人。
- en: 'Dealing with this reality gets easier when you accept failure. Failure is inevitable
    when attempting to change complex systems in production. There are too many moving
    parts, too many unknowns, and too much that needs to be fixed. Getting every single
    decision right is impossible. Modern engineering teams use stats like service
    level objectives, error budgets, and mean time to recovery to move the emphasis
    away from avoiding failure and toward recovering quickly. Don’t forget: a perfect
    record can always be broken, but resilience is an accomplishment that lasts. Embracing
    failure as an organization diminishes the risk of empowering the operator and
    gets better performance from engineers.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 接受失败后，面对这种现实会变得更容易。试图改变生产中的复杂系统时，失败是不可避免的。系统中有太多的移动部分，太多未知的因素，太多需要修复的地方。让每一个决策都正确是不可能的。现代工程团队使用服务水平目标、错误预算和平均恢复时间等统计数据，将重点从避免失败转移到快速恢复上。不要忘记：完美的记录总是会被打破，但韧性是一项持久的成就。作为一个组织接受失败，能够减少赋能操作员的风险，并能从工程师那里获得更好的表现。
- en: We cannot completely eliminate failure, because there’s a level of complexity
    where a single person—no matter how intelligent—cannot comprehend the full system.
    With legacy systems, we have an additional complication in the fact that some
    context of the system has been lost. Requirements, assumptions, and the technical
    limitations of the time are all undocumented. There may be abstractions buried
    in the platform that trip us up. Modernization teams need to rediscover the requirements
    and assumptions of the original system and update them for the new system, but
    there are limitations on how much understanding even the best modernization team
    can excavate. Ultimately, old software cannot be used as a specification for a
    new version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法完全消除失败，因为在某个复杂度级别上，一个人——无论多么聪明——都无法理解整个系统。对于遗留系统，我们还有一个额外的复杂性，那就是系统的一些上下文已经丢失。需求、假设和当时的技术限制都没有文档化。平台中可能有一些抽象层次会让我们绊倒。现代化团队需要重新发现原系统的需求和假设，并将其更新到新系统中，但即使是最优秀的现代化团队，也有限制于能够挖掘出多少理解。归根结底，旧的软件不能作为新版本的规格说明。
- en: Technology, at its core, is an artifact of human thought. So when modernizing
    old technology, what humans think matters quite a lot. Software engineers are
    smart, but they fall victim to trends and fads the same as any other profession.
    Pay attention to how they are incentivized. What earns them the acknowledgment
    of their peers? What gets people seen is what they will ultimately prioritize,
    even if those behaviors are in open conflict with the official instructions they
    receive from management. Technology advances in cycles with old paradigms constantly
    being dusted off to capture neglected segments of the market. Newer is not necessarily
    better. Good technology isn’t about having the most modern, most scalable, fastest,
    or most secure implementation; it’s about serving the needs of the user.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 技术，本质上，是人类思维的产物。因此，在现代化旧技术时，人类的思维至关重要。软件工程师很聪明，但他们和其他职业一样，会受到趋势和时尚的影响。要关注他们的激励机制。是什么让他们获得同行的认可？是什么让他们被关注，他们最终会优先考虑这些，即使这些行为与管理层的正式指示公开冲突。技术发展是一个周期过程，旧的范式不断被翻新以捕捉被忽视的市场细分。更新不一定意味着更好。好的技术并不是拥有最现代、最具可扩展性、最快或最安全的实现，而是服务于用户的需求。
- en: But, we also want a world where software engineers strive to make technology
    faster, better, and more secure. The only way we get both technology that serves
    the user and strives to improve continuously is by defining success up front.
    What does it mean to bring value, and how do we know when value has increased?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们也希望有一个软件工程师努力让技术变得更快、更好、更安全的世界。我们获得既能服务用户又不断追求改进的技术的唯一方式，是事先定义成功的标准。什么是创造价值，如何知道价值何时增加？
- en: In the end, technology is never finished being built. The legacy modernization
    projects of today were the finished systems of yesterday. Computer systems cannot
    be expected to go unchanged for decades, because rarely is a computer isolated
    from the outside world. The inputs will change, the output methods will change,
    the networks and protocols will change, and the program that doesn’t change becomes
    a time bomb.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，技术从未完成建设。今天的遗留现代化项目是昨天的已完成系统。计算机系统不能期望几十年不发生变化，因为计算机很少能够与外界隔离。输入会变化，输出方式会变化，网络和协议会变化，而不变化的程序最终会变成定时炸弹。
- en: The best way to handle legacy modernization projects is not to need them in
    the first place. If the appropriate time and resources are budgeted for it, systems
    can be maintained in such a way that they evolve with the industry. The organizations
    that accomplish this ultimately understand that the organization’s scale is the
    upper bound of system complexity. Systems that are more complex than the team
    responsible for them can maintain are neglected and eventually fall apart.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 处理遗留现代化项目的最佳方法是，首先不需要它们。如果为此预算了适当的时间和资源，系统可以以这样的方式进行维护，使其随行业发展而演进。那些成功做到这一点的组织最终明白，组织的规模是系统复杂度的上限。那些比团队所能维护的更复杂的系统会被忽视，最终崩溃。
- en: To most software engineers, legacy systems may seem like torturous dead-end
    work, but the reality is systems that are not used get turned off. Working on
    legacy systems means working on some of the most critical systems that exist—computers
    that govern millions of people’s lives in enumerable ways. This is not the work
    of technical janitors, but battlefield surgeons. It has been the greatest honor
    to serve among them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对大多数软件工程师来说，遗留系统可能看起来像是令人痛苦的死胡同工作，但现实是，不再使用的系统会被关闭。处理遗留系统意味着处理一些最关键的系统——这些计算机以无数种方式影响着数百万人的生活。这不是技术清洁工的工作，而是战场外科医生的工作。能在他们中间服务，是我最大的荣幸。
