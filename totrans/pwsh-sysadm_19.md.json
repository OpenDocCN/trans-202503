["```\n$isoFilePath = 'C:\\PowerLab\\ISOs\\en_windows_server_2016_x64_dvd_9718492.iso'\n$answerFilePath = 'C:\\PowerShellForSysAdmins\\PartII\\Automating Operating System Installs\\LABDC.xml'\n```", "```\n$convertParams = @{\n    SourcePath        = $isoFilePath\n    SizeBytes         = 40GB\n    Edition           = 'ServerStandardCore'\n    VHDFormat         = 'VHDX'\n    VHDPath           = 'C:\\PowerLab\\VHDs\\LABDC.vhdx'\n    VHDType           = 'Dynamic'\n    VHDPartitionStyle = 'GPT'\n    UnattendPath      = $answerFilePath\n}\n```", "```\n. \"$PSScriptRoot\\Convert-WindowsImage.ps1\"\n```", "```\nConvert-WindowsImage @convertParams\n\nWindows(R) Image to Virtual Hard Disk Converter for Windows(R) 10\nCopyright (C) Microsoft Corporation.  All rights reserved.\nVersion 10.0.9000.0.amd64fre.fbl_core1_hyp_dev(mikekol).141224-3000 Beta\n\nINFO   : Opening ISO en_windows_server_2016_x64_dvd_9718492.iso...\nINFO   : Looking for E:\\sources\\install.wim...\nINFO   : Image 1 selected (ServerStandardCore)...\nINFO   : Creating sparse disk...\nINFO   : Attaching VHDX...\nINFO   : Disk initialized with GPT...\nINFO   : Disk partitioned\nINFO   : System Partition created\nINFO   : Boot Partition created\nINFO   : System Volume formatted (with DiskPart)...\nINFO   : Boot Volume formatted (with Format-Volume)...\nINFO   : Access path (F:\\) has been assigned to the System Volume...\nINFO   : Access path (G:\\) has been assigned to the Boot Volume...\nINFO   : Applying image to VHDX. This could take a while...\nINFO   : Applying unattend file (LABDC.xml)...\nINFO   : Signing disk...\nINFO   : Image applied. Making image bootable...\nINFO   : Drive is bootable. Cleaning up...\nINFO   : Closing VHDX...\n\nINFO   : Closing Windows image...\nINFO   : Closing ISO...\n\nINFO   : Done.\n```", "```\n$vm = Get-Vm -Name 'LABDC'\nAdd-VMHardDiskDrive -VMName 'LABDC' -Path 'C:\\PowerLab\\VHDs\\LABDC.vhdx'\n```", "```\n$bootOrder = (Get-VMFirmware -VMName 'LABDC').Bootorder\n```", "```\n$bootOrder.BootType\n\nBootType\n------\nNetwork\n```", "```\n$vm | Set-VMFirmware -FirstBootDevice $vm.HardDrives[0]\n```", "```\nswitch ($OperatingSystem) {\n    'Server 2016' {\n        $isoFilePath = \"$IsoBaseFolderPath\\en_windows_server_2016_x64_dvd_9718492.iso\"\n    }\n    default {\n throw \"Unrecognized input: [$_]\"\n    }\n}\n```", "```\nparam\n(\n    [Parameter(Mandatory)]\n    [string]$VmName,\n\n    [Parameter()]\n    [string]$OperatingSystem = 'Server 2016',\n\n    [Parameter()]\n    [ValidateSet('ServerStandardCore')]\n    [string]$OperatingSystemEdition = 'ServerStandardCore',\n\n    [Parameter()]\n    [string]$DiskSize = 40GB,\n\n    [Parameter()]\n    [string]$VhdFormat = 'VHDX',\n\n    [Parameter()]\n    [string]$VhdType = 'Dynamic',\n\n    [Parameter()]\n    [string]$VhdPartitionStyle = 'GPT',\n\n    [Parameter()]\n    [string]$VhdBaseFolderPath = 'C:\\PowerLab\\VHDs',\n\n    [Parameter()]\n    [string]$IsoBaseFolderPath = 'C:\\PowerLab\\ISOs',\n\n    [Parameter()]\n    [string]$VhdPath\n)\n```", "```\nGet-Credential | Export-CliXml  -Path C:\\DomainCredential.xml\n```", "```\n<TN RefId=\"0\">\n  <T>System.Management.Automation.PSCredential</T>\n  <T>System.Object</T>\n  </TN>\n  <ToString>System.Management.Automation.PSCredential</ToString>\n  <Props>\n  <S N=\"UserName\">userhere</S>\n  <SS N=\"Password\">ENCRYPTEDTEXTHERE</SS>\n  </Props>\n  </Obj>\n</Objs>\n```", "```\n$cred = Import-Clixml -Path C:\\DomainCredential.xml\n$cred | Get-Member\n\n   TypeName: System.Management.Automation.PSCredential\n\nName                 MemberType Definition\n----                 ---------- ----------\nEquals               Method     bool Equals(System.Object obj)\nGetHashCode          Method     int GetHashCode()\nGetNetworkCredential Method     System.Net.NetworkCredential\n                                GetNetworkCredential()\nGetObjectData        Method     void GetObjectData(System.Runtime...\nGetType              Method     type GetType()\nToString             Method     string ToString()\nPassword             Property   securestring Password {get;}\nUserName             Property   string UserName {get;}\n```", "```\nInvoke-Command -ComputerName LABDC -ScriptBlock { hostname }\n```", "```\nGet-Credential | Export-CliXml -Path C:\\PowerLab\\VMCredential.xml\n```", "```\n$cred = Import-CliXml -Path C:\\PowerLab\\VMCredential.xml\nInvoke-Command -VMName LABDC -ScriptBlock { hostname } -Credential $cred\n```", "```\nBeforeAll {\n    $cred = Import-CliXml -Path C:\\PowerLab\\VMCredential.xml\n    $session = New-PSSession -VMName 'LABDC' -Credential $cred\n}\n\nAfterAll {\n    $session | Remove-PSSession\n}\n```", "```\nPS> Invoke-Pester 'C:\\PowerShellForSysadmins\\Part II\\Automating Operating\nSystem Installs\\Automating Operating System Installs.Tests.ps1'\nDescribing Automating Operating System Installs\n   Context Virtual Disk\n    [+] created a VHDX called LABDC in the expected location 305ms\n    [+] attached the virtual disk to the expected VM 164ms\n    [+] creates the expected VHDX format 79ms\n    [+] creates the expected VHDX partition style 373ms\n    [+] creates the expected VHDX type 114ms\n    [+] creates the VHDDX of the expected size 104ms\n   Context Operating System\n    [+] sets the expected IP defined in the unattend XML file 1.07s\n    [+] deploys the expected Windows version 65ms\nTests completed in 2.28s\nPassed: 8 Failed: 0 Skipped: 0 Pending: 0 Inconclusive: 0\n```"]