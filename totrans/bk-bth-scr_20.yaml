- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 18 DIRECTORIES, RECURSION, AND ITERATIVE LOOPS
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 18 目录、递归和迭代循环
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: Many Batch commands have options, but most offer a slightly different flavor
    or tweak on the command. The options of the for command are a completely different
    story. The four available options impact the for command in four distinct ways.
    In this chapter, I’ll detail three of them, and the fourth will follow in the
    next, requiring its very own chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多批处理命令都有选项，但大多数提供的只是命令的稍微不同的变种或调整。for 命令的选项则是一个完全不同的故事。四个可用的选项以四种不同的方式影响 for
    命令。在本章中，我将详细介绍其中的三个，第四个将在下一章中讲解，并且需要专门的一章来描述。
- en: One option changes the focus of the command from files to directories, and another
    uses recursion to traverse subdirectories looking for files. You’ll also learn
    how those two options used together can traverse a directory tree looking for
    subdirectories.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个选项将命令的焦点从文件转向目录，另一个则使用递归遍历子目录以查找文件。你还将学到，如何将这两个选项结合使用来遍历一个目录树，查找子目录。
- en: The last option in this chapter morphs the for command into something unlike
    anything that I’ve yet discussed. Its functionality has little in common with
    the optionless for command or the command with its other options. It creates an
    iterative loop, executing logic as it increments or decrements an index or counter
    by a fixed amount from one number to another. This tool is nothing less than an
    absolute necessity for any coder.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的最后一个选项将 for 命令变成了一个我尚未讨论过的全新东西。它的功能与没有选项的 for 命令或带有其他选项的命令有很大的不同。它创建了一个迭代循环，在从一个数字到另一个数字的过程中，按照固定的增量或减量执行逻辑。这项工具对于任何程序员来说都是绝对必要的。
- en: The Directory Option
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录选项
- en: 'Not all of the option letters are descriptive of their function, but the /D
    option stands for *directory*. While the optionless for command enumerates through
    a list of filenames, the /D option allows the command to enumerate through a list
    of directories or folders. The general syntax shows that other than the insertion
    of the option, it’s unchanged from its optionless cousin:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有选项字母都能准确描述它们的功能，但 /D 选项代表 *directory*（目录）。虽然没有选项的 for 命令会枚举文件名列表，但 /D 选项使得命令可以枚举目录或文件夹的列表。通用语法显示，除了插入该选项外，语法与没有选项的
    for 命令完全相同：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before using the option, here is an example reminiscent of the prior chapter,
    an optionless for command sporting a sole wildcard character for the filename
    after a path:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用该选项之前，这里有一个类似于上一章的示例，一个没有选项的 for 命令，在路径后使用了一个唯一的通配符字符作为文件名：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The resulting output includes the path and filename of every file in the folder
    written to the console.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出包括文件夹中每个文件的路径和文件名，并写入控制台。
- en: 'In the following example, I’m making two tweaks to the optionless for loop:
    one important and one cosmetic. The important addition is the insertion of the
    /D option before the for variable. Notice that the rest of the for command itself
    is completely unchanged. The cosmetic tweak is that I’m replacing the word File
    with Directory in the echo command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我对没有选项的 for 循环做了两个修改：一个是重要的，另一个是外观上的修改。重要的修改是将 /D 选项插入到 for 变量之前。注意，for
    命令的其余部分保持完全不变。外观上的修改是我将 echo 命令中的“File”替换成了“Directory”：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Another possible change to this code could include the replacement of %%f with
    %%d for *directory* (but I’m trying not to complicate this example).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对这段代码的另一个可能修改是将 %%f 替换为 %%d 来代表 *directory*（目录）（但我不打算使这个示例过于复杂）。
- en: 'The files in this folder that were displayed without the /D option are no longer
    part of the output. Now the interpreter writes every directory immediately under
    *C:\Budget\* to the console, perhaps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有 /D 选项的情况下，这个文件夹中的文件不再是输出的一部分。现在，解释器将立即将每个位于 *C:\Budget\* 下的目录写入控制台，可能是：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This output assumes that these are the only two subdirectories, but any subdirectories
    of those subdirectories aren’t listed in the output.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出假定这是唯一的两个子目录，但那些子目录的子目录并未出现在输出中。
- en: The Recursion Option
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 递归选项
- en: 'Another useful option is /R, which conveniently stands for *recursion*. This
    option empowers the for command to search recursively through a directory and
    all its subdirectories (and their subdirectories, and so on) for files fitting
    a mask. Compared to the syntax of the optionless command, its generic syntax differs
    by more than the option itself:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的选项是`/R`，它方便地代表*递归*。这个选项使得`for`命令能够递归地在一个目录及其所有子目录（以及它们的子目录，依此类推）中搜索符合某个模式的文件。与没有选项的命令语法相比，它的通用语法与仅有选项的命令语法有所不同：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The most significant difference is that the path to be searched now comes before
    the for variable. The interpreter is unfazed if you omit the trailing slash, but
    it’s good form to include it to make clear that it’s a path. The path can be as
    little as a drive letter followed by a colon, and you’ll need encasing double
    quotes for any embedded spaces. Inside the parentheses, the input will be one
    or more space- or comma-delimited masks of filenames without paths. For example,
    the following searches the *C:\Budget\* directory and all of its subdirectories
    for Word documents, writing all that are found to the console:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最显著的区别在于要搜索的路径现在出现在`for`变量之前。如果省略尾部斜杠，解释器不会受到影响，但最好加上斜杠，以明确表示它是一个路径。路径可以仅是驱动器字母后跟冒号，并且对于包含空格的路径，你需要用双引号括起来。在括号内，输入将是一个或多个没有路径的文件名，文件名之间用空格或逗号分隔。例如，以下命令会在*C:\Budget\*目录及其所有子目录中搜索Word文档，并将找到的文件写入控制台：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following for command finds those misplaced photos from your trip to Italy,
    or at least any file with a *.jpg* or *.bmp* extension, and a filename starting
    with *Italy*. Because of the /R option, the command looks not just in the root
    *C:\* folder but everywhere on your *C:\* drive as well:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下`for`命令会找到你在意大利旅行中错放的照片，或者至少是任何扩展名为`*.jpg*`或`*.bmp*`的文件，且文件名以*Italy*开头。由于使用了`/R`选项，命令不仅会在根目录*C:\*文件夹中查找，还会在你整个*C:\*驱动器中查找：
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: (Multiple file masks work in all for commands, regardless of the options or
    lack of options.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: （多个文件模式在所有`for`命令中都可以使用，无论是否有选项。）
- en: 'The for /R command has a couple other variants. The hard brackets surrounding
    the drive and path in the general syntax mean that they are optional, and if omitted,
    the current directory is assumed. Hence, the previous command is functionally
    equivalent to the following since *C:\* is the current directory:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`for /R` 命令有其他几种变体。在一般语法中，围绕驱动器和路径的方括号意味着它们是可选的，如果省略，则假定当前目录。因此，前面的命令在功能上等同于以下命令，因为*C:\*是当前目录：'
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In both examples, %%p resolves to the fully qualified path and filename for
    each found photo.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个例子中，`%%p`将解析为每个找到的照片的完整路径和文件名。
- en: In an odd and subtle batveat, all inputs to a for /R command must contain at
    least one wildcard character. If you use an explicit filename (or any text without
    an asterisk or question mark) as input in the prior command, it returns *C:\*
    and all of its subdirectories followed by your filename, even if the file doesn’t
    exist in the directories. To find an explicit filename, you must add a wildcard
    character somewhere in the filename input. I recommend a trailing asterisk because
    it usually runs the least risk of accidentally capturing additional files.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个微妙的警告中，所有传递给`for /R`命令的输入必须至少包含一个通配符字符。如果你在之前的命令中使用了显式的文件名（或没有星号或问号的任何文本）作为输入，它会返回*C:\*及其所有子目录，并附带你的文件名，即使文件在目录中不存在。要找到显式的文件名，你必须在文件名输入中添加一个通配符字符。我建议使用尾部星号，因为它通常最不容易意外捕获其他文件。
- en: NOTE
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*For better or worse, the interpreter handles the recursion itself, or the
    stepping into each subfolder, hiding it from you. In [Chapter 23](chapter23.xhtml),
    I’ll return to recursion and explain how to define the actual recursive call,
    opening up many possibilities.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*无论好坏，解释器自行处理递归，即进入每个子文件夹，隐藏它给你。在[第23章](chapter23.xhtml)中，我将重新讲解递归并解释如何定义实际的递归调用，从而开启更多可能性。*'
- en: Directory Recursion
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录递归
- en: 'If the /D option allows for directory searches and the /R option allows for
    recursive file searches, you might expect that they can be used together for recursive
    directory searches, and you would be correct. The format follows the general syntax
    of the /R form of the command with /D coming before /R and with nothing but an
    asterisk for the input in the parentheses:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`/D`选项允许目录搜索，而`/R`选项允许递归文件搜索，你可能会认为它们可以一起用于递归目录搜索，确实如此。格式遵循`/R`命令的通用语法，`/D`在`/R`之前，并且括号中的输入仅为一个星号：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running this code displays all subdirectories of *C:\Budget\* and all of their
    subdirectories, and so on. For instance, assuming that two particular subdirectories
    and one sub-subdirectory exist, this is the output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码会显示 *C:\Budget\* 所有子目录及其所有子目录，依此类推。例如，假设存在两个特定的子目录和一个子子目录，输出会是：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In a curious oddity, the for /R command alone can perform this same functionality
    without the /D option, or at least something really similar. To demonstrate, I’ve
    taken the previous for command and made two small tweaks. I’ve removed the /D
    option and changed the input from an asterisk to a dot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个有趣的怪异情况下，单独使用 for /R 命令也可以执行相同的功能，而不需要 /D 选项，或者至少执行的是类似的功能。为了演示这一点，我对之前的
    for 命令做了两个小调整。我去掉了 /D 选项，并将输入从星号改为点：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It’s far from intuitive, but the dot inside the parentheses instructs the for
    /R command to enumerate directories instead of files. (Directory and dot both
    start with D, if that helps.) This also produces a list of subdirectories, but
    notice three peculiar differences:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不直观，但括号中的点会指示 for /R 命令列举目录而不是文件。（目录和点都以 D 开头，如果这有帮助的话。）这也会产生子目录的列表，但请注意三点不同：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you use the /R option with the dot as input, the first difference is that
    the interpreter now enumerates the root directory, in this instance *C:\Budget\*,
    as well as the subdirectories. Second, it returns each directory with a trailing
    backslash followed by a dot, and third, it sorts the output differently, processing
    subdirectories of a directory before processing its sibling directories. Notice
    that when using the /D and /R options in tandem with an asterisk, the interpreter
    processed *C:\Budget\Taxes\* before *C:\Budget\SubDir\SubSubDir\*, just the opposite
    of the results with the /R option with the dot.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 /R 选项并将输入改为点时，第一个不同之处是解释器现在会列举根目录，在这个例子中是 *C:\Budget\*，以及所有子目录。第二，输出的每个目录后面会跟着一个反斜杠和一个点，第三，输出排序方式也不同，解释器会先处理一个目录的子目录，再处理其兄弟目录。请注意，当同时使用
    /D 和 /R 选项，并且输入为星号时，解释器会先处理 *C:\Budget\Taxes\*，再处理 *C:\Budget\SubDir\SubSubDir\*，这与使用
    /R 选项和点时的结果正好相反。
- en: WARNING
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*Everything I’ve detailed about the dot as input to the* for /R *command is
    exactly what the help would have you believe, but it isn’t entirely true. The
    dot at the end of each line of output is just a reproduction of the input. This
    is another manifestation of the batveat mentioned in the prior section. Any input
    without a wildcard character tells the command to step through all subdirectories,
    appending each with that input. The dot nicely terminates each directory in the
    prior example, but if you instead use a tilde as the input, the resulting directories
    in the output all end with a tilde, not a dot.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*我所详细说明的关于点作为输入传递给* for /R *命令的内容，正是帮助文档所说的那样，但这并不完全正确。每行输出末尾的点只是输入的再现。这是前一节中提到的
    batveat 的另一种表现形式。任何没有通配符的输入都会告诉命令逐步遍历所有子目录，并将每个子目录附加上该输入。点在上面的例子中很好地结束了每个目录，但如果你改为使用波浪号作为输入，输出中的目录都会以波浪号结尾，而不是点。*'
- en: The differences in the output are subtle and, depending on your application,
    inconsequential, but they’re differences, nonetheless.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的差异很细微，根据你的应用程序的不同，这些差异可能并不重要，但无论如何，它们依然存在。
- en: The Iterative Loop Option
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代循环选项
- en: The /L option turns the for command into an iterative loop, an essential item
    in any coder’s toolkit and possibly the most used variant of the command. The
    loops I’ve discussed up to this point have enumerated through a list of files,
    directories, or text of some sort. However, this option turns the for command
    into a loop that increments or decrements by some numerical value or step from
    one number to another with a fixed ending value. Most coding languages implement
    iterative loops in some fashion. In fact, many also have a command called for
    specifically for this purpose. Batch is unique in that the for command does so
    much else.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: /L 选项将 for 命令转变为一个迭代循环，这是任何编码者工具箱中的必备项目，并且可能是最常用的命令变体。我至今讨论的循环都在遍历一系列文件、目录或某种文本。然而，这个选项将
    for 命令变成一个通过某个数值或步长从一个数字递增或递减到另一个数字，并且有一个固定结束值的循环。大多数编程语言都会以某种方式实现迭代循环。事实上，许多语言也有一个专门用于此目的的
    for 命令。批处理脚本的独特之处在于，for 命令做了这么多其他事情。
- en: 'The general syntax to turn the command into an iterative loop is:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将命令转变为迭代循环的一般语法是：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Other than the addition of the /L option, the only other difference between
    this and the optionless for command is the data inside of the parentheses, where
    three comma-delimited numbers now make up the input. The first is the start, or
    beginning index; the second is the step, or the amount by which that index increments
    for each iteration of the loop; and the last is the end, or last possible value
    the index can take.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 除了添加 `/L` 选项外，这与没有选项的 `for` 命令之间唯一的区别是括号内的数据，在这里三个用逗号分隔的数字组成了输入。第一个是起始值或起始索引；第二个是步长，即每次循环迭代中索引递增的量；最后一个是结束值，即索引可以达到的最后一个值。
- en: 'To demonstrate, this for /L loop starts with the value 1, each iteration steps
    by 2, and it ends at 3:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这个 `/L` 循环从值 1 开始，每次迭代步进 2，直到 3 结束：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This command sets the for variable, %%i, to 1 during the first iteration of
    the loop; then it increments or steps by 2 so that %%i resolves to 3 the second
    time through. That matches the ending value, so the loop doesn’t execute again.
    Here’s the output to the console:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令在循环的第一次迭代中将 `for` 变量 %%i 设置为 1；然后，它以步长 2 递增，使得 %%i 第二次通过时变为 3。这与结束值匹配，因此循环不再执行。以下是输出到控制台的内容：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following for command starts with the variable set to 10 and then increments
    by 1 up to 12:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `for` 命令从变量设置为 10 开始，然后每次递增 1，直到达到 12：
- en: '[PRE15]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This iterates through the indices of 10, 11, and 12.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这会遍历索引 10、11 和 12。
- en: 'To decrement the index, assign a negative value to the step:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要递减索引，请将步长赋值为负数：
- en: '[PRE16]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This results in the index descending from 2 to 0:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这会导致索引从 2 降到 0：
- en: '[PRE17]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'All three of the numerical inputs can be negative:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个数值输入都可以是负数：
- en: '[PRE18]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This for loop executes for these three indices:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `for` 循环会对这三个索引执行：
- en: '[PRE19]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Given the following start and step values, it’s clear that the for command
    generates an increasing sequence of positive multiples of 10, starting with 10:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 给定以下的起始值和步长，显然这个 `for` 命令生成了一个从 10 开始的递增的正数 10 的倍数序列：
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What’s less clear is exactly where the sequence ends. The end value of 35 isn’t
    a multiple of 10, so it isn’t in the sequence, but once the index is greater than
    35, the loop ends, so 30 is the last number in the sequence. The command would’ve
    been functionally equivalent if the end value had been 30, 39, or any integer
    in between, but for clarity, 30 would’ve been the best option. Also, notice that
    I omitted the spaces after the commas in the input. I usually include the spaces
    for readability, but this example demonstrates that they aren’t needed (and easily
    forgotten).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 更不清楚的是序列到底在哪里结束。35 的结束值不是 10 的倍数，因此不在序列中，但一旦索引大于 35，循环就会结束，所以 30 是序列中的最后一个数字。如果结束值是
    30、39 或任何介于它们之间的整数，命令在功能上是等效的，但为了清晰起见，30 会是最好的选择。此外，请注意，我在输入中省略了逗号后的空格。通常，我会为了可读性添加空格，但这个例子展示了它们并不是必需的（并且很容易被忽略）。
- en: Power Function Routine
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 幂函数例程
- en: 'Unfortunately, Batch doesn’t support the power function. In [Chapter 6](chapter6.xhtml),
    I mentioned that we could write a short routine for the task, and here is the
    promised routine, which uses an iterative loop. It accepts three parameters: the
    base of the exponential, the exponent, and the name of the return variable containing
    the result:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Batch 不支持幂函数。在[第 6 章](chapter6.xhtml)中，我提到我们可以为此任务编写一个简短的例程，这里是承诺中的例程，它使用了一个迭代循环。它接受三个参数：指数的基数、指数值以及包含结果的返回变量的名称：
- en: '[PRE21]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: (If the return parameter has you bamboozled, return to [Chapter 11](chapter11.xhtml).)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: （如果返回参数让你困惑，可以回到[第 11 章](chapter11.xhtml)。）
- en: I’m initializing the return parameter to 1. Then the loop starts at 1, increments
    by 1, and increases up to the value of the exponent or the second parameter. Hence,
    the loop executes *n* times if the exponent is *n*. The command inside the loop
    multiplies the return parameter by the base of the exponential or the first parameter.
    Hence, if the base is *b*, this for loop multiples together *n* copies of *b*.
    When the loop is done, the return parameter contains *b**^n*, and the routine
    ends.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我将返回参数初始化为 1。然后，循环从 1 开始，每次递增 1，直到达到指数或第二个参数的值。因此，如果指数是 *n*，循环执行 *n* 次。循环内的命令将返回参数乘以指数的基数或第一个参数。因此，如果基数是
    *b*，这个 `for` 循环将 *n* 个 *b* 相乘。当循环完成时，返回参数包含 *b**^n*，例程结束。
- en: 'To find 53, call the routine passing these three arguments:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到 53，请调用例程并传递这三个参数：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The code multiplies 3 copies of 5 and writes Five cubed = 125 to the console.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将 3 个 5 相乘，并将结果 Five cubed = 125 输出到控制台。
- en: A Case Study
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 案例研究
- en: As a seven-year-old mathematical prodigy in the late 18th century, the great
    mathematician Carl Friedrich Gauss received, along with the rest of his class,
    some busywork from the teacher. The students were to add up all of the numbers
    from 1 to 100\. Moments later, the teacher looked up and saw all of the children
    busily adding with their chalk and slate, except for one. He approached the young
    Gauss, preparing a stern reprimand, only to notice the correct answer of 5,050
    written on the boy’s piece of slate.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 作为18世纪末的七岁数学神童，伟大的数学家卡尔·弗里德里希·高斯和全班其他同学一起，从老师那里接到了一项繁重的任务。学生们需要将1到100的所有数字加起来。过了一会儿，老师抬起头，看到所有的孩子都在忙着用粉笔和石板做加法，只有一个人没有。他走近年轻的高斯，准备严厉训斥，结果发现高斯的石板上写着正确答案5050。
- en: Gauss had realized that there were 50 pairs of numbers adding up to 101 (100
    + 1, 99 + 2, ..., 51 + 50). He quickly multiplied 50 by 101, wrote down the answer,
    and sat back waiting for his peers to finish, probably wondering what was taking
    them so long.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 高斯意识到有50对数字加起来是101（100 + 1，99 + 2，...，51 + 50）。他迅速将50乘以101，写下答案，然后坐回去等待同学们完成，可能在想他们怎么还没做完。
- en: 'There are other variations of this story, and it may be apocryphal, but if
    any of those other students had had access to a Windows computer, they may have
    been able to complete the task even before the young genius—that is, if they could
    have quickly typed the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事有其他不同的版本，虽然它可能是传说，但如果那些其他的学生能够使用一台Windows电脑，他们也许能在年轻天才之前就完成任务——前提是他们能够快速键入以下内容：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This loop iterates the %%i index from 1 to 100, where the set /A command tallies
    up all of the indices. Before the loop, the set command explicitly initializes
    sum to 0, thus guaranteeing that the final result is the desired value. Gauss’s
    tech-savvy classmates could’ve then rewritten the output The sum is 5050. on their
    pieces of slate in a time comparable to Gauss himself.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环从1到100迭代%%i索引，其中set /A命令会累加所有索引的值。在循环之前，set命令明确地将sum初始化为0，从而保证最终结果是所需的值。高斯的技术娴熟的同学们或许能在与高斯本人相当的时间内，把输出“总和是5050”写到他们的石板上。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about three options of the for command. The /D
    option allows the command to enumerate through directories instead of files, and
    the /R option uses recursion to traverse subdirectories. I even demonstrated two
    methods of recursively enumerating directories.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了for命令的三个选项。/D选项允许命令枚举目录而不是文件，/R选项则使用递归来遍历子目录。我甚至演示了递归枚举目录的两种方法。
- en: You also learned how to create an iterative loop with the /L option and all
    of its facets. I used the for command with this option to create a routine for
    raising one number to another, and I even got in a quick mathematical history
    lesson and a little Batch arithmetic.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你还学习了如何使用/L选项创建一个迭代循环，并掌握了它的所有方面。我使用了带此选项的for命令来创建一个将一个数字提升为另一个数字的例程，甚至还顺便讲了一下快速的数学历史课程以及一点批处理算术。
- en: That leaves one option left, and you’ll learn all about it in the next chapter.
    It allows for the reading of files and much more.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只剩下一个选项了，你将在下一章学习它。它允许读取文件以及更多操作。
