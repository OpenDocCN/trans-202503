["```\n$ **docker exec -it foodfinder-application npm install --save-dev jest \\**\n**jest-environment-jsdom @testing-library/react @testing-library/jest-dom** \n```", "```\nconst nextJest = require(\"next/jest\");\n\nconst createJestConfig = nextJest({\n    dir: \"./\",\n});\n\nconst customJestConfig = {\n    moduleDirectories: [\"node_modules\", \"<rootDir>/\"],\n    testEnvironment: \"jest-environment-jsdom\",\n};\n\nmodule.exports = createJestConfig(customJestConfig); \n```", "```\n \"test\": \"jest \",\n    \"testWatch\": \"jest --watchAll\" \n```", "```\nversion: \"3.0\"\nservices:\n\n    backend:\n        container_name: foodfinder-backend\n        image: mongo:latest\n        restart: always\n        environment:\n            DB_NAME: foodfinder\n            MONGO_INITDB_DATABASE: foodfinder\n        ports:\n            - 27017:27017\n        volumes:\n            - \"./.docker/foodfinder-backend/seed-mongodb.js:\n/docker-entrypoint-initdb.d/seed-mongodb.js\"\n            - mongodb_data_container:/data/db\n\n    application:\n        container_name: foodfinder-application\n        image: node:lts-alpine\n        working_dir: /home/node/code/foodfinder-application\n        ports:\n            - \"3000:3000\"\n        volumes:\n            - ./code:/home/node/code\n        depends_on:\n            - backend\n        environment:\n            - HOST=0.0.0.0\n            - CHOKIDAR_USEPOLLING=true\n            - CHOKIDAR_INTERVAL=100\n        tty: true\n        command: \"npm run dev\"\n\n    **jest:**\n **container_name: foodfinder-jest**\n **image: node:lts-alpine**\n **working_dir: /home/node/code/foodfinder-application**\n **volumes:**\n **- ./code:/home/node/code**\n **depends_on:**\n **- backend**\n **- application**\n **environment:**\n **- NODE_ENV=test**\n **tty: true**\n **command: \"npm run testWatch\"**\n\nvolumes:\n    mongodb_data_container: \n```", "```\nimport {act, render} from \"@testing-library/react\";\nimport {useSession} from \"next-auth/react\";\nimport Header from \"components/header\";\n\njest.mock(\"next-auth/react\");\ndescribe(\"The Header component\", () => {\n    it(\"renders unchanged when logged out\", async () => {\n        (useSession as jest.Mock).mockReturnValueOnce({\n            data: {user: {}},\n            status: \"unauthenticated\",\n        });\n        let container: HTMLElement | undefined = undefined;\n        await act(async () => {\n            container = render(<Header />).container;\n        });\n        expect(container).toMatchSnapshot();\n    });\n\n    it(\"renders unchanged when logged in\", async () => {\n        (useSession as jest.Mock).mockReturnValueOnce({\n            data: {\n                user: {\n                    name: \"test user\",\n                    fdlst_private_userId: \"rndmusr\",\n                },\n            },\n            status: \"authenticated\",\n        });\n        let container: HTMLElement | undefined = undefined;\n        await act(async () => {\n            container = render(<Header />).container;\n        });\n        expect(container).toMatchSnapshot();\n    });\n}); \n```"]