- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">7</samp> <samp class="SANS_Dogma_OT_Bold_B_11">AN
    INTRODUCTION TO PYTHON</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: The skills you’ve learned in the last few chapters are instrumental for investigating
    leaked datasets, but having basic programming knowledge is even more powerful.
    Using Python or other programming languages, you can give your computer precise
    instructions for performing tasks that existing tools or shell scripts don’t allow.
    For example, you could write a Python script that scours a million pieces of video
    metadata to determine where the videos were filmed. In my experience, Python is
    also simpler, easier to understand, and less error-prone than shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides a crash course on the fundamentals of Python programming.
    You’ll learn to write and execute Python scripts and use the interactive Python
    interpreter. You’ll also use Python to do math, define variables, work with strings
    and Boolean logic, loop through lists of items, and use functions. Future chapters
    rely on your understanding of these basic skills.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 7-1: Install Python</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some operating systems, including most versions of Linux and macOS, come with
    Python preinstalled, and it’s common to have multiple versions of Python installed
    at once. This book uses Python 3\. After you follow the Python installation instructions
    for your operating system in this exercise, you should be able to run Python scripts
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">python3</samp> (for Linux
    and Mac) or <samp class="SANS_TheSansMonoCd_W5Regular_11">python</samp> (for Windows)
    command.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Windows</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Download and install the latest version of Python 3 for Windows from [*https://<wbr>www<wbr>.python<wbr>.org*](https://www.python.org).
    During installation, check the box **Add Python 3.*****x*** **to PATH** (where
    **3.*****x*** is the latest Python 3 version), which allows you to run the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">python</samp> command in PowerShell without
    using the Python program’s absolute path.
  prefs: []
  type: TYPE_NORMAL
- en: Wherever this chapter instructs you to open a terminal, use PowerShell instead
    of an Ubuntu terminal. You can also learn to use Python in Ubuntu with WSL by
    following this chapter’s Linux instructions, but running Python directly in Windows
    makes reading and writing data on your Windows-formatted USB disk much faster.
  prefs: []
  type: TYPE_NORMAL
- en: Windows users should replace all instances of <samp class="SANS_TheSansMonoCd_W5Regular_11">python3</samp>
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">python</samp> when running
    the example code in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Linux</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open a terminal and make sure the <samp class="SANS_TheSansMonoCd_W5Regular_11">python3</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">python3-pip</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">python3-venv</samp>
    packages are installed, using this <samp class="SANS_TheSansMonoCd_W5Regular_11">apt</samp>
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command either installs the latest version of Python 3 available in the
    Ubuntu repositories (as well as a few related packages you’ll need for this chapter)
    or does nothing if the packages are already installed.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">macOS</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Open a terminal and run the following Homebrew command to make sure <samp class="SANS_TheSansMonoCd_W5Regular_11">python3</samp>
    is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command either installs the latest version of Python 3 available in Homebrew
    or does nothing if it’s already installed.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 7-2: Write Your First Python
    Script</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you’ve downloaded Python, you’ll write and run a simple Python script
    that displays some text in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: In your text editor, create a new file called *exercise-7-2.py* (all Python
    scripts end in *.py*). The first time you open a Python script in VS Code, it
    asks if you want to install the Python extension. I recommend doing so in order
    to enable VS Code to make suggestions as you’re typing. The extension also has
    various features for highlighting syntax errors and helping you format your code
    nicely.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code (or copy and paste it from [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-7<wbr>/exercise<wbr>-7<wbr>-2<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-7/exercise-7-2.py)),
    then save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As with shell scripts, Python scripts run instructions one line at a time, starting
    at the top. When you run this code, <samp class="SANS_TheSansMonoCd_W5Regular_11">print("hacks")</samp>
    calls a function called <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    and passes the string <samp class="SANS_TheSansMonoCd_W5Regular_11">hacks</samp>
    into it, displaying <samp class="SANS_TheSansMonoCd_W5Regular_11">hacks</samp>
    in your terminal window. The second line similarly displays <samp class="SANS_TheSansMonoCd_W5Regular_11">leaks</samp>.
    (I’ll explain strings in greater detail in the “Python Basics” section on page
    172, and functions in the “Functions” section on page 192.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the script defines a variable called <samp class="SANS_TheSansMonoCd_W5Regular_11">revelations</samp>
    and sets its value to the uppercase version of the string <samp class="SANS_TheSansMonoCd_W5Regular_11">revelations</samp>.
    To find the uppercase version of that string, the program calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">upper()</samp>
    method, which is a type of function. The final line then displays what’s stored
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">revelations</samp> variable:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">REVELATIONS</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*I have fond memories of retyping snippets of code from books. When I was a
    teenager, I taught myself web and video game development by reading programming
    books and typing the code samples I found into my own editor. I always found that
    actually retyping the code, rather than copying and pasting it, helped make the
    concepts stick, so I recommend doing that for the exercises in this book.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, change to your *exercises* folder and run the script you just
    created with the following command (Windows users, remember to replace <samp class="SANS_TheSansMonoCd_W5Regular_11">python3</samp>
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">python</samp>):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The argument in this command is the path to the script that you want to run,
    *exercise-7-2.py*. You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Try making the following changes to your script, running it after each change
    to see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the text in the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp> functions
    to display more text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the string methods <samp class="SANS_TheSansMonoCd_W5Regular_11">lower()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">capitalize()</samp> instead
    of <samp class="SANS_TheSansMonoCd_W5Regular_11">upper()</samp>.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Python Basics</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, you’ll learn to write code in the interactive Python interpreter,
    comment your code, start doing simple math in Python, and use strings and lists.
    This gentle introduction to Python syntax will let you quickly try out some code
    on your own, before you dive into more advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: As you read, don’t be shy about searching online for answers to any Python questions
    you might have beyond what this book covers. I frequently find solutions to Python
    problems on websites like Stack Overflow, a forum where people can ask technical
    questions and others can answer them.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Interactive Python
    Interpreter</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The *Python interpreter* is a command line program that lets you run Python
    code in real time, without writing scripts first, allowing you to quickly test
    commands. To open the Python interpreter, you run the <samp class="SANS_TheSansMonoCd_W5Regular_11">python3</samp>
    command without any arguments, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The interpreter starts by telling you exactly which version of Python you’re
    using. Similar to a command line interface, it gives you the prompt <samp class="SANS_TheSansMonoCd_W5Regular_11">>>></samp>
    and waits for you to enter a Python command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Entering <samp class="SANS_TheSansMonoCd_W5Regular_11">print("Hello World!")</samp>
    and pressing ENTER should immediately run your code, displaying <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello
    World!</samp> on the next line. Exit the interpreter and return to the shell by
    running <samp class="SANS_TheSansMonoCd_W7Bold_B_11">exit()</samp> or pressing
    CTRL-D.
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of this book, if my examples include the <samp class="SANS_TheSansMonoCd_W5Regular_11">>>></samp>
    prompt, that means they’re running in the Python interpreter. Run the same code
    in your own interpreter as you follow along.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Comments</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Writing code can be confusing even to experienced programmers, so it’s always
    a good idea to *comment* your code: add inline notes to yourself or to others
    who might read your program. If you describe the purpose of a specific portion
    of code in plain English (or whatever language you speak), whoever looks at this
    code in the future can understand the gist of what it’s doing at a glance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a line of code starts with a hash mark (<samp class="SANS_TheSansMonoCd_W5Regular_11">#</samp>),
    the whole line is a comment. You can also add a hash mark after some code, followed
    by your comment. For example, run the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is exactly the same as comments in shell scripting, which you learned about
    in [Chapter 3](chapter3.xhtml). Python ignores comments, since they’re intended
    for humans.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Math with Python</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Computers, which are technically complicated calculators, are great at doing
    math. It might not be immediately apparent, but investigating datasets means constantly
    dealing with basic math: calculating disk space, counting files, searching for
    keywords, and sorting lists. Here’s how a few basic mathematical operations work
    in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operators**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The arithmetic operators for addition (+), subtraction (−), multiplication
    (×), and division (/) are mostly the same in Python: <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>,
    with an asterisk <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp> for multiplication.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables**'
  prefs: []
  type: TYPE_NORMAL
- en: In math, a variable is a placeholder, normally a letter like *x*. Variables
    in math often represent something unknown and it’s your job to solve for it, but
    Python variables are never unknown—they always have a value. Name your Python
    variables something descriptive like <samp class="SANS_TheSansMonoCd_W5Regular_11">price</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_retweets</samp> rather
    than single letters without clear meanings. Variables in Python can represent
    much more than just numbers, as you’ll see later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'An expression is a bit like a sentence made up of numbers, variables, and operators.
    For example, here are a few expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Like sentences, expressions need to have the correct syntax. Just like “potato
    the inside” isn’t a valid sentence, 1 1 + isn’t a valid expression. Enter the
    following expressions in the Python interpreter to see how it evaluates them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like a calculator, Python respects the order of operations. It also supports
    using parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As in the rest of math, Python won’t allow you to divide by zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You define a variable in Python by saving a value inside that variable with
    the equal sign (<samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>). Try defining
    <samp class="SANS_TheSansMonoCd_W5Regular_11">price</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">sales_tax</samp>
    variables and then using them in an expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can’t use variables that you haven’t yet defined. For example, if you use
    an undefined variable <samp class="SANS_TheSansMonoCd_W5Regular_11">x</samp> in
    an expression, you’ll get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of just setting a variable equal to some value, you’ll often want to
    modify its existing value by a certain amount. For example, if you’re keeping
    track of the total price of items in a shopping cart in the <samp class="SANS_TheSansMonoCd_W5Regular_11">total</samp>
    variable and want to add 10 dollars to that total, you would define the variable
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Python’s <samp class="SANS_TheSansMonoCd_W5Regular_11">+=</samp> operator performs
    the same operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">+=</samp> operator adds the
    number on the right to the variable on the left. The Python operators <samp class="SANS_TheSansMonoCd_W5Regular_11">-=</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">*=</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">/=</samp>
    work the same way. In your Python interpreter, define a variable, then try changing
    its value using these operators.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Strings</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A *string* is a sequence of characters. Any time you need to load, modify,
    or display text, you store it in a string. If you load the contents of a text
    file into a variable in Python (for example, a 5MB EML file that includes attachments),
    that’s a string. But strings are also often very short: in Exercise 7-2, you used
    the strings <samp class="SANS_TheSansMonoCd_W5Regular_11">"hacks"</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">"leaks"</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">"revelations"</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, strings must be enclosed in either single quotes (<samp class="SANS_TheSansMonoCd_W5Regular_11">''</samp>)
    or double quotes (<samp class="SANS_TheSansMonoCd_W5Regular_11">"</samp>). Run
    the following examples, which demonstrate how to use each type of quote. Here
    is a string with double quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the same string with single quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Use double quotes if you have single quotes within the string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Use single quotes if you have double quotes within the string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the same techniques you learned in [Chapter 3](chapter3.xhtml) to work
    with strings in your shell also apply to strings in Python. If your string uses
    double quotes, you can escape them like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can similarly escape single quotes in a single-quote string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Like numbers, strings can be stored in variables. Run the following code to
    define <samp class="SANS_TheSansMonoCd_W5Regular_11">first_name</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">last_name</samp> variables, replacing
    my name with yours:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In Python, *f-strings* are strings that can contain variables. To use an f-string,
    put the letter <samp class="SANS_TheSansMonoCd_W5Regular_11">f</samp> before the
    quotes, then put variable names in braces (<samp class="SANS_TheSansMonoCd_W5Regular_11">{</samp>and}).
    For example, run the following commands to display the values of the variables
    you just defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Place expressions inside f-strings in order to evaluate them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Python will evaluate the expression for you, in this case <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>,
    and just print the result, which is <samp class="SANS_TheSansMonoCd_W5Regular_11">15</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 7-3: Write a Python Script
    with Variables, Math, and Strings</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, you’ll practice the concepts you’ve learned so far by writing
    a simple Python script that uses variables and a few basic math expressions and
    prints some strings. The script calculates how old a person is in months, days,
    hours, minutes, and seconds, given their name and an age (in years), and then
    displays this information. In your text editor, create a new file called *exercise-7-3.py*
    and define these two variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Replace the values of <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">age_years</samp> with your own
    name and age.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, define some more variables that represent age in different units: months,
    days, hours, minutes, and seconds. Start with months:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a days variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, define variables for hour, minutes, and seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you’ve defined the variables, you can display them to the user. Since
    the numbers in this exercise are going to get big, you’ll include commas to make
    them easier to read. For example, run this code in the interpreter to display
    the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">number</samp> with
    commas using an f-string, adding <samp class="SANS_TheSansMonoCd_W5Regular_11">:,</samp>
    after the variable name within the braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the Python script, add code to display all of the values, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This code uses <samp class="SANS_TheSansMonoCd_W5Regular_11">{name}</samp> to
    display the value of the name variable. That variable is a string, so it doesn’t
    make sense to try to separate it with commas. The rest of the variables are numbers,
    though, so the code includes <samp class="SANS_TheSansMonoCd_W5Regular_11">:,</samp>
    inside the braces for all of them to include commas in the output. (The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">age_years</samp> values don’t need commas,
    unless you happen to be older than 1,000, but it doesn’t hurt to use the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">:,</samp> syntax—it adds a comma only
    if one is needed.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file in your text editor. (A complete copy of the script is available
    at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-7<wbr>/exercise<wbr>-7<wbr>-3<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-7/exercise-7-3.py).)
    In a terminal, change to your *exercises* folder for this exercise and run the
    script. Here’s what happens when I do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: When you run the script with your name and age, try changing the age and running
    it again to see how the numbers change.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Lists and Loops</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You’ll often need to manage lists when investigating datasets. For example,
    you might work with lists of filenames or rows in a spreadsheet. In this section,
    you’ll learn how to store lists as variables and loop through those lists in order
    to run the same code for each list item. You did something similar in [Chapter
    4](chapter4.xhtml) with <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loops in the shell, but this time you’ll be working in Python.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Defining and Printing
    Lists</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In Python, lists are defined with brackets (<samp class="SANS_TheSansMonoCd_W5Regular_11">[</samp>and]),
    with each item in the list separated by commas (<samp class="SANS_TheSansMonoCd_W5Regular_11">,</samp>).
    You might have a list of numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Or of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Or an empty list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as variables can contain numbers or strings, they can also contain lists.
    Use this line of code to store a list of letters in the Hebrew alphabet, spelled
    out using Latin characters, in the <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters</samp>
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now use the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp> function
    to display the items in the <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters</samp>
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You can make long lists easier to read by entering each item in the list on
    its own line, indented, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Each item in a list has an *index*, a number that represents where in the list
    that item is located. The index of the first item is 0, the second is 1, the third
    is 2, and so on. To select a list item, you append brackets with the item’s index
    to the end of the list. For example, to select the first letter in the <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters</samp>
    list, use <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters[0]</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    function to display the item from the <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters</samp>
    list at index 0 (<samp class="SANS_TheSansMonoCd_W5Regular_11">aleph</samp>),
    and the second line displays the item at index 1 (<samp class="SANS_TheSansMonoCd_W5Regular_11">bet</samp>).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now use negative numbers to select items starting from the end of the list,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">len()</samp>
    function to count the number of items in a list. For example, run the following
    code to get the number of items in the <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters</samp>
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This code uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    function to display the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">len()</samp>
    function. You could get the same result by storing the output of the <samp class="SANS_TheSansMonoCd_W5Regular_11">len()</samp>
    function in a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The first line of code runs <samp class="SANS_TheSansMonoCd_W5Regular_11">len(hebrew_letters)</samp>
    and stores the result in the <samp class="SANS_TheSansMonoCd_W5Regular_11">length_of_hebrew_alphabet</samp>
    variable. The second line uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    function to display that result.
  prefs: []
  type: TYPE_NORMAL
- en: 'You don’t have to store a list in a variable to select items from it. For example,
    run this code to display the second item (at index 1) in the list <samp class="SANS_TheSansMonoCd_W5Regular_11">[1,2,3]</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">append()</samp> method lets
    you add items to lists. For example, run the following code to add a new color
    to a list of favorites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This code defines the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">favorite_colors</samp>
    as a list of strings containing <samp class="SANS_TheSansMonoCd_W5Regular_11">red</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">green</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">blue</samp>.
    It then adds another string, <samp class="SANS_TheSansMonoCd_W5Regular_11">black</samp>,
    to the list by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">append()</samp>
    method, before finally displaying the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">favorite_colors</samp>
    variable, using the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    function.
  prefs: []
  type: TYPE_NORMAL
- en: When writing code that analyzes datasets, you’ll often create an empty list
    and then append items to that list to make the data easier to work with. For example,
    you’ll learn in [Chapter 13](chapter13.xhtml) about the code I wrote while investigating
    America’s Frontline Doctors, an anti-vaccine group. To properly analyze a dataset
    of hundreds of thousands of files containing patient information, I wrote code
    that created an empty list, opened each file, and appended the pertinent patient
    data to that list.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Running for Loops</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In [Chapter 4](chapter4.xhtml), you used a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop to unzip each BlueLeaks ZIP file. Python also has <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loops, and they work the same way they do in shell scripting: by running a snippet
    of code, called a *block*, on each item in a list. A <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This syntax is followed by a block of indented code. Once you choose a new variable
    to define in <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">variable_name</samp>,
    you can use it in your code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, run the following code to loop through the <samp class="SANS_TheSansMonoCd_W5Regular_11">hebrew_letters</samp>
    list, store each item in the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">letter</samp>,
    and then display that item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'After you enter the <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop, which ends in a colon (<samp class="SANS_TheSansMonoCd_W5Regular_11">:</samp>),
    the Python interpreter changes the prompt from <samp class="SANS_TheSansMonoCd_W5Regular_11">>>></samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">…</samp> and waits for you to
    enter the code block that will run for each item. Indent every line in your block
    with the same number of spaces, then end your block with a blank line. In this
    example, the code block that runs is just one line: <samp class="SANS_TheSansMonoCd_W5Regular_11">print(letter)</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code should return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop runs 22 times, once for each item in the list, and stores the item in the
    variable <samp class="SANS_TheSansMonoCd_W5Regular_11">letter</samp>. The first
    time it loops, the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">letter</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">aleph</samp>. The second time,
    the value is <samp class="SANS_TheSansMonoCd_W5Regular_11">bet</samp>, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_21">NOTE</samp>
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Indentation tells Python which lines of code are part of your code blocks.
    If some lines are indented with four spaces, but others with two or three spaces,
    your Python code won’t work. To keep things simple, I recommend always indenting
    with four spaces. When writing scripts in VS Code, you can indent multiple lines
    of code by selecting them with your mouse and then pressing* *TAB* *(which indents
    four spaces for you) or unindent by selecting a line and pressing* *SHIFT-TAB**.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following, slightly more complicated, example uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">len()</samp>
    function to count not the number of items in a list but characters in a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This code tells you how many characters are used to spell the word for each
    Hebrew letter in the Latin alphabet.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops
    to loop through strings as well, since a string is essentially a list of characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You can run a single <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop as many times as you need for the dataset you’re working on. For example,
    in [Chapter 9](chapter9.xhtml), you’ll write code that can open each of the hundreds
    of spreadsheets in the BlueLeaks dataset and uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop to run your block of code on each row.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you’ll learn to make your programs more dynamic and useful
    by determining which blocks of code should run under which circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Control Flow</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python scripts start at the top and run one line of code at a time, but they
    don’t always run these lines consecutively. In <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loops, for example, the same block of code might run over and over again before
    the loop completes and the program continues to the next line. The order in which
    your lines of code run is your program’s *control flow*.
  prefs: []
  type: TYPE_NORMAL
- en: As you start writing code, you’ll often alter the control flow by telling your
    computer to do different things in different situations. If you write a program
    that loops through a list of files in a dataset, for instance, you may want to
    run different code when the program reaches a PDF document than when it encounters
    an MP4 video.
  prefs: []
  type: TYPE_NORMAL
- en: This section teaches you how to run certain blocks of code under certain conditions.
    To do this, you’ll learn how to compare values, use <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements based on these comparisons, and express arbitrarily complicated conditions
    using Boolean logic, all of which allow you to control the flow of your program.
    You’ll need this sort of logic whenever you write code that searches a dataset
    for something specific and then responds according to what it finds.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Comparison Operators</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this chapter, expressions that use the arithmetic operators
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">-</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">/</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">*</samp>
    generally evaluate to numbers: <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>, for example.
    Expressions in Python also use the following *comparison operators* to compare
    terms:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11"><</samp> Less than
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11"><=</samp> Less than or equal to
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">></samp> Greater than
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">>=</samp> Greater than or equal
    to
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">==</samp> Equal to (not to be confused
    with a single equal sign (<samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>),
    which defines a variable)
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">!=</samp> Not equal to
  prefs: []
  type: TYPE_NORMAL
- en: 'A *Boolean* is a type of variable that is either <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>. Expressions that
    use comparison operators evaluate to Booleans instead of numbers, as in the following
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use these same operators to compare strings, too. In Python, saying
    that one string is less than another means that the former comes before the latter
    in alphabetical order, as in the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Strings are case sensitive. If you don’t care about capitalization and want
    to just see whether the strings are made up of the same words, make them both
    lowercase before you compare them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This technique allows you to determine whether the data you’re evaluating fulfills
    a given condition. For example, in [Chapter 11](chapter11.xhtml), you’ll write
    code to analyze the metadata of over a million videos uploaded to the far-right
    social network Parler. Using comparison operators, you’ll determine which videos
    were filmed on January 6, 2021, in Washington, DC, during the insurrection after
    Trump lost the 2020 election.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">if Statements</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You use <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements to
    tell your code to do something under certain conditions but not others. The syntax
    for an <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">if</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">expression</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">:</samp> followed by an indented block
    of code. If the expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    then the code block runs. If the expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    the code doesn’t run, and the flow moves on to the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This code sets the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp>
    variable to <samp class="SANS_TheSansMonoCd_W5Regular_11">letmein</samp>. That
    means the expression in the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statement (<samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"letmein"</samp>)
    evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> and the
    code block runs, so it displays <samp class="SANS_TheSansMonoCd_W5Regular_11">ACCESS
    GRANTED</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Welcome</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now try including the wrong password in your <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: This time, because you set the password to <samp class="SANS_TheSansMonoCd_W5Regular_11">"yourefired"</samp>,
    the expression <samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"letmein"</samp>
    evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>, and Python
    doesn’t run the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement’s
    code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'An <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement can optionally
    incorporate an <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp> block
    so that if the condition is true, one code block runs, and if it’s false, another
    block runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: You can also incorporate <samp class="SANS_TheSansMonoCd_W5Regular_11">elif</samp>
    blocks, short for “else if.” These let you make another comparison if the first
    comparison is false, as shown in [Listing 7-1](#list7-1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-1: Comparing</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">if, elif, and else</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">statements</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In this code, the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement
    evaluates the <samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"letmein"</samp>
    expression. If it evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    the code block runs and displays the <samp class="SANS_TheSansMonoCd_W5Regular_11">ACCESS
    GRANTED</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Welcome</samp>
    messages. If the expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    the program moves on to the <samp class="SANS_TheSansMonoCd_W5Regular_11">elif</samp>
    block, which evaluates the <samp class="SANS_TheSansMonoCd_W5Regular_11">password</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"open
    sesame"</samp> expression. If that evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    it runs the block of code that displays <samp class="SANS_TheSansMonoCd_W5Regular_11">SECRET
    AREA ACCESS GRANTED</samp>. If it evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    the program moves on to the <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp>
    code block, which displays <samp class="SANS_TheSansMonoCd_W5Regular_11">ACCESS
    DENIED</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Nested Code Blocks</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also accomplish the results of [Listing 7-1](#list7-1) with multiple
    <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements and no <samp
    class="SANS_TheSansMonoCd_W5Regular_11">elif</samp>, using *nested* code blocks,
    or indented blocks of code inside other indented blocks of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This code is functionally the same as [Listing 7-1](#list7-1).
  prefs: []
  type: TYPE_NORMAL
- en: The more complicated your code, the more nested code blocks may come in handy.
    You might include <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops
    inside your <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement
    code blocks, or <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements
    inside <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops, or even
    <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops inside <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might prefer <samp class="SANS_TheSansMonoCd_W5Regular_11">elif</samp>
    statements to nested <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statements
    purely for readability purposes: it’s easier to read and write code with 100 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">elif</samp> statements than code that’s
    indented 100 times because it has 100 nested <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Searching Lists</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Python <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> operator,
    which tells you whether an item appears in a list, is useful for working with
    lists. For example, to check whether the number 42 appears in a list of numbers,
    you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: To the left of the <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp> operator
    is a potential item inside a list, and to the right is the list. If the item is
    in the list, then the expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>.
    If not, it evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use <samp class="SANS_TheSansMonoCd_W5Regular_11">not in</samp>
    to check if an item *isn’t* in a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can use <samp class="SANS_TheSansMonoCd_W5Regular_11">in</samp>
    to search for smaller strings inside of larger strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This code defines the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">sentence</samp>,
    then checks to see if the string <samp class="SANS_TheSansMonoCd_W5Regular_11">putin</samp>
    is inside the lowercase version of that sentence.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Logical Operators</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It’s possible to describe any scenario, no matter how complicated, using the
    *logical operators* <samp class="SANS_TheSansMonoCd_W5Regular_11">and</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">not</samp>.
    Like comparison operators, logical operators also evaluate to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>, and they let you
    combine comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say you like astronomy and want to know if it’s a good time for
    stargazing. Let’s set this up as a logical expression: if ((it’s dark out) **and**
    (it’s **not** raining) **and** (it’s **not** cloudy)) **or** (you have access
    to the James Webb Space Telescope), then yes. Otherwise, no. Logical operators
    let you define this sort of logic in your Python code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like other operators, the <samp class="SANS_TheSansMonoCd_W5Regular_11">and</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp> operators compare
    an expression on the left with an expression on the right. With <samp class="SANS_TheSansMonoCd_W5Regular_11">and</samp>,
    if both sides are true, the whole expression is true. If either is false, the
    whole expression is false. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">and</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'With <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp>, if either expression
    is true, the whole expression is true. The whole expression is false only when
    both expressions are false. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">or</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">or</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">or</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">or</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'The <samp class="SANS_TheSansMonoCd_W5Regular_11">not</samp> expression differs
    from the others in that it doesn’t use an expression to the left, just to the
    right. It flips true to false, and false to true. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">not</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">not</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
  prefs: []
  type: TYPE_NORMAL
- en: 'In sum, use <samp class="SANS_TheSansMonoCd_W5Regular_11">and</samp> to determine
    whether two things are both true, use <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp>
    to determine whether at least one of two things is true, and use <samp class="SANS_TheSansMonoCd_W5Regular_11">not</samp>
    to change a true to a false or vice versa. For example, consider this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The first <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement
    has an expression that compares two other expressions, <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"US"</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">21</samp>. If <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">US</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    is greater than or equal to <samp class="SANS_TheSansMonoCd_W5Regular_11">21</samp>,
    the expression simplifies to <samp class="SANS_TheSansMonoCd_W5Regular_11">True
    and True</samp>. Since both Booleans are true, this evaluates to simply <samp
    class="SANS_TheSansMonoCd_W5Regular_11">True</samp>, and the code block after
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement runs, printing
    <samp class="SANS_TheSansMonoCd_W5Regular_11">You can legally drink alcohol</samp>
    to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The first <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp> block determines
    what happens if that expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>.
    For example, if <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp> is
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Italy</samp>, but <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">30</samp>, the expression simplifies
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">False and True</samp>. Since
    at least one of the Booleans is false, this evaluates to simply <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    so the code block after <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp>
    runs. Likewise, if <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">US</samp> but <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">18</samp>, then the expression
    simplifies to <samp class="SANS_TheSansMonoCd_W5Regular_11">True and False</samp>.
    This, too, evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    so the code block after <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp>
    runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the second <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp>
    block is a simple <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement
    without Boolean logic: if <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    isn’t <samp class="SANS_TheSansMonoCd_W5Regular_11">US</samp>, the screen displays
    <samp class="SANS_TheSansMonoCd_W5Regular_11">I don''t know about your country</samp>.
    Otherwise (meaning <samp class="SANS_TheSansMonoCd_W5Regular_11">country</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">US</samp>), it displays <samp
    class="SANS_TheSansMonoCd_W5Regular_11">You''re too young to legally drink alcohol</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like with math, you can use parentheses in <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements to compare multiple expressions. For example, the drinking age in the
    US is 21 and the drinking age in Italy is 18\. Let’s add Italy to this program,
    this time incorporating an <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp>
    operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'In plain English, the first <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statement tells the program that if your country is the US and you’re at least
    21 *or* if your country is Italy and you’re at least 18, then you can legally
    drink. In either case, the whole expression in the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statement is true, and the program prints <samp class="SANS_TheSansMonoCd_W5Regular_11">You
    can legally drink alcohol</samp>. If just one of those is true and not the other
    (for instance, if you’re a 19-year-old Italian), the whole statement is still
    true. That’s what <samp class="SANS_TheSansMonoCd_W5Regular_11">or</samp> means:
    if either of the things you’re comparing is true, then the whole expression is
    true.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the operator <samp class="SANS_TheSansMonoCd_W5Regular_11">not</samp> to
    turn <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> values into <samp
    class="SANS_TheSansMonoCd_W5Regular_11">False</samp> or <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>
    values into <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: You could replace <samp class="SANS_TheSansMonoCd_W5Regular_11">not age</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">>=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">21</samp>
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">age</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11"><</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">21</samp> for the same result.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Exception Handling</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Python programs may abruptly quit with an error called an *exception*. This
    is typically known as “throwing an exception.” *Exception handling* ensures that
    your Python code will run another code block when your code catches an exception,
    instead of quitting with an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ve seen a few examples of exceptions already in this chapter, like when
    you tried dividing by zero (something you can’t do in math) or using a variable
    that hasn’t been defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: In these cases, Python threw a <samp class="SANS_TheSansMonoCd_W5Regular_11">ZeroDivisionError</samp>
    exception and a <samp class="SANS_TheSansMonoCd_W5Regular_11">NameError</samp>
    exception, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can write code that catches exceptions when they’re thrown, allowing you
    to handle them gracefully. For example, let’s say you have a list of names called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">names</samp>, and you want display
    the first name in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: This code displays the value at <samp class="SANS_TheSansMonoCd_W5Regular_11">names[0]</samp>,
    or the first item in the <samp class="SANS_TheSansMonoCd_W5Regular_11">names</samp>
    list. This works as expected if there are a few names in the list. But what if
    <samp class="SANS_TheSansMonoCd_W5Regular_11">names</samp> is empty?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In this case, since the index 0 doesn’t exist because the list is empty, Python
    throws an <samp class="SANS_TheSansMonoCd_W5Regular_11">IndexError</samp> exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can catch this exception using <samp class="SANS_TheSansMonoCd_W5Regular_11">try</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp> statements, like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This code first runs a <samp class="SANS_TheSansMonoCd_W5Regular_11">try</samp>
    statement, followed by a code block. It attempts to run the code in that block,
    and if it succeeds without hitting an exception, it moves on to the next line
    of code after the <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp>
    block. However, if it hits an exception, then it runs the code in the <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp>
    block before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it looks like when there’s no exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the code block after the <samp class="SANS_TheSansMonoCd_W5Regular_11">try</samp>
    statement ran successfully, so the control flow moved on past the <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp>
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it looks like when the exception is thrown, but the code catches
    it and handles it gracefully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The code block after the <samp class="SANS_TheSansMonoCd_W5Regular_11">try</samp>
    statement ran, but Python threw an <samp class="SANS_TheSansMonoCd_W5Regular_11">IndexError</samp>
    exception when it evaluated <samp class="SANS_TheSansMonoCd_W5Regular_11">names[0]</samp>.
    Instead of crashing and displaying an error, this code caught the exception and
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp> block ran. In
    this case, the <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp> statement
    runs if any exception is thrown in the <samp class="SANS_TheSansMonoCd_W5Regular_11">try</samp>
    block, but you can get more granular than that by using different <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp>
    statements for different types of exceptions. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: By using <samp class="SANS_TheSansMonoCd_W5Regular_11">except</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Exception</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">:</samp>, where you replace <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">Exception</samp>
    with a specific exception you’re interested in catching, you can write different
    code to handle different types of exceptions. You’ll revisit exception handling
    in [Chapter 10](chapter10.xhtml), when you learn how to work with JSON data, and
    in the [Chapter 14](chapter14.xhtml) case study on neo-Nazi chat logs.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how control flow works in Python, you’ll practice some basic
    Python syntax and make comparisons using <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements and Boolean logic in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 7-4: Practice Loops and Control
    Flow</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In social media slang, a common form of mockery is to employ *alternating caps*,
    or switching from uppercase to lowercase and back to uppercase, when quoting people.
    For example, here’s the text of a viral tweet from the now-suspended Twitter account
    @BigWangTheoryy:'
  prefs: []
  type: TYPE_NORMAL
- en: '*failing classes*Me: “Can I get some extra credit?”Professor: “cAn i GEt SomE
    eXtRa creDiT?”'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this exercise, you’ll write a Python script that starts with some text and
    converts it into alternating caps style, using the control flow concepts you learned
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, create a new file called *exercise-7-4.py*, and start
    by defining the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest way to write this script is to start with an empty string, called
    <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps_text</samp>, and
    then loop through the characters in <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>,
    adding characters to <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps_text</samp>
    one at a time and alternating their capitalization as you do so. Add a second
    line to your script defining that variable, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you’ll define a Boolean variable called <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be_capital</samp>.
    Each time you loop through a character in <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>,
    you’ll use this Boolean to keep track of whether the current character should
    be capital or lowercase. For this example, start with a capital letter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Beneath that line, add the main part of the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Using a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop, this
    code loops through the characters in <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>,
    storing each character in the <samp class="SANS_TheSansMonoCd_W5Regular_11">character</samp>
    variable. It then adds these characters to <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps_text</samp>,
    switching between upper- and lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: During each iteration of the <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop, <samp class="SANS_TheSansMonoCd_W5Regular_11">character</samp> is another
    character in <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>, the variable
    containing the <samp class="SANS_TheSansMonoCd_W5Regular_11">"One does not simply
    walk into Mordor"</samp> string. The first time the code loops, <samp class="SANS_TheSansMonoCd_W5Regular_11">character</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">O</samp>. When the code reaches
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement, <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be_capital</samp>
    evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> for this
    character, so the code block runs. The <samp class="SANS_TheSansMonoCd_W5Regular_11">+=</samp>
    operator adds <samp class="SANS_TheSansMonoCd_W5Regular_11">character.upper()</samp>
    (or the uppercase version of <samp class="SANS_TheSansMonoCd_W5Regular_11">character</samp>)
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps_text</samp>.
    Since the code began by adding a capital letter, you want it to add a lowercase
    letter next, so you set <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be
    _capital</samp> to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>.
    The code block ends, and the code starts its second loop.
  prefs: []
  type: TYPE_NORMAL
- en: During the second iteration, <samp class="SANS_TheSansMonoCd_W5Regular_11">character</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">n</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be_capital</samp>
    evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>. When
    the code reaches the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement,
    the expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>,
    so the <samp class="SANS_TheSansMonoCd_W5Regular_11">else</samp> block runs. This
    is similar to the other block, except that it appends the lowercase version of
    character, <samp class="SANS_TheSansMonoCd_W5Regular_11">character.lower()</samp>,
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">alternative_caps_text</samp>
    and sets <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be_capital</samp>
    back to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>. So far, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps_text</samp> is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">On</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: During the third iteration, <samp class="SANS_TheSansMonoCd_W5Regular_11">character</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">e</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be_capital</samp>
    evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>. When the
    code reaches the <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp> statement,
    the expression evaluates to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    so that code block runs again, adding a capital <samp class="SANS_TheSansMonoCd_W5Regular_11">E</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating _caps_text</samp>
    and setting <samp class="SANS_TheSansMonoCd_W5Regular_11">should_be_capital</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp> again. The code
    continues in this way for the rest of the characters in <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>.
    Note that the uppercase and lowercase versions of the space character, <samp class="SANS_TheSansMonoCd_W5Regular_11">"
    ".upper()</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">" ".lower()</samp>,
    are identical. The <samp class="SANS_TheSansMonoCd_W5Regular_11">upper()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">lower()</samp> methods also
    don’t change punctuation characters like <samp class="SANS_TheSansMonoCd_W5Regular_11">,</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">.</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">!</samp>,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'When this <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loop is
    finished, all you have left to do is display the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps_text</samp>
    by adding this line to your script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Your Python script is complete (you can also find a complete copy at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-7<wbr>/exercise<wbr>-7<wbr>-4<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-7/exercise-7-4.py)).
    Run your script. Here’s the output I get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now change the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>
    and run the script again. For example, I changed the value to <samp class="SANS_TheSansMonoCd_W5Regular_11">"There
    are very fine people on both sides"</samp>:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ve gained a beginner’s understanding of using lists and loops and controlling
    the flow of execution. I’ll conclude the chapter with one more fundamental programming
    skill: breaking your code down into simpler chunks using functions.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Functions</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The more complicated your programs get, the more important it is to break the
    problems you’re trying to solve down into smaller chunks and work on them individually.
    This allows you to focus on the bigger picture, using those smaller chunks of
    code as building blocks. In this section, you’ll learn how to do this using functions.
  prefs: []
  type: TYPE_NORMAL
- en: '*Functions*, fundamental building blocks of programming, are reusable chunks
    of code. They take *arguments*—the variables that you pass into a function—as
    input and can *return* a value after they finish running. You’ve already used
    a few functions that come with Python, like <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">len()</samp>, but you can also
    define your own function and use it as many times as you want without having to
    rewrite that code. You’ll learn how to do that in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The def Keyword</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can define a new function using the <samp class="SANS_TheSansMonoCd_W5Regular_11">def</samp>
    keyword. For example, this code defines a function called <samp class="SANS_TheSansMonoCd_W5Regular_11">test()</samp>,
    which prints a string to your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Function definition lines end with a colon and are followed by an indented
    code block that defines exactly what the function does: in this case, it displays
    the string <samp class="SANS_TheSansMonoCd_W5Regular_11">this is a test function</samp>.
    This <samp class="SANS_TheSansMonoCd_W5Regular_11">test()</samp> function doesn’t
    include any arguments, which means every time you run it, it will do the exact
    same thing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-2](#list7-2) defines a slightly more complicated function, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>, that adds two numbers together.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-2: Defining an example
    function</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This new function takes <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> as arguments and returns
    the sum of those two variables. For any function that takes more than one argument,
    like this one, you separate the arguments with commas (<samp class="SANS_TheSansMonoCd_W5Regular_11">,</samp>).
  prefs: []
  type: TYPE_NORMAL
- en: Each variable has a *scope*, which describes which parts of your code can use
    that variable. The arguments of a function (in this case, <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>), as well as any variables
    defined inside the function, have a scope that can be accessed only by code in
    that function’s code block. In other words, you can use these <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp> variables only inside
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp> function, and they
    won’t be defined outside of that code block.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can think of defining a function as telling Python, “I’m making a new function
    with this name, and here’s what it does.” However, the function itself won’t run
    until you *call* it. Consider the following Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: First, the code defines a function called <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>
    to be a code block with just a <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    statement. This function doesn’t run yet. The code then defines the <samp class="SANS_TheSansMonoCd_W5Regular_11">red_apples</samp>
    variable, setting its value to <samp class="SANS_TheSansMonoCd_W5Regular_11">10</samp>,
    and the <samp class="SANS_TheSansMonoCd_W5Regular_11">green_apples</samp> variable,
    setting its value to <samp class="SANS_TheSansMonoCd_W5Regular_11">6</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: The next line starts with <samp class="SANS_TheSansMonoCd_W5Regular_11">total_apples</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>, but before Python can
    set the value of that variable, it needs to learn what that value should be. To
    do that, the code first calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>
    function, passing in the arguments <samp class="SANS_TheSansMonoCd_W5Regular_11">red_apples</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">green_apples</samp> as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">a</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>.
    Now that the code is finally calling this function, <samp class="SANS_TheSansMonoCd_W5Regular_11">return
    a</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    runs. In this function call, <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">red_apples</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>
    is <samp class="SANS_TheSansMonoCd_W5Regular_11">green_apples</samp>. The function
    returns <samp class="SANS_TheSansMonoCd_W5Regular_11">a</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">+</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">b</samp>, which is <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>.
    Now that the <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp> function
    has returned, the code defines a variable called <samp class="SANS_TheSansMonoCd_W5Regular_11">total_apples</samp>,
    setting its value to the return value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>
    function, <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the code calls the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    function, passing in an f-string as an argument, which displays the <samp class="SANS_TheSansMonoCd_W5Regular_11">total_apples</samp>
    variable. It will display the message <samp class="SANS_TheSansMonoCd_W5Regular_11">There
    are 16 apples</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Default Arguments</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Function definitions can also have *default arguments*, which means defining
    their value is optional. If you haven’t passed in any values for them when the
    function is called, the default value is used instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider this function, which, given a number and optionally a
    number of exclamation marks and question marks, prints a greeting using its arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The argument <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp> is a
    *positional argument*, which means when you call this function, the first argument
    you pass in always has to be <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>.
    However, <samp class="SANS_TheSansMonoCd_W5Regular_11">num_exclamations</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">num_questions</samp> are default
    arguments, so passing values in for those is optional. The <samp class="SANS_TheSansMonoCd_W5Regular_11">greet()</samp>
    function defines the strings <samp class="SANS_TheSansMonoCd_W5Regular_11">exclamations</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">questions</samp> and sets them
    to a series of exclamation points and question marks. (In Python, when you multiply
    a string by a number, you get the original string repeated multiple times; for
    example, <samp class="SANS_TheSansMonoCd_W5Regular_11">"A" * 3</samp> evaluates
    to the string <samp class="SANS_TheSansMonoCd_W5Regular_11">AAA</samp>.) The code
    then displays <samp class="SANS_TheSansMonoCd_W5Regular_11">Hello</samp>, followed
    by the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>, followed
    by the number of exclamation points and question marks passed into the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function has one positional argument (<samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>)
    and two default arguments (<samp class="SANS_TheSansMonoCd_W5Regular_11">num_exclamations</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">num_questions</samp>). You can
    call it just passing in <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>,
    without passing values in for the default arguments, and they will automatically
    be set to 3 and 2, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also keep the default value for one of the default arguments, but choose
    a value for another. When you manually choose a value for a default argument,
    you’re using a *keyword argument*. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The first function call uses keyword arguments for both <samp class="SANS_TheSansMonoCd_W5Regular_11">num_exclamation</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">num_questions</samp>; the second
    function call uses a keyword argument only for <samp class="SANS_TheSansMonoCd_W5Regular_11">num_questions</samp>
    and uses the default argument for <samp class="SANS_TheSansMonoCd_W5Regular_11">num_exclamations</samp>;
    and the third function call uses a keyword argument for <samp class="SANS_TheSansMonoCd_W5Regular_11">num_exclamations</samp>
    and uses the default argument for <samp class="SANS_TheSansMonoCd_W5Regular_11">num_questions</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Return Values</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Functions become a lot more useful when they take some input, do some computation,
    and then return a value, known as the *return value*. The <samp class="SANS_TheSansMonoCd_W5Regular_11">greet()</samp>
    function just described displays output, but it doesn’t return a value that I
    could save in a variable or pass into further functions. However, the <samp class="SANS_TheSansMonoCd_W5Regular_11">len()</samp>
    function you used earlier takes input (a list or a string), does some computation
    (calculates the length of the list or string), and returns a value (the length).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of a function that takes a string <samp class="SANS_TheSansMonoCd_W5Regular_11">s</samp>
    as an argument and returns the number of vowels in the string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'This function brings together many of the concepts covered in this chapter
    so far: it defines the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_vowels</samp>
    as <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, then defines the variable
    <samp class="SANS_TheSansMonoCd_W5Regular_11">vowels</samp> as a string containing
    lowercase and uppercase English vowels. Next, it uses a <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp>
    loop to loop through each character in <samp class="SANS_TheSansMonoCd_W5Regular_11">s</samp>,
    the string that’s passed into the function.'
  prefs: []
  type: TYPE_NORMAL
- en: In each loop, the code uses an <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statement to check whether the character is a vowel (since <samp class="SANS_TheSansMonoCd_W5Regular_11">vowels</samp>
    contains both lowercase and uppercase letters, this code considers both <samp
    class="SANS_TheSansMonoCd_W5Regular_11">a</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">A</samp>
    to be vowels). If the character is a vowel, the code increases the <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_vowels</samp>
    variable by one. Finally, it returns <samp class="SANS_TheSansMonoCd_W5Regular_11">number_of_vowels</samp>,
    which equals however many vowels it counted in <samp class="SANS_TheSansMonoCd_W5Regular_11">s</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples of calling this function and passing in different strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'When you define a variable, you can set its value to the return value of a
    function just by setting the variable equal to that function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This code defines the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">num_vowels_think</samp>
    and sets its value to the return value of <samp class="SANS_TheSansMonoCd_W5Regular_11">count_vowels("THINK")</samp>,
    or the number of vowels in the string <samp class="SANS_TheSansMonoCd_W5Regular_11">THINK</samp>.
    It also defines the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">num_vowels_lizard</samp>
    and sets its value to the return value of <samp class="SANS_TheSansMonoCd_W5Regular_11">count_vowels("lizard")</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then use those variables to define new variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: This code adds those two variables together, saving their sum in a new variable
    called <samp class="SANS_TheSansMonoCd_W5Regular_11">total_vowels</samp>. It then
    prints the value of <samp class="SANS_TheSansMonoCd_W5Regular_11">total_vowels</samp>
    to the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp> statement
    runs, the function immediately ends, so <samp class="SANS_TheSansMonoCd_W5Regular_11">return</samp>
    is also useful if you want to stop a function early. For example, the following
    <samp class="SANS_TheSansMonoCd_W5Regular_11">is_exciting()</samp> function loops
    through all the characters in a string <samp class="SANS_TheSansMonoCd_W5Regular_11">s</samp>
    to check whether the character is an exclamation point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: If the function finds an exclamation point, it returns <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>,
    immediately stopping the function. If it checks each character and finds no exclamation
    points, it returns <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>.
    For example, if you call this function and pass in the string <samp class="SANS_TheSansMonoCd_W5Regular_11">!@#$</samp>,
    the function will return <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    during the first iteration of the loop and immediately end—it will never even
    get to the second iteration. If you pass in the string <samp class="SANS_TheSansMonoCd_W5Regular_11">hello!</samp>,
    it won’t return <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp> until
    the last iteration of the loop, since it doesn’t find the <samp class="SANS_TheSansMonoCd_W5Regular_11">!</samp>
    until the end of the string. And if you pass in the string <samp class="SANS_TheSansMonoCd_W5Regular_11">goodbye</samp>,
    it will loop through the entire string and not find an exclamation point, so it
    will return <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Docstrings</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In *self-documenting* code, documentation is defined as part of the code as
    docstrings rather than in a separate document. *Docstrings* are strings enclosed
    by three double quotes (<samp class="SANS_TheSansMonoCd_W5Regular_11">"""</samp>)
    or three single quotes (<samp class="SANS_TheSansMonoCd_W5Regular_11">'</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">''</samp>) on either side, placed as the
    first line of code after a function definition. When you run the function, the
    program ignores the docstring, but Python can use it to pull up documentation
    about the function on request. Docstrings are optional, but they can help other
    people understand your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here’s how you’d define the <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>
    function with a docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: This is exactly the same as the <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>
    function defined in [Listing 7-2](#list7-2), except it includes a docstring.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the <samp class="SANS_TheSansMonoCd_W5Regular_11">help()</samp>
    function, passing in the name of a function (without arguments) as the argument,
    the Python interpreter will display documentation for that function. For example,
    running <samp class="SANS_TheSansMonoCd_W5Regular_11">help(sum)</samp> gives you
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">help()</samp> function works
    for any function, though it’s useful only if the programmer who wrote that function
    included a docstring. In this case, it tells you that it’s showing you help for
    the function called <samp class="SANS_TheSansMonoCd_W5Regular_11">sum()</samp>
    in the <samp class="SANS_TheSansMonoCd_W5Regular_11">__main__</samp> module. You’ll
    learn more about modules in [Chapter 8](chapter8.xhtml), but they’re essentially
    functions you write yourself. Try running <samp class="SANS_TheSansMonoCd_W7Bold_B_11">help(print)</samp>
    or <samp class="SANS_TheSansMonoCd_W7Bold_B_11">help(len)</samp> to view the docstrings
    for the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">len()</samp> functions.
  prefs: []
  type: TYPE_NORMAL
- en: Press Q to get out of the help interface and back to the Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Exercise 7-5: Practice Writing Functions</samp>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you’ll turn the script you wrote in Exercise 7-4 into a function.
    You can then call this function multiple times, passing text into it so that it
    returns an alternating caps version of that text each time.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your text editor, create a new file called *exercise-7-5.py* and create
    a new function called <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps()</samp>,
    which takes in the argument <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp>,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Next, copy the code from Exercise 7-4 and paste it into this function, making
    sure to indent it so that it aligns with the docstring. Delete the line that defines
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp> value; instead,
    define <samp class="SANS_TheSansMonoCd_W5Regular_11">text</samp> by passing it
    into the function as an argument. Also change the last line of the Exercise 7-4
    code from <samp class="SANS_TheSansMonoCd_W5Regular_11">print(alternating_caps_text)</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">return alternating_caps_text</samp>.
    This function shouldn’t display the alternating caps version of a string; it should
    create a variable containing this version of a string and return it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your complete function should look like this (you can also find a copy at [*https://<wbr>github<wbr>.com<wbr>/micahflee<wbr>/hacks<wbr>-leaks<wbr>-and<wbr>-revelations<wbr>/blob<wbr>/main<wbr>/chapter<wbr>-7<wbr>/exercise<wbr>-7<wbr>-5<wbr>.py*](https://github.com/micahflee/hacks-leaks-and-revelations/blob/main/chapter-7/exercise-7-5.py)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have a function—a reusable chunk of code—you can use it as many
    times as you want. Call this function a few times, remembering to display its
    return value using the <samp class="SANS_TheSansMonoCd_W5Regular_11">print()</samp>
    function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: You can change the text that you pass in to the <samp class="SANS_TheSansMonoCd_W5Regular_11">alternating_caps()</samp>
    function calls to whatever you want.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what it looks like when I run this script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: While the output of this script is displayed in a mocking tone, I hope that
    the sentiment is true for you!
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter has covered several basic Python programming concepts you’ll rely
    upon in future investigations. You learned to write simple Python scripts that
    incorporate the major features of the language, including variables, <samp class="SANS_TheSansMonoCd_W5Regular_11">if</samp>
    statements, <samp class="SANS_TheSansMonoCd_W5Regular_11">for</samp> loops, and
    functions. You’re ready to continue your Python programming journey in the next
    chapter, this time writing code to directly investigate datasets.
  prefs: []
  type: TYPE_NORMAL
