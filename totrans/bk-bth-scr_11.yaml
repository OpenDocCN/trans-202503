- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: 10 CALLING ROUTINES AND BAT FILES
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10 调用例程和批处理文件
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In the previous chapter, I introduced labels and nonsequential execution, both
    of which also play a major part in this chapter. I’ll soon introduce a new twist
    on an already discussed command, allowing you to create and call a routine defined
    by a label. Instead of simply handing control over to the code just after the
    label, control is returned to the place from where it was called after the routine
    executes. As you write more complex and interesting bat files, you’ll want a full
    understanding of routines.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我介绍了标签和非顺序执行，它们在本章中也发挥了重要作用。我将很快介绍一种已经讨论过的命令的新变化，使你能够创建并调用由标签定义的例程。控制权不会仅仅交给标签后面的代码，而是在例程执行后返回到调用它的地方。当你编写更复杂、更有趣的批处理文件时，你将希望充分理解例程。
- en: In [Chapter 8](chapter8.xhtml), I introduced the concept of calling executables
    compiled in other languages. I’ll expand on that discussion here, describing different
    techniques for one bat file calling another bat file. You’ll obviously learn about
    the most typical type of call, one that returns control to the calling bat file.
    But you’ll also learn techniques for relinquishing control to the called bat file
    and how to spawn a second parallel Batch process. In addition, you’ll explore
    different ways to exit from a routine or bat file gracefully, with or without
    a return code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](chapter8.xhtml)中，我介绍了调用用其他语言编译的可执行文件的概念。这里我将扩展这一讨论，描述一个批处理文件调用另一个批处理文件的不同技巧。显然，你将了解最典型的调用方式，即将控制权返回给调用批处理文件的方式。但你也会学到将控制权交给被调用批处理文件的技巧，以及如何生成一个并行的第二个批处理进程。此外，你还将探索不同的退出例程或批处理文件的方式，无论是否带有返回代码。
- en: The call Command, Revisited
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用命令，再探讨
- en: Before you can create callable internal routines, you must understand the similarities
    and differences between two commands that work with labels. One is the call command
    first introduced in [Chapter 8](chapter8.xhtml), where we used it to call programs
    compiled in other languages. The other is the goto command, introduced in [Chapter
    9](chapter9.xhtml) for altering the execution flow of a bat file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建可调用的内部例程之前，你必须了解两个与标签相关的命令的相似性和差异性。一个是[第8章](chapter8.xhtml)中首次介绍的call命令，我们用它来调用用其他语言编译的程序。另一个是[第9章](chapter9.xhtml)中介绍的goto命令，用于改变批处理文件的执行流程。
- en: 'To compare and contrast the two commands, recall this code from [Chapter 9](chapter9.xhtml):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对比这两个命令，回顾[第9章](chapter9.xhtml)中的这段代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The goto command skipped the middle echo command, resulting in this output:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: goto命令跳过了中间的echo命令，导致输出结果如下：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To demonstrate the contrast, [Listing 10-1](#Lis10-1) changes every instance
    of goto in that code to call, including both the goto command and the text in
    the echo commands, while leaving everything else identical in this very concise
    bat file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示两者的对比，[清单10-1](#Lis10-1)将代码中的每个goto实例替换为call，包括goto命令和echo命令中的文本，同时保持此非常简洁的批处理文件中的其他内容不变。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 10-1: A short bat file demonstrating the call command'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-1：演示call命令的简短批处理文件
- en: Execute the bat file from [Listing 10-1](#Lis10-1), and you’ll get the four
    lines shown in [Listing 10-2](#Lis10-2) written to the console, not the three
    some may have expected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 执行[清单10-1](#Lis10-1)中的批处理文件，你会在控制台上看到[清单10-2](#Lis10-2)中显示的四行内容，而不是某些人预期的三行。
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 10-2: The results written to the console when executing [Listing 10-1](#Lis10-1)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-2：执行[清单10-1](#Lis10-1)时写入控制台的结果
- en: The display of Before CALL obviously executes right off the bat (pun intended).
    The call command temporarily hands control to the code just after the label, resulting
    in After LABEL being displayed. When this was a goto command, that was it; the
    bat file ended after that display. But with the call command, after everything
    between :MyLabel and the end of the bat file executes, control returns to the
    command immediately after the call command. Hence, After CALL is displayed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “Before CALL”的显示显然会立即执行（双关含义）。call命令暂时将控制权交给标签后面的代码，导致显示“After LABEL”。当时如果是goto命令，那就结束了；批处理文件在那次显示之后就终止了。但是使用call命令时，在执行完：MyLabel和批处理文件结尾之间的所有内容后，控制权会返回到call命令后面紧接的命令。因此，显示“After
    CALL”。
- en: Some might expect the execution to be completed at this point, but the interpreter
    next encounters :MyLabel again. We aren’t calling it or going to it; instead,
    it’s just the next line of code. Notice that I didn’t call it a command or even
    a statement. It’s just a line of code, a placeholder, and in this context, little
    more than a very subtle speed bump on the path to the next command. The interpreter
    moves on to the last line in the bat file, and the text After LABEL is displayed
    a second time. The interpreter finds no other command to interpret, and the bat
    file is done.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会认为执行到此为止，但解释器接下来再次遇到 :MyLabel。我们没有调用它，也没有跳转到它；它只是代码的下一行。请注意，我没有称它为命令或语句。它只是代码的一行，占位符，在这个上下文中，除了是通向下一个命令的微妙“减速带”外，几乎没有其他意义。解释器继续执行
    bat 文件中的最后一行，并且 After LABEL 文本第二次显示。解释器没有找到其他命令需要解释，bat 文件执行完毕。
- en: While the goto command relinquishes control, the call command remembers from
    where it came and returns to that spot when its business is done. We now have
    the makings of a callable internal routine, and we’ll be calling that routine
    with the call command.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 goto 命令放弃了控制权，但 call 命令会记住它来自何处，并在完成任务后返回到该位置。现在我们已经具备了可调用的内部例程，我们将通过 call
    命令调用该例程。
- en: Calling Internal Routines
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用内部例程
- en: As your Batch code gets more interesting, you’ll want to execute a bit of code
    multiple times from various locations in a bat file. For instance, you might want
    to call an executable more than once, or you might want to periodically check
    a directory for some files in need of copying. When we get to interactive Batch,
    you might want to ask the user a question and get a response several times.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的 Batch 代码变得更加复杂时，你可能会想从 bat 文件中的不同位置多次执行某段代码。例如，你可能想多次调用一个可执行文件，或者定期检查某个目录中是否有需要复制的文件。当我们进入交互式
    Batch 时，你可能会想多次询问用户问题并获取响应。
- en: Faced with a need for multiple invocations of a section of code, a novice coder
    might resort to cutting and pasting—a loathsome and odious option in my exceedingly
    judgmental (but accurate) opinion. A far better solution is to create an internal
    routine and call it from those multiple locations. You can even place some code
    that’s called only once into a routine just to better organize your bat file.
    Sometimes it’s perfectly fine to run right through a label, but more times than
    not, you’ll want to create a routine that can be invoked only by calling it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 面对需要多次调用某段代码的需求，一位新手程序员可能会 resort to cut and paste——在我极为评判（但准确）的看法中，这是一种令人厌恶的选择。一个更好的解决方案是创建一个内部例程，并从多个位置调用它。你甚至可以将一些只调用一次的代码放入一个例程中，便于更好地组织你的
    bat 文件。有时直接通过标签运行是完全可以的，但更多时候，你可能希望创建一个只能通过调用才会执行的例程。
- en: 'For the following exercise, I’ll take [Listing 10-1](#Lis10-1) and reconfigure
    it so that the label defines a callable routine. That is, the execution flow will
    call the routine, return from it, and exit the bat file before falling through
    to that routine again. To this end, I’ll need a way to terminate both the routine
    and bat file. The final display of After LABEL that appears in [Listing 10-2](#Lis10-2)
    will be no more. Instead, we’ll expect these three lines of output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于接下来的练习，我将以[清单 10-1](#Lis10-1)为例，重新配置它，使得标签定义了一个可调用的例程。也就是说，执行流程会调用该例程，执行完毕后返回，再退出
    bat 文件，避免再次执行该例程。为此，我需要一种方法来终止例程和 bat 文件。在[清单 10-2](#Lis10-2)中，After LABEL 显示的内容将不再出现。相反，我们将期待以下三行输出：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following code, which looks quite a bit different, does exactly that:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码，尽管看起来与之前的不同，但正是做了这件事：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Before stepping through the code, notice the three goto :eof commands. As you
    might expect, the first one ❷ jumps to the *end of file*, ceasing the bat file.
    The other two ❹ ❻ are something quite different—something new.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在逐步执行代码之前，请注意这三条 goto :eof 命令。正如你所预料的，第一个 ❷ 跳转到*文件末尾*，终止 bat 文件。其他两条 ❹ ❻ 则是完全不同的——是一些新的内容。
- en: After the initial echo command, the call command ❶ invokes the routine that
    :MyLabel ❸ defines, which contains just two commands. The first is the familiar
    echo of After LABEL to the console, and the second is a goto :eof command ❹. Because
    this command is being executed after a label is called, it ends not the file but
    the routine, and control returns to the command just after the call command ❶,
    writing After CALL to the console. Finally, the main goto :eof command ❷ exits
    the bat file, because the interpreter knows that it isn’t in a routine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始的 `echo` 命令之后，`call` 命令 ❶ 调用了 :MyLabel ❸ 定义的例程，该例程仅包含两条命令。第一条是熟悉的将 “After
    LABEL” 打印到控制台，第二条是一个 `goto :eof` 命令 ❹。因为该命令在标签调用后执行，所以它结束的不是文件而是例程，控制会返回到 `call`
    命令 ❶ 之后的命令，打印 “After CALL” 到控制台。最后，主 `goto :eof` 命令 ❷ 退出了 bat 文件，因为解释器知道它不在例程中。
- en: When inside the :MyLabel ❸ routine, going to :eof (or *end of file*) is a misnomer;
    it’s really more of an *end of routine*, but let’s not quibble over semantics.
    If you remove this goto :eof command ❹, control would’ve continued through to
    the code under :AnotherLabel ❺ before returning to the mainline logic. But with
    this command ❹, the code under :AnotherLabel never executes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 :MyLabel ❸ 例程内部时，跳转到 :eof（或 *文件结束*）是一个误称；它实际上更像是 *例程结束*，但我们不必在语义上纠缠。如果去掉这个
    `goto :eof` 命令 ❹，控制会继续执行到 :AnotherLabel ❺ 下的代码，然后再返回主线逻辑。但有了这个命令 ❹，则 :AnotherLabel
    下的代码永远不会执行。
- en: Since the goto :eof command has two distinct uses, I usually follow such commands
    with a remark defining exactly what it’s terminating, either the name of the routine
    or the bat file itself. I’m simply placing the rem command after an ampersand,
    which separates the two commands on a single line of code. Programmatically, it’s
    not necessary, but this practice very much enhances the code’s readability, especially
    when the routines become longer and more complex than the previous examples.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `goto :eof` 命令有两种不同的用途，我通常会在此类命令后添加注释，明确指出它正在终止的内容，可能是例程的名称或是 bat 文件本身。我只是将
    `rem` 命令放在一个 & 符号后面，& 符号将两条命令分开，写在同一行代码中。从程序角度看，这并不是必须的，但这种做法确实大大提高了代码的可读性，尤其是在例程变得比之前的示例更长、更复杂时。
- en: Calling Bat Files
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用 Bat 文件
- en: Short or repetitive bits of code are great candidates for internal routines;
    you can add one or more routines to the end of a bat file to create a well-organized
    module of which you can be proud. But sometimes those short bits of code aren’t
    so short, or they are so useful that you would like to make them available to
    other bat files written by you and maybe even others. Instead of a routine, this
    scenario calls for one bat file calling another bat file. For instance, you might
    create a single bat file to handle logging and call it from multiple other bat
    files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 短小或重复的代码片段非常适合放入内部例程中；你可以在 bat 文件的末尾添加一个或多个例程，创建一个结构良好的模块，你可以为此感到自豪。但有时这些短小的代码片段并不那么简短，或者它们非常有用，以至于你希望将它们提供给其他由你编写的，甚至是其他人编写的
    bat 文件。在这种情况下，应该用一个 bat 文件调用另一个 bat 文件，而不是创建一个例程。例如，你可以创建一个单独的 bat 文件来处理日志记录，并从多个其他
    bat 文件中调用它。
- en: 'Executing one bat file from another works a bit differently than executing
    an internal routine. But first, let’s return to how a compiled program is executed
    from [Chapter 8](chapter8.xhtml). When the interpreter comes across a line of
    code that’s simply the name of an executable, it invokes the executable. Hence,
    this “command” executes the program:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从另一个 bat 文件执行一个 bat 文件的方式与执行内部例程有些不同。但首先，让我们回到 [第 8 章](chapter8.xhtml) 中如何执行编译程序。当解释器遇到一行仅包含可执行文件名的代码时，它会调用该可执行文件。因此，这条“命令”执行了程序：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the program completes its task, control returns to the bat file. You
    might expect the calling of a bat file to work the same way, but alas, it does
    not. However, the following line of code indeed executes the called bat file,
    but with an enormous batveat:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 程序完成任务后，控制会返回到 bat 文件。你可能期望调用一个 bat 文件的方式与此相同，但实际上并非如此。然而，以下这一行代码确实执行了被调用的 bat
    文件，但存在一个巨大的警告：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'That batveat is simple: control never returns to the calling bat file. The
    entire process ends when the called bat file ends. The vast majority of the time
    you’ll want control returned; otherwise, there wouldn’t be much point in coding
    anything after the invocation of the called bat file. To see control returned,
    you can insert the call command just before the called bat file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那个 bat 文件的特点很简单：控制永远不会返回到调用它的 bat 文件。整个过程在被调用的 bat 文件结束时就结束了。绝大多数情况下，你都希望控制能够返回；否则，在调用
    bat 文件后继续编码就没有什么意义了。为了看到控制返回，你可以在被调用的 bat 文件之前插入 call 命令：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To sum up, whether calling bat files or compiled executables of another language,
    you can use the call command or omit it, but there’s a difference. When calling
    an executable, both techniques are virtually identical. When calling a fellow
    bat file, the call command ensures that control is returned to the caller. Without
    the command, control never returns.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，无论是调用 bat 文件还是调用其他语言编译的可执行文件，你都可以使用 call 命令或者省略它，但它们是有区别的。调用可执行文件时，这两种方法几乎是相同的。而调用另一个
    bat 文件时，call 命令确保控制能够返回给调用者。如果没有这个命令，控制将永远不会返回。
- en: Since I’ve never found a use for a non-returning bat file invocation, my preference
    always is to omit the call command for executables and use it for bat files. One
    advantage is that at a glance, it’s obvious what type of file is being called.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我从未找到过不返回的 bat 文件调用的用途，我的偏好一直是对于可执行文件省略 call 命令，对于 bat 文件使用它。一个优点是，一眼就能看出被调用的是哪种类型的文件。
- en: Early in my career, I learned about the need for the call command vis-à-vis
    bat files the hard way when I couldn’t figure out why my bat file just stopped
    executing. There was no hang or abort message; it just stopped. Complicating matters,
    my troubleshooting was understandably focused on the called bat file. It took
    quite a while before I noticed the missing call command and, more important, understood
    its significance. But that isn’t the only idiosyncrasy concerning the call command.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯初期，我通过一次艰难的经历学到了调用命令（call command）在 bat 文件中的必要性，那时我无法理解为什么我的 bat 文件停止执行。没有挂起或中止的消息，它就是停止了。更复杂的是，我的故障排除自然集中在被调用的
    bat 文件上。过了很久，我才注意到缺少了 call 命令，更重要的是，才理解了它的重要性。但这并不是关于 call 命令的唯一特性。
- en: Notes on Calling a Label
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于调用标签的备注
- en: In the previous chapter, I mentioned that it’s possible to leave the colon off
    the label name in the argument of the goto command, although including it is highly
    encouraged. With the call command, the colon is always required when calling a
    label defining an internal routine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我提到过，在 goto 命令的参数中，标签名称后面的冒号是可以省略的，尽管强烈建议包含它。而在 call 命令中，调用定义内部例程的标签时，冒号是始终需要的。
- en: 'This apparent incongruity might not make sense until you consider that the
    goto command is concerned only with going to labels inside its bat file, while
    the call command calls entities inside and outside of its bat file. The upshot
    is that something very unexpected happens when an attempt to call :MyLabel is
    invoked without the colon:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个明显的不一致可能无法理解，直到你考虑到 goto 命令只关心跳转到它自己 bat 文件中的标签，而 call 命令则能调用它自己 bat 文件内外的实体。结果就是，当没有冒号的情况下尝试调用
    :MyLabel 时，会发生一些非常意外的事情：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A colon would’ve told the interpreter to call an internal routine, but instead
    the interpreter tries to call an external file. First it looks for an executable,
    such as *MyLabel.com* or *MyLabel.exe*, in the current directory. Then it looks
    for *MyLabel.bat* and a few other types of executables with this filename, also
    in the current directory. Then it goes through all the directories in the path
    variable desperately looking for anything named MyLabel that it can execute. If
    no such file is found, the interpreter won’t look for a label of that name, even
    if :MyLabel is a valid label in the bat file; instead, it generates an error.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 冒号本应告诉解释器调用一个内部例程，但解释器却试图调用一个外部文件。首先，它会在当前目录中查找一个可执行文件，例如 *MyLabel.com* 或 *MyLabel.exe*。接着它会查找
    *MyLabel.bat* 以及一些其他类型的可执行文件，仍然在当前目录中。然后它会在路径变量中的所有目录中查找任何名为 MyLabel 的可执行文件。如果没有找到这样的文件，解释器就不会再查找该名称的标签，即使
    :MyLabel 是 bat 文件中的有效标签；相反，它会产生一个错误。
- en: When navigating to a label with either the goto or call command, always use
    the colon, for consistency’s sake if nothing else.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 goto 或 call 命令跳转到标签时，始终使用冒号，至少为了保持一致性。
- en: NOTE
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意
- en: '*In [Chapter 9](chapter9.xhtml), I mentioned that the goto command aborts a
    process when the label isn’t found. The call command is a little more forgiving.
    They both write out an error message when its argument is an invalid label, but
    the call command also sets errorlevel to 1\. If you choose not to interrogate
    the return code, the process continues on cavalierly as if nothing is amiss. (See
    [Chapter 28](chapter28.xhtml) for more details on how to handle a failed call
    command.)*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*在[第9章](chapter9.xhtml)中，我提到过，当找不到标签时，goto命令会中止进程。call命令则宽容一些。当其参数是无效标签时，二者都会输出错误信息，但call命令还会将errorlevel设置为1。如果你选择不检查返回码，进程会继续执行，就像什么都没发生一样。（有关如何处理失败的call命令的更多细节，请参见[第28章](chapter28.xhtml)。）*'
- en: Launching Bat Files
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动Bat文件
- en: Sometimes you might want to launch or spawn a bat file as a new process. That
    is, you may wish to kick off another bat file but don’t want the interpreter to
    wait around for it to finish up before continuing. For instance, you can execute
    multiple processes in parallel to speed up overall processing time. You can spin
    off a noncritical but time-consuming task, perhaps a logging process, to execute
    on its own time. In [Chapter 26](chapter26.xhtml), I’ll discuss how to automatically
    kill and restart a process that’s hung. To make this happen, I’ll spawn the process
    susceptible to hanging as an independent bat file and monitor it from the main
    bat file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能希望将bat文件作为新进程启动或生成。也就是说，你可能希望启动另一个bat文件，但不希望解释器在继续之前等待它完成。例如，你可以并行执行多个进程，从而加速整体处理时间。你还可以启动一个非关键但耗时的任务，可能是一个日志记录过程，让它自行执行。在[第26章](chapter26.xhtml)中，我将讨论如何自动终止和重启一个挂起的进程。为了实现这一点，我将把容易挂起的进程生成一个独立的bat文件，并从主bat文件中监控它。
- en: 'To launch or spawn a bat file, simply use the start command in lieu of the
    call command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动或生成bat文件，只需使用start命令替代call命令：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command creates a second command or DOS window where the file *LaunchedBat.bat*
    executes simultaneously with the bat file that started it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令创建了第二个命令或DOS窗口，*LaunchedBat.bat*文件与启动它的bat文件同时执行。
- en: The exit Command
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: exit命令
- en: The exit command, as you might imagine, exits routines, bat files, or entire
    executions, and it can even set a return code. It overlaps in functionality with
    the goto :eof command, but I’ll soon show a significant distinction.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所料，exit命令会退出例程、bat文件或整个执行过程，甚至可以设置返回码。它的功能与goto :eof命令重叠，但我很快会展示出一个显著的区别。
- en: 'The exit command with no arguments abruptly ends the entire process. Sadly,
    the second echo command won’t be executed:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 不带参数的exit命令会突然结束整个进程。遗憾的是，第二个echo命令将不会被执行：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first echo command writes its message to the console, but the exit command
    closes the window before you can read it. This happens regardless of where the
    exit command is invoked—in the high-level bat file, in a called bat file, or even
    in a routine in either type of bat file. This variant of the command is analogous
    to a sledgehammer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个echo命令将消息输出到控制台，但exit命令会在你阅读之前关闭窗口。无论exit命令在哪里调用——无论是在高层bat文件中、在调用的bat文件中，还是在任何类型的bat文件中的例程——都会发生这种情况。此命令的变体类似于使用大锤。
- en: 'However, the /B option turns the exit command into more of a jewelry mallet.
    The documentation is unclear as to what B represents, but for me it stands for
    *break* in that the following command breaks out of just the code being invoked,
    whether it’s a called bat file or a routine inside a bat file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，/B选项将exit命令变成了更像一只珠宝锤。文档中没有明确说明B代表什么，但对我来说，它代表*break*，即后续命令仅中断被调用的代码，无论是调用的bat文件，还是bat文件内部的例程：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command exits the entire process only if invoked in the main logic of the
    high-level bat file. It doesn’t change errorlevel and is logically equivalent
    to goto :eof. Both commands are valid, and the usage usually comes down to personal
    preference. Mine is the goto :eof command, but only in those instances when I
    don’t need the return code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令仅在高层bat文件的主逻辑中调用时才会退出整个进程。它不会更改errorlevel，逻辑上等同于goto :eof。两个命令都是有效的，使用哪个通常取决于个人偏好。我的偏好是goto
    :eof命令，但仅在不需要返回码的情况下。
- en: At the beginning of [Chapter 9](chapter9.xhtml), I referenced the rudimentary
    abort logic reproduced in [Listing 10-3](#Lis10-3) but left its explanation for
    later, which is now.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](chapter9.xhtml)的开头，我提到了[清单10-3](#Lis10-3)中复现的基本中止逻辑，但将解释留到后面，现在就是解释的时机。
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 10-3: An abort routine labeled as :Abort'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 清单10-3：一个标记为:Abort的中止例程
- en: 'This exit command behaves just like exit /B with one exception. When control
    is returned to where the code was called, the command’s numerical argument following
    the option becomes the new value contained in errorlevel. In short, the command
    breaks out of a bat file or routine and returns an exit or return code. In the
    prior example, the return code is 1. But if no errors are detected, the main logic
    of a bat file might end by setting the return code to 0:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`exit`命令的行为与`exit /B`非常相似，唯一的例外是，当控制权返回到代码被调用的位置时，跟随选项的命令数字参数将成为`errorlevel`中的新值。简而言之，这个命令会中断批处理文件或例程，并返回退出或返回代码。在之前的示例中，返回代码是1。如果没有检测到错误，批处理文件的主逻辑可能通过将返回代码设置为0来结束：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If a fatal error is detected, a goto :Abort command from the mainline logic
    will direct the interpreter to the abort logic shown in [Listing 10-3](#Lis10-3).
    The goto command must be used because a call command would treat the abort logic
    like a called routine; the errorlevel would be set, but control would be returned
    to the spot of the fatal error. But when navigating to the label with the goto
    command, a routine isn’t invoked; it’s still considered to be in the mainline
    logic, and the exit command ends the bat file instead of a routine.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检测到致命错误，主逻辑中的`goto :Abort`命令将引导解释器进入[清单 10-3](#Lis10-3)中显示的终止逻辑。必须使用`goto`命令，因为`call`命令会将终止逻辑当作被调用的例程；错误级别会被设置，但控制权会返回到致命错误发生的地方。而当通过`goto`命令导航到标签时，并不会调用例程；它仍然被认为是在主逻辑中，`exit`命令会结束批处理文件，而不是调用一个例程。
- en: 'To make this more flexible, you can create a variable for the exit code, setting
    it to different values for different failures:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增加灵活性，你可以为退出代码创建一个变量，并为不同的失败设置不同的值：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then this logic can be accessed via multiple goto commands in the bat file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这段逻辑可以通过多个`goto`命令在批处理文件中进行访问。
- en: (A real-world abort routine will be far more interesting than this simple echo
    command. The error message could be multiple lines and have variable content,
    all written to a logfile as well as the console, but I’ve simplified it here to
    keep the focus on the exit command.)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: （一个真实的终止例程会比这个简单的回显命令更有趣。错误信息可能包含多行内容并包含变量，还会被写入日志文件和控制台，但为了保持对退出命令的关注，我在这里进行了简化。）
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, I’ve detailed the different methods of calling internal routines
    and other bat files. You’ve learned how to return from those calls with or without
    a return code, or how to simply end the entire process abruptly from anywhere.
    You also learned how to launch or spawn another bat file, which is entirely independent
    of the first bat file. Above all else, you now understand the significant and
    subtle differences between the goto and call commands. In a nutshell, the call
    returns control and can reach outside of its bat file, while the goto does neither.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我详细介绍了调用内部例程和其他批处理文件的不同方法。你已经学会了如何带或不带返回代码从这些调用中返回，或者如何从任何地方直接中止整个过程。你还学会了如何启动或生成另一个与第一个批处理文件完全独立的批处理文件。最重要的是，你现在理解了`goto`和`call`命令之间重要而微妙的差异。简而言之，`call`会返回控制权并可以访问其外部，而`goto`则没有这种能力。
- en: One large piece remains in this puzzle. A calling bat file can pass multiple
    arguments to a called bat file, and that called bat file can even set and pass
    back parameters in return. There’s more to this than one might expect, and I’ll
    detail all of the nuances in the very next chapter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个谜题中仍然有一个大块未解。一个调用的批处理文件可以将多个参数传递给被调用的批处理文件，而且被调用的批处理文件甚至可以设置并返回参数。这个过程比人们预期的要复杂，我将在接下来的章节中详细讲解所有的细节。
