- en: A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sample Design Document
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: The following document is a hypothetical design provided to illustrate the process
    of performing a security design review (SDR) on an actual design. Intended as
    a learning tool, it omits many details that would be present in a real design,
    focusing instead on security aspects. As such, it is not a complete example of
    a real software design document.
  prefs: []
  type: TYPE_NORMAL
- en: Title – Private Data Logging Component Design Document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Table of Contents**'
  prefs: []
  type: TYPE_NORMAL
- en: Section 1 – Product Description
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 2 – Overview
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.1 Purpose
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.2 Scope
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.3 Concepts
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.4 Requirements
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.5 Non-Goals
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.6 Outstanding Issues
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.7 Alternative Designs
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 3 – Use Cases
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 4 – System Architecture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 5 – Data Design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 6 – API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 6.1 Hello Request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 6.2 Schema Definition Request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 6.3 Event Log Request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 6.4 Goodbye Request
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 7 – User Interface Design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 8 – Technical Design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 9 – Configuration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 10 – References
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 1 – Product Description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This document describes a logging component (herein called Logger) that provides
    standard software event logging facilities to support auditing, system monitoring,
    and debugging, designed to mitigate risks of inadvertent information disclosure.
    **Logger will explicitly handle private data within logs so that non-private data
    can be freely accessed for routine uses. In rare cases when this access level
    is insufficient, limited access to protected, private log data can be provided,
    subject to explicit approval and with restrictions to minimize potential exposure.**
  prefs: []
  type: TYPE_NORMAL
- en: '*The notion of explicitly handling private data separately within the context
    of a logging system is an example of security-centric design thinking. Adding
    this feature to an existing system would be less efficient and require considerable
    code churn, compared to designing it in from the start.*'
  prefs: []
  type: TYPE_NORMAL
- en: Section 2 – Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For baseline project design assumptions, see the documents listed in Section
    10.
  prefs: []
  type: TYPE_NORMAL
- en: 2.1 Purpose
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All applications in the datacenter need to log details of important software
    events, and since these logs potentially contain private data, careful access
    control needs to be enforced. Logger provides standard components to generate
    logs, store logs, and enforce appropriate access to authorized staff while maintaining
    a reliable and **non-repudiable** record of what access does occur. Since the
    logging, access, and retention requirements of systems vary, Logger operates based
    on a simple policy configuration that specifies an access policy.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This document explains the design of the software components of Logger without
    mandating the choice of implementation language, deployment, or operational considerations.
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Concepts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The notion of a filtered view of logs is core to the design. The idea is to
    allow relatively free inspection of the logs with any private details filtered
    out, an access level which should suffice for most uses. Additionally, when needed,
    sensitive data that is logged can be inspected, subject to additional authorization.
    The access event is logged too, making the fact of inspection auditable. This
    graduated access lets applications log important private details while still minimizing
    how that data is exposed for legitimate uses by internal staff. Data so sensitive
    that it should never appear in logs simply should not be logged in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: For example, web applications routinely log HTTPS requests as a record of system
    usage and for many other reasons. Often these logs contain private information
    (including IP addresses, cookies, and much more) that must be captured but is
    rarely needed. For example, IP addresses are useful when investigating malicious
    attacks (to identify the origin of an attack), but for other uses are immaterial.
    A filtered view of logs hides, or “wraps,” private data while showing nonsensitive
    data. Designated pseudonyms in a filtered view can show that, for instance, the
    IP addresses of all events labeled “IP7” are identical without disclosing the
    actual address. Such a filtered view often provides sufficient information for
    the purposes of monitoring, gathering statistics, or debugging. When that is the
    case, it’s advantageous to have avoided exposing any private data at all. The
    logs still contain the full data, and in rare cases when the protected information
    is required, the unfiltered view is available in a controlled manner with proper
    authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that a web application receives a user login attempt which triggers
    a bug that causes the process to crash. Here is a simplified example of what the
    log might contain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The items in this log are: timestamp (not sensitive), IP address (sensitive),
    HTTP verb and URL (not sensitive), username (sensitive), and password (very sensitive).
    An investigation potentially needs to consider all this information in order to
    reproduce the bug, but you don’t want to display this data in plaintext unless
    absolutely necessary, and then only to authorized agents.'
  prefs: []
  type: TYPE_NORMAL
- en: To address the security needs of a wide range of systems, the sensitivity of
    various kinds of log data should be configurable, and the logging system should
    only selectively reveal confidential data. For example, as a best practice URLs
    should not contain sensitive information, but a legacy system might be known to
    violate this rule of thumb and require protection not usually necessary—which
    makes the filtered view less useful for some debugging. In the case of a URL,
    regular expressions could facilitate configuring certain URLs as more sensitive
    than others.
  prefs: []
  type: TYPE_NORMAL
- en: 'A filtered view of the previous example log that omits or wraps the sensitive
    data might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The IP address, username, and password are all wrapped as identifiers to hide
    the data, but the substituted identifiers could be used in context to query other
    requests with matching values. In this example, `US1` designates an IP address
    in the US; `USER1` designates the username associated with the event without divulging
    it specifically; and `PW1` stands for the password submitted. The suffixes in
    parentheses indicate the format or length of the actual data, adding a hint without
    revealing specific details: we can see that it’s an IPv4 address, the username
    has 3 characters, and the password has 12\. **For example, if an excessively long
    password caused a problem, this fact would be apparent from its surprising length
    alone. Knowing the length of the password leaks a little information but should
    not be compromising in practice.**'
  prefs: []
  type: TYPE_NORMAL
- en: When the filtered view is insufficient for the task at hand, an additional request
    to unwrap an identifier such as `US1` can be made. This makes seeing the sensitive
    data an explicit choice, and allows a graduated revealing of data. For example,
    if only the IP address is needed, the username and password values remain undisclosed.
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Logs are reliably stored, immediately accessible with authorization, and destroyed
    after the required retention period. To support high volumes of use, the log capture
    interface must be fast, and once it reports success, the generating application
    is rightly assured that the log is stored.
  prefs: []
  type: TYPE_NORMAL
- en: Logs can be monitored without knowledge of private details, so a filtered log
    view can be made widely available for most uses, with special authorization needed
    to see the full data (including private data) only when strictly necessary.
  prefs: []
  type: TYPE_NORMAL
- en: An important goal of this design is to allow the logging of very sensitive private
    data that can be made available for investigating possible security incidents
    or, in rare cases, debugging issues that only occur in production. Complete mitigation
    against an insider attack is an impractical goal, but it’s important to take all
    reasonable precautions and preserve a reliable audit trail as a deterrent.
  prefs: []
  type: TYPE_NORMAL
- en: Storage for logs is encrypted to protect against leaks if the physical media
    is stolen.
  prefs: []
  type: TYPE_NORMAL
- en: Software generating logs is fully trusted; it must correctly identify private
    data in order for Logger to handle it correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Non-Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Logger is intended for use by admins, a slick UI is unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: '**Insider attacks such as code tampering or abuse of admin root privilege are
    out of scope.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**To be effective, Logger requires careful configuration and oversight. How
    this is implemented must be defined by system management but should include a
    review process and auditing with checks and balances.**'
  prefs: []
  type: TYPE_NORMAL
- en: 2.6 Outstanding Issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Details of log access configuration, user authentication, and grants of unfiltered
    access authorization remain to be specified.
  prefs: []
  type: TYPE_NORMAL
- en: '**Querying encrypted private data is inherently slow. This design envisions
    that log data volumes are sufficiently small that a brute-force pass (that is,
    without reliance on an index) decrypting records on demand will be performant.
    A more ambitious future version might tackle indexing and fast querying over encrypted
    data.**'
  prefs: []
  type: TYPE_NORMAL
- en: Error cases need to be identified and handling specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enhancements for future versions of Logger to consider include:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining levels of filtered views that provide more or less detailed information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a facility to capture portions of the log for long-term secure storage
    that would eventually be routinely deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.7 Alternative Designs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The final design chosen is based on fully trusting Logger to store all sensitive
    information in logs, putting “all eggs in one basket.” An alternative was considered
    that allowed sensitive information to be compartmentalized by source. This was
    not pursued for a few reasons (briefly explained below) that did not appear compatible
    with important use scenarios, but it is important to note that this would arguably
    be a more secure logging solution.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alternative design**'
  prefs: []
  type: TYPE_NORMAL
- en: Log sources would create an asymmetric cryptographic key pair and use it to
    encrypt the sensitive data portions of log records before sending to Logger. If
    this were done carefully, Logger could (probably) still generate pseudonyms for
    filtered views (for example, `US1` for a certain IP address in the US). Authorized
    access to unfiltered views would then require the private key in order to decrypt
    the data. The main advantage of this approach is that disclosure of stored log
    data would not leak sensitive data that was encrypted, and Logger would not even
    have the necessary key(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reasons not chosen**'
  prefs: []
  type: TYPE_NORMAL
- en: This design puts the burden of encryption and key management on both log sources
    and authorized accessors. The designation of what data is sensitive and how it
    should be partitioned is determined by the log source and fixed at that time.
    By centralizing trust in Logger, both of these aspects can be reconfigured as
    needed, and fine-grained access can be controlled by authenticating the log viewer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Section 3 – Use Cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applications in the datacenter generate logs of important software events using
    Logger. Routine monitoring software and appropriate operational staff are allowed
    filtered access (data views without disclosure of any private data) for their
    routine duties. Operational statistics including traffic levels, active users,
    error rates, and so forth are all generated from filtered log views.
  prefs: []
  type: TYPE_NORMAL
- en: Rarely, when support or debugging requires access to the unfiltered logs, authorized
    staff may get limited access subject to policy. Access requests specify the subset
    of logs needed, their time window, and the reason for the access. Once approved,
    a token is issued that permits the access, which is logged for audit. Upon completion,
    the requester adds a note describing the result of the investigation, which is
    reviewed by the approver to ensure propriety.
  prefs: []
  type: TYPE_NORMAL
- en: Reports detailing summaries of requests, approvals, audit reviews, log volume
    trends, and confirmation of expired log data deletion are generated to inform
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Section 4 – System Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Within the datacenter, Logger service **instances run on physically separate
    machines operated independently** from the applications they serve, via a standard
    publish/subscribe protocol. Logger is constituted from three new services organized
    as the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logger Recorder**'
  prefs: []
  type: TYPE_NORMAL
- en: A log storage service. Applications stream log event data **over an encrypted
    channel** to the Logger Recorder service, where they are written to persistent
    storage. One instance may be configured to handle logs for more than one application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Logger Viewer**'
  prefs: []
  type: TYPE_NORMAL
- en: A web application that technical staff use to manually inspect filtered logs,
    with the ability to reveal unfiltered views subject to authorization according
    to policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Logger Root Recorder**'
  prefs: []
  type: TYPE_NORMAL
- en: '*1.  A special instance of Logger Recorder that logs events of Logger Recorder
    and Viewer. *For simplicity we omit the details of filtered and unfiltered views
    of this log.*'
  prefs: []
  type: TYPE_NORMAL
- en: Section 5 – Data Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log data is collected directly from applications that determine what events,
    with what details, should be logged. **Logs are append-only records of software
    events and are never modified other than being deleted upon expiration.**
  prefs: []
  type: TYPE_NORMAL
- en: Applications define a schema of log event types, with zero or more items of
    preconfigured data, as illustrated by the following example. All log events must
    have a timestamp and at least one other identifying data item.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Many details regarding built-in types, formatting, and so forth are omitted
    since the basic idea of how these would be defined should be clear from this partial
    example.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requests and responses must be UTF-8-encoded valid JSON expressions less
    than 1 million characters in length. Individual field values are limited to at
    most 10,000 characters.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first line (`LogTypes`) enumerates the types of log events this application
    will produce. For each type, a JSON record with the corresponding `LogType` entry
    (the second line is for `LogType: login`) lists the allowable data items that
    may be provided with such a log.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth line (`Filters`) declares the disposition of each data item: `0`
    for nonsensitive data, `private` for private data to be “wrapped,” and other special
    types of data handling, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`minute`**'
  prefs: []
  type: TYPE_NORMAL
- en: Time value is rounded to the nearest minute (obscuring precise times)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**`country`**'
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses are mapped to country of origin in the filtered view
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filters should be defined by pluggable components and easily extended to support
    custom data types that various applications will require.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note that “nonsensitive” data should be used for limited internal viewing
    only; this designation does not mean that this data should be publicly disclosed.**
    The requirement that all data items be declared, including disposition (private
    or not), is to ensure that explicit decisions are made about each one in the context
    of the application. **It is critical that these definitions and any updates have
    careful scrutiny to ensure the integrity of the log processing.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example log entry in the unfiltered view for this schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is the corresponding filtered view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Data is stored persistently and available until the policy-configured expiration
    date is reached, measured as time elapsed since the event log timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: Logs are transient data only intended for monitoring and debugging or for forensic
    purposes in the case of a security breach, and as such are only kept for a limited
    time. **Potential data loss is mitigated by storing the data on a dedicated machine,
    using a RAID (or similar) disk array for redundant persistent storage. Logs are
    intended as short-term storage for auditing and diagnostic purposes. Long-term
    storage of any of this data should be stored separately.**
  prefs: []
  type: TYPE_NORMAL
- en: Section 6 – API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Logger Recorder’s network interface accepts the following remote procedure
    calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hello**'
  prefs: []
  type: TYPE_NORMAL
- en: Must be the first API call of the session; identifies the application and version
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Schema**'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the log data schema (see Section 5)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Log**'
  prefs: []
  type: TYPE_NORMAL
- en: Sends event data (see Section 5) to be recorded to the specified log
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Goodbye**'
  prefs: []
  type: TYPE_NORMAL
- en: Sent when the application terminates, ending the session
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each application connects to its logging service via a dedicated channel. **HTTPS
    secures API invocations between authenticated endpoints; the preconfigured server
    name authenticates (by its digital certificate) that clients are connected to
    valid Logger service instances.** The following are the request types.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 Hello Request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any process that will use the Logger service sends this request to initiate
    the logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following response acknowledges the request with an OK or error message
    and provides a string token for the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The token is used in subsequent requests to identify the context of the initiating
    application corresponding to the `Hello`. **Tokens are generated randomly with
    sufficient complexity and entropy to preclude guessing: the minimum recommended
    token size is 120 bits, or about 20 characters in base64 encoding. Shorter tokens
    are used here for brevity.**'
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 Schema Definition Request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This request defines the data schema for subsequent logging, as described in
    Section 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Details of this request are omitted for brevity.*'
  prefs: []
  type: TYPE_NORMAL
- en: The schema defines the field names, types, and other attributes that will appear
    in the log contents, as illustrated by the sample event log request shown in the
    following section (which includes the fields `timestamp`, `ipaddr`, `http`, `url`,
    and `error`).
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 Event Log Request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This request actually logs one record with the Logger service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `log` JSON presents content to be recorded to the log that must match the
    schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response acknowledges the request with an OK or error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Error details are omitted for brevity.* **Logging errors (for example, insufficient
    storage space) are serious and require immediate attention, since system operation
    is not auditable in the absence of logging.**'
  prefs: []
  type: TYPE_NORMAL
- en: 6.4 Goodbye Request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This request completes a session of logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The response acknowledges the request with an OK or error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The token thereafter is no longer valid. To resume logging, the client must
    first make a `Hello` request.
  prefs: []
  type: TYPE_NORMAL
- en: Section 7 – User Interface Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The user interface to the Logger is a web interface served by Logger Viewer
    that is used to examine the logs. **The web app is only accessible by authorized
    operations staff and authenticated by enterprise single sign-on.** Authenticated
    users see a selection of logs they are allowed to access, with links to browse
    or search the most recent filtered log entries or, when allowed, to request access
    to unfiltered logs subject to approval.
  prefs: []
  type: TYPE_NORMAL
- en: '*For brevity, only a high-level description of the web interface is provided
    for this example.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Approval requests are queued for processing in a web form that provides basic
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: The reason access is requested, including specifics such as customer issue ticket
    numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scope of access requested (typically a specific user account or IP address)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Approval requests trigger automated emails sent to approvers with a link to
    the web app page to review these requests. When each decision is taken, an email
    notifies the requester with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An approval or denial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reason for denial, if applicable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time window for approved access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtered and unfiltered logs are visible on a page corresponding to each log.
    Queries may be entered specifying which log entries to view. An empty query shows
    the most recent entries with Next/Previous links for paging through the results.
  prefs: []
  type: TYPE_NORMAL
- en: Queries specify log entry fields and values, combined with Boolean operators
    to select matching log entries. Most recent first is the default order, unless
    an explicit ordering is given in the query. *For brevity, the details of query
    syntax are omitted.*
  prefs: []
  type: TYPE_NORMAL
- en: Filtered logs are displayed with symbolic identifiers (see Section 2.3) instead
    of the raw log contents. Queries may use symbolic identifiers present in filtered
    log content; for example, if a filtered log entry shows the IP address `US1`,
    a query of `[IP = US1]` would find other logs from that IP address without disclosing
    the address itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**Queries over filtered logs must disallow searches on filtered fields with
    exact values. For example, even if IP addresses are not shown, if the user can
    guess** `[IP = 1.1.1.1]` **(and so forth) they may eventually hit a log entry
    that will show it as something like** **USA888 and then be able to infer the actual
    value.**'
  prefs: []
  type: TYPE_NORMAL
- en: Even when unfiltered access is approved, users must select an option to begin
    unfiltered viewing and querying. **Best practice maximizes use of filtered logs,
    only revealing filtered values on an as-needed basis, and it is important that
    the user interface encourage this.**
  prefs: []
  type: TYPE_NORMAL
- en: Users can renounce the right to unfiltered log access when the task is completed.
    The user interface should promote this after a period of inactivity to minimize
    risk of unnecessary access.
  prefs: []
  type: TYPE_NORMAL
- en: '**Web pages displaying log contents should not be locally cached by user agents
    to avoid inadvertent disclosure and to ensure that, on expiry, the log data is
    no longer available.**'
  prefs: []
  type: TYPE_NORMAL
- en: Section 8 – Technical Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Logger Recorder service consists of a write-only interface for applications
    to stream log event data that will be written to persistent storage, and a query
    interface to get views of those logs. Storage is a sequence of write-append files
    consisting of UTF-8 lines of text, with one line per log event. Log data as described
    by the relevant schema (see above) maps to/from a canonical representation as
    text. *Details of formatting are omitted for this example.*
  prefs: []
  type: TYPE_NORMAL
- en: '**Log data fields subject to filtering should be stored in the filtered representation
    in addition to the raw data encrypted with an AES key generated by the service,
    using a new key every day. Use a hardware key storage or suitable means of securely
    protecting these keys.**'
  prefs: []
  type: TYPE_NORMAL
- en: Since exhausting available storage represents a fatal error for a logging service,
    the write rate is measured against free space (`free_storage_MB` / `avg_logging_MB_per_hour`)
    and a priority operational alert is raised if space for fewer than 10 hours of
    data, assuming constant write volumes, remains (this number of hours to alert
    is configurable).
  prefs: []
  type: TYPE_NORMAL
- en: For performance, consider a SQL database recording filtered log event information
    (timestamp, log type, filename, and offset), supplementing the actual log files
    for efficient access.
  prefs: []
  type: TYPE_NORMAL
- en: Filtered logs hide private data with symbolic identifiers (for example, `US1`
    for an IP address in the US). **To avoid storing unfiltered private data, these
    maps go from a secure digest of the unfiltered data value to the filtered moniker.**
    This mapping is temporary and maintained by Logger Viewer separately for each
    user context per log. Users have the ability to clear mappings for a fresh start,
    or after 24 hours of non-use, they are automatically cleared to prevent useless
    buildup over time.
  prefs: []
  type: TYPE_NORMAL
- en: Section 9 – Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log retention is configured as follows. **Data is automatically, securely, and
    permanently deleted beyond the retention period (not just moved to trash; use
    the** `shred(1)` **command or similar).**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Log access is granted by configuring lists of authorized users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Users allowed filtered access to the log denoted `Log1` are listed within brackets,
    as shown above (for example, `u1`, `u2`, `u3`). Users permitted unfiltered access
    are then similarly listed. These users will be granted access only following an
    approved request. Finally, users with the power to grant approval for limited
    unfiltered access are listed in the same manner.
  prefs: []
  type: TYPE_NORMAL
- en: Section 10 – References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following documents are useful for understanding this design document.
  prefs: []
  type: TYPE_NORMAL
- en: '*These are fictional.*'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise baseline design assumptions document (referenced in Section 2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise general data protection policy and guidelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish/subscribe protocol design document (referenced in Section 4)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: END OF DOCUMENT*
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
