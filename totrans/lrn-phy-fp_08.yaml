- en: '7'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GRAPHING FUNCTIONS
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Functions with the type `R -> R` are functions that can be plotted on a graph.
    This chapter shows how to plot such functions. Tools for making graphs are not
    part of the Prelude, so we’ll start by discussing how to install and use library
    modules.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Using Library Modules
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are functions other people have written that we want to use but that are
    not included in the Prelude. However, such functions exist in library modules
    that can be imported into our source code file or loaded directly into GHCi. A
    standard set of library modules comes with GHC (the Glasgow Haskell Compiler we
    have been using), but other modules require installation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Standard Library Modules
  id: totrans-6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The library module `Data.List` is one of the standard library modules. It includes
    functions for working with lists. To load it into GHCi, use the `:module` command
    (`:m` for short).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we can use functions from this module, such as `sort`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the GHCi prompt that normally says `Prelude>` has been expanded to
    include the name of the module we just loaded.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: To use the `sort` function in a source code file, include the line
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: at the top of your source code file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Documentation for standard libraries is available online at [*https://www.haskell.org*](https://www.haskell.org)
    under Documentation and then Library Documentation, or you can access it directly
    at [https://downloads.haskell.org/~ghc/latest/docs/html/libraries/index.html](https://downloads.haskell.org/~ghc/latest/docs/html/libraries/index.html).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Other Library Modules
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Library modules outside of the standard libraries are organized into *packages*.
    The appendix describes how to install Haskell library packages. Each package contains
    one or more modules. For the plotting we’ll do in this chapter, we want the `Graphics.Gnuplot.Simple`
    module, which is supplied by the `gnuplot` package.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions in the appendix to install gnuplot. Several steps are
    required. The installation ends with commands such as the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: or
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After installing the `gnuplot` package, you can restart GHCi and load the `Graphics.Gnuplot.Simple`
    module into GHCi, like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Before we start the next section, let’s unload the `Graphics.Gnuplot.Simple`
    module so we’re starting with a clean slate:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Issuing the `:m` command without any module name will clear any loaded modules.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Plotting
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are times when you want to make a quick plot to see what a function looks
    like. Here is an example of how to do this using GHCi:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first command loads a graphics module that can make graphs. The second command
    plots the function `cos` from 0 to 10 in increments of 0.1\. This is carried out
    by the plotFunc function, which is one of the functions provided by the `Graphics.Gnuplot.Simple`
    module. The `plotFunc` function takes a list of attributes (in this case, the
    empty list, `[]`), a list of values at which to compute the function (in this
    case, `[0,0.1..10]`, which is a list of 101 numbers from 0 to 10 in increments
    of 0.1), and a function to plot (in this case, `cos`).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 100 points is usually enough to get a nice smooth graph. If it’s not smooth
    enough for you, you could use 500 points or more. If you use only 4 points, you
    won’t get a smooth graph (try it and see what happens). In [Chapter 11](ch11.xhtml),
    we’ll learn how to make a nice plot with a title and axis labels for a presentation
    or an assignment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to plot a function that is defined in a program file, you have
    a few options:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Put only the function you want to plot in the program file.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the program file to import the graphing module and define the function you
    want to plot.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the program file to import the graphing module, define the function you
    want to plot, and define the plot.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll explore each of these options in turn.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Function Only
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Suppose we want to plot the `square` function we defined in [Chapter 2](ch02.xhtml)
    from *x* = –3 to *x* = 3\. Let’s unload the `Graphics.Gnuplot.Simple` module so
    that we’re starting with a clean slate:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we issue the following sequence of commands:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first command loads the graphing module, the second loads the file with
    the function definition, and the third makes the graph. Using the `:module` command
    clears any source code file previously loaded with the `:load` command, so you
    must load the module before the source code file.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Function and Module
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If we know that a program file contains a function or functions we will want
    to plot, we can import the `Graphics.Gnuplot.Simple` module in the program file
    so we don’t have to do it at the GHCi command line. Instead of entering the `:m
    Graphics.Gnuplot.Simple` line into GHCi, we can put the following line at the
    top of our program file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s suppose this augmented program file is called *firstWithImport.hs*. Let’s
    start with a clean slate by unloading the file and the module:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Issuing the `:l` command without any filename will clear a loaded program file,
    leaving any loaded modules intact.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in GHCi we do the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should see the same plot you saw in the last section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Function, Module, and Plot Definition
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If we know in advance what plot we want, we can include the plotting commands
    in the program file itself. In our source code file, we’ll include the `import`
    command,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: the type synonym that defines the type `R`,
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: the function we’ll plot,
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: and the plot we want,
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Notice the type `IO ()` (pronounced “eye oh unit”) of `plot1`. The `IO` stands
    for input/output, and it signals the type of an impure function that has a side
    effect. In this case, the side effect is the graph popping up on the screen. Anything
    with type `IO ()` is something that is done only for its effect and not because
    we expect a value to be returned.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`plot1`的类型`IO ()`（读作“eye oh unit”）。`IO`代表输入/输出，它表示一个具有副作用的非纯函数的类型。在这种情况下，副作用是图形在屏幕上弹出。任何类型为`IO
    ()`的内容，都是仅为了其副作用而执行的，而不是因为我们期待返回一个值。
- en: Let’s make a clean slate in GHCi.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在GHCi中清理一下工作区。
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the source code file is called *QuickPlotting.hs*, we just load our file
    and give the name of our plot.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果源代码文件名为*QuickPlotting.hs*，我们只需加载文件并给出我们的图形名称。
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should again see the plot.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该再次看到图形。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced library modules, including standard library modules
    as well as those that require installation. We installed the `gnuplot` package,
    which provides the `Graphics.Gnuplot.Simple` module, and showed how to use the
    function `plotFunc` to make basic plots. The chapter also showed different ways
    to use the functions provided by a module, either by loading the module into GHCi
    with the `:module` command or by importing the module into a source code file
    using the `import` keyword.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了库模块，包括标准库模块以及需要安装的模块。我们安装了`gnuplot`包，该包提供了`Graphics.Gnuplot.Simple`模块，并展示了如何使用函数`plotFunc`绘制基本图形。本章还展示了使用模块提供的函数的不同方式，既可以通过`:module`命令将模块加载到GHCi中，也可以通过`import`关键字将模块导入源代码文件。
- en: The next chapter introduces *type classes*, a mechanism to take advantage of
    commonality among types.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将介绍*类型类*，这是一个利用类型间共性的机制。
- en: Exercises
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习
- en: '**Exercise 7.1.** Make a plot of sin(*x*) from *x* = –10 to *x* = 10.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 7.1.** 绘制从*x* = –10到*x* = 10的sin(*x*)图形。'
- en: '**Exercise 7.2.** Make a plot of your `yRock30` function from *t* = 0 to *t*
    = 6 s.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 7.2.** 绘制从*t* = 0到*t* = 6秒的`yRock30`函数图形。'
- en: '**Exercise 7.3.** Make a plot of your `yRock 20` function from *t* = 0 to *t*
    = 4 s. You will need to enclose `yRock 20` in parentheses when you use it as an
    argument to `plotFunc`.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 7.3.** 绘制从*t* = 0到*t* = 4秒的`yRock 20`函数图形。使用`plotFunc`作为参数时，你需要将`yRock
    20`括在圆括号中。'
