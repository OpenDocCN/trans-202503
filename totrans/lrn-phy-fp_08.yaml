- en: '7'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GRAPHING FUNCTIONS
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Functions with the type `R -> R` are functions that can be plotted on a graph.
    This chapter shows how to plot such functions. Tools for making graphs are not
    part of the Prelude, so we’ll start by discussing how to install and use library
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: Using Library Modules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are functions other people have written that we want to use but that are
    not included in the Prelude. However, such functions exist in library modules
    that can be imported into our source code file or loaded directly into GHCi. A
    standard set of library modules comes with GHC (the Glasgow Haskell Compiler we
    have been using), but other modules require installation.
  prefs: []
  type: TYPE_NORMAL
- en: Standard Library Modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The library module `Data.List` is one of the standard library modules. It includes
    functions for working with lists. To load it into GHCi, use the `:module` command
    (`:m` for short).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can use functions from this module, such as `sort`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that the GHCi prompt that normally says `Prelude>` has been expanded to
    include the name of the module we just loaded.
  prefs: []
  type: TYPE_NORMAL
- en: To use the `sort` function in a source code file, include the line
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: at the top of your source code file.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation for standard libraries is available online at [*https://www.haskell.org*](https://www.haskell.org)
    under Documentation and then Library Documentation, or you can access it directly
    at [https://downloads.haskell.org/~ghc/latest/docs/html/libraries/index.html](https://downloads.haskell.org/~ghc/latest/docs/html/libraries/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Other Library Modules
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Library modules outside of the standard libraries are organized into *packages*.
    The appendix describes how to install Haskell library packages. Each package contains
    one or more modules. For the plotting we’ll do in this chapter, we want the `Graphics.Gnuplot.Simple`
    module, which is supplied by the `gnuplot` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the instructions in the appendix to install gnuplot. Several steps are
    required. The installation ends with commands such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: or
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After installing the `gnuplot` package, you can restart GHCi and load the `Graphics.Gnuplot.Simple`
    module into GHCi, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we start the next section, let’s unload the `Graphics.Gnuplot.Simple`
    module so we’re starting with a clean slate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Issuing the `:m` command without any module name will clear any loaded modules.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are times when you want to make a quick plot to see what a function looks
    like. Here is an example of how to do this using GHCi:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first command loads a graphics module that can make graphs. The second command
    plots the function `cos` from 0 to 10 in increments of 0.1\. This is carried out
    by the plotFunc function, which is one of the functions provided by the `Graphics.Gnuplot.Simple`
    module. The `plotFunc` function takes a list of attributes (in this case, the
    empty list, `[]`), a list of values at which to compute the function (in this
    case, `[0,0.1..10]`, which is a list of 101 numbers from 0 to 10 in increments
    of 0.1), and a function to plot (in this case, `cos`).
  prefs: []
  type: TYPE_NORMAL
- en: 100 points is usually enough to get a nice smooth graph. If it’s not smooth
    enough for you, you could use 500 points or more. If you use only 4 points, you
    won’t get a smooth graph (try it and see what happens). In [Chapter 11](ch11.xhtml),
    we’ll learn how to make a nice plot with a title and axis labels for a presentation
    or an assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to plot a function that is defined in a program file, you have
    a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: Put only the function you want to plot in the program file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the program file to import the graphing module and define the function you
    want to plot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the program file to import the graphing module, define the function you
    want to plot, and define the plot.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll explore each of these options in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Function Only
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Suppose we want to plot the `square` function we defined in [Chapter 2](ch02.xhtml)
    from *x* = –3 to *x* = 3\. Let’s unload the `Graphics.Gnuplot.Simple` module so
    that we’re starting with a clean slate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we issue the following sequence of commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The first command loads the graphing module, the second loads the file with
    the function definition, and the third makes the graph. Using the `:module` command
    clears any source code file previously loaded with the `:load` command, so you
    must load the module before the source code file.
  prefs: []
  type: TYPE_NORMAL
- en: Function and Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If we know that a program file contains a function or functions we will want
    to plot, we can import the `Graphics.Gnuplot.Simple` module in the program file
    so we don’t have to do it at the GHCi command line. Instead of entering the `:m
    Graphics.Gnuplot.Simple` line into GHCi, we can put the following line at the
    top of our program file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s suppose this augmented program file is called *firstWithImport.hs*. Let’s
    start with a clean slate by unloading the file and the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Issuing the `:l` command without any filename will clear a loaded program file,
    leaving any loaded modules intact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in GHCi we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You should see the same plot you saw in the last section.
  prefs: []
  type: TYPE_NORMAL
- en: Function, Module, and Plot Definition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If we know in advance what plot we want, we can include the plotting commands
    in the program file itself. In our source code file, we’ll include the `import`
    command,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: the type synonym that defines the type `R`,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: the function we’ll plot,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: and the plot we want,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Notice the type `IO ()` (pronounced “eye oh unit”) of `plot1`. The `IO` stands
    for input/output, and it signals the type of an impure function that has a side
    effect. In this case, the side effect is the graph popping up on the screen. Anything
    with type `IO ()` is something that is done only for its effect and not because
    we expect a value to be returned.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make a clean slate in GHCi.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If the source code file is called *QuickPlotting.hs*, we just load our file
    and give the name of our plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You should again see the plot.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter introduced library modules, including standard library modules
    as well as those that require installation. We installed the `gnuplot` package,
    which provides the `Graphics.Gnuplot.Simple` module, and showed how to use the
    function `plotFunc` to make basic plots. The chapter also showed different ways
    to use the functions provided by a module, either by loading the module into GHCi
    with the `:module` command or by importing the module into a source code file
    using the `import` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter introduces *type classes*, a mechanism to take advantage of
    commonality among types.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exercise 7.1.** Make a plot of sin(*x*) from *x* = –10 to *x* = 10.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.2.** Make a plot of your `yRock30` function from *t* = 0 to *t*
    = 6 s.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.3.** Make a plot of your `yRock 20` function from *t* = 0 to *t*
    = 4 s. You will need to enclose `yRock 20` in parentheses when you use it as an
    argument to `plotFunc`.'
  prefs: []
  type: TYPE_NORMAL
