["```\n- name: Turn Logging level to low\n  ufw:\n    logging: 'low'\n```", "```\n- name: Allow SSH over port 22\n  ufw:\n    rule: allow\n    port: '22'\n    proto: tcp\n```", "```\n- name: Allow all access to port 5000\n  ufw:\n    rule: allow\n    port: '5000'\n    proto: tcp\n```", "```\n- name: Rate limit excessive abuse on port 5000\n  ufw:\n    rule: limit\n    port: '5000'\n    proto: tcp\n```", "```\n-A ufw-user-input -p tcp --dport 5000 -m conntrack --ctstate NEW -m recent --update --seconds 30 --hitcount 6 -j ufw-user-limit \n```", "```\n- name: Drop all other traffic\n  ufw:\n    state: enabled\n policy: deny\n    direction: incoming\n```", "```\n**#-** **import_tasks****: chapter5/****firewall.yml**\n```", "```\n---\n- name: Provision VM\n  hosts: all\n  become: yes\n  become_method: sudo\n  remote_user: ubuntu\n  tasks:\n    - import_tasks: chapter2/pam_pwquality.yml\n    - import_tasks: chapter2/user_and_group.yml\n    - import_tasks: chapter3/authorized_keys.yml\n    - import_tasks: chapter3/two_factor.yml\n    - import_tasks: chapter4/web_application.yml\n    - import_tasks: chapter4/sudoers.yml\n **- import_tasks: chapter5/firewall.****yml**\n  `--snip--`\n  handlers:\n **- import_tasks: handlers/restart_ssh.yml**\n```", "```\n$ **vagrant provision**\n`--snip--`\nPLAY RECAP *********************************************************************\ndefault       : ok=26  changed=6   unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n```", "```\n$ **ssh** **-i ~/.ssh/dftd** **-p 2222 bender@localhost**\nEnter passphrase for key '/Users/bradleyd/.ssh/dftd: `<passphrase>`\nVerification code: `<52973407>`\n`--snip--`\nbender@dftd:~$\n```", "```\nbender@dftd:~$ **ip -4 -br addr**\nlo               UNKNOWN        127.0.0.1/8\nenp0s3           UP             10.0.2.15/24\nenp0s8           UP             172.28.128.3/24\n```", "````` The output lists three devices in tabular format. The first device, named `lo`, is a loopback network interface that is created on Linux hosts (commonly referred to as `localhost`). The loopback device is not routable (accessible) from outside the VM. The second device, `enp0s3`, has an IP address of `10.0.2.15`. This is the default interface and the IP you get from Vagrant and VirtualBox when you first create the VM. This device is also not routable from outside the VM. The last interface, `enp0s8`, has an IP address of `172.28.128.3`, which was dynamically assigned by this line in the *Vagrantfile*:    ``` config.vm.network \"private_network\", type: \"dhcp\" ```    This IP address is how you’ll access the VM from your local machine. Because these IP addresses are assigned using DHCP, yours may not match exactly. The interface name may be different as well; just use whatever IP address is listed for the interface that is not a `loopback` device or the device in the `10.0.2.0/24` subnet.    Keep this terminal and connection open to the VM, as you’ll use it again in the next section.    ### Scanning Ports with Nmap    To test that the firewall is filtering traffic, you’ll use the `nmap`(network mapper) command line tool for scanning hosts and networks. Be sure to install the appropriate Nmap version for your specific OS. Visit [https://nmap.org/book/install.html](https://nmap.org/book/install.html) for instructions on installing Nmap for different OSs.    Once it’s installed, you’ll want to do a couple of scans. The first scan, which is a fast check, tests that the firewall is enabled and allowing traffic on your two ports. The other scan is a check for the services and versions running behind those open ports.    To run the first scan, enter the following command in your terminal, using the IP address of the VM you copied earlier (if you are on a Mac or Linux host, you’ll need to use `sudo` since Nmap requires elevated permissions):    ``` $ **sudo nmap -F** `<172.28.128.3>` Password: Starting Nmap 7.80 ( https://nmap.org ) at 2022-08-11 10:14 MDT Nmap scan report for 172.28.128.3 Host is up (0.00066s latency). Not shown: 98 filtered ports PORT     STATE SERVICE 22/tcp   open  ssh 5000/tcp open  upnp MAC Address: 08:00:27:FB:C3:AF (Oracle VirtualBox virtual NIC) Nmap done: 1 IP address (1 host up) scanned in 1.88 seconds ```    The `-F` flag tells `nmap` to do a fast scan, which looks for only the 100 most common ports, such as `80` (web), `22` (SSH), and `53` (DNS). As expected, the output shows `nmap` detects that ports `22` and `5000` are open. It shows the other 98 ports are *filtered*, which means `nmap` could not detect what state the ports were in because of the firewall. This tells you that the host-based firewall is enabled and filtering traffic.    The next scan you’ll do is one that bad actors do on the internet every day. They scan for hosts that are connected to the internet, looking for services and versions while hoping they can match a vulnerability to it. Once they have an exploit in hand, they can use it to try to gain access to that host.    Enter the following command from your local host’s terminal to detect your service versions:    ``` $ **sudo nmap -sV** `<172.28.128.3>` Starting Nmap 7.80 ( https://nmap.org ) at 2022-08-11 21:06 MDT Nmap scan report for 172.28.128.3 Host is up (0.00029s latency). Not shown: 998 filtered ports PORT     STATE SERVICE VERSION 22/tcp   open  ssh    OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0) 5000/tcp open  http   Gunicorn 20.0.4 MAC Address: 08:00:27:F7:33:1F (Oracle VirtualBox virtual NIC) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel ```   ```` ``` Service detection performed. Please report any incorrect results at https://nmap.org/submit/. Nmap done: 1 IP address (1 host up) scanned in 13.13 seconds ```    The `-sV` flag tells `nmap` to attempt to extract service and version information from running services. Once again, `nmap` finds the two open ports, `22` and `5000`. Also, a service name and version are listed next to each port. For port `22`, the service name is `OpenSSH`, and the version is `8.2p1` for `Ubuntu Linux`. For port `5000`, the service name is `Gunicorn`, and the version is `20.0.4.` If you were a bad actor armed with this information, you could search the many vulnerability databases, looking for exploits for these services and versions.    Next, you’ll want to check the logs for evidence that the firewall blocked connection attempts on non-whitelisted ports.    ### Firewall Logging    All events that the firewall processes can be logged. You enabled logging and set the level to `low` for UFW in the Ansible task earlier in this chapter. The log for those events is located in the */var/log/ufw.log*file. This logfile requires *root* permissions to read it, so you’ll need a user with elevated permissions.    As an example, I have pulled out a log entry to demonstrate a block event from the *ufw.log* file. Here is what UFW logged when Nmap tried to scan port `80`:    ``` Aug 11 16:56:17 ubuntu-focal kernel: [51534.320364] 1[UFW BLOCK] 2IN=enp0s8 OUT= MAC=08:00:27:fb:c3:af:0a:00:27:00:00:00:08:00 3SRC=172.28.128.1 4DST=172.28.128.3 LEN=44 TOS=0x00 PREC=0x00 TTL=48 ID=7129 PROTO=TCP SPT=33405 5DPT=80 WINDOW=1024 RES=0x00 SYN URGP=0 ```    This log line contains a lot of information, but you’ll focus on only a few components here. The event type name 1 is a block type, so it’s named `[UFW BLOCK]`. The `IN` key-value pair 2 shows the network interface for which this packet was destined. In this case, it’s the VM interface from the earlier section. The source IP address (`SRC`) 3 is where the packet originated. In this example, it’s the source IP address from the local host where you ran the `nmap` command. This IP address was created from VirtualBox when you added the other interface in Vagrant. The destination IP address, `DST` 4, is the IP address for which the packet was destined. It should be the IP address of the second non-loopback interface on the VM. The destination port, `DPT` 5, is the port where the packet was being sent. In this log line, it’s port `80`. Since you don’t have a rule permitting any traffic on port `80`, it was blocked. This means your firewall is blocking unwanted connection attempts. Remember, Nmap’s fast scan will try 100 different ports, so there will be multiple log lines that look like this one. However, they will have different destination ports (`DPT`).    ### Rate Limiting    To test that the firewall will rate-limit excessive connection attempts (six in 30 seconds) to your Greeting web server, you’ll leverage the `curl` command again. From your local host, enter the following to access the Greeting web server six times:    ``` $ **for i in `seq 1 6` ; do curl -w \"\\n\" http://172.28.128.3:5000 ; done** <h1 style='color:green'>Greetings!</h1> <h1 style='color:green'>Greetings!</h1> <h1 style='color:green'>Greetings!</h1> <h1 style='color:green'>Greetings!</h1> <h1 style='color:green'>Greetings!</h1>  curl: (7) Failed to connect to 172.28.128.22 port 5000: Connection refused ```    Here, a simple `for` loop in Bash iterates and executes the `curl` command six times in succession. The `curl` command uses the `-w` `\"\\n\"` flag to write out a new line after each loop, which makes the web server’s response output more readable. As you can see, the last line shows a `Connection refused` notification after the fifth successful connection to the Greeting web server. This is because the rate limit on the firewall for port `5000` was triggered by being hit six times in less than 30 seconds.    Let’s explore the log line for this event. (Once again, I’ve grabbed the relevant log line for you.)    ``` Aug 11 17:38:48 ubuntu-focal kernel: [54085.391114] 1 [UFW LIMIT BLOCK] IN=enp0s8 OUT= MAC=08:00:27:fb:c3:af:0a:00:27:00:00:00:08:00 2SRC=172.28.128.1 3DST=172.28.128.3 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=58634 4DPT=5000 WINDOW=65535 RES=0x00 CWR ECE SYN URGP=0 ```    The UFW event type is named `[UFW LIMIT BLOCK]` 1. This packet is coming (`SRC`) from the local host IP address 2 where you ran the `curl` command. The destination (`DST`) 3 IP address is the one for the VM. The destination port (`DPT`) 4 is `5000`, which is the Greeting web server. This temporary limit will block your local host IP address (`172.28.128.1`)2 from accessing port `5000` for about 30 seconds after the limit is reached. After that, you should be able to access it again.    ## Summary    In this chapter, you’ve learned how to implement a simple but effective host-based firewall for the VM. You can easily apply this firewall to any host you have, whether it is local or from a cloud provider. Creating firewall rules with Ansible that permit specific traffic to a VM while blocking other traffic is a typical setup a DevOps or software engineer would use. You also learned how to limit the number of connections a host can make in a given time frame. All of these techniques provide a smaller attack surface to help deter network attacks. You can do a lot more to enhance your host-based firewall, and I encourage you to explore the possibilities on your own by visiting [https://help.ubuntu.com/community/UFW/](https://help.ubuntu.com/community/UFW/).    This brings Part I to an end. You now should have a good understanding of how to provision your infrastructure and apply some basic security foundations to your environment. In Part II, we’ll move on to containers, container orchestration, and deploying modern application stacks. We’ll start with installing and understanding Docker. ```` `````"]