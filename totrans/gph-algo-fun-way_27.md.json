["```\nclass UnionFindNode: \n    def __init__(self, label: int):\n        self.label = label\n        self.parent = None \n```", "```\nclass UnionFind:\n    def __init__(self, num_sets: int): \n        self.nodes: list = [UnionFindNode(i) for i in range(num_sets)]\n        self.set_sizes: list = [1 for i in range(num_sets)]\n        self.num_disjoint_sets: int = num_sets \n```", "```\ndef find_set(self, label: int) -> int: \n    if label < 0 or label >= len(self.nodes):\n        raise IndexError\n\n  ❶ current: UnionFindNode = self.nodes[label]\n    while current.parent is not None:\n        current = current.parent\n    return current.label \n```", "```\ndef are_disjoint(self, label1: int, label2: int) -> bool: \n    return self.find_set(label1) != self.find_set(label2) \n```", "```\ndef union_sets(self, label1: int, label2: int): \n  ❶ set1_label: int = self.find_set(label1)\n    set2_label: int = self.find_set(label2)\n    if set1_label == set2_label:\n        return ❷ if self.set_sizes[set1_label] < self.set_sizes[set2_label]:\n        small = set1_label\n        large = set2_label\n    else:\n        small = set2_label\n        large = set1_label\n  ❸ self.nodes[small].parent = self.nodes[large]\n    self.set_sizes[large] += self.set_sizes[small]\n    self.set_sizes[small] = 0\n    self.num_disjoint_sets -= 1 \n```"]