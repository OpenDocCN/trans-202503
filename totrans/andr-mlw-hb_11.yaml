- en: '**8'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SPYWARE**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Spyware is a form of malware whose goal is to gather specific information from
    as many users as possible. Attackers might use this information in a variety of
    ways, such as to send phishing messages purporting to come from the victim or
    to steal money from a victim’s bank account.
  prefs: []
  type: TYPE_NORMAL
- en: Some spyware falls into multiple categories. For example, you’ll commonly find
    it acting as a banking trojan or as a backdoor. From a detection perspective,
    this can cause machine learning features for the various malware categories to
    overlap, so you’ll rarely find a clean separation between the different types
    of malware and their properties.
  prefs: []
  type: TYPE_NORMAL
- en: '**Spyware Families**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section covers prominent spyware families we didn’t discuss in [Chapter
    2](ch02.xhtml), starting with UaPush, one of the first widespread examples on
    the platform. Beginning in 2011, UaPush sent text messages and stole user information
    from infected devices. It was distributed as an SDK that made its way onto devices
    via apps that used it as part of an advertisement-based profit sharing deal.
  prefs: []
  type: TYPE_NORMAL
- en: Described by F-Secure in 2013, Pincer is malware that pretends to be a security
    certificate under the name *Certificate.apk*. Its spyware functions include capturing
    the IMEI, serial number, and Android version of the device it has compromised,
    along with the user’s phone number, carrier, and other information. It can also
    check to see if it’s being run in a sandbox. Notably, Pincer intercepts SMS traffic
    and forwards it to a command-and-control server, which can in principle enable
    hackers to compromise two-factor authentication and show misleading messages to
    the victim to keep them in the dark.
  prefs: []
  type: TYPE_NORMAL
- en: The HeHe malware also uses its spyware features to thwart two-factor authentication.
    It infiltrates phones by pretending that it is providing a security update to
    the operating system. To exploit its ability to intercept SMS traffic and phone
    calls, it downloads a list of interesting phone numbers from its command-and-control
    center, including numbers of banks, allowing it to intercept two-factor authentication
    events as well as phone calls made to warn the victim of suspicious activity.
  prefs: []
  type: TYPE_NORMAL
- en: USBCleaver, also discovered by F-Secure in 2013, makes its way onto devices
    via apps distributed by third-party app stores or other malicious apps present
    on a compromised device. Interestingly, when the infected device is connected
    to a computer, USBCleaver is able to steal browser and Wi-Fi passwords from it
    over USB and ship them to a command-and-control server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Though first noticed in 2014, Acecard did nothing malicious for several months.
    It masqueraded as various benign apps, such as games or fake Flash players, and
    after installation prompted the device owner for administrator privileges. In
    2015, it started to exhibit malicious behavior. To operate as a banking trojan,
    it stole information from users, for example by overlaying social media login
    windows with fake ones. Kaspersky has thoroughly described this spyware in a series
    of 2016 blog posts, starting with “Acecard Trojan: Android Users of Over 30 Banking
    and Payment Apps at Risk.”'
  prefs: []
  type: TYPE_NORMAL
- en: A more recent example, Qibla Compass Ramadan 2022, claims to help Muslim users
    schedule their prayers, fasts, and other activities during the month of Ramadan.
    In reality, it has tracked the movements of millions of individuals and stolen
    sensitive files from their devices. The *Wall Street Journal* and *Forbes* have
    both claimed that the companies behind this malware have ties to US defense and
    intelligence agencies. We’ll thoroughly analyze this app’s malicious functionality
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Spyware vs. Goodware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 8-1](ch08.xhtml#ch8fig1) shows the top 25 features for distinguishing
    Android spyware from goodware using a random forest classifier (discussed in [Chapter
    5](ch05.xhtml)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/ch08fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-1: Top 25 features that best distinguish Android spyware from goodware*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, 14 of these features are permission-related, 4 are static, and
    2 are dynamic. We’ll focus on the permission-related features in our discussion.
  prefs: []
  type: TYPE_NORMAL
- en: '***Permission-Related Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Many of the most important features for distinguishing spyware from goodware
    involve permissions, and four of these are related to SMS capabilities. The `SEND_SMS`,
    `RECEIVE_SMS`, `WRITE_SMS`, and `READ_SMS` permissions enable spyware to receive
    and read messages (from banks and online marketplaces, for example) to gather
    information that the apps can subsequently send to their command-and-control center.
    Once at the command-and-control center, the malware developers may sell such information
    online and/or use it to commit various types of fraud, such as credit card or
    banking fraud. The `WRITE_SMS` and `SEND_SMS` permissions could also be used,
    for example, to write and send phishing URLs from the device owner’s phone to
    their contacts with the aim of infecting the contacts’ devices. The probability
    of spyware requesting these four permissions is much higher than the probability
    of goodware requesting the same permissions.
  prefs: []
  type: TYPE_NORMAL
- en: File size is an important factor, too. [Figure 8-1](ch08.xhtml#ch8fig1) shows
    us that spyware tends to be much smaller than goodware. We speculate that this
    is because spyware requires fewer space-intensive resources, like the high-resolution
    media often required by legitimate applications. Spyware may also use fewer third-party
    SDKs, which would further reduce their file size.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in the previous chapter, the `READ_PHONE_STATE` permission enables
    hackers to capture device information like IMEI and IMSI numbers. The probability
    of spyware requesting these permissions is more than twice that of goodware. These
    values can be particularly useful when selling and buying stolen data, as the
    unique nature of these hardware identifiers makes them handy primary keys to use
    to join datasets from different sources.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, spyware requests the `GET_TASKS` permission more than three times
    as often as goodware does. This permission, which we encountered in the previous
    chapter, enables the app to see what processes are running on the device. It could
    use this to, for example, detect processes associated with antivirus programs
    or track app usage data to collect and sell to marketers. Note, though, that this
    permission has been deprecated since Android 5.0 (Lollipop), and therefore is
    unlikely to have any impact at the time of this writing.
  prefs: []
  type: TYPE_NORMAL
- en: The `SYSTEM_ALERT_WINDOW` permission is another one that is requested more than
    twice as frequently by spyware than by goodware. Spyware can use it to steal user
    IDs, passwords, credit card details, bank account numbers, and more by displaying
    pop-up windows over the top of other applications that the user assumes are related
    to those apps. You’ll commonly see this behavior in bank phishing malware; as
    we noted, spyware often serves multiple functions, and cleanly separating its
    features by category isn’t always possible.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, although its use is relatively uncommon in both categories, spyware
    requests the privileged `MOUNT_UNMOUNT_FILESYSTEMS` permission more than twice
    as frequently as goodware. Malware developers can use this permission to load
    utility software like BusyBox onto the device, assuming the spyware has elevated
    its privileges.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 8-1](ch08.xhtml#ch8fig1) showed a few other significant permissions
    that spyware requests more often than goodware, as well as features such as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: num_std_permissions The number of permissions defined by official Android developer
    guides declared in the manifest, regardless of whether they’re considered dangerous
    or not
  prefs: []
  type: TYPE_NORMAL
- en: num_std_permissions_dangerous The number of permissions deemed dangerous because
    they grant apps increased access to restricted data or allow it to carry out restricted
    actions
  prefs: []
  type: TYPE_NORMAL
- en: num_non_std_permissions The number of permissions declared in the manifest that
    are defined by sources other than the official Android SDK
  prefs: []
  type: TYPE_NORMAL
- en: '***Prediction Efficacy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Table 8-1](ch08.xhtml#ch8tab1) shows the performance of various machine learning
    classifiers at predicting whether an app is spyware or goodware, given different
    sets of features.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 8-1:** Metrics for Evaluating Android Spyware vs. Goodware'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| API package | RF | 0.9959 | 0.9786 | 0.9741 | 0.9764 | 0.0214 | 0.0338 |'
  prefs: []
  type: TYPE_TB
- en: '| Static (S) | XGBoost | 0.9911 | 0.9627 | 0.9621 | 0.9624 | 0.0373 | 0.0381
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic (D) | RF | 0.9532 | 0.8527 | 0.9708 | 0.9079 | 0.1473 | 0.0342 |'
  prefs: []
  type: TYPE_TB
- en: '| S + D | XGBoost | 0.9943 | 0.9620 | 0.9711 | 0.9665 | 0.0380 | 0.0294 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D | XGBoost | 0.9982 | 0.9824 | 0.9848 | 0.9836 | 0.0176 | 0.0187
    |'
  prefs: []
  type: TYPE_TB
- en: '| TSG | RF | 0.9953 | 0.9800 | 0.9691 | 0.9745 | 0.0200 | 0.0401 |'
  prefs: []
  type: TYPE_TB
- en: '| LM | RF | 0.8625 | 0.7342 | 0.9266 | 0.8193 | 0.2658 | 0.1327 |'
  prefs: []
  type: TYPE_TB
- en: '| FC | RF | 0.9896 | 0.9645 | 0.9590 | 0.9617 | 0.0355 | 0.0500 |'
  prefs: []
  type: TYPE_TB
- en: '| CG | GBDT | 0.9629 | 0.9329 | 0.9339 | 0.9334 | 0.0671 | 0.0812 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + TSG | XGBoost | 0.9989 | 0.9894 | 0.9875 | 0.9884 | 0.0106
    | 0.0153 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + LM | XGBoost | 0.9981 | 0.9824 | 0.9845 | 0.9834 | 0.0176 |
    0.0191 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + FC | XGBoost | 0.9982 | 0.9824 | 0.9856 | 0.9840 | 0.0176 |
    0.0177 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + CG | XGBoost | 0.9983 | 0.9840 | 0.9845 | 0.9842 | 0.0160 |
    0.0190 |'
  prefs: []
  type: TYPE_TB
- en: '| All features | XGBoost | 0.9988 | 0.9875 | 0.9864 | 0.9869 | 0.0125 | 0.0167
    |'
  prefs: []
  type: TYPE_TB
- en: '| Best late fusion | XGBoost | 1.0000 | 1.0000 | 1.0000 | **1.0000** | 0.0000
    | 0.0000 |'
  prefs: []
  type: TYPE_TB
- en: 'As in the previous chapter, the rows indicate the types of features used: API
    package, static, dynamic, TSG-based, landmark-based, feature clustering–based,
    and correlation graph–based. We also show combinations of these features. We’ve
    indicated the best classifier for each type or combination of features and provided
    various predictive performance metrics. The final row shows the results of late
    fusion.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, late fusion using the XGBoost classifier provides excellent
    results, making virtually no mistakes on the data we used during testing. This
    is surprising; almost no machine learning algorithms yield 100 percent performance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Spyware vs. Other Malware**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now turn to the question of how spyware differs from other forms of malware.
    [Figure 8-2](ch08.xhtml#ch8fig2) shows the top 25 features used for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Here too, the majority of the features that distinguish spyware from other malware
    (13 of the top 25) are linked to permissions, so we’ll focus on those.
  prefs: []
  type: TYPE_NORMAL
- en: '***Permission-Related Features***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you look at the classifier’s results, you might notice something interesting:
    SMS-related permissions are conspicuously absent. This is because many types of
    malware, and not just spyware, seek these permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: The `CALL_PHONE` permission is one of the distinguishing features. We see that
    spyware requests this almost three times as often as other types of malware. This
    permission can be used, among other things, to disconnect a phone call (for example,
    if a bank calls to verify that the customer made a purchase). In spyware we’ve
    observed, the `CALL_PHONE` permission is usually sought by apps with advanced
    capabilities that cross into the trojan or backdoor categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'An important permission not covered in preceding chapters, `ACCESS_FINE_LOCATION`,
    provides extremely valuable information. An app with this permission can usually
    identify the victim’s location to within a few meters. Attackers could use this
    information for many purposes. For example, they could build a model of the days
    of the week and times at which the victim is usually present in a particular location
    (say, at a specific coffee shop from 11 AM to 12 PM on Mondays or at a meeting
    in building B on the Google campus from 3 PM to 4 PM on Thursdays). They could
    also infer what stores victims visit and use this to determine whether they are
    good targets: for instance, a user who enters relatively expensive stores, such
    as Whole Foods, Nordstrom, and Neiman Marcus, may draw more attention because
    they appear wealthier than one who mainly frequents convenience stores like 7-Eleven.
    We believe this fine-grained location information about individuals is the most
    sought-after data on data markets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/ch08fig02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 8-2: Top 25 features that best distinguish Android spyware from other
    malware*'
  prefs: []
  type: TYPE_NORMAL
- en: The `RECORD_AUDIO` permission is a potentially creepy one. Many legitimate apps
    seek to record audio, such as voice recorders and online conferencing apps. However,
    if malware records a phone call, adversaries could learn sensitive information.
    Though no kind of malware frequently seeks this permission, the probability of
    spyware requesting it is much higher than the probability of other malware requesting
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` permissions are sought
    almost equally by spyware and other malware. These permissions enable malware
    to read from and write to the device’s SD card, where other apps store potentially
    sensitive files. One particularly interesting use of `WRITE_EXTERNAL_STORAGE`
    that we’ve seen is in an advanced spyware and trojan app called Claco, which stores
    files on the SD card in hopes of infecting Windows systems connected to the Android
    device over USB. Note that after Android introduced scoped storage in Android
    10, most of the previously accessible sensitive files should no longer be accessible
    to unprivileged spyware apps.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the important `KILL_BACKGROUND_PROCESSES` permission in the previous
    chapter. Spyware can use it to kill background processes owned by a given app,
    like an antivirus app. Lastly, some features that help us distinguish spyware
    from goodware can also help us distinguish spyware from other malware. These include
    the `SYSTEM_ALERT_WINDOW`, `MOUNT_UNMOUNT_FILESYSTEMS`, `READ_PHONE_STATE`, and
    `ACCESS_NETWORK_STATE` permissions, as well as features such as `filesize`, `num_std_permissions`,
    and `num_non_std_permissions`. The number of dangerous permissions sought, a top
    feature for distinguishing spyware from goodware, seems less important when distinguishing
    spyware from other forms of malware.
  prefs: []
  type: TYPE_NORMAL
- en: '***Prediction Efficacy***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Table 8-2](ch08.xhtml#ch8tab2) shows the predictive performance of machine
    learning classifiers when tasked with separating spyware from other forms of malware.'
  prefs: []
  type: TYPE_NORMAL
- en: While the best F1 score is a little lower than the result we received when distinguishing
    spyware from goodware, the drop is negligible. The results suggest that machine
    learning is able to separate spyware from goodware very well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 8-2:** Metrics for Evaluating Android Spyware vs. Other Malware'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature set** | **Best classifier** | **AUC** | **Precision** | **Recall**
    | **F1** | **FPR** | **FNR** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| API package | GBDT | 0.9101 | 0.8475 | 0.8379 | 0.8427 | 0.1525 | 0.1610
    |'
  prefs: []
  type: TYPE_TB
- en: '| Static (S) | XGBoost | 0.9156 | 0.8513 | 0.8401 | 0.8456 | 0.1487 | 0.1592
    |'
  prefs: []
  type: TYPE_TB
- en: '| Dynamic (D) | MLP | 0.8394 | 0.8100 | 0.6378 | 0.7137 | 0.1900 | 0.3008 |'
  prefs: []
  type: TYPE_TB
- en: '| S + D | XGBoost | 0.9138 | 0.8560 | 0.8391 | 0.8475 | 0.1440 | 0.1591 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D | XGBoost | 0.9447 | 0.8794 | 0.8794 | 0.8794 | 0.1206 | 0.1214
    |'
  prefs: []
  type: TYPE_TB
- en: '| TSG | RF | 0.6943 | 0.6567 | 0.6635 | 0.6601 | 0.3433 | 0.3423 |'
  prefs: []
  type: TYPE_TB
- en: '| LM | GBDT | 0.8231 | 0.7353 | 0.7540 | 0.7445 | 0.2647 | 0.2541 |'
  prefs: []
  type: TYPE_TB
- en: '| FC | SVM | 0.5047 | 0.5028 | 1.0000 | 0.6692 | 0.4972 | 0.0000 |'
  prefs: []
  type: TYPE_TB
- en: '| CG | XGBoost | 0.9431 | 0.8789 | 0.8822 | 0.8805 | 0.1211 | 0.1190 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + TSG | XGBoost | 0.9457 | 0.8845 | 0.8803 | 0.8824 | 0.1155
    | 0.1199 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + LM | XGBoost | 0.9439 | 0.8845 | 0.8803 | 0.8824 | 0.1155 |
    0.1199 |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + FC | GBDT | 0.9099 | 0.8476 | 0.8388 | 0.8432 | 0.1524 | 0.1603
    |'
  prefs: []
  type: TYPE_TB
- en: '| API + S + D + CG | XGBoost | 0.9156 | 0.8513 | 0.8401 | 0.8456 | 0.1487 |
    0.1592 |'
  prefs: []
  type: TYPE_TB
- en: '| All features | MLP | 0.8394 | 0.8100 | 0.6378 | 0.7137 | 0.1900 | 0.3008
    |'
  prefs: []
  type: TYPE_TB
- en: '| Best late fusion | XGBoost | 0.9998 | 0.9997 | 0.9997 | **0.9997** | 0.0003
    | 0.0009 |'
  prefs: []
  type: TYPE_TB
- en: '**Qibla Compass Ramadan: A Case Study**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now consider the case of the Qibla Compass Ramadan malware, which we’ll refer
    to as simply Ramadan. Researchers at the University of Calgary and the University
    of California, Berkeley, discovered it, along with several other malicious apps
    targeting practicing Muslims. In the article “Google Reportedly Bans Dozens of
    Apps Containing Spyware,” published on April 6, 2022, *Forbes* alleges that the
    apps included code from a company based in Panama that paid app developers to
    incorporate malicious functionality that gathers data for seemingly legitimate
    companies, such as email addresses and files with sensitive content. According
    to *Forbes*, the Panamanian company had links to a US defense contractor with
    an interest in cyber-security, suggesting that a US intelligence or defense operation
    had used the apps to target millions of Muslims. Google blocked Ramadan and other
    related apps in April 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the developers’ motivations, our machine learning algorithms correctly
    predicted that the app isn’t goodware and that it is spyware. [Listing 8-1](ch08.xhtml#ch8lis1)
    shows the permissions *ramadan.com.ramadan* (v4, 9cef) requests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 8-1: All permissions requested by the Ramadan malware*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, many of the permissions that help distinguish spyware from goodware
    are requested here, including `READ_PHONE_STATE` and `RECEIVE_BOOT_COMPLETED`.
    We also see that the malware seeks the `READ_CONTACTS` and `GET_ACCOUNTS` permissions,
    which could enable the app to siphon off the victim’s entire contact list and
    see their accounts.
  prefs: []
  type: TYPE_NORMAL
- en: However, code analysis shows that this particular app doesn’t actually take
    these actions. Instead, [Listing 8-2](ch08.xhtml#ch8lis2) shows the Ramadan app
    accessing accounts created by applications on the targeted phone to identify the
    user’s email address. The malware does this by iterating over all registered accounts
    and looking for a name that matches a regular expression pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 8-2: The Ramadan app determining the phone user’s email address*'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the app requests the `ACCESS_COARSE_LOCATION` and `ACCESS_FINE_LOCATION`
    permissions, which are useful for distinguishing spyware from other forms of malware.
    [Listing 8-3](ch08.xhtml#ch8lis3) shows it grabbing location information at the
    coarse level, including the user’s country and administrative area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 8-3: The Ramadan app accessing coarse-grained location data*'
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 8-4](ch08.xhtml#ch8lis4), the app obtains fine-grained location
    information by accessing the `getLatitude()` and `getLongitude()` functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 8-4: The Ramadan app accessing fine-grained location data*'
  prefs: []
  type: TYPE_NORMAL
- en: It’s unclear whether the location information accessed here is part of the spyware
    functionality or the app’s legitimate activities, as the code sends it to a second
    URL that isn’t obviously connected to the app’s primary command-and-control server
    or to the malware developers.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 8-5](ch08.xhtml#ch8lis5) shows a key piece of functionality used to
    collect potentially sensitive files. In particular, we see it searching for files
    with the extensions *.txt*, *.apk*, *.mp3*, *.3gp*, *.opus*, *.ogg*, *.doc*, *.pdf*
    , *.jpeg*, and *.jpg*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 8-5: The Ramadan app accessing sensitive files*'
  prefs: []
  type: TYPE_NORMAL
- en: After collecting the files, the malware uploads them to its command-and-control
    server. In the code, the address of this server is stored in a simple hex-encoded
    format, as shown in [Listing 8-6](ch08.xhtml#ch8lis6). Decoding the string reveals
    the URL *https://www.salat-prayertimes.com/salat/pray/*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 8-6: The Ramadan app reaching out to a command-and-control server*'
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, Ramadan doesn’t request SMS-related permissions. This may be
    because it’s primarily interested in collecting sensitive files and personal information
    to determine the device’s owner. This behavior supports the hypothesis that the
    malware was distributed to collect intelligence, as the usual features for generating
    revenue are conspicuously absent.
  prefs: []
  type: TYPE_NORMAL
- en: '**Predictions for Spyware Apps**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Table 8-3](ch08.xhtml#ch8tab3) shows how well our machine learning classifiers
    performed when presented with 10 spyware apps, including Ramadan, that are more
    recent than those on which the classifiers were trained. A *Yes* value indicates
    that the classifier correctly predicted the sample to be spyware.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Table 8-3:** Performance of Machine Learning Classifiers on Recent Spyware
    Samples'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Sample name** | **Distinguished from goodware** | **Distinguished from
    other malware** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Bahamut | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Advanced Speed Booster | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Ahorcado | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Test003 | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| SeitaFool | No | No |'
  prefs: []
  type: TYPE_TB
- en: '| Zanmer | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| DDLight | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Dougaleaker | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Cricketland | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| Ssucl | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Ramadan | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: Note that some of the names we’ve assigned to these spyware samples may not
    be widely known to the security community.
  prefs: []
  type: TYPE_NORMAL
- en: 'The machine learning algorithms were able to correctly identify eight of the
    samples, producing an 80 percent recall rate and a 100 percent precision rate
    on these predictions. We cannot be sure why the two other spyware samples (which
    we’ve called Advanced Speed Booster and SeitaFool) weren’t correctly classified.
    One possible reason is that these APKs steal only very few pieces of sensitive
    information: the browser history and contacts, respectively. These actions do
    not require the use of permissions such as `SEND_SMS`, `READ_PHONE_STATE`, `RECEIVE_SMS`,
    `READ_SMS`, and `WRITE_SMS`, which are important features used by machine learning
    algorithms to distinguish spyware from goodware.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Up Next**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter showed that machine learning can effectively separate spyware from
    goodware and other forms of malware. In the former case, permissions once again
    play a huge role; particularly SMS-related ones and permissions such as `READ_PHONE_STATE`,
    `GET_TASKS`, `SYSTEM_ALERT_WINDOW`, and `MOUNT_UNMOUNT_FILESYSTEMS`. To separate
    spyware from other forms of malware, the classifiers relied on different features,
    including the `READ_EXTERNAL_STORAGE`, `WRITE_EXTERNAL_STORAGE`, and `ACCESS_FINE_LOCATION`
    permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Our discussion of the Ramadan app points to yet another element of which Android
    users should be wary. Criminals aren’t the only ones interested in compromising
    your phone; a government, too, might covertly harvest your data. You can find
    additional information about Android spyware in “A Data-Driven Characterization
    of Modern Android Spyware” by Fabio Pierazzi et al.
  prefs: []
  type: TYPE_NORMAL
- en: '[*OceanofPDF.com*](https://oceanofpdf.com)'
  prefs: []
  type: TYPE_NORMAL
