["```\npi@raspberrypi:- $ hostname –I\n```", "```\npi@raspberrypi:- $ sudo apt install nmap\n```", "```\npi@raspberrypi:- $ sudo pip3 install python-nmap\n```", "```\n❶ import nmap\n❷ nm = nmap.PortScanner()\n❸ data = nm.scan(hosts='192.168.1.0/24', arguments= '-sP')\n   print (data['scan'])\n   print (\"\")\n❹ for host in nm.all_hosts():\n    ❺ print ('Host : %s (%s)' % (host, nm[host].hostname()))\n```", "```\nPython 3.5.3\n[GCC 6.3.0 20170124] on linux\nType \"copyright\", \"credits\" or \"license()\" for more information.\n>>>\n=== RESTART: /home/pi/find_ipadresses.py ===\n{'192.168.1.1': {'addresses': {'ipv4': '192.168.1.1'}, 'hostnames':\n[{'name': 'TestBox.cc', 'type': 'PTR'}], 'vendor': {}, 'status':\n{'reason': 'syn-ack', 'state': 'up'}}, '192.164.1.xxx':\n{'addresses': {'ipv4': '192.168.1.xxx'}, 'hostnames': [{'name': '',\n'type': ''}], 'vendor': {}, 'status': {'reason': 'conn-refused',\n'state': 'up'}}}\n```", "```\n❶ from gpiozero import PingServer, LED, Button\n❷ from subprocess import check_call()\n❸ from signal import pause\n\n❹ def shutdown():\n    check_call()(['sudo', 'poweroff'])\n\n   # first device apple phone\n❺ frank = PingServer('192.168.1.1') # hub\n❻ led = LED(4)\n```", "```\n   # second device oneplus\n   scott = PingServer('192.168.1.22') # oneplus\n   led_scott = LED(18)\n\n   # third device laptop 1\n❶ liz = PingServer('192.168.1.72') # laptop 1\n   led_liz = LED(24)\n\n   # fourth device raspberry pi\n   jenny = PingServer('192.168.1.165') # pi\n   led_jenny = LED(7)\n\n   # fifth device laptop 2\n   jade = PingServer('192.168.1.209') # laptop 2\n   led_jade = LED(26)\n```", "```\n   # check every 60 seconds\n❶ led.source_delay = 55\n   led_scott.source_delay = 56\n   led_liz.source_delay = 57\n   led_jenny.source_delay = 58\n   led_jade.source_delay = 59\n\n   # power on LEDs\n❷ led.source = frank.values\n   led_scott.source = scott.values\n   led_liz.source = liz.values\n   led_jenny.source = jenny.values\n   led_jade.source = jade.values\n\n   # GPIO 16 for shutdown\n❸ shutdown_btn = Button(16, hold_time=2)\n❹ shutdown_btn.when_held = shutdown\n\n❺ pause()\n```", "```\npi@raspberrypi:- $ crontab –e\n```", "```\n# daemon's notion of time and timezones.\n#\n# Output of the crontab jobs (including errors) is sent through\n# email to the user the crontab file belongs to (unless redirected)\n#\n# For example, you can run a backup of all your user accounts\n# at 5 am every week with:\n# 0 5 * * 1 tar –zcf /var/backups/home.tgz /home/\n#\n# For more information, see the manual pages of crontab(5) and\ncron(8)\n#\n# m h  dom mon dow    command\n```", "```\n@reboot python3 /home/pi/wifi_spy.py &\n```", "```\npi@raspberrypi:- $ sudo raspi-config\n```", "```\npi@raspberrypi:- $ sudo apt install bluez\npi@raspberrypi:- $ sudo apt install bluetooth libbluetooth-dev\npi@raspberrypi:- $ sudo pip3 install pybluez\n```", "```\nimport bluetooth\nfrom time import sleep\n# find devices\nprint (\"Searching for devices...\")\nnearby_devices = bluetooth.discover_devices(lookup_names = True)\nsleep(10)\nprint (\"found %d devices\" % len(nearby_devices))\nfor addr, name in nearby_devices:\n    print (\"  %s - %s\" % (addr, name))\n```", "```\nPython 3.5.3 (default, Jan 19 2017, 14:11:04)\n [GCC 6.3.0 20170124] on linux\nType \"copyright\", \"credits\" or \"license()\" for more information.\n>>>\n RESTART: /home/pi/bluetooth_finder.py\nSearching for device...\nfound 0 devices\n>>>\n RESTART: /home/pi/bluetooth_finder.py\nSearching for device...\nfound 1 devices\n  D0:57:78:87:F6:8A - DANLAPTOP\n```", "```\n❶ import Bluetooth\n   from bluetooth import *\n\n   from gpiozero import LED, Button\n   from subprocess import check_call()\n   from signal import pause\n   from time import sleep\n\n❷ def shutdown():\n   ❸ check_call()(['sudo', 'poweroff'])\n\n   # define the LEDs\n❹ led1 = LED(4)\n   led2 = LED(18)\n   led3 = LED(24)\n   led4 = LED(7)\n   led5 = LED(26)\n   button = Button(16)\n\n```", "```\nwhile True:\n        # find devices\n        print (\"Searching for devices...\")\n     ❶ nearby_devices = bluetooth.discover_devices(lookup_names =\n        True)\n        sleep(5)\n        # search for particular devices\n        # person 1\n     ❷ liz = bluetooth.lookup_name(\"C5:ED:FB:F5:BB:D7\", timeout=5)\n     ❸ if (liz != None):\n        ❹ print (\"Test 1\")\n        ❺ led1.on()\n     ❻ else:\n            led1.off()\n            pass\n\n        # person 2\n        sarah = bluetooth.lookup_name(\"C5:ED:FB:F5:BB:D7\", timeout=5)\n        if (sarah != None):\n            print (\"Test 2\")\n            led2.on()\n        else:\n            led2.off()\n            pass\n```", "```\n        # person 3\n        frank = bluetooth.lookup_name(\"C5:ED:FB:F5:BB:D7\", timeout=5)\n        if (frank != None):\n            print (\"Test 3\")\n            led3.on()\n        else:\n            led3.off()\n            pass\n\n```", "```\n        #shutdown button\n     ❶ if button.is_pressed:\n         ❷ shutdown()\n        else:\n            pass\n```"]