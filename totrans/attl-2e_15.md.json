["```\n--snip--\njavadir = $(datadir)/java\njava_JAVA = file_a.java file_b.java ...\n--snip--\n```", "```\ndist_noinst_JAVA = file_a.java file_b.java...\n```", "```\n--snip--\nJAVAROOT = .\nJAVAC = javac\nCLASSPATH_ENV = CLASSPATH=$(JAVAROOT):$(srcdir)/$(JAVAROOT):\\\n  $${CLASSPATH:+\":$$CLASSPATH\"}\n--snip--\nall: all-am\n--snip--\nall-am: Makefile classnoinst.stamp $(DATA) all-local\n--snip--\nclassnoinst.stamp: $(am__java_sources)\n        @list1='$?'; list2=; if test -n \"$$list1\"; then \\\n        for p in $$list1; do \\\n          if test -f $$p; then d=; else d=\"$(srcdir)/\"; fi; \\\n          list2=\"$$list2 $$d$$p\"; \\\n        done; \\\n ➊ echo '$(CLASSPATH_ENV) $(JAVAC) -d $(JAVAROOT) \\\n          $(AM_JAVACFLAGS) $(JAVACFLAGS) '\"$$list2\"; \\\n        $(CLASSPATH_ENV) $(JAVAC) -d $(JAVAROOT) \\\n          $(AM_JAVACFLAGS) $(JAVACFLAGS) $$list2; \\\n        else :; fi\n     ➋ echo timestamp > $@\n--snip--\n```", "```\n--snip--\n# Checks for optional programs.\nFLM_PROG_TRY_CSC\nFLM_PROG_TRY_CSVM\nFLM_PROG_TRY_JNI\nFLM_PROG_TRY_JAVADOC\n--snip--\n# Automake conditionals.\nAM_CONDITIONAL([HAVE_JAVA], [test \"x$flm_prog_have_jni\" = xyes])\nAM_CONDITIONAL([HAVE_CSHARP], [test -n \"$CSC\"])\n--snip--\n```", "```\nflaim\n  xflaim\n    src\n      cs\n        wrapper\n      java\n        wrapper\n          xflaim\n```", "```\nif HAVE_JAVA\n  JAVADIR = java\n  JNI_LIBADD = java/libxfjni.la\nendif\n\nif HAVE_CSHARP\n  CSDIR = cs\n  CSI_LIBADD = cs/libxfcsi.la\nendif\n\nSUBDIRS = $(JAVADIR) $(CSDIR)\n--snip--\nlibxflaim_la_LIBADD = $(JNI_LIBADD) $(CSI_LIBADD) $(FTK_LTLIB)\n--snip--\n```", "```\nSUBDIRS = wrapper\n\nXFLAIM_INCLUDE = -I$(srcdir)/..\n\nnoinst_LTLIBRARIES = libxfjni.la\n\nlibxfjni_la_SOURCES = \\\n jbackup.cpp \\\n jdatavector.cpp \\\n jdb.cpp \\\n jdbsystem.cpp \\\n jdomnode.cpp \\\n jistream.cpp \\\n jniftk.cpp \\\n jniftk.h \\\n jnirestore.cpp \\\n jnirestore.h \\\n jnistatus.cpp \\\n jnistatus.h \\\n jostream.cpp \\\n jquery.cpp\n\nlibxfjni_la_CPPFLAGS = $(XFLAIM_INCLUDE) $(FTK_INCLUDE)\n```", "```\n   JAVAROOT = .\n\n➊ jarfile = $(PACKAGE)jni-$(VERSION).jar\n➋ jardir = $(datadir)/java\n   pkgpath = xflaim\n   jhdrout = ..\n\n   $(jarfile): $(dist_noinst_JAVA)\n           $(JAR) cvf $(JARFLAGS) $@ $(pkgpath)/*.class\n\n➌ jar_DATA = $(jarfile)\n\n   java-headers.stamp: $(classdist_noinst.stamp)\n           @list=`echo $(dist_noinst_JAVA) | sed -e 's|\\.java||g' -e 's|/|.|g'`;\\\n             echo \"$(JAVAH) -cp . -jni -d $(jhdrout) $(JAVAHFLAGS) $$list\"; \\\n             $(JAVAH) -cp . -jni -d $(jhdrout) $(JAVAHFLAGS) $$list\n        ➍ @echo \"JNI headers generated\" > java-headers.stamp\n\n➎ all-local: java-headers.stamp\n\n➏ CLEANFILES = $(jarfile) $(pkgpath)/*.class java-headers.stamp\\\n    $(jhdrout)/xflaim_*.h\n\n   dist_noinst_JAVA = \\\n    $(pkgpath)/BackupClient.java \\\n    $(pkgpath)/Backup.java \\\n    --snip--\n    $(pkgpath)/XFlaimException.java \\\n    $(pkgpath)/XPathAxis.java\n```", "```\nSUBDIRS = wrapper\n\nXFLAIM_INCLUDE = -I$(srcdir)/..\n\nnoinst_LTLIBRARIES = libxfcsi.la\n\nlibxfcsi_la_SOURCES = \\\n Backup.cpp \\\n DataVector.cpp \\\n Db.cpp \\\n DbInfo.cpp \\\n DbSystem.cpp \\\n DbSystemStats.cpp \\\n DOMNode.cpp \\\n IStream.cpp \\\n OStream.cpp \\\n Query.cpp\n\nlibxfcsi_la_CPPFLAGS = $(XFLAIM_INCLUDE) $(FTK_INCLUDE)\n```", "```\n   EXTRA_DIST = xflaim cstest sample xflaim.ndoc\n\n   xfcs_sources = \\\n    xflaim/BackupClient.cs \\\n    xflaim/Backup.cs \\\n    --snip--\n    xflaim/RestoreClient.cs \\\n    xflaim/RestoreStatus.cs\n\n   cstest_sources = \\\n    cstest/BackupDbTest.cs \\\n    cstest/CacheTests.cs \\\n    --snip--\n    cstest/StreamTests.cs \\\n    cstest/VectorTests.cs\n\n   TESTS = cstest_script\n\n   AM_CSCFLAGS = -d:mono -nologo -warn:4 -warnaserror+ -optimize+\n   #AM_CSCFLAGS += -debug+ -debug:full -define:FLM_DEBUG\n\n➊ all-local: xflaim_csharp.dll\n\n   clean-local:\n           rm -f xflaim_csharp.dll xflaim_csharp.xml cstest_script\\\n             cstest.exe libxflaim.so\n           rm -f Output_Stream\n           rm -rf abc backup test.*\n\n   install-exec-local:\n           test -z \"$(libdir)\" || $(MKDIR_P) \"$(DESTDIR)$(libdir)\"\n           $(INSTALL_PROGRAM) xflaim_csharp.dll \"$(DESTDIR)$(libdir)\"\n\n   install-data-local:\n           test -z \"$(docdir)\" || $(MKDIR_P) \"$(DESTDIR)$(docdir)\"\n           $(INSTALL_DATA) xflaim_csharp.xml \"$(DESTDIR)$(docdir)\"\n\n   uninstall-local:\n           rm -f \"$(DESTDIR)$(libdir)/xflaim_csharp.dll\"\n           rm -f \"$(DESTDIR)$(docdir)/xflaim_csharp.xml\"\n\n➋ xflaim_csharp.dll: $(xfcs_sources)\n           @list1='$(xfcs_sources)'; list2=; if test -n \"$$list1\"; then \\\n             for p in $$list1; do \\\n               if test -f $$p; then d=; else d=\"$(srcdir)/\"; fi; \\\n               list2=\"$$list2 $$d$$p\"; \\\n             done; \\\n             echo '$(CSC) -target:library $(AM_CSCFLAGS) $(CSCFLAGS) -out:$@\\\n               -doc:$(@:.dll=.xml) '\"$$list2\";\\\n             $(CSC) -target:library $(AM_CSCFLAGS) $(CSCFLAGS) \\\n               -out:$@ -doc:$(@:.dll=.xml) $$list2; \\\n           else :; fi\n\n   check_SCRIPTS = cstest.exe cstest_script\n\n➌ cstest.exe: xflaim_csharp.dll $(cstest_sources)\n          @list1='$(cstest_sources)'; list2=; if test -n \"$$list1\"; then \\\n             for p in $$list1; do \\\n               if test -f $$p; then d=; else d=\"$(srcdir)/\"; fi; \\\n               list2=\"$$list2 $$d$$p\"; \\\n             done; \\\n             echo '$(CSC) $(AM_CSCFLAGS) $(CSCFLAGS) -out:$@ '\"$$list2\"'\\\n               -reference:xflaim_csharp.dll'; \\\n             $(CSC) $(AM_CSCFLAGS) $(CSCFLAGS) -out:$@ $$list2 \\\n               -reference:xflaim_csharp.dll; \\\n          else :; fi\n\n➍ cstest_script: cstest.exe\n           echo \"#!/bin/sh\" > cstest_script\n           echo \"$(top_builddir)/libtool --mode=execute \\\n           ➎ -dlopen=../../libxflaim.la $(CSVM) cstest.exe\" >> cstest_script\n           chmod 0755 cstest_script\n```", "```\n--snip--\ninstall-exec-local:\n        test -z \"$(libdir)\" || $(MKDIR_P) \"$(DESTDIR)$(libdir)\"\n        $(INSTALL_PROGRAM) xflaim_csharp.dll \"$(DESTDIR)$(libdir)\"\n\ninstall-data-local:\n        test -z \"$(docdir)\" || $(MKDIR_P) \"$(DESTDIR)$(docdir)\"\n        $(INSTALL_DATA) xflaim_csharp.xml \"$(DESTDIR)$(docdir)\"\n\nuninstall-local:\n        rm -f \"$(DESTDIR)$(libdir)/xflaim_csharp.dll\"\n        rm -f \"$(DESTDIR)$(docdir)/xflaim_csharp.xml\"\n--snip--\n```", "```\n--snip--\nclean-local:\n        rm -f xflaim_csharp.dll xflaim_csharp.xml cstest_script \\\n          cstest.exe libxflaim.so\n        rm -f Output_Stream\n        rm -rf abc backup test.*\n--snip--\n```", "```\n   --snip--\n   # Configure supported platforms' compiler and linker flags\n➊ case $host in\n     sparc-*-solaris*)\n       LDFLAGS=\"$LDFLAGS -R /usr/lib/lwp\"\n       case $CXX in\n         *g++*) ;;\n         *)\n           if \"x$debug\" = xno; then\n             CXXFLAGS=\"$CXXFLAGS -xO3\"\n           fi\n           SUN_STUDIO=`$CXX -V | grep \"Sun C++\"`\n           if \"x$SUN_STUDIO\" = \"xSun C++\"; then\n             CXXFLAGS=\"$CXXFLAGS -errwarn=%all -errtags\\\n               -erroff=hidef,inllargeuse,doubunder\"\n           fi ;;\n     esac ;;\n\n   *-apple-darwin*)\n     AC_DEFINE([OSX], [1], [Define if building on Apple OSX.]) ;;\n\n   *-*-aix*)\n     case $CXX in\n       *g++*) ;;\n       *) CXXFLAGS=\"$CXXFLAGS -qstrict\" ;;\n     esac ;;\n\n   *-*-hpux*)\n     case $CXX in\n       *g++*) ;;\n       *)\n         # Disable \"Placement operator delete\n # invocation is not yet implemented\" warning\n         CXXFLAGS=\"$CXXFLAGS +W930\" ;;\n     esac ;;\n  esac\n  --snip--\n```", "```\n--snip--\nPROJECT_NAME                = @PACKAGE_NAME@\n--snip--\nPROJECT_NUMBER              = @PACKAGE_VERSION@\n--snip--\nSTRIP_FROM_PATH             = @top_srcdir@\n--snip--\nINPUT                       = @top_srcdir@/src/xflaim.h\n--snip--\n```", "```\n➊ docpkg = $(PACKAGE_TARNAME)-doxy-$(PACKAGE_VERSION).tar.gz\n\n➋ doc_DATA = $(docpkg)\n\n➌ $(docpkg): doxygen.stamp\n           tar chof - html | gzip -9 -c >$@\n\n   doxygen.stamp: doxyfile\n           $(DOXYGEN) $(DOXYFLAGS) $<\n           echo Timestamp > $@\n\n➍ install-data-hook:\n           cd $(DESTDIR)$(docdir) && tar xf $(docpkg)\n\n   uninstall-data-hook:\n           cd $(DESTDIR)$(docdir) && rm -rf html\n\n➎ CLEANFILES = doxywarn.txt doxygen.stamp $(docpkg)\n\n   clean-local:\n           rm -rf html\n```", "```\nName: @PACKAGE_TARNAME@\nBuildRequires: gcc-c++ libstdc++-devel flaimtk-devel gcc-java gjdoc fastjar\nmono-core doxygen\nRequires: libstdc++ flaimtk mono-core java >= 1.4.2\nSummary: XFLAIM is an XML database library.\nURL: http://sourceforge.net/projects/flaim/\nVersion: @PACKAGE_VERSION@\nRelease: 1\nLicense: GPL\nVendor: Novell, Inc.\nGroup: Development/Libraries/C and C++\nSource: %{name}-%{version}.tar.gz\nBuildRoot: %{_tmppath}/%{name}-%{version}-build\n--snip--\n```", "```\n   rpmspec = $(PACKAGE_TARNAME).spec\n\n   rpmmacros =\\\n    --define=\"_rpmdir $${PWD}\"\\\n    --define=\"_srcrpmdir $${PWD}\"\\\n    --define=\"_sourcedir $${PWD}/..\"\\\n    --define=\"_specdir $${PWD}\"\\\n    --define=\"_builddir $${PWD}\"\n   RPMBUILD = rpmbuild\n   RPMFLAGS = --nodeps --buildroot=\"$${PWD}/_rpm\"\n\n➊ rpmcheck:\n           if ! ($(RPMBUILD) --version) >/dev/null 2>&1; then \\\n             echo \"*** This make target requires an rpm-based Linux\n   distribution.\"; \\\n             (exit 1); exit 1; \\\n           fi\n\n   srcrpm: rpmcheck $(rpmspec)\n           $(RPMBUILD) $(RPMFLAGS) -bs $(rpmmacros) $(rpmspec)\n\n   rpms: rpmcheck $(rpmspec)\n           $(RPMBUILD) $(RPMFLAGS) -ba $(rpmmacros) $(rpmspec)\n\n   .PHONY: rpmcheck srcrpm rpms\n```", "```\n--snip--\nRPM = rpm\n\nrpms srcrpm: dist\n     ➊ (cd obs && $(MAKE) $(AM_MAKEFLAGS) $@) || exit 1\n        rpmarch=`$(RPM) --showrc | grep \"^build arch\" | \\\n          sed 's/\\(.*: \\)\\(.*\\)/\\2/'`; \\\n        test -z \"obs/$$rpmarch\" || \\\n          ( mv obs/$$rpmarch/* . && rm -rf /obs/$$rpmarch )\n        rm -rf obs/$(distdir)\n--snip--\n.PHONY: srcrpm rpms\n```"]