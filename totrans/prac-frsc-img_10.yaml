- en: '**9**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**9**'
- en: '**EXTRACTING SUBSETS OF FORENSIC IMAGES**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**提取法证图像的子集**'
- en: '![image](../images/common-01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](../images/common-01.jpg)'
- en: This chapter covers the selective extraction of data regions from an attached
    drive or a forensically acquired image file. You’ll learn to extract whole partitions,
    deleted or partially overwritten partitions, inter-partition gaps, and various
    volume and file slack areas. In addition, you’ll see how to extract special areas
    such as Unified Extensible Firmware Interface (UEFI) partitions, the sectors hidden
    by a DCO or HPA, and hibernation partitions such as Intel Rapid Start Technology.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍如何从附加驱动器或法证获取的镜像文件中选择性提取数据区域。你将学习如何提取整个分区、已删除或部分覆盖的分区、分区间隙以及各种卷和文件空闲区。此外，你将看到如何提取一些特殊区域，如统一可扩展固件接口（UEFI）分区、DCO
    或 HPA 隐藏的扇区，以及休眠分区，如英特尔快速启动技术。
- en: The final sections demonstrate extraction of data from allocated and unallocated
    (possibly deleted) areas of the disk for further examination and manual extraction
    of sectors using offsets. Let’s begin with determining the partition layout of
    the drive.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的部分演示了如何从已分配和未分配（可能已删除）区域提取数据，以便进一步检查，并使用偏移量手动提取扇区。我们从确定驱动器的分区布局开始。
- en: '**Assess Partition Layout and Filesystems**'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**评估分区布局和文件系统**'
- en: Once you’ve attached a disk to your system or have acquired an image file, you
    can perform an analysis of the disk partition scheme. This section explains how
    to identify filesystems, partition tables, and commonly used disk partition schemes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将磁盘连接到系统或获取了镜像文件，你可以对磁盘的分区方案进行分析。本节解释如何识别文件系统、分区表和常用的磁盘分区方案。
- en: The disk layout, or *partition scheme*, refers to the method used to organize
    the *partitions* (or *slices*) on a hard disk. The most common partition schemes
    you’ll find in consumer computing are DOS, GPT, BSD, and APM (Apple Partition
    Map, sometimes called *mac*). We’ll start with identifying the partition scheme
    used on a disk.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘布局，或称为 *分区方案*，指的是用于组织硬盘上的 *分区*（或 *切片*）的方法。你在消费级计算中最常见的分区方案有 DOS、GPT、BSD 和
    APM（Apple Partition Map，有时称为 *mac*）。我们将从识别磁盘上使用的分区方案开始。
- en: '***Partition Scheme***'
  id: totrans-8
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分区方案***'
- en: Each partition or slice on a disk contains a separate filesystem or is used
    for some other special purpose. A small portion of the disk (often just the first
    sector) defines the layout of the disk by specifying the starting sector of each
    partition, the partition size, the partition type, labels, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘上的每个分区或切片包含一个独立的文件系统，或者用于某些特殊目的。磁盘的一小部分（通常只是第一个扇区）通过指定每个分区的起始扇区、分区大小、分区类型、标签等信息来定义磁盘的布局。
- en: To determine the disk partition scheme, you can examine the initial sectors
    of the disk for indicators. There is no official “Assigned Number” designation
    for partition schemes (there are only half a dozen or so). Don’t confuse this
    with DOS MBR partition types or IDs, which list up to 255 possible filesystems
    and other formats that could reside inside a DOS partition. When you attach the
    subject disk to a workstation, the Linux kernel will attempt to detect and interpret
    the partition scheme used, and it will create the devices for each partition it
    finds.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定磁盘的分区方案，你可以检查磁盘的初始扇区以寻找指示标志。分区方案没有官方的“分配号码”指定（大约只有六种或更多）。不要将其与 DOS MBR 分区类型或
    ID 混淆，后者列出了最多 255 种可能的文件系统和其他格式，这些格式可能存在于 DOS 分区中。当你将目标磁盘连接到工作站时，Linux 内核将尝试检测并解释所使用的分区方案，并为它找到的每个分区创建设备。
- en: 'You can use the Sleuth Kit `mmstat` command to identify the most common partition
    schemes. A list of supported partition schemes is shown here:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Sleuth Kit 的 `mmstat` 命令来识别最常见的分区方案。支持的分区方案列表如下：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running `mmstat` will output the name of the scheme used:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `mmstat` 将输出所使用的方案名称：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, you can use the disktype tool to identify the partition scheme.
    The disktype tool provides more verbose information and supports partitions, filesystems,
    and file and archive containers. The following example shows output from disktype:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用 disktype 工具来识别分区方案。disktype 工具提供更详细的信息，支持分区、文件系统以及文件和归档容器。以下示例显示了 disktype
    的输出：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You’ll find the original disktype software package at *[http://disktype.sourceforge.net/](http://disktype.sourceforge.net/)*.
    Also, you’ll find a fork and multiple patches for disktype at *[https://github.com/kamwoods/disktype/](https://github.com/kamwoods/disktype/)*,
    *[https://github.com/Pardus-Linux/Packages/tree/master/system/base/disktype/files/](https://github.com/Pardus-Linux/Packages/tree/master/system/base/disktype/files/)*,
    and *[https://github.com/ericpaulbishop/gargoyle/tree/master/package/disktype/patches/](https://github.com/ericpaulbishop/gargoyle/tree/master/package/disktype/patches/)*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'A storage medium does not require a partition table or even a filesystem. Binary
    data can be written directly to the raw disk and accessed by any program capable
    of understanding it (for example, some databases can directly use raw disks).
    It’s possible to have disks without partition schemes. In such cases, the filesystem
    starts at sector zero and continues to the end of the disk (that is, the whole
    disk is the partition). This is common with some older USB sticks and floppy disks.
    In such cases, partition analysis tools will be ineffective and generally report
    a false or nonexistent partition table. If a tool cannot detect a partition type,
    it’s worth checking whether a filesystem was written directly to a raw device.
    In this example, `mmstat` finds nothing, but `fsstat` does identify a filesystem:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Some encrypted volumes attempt to hide their existence or information about
    the filesystem used, and they don’t use a recognizable partition scheme.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '***Partition Tables***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A partition scheme will have a disk block or set of blocks describing how it’s
    organized. These are called *partition tables* (or *disklabels* for BSD systems),
    and you can query them using various tools.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the Sleuth Kit `mmls` command to list the partition tables on a
    disk or a forensically acquired image. In this example, `mmls` finds a regular
    DOS partition scheme with a FAT32 partition:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The traditional DOS partition scheme is not able to handle disks larger than
    2TB. The GPT partition scheme was created to allow larger disks to be organized
    with a greater number of partitions. GPT supports 128 partitions compared to the
    4 that DOS supports (not counting extended partitions). I have written a paper
    on the forensic analysis of GPT disks and GUID partition tables; you can find
    it here: *[http://dx.doi.org/10.1016/j.diin.2009.07.001](http://dx.doi.org/10.1016/j.diin.2009.07.001)*.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Most new PC systems are being shipped with GPT partitions today. An example
    of a Windows 8 system’s partition table is shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Gary Kessler provides several partition table–parsing tools that provide much
    greater detail. You’ll find these tools at *[http://www.garykessler.net/software/index.html](http://www.garykessler.net/software/index.html)*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the level of detail Kessler’s parsing tools provide, here is
    partial output from the partition table from the preceding example generated using
    the gptparser.pl tool:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 Kessler 的解析工具提供的详细程度，以下是使用 gptparser.pl 工具生成的前面示例中的分区表部分输出：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The tool provides detailed information about each of the 128 GPT partitions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具提供了关于每个 128 个 GPT 分区的详细信息。
- en: '***Filesystem Identification***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***文件系统识别***'
- en: The disktype tool, already presented in “[Partition Scheme](ch09.xhtml#ch09lev2sec01)”
    on [page 260](ch09.xhtml#page_260), allows you to identify partition schemes and
    filesystems within partitions. The Sleuth Kit fsstat tool provides more comprehensive
    information about a filesystem. The fsstat tool can operate directly on a partition
    device or on a forensically acquired image if you specify the sector offset.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 已在 “[分区方案](ch09.xhtml#ch09lev2sec01)” 中介绍过的 disktype 工具（[第 260 页](ch09.xhtml#page_260)）允许你识别分区方案和分区内的文件系统。Sleuth
    Kit 的 fsstat 工具提供关于文件系统的更全面信息。fsstat 工具可以直接在分区设备上操作，或者如果你指定了扇区偏移量，可以在取证获取的镜像上操作。
- en: 'In the previous examples, the sector offset of a Windows volume on the *lenovo.raw*
    image file was 3868672\. You can provide this sector offset to the fssstat tool
    using the `-o` flag to analyze the filesystem metadata:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，*lenovo.raw* 镜像文件上 Windows 卷的扇区偏移量是 3868672。你可以通过 `-o` 标志将此扇区偏移量提供给
    fsstat 工具，以分析文件系统元数据：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If the drive is directly attached to your workstation, the Linux kernel will
    attempt to parse the partition table and make the disk and partition devices available
    in */dev*, where you can access them directly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果驱动器直接连接到你的工作站，Linux 内核将尝试解析分区表，并在 */dev* 中提供磁盘和分区设备，你可以直接访问它们。
- en: However, if you’re examining a raw image file (*.raw*, *.ewf*, and so on), there
    will be no device files for the image. The kernel will not interpret the partition
    table and will not create the familiar partition devices (*/dev/sda1*, */dev/sda2*,
    and so on). You must specify an offset when accessing a partition within an image
    file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你正在检查一个原始镜像文件（*.raw*、*.ewf* 等），该镜像将没有设备文件。内核不会解析分区表，也不会创建熟悉的分区设备（*/dev/sda1*、*/dev/sda2*
    等）。在访问镜像文件中的分区时，你必须指定偏移量。
- en: It’s better to rely on forensic tools to determine the partition details rather
    than to trust the kernel. If a disk is corrupt or damaged, the kernel might refuse
    to create the partition devices or create the wrong ones. The examples you saw
    in this section always specified an offset rather than using the kernel. In situations
    that involve malware, antiforensics, or other malicious misdirection, using forensic
    tools instead of the kernel should take precedence.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最好依赖取证工具来确定分区详情，而不是依赖内核。如果磁盘损坏或损坏，内核可能会拒绝创建分区设备，或者创建错误的设备。你在本节看到的示例始终指定了偏移量，而不是使用内核。在涉及恶意软件、防取证技术或其他恶意误导的情况下，应该优先使用取证工具，而不是内核。
- en: '**Partition Extraction**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**分区提取**'
- en: This section describes the extraction of individual partitions, inter-partition
    gaps, and other areas of the disk like the DCO and HPA. Let’s begin with some
    basic examples of extracting regular partitions.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了单个分区的提取、分区间隙和磁盘上其他区域（如 DCO 和 HPA）。我们从提取常规分区的一些基本示例开始。
- en: '***Extract Individual Partitions***'
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***提取单个分区***'
- en: To access and extract individual partitions rather than the entire hard disk,
    you can use several techniques. I’ll demonstrate a few examples of partition extraction
    using a directly attached drive with a partition device, a partition mapper device,
    and image files operated on by Sleuth Kit’s mmcat- and dd-style tools.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问和提取单独的分区而非整个硬盘，你可以使用多种技术。我将展示一些使用直接连接的驱动器、分区设备、分区映射设备以及由 Sleuth Kit 的 mmcat
    和 dd 风格工具操作的镜像文件进行分区提取的示例。
- en: 'If a disk is accessible as an attached device, acquiring the partition is similar
    to performing a full acquisition with a raw drive device but uses the partition
    device instead. In the following example, the first partition of */dev/sda* is
    extracted to a file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果磁盘作为附加设备可访问，则获取分区的过程类似于使用原始驱动器设备进行完整获取，但使用的是分区设备。以下示例中，*/dev/sda* 的第一个分区被提取到文件中：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Extracting partitions requires some capacity planning, because the partition
    will consume disk space (possibly alongside the full drive image). If you need
    only temporary access to a partition from an acquired image file, you can attach
    it as a loop device and access it. The following steps demonstrate this method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 提取分区需要一定的容量规划，因为分区会占用磁盘空间（可能还会占用完整的驱动器镜像）。如果你仅需要临时访问一个获取的镜像文件中的分区，可以将其作为环回设备附加并进行访问。以下步骤演示了这种方法。
- en: 'First, use the mmls tool to identify the partition to be attached as a loop,
    as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用 mmls 工具识别要作为环回设备附加的分区，方法如下：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then use Bash math expansion to convert the sector offset and sector length
    into a byte offset and byte length:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 Bash 数学扩展将扇区偏移量和扇区长度转换为字节偏移量和字节长度：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The calculated byte offset and byte length are then passed to losetup to create
    a loop device, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 计算出的字节偏移量和字节长度会传递给 losetup 来创建一个环回设备，方法如下：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can access this resulting loop device using forensic tools in the same
    way as you access the partition device of an attached disk. An example using Sleuth
    Kit fls is shown here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像访问附加磁盘的分区设备一样，使用法医工具访问这个结果环回设备。这里是使用 Sleuth Kit fls 的一个示例：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you need to extract a partition from an existing acquired image into a separate
    file, you can use the dd tools or the Sleuth Kit `mmcat` command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要将已获取的镜像中的某个分区提取到一个单独的文件中，可以使用 dd 工具或 Sleuth Kit 的 `mmcat` 命令。
- en: 'To extract a partition from an acquired image, the initial step is to identify
    the partition and sector details. In the following example, the partition table
    from an acquired disk image shows the partition to be extracted:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 提取已获取镜像中的分区，初步步骤是识别分区和扇区的详细信息。在以下示例中，从获取的磁盘镜像中提取的分区表显示了要提取的分区：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Extracting a partition from an already acquired image file using dcfldd or
    dd requires adding `skip` (dc3dd uses `iskip`) and `count` parameters, which cause
    the command to jump (skip) ahead to the start of the partition and acquire only
    the size of the partition:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 dcfldd 或 dd 从已获取的镜像文件中提取分区时，需要添加 `skip`（dc3dd 使用 `iskip`）和 `count` 参数，这些参数使得命令跳过（skip）分区的起始位置，并仅获取分区的大小：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this command, the block size is set to 512 bytes to match the sector size,
    the start of the partition is at sector 63, and 78124032 sectors should be extracted.
    With a little additional calculation, you can improve the performance of this
    command by changing the 512-byte block size to something larger (but don’t forget
    to adjust the `skip` and `count` parameters if you do this).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中，块大小设置为 512 字节，以匹配扇区大小，分区起始位置在扇区 63，应该提取 78124032 个扇区。通过进行一些额外的计算，你可以通过将
    512 字节块大小更改为更大的值来提高此命令的性能（但如果这样做，不要忘记调整 `skip` 和 `count` 参数）。
- en: 'With Sleuth Kit version 3.0 and later, you can use the mmcat tool to easily
    extract partitions. To recover the first partition in the previous example using
    mmcat, you must specify the mmls slot number (not the DOS partition number). In
    this case, the first partition is located in the mmls slot number two and can
    be extracted as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sleuth Kit 3.0 及以后版本中，你可以使用 mmcat 工具轻松提取分区。要使用 mmcat 恢复前面示例中的第一个分区，你必须指定 mmls
    插槽编号（而不是 DOS 分区编号）。在此示例中，第一个分区位于 mmls 插槽编号 2，可以按如下方式提取：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The mmcat tool simply pipes the output to stdout, so you must either redirect
    it to a file or pipe it into a program.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: mmcat 工具会简单地将输出通过管道传递到标准输出（stdout），因此你必须将其重定向到文件或将其传递到其他程序中。
- en: '***Find and Extract Deleted Partitions***'
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***查找并提取已删除的分区***'
- en: To exhaustively search for partially overwritten or deleted partitions of a
    forensically acquired image, you can use several methods. Sleuth Kit provides
    a basic tool called sigfind to search for binary signature strings. Two useful
    tools for comprehensive partition searching are gpart and testdisk. These tools
    implement filesystem recognition algorithms with more intelligent guessing to
    identify lost partitions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面搜索法医获取的镜像中部分覆盖或已删除的分区，可以使用多种方法。Sleuth Kit 提供了一个名为 sigfind 的基本工具来搜索二进制签名字符串。gpart
    和 testdisk 是两种用于全面分区搜索的有用工具。它们实现了文件系统识别算法，通过更智能的猜测来识别丢失的分区。
- en: 'Running gpart without any options starts a scan for partitions, skipping over
    areas identified as allocated. For example:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 gpart 命令而不加任何选项时，它会开始扫描分区，跳过已标记为已分配的区域。例如：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding a `-f` flag tells gpart to be exhaustive, looking for partitions in every
    sector of the entire disk, even in areas where no partitions are expected to be
    found. This will take much longer than the default gpart scan without flags.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`-f`标志会告诉gpart执行更全面的扫描，检查整个磁盘的每个扇区，即使在没有预期分区的区域也会进行检查。与没有标志的默认gpart扫描相比，这将花费更多时间。
- en: The testdisk tool (*[http://www.cgsecurity.org/](http://www.cgsecurity.org/)*,
    written by Christophe Grenier, who also wrote the photorec carving tool) provides
    several features in addition to partition searching. Testdisk provides an interactive
    interface, supports multiple disk layouts (DOS, GPT, BSD, and more), detects several
    dozen partition types, generates activity logs, and can extract discovered partitions
    to a file. You can use testdisk on devices, raw image files, and even **.e01*
    files.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: testdisk工具（* [http://www.cgsecurity.org/](http://www.cgsecurity.org/)*，由Christophe
    Grenier编写，他还编写了photorec数据恢复工具）提供了多个分区搜索功能。Testdisk提供交互式界面，支持多种磁盘布局（DOS、GPT、BSD等），检测多种分区类型，生成活动日志，并可以将发现的分区提取到文件中。你可以在设备、原始镜像文件甚至**.e01*文件上使用testdisk。
- en: Use the testdisk tool with caution. This tool was designed for repairing and
    recovering partitions, and it could easily modify evidence. Be sure to use a write
    blocker before running this tool on attached subject disks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 小心使用testdisk工具。此工具是为修复和恢复分区设计的，使用不当可能会轻易修改证据。在运行此工具之前，确保在附加的目标磁盘上使用写保护器。
- en: 'Also included with the tool is a comprehensive user interactive menu system
    to define options and activities. Shown here is a batch mode example operating
    on an attached disk:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 工具还包括一个全面的用户交互菜单系统，用于定义选项和操作。这里展示的是一个在附加磁盘上运行的批处理模式示例：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can perform a certain amount of manual analysis to search for deleted partitions.
    If the partition table shows a large area of unallocated space on a disk, check
    this area to determine whether a partition exists. In the following example, mmls
    shows nearly 2.5GB (4863378 sectors) of empty space at the end of a thumb drive:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以进行一定量的手动分析，以搜索已删除的分区。如果分区表显示磁盘上有大片未分配空间，请检查该区域以确定是否存在分区。在以下示例中，mmls显示在一个U盘的末尾有接近2.5GB（4863378个扇区）的空闲空间：
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This unallocated space could be a deleted partition. In this example, running
    fsstat using the offset of the empty space discovers a valid filesystem:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个未分配空间可能是一个已删除的分区。在此示例中，通过使用空闲空间的偏移量运行fsstat可以发现一个有效的文件系统：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you detect a valid filesystem, you can use the meta information about it
    to determine the probable size of the partition. Knowing the size and starting
    offset, you can extract the discovered partition or further analyze it. You can
    extract it using dd-style tools or more easily with mmcat, like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检测到有效的文件系统，可以使用其元数据来确定分区的可能大小。知道了大小和起始偏移后，你可以提取发现的分区或进一步分析它。你可以使用dd风格的工具提取它，或者使用mmcat更容易地提取，如下所示：
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, the mmcat output of the deleted partition discovered in mmls slot 003
    is sent to a file called *deleted_partition.raw*.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，从mmls槽003中发现的已删除分区的mmcat输出被发送到名为*deleted_partition.raw*的文件中。
- en: '***Identify and Extract Inter-Partition Gaps***'
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***识别并提取分区间空隙***'
- en: In some cases, there may be gaps between partitions that were created accidentally
    or due to adjacent partitions meeting on cylinder or block boundaries. There could
    also be intentional gaps that were created for hiding data. You can identify and
    recover these inter-partition gaps in the same way as you extract a partition.
    Use mmls to determine the size and sector offset of the gap, and then use dd or
    mmcat to extract it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，分区之间可能会有意外的空隙，或者由于相邻分区在柱面或块边界上相遇所造成的空隙。也可能是为了隐藏数据而故意创建的空隙。你可以像提取分区一样识别并恢复这些分区间的空隙。使用mmls确定空隙的大小和扇区偏移，然后使用dd或mmcat来提取它。
- en: 'The mmls output of a partition table is shown here. The disk contains two partitions,
    and there is a gap between them:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一个分区表的mmls输出。磁盘包含两个分区，并且它们之间存在空隙：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this example, the first partition ends on sector 15626236, but the adjacent
    partition starts on sector 15626240, indicating a three-sector gap between them.
    Although you can extract this inter-partition gap using dd, using mmcat is simpler:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，第一个分区结束于扇区15626236，但相邻分区从扇区15626240开始，表明它们之间有一个三扇区的空隙。虽然你可以使用dd提取这个分区间空隙，但使用mmcat更简单：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The resulting file is three sectors in size with the contents of the gap between
    the two partitions. Larger gaps between partitions that contain partially overwritten,
    corrupted, or identifiable filesystem fragments can be analyzed with carving tools
    such as foremost.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件大小为三个扇区，包含两个分区之间的空白区域。分区之间的较大空隙，如果包含部分重写、损坏或可识别的文件系统碎片，可以通过如 foremost 这样的雕刻工具进行分析。
- en: The gap between the last partition and the end of a disk can also be of interest.
    It may contain artifacts such as content from previously overwritten partitions,
    backup copies of the GPT partition, or even malware attempting to hide segments
    of binary code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个分区与磁盘末尾之间的空隙也可能是值得关注的地方。它可能包含一些遗留物，比如先前重写的分区的内容、GPT 分区的备份副本，甚至是恶意软件试图隐藏二进制代码片段。
- en: '***Extract HPA and DCO Sector Ranges***'
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***提取 HPA 和 DCO 扇区范围***'
- en: You have already learned how to identify and remove HPA and DCO restrictions.
    Once removed, these areas of the disk can be extracted for separate analysis.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经学会了如何识别并移除 HPA 和 DCO 限制。一旦移除，这些磁盘区域可以被提取出来进行单独分析。
- en: 'In this example, hdparm shows that an HPA exists, and the mmls output shows
    three slots, one of them being a Linux partition:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，hdparm 显示存在 HPA，而 mmls 输出显示三个插槽，其中一个是 Linux 分区：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After you successfully remove the HPA (and tell the kernel to rescan the SCSI
    bus), running the same commands again produces different output, as shown here:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 成功移除 HPA 后（并告诉内核重新扫描 SCSI 总线），再次运行相同的命令会产生不同的输出，如下所示：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, hdparm indicates the HPA is disabled, and the mmls output shows an additional
    line of output (slot 03) representing the sectors previously hidden by the HPA.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，hdparm 指示 HPA 已被禁用，而 mmls 输出显示一个额外的输出行（插槽 03），表示之前被 HPA 隐藏的扇区。
- en: 'Using the `mmcat` command with partition slot 03 will extract the data from
    HPA, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mmcat` 命令与分区插槽 03 结合，将提取来自 HPA 的数据，如下所示：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This example uses a live disk attached to an acquisition host. When an image
    file is acquired from a disk with the HPA removed, mmls will see this hidden region.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例使用的是连接到获取主机的实时磁盘。当从移除 HPA 的磁盘中获取映像文件时，mmls 将看到这个隐藏的区域。
- en: Extracting sectors hidden by a DCO is identical to the method shown here with
    the HPA. First use hdparm to expose the DCO-protected sectors, and then extract
    them using dd or mmcat. This procedure does not need to be repeated with additional
    examples specifically demonstrating sectors from a DCO.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 提取由 DCO 隐藏的扇区的方法与这里展示的 HPA 方法完全相同。首先使用 hdparm 显示 DCO 保护的扇区，然后使用 dd 或 mmcat 提取这些扇区。这个过程不需要通过额外的示例来重复，专门演示
    DCO 扇区的提取。
- en: '**Other Piecewise Data Extraction**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**其他分段数据提取**'
- en: In this final section, I describe various additional examples of piecewise data
    extraction. The contents of this section (in fact the contents of most of this
    chapter) blur together slightly with forensic filesystem analysis, which is not
    the intended scope of the book. For this reason, the examples are slightly less
    descriptive.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后，我将描述各种其他的分段数据提取示例。本节内容（实际上是本章的大部分内容）与法医文件系统分析有些重叠，这不是本书的预期范围。因此，这些示例的描述略显简略。
- en: '***Extract Filesystem Slack Space***'
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***提取文件系统松散空间***'
- en: '*Slack space* is a traditional digital forensics concept referring to allocated
    but unused data at the end of disk sectors, filesystem blocks, or filesystems
    (RAM slack, file slack, and partition slack, respectively).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*松散空间* 是一个传统的数字取证概念，指的是位于磁盘扇区、文件系统块或文件系统末尾的已分配但未使用的数据（分别为 RAM 松散、文件松散和分区松散）。'
- en: To visualize slack space, imagine this book as a hard disk, where paragraphs
    are sectors, chapters are files, and body of the text is the partition. Notice
    that paragraphs don’t finish exactly at the end of a line, chapters don’t finish
    exactly at the end of a page, and the end of the book might have a couple of additional
    blank pages. These empty spaces are the book’s “slack space.” With storage media,
    if the OS or physical drive has not explicitly written zeros to these areas, they
    might still contain data from previously written files.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化松散空间，假设这本书就是一个硬盘，其中段落是扇区，章节是文件，正文部分是分区。请注意，段落不会精确地在一行的末尾结束，章节不会精确地在一页的末尾结束，书的结尾可能会有几页空白。这些空白区域就是这本书的“松散空间”。对于存储介质，如果操作系统或物理驱动器没有明确地将零写入这些区域，它们可能仍然包含先前写入文件的数据。
- en: 'Historically, extracting and analyzing slack space has been useful in forensic
    investigations. However, the value of slack space is beginning to decrease due
    to several factors:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，提取和分析空闲空间在取证调查中一直很有用。然而，由于多个因素，空闲空间的价值正在下降：
- en: • SSDs are using TRIM commands to zero unallocated blocks.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: • SSD使用TRIM命令将未分配的块置零。
- en: • Modern OSes are writing back zeros to unused portions of sectors and blocks.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: • 现代操作系统正在将零写回未使用的扇区和块的部分。
- en: • Disks with native 4K sectors align with filesystem block sizes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: • 原生4K扇区的磁盘与文件系统块大小对齐。
- en: • OSes create partitions and filesystems aligned to block boundaries.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: • 操作系统创建的分区和文件系统对齐到块边界。
- en: As part of the forensic process, acquiring and analyzing potential slack areas
    are still diligent steps to complete.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作为取证过程的一部分，获取和分析潜在的空闲区域仍然是需要认真完成的步骤。
- en: 'To extract all slack space on a given image, you can use the Sleuth Kit `blkls`
    command. Slack space is filesystem specific, so you must extract slack space on
    each filesystem separately (you can’t just use the entire raw disk). In this example,
    the filesystem offsets of the acquired image are found with mmls, and the slack
    space of each one is extracted:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取给定镜像的所有空闲空间，可以使用Sleuth Kit的`blkls`命令。空闲空间是文件系统特定的，因此必须在每个文件系统上单独提取空闲空间（不能仅使用整个原始磁盘）。在这个示例中，通过mmls找到了已获取镜像的文件系统偏移量，并提取了每个文件系统的空闲空间：
- en: '[PRE26]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The slack space for each recognized filesystem is saved to a file. The `blkls`
    command’s `-s` flag extracts all slack space (and only slack space). It is important
    to understand that slack space does not refer to unallocated blocks or sectors.
    Slack space is the unused area found within *allocated* blocks and sectors of
    a filesystem.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个已识别文件系统的空闲空间被保存到文件中。`blkls`命令的`-s`标志提取所有空闲空间（仅空闲空间）。重要的是要理解，空闲空间并不指未分配的块或扇区。空闲空间是文件系统中*已分配*块和扇区内未使用的区域。
- en: '***Extract Filesystem Unallocated Blocks***'
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***提取文件系统未分配的块***'
- en: This next example will gather all unallocated blocks from filesystems on an
    acquired image. Unallocated blocks are filesystem specific, so you need to perform
    this operation separately on each recognized filesystem.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例将从已获取的镜像中的文件系统收集所有未分配的块。未分配的块是文件系统特定的，因此需要对每个识别的文件系统分别执行此操作。
- en: 'Here, the `mmls` command is again used to determine the offsets of each filesystem,
    and the `blkls` command is used to extract unallocated blocks:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`mmls`命令再次用于确定每个文件系统的偏移量，并使用`blkls`命令提取未分配的块：
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The correct `blkls` flag for extracting unallocated blocks is `-A`, but because
    it’s the default command behavior, you can omit it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 提取未分配块的正确`blkls`标志是`-A`，但是由于这是默认命令行为，因此可以省略它。
- en: You can also perform the inverse action of extracting all (and only) allocated
    blocks using the `blkls -a` command.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以执行提取所有（仅限）分配块的反向操作，使用`blkls -a`命令。
- en: '***Manual Extraction Using Offsets***'
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***使用偏移量进行手动提取***'
- en: In certain situations, you might use a hex editor to browse, search, or manually
    analyze the contents of a disk or acquired disk image. The hex editor may provide
    a byte offset, a sector offset, or both.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能会使用hex编辑器浏览、搜索或手动分析磁盘或已获取的磁盘镜像的内容。hex编辑器可能提供字节偏移量、扇区偏移量或两者。
- en: 'This example uses the console-based hexedit tool to analyze a disk:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例使用基于控制台的hexedit工具来分析磁盘：
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The hexedit tool allows you to directly edit block device files and edit very
    large image files (no loading in memory or temp files), and it provides a sector
    mode (entire sectors and sector offsets are shown).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: hexedit工具允许您直接编辑块设备文件，并编辑非常大的镜像文件（无需加载到内存或临时文件），并提供扇区模式（显示整个扇区和扇区偏移量）。
- en: 'In the following example, the sector offset is 2048 (the start of an NTFS partition),
    the byte offset is 0x100181, and the entire sector is shown (note: hexedit assumes
    512-byte sectors):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，扇区偏移量为2048（NTFS分区的起始位置），字节偏移量为0x100181，显示整个扇区（注意：hexedit假设512字节扇区）：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: From the byte or sector offset, you can construct dd commands to extract what
    was found within the hex editor.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从字节或扇区偏移量，可以构造dd命令来提取在hex编辑器中找到的内容。
- en: 'The following example uses a sector size of 512, a sector offset, and a sector
    count to extract a range of data (four 512-byte sectors) from an image:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用512字节的扇区大小、扇区偏移量和扇区计数从镜像中提取一范围的数据（四个512字节的扇区）：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The next example extracts the same range of data using byte offsets. The `skip`
    command uses Bash math expansion to convert hexadecimal into decimal, which is
    needed for `dd`; the block size is 1 byte; and the count is the number of bytes
    required.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The two previous examples extract the same block (four sectors or 2048 bytes)
    of data. Note that when extracting regions of a disk, it is sensible to ensure
    you have sector- or block-aligned offsets (that is, multiples of the sector size
    or block size).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases in which you need to extract a range of filesystem blocks, use the
    Sleuth Kit `blkcat` command. The following example extracts 25 blocks from a filesystem
    starting at block 100:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The filesystem block size should be detected by the tool.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: The examples in this final section showed how you can access images; use offsets;
    and extract a range of bytes, sectors, or blocks. You can also use other Sleuth
    Kit commands to map sectors to blocks and map blocks to inodes and filenames.
    These tasks are filesystem specific and move into the realm of filesystem forensic
    analysis.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '**Closing Thoughts**'
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this final chapter, you learned how to extract subsets of drives and forensic
    images. The chapter focused on extracting various portions of an image such as
    sectors hidden by an HPA or DCO, deleted partitions, and inter-partition gaps.
    You also saw the manual extraction of specified sectors and blocks, including
    unallocated blocks and slack space. This chapter bordered on forensic analysis,
    as it looked at identifying partition schemes, understanding partition tables,
    and identifying filesystems. Since this book is about forensic acquisition and
    not forensic analysis, it is a fitting final chapter.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
