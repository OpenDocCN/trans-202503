["```\n/////////////////\n// Instruments //\n/////////////////\n\n////////////////\n// Sequencing //\n////////////////\n\n//////////\n// Song //\n//////////\n\n////////////////////\n// Event Handling //\n//////////////////// \n```", "```\n`--snip--`\n////////////////////\n// Event Handling //\n////////////////////\n\nlet play = document.querySelector(\"#play\");\nlet playing = document.querySelector(\"#playing\");\n\nplay.addEventListener(\"click\", () => {\n  // Hide this button\n  play.style = \"display: none\";\n  playing.style = \" \";\n\n Tone.start();\n\n  // Modify this to start playback at a different part of the song\n❶ Tone.Transport.position = \"0:0:0\";\n  Tone.Transport.start();\n}); \n```", "```\n/////////////////\n// Instruments //\n/////////////////\n\n❶ function mkDrums() {\n  let reverb = new Tone.Reverb({\n    decay: 1,\n    wet: 0.3\n  }).toDestination();\n\n  let hiHatFilter = new Tone.Filter(15000, \"bandpass\").connect(reverb);\n\n  let hiHat = new Tone.NoiseSynth({\n    envelope: {\n      attack: 0.001, decay: 0.1, sustain: 0, release: 0\n    },\n    volume: -6\n  }).connect(hiHatFilter);\n\n class Snare {\n    constructor() {\n      this.noiseFilter = new Tone.Filter(5000, \"bandpass\").connect(reverb);\n      this.noiseSynth = new Tone.NoiseSynth({\n        envelope: {\n          attack: 0.001, decay: 0.1, sustain: 0, release: 0\n        },\n        volume: -12\n      }).connect(this.noiseFilter);\n\n      this.synth = new Tone.Synth({\n        envelope: {\n          attack: 0.0001, decay: 0.1, sustain: 0, release: 0\n        },\n        oscillator: {type: \"sine\"},\n        volume: -12\n      }).connect(reverb);\n    }\n\n    triggerAttackRelease(duration, when) {\n      this.noiseSynth.triggerAttackRelease(duration, when);\n      this.synth.triggerAttackRelease(\"G3\", duration, when);\n    }\n  }\n\n  let snare = new Snare();\n\n  let kick = new Tone.MembraneSynth({\n    pitchDecay: 0.02,\n    octaves: 6,\n    volume: -9\n  }).connect(reverb);\n\n❷ return {hiHat, snare, kick};\n}\n\nlet drums = mkDrums();\n`--snip--` \n```", "```\n`--snip--`\n////////////////\n// Sequencing //\n////////////////\n\n// Converts a string to an array of notes or nulls.\n// Dots in the string become nulls in the array and are silent.\n❶ function mkSequence(pattern) {\n  return pattern.split(\" \").map(value => {\n    if (value == \".\") {\n      return null;\n    } else {\n      return value;\n    }\n  });\n}\n\n❷ let drumPattern = {\n  kick:  \"x…x…\",\n  snare: \"..x…x.\",\n  hiHat: \"xxxxxxxx\",\n};\n\nlet hiHatSequence = new Tone.Sequence(time => {\n  drums.hiHat.triggerAttackRelease(\"16n\", time);\n}, mkSequence(drumPattern.hiHat), \"8n\");\n\nlet snareSequence = new Tone.Sequence(time => {\n  drums.snare.triggerAttackRelease(\"16n\", time);\n}, mkSequence(drumPattern.snare), \"8n\");\n\nlet kickSequence = new Tone.Sequence(time => {\n    drums.kick.triggerAttackRelease(50, \"16n\", time);\n}, mkSequence(drumPattern.kick), \"8n\");\n`--snip--` \n```", "```\n`--snip--`\n//////////\n// Song //\n//////////\n\nhiHatSequence.start(\"0:0:0\").stop(\"44:0:0\");\nsnareSequence.start(\"0:0:0\").stop(\"44:0:0\");\nkickSequence.start(\"0:0:0\").stop(\"44:0:0\");\n`--snip--` \n```", "```\n`--snip--`\nlet lowBass = new Tone.FMSynth({\n  oscillator: {\n  ❶ type: \"triangle\"\n  },\n  envelope: {\n    attack: 0.0001, decay: 0.5, sustain: 0.3, release: 0.1\n  },\n  volume: -3\n}).toDestination();\n\nlet highBass = new Tone.FMSynth({\n  oscillator: {\n  ❷ type: \"square\"\n  },\n  envelope: {\n    attack: 0.0001, decay: 0.1, sustain: 0.3, release: 0.1\n  },\n  volume: -9\n}).toDestination();\n`--snip--` \n```", "```\n\"C3|  |  |C3|  |  |G2|B2\"\n```", "```\n`--snip--`\n// Converts a string to an array of notes or nulls.\n// Spaces between pipes in the string become nulls in the array and are silent.\nfunction mkPipeSequence(pattern) {\n  return pattern.split(\"|\").map(value => {\n  ❶ if (value.trim() == \" \") {\n      return null;\n    } else {\n      return value;\n    }\n  });\n}\n`--snip--` \n```", "```\n`--snip--`\nlet lowBassSequence = new Tone.Sequence((time, note) => {\n  lowBass.triggerAttackRelease(note, \"16n\", time, 0.6);\n}, mkPipeSequence(\"G2|  |  |G2|G2|  |  |  \"), \"8n\");\n\nlet highBassSequence = new Tone.Sequence((time, note) => {\n  highBass.triggerAttackRelease(note, \"16n\", time, 0.3);\n}, mkPipeSequence(\"G3|F3|E3|D3|G2|D3|G3|D3\"), \"8n\");\n`--snip--` \n```", "```\n`--snip--`\nlowBassSequence.start(\"0:0:0\").stop(\"47:3:0\");\nhighBassSequence.start(\"4:0:0\").stop(\"47:3:0\");\n`--snip--` \n```", "```\n`--snip--`\nlet chordSynth = new Tone.PolySynth(Tone.Synth, {\n  oscillator: {\n    type: \"triangle\"\n  },\n  volume: -12\n}).toDestination();\n`--snip--` \n```", "```\n`--snip--`\n❶ let chords = {\n  1: [\"D4\", \"G4\"],\n  2: [\"E4\", \"G4\"],\n  3: [\"C4\", \"E4\", \"G4\"],\n  4: [\"B3\", \"F4\", \"G4\"],\n};\n\n❷ function playChord(time, chordName) {\n❸ let notes = chords[chordName];\n  chordSynth.triggerAttackRelease(notes, \"16n\", time, 0.6);\n}\n\n❹ let chordSequence1 = new Tone.Sequence((time, chordName) => {\n  playChord(time, chordName);\n}, mkSequence(\"1…2…3..4…31…2…3..4.343\"), \"8n\");\n\n❺ let chordSequence2 = new Tone.Sequence((time, chordName) => {\n  playChord(time, chordName);\n}, mkSequence(\"3…2…4..1.213\"), \"8n\"); \n`--snip--` \n```", "```\n`--snip--`\nchordSequence1.start(\"8:0:0\").stop(\"24:0:0\");\nchordSequence2.start(\"24:0:0\").stop(\"32:0:0\");\nchordSequence1.start(\"32:0:0\").stop(\"40:0:0\");\n`--snip--` \n```", "```\n`--snip--`\n// Samples from freesound.org:\n// https://freesound.org/people/MTG/sounds/357432/\n// https://freesound.org/people/MTG/sounds/357336/\n// https://freesound.org/people/MTG/sounds/357546/\nlet sampler = new Tone.Sampler({\n  urls: {\n    \"C5\": \"trumpet-c5.mp3\", \n    \"D5\": \"trumpet-d5.mp3\", \n    \"F5\": \"trumpet-f5.mp3\" \n  },\n  baseUrl: \"https://skilldrick-jscc.s3.us-west-2.amazonaws.com/\",\n  attack: 0,\n  release: 1,\n  volume: -24\n}).toDestination();\n`--snip--` \n```", "```\n`--snip--`\nlet trumpetPart = new Tone.Part((time, note) => {\n  sampler.triggerAttackRelease(note, \"1n\", time);\n}, [\n  [\"0:0:0\", \"G5\"],\n  [\"0:2:0\", \"C5\"],\n  [\"1:0:0\", \"G5\"],\n\n  [\"2:0:0\", \"D5\"],\n  [\"2:2:0\", \"C5\"],\n  [\"3:0:0\", \"B4\"],\n\n  [\"4:0:0\", \"G5\"],\n  [\"4:2:0\", \"C5\"],\n  [\"5:0:0\", \"G5\"],\n\n  [\"6:0:0\", \"D5\"],\n  [\"6:2:0\", \"C5\"],\n  [\"7:0:0\", \"B4\"],\n  [\"7:2:0\", \"D5\"],\n\n  [\"8:0:0\", \"C5\"],\n  [\"8:2:0\", \"E5\"],\n [\"9:0:0\", \"F5\"],\n  [\"9:2:0\", \"D5\"],\n\n  [\"10:0:0\", \"C5\"],\n  [\"10:2:0\", \"E5\"],\n  [\"11:0:0\", \"D5\"],\n\n  [\"12:0:0\", \"C5\"],\n  [\"12:2:0\", \"E5\"],\n  [\"13:0:0\", \"F5\"],\n  [\"13:2:0\", \"D5\"],\n\n  [\"14:0:0\", \"C5\"],\n  [\"14:2:0\", \"E5\"],\n  [\"15:0:0\", [\"B4\", \"G5\"]]\n]);\n`--snip--` \n```", "```\n`--snip--`\ntrumpetPart.start(\"16:0:0\");\n`--snip--` \n```", "```\n/////////////////\n// Instruments //\n/////////////////\n\nfunction mkDrums() {\n  let reverb = new Tone.Reverb({\n    decay: 1,\n    wet: 0.3\n  }).toDestination();\n\n  let hiHatFilter = new Tone.Filter(15000, \"bandpass\").connect(reverb);\n\n  let hiHat = new Tone.NoiseSynth({\n    envelope: {\n      attack: 0.001, decay: 0.1, sustain: 0, release: 0\n    },\n    volume: -6\n  }).connect(hiHatFilter);\n\n  class Snare {\n    constructor() {\n      this.noiseFilter = new Tone.Filter(5000, \"bandpass\").connect(reverb);\n      this.noiseSynth = new Tone.NoiseSynth({\n        envelope: {\n          attack: 0.001, decay: 0.1, sustain: 0, release: 0\n        },\n        volume: -12\n }).connect(this.noiseFilter);\n\n      this.synth = new Tone.Synth({\n        envelope: {\n          attack: 0.0001, decay: 0.1, sustain: 0, release: 0\n        },\n        oscillator: {type: \"sine\"},\n        volume: -12\n      }).connect(reverb);\n    }\n\n    triggerAttackRelease(duration, when) {\n      this.noiseSynth.triggerAttackRelease(duration, when);\n      this.synth.triggerAttackRelease(\"G3\", duration, when);\n    }\n  }\n\n  let snare = new Snare();\n\n  let kick = new Tone.MembraneSynth({\n    pitchDecay: 0.02,\n    octaves: 6,\n    volume: -9\n  }).connect(reverb);\n\n  return {hiHat, snare, kick};\n}\n\nlet drums = mkDrums();\n\nlet lowBass = new Tone.FMSynth({\n  oscillator: {\n    type: \"triangle\"\n  },\n  envelope: {\n    attack: 0.0001, decay: 0.5, sustain: 0.3, release: 0.1\n  },\n  volume: -3\n}).toDestination();\n\nlet highBass = new Tone.FMSynth({\n  oscillator: {\n    type: \"square\"\n  },\n  envelope: {\n    attack: 0.0001, decay: 0.1, sustain: 0.3, release: 0.1\n  },\n  volume: -9\n}).toDestination();\n\nlet chordSynth = new Tone.PolySynth(Tone.Synth, {\n  oscillator: {\n    type: \"triangle\"\n  },\n volume: -12\n}).toDestination();\n\n// Samples from freesound.org:\n// https://freesound.org/people/MTG/sounds/357432/\n// https://freesound.org/people/MTG/sounds/357336/\n// https://freesound.org/people/MTG/sounds/357546/\nlet sampler = new Tone.Sampler({\n  urls: {\n    \"C5\": \"trumpet-c5.mp3\", \n    \"D5\": \"trumpet-d5.mp3\", \n    \"F5\": \"trumpet-f5.mp3\" \n  },\n  baseUrl: \"https://skilldrick-jscc.s3.us-west-2.amazonaws.com/\",\n  attack: 0,\n  release: 1,\n  volume: -24\n}).toDestination();\n\n////////////////\n// Sequencing //\n////////////////\n\n// Converts a string to an array of notes or nulls.\n// Dots in the string become nulls in the array and are silent.\nfunction mkSequence(pattern) {\n  return pattern.split(\" \").map(value => {\n    if (value == \".\") {\n      return null;\n    } else {\n      return value;\n    }\n  });\n}\n\n// Converts a string to an array of notes or nulls.\n// Spaces between pipes in the string become nulls in the array and are silent.\nfunction mkPipeSequence(pattern) {\n  return pattern.split(\"|\").map(value => {\n    if (value.trim() == \" \") {\n      return null;\n    } else {\n      return value;\n    }\n  });\n}\n\nlet drumPattern = {\n  kick:  \"x…x…\",\n  snare: \"..x…x.\",\n  hiHat: \"xxxxxxxx\",\n};\n\nlet hiHatSequence = new Tone.Sequence(time => {\n  drums.hiHat.triggerAttackRelease(\"16n\", time);\n}, mkSequence(drumPattern.hiHat), \"8n\");\n\nlet snareSequence = new Tone.Sequence(time => {\n  drums.snare.triggerAttackRelease(\"16n\", time);\n}, mkSequence(drumPattern.snare), \"8n\");\n\nlet kickSequence = new Tone.Sequence(time => {\n  drums.kick.triggerAttackRelease(50, \"16n\", time);\n}, mkSequence(drumPattern.kick), \"8n\");\n\nlet lowBassSequence = new Tone.Sequence((time, note) => {\n  lowBass.triggerAttackRelease(note, \"16n\", time, 0.6);\n}, mkPipeSequence(\"G2|  |  |G2|G2|  |  |  \"), \"8n\");\n\nlet highBassSequence = new Tone.Sequence((time, note) => {\n  highBass.triggerAttackRelease(note, \"16n\", time, 0.3);\n}, mkPipeSequence(\"G3|F3|E3|D3|G2|D3|G3|D3\"), \"8n\");\n\nlet chords = {\n  1: [\"D4\", \"G4\"],\n  2: [\"E4\", \"G4\"],\n  3: [\"C4\", \"E4\", \"G4\"],\n  4: [\"B3\", \"F4\", \"G4\"],\n};\n\nfunction playChord(time, chordName) {\n  let notes = chords[chordName];\n  chordSynth.triggerAttackRelease(notes, \"16n\", time, 0.6);\n}\n\nlet chordSequence1 = new Tone.Sequence((time, chordName) => {\n  playChord(time, chordName);\n}, mkSequence(\"1…2…3..4…31…2…3..4.343\"), \"8n\");\n\nlet chordSequence2 = new Tone.Sequence((time, chordName) => {\n  playChord(time, chordName);\n}, mkSequence(\"3…2…4..1.213\"), \"8n\");\n\nlet trumpetPart = new Tone.Part((time, note) => {\n  sampler.triggerAttackRelease(note, \"1n\", time);\n}, [\n  [\"0:0:0\", \"G5\"],\n  [\"0:2:0\", \"C5\"],\n  [\"1:0:0\", \"G5\"],\n\n  [\"2:0:0\", \"D5\"],\n  [\"2:2:0\", \"C5\"],\n  [\"3:0:0\", \"B4\"],\n\n  [\"4:0:0\", \"G5\"],\n  [\"4:2:0\", \"C5\"],\n  [\"5:0:0\", \"G5\"],\n\n [\"6:0:0\", \"D5\"],\n  [\"6:2:0\", \"C5\"],\n  [\"7:0:0\", \"B4\"],\n  [\"7:2:0\", \"D5\"],\n\n  [\"8:0:0\", \"C5\"],\n  [\"8:2:0\", \"E5\"],\n  [\"9:0:0\", \"F5\"],\n  [\"9:2:0\", \"D5\"],\n\n  [\"10:0:0\", \"C5\"],\n  [\"10:2:0\", \"E5\"],\n  [\"11:0:0\", \"D5\"],\n\n  [\"12:0:0\", \"C5\"],\n  [\"12:2:0\", \"E5\"],\n  [\"13:0:0\", \"F5\"],\n  [\"13:2:0\", \"D5\"],\n\n  [\"14:0:0\", \"C5\"],\n  [\"14:2:0\", \"E5\"],\n  [\"15:0:0\", [\"B4\", \"G5\"]]\n]);\n\n//////////\n// Song //\n//////////\n\nhiHatSequence.start(\"0:0:0\").stop(\"44:0:0\");\nsnareSequence.start(\"0:0:0\").stop(\"44:0:0\");\nkickSequence.start(\"0:0:0\").stop(\"44:0:0\");\n\nlowBassSequence.start(\"0:0:0\").stop(\"47:3:0\");\nhighBassSequence.start(\"4:0:0\").stop(\"47:3:0\");\n\nchordSequence1.start(\"8:0:0\").stop(\"24:0:0\");\nchordSequence2.start(\"24:0:0\").stop(\"32:0:0\");\nchordSequence1.start(\"32:0:0\").stop(\"40:0:0\");\n\ntrumpetPart.start(\"16:0:0\");\n\n////////////////////\n// Event Handling //\n////////////////////\n\nlet play = document.querySelector(\"#play\");\nlet playing = document.querySelector(\"#playing\");\n\nplay.addEventListener(\"click\", () => {\n  // Hide this button\n  play.style = \"display: none\";\n  playing.style = \" \";\n\n  Tone.start();\n\n // Modify this to start playback at a different part of the song\n  Tone.Transport.position = \"0:0:0\";\n  Tone.Transport.start();\n}); \n```"]