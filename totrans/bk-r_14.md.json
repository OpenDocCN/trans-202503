["```\nwarn_test <- function(x){\n    if(x<=0){\n        warning(\"'x' is less than or equal to 0 but setting it to 1 and\n                continuing\")\n        x <- 1\n    }\n    return(5/x)\n}\n\nerror_test <- function(x){\n    if(x<=0){\n        stop(\"'x' is less than or equal to 0... TERMINATE\")\n    }\n    return(5/x)\n}\n```", "```\nR> warn_test(0)\n[1] 5\nWarning message:\nIn warn_test(0) :\n  'x' is less than or equal to 0 but setting it to 1 and continuing\nR> error_test(0)\nError in error_test(0) : 'x' is less than or equal to 0... TERMINATE\n```", "```\nmyfibrec2 <- function(n){\n    if(n<0){\n        warning(\"Assuming you meant 'n' to be positive -- doing that instead\")\n        n <- n*-1\n    } else if(n==0){\n        stop(\"'n' is uninterpretable at 0\")\n    }\n\n    if(n==1||n==2){\n        return(1)\n    } else {\n        return(myfibrec2(n-1)+myfibrec2(n-2))\n    }\n}\n```", "```\nR> myfibrec2(6)\n[1] 8\nR> myfibrec2(-3)\n[1] 2\nWarning message:\nIn myfibrec2(-3) :\n  Assuming you meant 'n' to be positive -- doing that instead\nR> myfibrec2(0)\nError in myfibrec2(0) : 'n' is uninterpretable at 0\n```", "```\nR> attempt1 <- try(myfibrec2(0),silent=TRUE)\n```", "```\nR> attempt1\n[1] \"Error in myfibrec2(0) : 'n' is uninterpretable at 0\\n\"\nattr(,\"class\")\n[1] \"try-error\"\nattr(,\"condition\")\n<simpleError in myfibrec2(0): 'n' is uninterpretable at 0>\n```", "```\nR> attempt2 <- try(myfibrec2(6),silent=TRUE)\nR> attempt2\n[1] 8\n```", "```\nmyfibvector <- function(nvec){\n    nterms <- length(nvec)\n    result <- rep(0,nterms)\n    for(i in 1:nterms){\n        result[i] <- myfibrec2(nvec[i])\n    }\n    return(result)\n}\n```", "```\nR> foo <- myfibvector(nvec=c(1,2,10,8))\nR> foo\n[1]  1  1 55 21\n```", "```\nR> bar <- myfibvector(nvec=c(3,2,7,0,9,13))\nError in myfibrec2(nvec[i]) : 'n' is uninterpretable at 0\n```", "```\nmyfibvectorTRY <- function(nvec){\n    nterms <- length(nvec)\n    result <- rep(0,nterms)\n    for(i in 1:nterms){\n        attempt <- try(myfibrec2(nvec[i]),silent=T)\n        if(class(attempt)==\"try-error\"){\n            result[i] <- NA\n        } else {\n            result[i] <- attempt\n        }\n    }\n    return(result)\n}\n```", "```\nR> baz <- myfibvectorTRY(nvec=c(3,2,7,0,9,13))\nR> baz\n[1]   2   1  13  NA  34 233\n```", "```\nR> attempt3 <- try(myfibrec2(-3),silent=TRUE)\nWarning message:\nIn myfibrec2(-3) :\n  Assuming you meant 'n' to be positive -- doing that instead\nR> attempt3\n[1] 2\n```", "```\nR> attempt4 <- suppressWarnings(myfibrec2(-3))\nR> attempt4\n[1] 2\n```", "```\n    R> solve(matrix(1:4,2,2))\n         [,1] [,2]\n    [1,]   -2  1.5\n    [2,]    1 -0.5\n    ```", "```\n        list(1:4,matrix(1:4,1,4),matrix(1:4,4,1),matrix(1:4,2,2))\n        ```", "```\n    list(diag(9),matrix(c(0.2,0.4,0.2,0.1,0.1,0.2),3,3),\n         rbind(c(5,5,1,2),c(2,2,1,8),c(6,1,5,5),c(1,0,2,0)),\n         matrix(1:6,2,3),cbind(c(3,5),c(6,5)),as.vector(diag(2)))\n    ```", "```\nR> Sys.sleep(3)\n```", "```\nsleep_test <- function(n){\n    result <- 0\n    for(i in 1:n){\n        result <- result + 1\n        Sys.sleep(0.5)\n    }\n    return(result)\n}\n```", "```\nR> sleep_test(8)\n[1] 8\n```", "```\nprog_test <- function(n){\n    result <- 0\n    progbar <- txtProgressBar(min=0,max=n,style=1,char=\"=\")\n    for(i in 1:n){\n        result <- result + 1\n        Sys.sleep(0.5)\n        setTxtProgressBar(progbar,value=i)\n    }\n    close(progbar)\n    return(result)\n}\n```", "```\nR> prog_test(8)\n================================================================\n[1] 8\n```", "```\nR> Sys.time()\n[1] \"2016-03-06 16:39:27 NZDT\"\n```", "```\nt1 <- Sys.time()\nSys.sleep(3)\nt2 <- Sys.time()\nt2-t1\n```", "```\nR> t1 <- Sys.time()\nR> Sys.sleep(3)\nR> t2 <- Sys.time()\nR> t2-t1\nTime difference of 3.012889 secs\n```", "```\nR> search()\n [1] \".GlobalEnv\"        \"tools:RGUI\"        \"package:stats\"\n [4] \"package:graphics\"  \"package:grDevices\" \"package:utils\"\n [7] \"package:datasets\"  \"package:methods\"   \"Autoloads\"\n[10] \"package:base\"\n```", "```\nR> foo <- c(4,1.5,3)\nR> sum(foo)\n[1] 8.5\n```", "```\nsum <- function(x){\n    result <- 0\n    for(i in 1:length(x)){\n        result <- result + x[i]^2\n    }\n    return(result)\n}\n```", "```\nR> sum(foo)\n[1] 27.25\n```", "```\nR> base::sum(foo)\n[1] 8.5\n```", "```\nR> rm(sum)\n```", "```\nR> library(\"spatstat\")\nspatstat 1.40-0       (nickname: 'Do The Maths')\nFor an introduction to spatstat, type 'beginner'\nR> library(\"car\")\n\nAttaching package: 'car'\n\nThe following object is masked from 'package:spatstat':\n\n    ellipse\n```", "```\nR> cats <- \"meow\"\n```", "```\nR> library(\"MASS\")\n\nAttaching package: 'MASS'\n\nThe following object is masked _by_ '.GlobalEnv':\n\n    cats\n\nThe following object is masked from 'package:spatstat':\n\n    area\n```", "```\nR> search()\n [1] \".GlobalEnv\"        \"package:MASS\"      \"package:car\"\n [4] \"package:spatstat\"  \"tools:RGUI\"        \"package:stats\"\n [7] \"package:graphics\"  \"package:grDevices\" \"package:utils\"\n[10] \"package:datasets\"  \"package:methods\"   \"Autoloads\"\n[13] \"package:base\"\n```", "```\nR> detach(\"package:car\",unload=TRUE)\nR> search()\n [1] \".GlobalEnv\"        \"package:MASS\"     \"package:spatstat\"\n [4] \"tools:RGUI\"        \"package:stats\"    \"package:graphics\"\n [7] \"package:grDevices\" \"package:utils\"    \"package:datasets\"\n[10] \"package:methods\"   \"Autoloads\"        \"package:base\"\n```", "```\nR> foo <- data.frame(surname=c(\"a\",\"b\",\"c\",\"d\"),\n                     sex=c(0,1,1,0),height=c(170,168,181,180),\n                     stringsAsFactors=F)\nR> foo\n  surname sex height\n1       a   0    170\n2       b   1    168\n3       c   1    181\n4       d   0    180\n```", "```\nR> attach(foo)\nR> search()\n [1] \".GlobalEnv\"        \"foo\"               \"package:MASS\"\n [4] \"package:spatstat\"  \"tools:RGUI\"        \"package:stats\"\n [7] \"package:graphics\"  \"package:grDevices\" \"package:utils\"\n[10] \"package:datasets\"  \"package:methods\"   \"Autoloads\"\n[13] \"package:base\"\n```", "```\nR> surname\n[1] \"a\" \"b\" \"c\" \"d\"\n```", "```\nR> bar <- data.frame(surname=c(\"e\",\"f\",\"g\",\"h\"),\n                     sex=c(1,0,1,0),weight=c(55,70,87,79),\n                     stringsAsFactors=F)\nR> bar\n  surname sex weight\n1       e   1     55\n2       f   0     70\n3       g   1     87\n4       h   0     79\n```", "```\nR> attach(bar)\nThe following objects are masked from foo:\n\n    sex, surname\n```", "```\nR> search()\n [1] \".GlobalEnv\"       \"bar\"               \"foo\"\n [4] \"package:MASS\"     \"package:spatstat\"  \"tools:RGUI\"\n [7] \"package:stats\"    \"package:graphics\"  \"package:grDevices\"\n[10] \"package:utils\"    \"package:datasets\"  \"package:methods\"\n[13] \"Autoloads\"        \"package:base\"\n```", "```\nR> height\n[1] 170 168 181 180\n```", "```\nR> detach(foo)\nR> search()\n [1] \".GlobalEnv\"        \"bar\"               \"package:MASS\"\n [4] \"package:spatstat\"  \"tools:RGUI\"        \"package:stats\"\n [7] \"package:graphics\"  \"package:grDevices\" \"package:utils\"\n[10] \"package:datasets\"  \"package:methods\"   \"Autoloads\"\n[13] \"package:base\"\n```"]