- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">9</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    A DIGITAL MUSIC PLAYER AND SOUND BOARD</samp>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../images/opener-img.png)'
  prefs: []
  type: TYPE_IMG
- en: Digital audio players became popular during the 2000s but faded away as smartphones
    began to dominate the market. However, there are still plenty of uses for discrete
    MP3 players, such as audio playback in toys, as announcement systems, or as simple
    audio players. Thanks to the low cost of the bare MP3 player modules, you can
    easily build fun, interesting MP3 player projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you’ll learn to:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a simple MP3 player just for listening to music, with none of the distractions
    of a smartphone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make an MP3 audio sound board for direct playback control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use the devices you build in this chapter to play any audio you like
    and can modify them for the applications mentioned previously in your own future
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The YX6300 MP3 Module</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the MP3 projects in this chapter, you’ll use a YX6300-type compact module,
    such as PMD Way part 725600, shown in [Figure 9-1](chapter9.xhtml#fig9-1).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF A YX6300 MP3 PLAYER MODULE](../images/fig9-1.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-1: An MP3 player module
    (front)</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: On the reverse side of the module is a microSD flash memory card socket, which
    can be used with cards up to 32GB, as shown in [Figure 9-2](chapter9.xhtml#fig9-2).
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE BOTTOM OF THE MP3 PLAYER MODULE, SHOWING THE MICROSD CARD
    SOCKET](../images/fig9-2.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-2: The back of an
    MP3 player module</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: When buying a flash memory card to use with the MP3 module, be sure to purchase
    an adapter as well so you can insert it into normal SD memory card sockets on
    PCs for file transfer.
  prefs: []
  type: TYPE_NORMAL
- en: I chose to base this chapter on the YX6300-type MP3 module for a few reasons.
    First, you can connect headphones, amplifiers, or speakers to the audio output
    via the module’s 3.5 mm stereo audio jack socket, with no extra circuitry required.
    Second, commands and information are sent via serial data (a UART) using an Arduino
    software serial port, so we need to connect only four pins to the Arduino circuit.
    Finally, the unit is inexpensive and widely available.
  prefs: []
  type: TYPE_NORMAL
- en: As a test before you start the first project, let’s use the module to play some
    audio. First, prepare three or four MP3 audio files of your choosing for playback
    on your PC and copy them to the microSD card. Next, connect the MP3 module to
    the Arduino, following the schematic in [Figure 9-3](chapter9.xhtml#fig9-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR THE MP3 PLAYER TEST CIRCUIT](../images/fig9-3.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-3: The MP3 player
    test circuit</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Carefully insert the memory card into the module, with the label facing upward,
    as shown in [Figure 9-4](chapter9.xhtml#fig9-4). The card will slide in and then
    bump up against a spring lock—push it in a little farther until the lock clicks.
    (To remove the card, gently push against the card, which should spring in a little
    and then pop out.)
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO SHOWING THE INSERTION OF THE MICROSD CARD INTO THE MP3 PLAYER MODULE](../images/fig9-4.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-4: Inserting the memory
    card into an MP3 player module</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, plug some headphones or amplified speakers into the MP3 module and
    then enter and upload the [Listing 9-1](#LiT-9-1) sketch. After a few moments,
    the module should play the first 10 seconds of the first audio file on the memory
    card and then repeatedly skip to the next and play it for 10 seconds. The LED
    on the rear of the module should stay on while the memory card is inserted and
    should blink when playing audio. If yours doesn’t work, check the wiring, including
    the TX/RX back to the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 9-1](#LiT-9-1) shows how this works.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 9-1: Testing a serial
    MP3 player</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: This sketch sends commands and data to the MP3 module via a serial UART connection
    with the Arduino. Each data packet, containing both the command and the associated
    data, consists of 8 hexadecimal bytes of data.
  prefs: []
  type: TYPE_NORMAL
- en: To save time, the sketch defines some useful command values as variables ❶.
    These commands are assembled into the <samp class="SANS_TheSansMonoCd_W5Regular_11">commands[]</samp>
    array and then sent out via a software serial port ❷. This uses the first command
    listed in [Table 9-1](chapter9.xhtml#tab9-1) to initialize the MP3 player and
    select the microSD card socket as the source of audio files ❸ and then starts
    playing the audio files ❹. The sketch plays the next audio file found on the microSD
    card ❺ for 10 seconds ❻, and then the process repeats.
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 9-1](chapter9.xhtml#tab9-1) describes the commands you can use with
    your player.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 9-1:</samp> <samp class="SANS_Futura_Std_Book_11">MP3
    Player Commands</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Command set</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Purpose</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">09</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    02</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Initializes
    MP3 player, uses the microSD card</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">0D</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Resumes/starts
    playback</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">0E</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Pauses
    playback</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">16</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Stops
    playback, resets to first track</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">02</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Plays
    previous track</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">01</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Plays
    next track</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">05</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Turns
    volume down</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">04</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Turns
    volume up</samp> |'
  prefs: []
  type: TYPE_TB
- en: Of the two bold bytes in each command group, the first is the command byte,
    and the second is the data bytes. These are the two parameters used in the sketch’s
    <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3()</samp> function to
    instruct the MP3 player. For basic playback use, you don’t need to send data bytes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, you’ll test these commands by building your own MP3 player
    with some control functions.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #28: Building a Simple MP3
    Player</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you’ll create an MP3 player with typical play, pause, volume,
    and track forward/backward controls. You’ll need the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An Arduino Uno or compatible board and USB cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An MP3 player module with a microSD card of MP3 audio files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solderless breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assorted jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headphones or cables to audio amplifier and speakers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An analog 6- or 12-button keypad circuit from [Chapter 1](chapter1.xhtml)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To build this project, you can either reuse the 12-button keypad you built
    in Project #3, using only 6 of the buttons, or Project #2. Don’t forget to update
    the analog values on the analog keypad library if you’re using the 12-button keypad.
    Assemble the circuit as shown in [Figure 9-5](chapter9.xhtml#fig9-5).'
  prefs: []
  type: TYPE_NORMAL
- en: '![THE SCHEMATIC FOR PROJECT #28](../images/fig9-5.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-5: The schematic for
    Project #28</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter and upload the Project #28 sketch. After a few moments, press button
    7; the music in the MP3 files you arranged on the memory card should start playing.
    Test the other buttons to ensure their functions work. If some or all do not work,
    check that the button analog values match the actual keypresses using the process
    described in Project #2, and update the values in the analogkeypad library as
    described in Project #3.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The sketch first declares the array used for storing the commands to control
    the MP3 module ❶ and then initializes the software serial port for Arduino-to-MP3-player
    control, as well as the library for the analog button keypad ❷. The custom <samp
    class="SANS_TheSansMonoCd_W5Regular_11">void controlMP3()</samp> function accepts
    the command and data parameters required to control the MP3 player, inserts them
    into the array ❸ ❹, and sends the command to the MP3 player via the software serial
    port ❺. The sketch then starts the software serial port and sends the initialize
    command to instruct the MP3 player to use the microSD card ❻.
  prefs: []
  type: TYPE_NORMAL
- en: Once operation has begun, the sketch loops, awaiting a response from the analog
    button circuit in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>,
    where each button is assigned a <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3()</samp>
    function along with the appropriate command data from [Table 9-1](chapter9.xhtml#tab9-1).
  prefs: []
  type: TYPE_NORMAL
- en: You now have a working MP3 audio player that you can embed, modify, or make
    portable for your own distraction-free source of audio (as opposed to smartphones,
    whose games, messages, and other content can be distracting). The USB cable connected
    to the Arduino is powering the project, but you could instead use a power bank
    or AC-to-USB adapter and place everything inside an enclosure of your own design.
    You might also draw a small map to explain which buttons have which effects, as
    shown in [Figure 9-6](chapter9.xhtml#fig9-6), if you’re demonstrating the project
    to your friends or family.
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO OF THE COMPLETED PROJECT #28, WITH THE 12-BUTTON KEYPAD AND A USER
    REFERENCE FOR THE PLAYBACK CONTROLS](../images/fig9-6.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-6: Example of Project
    #28 with the 12-button keypad and a user reference for the playback controls</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, you’ll use the MP3 player module you’ve just built to create
    a sound board.
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #29: Building an MP3 Player
    Sound Board</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this project, you’ll use the hardware from Project #28 with the 12-button
    board to create a *sound board*, a device that plays preset audio tracks at the
    press of a button. Sound boards are often used in broadcasting, in toys, or as
    part of exhibits in museums to offer information for the visually impaired. This
    project uses buttons to initiate audio playback, but you can use it as a framework
    for a device that plays audio upon other actions the Arduino detects, such as
    triggers in your code or outputs from sensors, switches, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before uploading the Project #29 sketch, rename the MP3 audio files on your
    microSD card, using the numbering convention shown in [Figure 9-7](chapter9.xhtml#fig9-7),
    so the MP3 player can search for the exact audio file to play at the press of
    a button. For example, when the player searches for audio file 1, the MP3 will
    play the *001001.mp3* file. Accordingly, you should name file 4 *004004.mp3*,
    file 12 *012012.mp3*, and so on. Store these files in a folder named *01*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A SCREENSHOT OF THE LIST OF MP3 FILES, ORGANIZED WITH APPROPRIATE FILENAMES](../images/fig9-7.png)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-7: An example of MP3
    files in the</samp> <samp class="SANS_Futura_Std_Book_11">01</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">folder,
    with filenames structured for sound board use</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: These MP3 files can contain any audio you like. Just for fun, you might try
    downloading some sound effects such as animal sounds or ambient daily noise from
    websites such as [*https://<wbr>www<wbr>.zapsplat<wbr>.com*](https://www.zapsplat.com).
    I’ve included a folder of sounds from Zapsplat with the book download files at
    [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians).
    Alternately, you could load the MP3 with your 12 favorite songs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve gathered and organized your MP3 files and inserted the microSD
    card into the player, enter and upload the following sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This sketch operates in the same manner as that of the previous project, except
    that different types of commands and data are sent to the player when you press
    the buttons. These new commands play whatever track number matches the value of
    the data sent in the command. For example, to play file *001001.mp3*, the sketch
    sends
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: using <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3(0x0F, 1)</samp>
    ❶. The command for direct track playback is <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0F</samp>,
    and the data value (1) is the number of the track’s filename (*001001.mp3*). The
    rest of the buttons follow the same command format, with data values that match
    the other MP3 filenames.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build your own MP3 player and use it to
    listen to music and play sound effects. There are plenty of other fun ways to
    use your MP3 module, such as creating audible outputs for projects instead of
    LEDs or displays. For a final challenge, you might write your own MP3 player Arduino
    library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll learn how to use a new type of temperature sensor,
    OLED displays, and multiple I²C buses with your Arduino.
  prefs: []
  type: TYPE_NORMAL
