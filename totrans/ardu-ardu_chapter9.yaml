- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">9</samp> <samp class="SANS_Dogma_OT_Bold_B_11">BUILDING
    A DIGITAL MUSIC PLAYER AND SOUND BOARD</samp>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">9</samp> <samp class="SANS_Dogma_OT_Bold_B_11">构建数字音乐播放器和音效板</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: Digital audio players became popular during the 2000s but faded away as smartphones
    began to dominate the market. However, there are still plenty of uses for discrete
    MP3 players, such as audio playback in toys, as announcement systems, or as simple
    audio players. Thanks to the low cost of the bare MP3 player modules, you can
    easily build fun, interesting MP3 player projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数字音频播放器在2000年代流行起来，但随着智能手机开始主导市场，它们逐渐消失。不过，离散的MP3播放器仍然有很多用途，比如玩具中的音频播放、公告系统或简单的音频播放器。由于裸MP3播放器模块的成本较低，你可以轻松构建有趣的MP3播放器项目。
- en: 'In this chapter, you’ll learn to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习：
- en: Build a simple MP3 player just for listening to music, with none of the distractions
    of a smartphone
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个简单的MP3播放器，仅用于听音乐，没有智能手机带来的干扰。
- en: Make an MP3 audio sound board for direct playback control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作一个MP3音频音效板，用于直接播放控制。
- en: You can use the devices you build in this chapter to play any audio you like
    and can modify them for the applications mentioned previously in your own future
    projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用本章中构建的设备播放任何你喜欢的音频，并可以将它们修改为前面提到的应用，应用到你未来的项目中。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The YX6300 MP3 Module</samp>
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">YX6300 MP3模块</samp>
- en: For the MP3 projects in this chapter, you’ll use a YX6300-type compact module,
    such as PMD Way part 725600, shown in [Figure 9-1](chapter9.xhtml#fig9-1).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的MP3项目，你将使用YX6300型紧凑模块，如[图9-1](chapter9.xhtml#fig9-1)所示的PMD Way部件725600。
- en: '![A PHOTO OF A YX6300 MP3 PLAYER MODULE](../images/fig9-1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![YX6300 MP3播放器模块的照片](../images/fig9-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-1: An MP3 player module
    (front)</samp>'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图9-1：MP3播放器模块（正面）</samp>
- en: On the reverse side of the module is a microSD flash memory card socket, which
    can be used with cards up to 32GB, as shown in [Figure 9-2](chapter9.xhtml#fig9-2).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的背面是一个microSD闪存卡插槽，可以使用最大32GB的卡，如[图9-2](chapter9.xhtml#fig9-2)所示。
- en: '![A PHOTO OF THE BOTTOM OF THE MP3 PLAYER MODULE, SHOWING THE MICROSD CARD
    SOCKET](../images/fig9-2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![MP3播放器模块底部的照片，显示microSD卡插槽](../images/fig9-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-2: The back of an
    MP3 player module</samp>'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图9-2：MP3播放器模块背面</samp>
- en: When buying a flash memory card to use with the MP3 module, be sure to purchase
    an adapter as well so you can insert it into normal SD memory card sockets on
    PCs for file transfer.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在购买用于MP3模块的闪存卡时，请务必购买一个适配器，这样你就可以将其插入PC上的普通SD内存卡插槽进行文件传输。
- en: I chose to base this chapter on the YX6300-type MP3 module for a few reasons.
    First, you can connect headphones, amplifiers, or speakers to the audio output
    via the module’s 3.5 mm stereo audio jack socket, with no extra circuitry required.
    Second, commands and information are sent via serial data (a UART) using an Arduino
    software serial port, so we need to connect only four pins to the Arduino circuit.
    Finally, the unit is inexpensive and widely available.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择基于YX6300型MP3模块来编写本章，原因有几点。首先，你可以通过模块的3.5毫米立体声音频插孔连接耳机、放大器或扬声器，无需额外的电路。其次，命令和信息通过串行数据（UART）使用Arduino软件串口发送，因此我们只需要将四个引脚连接到Arduino电路。最后，该单元价格低廉，且广泛可用。
- en: As a test before you start the first project, let’s use the module to play some
    audio. First, prepare three or four MP3 audio files of your choosing for playback
    on your PC and copy them to the microSD card. Next, connect the MP3 module to
    the Arduino, following the schematic in [Figure 9-3](chapter9.xhtml#fig9-3).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始第一个项目之前，先进行一个测试，使用模块播放一些音频。首先，准备三到四个你选择的MP3音频文件，并将它们复制到microSD卡中。接下来，按照[图9-3](chapter9.xhtml#fig9-3)中的原理图将MP3模块连接到Arduino。
- en: '![THE SCHEMATIC FOR THE MP3 PLAYER TEST CIRCUIT](../images/fig9-3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![MP3播放器测试电路的原理图](../images/fig9-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-3: The MP3 player
    test circuit</samp>'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图9-3：MP3播放器测试电路</samp>
- en: Carefully insert the memory card into the module, with the label facing upward,
    as shown in [Figure 9-4](chapter9.xhtml#fig9-4). The card will slide in and then
    bump up against a spring lock—push it in a little farther until the lock clicks.
    (To remove the card, gently push against the card, which should spring in a little
    and then pop out.)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![A PHOTO SHOWING THE INSERTION OF THE MICROSD CARD INTO THE MP3 PLAYER MODULE](../images/fig9-4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-4: Inserting the memory
    card into an MP3 player module</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Finally, plug some headphones or amplified speakers into the MP3 module and
    then enter and upload the [Listing 9-1](#LiT-9-1) sketch. After a few moments,
    the module should play the first 10 seconds of the first audio file on the memory
    card and then repeatedly skip to the next and play it for 10 seconds. The LED
    on the rear of the module should stay on while the memory card is inserted and
    should blink when playing audio. If yours doesn’t work, check the wiring, including
    the TX/RX back to the Arduino.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 9-1](#LiT-9-1) shows how this works.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 9-1: Testing a serial
    MP3 player</samp>'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: This sketch sends commands and data to the MP3 module via a serial UART connection
    with the Arduino. Each data packet, containing both the command and the associated
    data, consists of 8 hexadecimal bytes of data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: To save time, the sketch defines some useful command values as variables ❶.
    These commands are assembled into the <samp class="SANS_TheSansMonoCd_W5Regular_11">commands[]</samp>
    array and then sent out via a software serial port ❷. This uses the first command
    listed in [Table 9-1](chapter9.xhtml#tab9-1) to initialize the MP3 player and
    select the microSD card socket as the source of audio files ❸ and then starts
    playing the audio files ❹. The sketch plays the next audio file found on the microSD
    card ❺ for 10 seconds ❻, and then the process repeats.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 9-1](chapter9.xhtml#tab9-1) describes the commands you can use with
    your player.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 9-1:</samp> <samp class="SANS_Futura_Std_Book_11">MP3
    Player Commands</samp>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Command set</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Purpose</samp>
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">09</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    02</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Initializes
    MP3 player, uses the microSD card</samp> |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">0D</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Resumes/starts
    playback</samp> |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">0E</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Pauses
    playback</samp> |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">16</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Stops
    playback, resets to first track</samp> |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">02</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Plays
    previous track</samp> |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">01</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Plays
    next track</samp> |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">05</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Turns
    volume down</samp> |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">7E FF 06</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">04</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00</samp> <samp class="SANS_TheSansMonoCd_W7Bold_B_11">00
    00</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">EF</samp> | <samp class="SANS_Futura_Std_Book_11">Turns
    volume up</samp> |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: Of the two bold bytes in each command group, the first is the command byte,
    and the second is the data bytes. These are the two parameters used in the sketch’s
    <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3()</samp> function to
    instruct the MP3 player. For basic playback use, you don’t need to send data bytes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: In the next project, you’ll test these commands by building your own MP3 player
    with some control functions.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #28: Building a Simple MP3
    Player</samp>'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #28：构建一个简单的 MP3 播放器</samp>'
- en: 'In this project, you’ll create an MP3 player with typical play, pause, volume,
    and track forward/backward controls. You’ll need the following parts:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，你将创建一个带有典型播放、暂停、音量和曲目前进/后退控制的 MP3 播放器。你将需要以下零件：
- en: An Arduino Uno or compatible board and USB cable
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一块 Arduino Uno 或兼容板和 USB 电缆
- en: An MP3 player module with a microSD card of MP3 audio files
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有 MP3 音频文件的 microSD 卡的 MP3 播放器模块
- en: A solderless breadboard
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个无焊接面包板
- en: Assorted jumper wires
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种跳线
- en: Headphones or cables to audio amplifier and speakers
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 耳机或音频放大器和扬声器的连接线
- en: An analog 6- or 12-button keypad circuit from [Chapter 1](chapter1.xhtml)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第 1 章](chapter1.xhtml)的模拟 6 或 12 按钮键盘电路
- en: 'To build this project, you can either reuse the 12-button keypad you built
    in Project #3, using only 6 of the buttons, or Project #2. Don’t forget to update
    the analog values on the analog keypad library if you’re using the 12-button keypad.
    Assemble the circuit as shown in [Figure 9-5](chapter9.xhtml#fig9-5).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '为了构建这个项目，你可以重用在项目 #3 中构建的 12 按钮键盘，只使用其中的 6 个按钮，或者使用项目 #2 中的键盘。如果你使用 12 按钮键盘，别忘了更新模拟键盘库中的模拟值。按照
    [图 9-5](chapter9.xhtml#fig9-5) 所示组装电路。'
- en: '![THE SCHEMATIC FOR PROJECT #28](../images/fig9-5.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #28 的原理图](../images/fig9-5.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-5: The schematic for
    Project #28</samp>'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 9-5：项目 #28 的原理图</samp>'
- en: 'Enter and upload the Project #28 sketch. After a few moments, press button
    7; the music in the MP3 files you arranged on the memory card should start playing.
    Test the other buttons to ensure their functions work. If some or all do not work,
    check that the button analog values match the actual keypresses using the process
    described in Project #2, and update the values in the analogkeypad library as
    described in Project #3.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '输入并上传项目 #28 草图。几秒钟后，按下按钮 7；你在存储卡上安排的 MP3 文件中的音乐应该开始播放。测试其他按钮以确保它们的功能正常。如果某些或所有按钮不起作用，请检查按钮的模拟值是否与实际的按键匹配，按照项目
    #2 中描述的过程检查，并按照项目 #3 中的说明更新模拟键盘库中的值。'
- en: 'Let’s see how this works:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下这个是如何工作的：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The sketch first declares the array used for storing the commands to control
    the MP3 module ❶ and then initializes the software serial port for Arduino-to-MP3-player
    control, as well as the library for the analog button keypad ❷. The custom <samp
    class="SANS_TheSansMonoCd_W5Regular_11">void controlMP3()</samp> function accepts
    the command and data parameters required to control the MP3 player, inserts them
    into the array ❸ ❹, and sends the command to the MP3 player via the software serial
    port ❺. The sketch then starts the software serial port and sends the initialize
    command to instruct the MP3 player to use the microSD card ❻.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 该草图首先声明了用于存储控制 MP3 模块命令的数组❶，然后初始化了用于 Arduino 与 MP3 播放器控制的软件串口，以及模拟按钮键盘的库❷。自定义的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">void controlMP3()</samp> 函数接收控制
    MP3 播放器所需的命令和数据参数，将它们插入数组❸ ❹，并通过软件串口发送命令给 MP3 播放器❺。然后，草图启动软件串口并发送初始化命令，指示 MP3
    播放器使用 microSD 卡❻。
- en: Once operation has begun, the sketch loops, awaiting a response from the analog
    button circuit in <samp class="SANS_TheSansMonoCd_W5Regular_11">void loop()</samp>,
    where each button is assigned a <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3()</samp>
    function along with the appropriate command data from [Table 9-1](chapter9.xhtml#tab9-1).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦操作开始，草图将循环等待来自模拟按钮电路的响应，在 <samp class="SANS_TheSansMonoCd_W5Regular_11">void
    loop()</samp> 中，每个按钮都被分配一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3()</samp>
    函数，并与来自 [表 9-1](chapter9.xhtml#tab9-1) 的适当命令数据一起使用。
- en: You now have a working MP3 audio player that you can embed, modify, or make
    portable for your own distraction-free source of audio (as opposed to smartphones,
    whose games, messages, and other content can be distracting). The USB cable connected
    to the Arduino is powering the project, but you could instead use a power bank
    or AC-to-USB adapter and place everything inside an enclosure of your own design.
    You might also draw a small map to explain which buttons have which effects, as
    shown in [Figure 9-6](chapter9.xhtml#fig9-6), if you’re demonstrating the project
    to your friends or family.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在拥有一个可操作的 MP3 音频播放器，可以嵌入、修改或将其做成便携式设备，作为你自己的无干扰音频源（与智能手机不同，智能手机的游戏、信息和其他内容可能会分散注意力）。连接到
    Arduino 的 USB 电缆为该项目供电，但你也可以使用移动电源或交流转 USB 适配器，并将所有组件放置在你自己设计的外壳内。如果你要向朋友或家人演示这个项目，你还可以绘制一张小地图，说明哪些按钮对应哪些功能，正如[图
    9-6](chapter9.xhtml#fig9-6)所示。
- en: '![A PHOTO OF THE COMPLETED PROJECT #28, WITH THE 12-BUTTON KEYPAD AND A USER
    REFERENCE FOR THE PLAYBACK CONTROLS](../images/fig9-6.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![项目 #28 完成图，配有 12 键键盘和用户参考播放控制](../images/fig9-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-6: Example of Project
    #28 with the 12-button keypad and a user reference for the playback controls</samp>'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 9-6：项目 #28 的示例，配有 12 键键盘和用户参考播放控制</samp>'
- en: In the next project, you’ll use the MP3 player module you’ve just built to create
    a sound board.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个项目中，你将使用刚刚制作的 MP3 播放器模块来创建一个声音板。
- en: '<samp class="SANS_Futura_Std_Heavy_B_21">Project #29: Building an MP3 Player
    Sound Board</samp>'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Heavy_B_21">项目 #29：构建一个 MP3 播放器声音板</samp>'
- en: 'In this project, you’ll use the hardware from Project #28 with the 12-button
    board to create a *sound board*, a device that plays preset audio tracks at the
    press of a button. Sound boards are often used in broadcasting, in toys, or as
    part of exhibits in museums to offer information for the visually impaired. This
    project uses buttons to initiate audio playback, but you can use it as a framework
    for a device that plays audio upon other actions the Arduino detects, such as
    triggers in your code or outputs from sensors, switches, and so on.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '在本项目中，你将使用项目 #28 中的硬件，结合 12 键板，创建一个 *声音板*，这是一个可以通过按下按钮播放预设音频的设备。声音板常用于广播、玩具或博物馆展览中，为视障人士提供信息。本项目使用按钮来启动音频播放，但你可以将其作为框架，用于在
    Arduino 检测到其他动作时播放音频，比如代码中的触发器或传感器、开关等的输出。'
- en: 'Before uploading the Project #29 sketch, rename the MP3 audio files on your
    microSD card, using the numbering convention shown in [Figure 9-7](chapter9.xhtml#fig9-7),
    so the MP3 player can search for the exact audio file to play at the press of
    a button. For example, when the player searches for audio file 1, the MP3 will
    play the *001001.mp3* file. Accordingly, you should name file 4 *004004.mp3*,
    file 12 *012012.mp3*, and so on. Store these files in a folder named *01*.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '在上传项目 #29 的草图之前，按照[图 9-7](chapter9.xhtml#fig9-7)所示的编号规范，重命名 microSD 卡上的 MP3
    音频文件，以便 MP3 播放器可以在按下按钮时搜索并播放准确的音频文件。例如，当播放器搜索音频文件 1 时，MP3 会播放 *001001.mp3* 文件。因此，你应该将文件
    4 命名为 *004004.mp3*，文件 12 命名为 *012012.mp3*，依此类推。将这些文件存储在名为 *01* 的文件夹中。'
- en: '![A SCREENSHOT OF THE LIST OF MP3 FILES, ORGANIZED WITH APPROPRIATE FILENAMES](../images/fig9-7.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![MP3 文件列表截图，按适当的文件名组织](../images/fig9-7.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-7: An example of MP3
    files in the</samp> <samp class="SANS_Futura_Std_Book_11">01</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">folder,
    with filenames structured for sound board use</samp>'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 9-7：MP3 文件在</samp> <samp class="SANS_Futura_Std_Book_11">01</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">文件夹中的示例，文件名结构适用于声音板使用</samp>
- en: These MP3 files can contain any audio you like. Just for fun, you might try
    downloading some sound effects such as animal sounds or ambient daily noise from
    websites such as [*https://<wbr>www<wbr>.zapsplat<wbr>.com*](https://www.zapsplat.com).
    I’ve included a folder of sounds from Zapsplat with the book download files at
    [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians).
    Alternately, you could load the MP3 with your 12 favorite songs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 MP3 文件可以包含你喜欢的任何音频。为了好玩，你可以尝试从网站如 [*https://<wbr>www<wbr>.zapsplat<wbr>.com*](https://www.zapsplat.com)
    下载一些音效，例如动物叫声或日常环境噪音。我已将 Zapsplat 的音效文件夹随书籍下载文件一起提供，下载地址是 [*https://<wbr>nostarch<wbr>.com<wbr>/arduino<wbr>-arduinians*](https://nostarch.com/arduino-arduinians)。另外，你也可以将
    MP3 文件替换成你最喜欢的 12 首歌曲。
- en: 'Once you’ve gathered and organized your MP3 files and inserted the microSD
    card into the player, enter and upload the following sketch:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你收集并整理好了MP3文件，并将microSD卡插入播放器，输入并上传以下草图：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This sketch operates in the same manner as that of the previous project, except
    that different types of commands and data are sent to the player when you press
    the buttons. These new commands play whatever track number matches the value of
    the data sent in the command. For example, to play file *001001.mp3*, the sketch
    sends
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个草图的工作方式与前一个项目相同，唯一不同的是，当你按下按钮时，会发送不同类型的命令和数据到播放器。这些新命令播放与数据值匹配的轨道编号。例如，要播放文件*001001.mp3*，草图会发送
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: using <samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3(0x0F, 1)</samp>
    ❶. The command for direct track playback is <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0F</samp>,
    and the data value (1) is the number of the track’s filename (*001001.mp3*). The
    rest of the buttons follow the same command format, with data values that match
    the other MP3 filenames.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用<samp class="SANS_TheSansMonoCd_W5Regular_11">controlMP3(0x0F, 1)</samp> ❶。直接播放轨道的命令是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0F</samp>，数据值（1）是轨道文件名的编号（*001001.mp3*）。其他按钮遵循相同的命令格式，数据值与其他MP3文件名匹配。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">Moving On</samp>
- en: In this chapter, you learned how to build your own MP3 player and use it to
    listen to music and play sound effects. There are plenty of other fun ways to
    use your MP3 module, such as creating audible outputs for projects instead of
    LEDs or displays. For a final challenge, you might write your own MP3 player Arduino
    library.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何构建自己的MP3播放器，并用它来听音乐和播放音效。还有许多其他有趣的方式可以使用你的MP3模块，例如为项目创建可听见的输出，而不是使用LED或显示器。作为最后的挑战，你可能会编写自己的MP3播放器Arduino库。
- en: In the next chapter, you’ll learn how to use a new type of temperature sensor,
    OLED displays, and multiple I²C buses with your Arduino.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，你将学习如何使用一种新的温度传感器、OLED显示屏以及多个I²C总线与Arduino配合使用。
