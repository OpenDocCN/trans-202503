- en: '**15  LPC1114 Bootloader Glitch**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**15  LPC1114 Bootloader 故障注入**'
- en: In addition to the software vulnerabilities discussed in [Chapter 4](ch04.xhtml#ch04),
    the LPC1114 and LPC1343 are vulnerable to voltage glitching attacks documented
    in Gerlinsky (2017), Nedospasov (2017), and Dewar (2018). This is a beginner’s
    glitching attack, a good first target to learn fault injection.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 除了[第4章](ch04.xhtml#ch04)中讨论的软件漏洞外，LPC1114和LPC1343还容易受到Gerlinksy（2017）、Nedospasov（2017）和Dewar（2018）文献中记录的电压故障攻击的影响。这是一种初学者的故障注入攻击，适合作为学习故障注入的第一个目标。
- en: Before we get started, look at [Figure 4.5](ch04.xhtml#ch4fig5) and review the
    explanation of the lock features in [Chapter 4](ch04.xhtml#ch04). When the lock
    level is CRP1, we can use the memory corruption exploit in that chapter to dump
    the chip’s memory, but in CRP2 and CRP3 the bootloader commands are so restricted
    that we can’t trigger the vulnerability. That’s where voltage glitching comes
    in.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，查看[图 4.5](ch04.xhtml#ch4fig5)，并复习[第4章](ch04.xhtml#ch04)中关于锁定功能的解释。当锁定级别为CRP1时，我们可以使用该章节中的内存损坏漏洞来转储芯片的内存，但在CRP2和CRP3中，bootloader命令被严格限制，我们无法触发该漏洞。这时电压故障注入就派上用场了。
- en: You should also see in [Figure 4.5](ch04.xhtml#ch4fig5) that a single word of
    flash memory controls the protection mode. `0x12345678` places us in CRP1, where
    the remote code execution exploit works. `0x4321-8765` places us in CRP3, where
    both JTAG and the ISP programming mode are entirely disabled. `0x87654321` is
    just as bad, allowing ISP but *only* the Mass Erase command.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该在[图 4.5](ch04.xhtml#ch4fig5)中看到，一个单词的闪存内存控制着保护模式。`0x12345678`将我们置于CRP1，此时远程代码执行漏洞有效。`0x4321-8765`将我们置于CRP3，此时JTAG和ISP编程模式完全禁用。`0x87654321`也同样糟糕，允许ISP，但*仅*允许大规模擦除命令。
- en: The very last line of that table is the important one, and the reason why these
    chips are such an easy target for glitching. If the 32-bit word has *any other
    value* than the ones in that table, it defaults to being totally open to both
    JTAG debugging and ISP programming. While `0x43218765` or `0x87654321` will lock
    us out, a single bit error might change those to `0x43208765` or `0x87654331`,
    either of which would provide us with full access. The purpose of our fault injection
    will be to corrupt that word, providing just such a change.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 表格的最后一行是关键，说明了这些芯片为何如此容易成为故障注入的目标。如果32位字的值与表中所列的任何值都不同，它会默认完全开放，允许JTAG调试和ISP编程。虽然`0x43218765`或`0x87654321`会锁住我们，但单个比特的错误可能会将它们更改为`0x43208765`或`0x87654331`，任意一个都会为我们提供完全访问权限。我们故障注入的目的是破坏那个字，从而产生这样的变化。
- en: '![Image](../images/f0144-01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0144-01.jpg)'
- en: 'Figure 15.1: LPC111x'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '图 15.1: LPC111x'
- en: '![Image](../images/f0145-01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0145-01.jpg)'
- en: 'Figure 15.2: Olimex LPC-P1114 Schematic'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '图 15.2: Olimex LPC-P1114 电路图'
- en: '**Hardware Modifications**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**硬件修改**'
- en: Gerlinsky, Nedospasov, and Dewar each made slightly different modifications
    to the Olimex development kit in [Figure 15.2](ch15.xhtml#ch15fig2), but the general
    principle is the same.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Gerlinsky、Nedospasov和Dewar各自对[图 15.2](ch15.xhtml#ch15fig2)中的Olimex开发套件进行了稍微不同的修改，但其基本原理是相同的。
- en: First, we want to remove the 100nF decoupling capacitor, which is C4 in the
    schematic. The purpose of this capacitor is to prevent momentary drops in voltage
    from causing faults in the chip, and we’re removing it because our intention is
    to cause this momentary failure. Leaving it in would make glitching much more
    difficult.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要移除电路图中的100nF去耦电容C4。这个电容的作用是防止电压瞬间下降导致芯片故障，而我们移除它是因为我们的目的是引发这种瞬间故障。如果它留在那儿，电压故障注入将变得更加困难。
- en: The decoupling capacitor for this chip is designed to sit between the VSS and
    3.3V VDD lines, but on many other chips you’ll find multiple decoupling capacitors
    or you’ll find that the cap is on a dedicated pin at a lower voltage, the CPU
    core voltage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该芯片的去耦电容设计位于VSS和3.3V VDD线路之间，但在许多其他芯片上，你会发现有多个去耦电容，或者电容会放置在一个专用引脚上，电压较低，即CPU核心电压。
- en: The board also has two traces that might be cut, and we need to cut both of
    them. `3.3V_IO_E` connects C1 and the VDDIO pin to the 3.3V power rail, while
    `3.3V_CORE` connects the VDD pin to the 3.3V rail. We’ll cut both, then reconnect
    the two sides of the cut `3.3V_CORE` trace with a 12 Ω resistor. This lets us
    measure the power consumption of the chip, as the current consumption will cause
    a very small voltage drop across the resistor. Such a measurement is not necessary
    to perform the glitch after timing is known but can be very handy for discovering
    the timing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该板上还有两条可能需要切割的线路，我们需要切割这两条。`3.3V_IO_E`将C1和VDDIO引脚连接到3.3V电源轨，而`3.3V_CORE`将VDD引脚连接到3.3V电源轨。我们将切割这两条线路，然后用一个12Ω的电阻将切割后的`3.3V_CORE`线路两侧重新连接。这让我们可以测量芯片的功耗，因为电流消耗会在电阻上产生非常小的电压降。此类测量在已知时序后进行glitch并非必需，但对于发现时序非常有帮助。
- en: Shorting `P0_3` to ground will enable the bootloader mode. We will also add
    an SMA connector to expose ground and the 3.3V power rail to our voltage glitcher.
    The glitching hardware itself is just briefly shorting those two pins together,
    and while Dewar (2018) uses a ChipWhisperer and Gerlinsky (2017) uses a microcontroller
    board, you can short them with a transistor and nearly anything that sends a short
    pulse to that transistor with predictable timing after reset.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将`P0_3`短接到地面将启用引导加载程序模式。我们还将添加一个SMA连接器，将地面和3.3V电源轨暴露给我们的电压glitcher。glitch硬件本身只是短暂地将这两个引脚短接在一起，虽然Dewar（2018）使用ChipWhisperer，而Gerlinsky（2017）使用微控制器板，但你可以用晶体管和几乎任何能在复位后以可预测时序给该晶体管发送短脉冲的东西来短接它们。
- en: '**How Hard to Glitch?**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如何进行Glitch？**'
- en: We now have an SMA connector through which we can glitch the chip, briefly shorting
    the voltage rail to ground without a decoupling capacitor to save it. Before we
    can get to the question of timing, we need to know at least roughly how much of
    a glitch to apply. Too much of a glitch will crash or reboot the target, while
    too little of a glitch will have no effect at all, as the voltage drop will be
    attenuated by the natural capacitance and line length until nothing happens.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个SMA连接器，通过它我们可以对芯片进行glitch，短暂地将电压轨短接到地面，而不需要去耦电容器来保存电压。在我们能解决时序问题之前，我们至少需要大致了解应应用多大的glitch。过大的glitch会导致目标崩溃或重启，而过小的glitch则完全没有效果，因为电压降会被自然的电容和线路长度衰减，直到什么都没有发生。
- en: 'If we imagine the idle state of this pin as a flat 3.3V voltage that we’ll
    drop low, there are two basic parameters to our glitch: the *depth* and the *duration*.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把这个引脚的空闲状态想象成一个平坦的3.3V电压，我们将其拉低，那么在我们的glitch中有两个基本参数：*深度*和*持续时间*。
- en: The depth of a glitch is the voltage to which we will drop the pin. It’s usually
    measured from the side of the glitcher, with the understanding that the target
    won’t fall immediately to that voltage and might not fall all the way to it. A
    “crowbar” glitcher, such as the ChipWhisperer, simply shorts the two rails together
    with a MOSFET, so its depth is effectively ground.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Glitch的深度是我们将引脚拉低到的电压。它通常是从glitcher的一侧进行测量，理解为目标不会立即降到该电压，并且可能不会完全降到该电压。一个“crowbar”glitcher，如ChipWhisperer，简单地通过MOSFET将两个电源轨短接在一起，所以它的深度实际上是地面。
- en: You’ll generally find crowbar glitchers on more recent devices, because the
    clock rate allows them to run fast enough that the glitch won’t crash the target.
    They are also quite simple to place on the circuit board, with nothing more than
    a MOSFET transistor controlled by a GPIO pin of the attacking microcontroller.
    Common choices of MOSFET include the IRLML6246 and IRF8736.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常会在较新的设备上找到crowbar glitcher，因为时钟频率足够高，使得glitch不会导致目标崩溃。它们也非常容易放置在电路板上，只需要一个由攻击微控制器的GPIO引脚控制的MOSFET晶体管。常见的MOSFET选择包括IRLML6246和IRF8736。
- en: Back in the days of TV piracy, it was more common to use a 74HC4053 multiplexer
    to jump between full voltage and the deep voltage. During development, both could
    be supplied by a bench power supply, and the glitches would be a little wider
    but not quite so deep.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在电视盗版的年代，更常见的是使用74HC4053多路复用器在全电压和深电压之间切换。在开发过程中，这两者都可以由实验室电源提供，尽管glitches会稍微宽一些，但不会那么深。
- en: Having either one dimension (duration) or two (duration and depth) to calibrate,
    we’d much rather find the right values before involving the extra dimension of
    time. This is most conveniently done by running a program from flash or from RAM
    that is intentionally designed to be an easy target.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有了一个维度（持续时间）或两个维度（持续时间和深度）来校准，我们更倾向于在涉及时间的额外维度之前，先找到正确的值。这通常通过运行一个从闪存或RAM中加载的程序来完成，这个程序故意设计为一个容易成为攻击目标的程序。
- en: When the settings are roughly correct, this code will start printing to the
    serial port. It’s important the three variables are all volatile so that the C
    compiler will not optimize away their differences.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当设置大致正确时，这段代码将开始向串口输出数据。需要确保这三个变量都是易变的（volatile），这样C编译器就不会优化掉它们之间的差异。
- en: '![Image](../images/f0148-01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../images/f0148-01.jpg)'
- en: Of course, we can only train our parameters on this code because the chip we
    are attacking is also available as an unlocked part for commercial use. When glitching
    a smart card, or anything else in which an unlocked sample is not available, the
    procedure is usually to glitch some other behavior, like the readout of the device
    serial number.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们只能在这段代码上训练我们的参数，因为我们攻击的芯片也作为解锁部件供商业使用。当对智能卡或其他没有解锁样本的设备进行故障注入时，通常的做法是故障注入某种其他行为，比如读取设备的序列号。
- en: '**When to Glitch?**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**何时进行故障注入？**'
- en: Now that we know how wide (in duration) and how deep (in voltage) to glitch
    to cause a fault, we still need to know when to trigger the glitch. We’ll first
    choose a trigger as the beginning of time, then choose a measure of time to count
    after that trigger, and finally search for a range of times that might be running
    a vulnerable instruction worth glitching.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了故障注入的宽度（持续时间）和深度（电压）来引起故障，我们仍然需要知道何时触发故障注入。我们首先选择一个触发点作为时间的起点，然后选择一个时间度量，计算从该触发点开始的时间，最后寻找可能正在运行易受攻击指令的时间范围。
- en: This is usually measured as some number of microseconds or clock cycles after
    a particular event, such as the reset line rising high. It’s important to distinguish
    between the target’s clock signal, which will be rather tightly coupled to the
    internal CPU clock, and the attacker’s clock signal, which is rather loosely coupled
    and really just another way to measure wall clock time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是以微秒数或时钟周期数来衡量的，计量从某个特定事件之后的时间，例如复位线升高。需要注意区分目标的时钟信号，它与内部CPU时钟紧密耦合，而攻击者的时钟信号则耦合较松散，实际上只是另一种测量墙时的方法。
- en: The target’s clock input pin used to be a very good way to accurately target
    specific instructions, but these days many chips like the LPC11 default to an
    internal oscillator as the bootloader’s system clock, only jumping over to an
    external crystal in the main application. Other chips use an internal phase-locked
    loop (PLL) to multiply an external clock’s frequency, providing some relation
    but at a weak resolution. In this chapter, we’ll ignore the external oscillator
    and use wall time instead.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目标的时钟输入引脚曾经是精确定位特定指令的一个非常好的方法，但现在许多芯片，如LPC11，默认使用内部振荡器作为引导加载程序的系统时钟，只有在主应用程序中才会切换到外部晶体。其他芯片使用内部锁相环（PLL）来倍增外部时钟的频率，提供某种关联性，但分辨率较低。在本章中，我们将忽略外部振荡器，而是使用墙时（wall
    time）。
- en: 'Now that we have chosen a measure of time, and we have chosen the rise of the
    reset pin as zero time, we need to know when to apply a glitch to unlock the bootloader.
    On other targets, we might do this through power analysis, running our SMA connector
    to a T-junction that reaches both the glitcher and an oscilloscope. On this target
    we have something better: a dump of the boot ROM, which we made for writing our
    shellcode in [Chapter 4](ch04.xhtml#ch04).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了时间的度量，并且将复位引脚的上升沿作为零时间，我们需要知道何时应用故障来解锁引导加载程序。在其他目标上，我们可能通过功率分析来执行此操作，将SMA连接器连接到一个T型接头，接到故障注入器和示波器上。在这个目标上，我们有更好的方法：引导ROM的转储，这是我们为了编写Shellcode而在[第4章](ch04.xhtml#ch04)中制作的。
- en: Recall from that chapter that the bootloader checks its lock state many times,
    but that it is always checking a copy in SRAM that is made early in the boot sequence.
    That’s why the shell-code for the software exploit simply rewrites the SRAM copy
    of the CRP level and jumps right back into the main loop of the bootloader, reusing
    its code with a privilege escalation.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下那一章，引导加载程序会多次检查其锁定状态，但它始终检查的是在启动序列早期就创建的SRAM中的副本。这就是为什么软件漏洞的Shellcode仅仅重写SRAM中的CRP级别副本，并直接跳回引导加载程序的主循环，重新利用其代码进行权限提升的原因。
- en: '![Image](../images/f0149-01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0149-01.jpg)'
- en: In this glitching attack we don’t have a write primitive, of course, but we
    know that there is an instruction or two doing the copy. Maybe we flip a bit as
    it’s read from flash memory, or maybe we flip a bit as it’s written to SRAM, or
    maybe we flip an opcode bit to make it a different instruction.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种故障攻击中，我们当然没有写操作，但我们知道有一条或两条指令在执行复制操作。也许我们在从闪存读取数据时翻转一个位，或者在写入SRAM时翻转一个位，或者也许我们翻转一个操作码位，让它变成另一个指令。
- en: On 8-bit CISC chips, we might come up with this by simply counting instructions
    and their cycle costs. As the LPC11 is a pipelined RISC chip, that becomes a little
    labor intensive, as any glitch will be impacting multiple instructions at once.
    Another option for some ARM chips is to use the Embedded Trace Macrocell (ETM),
    which allows an external debugger to trace every instruction as it’s executed.
    We might also run a modified version of the boot ROM from RAM, patched to reveal
    its timing through a GPIO pin.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在8位CISC芯片上，我们可能仅通过计算指令和它们的周期成本来实现这一点。由于LPC11是一个流水线RISC芯片，这个过程就显得有些繁琐，因为任何故障都会同时影响多个指令。对于一些ARM芯片，另一种选择是使用嵌入式跟踪宏单元（ETM），它允许外部调试器跟踪每条指令的执行过程。我们也可能运行从RAM加载的修改版启动ROM，修补后通过GPIO引脚暴露其时序。
- en: Without resorting to those fancy tricks, we still have some timing clues. We
    know that the ROM can’t begin execution before the reset line goes high, and we
    know that it must be past the target instruction when it accepts our first command.
    If we’re patient, we can sweep across this entire range until the chip unlocks,
    then repeat the effect in far less time knowing the offset.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不使用这些花哨的技巧，我们仍然可以通过一些时序线索来推测。我们知道ROM在复位线高电平之前不能开始执行，也知道当它接受我们的第一个命令时，必须已经跳过目标指令。如果我们足够耐心，可以遍历这个范围，直到芯片解锁，然后通过已知的偏移量在更短的时间内重复这一效果。
- en: It’s not uncommon for chips to be exploited this way, with a glitcher sitting
    on a rack or in a closet for days or weeks before the right timing emerges.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式利用芯片并不罕见，通常攻击者会将芯片放在机架或储物间里，几天或几周后，恰当的时机才会出现。
- en: Dewar (2018) suggests that attacking from a 100MHz clock, unlocks were seen
    with roughly ten glitches between 5,100 and 5,300 cycles. One board worked best
    with ten pulses at 5,211 ticks, while another worked best with eleven pulses at
    5,181 ticks. The variance likely comes from the internal R/C oscillator of the
    target chip, or the room temperature, and it’s not at all strange for different
    targets to successfully unlock at different times.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Dewar（2018）建议，从100MHz时钟开始攻击时，在5,100到5,300个周期之间大约出现了十次故障。一个板子在5,211个时钟周期时，十次脉冲效果最好，而另一个板子在5,181个时钟周期时，十一脉冲效果最好。这个差异很可能来自目标芯片的内部R/C振荡器或房间温度，针对不同目标解锁的时刻有所不同并不奇怪。
- en: '![Image](../images/f0151-01.jpg)![Image](../images/f0152-01.jpg)![Image](../images/f0153-01.jpg)![Image](../images/f0154-01.jpg)![Image](../images/f0155-01.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../images/f0151-01.jpg)![图片](../images/f0152-01.jpg)![图片](../images/f0153-01.jpg)![图片](../images/f0154-01.jpg)![图片](../images/f0155-01.jpg)'
