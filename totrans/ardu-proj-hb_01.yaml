- en: '![image](../images/f0001-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'PROJECT 0: GETTING STARTED'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**BEFORE YOU START BUILDING WITH THE ARDUINO, THERE ARE A FEW THINGS YOU NEED
    TO KNOW AND DO. LET’S TAKE A LOOK AT THE HARDWARE AND SOFTWARE YOU’LL NEED FOR
    THIS BOOK AND HOW TO SET UP A WORKSTATION. YOU’LL THEN TEST OUT THE ARDUINO WITH
    A SIMPLE LED PROJECT AND GET STARTED WITH A FEW TECHNIQUES THAT WILL COME IN HANDY,
    LIKE SOLDERING AND DOWNLOADING USEFUL CODE LIBRARIES.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**HARDWARE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First let’s look at the Arduino Uno board and a few pieces of hardware that
    you’ll use in almost every project.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Arduino Uno**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are numerous types of Arduino boards available, but this book will exclusively
    use the most popular one—the Arduino Uno, shown in [Figure 0-1](ch00.xhtml#ch0fig1).
    The Arduino Uno is open source (meaning its designs may be freely copied), so
    in addition to the official board, which costs about $25, you’ll find numerous
    compatible clone boards for around $15.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through the different elements of the Arduino Uno.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-1:**'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino Uno board
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Arduino controls components you attach to it, like motors or LEDs, by sending
    information to them as *output* (information sent *out* from the Arduino). Data
    that the Arduino reads from a sensor is *input* (information going *in* to the
    Arduino). There are 14 digital input/output pins (pins 0–13). Each can be set
    to either input or output, and [Appendix B](app02.xhtml#app02) has a full pin
    reference table.
  prefs: []
  type: TYPE_NORMAL
- en: '**Power**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Arduino Uno board is powered from your computer’s USB port when you connect
    it to your PC to upload a program. When the Arduino is not linked to your PC,
    you can run it independently by connecting a 9-volt AC adapter or 9-volt battery
    pack with a 2.1 mm jack, with the center pin connected to the positive wire, shown
    in [Figure 0-2](ch00.xhtml#ch0fig2). Simply insert the jack into the power socket
    of the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-2:**'
  prefs: []
  type: TYPE_NORMAL
- en: A 9-volt battery pack, which you can plug into the Arduino to give it power
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Breadboards**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A *breadboard* acts as a construction base for electronics prototyping. All
    of the projects in this book use a breadboard instead of soldering.
  prefs: []
  type: TYPE_NORMAL
- en: The word *breadboard* dates back to when electronics projects were created on
    wooden boards. Nails were hammered into the wood and wires wrapped around them
    to connect components without the use of solder. Today’s breadboards, such as
    the one shown in [Figure 0-3](ch00.xhtml#ch0fig3), are made of plastic with predrilled
    holes (called *tie points*) into which you insert components or wires that are
    held in place by clips. The holes are connected by strips of conductive material
    that run underneath the board.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-3:**'
  prefs: []
  type: TYPE_NORMAL
- en: Breadboard connections
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Breadboards come in various sizes. To build the projects in this book, you’ll
    need four breadboards: two full-size, typically with 830 holes; one half-size
    with 420 holes; and one mini with 170 holes. The full-size breadboard is ideal
    for projects that use an LCD screen or a lot of components, and the half-size
    and mini boards are best for smaller projects. I recommend that for the projects
    in this book you buy breadboards that look like the one shown in [Figure 0-3](ch00.xhtml#ch0fig3),
    with red and blue lines and a center break between the holes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s conventional to use red wires for connections to 5V and black wires for
    connections to ground (GND), so you can easily tell which is which. The rest of
    the wires can be your choice of color.*'
  prefs: []
  type: TYPE_NORMAL
- en: The main board area has 30 columns of tie points that are connected vertically,
    as shown in [Figure 0-3](ch00.xhtml#ch0fig3). There is a break in the center of
    the board, which you’ll often have to straddle with components to make your circuit.
    This break helps to connect the pins individually so they are not shorted together
    unintentionally, which can doom your project and even damage your components.
  prefs: []
  type: TYPE_NORMAL
- en: The blue and red lines at the top and bottom are *power rails* that you use
    to power the components inserted in the main breadboard area (see [Figure 0-4](ch00.xhtml#ch0fig4)).
    The power rails connect all the holes in the rail horizontally; the red lines
    are for positive power and the blue lines for negative power (or *ground*, as
    you’ll often see it referred to).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-4:**'
  prefs: []
  type: TYPE_NORMAL
- en: Positive and negative breadboard rails
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Jumper Wires**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll use *jumper wires* to make connections on the breadboard. Jumper wires
    are solid-core wires with a molded plastic holder on each end that makes it easier
    to insert and remove the wires. (You could use your own wire if you have it, but
    make sure to use solid-core wire, as stranded wire is not strong enough to push
    into the hole clips.)
  prefs: []
  type: TYPE_NORMAL
- en: When you insert a jumper wire into a breadboard hole, it’s held in place beneath
    the board by a small spring clip, making an electrical connection in that row
    that typically consists of five holes. You can then place a component in an adjoining
    hole to help create a circuit, as shown in [Figure 0-5](ch00.xhtml#ch0fig5).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-5:**'
  prefs: []
  type: TYPE_NORMAL
- en: An example breadboard circuit
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**PROGRAMMING THE ARDUINO**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make our projects do what we want, we need to write programs that give the
    Arduino instructions. We do so using a tool called the Arduino *integrated development
    environment (IDE)*. The Arduino IDE is free to download from *[http://www.arduino.cc/](http://www.arduino.cc/)*,
    and will run on Windows, OS X, and Linux. It enables you to write computer programs
    (a set of step-by-step instructions, known as *sketches* in the Arduino world)
    that you then upload to the Arduino using a USB cable. Your Arduino will carry
    out the instructions based on its interaction with the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Because the IDE versions can change fairly quickly, I won’t take you through
    installing them, but you should find installation straightforward. All versions
    of the IDE and full details of how to install for your operating system are available
    online at* [http://www.arduino.cc/](http://www.arduino.cc/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**The IDE Interface**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you open the Arduino IDE, it should look very similar to [Figure 0-6](ch00.xhtml#ch0fig6).
  prefs: []
  type: TYPE_NORMAL
- en: The IDE is divided into a toolbar at the top, with buttons for the most commonly
    used functions; the code or sketch window in the center, where you’ll write or
    view your programs; and the Serial Output window at the bottom. The Serial Output
    window displays communication messages between your PC and the Arduino, and will
    also list any errors if your sketch doesn’t compile properly.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-6:**'
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino IDE
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Arduino Sketches**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: I’ll give you the sketch for each project within the relevant project, and talk
    through it there. All of the sketches are available to download from *[http://www.nostarch.com/arduinohandbook/](http://www.nostarch.com/arduinohandbook/)*.
  prefs: []
  type: TYPE_NORMAL
- en: Like any program, sketches are a very strict set of instructions, and very sensitive
    to errors. To make sure you’ve copied the sketch correctly, press the green check
    mark at the top of the screen. This is the Verify button, and it checks for mistakes
    and tells you in the Serial Output window whether the sketch has compiled correctly.
    If you get stuck, you can always download the sketch and then copy and paste it
    into the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '**Libraries**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the Arduino world, a *library* is a small piece of code that carries out
    a specific function. Rather than enter this same code repeatedly in your sketches,
    you can add a command that borrows code from the library. This shortcut saves
    time and makes it easy for you to connect to items such as a sensor, display,
    or module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Arduino IDE includes a number of built-in libraries—such as the LiquidCrystal
    library, which makes it easy to talk to LCD displays—and there are many more available
    online. To create the projects in the book, you will need to import the following
    libraries: RFID, Tone, Pitches, Keypad, Password, Ultrasonic, NewPing, IRRemote,
    and DHT. You’ll find all of the libraries you need at *[http://www.nostarch.com/arduinohandbook/](http://www.nostarch.com/arduinohandbook/)*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve downloaded the libraries, you’ll need to install them. To install
    a library in Arduino version 1.0.6 and higher, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Sketch ![image](../images/arrow.jpg) Include Library ![image](../images/arrow.jpg)
    Add .ZIP Library**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the ZIP file you downloaded and select it. For older versions of Arduino,
    you’ll need to unzip the library file and then put the whole folder and its contents
    into the *sketchbook/libraries* folder on Linux, *My Documents\Arduino\Libraries*
    on Windows, or *Documents/Arduino/libraries* on OS X.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install a library manually, go to the ZIP file containing the library and
    uncompress it. For example, if you were installing a library called *keypad* in
    a compressed file called *keypad.zip*, you would uncompress *keypad.zip*, which
    would expand into a folder called *keypad*, which in turn contains files like
    *keypad.cpp* and *keypad.h*. Once the ZIP file was expanded, you would drag the
    *keypad* folder into the *libraries* folder on your operating system: *sketchbook/libraries*
    in Linux, *My Documents\Arduino\Libraries* on Windows, and *Documents/Arduino/libraries*
    on OS X. Then restart the Arduino application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Libraries are listed at the start of a sketch and are easily identified because
    they begin with the command `#include`. Libraries are surrounded by angle brackets,
    `<>`, and end with `.h`, as in the following call to the Servo library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Go ahead and install the libraries you’ll need for the projects now to save
    yourself a bit of time later.
  prefs: []
  type: TYPE_NORMAL
- en: '**TESTING YOUR ARDUINO: BLINKING AN LED**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you’ve seen the hardware and software, let’s begin our tour with the
    classic first Arduino project: blinking a *light emitting diode (LED)*. Not only
    is this the simplest way to make sure that your Arduino is working correctly,
    but it will also introduce you to a simple sketch. As I mentioned earlier, a sketch
    is just a series of instructions that run on a computer. The Arduino can hold
    only one sketch at a time, so once you upload your sketch to your Arduino, that
    sketch will run every time the Arduino is switched on until you upload a new one.'
  prefs: []
  type: TYPE_NORMAL
- en: For this project we’ll use the *Blink* example sketch that comes with the Arduino
    IDE. This program turns on an LED for 1 second and then off for 1 second, repeatedly.
    An LED emits light when a small current is passed through it. The LED will work
    only with current flowing in one direction, so the longer wire must connect to
    a positive power connection. LEDs also require a current limiting resistor; otherwise,
    they may burn out. There is a built-in resistor inline with pin 13 of the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to set up your test:'
  prefs: []
  type: TYPE_NORMAL
- en: Insert the long positive leg (also known as +5V or *anode*) of the LED into
    pin 13 on the Arduino, as shown in [Figure 0-7](ch00.xhtml#ch0fig7). Connect the
    short negative leg (also known as *cathode*) to the GND pin next to pin 13.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 0-7:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The *Blink* project setup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f00-07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect the Arduino to your computer with the USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the following sketch into the IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the **Verify** button (which looks like a check mark) to confirm that
    the sketch is working correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click the **Upload** button to send the sketch to your Arduino.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Understanding the Sketch**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here’s what’s happening on each line of the sketch:'
  prefs: []
  type: TYPE_NORMAL
- en: ➊ This is a comment. Any line in your program starting with `//` is meant to
    be read by the user only, and is ignored by the Arduino, so use this technique
    to enter notes and describe your code (called *commenting* your code). If a comment
    extends beyond one line, start the first line with `/*` and end the comment with
    `*/`. Everything in between will be ignored by the Arduino.
  prefs: []
  type: TYPE_NORMAL
- en: ➋ This gives pin 13 the name `led`. Every mention of `led` in the sketch refers
    to pin 13.
  prefs: []
  type: TYPE_NORMAL
- en: ➌ This means that the code between the curly brackets, `{}`, that follow this
    statement will run once when the program starts. The open curly bracket, `{`,
    begins the setup code.
  prefs: []
  type: TYPE_NORMAL
- en: ➍ This tells the Arduino that pin 13 is an output pin, indicating that we want
    to send power to the LED. The close curly bracket, `}`, ends the setup code.
  prefs: []
  type: TYPE_NORMAL
- en: ➎ This creates a loop. Everything between the curly brackets, `{}`, after the
    `loop()` statement will run once the Arduino is powered on and then repeat until
    it is powered off.
  prefs: []
  type: TYPE_NORMAL
- en: ➏ This tells the Arduino to set `led` (pin 13) to `HIGH`, which sends power
    to that pin. Think of it as switching the pin on. In this sketch, this turns on
    the LED.
  prefs: []
  type: TYPE_NORMAL
- en: ➐ This tells the Arduino to wait for 1 second. Time on the Arduino is measured
    in milliseconds, so 1 second = 1,000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: ➑ This tells the Arduino to set `led` (pin 13) to `LOW`, which removes power
    and switches off the pin. This turns off the LED.
  prefs: []
  type: TYPE_NORMAL
- en: ➒ Again the Arduino is told to wait for 1 second.
  prefs: []
  type: TYPE_NORMAL
- en: ➓ This closing curly bracket ends the loop. All code that comes after the initial
    `setup` must be enclosed within curly brackets. A common cause of errors in a
    sketch is missing open or close brackets, which will prevent your sketch from
    compiling correctly. After this curly bracket, the sketch goes back to the start
    of the loop at ➎.
  prefs: []
  type: TYPE_NORMAL
- en: Running this code should make your LED flash on and off. Now that you’ve tested
    your Arduino and understand how a sketch works and how to upload it, we’ll take
    a look next at the components you’ll need to carry out all of the projects in
    this book. [Appendix A](app01.xhtml#app01) has more details about each component,
    what it looks like, and what it does.
  prefs: []
  type: TYPE_NORMAL
- en: '**PROJECT COMPONENT LIST**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a complete list of the items you’ll need in order to complete the projects
    in this book. The most important part, of course, is the Arduino board itself—all
    projects use the Arduino Uno R3 version. As mentioned earlier, only the official
    boards are named Arduino, but clone boards compatible with the software can be
    bought from companies like SlicMicro, Sainsmart, and Adafruit and will be referred
    to as Uno R3 or Arduino Uno R3 compatible. (You’ll find a list of official suppliers
    at *[http://arduino.cc/en/Main/Buy/](http://arduino.cc/en/Main/Buy/)*.)
  prefs: []
  type: TYPE_NORMAL
- en: Each project will list the required items first, so if you want to complete
    only a few of the projects, you can flip to a project that appeals to you and
    obtain just those components. Although you can buy each item individually, I suggest
    buying an electronics hobby starter kit or Arduino kit. You’ll find many of them
    online, and there is a list of suggested suppliers in [Appendix A](app01.xhtml#app01).
    The components marked with an asterisk (*) can all be found in an Arduino Bare
    Bones Kit, which can save you a bit of time and money.
  prefs: []
  type: TYPE_NORMAL
- en: 1 Arduino Uno R3 (or compatible alternative)
  prefs: []
  type: TYPE_NORMAL
- en: 1 9V battery pack with 2.1 mm jack
  prefs: []
  type: TYPE_NORMAL
- en: 2 full-size breadboards
  prefs: []
  type: TYPE_NORMAL
- en: 1 half-size breadboard
  prefs: []
  type: TYPE_NORMAL
- en: 1 mini breadboard
  prefs: []
  type: TYPE_NORMAL
- en: 50 male-to-male jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: 10 female-to-male jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: 30 220-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: 10 330-ohm resistors
  prefs: []
  type: TYPE_NORMAL
- en: 1 470-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: 1 10k-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: 1 1M-ohm resistor
  prefs: []
  type: TYPE_NORMAL
- en: '40 5 mm LEDs: red, green, yellow, blue (10 of each color)'
  prefs: []
  type: TYPE_NORMAL
- en: 1 50k-ohm potentiometer
  prefs: []
  type: TYPE_NORMAL
- en: 4 momentary tactile four-pin pushbuttons
  prefs: []
  type: TYPE_NORMAL
- en: 1 HL-69 hygrometer soil moisture sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 piezo buzzer
  prefs: []
  type: TYPE_NORMAL
- en: 1 3.5 mm phone jack
  prefs: []
  type: TYPE_NORMAL
- en: 2 Tower Pro SG90 9g servomotors
  prefs: []
  type: TYPE_NORMAL
- en: 1 photoresistor (also known as a light resistor, or LDR)
  prefs: []
  type: TYPE_NORMAL
- en: 1 analog five-pin, two-axis joystick module
  prefs: []
  type: TYPE_NORMAL
- en: 1 pan-and-tilt housing module
  prefs: []
  type: TYPE_NORMAL
- en: 1 four-pin HC-SR04 ultrasonic range sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 4×4 membrane keypad
  prefs: []
  type: TYPE_NORMAL
- en: 1 seven-segment LED display
  prefs: []
  type: TYPE_NORMAL
- en: 1 four-digit, seven-segment serial display
  prefs: []
  type: TYPE_NORMAL
- en: 1 DHT11 humidity sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 16x2 LCD screen (Hitachi HD44780 compatible)
  prefs: []
  type: TYPE_NORMAL
- en: 1 tilt ball switch
  prefs: []
  type: TYPE_NORMAL
- en: 1 8×8 RGB LED matrix
  prefs: []
  type: TYPE_NORMAL
- en: 1 38 kHz infrared (IR) sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 HC SR501 PIR (passive infrared) sensor
  prefs: []
  type: TYPE_NORMAL
- en: 1 Mifare RFID RC-522 reader, card, and fob
  prefs: []
  type: TYPE_NORMAL
- en: 4 74HC595 shift registers
  prefs: []
  type: TYPE_NORMAL
- en: 1 low-powered laser-pointer pen
  prefs: []
  type: TYPE_NORMAL
- en: 1 WLToys RC V959 missile launcher
  prefs: []
  type: TYPE_NORMAL
- en: 1 ATMEL ATmega328p chip*
  prefs: []
  type: TYPE_NORMAL
- en: 1 16 MHz crystal oscillator (HC-495)*
  prefs: []
  type: TYPE_NORMAL
- en: 1 L7805cv 5V regulator*
  prefs: []
  type: TYPE_NORMAL
- en: 2 100 μF electrolytic capacitors*
  prefs: []
  type: TYPE_NORMAL
- en: 1 PP3 9V battery clip*
  prefs: []
  type: TYPE_NORMAL
- en: 2 22 pF disc capacitors*
  prefs: []
  type: TYPE_NORMAL
- en: 9V battery*
  prefs: []
  type: TYPE_NORMAL
- en: '**SETTING UP YOUR WORKSPACE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get the most out of working with the Arduino, you should create a workspace
    that allows you to let your imagination loose but keeps you organized at the same
    time. If possible, it should also be a dedicated space, something like the one
    shown in [Figure 0-8](ch00.xhtml#ch0fig8); some projects can take a few hours
    to put together, so you may not have time to finish them all in one sitting, and
    there is nothing worse than having to stop and put everything away only to get
    it all out again next time.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-8:**'
  prefs: []
  type: TYPE_NORMAL
- en: An example workspace
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A workspace can be anywhere, but the main thing you will need is a table or
    flat surface big enough for your computer or laptop (so you can use the IDE and
    upload programs easily) and for you to actually do your building.
  prefs: []
  type: TYPE_NORMAL
- en: You may also want space to keep your components at hand as well as any tools
    you may need, such as a soldering iron, wire strippers, hobby knife, hobby drill,
    and so on. It may not be practical to have all of your tools and materials out
    all of the time, so it’s a good idea to buy some hobby or craft cases to store
    your parts. I use one bin for equipment, like soldering irons or wire cutters,
    and smaller bins for components. Plastic boxes for fishing tackle or craft use
    are perfect for storing components (see [Figure 0-9](ch00.xhtml#ch0fig9)), and
    a cantilever toolbox is great to house your soldering iron and other small equipment
    ([Figure 0-10](ch00.xhtml#ch0fig10)). Small plastic boxes, usually designed to
    store jewelry or craft supplies, are also a good way to store very small components
    ([Figure 0-11](ch00.xhtml#ch0fig11)).
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-9:**'
  prefs: []
  type: TYPE_NORMAL
- en: Tackle or craft boxes are handy for storing components.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-10:**'
  prefs: []
  type: TYPE_NORMAL
- en: A cantilever toolbox works well for storing a soldering iron and other small
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**FIGURE 0-11:**'
  prefs: []
  type: TYPE_NORMAL
- en: Plastic jewelry boxes are perfect for organizing very small items.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Consider buying a ledger-sized cutting mat to use as a defined and *nonconductive*
    workspace (one that doesn’t pass electricity), so you won’t run the risk of short-circuiting
    your sensitive electronics.
  prefs: []
  type: TYPE_NORMAL
- en: '**EQUIPMENT AND TOOL GUIDE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While they’re not necessarily required for the projects in this book, here are
    some of the more useful pieces of equipment that you may consider buying when
    setting up a workspace.
  prefs: []
  type: TYPE_NORMAL
- en: • Helping hands—useful for holding items
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0015-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Ledger-sized, nonconductive cutting mat
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0015-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Needle-nose pliers
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0015-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Wire cutters
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • 30-watt soldering iron and solder (see the “[Quick Soldering Guide](ch00.xhtml#ch00lev1sec07)”
    on [page 18](ch00.xhtml#page_18))
  prefs: []
  type: TYPE_NORMAL
- en: • Solder sucker to suck up solder!
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Wire stripper—especially useful for making jumper wires
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • USB A-to-B cable for use with your Arduino
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0016-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Digital multimeter
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0017-01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Screwdriver
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0017-02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Rotary tool and attachments
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0017-03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: • Glue gun
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f0017-04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**QUICK SOLDERING GUIDE**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A few of the components you’ll need may come without their header pins ([Figure
    0-12](ch00.xhtml#ch0fig12)) attached for ease of transport, and you’ll need to
    solder them in place. Header pins are rows of pins you attach to a component so
    you can make connections with jumper wires or insert into a breadboard. They come
    in strips that can be easily snapped to the size needed, and they are usually
    inserted into holes on the component designed for them.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-12:**'
  prefs: []
  type: TYPE_NORMAL
- en: Header pins
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The RFID module used in [Project 23](ch23.xhtml#ch23), for example, doesn’t
    come with the pins attached, so I’ll demonstrate how to solder those in place
    now as a quick guide to soldering. If you want something more in-depth, there’s
    a handy cartoon soldering guide at *[https://mightyohm.com/files/soldercomic/FullSolderComic_EN.pdf](https://mightyohm.com/files/soldercomic/FullSolderComic_EN.pdf)*.
  prefs: []
  type: TYPE_NORMAL
- en: First you will need a soldering iron ([Figure 0-13](ch00.xhtml#ch0fig13)). A
    general-purpose, 30-watt soldering iron with a fine tip should meet your needs.
    It’s worthwhile to buy a kit that includes a soldering iron, stand, and solder.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-13:**'
  prefs: []
  type: TYPE_NORMAL
- en: Soldering iron and solder wire
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To solder, you heat the area you want to solder with the soldering iron—for
    example, the place where the pin and the component meet—and then apply the soldering
    wire to the heated area; the wire quickly melts, and when it resets, it should
    create a clean connection between the two items you soldered. Here’s a demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: Plug in your soldering iron and wait at least five minutes for it to reach operating
    temperature.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Break off the right number of header pins for your component. For the RFID module
    in [Project 23](ch23.xhtml#ch23), we need a row of eight pins. Insert them into
    the module as shown in [Figure 0-14](ch00.xhtml#ch0fig14).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**FIGURE 0-14:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Insert the header pins into the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![image](../images/f00-14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*You do not apply solder directly to the iron, only to the joint you are soldering.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we will solder the pins in place. Start with the leftmost pin. Hold the
    heated tip of the soldering iron to the pin and module at the same time. You only
    need to hold it there for about two seconds. While holding the iron in place,
    add solder to the area; the solder should melt and create a joint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quickly remove both the iron and solder—more than a couple of seconds could
    damage your components. Wait for the joint to cool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A good solder joint should be like a shiny cone ([Figure 0-15](ch00.xhtml#ch0fig15)).
    With a little bit of practice, you will be able to solder in no time at all.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIGURE 0-15:**'
  prefs: []
  type: TYPE_NORMAL
- en: Solder joints should look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](../images/f00-15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Safety First**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Soldering irons get very, very hot and should be used with extreme care and
    not used by unsupervised children. Here are a few safety tips:'
  prefs: []
  type: TYPE_NORMAL
- en: • Be sure to use a stand and never lay a hot soldering iron down on a table.
  prefs: []
  type: TYPE_NORMAL
- en: • Solder in a well-ventilated room. The fumes released from melting solder can
    be harmful.
  prefs: []
  type: TYPE_NORMAL
- en: • Keep flammable materials away from your work area.
  prefs: []
  type: TYPE_NORMAL
- en: • Keep equipment out of reach of children.
  prefs: []
  type: TYPE_NORMAL
- en: • Wear eye protection.
  prefs: []
  type: TYPE_NORMAL
- en: • Wait for a soldering iron to cool down completely before storing it.
  prefs: []
  type: TYPE_NORMAL
