["```\nkali@kali:~$ openssl genpkey -genparam -algorithm DH -out parametersPG.pem\n```", "```\nkali@kali:~$ openssl pkeyparam -in parametersPG.pem -text\n```", "```\n----BEGIN DH PARAMETERS-----\nMIIBCAKCAQEA9vcePAZIOjEdJzd0c9cK29wGvoIA/iPnGVf/36HnxeeSt5HBZsrb\niDomXlmc31ykKQuHuobNA5d/qCBhJeOINr0OLr70fBcK2HuLWGInbVDi7niTatd4\nl7PRZlbwau/cY17eCA9bi9H2QgPku9+FbcIRaTSwMpeQliJ7B7FqWvrTEvIpz/Kb\n\n0d6nucUjwj4EbZrLeLAwKAw2+6g2POnYfVg5Mqoz5K9e1YOn/tLFUpiGdBbujMtJ\njI0glvoCykr96wsZ/I9GHMArIjm8LQA46UyLXhjdCYs2T+Jf+8t2pXNrpigtf3n1\nmFkguOBaQWP2oKn+FC/EfWwKwuBqqvmd2wIBAg==\n\n-----END DH PARAMETERS-----\nDH Parameters: (2048 bit)\n\n    prime:\n\n        00:f6:f7:1e:3c:06:48:3a:31:1d:27:37:74:73:d7:\n\n       ....\n\n        f6:a0:a9:fe:14:2f:c4:7d:6c:0a:c2:e0:6a:aa:f9:\n\n        9d:db\n\n    generator: 2 (0x2)\n```", "```\nkali@kali:~$ openssl genpkey -paramfile parametersPG.pem -out AlicePublicPrivateKeyPair.pem\n```", "```\nkali@kali:~$ openssl pkey -in AlicePublicPrivateKeyPair.pem -text -noout\n```", "```\nDH Private-Key: (2048 bit)\n\n    private-key:\n\n        53:2f:45:2d:4a:15:c3:62:4f:4c:b8:4f:43:92:8b:\n\n        98:7c:f6:fd:1f:54:16:15:c6:28:a1:ae:8a:80:73:\n\n       ....\n\n    public-key:\n\n        7f:c6:af:1e:ff:aa:ba:59:98:02:19:fb:93:6d:cc:\n\n        57:28:00:48:20:a7:38:6a:41:43:1b:d6:00:32:8f:\n\n       ....\n\n    prime:\n\n        00:f6:f7:1e:3c:06:48:3a:31:1d:27:37:74:73:d7:\n\n        0a:db:dc:06:be:82:00:fe:23:e7:19:57:ff:df:a1:\n\n       ....\n\n    generator: 2 (0x2)\n```", "```\nkali@kali:~$ openssl genpkey -paramfile parametersPG.pem -out BobPublicPrivateKeyPair.pem\n```", "```\nkali@kali:~$ openssl pkey -in AlicePublicPrivateKeyPair.pem -pubout -out AlicePublicKey.pem\n```", "```\nkali@kali:~$ openssl pkey -in BobPublicPrivateKeyPair.pem -pubout -out BobPublicKey.pem\n```", "```\nkali@kali:~$ openssl pkey -pubin -in BobPublicKey.pem -text\n```", "```\nkali@kali:~$ openssl pkeyutl -derive -inkey AlicePublicPrivateKeyPair.pem -\n\n\t\t\t peerkey BobPublicKey.pem -out AliceSharedSecret.bin\n```", "```\nkali@kali:~$ openssl pkeyutl -derive -inkey BobPublicPrivateKeyPair.pem -\n\n\t\t\t peerkey AlicePublicKey.pem -out BobSharedSecret.bin\n```", "```\nkali@kali:~$ xxd AliceSharedSecret.bin\n```", "```\nkali@kali:~$ cmp AliceSharedSecret.bin BobSharedSecret.bin\n```", "```\nkali@kali:~$ openssl enc -aes-256-ctr -pbkdf2 -e -a -in plain.txt -out encrypted\n\n\t\t\t .txt -pass file:AliceSharedSecret.bin\n```", "```\n➊ import socket\n\n   import ssl\n\n   client_key = 'client.key'\n\n   client_cert = 'client.crt'\n\n   server_cert = 'server.crt'\n\n   port = 8080\n\n   hostname = '127.0.0.1'\n➋ context = ssl.SSLContext(ssl.PROTOCOL_TLS, cafile=server_cert)\n➌ context.load_cert_chain(certfile=client_cert, keyfile=client_key)\n\n   context.load_verify_locations(cafile=server_cert)\n\n   context.verify_mode = ssl.CERT_REQUIRED\n➍ context.options |= ssl.OP_SINGLE_ECDH_USE\n\n   context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_TLSv1_2\n\n➎ with socket.create_connection((hostname, port)) as sock:\n\n    ➏ with context.wrap_socket(sock, server_side=False,\n\n           server_hostname=hostname) as ssock:\n\n           print(ssock.version())\n\n           message = input(\"Please enter your message: \")\n\n           ssock.send(message.encode())\n\n           receives = ssock.recv(1024)\n\n           print(receives)\n```", "```\nkali@kali:~$ openssl req -new -newkey rsa:3072 -days 365 -nodes -x509\n-keyout server.key -out server.crt\n```", "```\nkali@kali:~$ openssl req -new -newkey rsa:3072 -days 365 -nodes -x509\n-keyout client.key -out client.crt\n```", "```\n   import socket\n\n  import ssl\n\n   client_cert = 'client.crt'\n\n   server_key = 'server.key'\n\n   server_cert = 'server.crt'\n\n   port = 8080\n➊ context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n➋ context.verify_mode = ssl.CERT_REQUIRED\n➌ context.load_verify_locations(cafile=client_cert)\n\n   context.load_cert_chain(certfile=server_cert, keyfile=server_key)\n\n   context.options |= ssl.OP_SINGLE_ECDH_USE\n➍ context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_TLSv1_2\n\n   with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:\n\n        sock.bind(('', port))\n\n        sock.listen(1)\n\n        with context.wrap_socket(sock, server_side=True) as ssock:\n\n           conn, addr = ssock.accept()\n\n           print(addr)\n\n           message = conn.recv(1024).decode()\n\n           capitalizedMessage= message.upper()\n\n           conn.send(capitalizedMessage.encode())\n```", "```\nTLSv1.3\nPlease enter your message: test\nb'TEST'\n```", "```\n('127.0.0.1', 36000)\n```", "```\n<a href=\"https://www.exampleTestDomain.com/\">Login</a>\n```", "```\n<a href=\"http://www.exampleTestDomain.com/\">Login</a>\n```", "```\n<a href=\"http://wwww.exampleTestDomain.com/\">Login</a>\n```", "```\n   import socket\n\n   import ssl\n\n   import threading\n\n➊ client_cert = 'path/to/client.crt'\n\n   server_key = 'path/to/server.key'\n\n   server_cert = 'path/to/server.crt'\n\n   port = 8080\n\n   context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n\n   context.verify_mode = ssl.CERT_REQUIRED\n\n   context.load_verify_locations(cafile=client_cert)\n\n   context.load_cert_chain(certfile=server_cert, keyfile=server_key)\n\n   context.options |= ssl.OP_SINGLE_ECDH_USE\n\n   context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_TLSv1_2\n\n➋ def handler(conn):\n\n       encrypted_key = conn.recv(4096).decode()\n\n       #----------------------------------\n\n       #  Add your decryption code here\n\n       #----------------------------------\n\n       conn.send(decrypted_key.encode())\n\n       conn.close()\n\n   with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:\n\n        sock.bind(('', port))\n\n     ➌ sock.listen(5)\n\n        with context.wrap_socket(sock, server_side=True) as ssock:\n\n           while True:\n\n           ➍ conn, addr = ssock.accept()\n\n              print(addr)\n\n           ➎ handlerThread = threading.Thread(target=handler, args=(conn,))\n\n              handlerThread.start()\n```"]