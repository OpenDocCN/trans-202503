["```\n$ tar xzf snobol4-2.3.1.tar.gz\n$ cd snobol4-2.3.1/\n$ ./configure\n$ make\n```", "```\n*  hello.sno\n    output = 'Hello, world!'\n    output = 'Hello, '  \"world!\"\n    output = 'Hello #' 9\n    output = output = \"Goodbye!\"\nend\n```", "```\n> snobol4 hello.sno\n```", "```\nHello, world!\nHello, world!\nHello #9\n\nGoodbye!\n```", "```\n*  hello forever\nloop  output = \"You say goodbye and I say hello\"  :(loop)\nend\n```", "```\n*  A bit of interaction\nagain output = \"Name?\"\n  name = input\n  output = differ(name, null) \"Greetings, \" name  :f(again)\n  output = \"Shall we play a game?\"\n  output = \"On second thought, nah\"\nend\n```", "```\n  differ(name, null)          :f(again)\n  output = \"Greetings, \" name\n```", "```\nmenu  output =\n      output = \"(1) F to C or (2) C to F, 'q' to quit:\"\n      menu = input\n      ident(menu,'2')                     :s(CtoF)\n      ident(menu,'q')                     :s(end)\n\n* F to C\n      output = \"Fahrenheit temperature?\"\n      F = input\n      C = (5\\. / 9.) * (F - 32.0)\n      output = F \" F = \" C \" C\"           :(menu)\n\n* C to F\nCtoF  output = \"Celsius temperature?\"\n      C = input\n      F = (9\\. / 5.) * C + 32.0\n      output = C \" C = \" F \" F\"           :(menu)\nend\n```", "```\nloop    output = \"Select your entree:\"\n        output = \"  0) Green eggs and ham\"\n        output = \"  1) Purple pizza\"\n        output = \"  2) Plaid tacos\"\n        output = \"  3) Blue snocone\"\n        output = \"  4) Quit\"\n        menu = input               \n        order = \"You ordered \"       :($('menu' menu))\n\nmenu0   order = order \"green eggs and ham\"   :(print)\nmenu1   order = order \"a purple pizza\"       :(print)\nmenu2   order = order \"plaid tacos\"          :(print)\nmenu3   order = order \"a blue snocone\"       :(print)\nprint   output =\n        output = order\n        output =                             :(loop)\nmenu4\nend\n```", "```\nsnobol4>  a = 123\nsnobol4>  b = .a\nsnobol4>  c = 'a'\nsnobol4>  output = a\nsnobol4>  output = b\nsnobol4>  output = c\nsnobol4>  output = $b\nsnobol4>  output = $c\nsnobol4>  output = $.a\nsnobol4> end\n\n123\nA\na\n123\n123\n123\n```", "```\n cosa1 = 'thing1'\n cosa2 = 'thing2' $cosa1 = 'mea1'\n $cosa2 = 'mea2'\n $thing1 = 'kitu1'\n $thing2 = 'kitu2'\n output = cosa1 ' ' cosa2\n output = thing1 ' ' thing2\n output = $thing1 ' ' $thing2\n output = mea1 ' ' mea2\n output = $$cosa1 ' ' $$cosa2\nend\n```", "```\nthing1 thing2\nmea1 mea2\nkitu1 kitu2\nkitu1 kitu2\nkitu1 kitu2\n```", "```\n $cosa1 = 'mea1'\n $cosa2 = 'mea2'\n```", "```\n $thing1 = 'kitu1'\n $thing2 = 'kitu2'\n```", "```\nsnobol4>  data('complex(real,imag)')\nsnobol4>  a = complex(1.5, 3.3)\nsnobol4>  b = complex(2.3,-0.4)\nsnobol4>  output = a\nsnobol4>  output = b\nsnobol4>  output = real(a) ' ' real(b)\nsnobol4>  output = imag(a) ' ' imag(b)\nsnobol4> end\n\nCOMPLEX\nCOMPLEX\n1.5 2.3\n3.3 -0.4\n```", "```\nA = array(10)\nA = array('0:9')\nA = array('0:7,20,-1:1')\nA = array('128,128',0)\n```", "```\n> snobol4 -d 10m big.sno\n```", "```\nA = array('0:9')\nA[0] = 'one'\nA[1] = 3.141592\nA[2] = 123456\nA[3] = array(6)\nA[3][1] = 'nested'\noutput = 'A[2]    = ' A[2]\noutput = 'A[1]    = ' A[1]\noutput = 'A[0]    = ' A[0]\noutput = 'A[3]    = ' convert(A[3],'string')\noutput = 'A[3][1] = ' A[3][1]\n```", "```\nB = array('128,128',0)\nB[11,22] = 5555\nB[12,45] = array('11,11')\nB[12,45]<5,6> = 'how are you?'\n\ndata('complex(real,imag)')\nB[12,45][1,2] = complex(3,0.141592)\noutput = real(B[12,45][1,2]) '+' imag(B[12,45][1,2]) 'i'\n```", "```\nA = array('0:5')\nA[0] = 'xyzzy'\nD = A \nD[0] = 12345\noutput = 'A[0] is now ' A[0] \n\nA[0] = 'xyzzy'\nE = copy(A)\nE[0] = 'plugh'\noutput = 'E[0] is ' E[0] \noutput = 'A[0] is still ' A[0]\n```", "```\nA[0] is now 12345\n```", "```\nE[0] is plugh\nA[0] is still xyzzy\n```", "```\ndata('complex(real,imag)')\nt = table()\nt[1] = 'one'\nt[2.0] = 'two'\nt[complex(2,3)] = 'three'\nc = complex(2,3)\nt[c] = 'four'\noutput = t[1]\noutput = t[2.0]\noutput = t[complex(2,3)]\noutput = t[c]\n```", "```\none\ntwo\n\nfour\n```", "```\n   z = table(100,25)\n   z['one'] = 1\n   z['two'] = 2\n   z['three'] = 3\n   z[3.14159265] = 'pi'\n➊ a = array(10)\n➋ a[7] = z\n➌ z[a] = a\n   output = z['two']\n   output = z[a]\n   output = z[3.14159265]\n➍ output = z[a][7][a][7][a][7][3.14159265]\n```", "```\n2\nARRAY('10')\npi\npi\n```", "```\n     ➊ t = table()\n        t['one'] = 1; t['two'] = 2; t['three'] = 3.3\n     ➋ x = convert(t, 'array')\n     ➌ i = 1\n   loop output = 'key: ' x[i,1] ', value: ' x[i,2]  :f(cont)\n        i = i + 1      :(loop) ➍ cont a = array('3,2')\n        a[1,1] = 'one'; a[1,2] = 1\n        a[2,1] = 'two'; a[2,2] = 2\n        a[3,1] = 'three'; a[3,2] = 3\n     ➎ y = convert(a, 'table')\n        output = y['one']\n        output = y['two']\n        output = y['three']\n```", "```\nloop  input 'hello'          :f(loop)\n      output = \"Greetings!\"\nend\n```", "```\ncolor = 'brown'\nanimal = 'cow'\ntext = 'how now brown cow?'\ntext color = 'blue'\ntext animal = 'giraffe'\noutput = text\nend\n```", "```\ntext = 'The brown bear approached the brown car'\ntext 'brown' = 'black'\noutput = text\n```", "```\n      text = 'The brown bear approached the brown car'\nloop  text 'brown' = 'black'            :s(loop)\n      output = text\n```", "```\n➊ dpat = span(',: ')\n➋ lpat = (break(',:') . last) dpat ➌ fpat = (break(',:') . first) dpat\n➍ apat = (rem . address)\n➎ text = 'Caesar,   Julius:  1313 Mockingbird Ln   '\n➏ text lpat fpat apat\n➐ output = first ' ' last ', address: ' trim(address)\n   end\n```", "```\n*  Map North American dates to European dates\n   ➊ pat = len(2) . month ('/' | '-') len(2) . day ('/' | '-') len(4) . year\nloop  text = input                          :f(end)\n   ➋ text pat = day '/' month '/' year     :f(bad)\n      output = text                         :(loop)\nbad   output = \"unknown format\"             :(loop)\nend\n```", "```\n10-14-1066\n10/12/1492\n04/15/1912\n07-24-1969\n04/04-1968\n11-23-1963\n```", "```\n> snobol4 dates.sno <dates.txt\n```", "```\n14/10/1066\n12/10/1492\n15/04/1912\n24/07/1969\n04/04/1968\n23/11/1963\n...\n11/04/2020\n03/01/1892\n13/12/1989\n09/04/1865\n16/11/1093\nunknown format\n```", "```\n*  Map numeric dates to full dates\n      pat = len(2) . month ('/' | '-') len(2) . day ('/' | '-') len(4) . year\n      m = array(12)\n      m<1> = \"January\";  m<2> = \"February\";  m<3> = \"March\";  \n      m<4> = \"April\";    m<5> = \"May\";       m<6> = \"June\";  \n      m<7> = \"July\";     m<8> = \"August\";    m<9> = \"September\";  \n      m<10> = \"October\"; m<11> = \"November\"; m<12> = \"December\"\n\nloop  text = input                                       :f(end)\n      text pat                                           :f(bad)\n      output = m<month> ' ' (1 * day) ', ' (1 * year)    :(loop)\nbad   output = \"unknown format\"                          :(loop)\nend\n```", "```\nOctober 14, 1066\nOctober 12, 1492\nApril 15, 1912\nJuly 24, 1969\nApril 4, 1968\nNovember 23, 1963\n...\nApril 11, 2020\nJanuary 3, 1892\nDecember 13, 1989\nApril 9, 1865\nNovember 16, 1093\nunknown format\n```", "```\n*  Convert from Alice to Bob\n        p = null | any(' .,?!)')\n        s = pos(0) | ' ' | '('\nloop    text = input                                :f(end)\ns0      text s . a 'Alice' p . c   = a 'Bob' c      :s(s0)\ns1      text s . a 'her' p . c     = a 'his' c      :s(s1)\ns2      text s . a 'Her' p . c     = a 'His' c      :s(s2)\ns3      text s . a 'herself' p . c = a 'himself' c  :s(s3)\ns4      text s . a 'Herself' p . c = a 'Himself' c  :s(s4)\ns5      text s . a 'she' p . c     = a 'he' c       :s(s5)\ns6      text s . a 'She' p . c     = a 'He' c       :s(s6)\n        output = text                               :(loop)\nend\n```", "```\ntext s . a 'string1' p . c = a 'string2' c\n```", "```\nAlice was beginning to get very tired of sitting by her sister on the\nbank, and of having nothing to do: once or twice she had peeped into\nthe book her sister was reading, but it had no pictures or\nconversations in it, \"and what is the use of a book,\" thought Alice\n\"without pictures or conversations?\"\n```", "```\nBob was beginning to get very tired of sitting by his sister on the\nbank, and of having nothing to do: once or twice he had peeped into\nthe book his sister was reading, but it had no pictures or\nconversations in it, \"and what is the use of a book,\" thought Bob\n\"without pictures or conversations?\"\n```", "```\n* Define a function\n     ➊ define('poly(a,b,c,x)')            :(epoly)\npoly    poly = a * x ** 2 + b * x + c      :(return)\nepoly\n\n* Main body of the code\n        x = -10\nloop    output = x ' ' poly(1,2,2,x)\n        x = x + 1\n        ge(x,8)                            :f(loop)\nend\n```", "```\ndef fact(n):\n    if (n < 1):\n        return 0\n    else:\n        return n * fact(n-1)\n```", "```\n* Recursive factorial function\n        define('fact(n)')       :(efact)\nfact    fact = eq(n,0) 1        :s(return)\n        fact = n * fact(n - 1)  :(return)\nefact\n\n    output = \"Enter a number:\"\n    n = input\n    output = convert(n,'integer') \"! = \" fact(n)\nend\n```", "```\n        define('swap(x,y)t')        :(eswap)\nswap    t = x\n        x = y\n        y = t                       :(return) eswap\n        a = 3\n        b = 5\n\n        output = \"a = \" a \", b = \" b\n        swap(a,b)\n        output = \"a = \" a \", b = \" b\nend\n```", "```\na = 3, b = 5\na = 3, b = 5\n```", "```\n* Function to swap two variables\n        define('swap(x,y)t')        :(eswap)\nswap    t = $x\n        $x = $y\n        $y = t                      :(return)\neswap\n\n        a = 3\n        b = 5\n        output = \"a = \" a \", b = \" b\n     ➊ swap(a,b)\n        output = \"a = \" a \", b = \" b\n     ➋ swap(.a,.b)\n        output = \"a = \" a \", b = \" b\n     ➌ swap('a','b')\n        output = \"a = \" a \", b = \" b\nend\n```", "```\na = 3, b = 5\na = 3, b = 5\na = 5, b = 3\na = 3, b = 5\n```", "```\n   * Uppercase a file\n           input('read', 10, 132, host(2,2))\n           output('write', 11, 'W', host(2,3))\n➊ loop    text = read                         :f(close)\n           text = replace(text, &lcase, &ucase)\n        ➋ write = text                        :(loop)\n   close   endfile(10)\n           endfile(11)\n   end\n```", "```\n> snobol4 uppercase.sno alice.txt uppercase.txt\n```", "```\n*  Copy a file using the command line\n        src = host(2,2)\n        dst = host(2,3)\n        input('read', 10, 'B,4096', src)\n        output('write', 11, 'B', dst)\n➊ loop    write = read         :f(close)s(loop)\n   close   endfile(10)\n           endfile(11)\n   end\n```", "```\n> snobol4 copy.sno src.png dst.png\n```", "```\niris_train_data.txt\niris_train_labels.txt\niris_test_data.txt\niris_test_labels.txt\n```", "```\n6.70000 3.00000 5.00000 1.70000\n5.10000 3.50000 1.40000 0.30000\n4.80000 3.40000 1.60000 0.20000\n6.10000 2.80000 4.70000 1.20000\n6.00000 3.40000 4.50000 1.60000\n```", "```\n1\n0\n0\n1\n1\n```", "```\n       ➊ define('loadfile(name)pat,r,text,c,v')    :(eloadfile)\nloadfile  input('reader', 10, , name)\n       ➋ pat = break(' ') . v span(' ')\n          r = 0\nload_l02  text = reader ' '                         :f(load_l00)\n          c = 0\nload_l03  text pat =                                :f(load_l01)\n          c = c + 1                                 :(load_l03)\nload_l01  r = r + 1                                 :(load_l02)\nload_l00  endfile(10)\n       ➌ loadfile = array(r ',' c)\n          input('reader', 10, , name)\n          r = 1\nload_l07  text = reader ' '                         :f(load_l04)\n          c = 1\nload_l06  text pat =                                :f(load_l05)\n       ➍ loadfile[r,c] = 1.0 * v\n          c = c + 1                                 :(load_l06)\nload_l05  r = r + 1                                 :(load_l07)\nload_l04  endfile(10)                               :(return)\neloadfile\n```", "```\n          define('dist(x,y,i,j)sum,k')          :(edist)\ndist      k = 1\ndist_l00  sum = sum + (x[i,k] - y[j,k]) ** 2    :f(dist_l01)\n          k = k + 1                             :(dist_l00)\ndist_l01  dist = sqrt(sum)                      :(return)\nedist\n```", "```\n          define('samples(a)pat')                 :(esamples)\nsamples   pat = break(',') . samples\n          prototype(a) pat                        :(return)\nesamples\n\n          define('nearest(xtrn,ytrn,xtst,ytst,idx)s,i,mc,md,d')  :(enearest) nearest   i = 1\n          s = samples(xtrn)\n          nearest = ytrn[i,1]\n          md = dist(xtrn, xtst, i, idx)\nnear_l01  i = i + 1\n          le(i,s)                                 :f(return)\n          d = dist(xtrn, xtst, i, idx)\n          lt(d,md)                                :f(near_l01)\n          nearest = ytrn[i,1]\n          md = d                                  :(near_l01)\nenearest\n```", "```\n*  Train and test datasets\n        x_train = loadfile(host(2,2))\n        y_train = loadfile(host(2,3))\n        x_test = loadfile(host(2,4))\n        y_test = loadfile(host(2,5))\n\n*  Run the test data against the training to find the nearest neighbor\n        i = 1; nc = 0; n = samples(x_test)\nloop    le(i,n)                                     :f(stats)\n        c = nearest(x_train, y_train, x_test, y_test, i)\n     ➊ nc = eq(c, y_test[i,1]) nc + 1\n        star = \n        star = ne(c, y_test[i,1]) ' **'\n        output = \"test \" i \": assigned \" c \", actual \" y_test[i,1] star\n        i = i + 1                                   :(loop)\nstats   output =\n        output = 'accuracy ' (nc / (1.0 * n)) ' (' nc ' out of ' n ' correct)'\n        output =\nend\n```", "```\n> snobol4 classify.sno iris_train_data.txt iris_train_labels.txt\n             iris_test_data.txt iris_test_labels.txt\n```", "```\ntest 1: assigned 0., actual 0.\ntest 2: assigned 0., actual 0\\.      \ntest 3: assigned 1., actual 1.\ntest 4: assigned 2., actual 2\\.                                                   \ntest 5: assigned 1., actual 1.\ntest 6: assigned 2., actual 2.\ntest 7: assigned 0., actual 0.\ntest 8: assigned 1., actual 1.\ntest 9: assigned 2., actual 2.\n```", "```\ntest 45: assigned 1., actual 1.\ntest 46: assigned 1., actual 2\\. **\ntest 47: assigned 1., actual 1.\ntest 48: assigned 0., actual 0.\ntest 49: assigned 1., actual 1.\ntest 50: assigned 2., actual 2.\n\naccuracy 0.96 (48 out of 50 correct)\n```", "```\nPython:\n       a = [0]*1000000\n       for k in range(20):\n           for i in range(1000000):\n               a[i] = i\n\nSNOBOL:\n        a = array(1000000)\n        k = 1\nloop0   i = 1\nloop1   a[i] = i                :f(break1)\n        i = i + 1               :(loop1)\nbreak1  k = le(k,20) k + 1      :s(loop0)\nend\n```"]