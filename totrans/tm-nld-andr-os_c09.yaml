- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Core Libraries
  prefs: []
  type: TYPE_NORMAL
- en: '![g09001](image_fi/502680c09/g09001.png)'
  prefs: []
  type: TYPE_IMG
- en: Having a programming language for the platform is one thing. And it’s a pretty
    big thing, especially when it’s a language that most developers already know.
    But programmers also want to have standard utility functions so that they don’t
    have to reinvent everything every time they write an app. A programming language
    gives you the ability to encode logic (like condition statements, loops, equations).
    But higher-level functionality like data structures, or networking, or file reading
    and writing is the job of the core libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Although the Android team adopted the Java language, they were explicitly not
    using the implementation of the libraries that shipped with Sun Microsystems’^([1](#c09-footnote-1))
    version of Java, called the Java Development Kit (JDK). The JDK comes with, say,
    an `ArrayList` class that implements a simple data structure that is common in
    programming. But Android didn’t use those classes, so they needed to provide their
    own.
  prefs: []
  type: TYPE_NORMAL
- en: Bob Lee and the Java Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When Android needed standard Java libraries, they brought in a Java expert
    working elsewhere at Google: Bob Lee.'
  prefs: []
  type: TYPE_NORMAL
- en: Bob (also known as “Crazy Bob”^([2](#c09-footnote-2))) started programming in
    middle school, in the early 90s, mostly because he wanted to write video games.
    He soon picked up various programming languages and in high school moved on from
    video games to building a website for a nearby college. The college was so impressed
    that they gave him a full ride to the school to continue that effort. But college
    didn’t suit Bob, so he left and started consulting, along with writing books and
    popular Java libraries, which eventually landed him a job at Google in 2004.
  prefs: []
  type: TYPE_NORMAL
- en: Bob wanted to work on mobile technology, so after a couple years on the Ads
    team, he switched to the Android team, starting in March of 2007.
  prefs: []
  type: TYPE_NORMAL
- en: When Bob joined, Android was still using the JamVM runtime, before the Dalvik
    runtime came online. The *core libraries* were basically a collection of random
    utilities that people wrote for one-off purposes. “They were totally incompatible.
    Somebody would need something and they would just implement what they needed.
    They kind of resembled the Java libraries, but they were obviously missing a lot.”
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there were a couple existing options for more standard libraries,
    so Bob and the team evaluated them. “We looked at GNU Classpath, but we ended
    up going with Apache Harmony.^([3](#c09-footnote-3)) There was a lot of stuff
    that wasn’t great about it, so it was a matter of rewriting parts of it, and we
    would contribute those back. Like we rewrote `ThreadLocal` [and] `Runtime.exec()`.
    Rewriting that stuff and merging it back was a big part of it.
  prefs: []
  type: TYPE_NORMAL
- en: “There were also APIs added to the core Android platform by other engineers
    on the team just because it seemed like a good idea at the time. If someone thought
    something might be potentially useful, they would put it in there. And there was
    some really bad stuff.”
  prefs: []
  type: TYPE_NORMAL
- en: An example of this was `WeakHashMap`, a data structure class that developers
    use in memory-constrained situations, like Android at that time. It offers an
    advantage over the traditional `HashMap` class by automatically cleaning up (garbage-collecting)
    objects which are no longer used. Like a Roomba for your memory heap, cleaning
    up the trash you leave behind. Note that “weak” here is taken from the term “weak
    reference,” which is an object that can be garbage-collected when it is no longer
    in use.
  prefs: []
  type: TYPE_NORMAL
- en: Joe Onorato, on the framework team, added the `WeakHashMap` API. Sort of. He
    said, “I had this library that depended on `WeakHashMap`, and I needed to link^([4](#c09-footnote-4))
    it, so I created a class called `WeakHashMap`.” The problem was, Joe’s class wasn’t
    a “weak” `HashMap`, it was just a standard `HashMap`. It subclassed `HashMap`
    and didn’t add any of the logic that would have made it weak. Sometime later,
    Jeff Hamilton (also on the framework team) was writing code that needed the functionality
    of `WeakHashMap`. He saw that the class existed in the core libraries, used it,
    and had memory problems that required a lot of debugging until Jeff discovered
    that Joe’s `WeakHashMap` class wasn’t cleaning up memory at all. It was just a
    regular `HashMap`, which didn’t do the garbage-collecting work that Jeff expected.
  prefs: []
  type: TYPE_NORMAL
- en: Bob continued, “I know the Android APIs could be a lot better . . . but they
    could also have been so much worse.” Much of Bob’s time was spent preventing these
    APIs from becoming public. “I would find and just remove all that stuff from the
    API. If there was a class that was only used by one app, I would move it back
    out into that app—if you weren’t going to use it [from multiple apps], it didn’t
    belong in the framework libraries.”
  prefs: []
  type: TYPE_NORMAL
- en: As part of making the core libraries work, Bob implemented significant networking
    functionality, fixing bugs along the way. One of those problems prevented every
    phone from starting up at all. “The first time you started a phone, it had to
    connect to a time server, but the time [on the device] was set to sometime in
    2004.” The phone would try to connect to the server through a secure connection,
    which requires a security certificate on the server. But the initial time on the
    phone was before the time that the certificate was issued on the server, so the
    connection would fail and the phone wouldn’t boot. Bob’s fix was to catch that
    failure condition and set the initial time on the phone to the day that he fixed
    the bug.
  prefs: []
  type: TYPE_NORMAL
- en: Bob also tracked down a networking problem that was specific to mobile data.
    Android phones were experiencing severe outages that seemed like a problem with
    bad carrier network infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Networking protocols have built in fault-tolerance, because networks can go
    down, or packets of data can get lost or delayed. Android was using the *congestion
    window* approach in Linux that responds to an outage by halving the size of the
    data packet, and halving it again, and again, until it gets a response from the
    server that packets are going through. Then it doubles the packet sizes each time
    they succeed until packets are eventually back to the full size.
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm is reasonable for regular internet traffic, where latency (the
    delay between sending a message and receiving a response) is measured in milliseconds
    and outages are infrequent. But it doesn’t work well for cellular data, where
    it’s common to have high latencies of a second or more, and where brief outages
    are common. Bob did some profiling and investigation to track down the problem.
    After failures decreased the packet size, “it would double the size of the buffer
    every time it had a successful packet. But with high latencies over mobile networks,
    you had one or two second round trip times over 2.5G or 3G back then. So it was
    only scaling up the buffer every time it made a successful round trip. It’d take
    like 30 seconds to scale the buffer back up after you had some kind of outage.”
  prefs: []
  type: TYPE_NORMAL
- en: Jesse Wilson and the Terrible APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We spent a long time taking these APIs and re-implementing them from scratch
    to be good, while maintaining their existing terrible APIs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Jesse Wilson
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bob worked by himself on core libraries for a while, but eventually, after 1.0
    shipped, he got some help. Josh Bloch^([5](#c09-footnote-5)) joined his team in
    late 2008, and Jesse Wilson joined in early 2009.
  prefs: []
  type: TYPE_NORMAL
- en: Jesse Wilson was working on the Google AdWords product with Bob before Bob joined
    Android. “Bob got out of AdWords to go work on Android when Android did not seem
    like a responsible job decision. I followed him there, more to work with Bob than
    to work on Android.”
  prefs: []
  type: TYPE_NORMAL
- en: Bob and Jesse would eventually leave Android and Google. Bob became the CTO
    of Square. Jesse followed Bob once again and joined Square.^([6](#c09-footnote-6))
    “He’s got something on me, I guess.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Jesse described life on the core libraries team: “In the first year of Android,
    people just brought in whatever libraries they thought they needed, and put them
    in the public APIs. We have something called kXML, which is the pull parser. We
    have the org.json JSON library. The ApacheHttp client. We basically have 2006-vintage
    snapshots of all of these libraries, which have since gone on to introduce ten
    thousand features that make them too big for Android. Their current versions are
    incompatible in big, meaningful ways. If you’re shipping a web server, you can
    control which version of the thing you’re including; if you change it in an incompatible
    way, your client just changes it. Android’s versioning is such that if we change
    an API in, say, the JSON library, even if the new API is better, the apps don’t
    get to opt in or out of the API change, and so you have to be 100 percent backwards-compatible.
    So we spent a long time taking these APIs and re-implementing them from scratch
    to be good, while maintaining their existing terrible APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: “We inherited all the Apache Harmony code, and Apache Harmony was never really
    a shipping product. It was much more of an inventory to build a shipping product
    with. There was so much work to take something that was half-baked and make it
    correct.
  prefs: []
  type: TYPE_NORMAL
- en: “It was a lot of re-implement-and-optimize. The org.json code in the standard
    library, 100 percent of it was brand new. One day Dan Morrill came to me and said,
    ‘Hey, heads up, the open source library for the JSON library we’re using has this,
    ‘The Software shall be used for Good, not Evil’ clause^([7](#c09-footnote-7))
    in it. That means it’s not open source because open source has no discrimination
    against any endeavor.’ So I got to go and re-implement it.”
  prefs: []
  type: TYPE_NORMAL
