- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Core Libraries
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 核心库
- en: '![g09001](image_fi/502680c09/g09001.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![g09001](image_fi/502680c09/g09001.png)'
- en: Having a programming language for the platform is one thing. And it’s a pretty
    big thing, especially when it’s a language that most developers already know.
    But programmers also want to have standard utility functions so that they don’t
    have to reinvent everything every time they write an app. A programming language
    gives you the ability to encode logic (like condition statements, loops, equations).
    But higher-level functionality like data structures, or networking, or file reading
    and writing is the job of the core libraries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为平台提供一种编程语言是一回事。这确实是个大事，特别是当它是大多数开发者已经熟悉的语言时。但程序员们也希望拥有标准的实用工具函数，这样他们就不需要每次编写应用程序时重新发明轮子。一种编程语言让你能够编码逻辑（如条件语句、循环、方程式）。但像数据结构、网络或文件读写这样的更高层次的功能，是核心库的职责。
- en: Although the Android team adopted the Java language, they were explicitly not
    using the implementation of the libraries that shipped with Sun Microsystems’^([1](#c09-footnote-1))
    version of Java, called the Java Development Kit (JDK). The JDK comes with, say,
    an `ArrayList` class that implements a simple data structure that is common in
    programming. But Android didn’t use those classes, so they needed to provide their
    own.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Android 团队采用了 Java 语言，但他们明确没有使用与 Sun Microsystems 提供的 Java 版本（即 Java 开发工具包
    JDK）一起发布的库实现。JDK 包含了比如 `ArrayList` 类，这个类实现了一种在编程中常见的简单数据结构。但是 Android 没有使用这些类，所以他们需要提供自己的实现。
- en: Bob Lee and the Java Libraries
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bob Lee 和 Java 库
- en: 'When Android needed standard Java libraries, they brought in a Java expert
    working elsewhere at Google: Bob Lee.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Android 需要标准的 Java 库时，他们引入了一位在谷歌其他地方工作的 Java 专家：Bob Lee。
- en: Bob (also known as “Crazy Bob”^([2](#c09-footnote-2))) started programming in
    middle school, in the early 90s, mostly because he wanted to write video games.
    He soon picked up various programming languages and in high school moved on from
    video games to building a website for a nearby college. The college was so impressed
    that they gave him a full ride to the school to continue that effort. But college
    didn’t suit Bob, so he left and started consulting, along with writing books and
    popular Java libraries, which eventually landed him a job at Google in 2004.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Bob（也被称为“疯狂的 Bob”^([2](#c09-footnote-2))) 在 90 年代初中时开始编程，主要是因为他想编写视频游戏。他很快掌握了多种编程语言，并在高中时从制作视频游戏转向为附近的一所大学建立网站。该大学对他的作品印象深刻，给了他全额奖学金让他继续从事这个工作。但大学不适合
    Bob，他离开后开始做咨询工作，同时写书和流行的 Java 库，最终于 2004 年获得了谷歌的工作。
- en: Bob wanted to work on mobile technology, so after a couple years on the Ads
    team, he switched to the Android team, starting in March of 2007.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Bob 想要从事移动技术工作，因此在广告团队工作了几年后，他于 2007 年 3 月转到了 Android 团队。
- en: When Bob joined, Android was still using the JamVM runtime, before the Dalvik
    runtime came online. The *core libraries* were basically a collection of random
    utilities that people wrote for one-off purposes. “They were totally incompatible.
    Somebody would need something and they would just implement what they needed.
    They kind of resembled the Java libraries, but they were obviously missing a lot.”
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Bob 加入时，Android 仍在使用 JamVM 运行时，直到 Dalvik 运行时上线。*核心库*基本上是一堆人为了单次使用目的编写的随机实用工具。“它们完全不兼容。某个人需要某个功能，就会实现自己需要的部分。它们看起来有点像
    Java 库，但显然缺少了很多。”
- en: Fortunately, there were a couple existing options for more standard libraries,
    so Bob and the team evaluated them. “We looked at GNU Classpath, but we ended
    up going with Apache Harmony.^([3](#c09-footnote-3)) There was a lot of stuff
    that wasn’t great about it, so it was a matter of rewriting parts of it, and we
    would contribute those back. Like we rewrote `ThreadLocal` [and] `Runtime.exec()`.
    Rewriting that stuff and merging it back was a big part of it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，已有一些现成的标准库选项，因此 Bob 和团队对它们进行了评估。“我们看过 GNU Classpath，但最后选择了 Apache Harmony^([3](#c09-footnote-3))。它有很多不太好的地方，所以我们需要重写其中的一部分，然后把它们贡献回去。比如我们重写了
    `ThreadLocal` [和] `Runtime.exec()`。重写这些东西并合并回去是其中很重要的一部分。”
- en: “There were also APIs added to the core Android platform by other engineers
    on the team just because it seemed like a good idea at the time. If someone thought
    something might be potentially useful, they would put it in there. And there was
    some really bad stuff.”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “还有一些由团队中的其他工程师添加到 Android 核心平台的 API，只是因为当时看起来是个好主意。如果有人认为某个功能可能有用，他们就会把它加进去。结果有一些真的很糟糕的东西。”
- en: An example of this was `WeakHashMap`, a data structure class that developers
    use in memory-constrained situations, like Android at that time. It offers an
    advantage over the traditional `HashMap` class by automatically cleaning up (garbage-collecting)
    objects which are no longer used. Like a Roomba for your memory heap, cleaning
    up the trash you leave behind. Note that “weak” here is taken from the term “weak
    reference,” which is an object that can be garbage-collected when it is no longer
    in use.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是`WeakHashMap`，这是一种开发人员在内存受限的情况下使用的数据结构类，就像当时的Android一样。它比传统的`HashMap`类更有优势，因为它会自动清理（垃圾回收）不再使用的对象。就像为内存堆清理垃圾的Roomba，清理你遗留下来的垃圾。请注意，这里“弱”（weak）一词来源于“弱引用”这个术语，指的是当对象不再使用时，可以被垃圾回收的对象。
- en: Joe Onorato, on the framework team, added the `WeakHashMap` API. Sort of. He
    said, “I had this library that depended on `WeakHashMap`, and I needed to link^([4](#c09-footnote-4))
    it, so I created a class called `WeakHashMap`.” The problem was, Joe’s class wasn’t
    a “weak” `HashMap`, it was just a standard `HashMap`. It subclassed `HashMap`
    and didn’t add any of the logic that would have made it weak. Sometime later,
    Jeff Hamilton (also on the framework team) was writing code that needed the functionality
    of `WeakHashMap`. He saw that the class existed in the core libraries, used it,
    and had memory problems that required a lot of debugging until Jeff discovered
    that Joe’s `WeakHashMap` class wasn’t cleaning up memory at all. It was just a
    regular `HashMap`, which didn’t do the garbage-collecting work that Jeff expected.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 框架团队的Joe Onorato添加了`WeakHashMap` API。算是吧。他说：“我有一个库依赖于`WeakHashMap`，我需要将它链接^([4](#c09-footnote-4))，所以我创建了一个名为`WeakHashMap`的类。”问题在于，Joe的类并不是一个“弱”`HashMap`，它只是一个标准的`HashMap`。它继承了`HashMap`，但没有添加任何能让它变得“弱”的逻辑。稍后，框架团队的Jeff
    Hamilton正在编写需要`WeakHashMap`功能的代码。他发现这个类已经存在于核心库中，使用它时遇到了内存问题，进行了大量的调试，直到Jeff发现Joe的`WeakHashMap`类根本没有清理内存。它只是一个普通的`HashMap`，并没有执行Jeff预期的垃圾回收工作。
- en: Bob continued, “I know the Android APIs could be a lot better . . . but they
    could also have been so much worse.” Much of Bob’s time was spent preventing these
    APIs from becoming public. “I would find and just remove all that stuff from the
    API. If there was a class that was only used by one app, I would move it back
    out into that app—if you weren’t going to use it [from multiple apps], it didn’t
    belong in the framework libraries.”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Bob继续说道：“我知道Android的API本来可以做得更好……但它们也可能做得更糟。”Bob的大部分时间都用来防止这些API公开。“我会找到并删除所有这些东西。如果有一个类只被一个应用使用，我会把它移回到那个应用中——如果你不打算在多个应用中使用它，它就不应该出现在框架库里。”
- en: As part of making the core libraries work, Bob implemented significant networking
    functionality, fixing bugs along the way. One of those problems prevented every
    phone from starting up at all. “The first time you started a phone, it had to
    connect to a time server, but the time [on the device] was set to sometime in
    2004.” The phone would try to connect to the server through a secure connection,
    which requires a security certificate on the server. But the initial time on the
    phone was before the time that the certificate was issued on the server, so the
    connection would fail and the phone wouldn’t boot. Bob’s fix was to catch that
    failure condition and set the initial time on the phone to the day that he fixed
    the bug.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在使核心库正常工作的过程中，Bob实现了重要的网络功能，并修复了其中的错误。一个问题导致每台手机根本无法启动。“第一次启动手机时，它必须连接到时间服务器，但设备的时间设置在2004年某个时候。”手机会尝试通过安全连接连接到服务器，这需要服务器上的安全证书。但是手机上的初始时间早于证书在服务器上发布的时间，因此连接会失败，手机无法启动。Bob的解决方案是捕获这个失败条件，并将手机上的初始时间设置为他修复这个bug的那一天。
- en: Bob also tracked down a networking problem that was specific to mobile data.
    Android phones were experiencing severe outages that seemed like a problem with
    bad carrier network infrastructure.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Bob还解决了一个仅在移动数据下出现的网络问题。Android手机出现了严重的断网问题，看起来像是运营商网络基础设施的问题。
- en: Networking protocols have built in fault-tolerance, because networks can go
    down, or packets of data can get lost or delayed. Android was using the *congestion
    window* approach in Linux that responds to an outage by halving the size of the
    data packet, and halving it again, and again, until it gets a response from the
    server that packets are going through. Then it doubles the packet sizes each time
    they succeed until packets are eventually back to the full size.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 网络协议内置了容错机制，因为网络可能会中断，或者数据包可能会丢失或延迟。Android 使用了 Linux 中的*拥塞窗口*方法，该方法通过将数据包大小减半，然后再减半，一次次减小，直到从服务器获得数据包通过的响应。然后，它会在每次成功后将数据包大小翻倍，直到数据包最终恢复到原始大小。
- en: This algorithm is reasonable for regular internet traffic, where latency (the
    delay between sending a message and receiving a response) is measured in milliseconds
    and outages are infrequent. But it doesn’t work well for cellular data, where
    it’s common to have high latencies of a second or more, and where brief outages
    are common. Bob did some profiling and investigation to track down the problem.
    After failures decreased the packet size, “it would double the size of the buffer
    every time it had a successful packet. But with high latencies over mobile networks,
    you had one or two second round trip times over 2.5G or 3G back then. So it was
    only scaling up the buffer every time it made a successful round trip. It’d take
    like 30 seconds to scale the buffer back up after you had some kind of outage.”
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法对于常规的互联网流量是合理的，在互联网中，延迟（发送消息和接收响应之间的延迟）通常以毫秒为单位衡量，且中断比较少见。但它对蜂窝数据并不适用，因为蜂窝网络常常有一秒或更长时间的高延迟，而且短暂的中断也很常见。鲍勃进行了一些性能分析和调查，找到了问题所在。在故障发生后，数据包大小减少了，“每当数据包成功传输时，它会将缓冲区大小翻倍。但在移动网络上，由于延迟较高，2.5G
    或 3G 网络的往返时间会达到一到两秒。所以，它只是每次成功往返时才增大缓冲区大小。在你遇到某种中断后，重新调整缓冲区大小可能需要大约 30 秒。”
- en: Jesse Wilson and the Terrible APIs
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 杰西·威尔逊与糟糕的 API
- en: We spent a long time taking these APIs and re-implementing them from scratch
    to be good, while maintaining their existing terrible APIs.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们花了很长时间将这些 API 从头重新实现，以使它们变得更加优秀，同时保持它们原本糟糕的 API。
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Jesse Wilson
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: —杰西·威尔逊
- en: Bob worked by himself on core libraries for a while, but eventually, after 1.0
    shipped, he got some help. Josh Bloch^([5](#c09-footnote-5)) joined his team in
    late 2008, and Jesse Wilson joined in early 2009.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 鲍勃曾一度独自工作于核心库，但最终，在 1.0 版本发布后，他得到了帮助。乔希·布洛赫（Josh Bloch）在 2008 年底加入了他的团队，杰西·威尔逊则在
    2009 年初加入。
- en: Jesse Wilson was working on the Google AdWords product with Bob before Bob joined
    Android. “Bob got out of AdWords to go work on Android when Android did not seem
    like a responsible job decision. I followed him there, more to work with Bob than
    to work on Android.”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 杰西·威尔逊（Jesse Wilson）在鲍勃（Bob）加入 Android 之前一直在与他一起工作于 Google AdWords 产品。“当 Android
    看起来不像是一个负责任的职业选择时，鲍勃从 AdWords 转去 Android。我跟随他去那里，更多的是为了和鲍勃一起工作，而不是为了做 Android。”
- en: Bob and Jesse would eventually leave Android and Google. Bob became the CTO
    of Square. Jesse followed Bob once again and joined Square.^([6](#c09-footnote-6))
    “He’s got something on me, I guess.”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，鲍勃和杰西离开了 Android 和 Google。鲍勃成为了 Square 的首席技术官（CTO）。杰西再次跟随鲍勃，加入了 Square。^([6](#c09-footnote-6))
    “我想他掌握了我的把柄。”
- en: 'Jesse described life on the core libraries team: “In the first year of Android,
    people just brought in whatever libraries they thought they needed, and put them
    in the public APIs. We have something called kXML, which is the pull parser. We
    have the org.json JSON library. The ApacheHttp client. We basically have 2006-vintage
    snapshots of all of these libraries, which have since gone on to introduce ten
    thousand features that make them too big for Android. Their current versions are
    incompatible in big, meaningful ways. If you’re shipping a web server, you can
    control which version of the thing you’re including; if you change it in an incompatible
    way, your client just changes it. Android’s versioning is such that if we change
    an API in, say, the JSON library, even if the new API is better, the apps don’t
    get to opt in or out of the API change, and so you have to be 100 percent backwards-compatible.
    So we spent a long time taking these APIs and re-implementing them from scratch
    to be good, while maintaining their existing terrible APIs.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Jesse 描述了核心库团队的工作：“在 Android 的第一年，大家只是带进来他们认为需要的库，并把它们放到公共 API 中。我们有一个叫做 kXML
    的东西，它是一个拉取解析器。我们有 org.json JSON 库。还有 ApacheHttp 客户端。我们基本上拥有这些库的 2006 年版本快照，它们后来加入了成千上万的特性，使它们变得过于庞大，无法适应
    Android。它们的当前版本在许多重大方面不兼容。如果你在发布一个 Web 服务器，你可以控制你包含的版本；如果你做了不兼容的更改，客户端只需要做相应的修改。Android
    的版本控制方式是，如果我们改变了一个 API，比如 JSON 库中的 API，即使新的 API 更好，应用也不能选择是否使用这个更改，所以必须确保 100%
    向后兼容。因此，我们花了很长时间将这些 API 重新实现一遍，既要保证它们更好，又要保持现有的糟糕 API。”
- en: “We inherited all the Apache Harmony code, and Apache Harmony was never really
    a shipping product. It was much more of an inventory to build a shipping product
    with. There was so much work to take something that was half-baked and make it
    correct.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “我们继承了所有的 Apache Harmony 代码，而 Apache Harmony 从来都不是一个真正发布的产品。它更多的是一个可以用来构建发布产品的清单。将一些半成品的东西做成正确的，花费了很多工作。”
- en: “It was a lot of re-implement-and-optimize. The org.json code in the standard
    library, 100 percent of it was brand new. One day Dan Morrill came to me and said,
    ‘Hey, heads up, the open source library for the JSON library we’re using has this,
    ‘The Software shall be used for Good, not Evil’ clause^([7](#c09-footnote-7))
    in it. That means it’s not open source because open source has no discrimination
    against any endeavor.’ So I got to go and re-implement it.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “这其实是大量的重新实现和优化。标准库中的 org.json 代码，100% 是全新的。一天，Dan Morrill 找到我，说，‘嘿，提醒一下，我们正在使用的
    JSON 库的开源库中有一个条款，‘软件应仅用于善良的目的，不得用于邪恶’^([7](#c09-footnote-7))。这意味着它不是开源的，因为开源没有针对任何目的的歧视。’所以我得去重新实现它。”
