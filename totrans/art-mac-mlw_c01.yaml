- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Infection Vectors
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 感染途径
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: A malware’s infection vector is the means by which it gains access to a system.
    Throughout the years, malware authors have relied on mechanisms ranging from simple
    social engineering tricks to advanced, remote zero-day exploits to infect Macs.
    In this chapter, we’ll discuss many of the most common techniques used by Mac
    malware authors.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件的感染途径是它获取系统访问权限的方式。多年来，恶意软件作者依赖的手段从简单的社会工程学技巧到先进的远程零日漏洞利用不等，以感染 Mac。在本章中，我们将讨论许多
    Mac 恶意软件作者使用的最常见技术。
- en: By far the most popular method of infecting Macs with malicious code involves
    tricking users into infecting themselves, generally by directly downloading and
    running the malicious code. (By contrast, techniques like remote exploitation
    are far less prevalent.) To achieve this, attackers often make use of common social
    engineering attacks, including tech-support scams, disseminating fake updates,
    fake applications, trojanized applications, and infected pirated applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，最流行的恶意代码感染 Mac 的方法是通过欺骗用户让其自行感染，通常是直接下载并运行恶意代码。（相比之下，远程利用等技术则少得多。）为了实现这一目标，攻击者通常会利用常见的社会工程学攻击，包括技术支持诈骗、散布虚假的更新、虚假应用程序、木马化的应用程序以及感染的盗版应用程序。
- en: Apple, of course, is keenly aware of macOS infection trends and the fact that
    the majority of such infections require explicit user interaction in order to
    succeed. In response, they have reactively introduced various operating system-level
    security mechanisms aimed at protecting Mac users. Let’s first briefly look at
    these *anti-infection* protection mechanisms before we dive into the details of
    specific macOS infection vectors.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，苹果公司非常关注 macOS 感染趋势，以及大多数此类感染需要明确的用户交互才能成功这一事实。作为回应，他们主动引入了多种操作系统级别的安全机制，旨在保护
    Mac 用户。让我们首先简要了解这些*抗感染*保护机制，然后再深入探讨具体的 macOS 感染途径。
- en: Mac Protections
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac 保护机制
- en: Over time, Apple has sought to shore up the security of macOS, largely in an
    attempt to thwart user-assisted infection vectors. The oldest of these protection
    mechanisms, File Quarantine, was introduced in OS X Leopard (10.5). When a user
    first opens a downloaded item, File Quarantine provides a warning to the user
    that asks for explicit confirmation before allowing the file to execute; Apple’s
    documentation has advised users to click Cancel if they have doubts about the
    safety of a file.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，苹果一直在努力加强 macOS 的安全性，主要是为了防止用户协助的感染途径。这些保护机制中最古老的是文件隔离（File Quarantine），它在
    OS X Leopard (10.5) 中首次引入。当用户首次打开一个下载的项时，文件隔离会向用户发出警告，要求明确确认才能允许文件执行；苹果的文档建议用户如果对文件的安全性有所怀疑，应点击取消。
- en: To combat evolving malware infection vectors, Apple introduced Gatekeeper in
    OS X Mountain Lion (10.8). Built atop File Quarantine, Gatekeeper checks the code-signing
    information of downloaded items and blocks those that do not adhere to system
    policies. (For example, it checks that items are signed with a valid developer
    ID.) For a technical deep dive into Gatekeeper’s internals as well as some of
    its shortcomings, see my talk “Gatekeeper Exposed.”^([1](#c01-endnote-1))
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对不断演化的恶意软件感染途径，苹果在 OS X Mountain Lion (10.8) 中引入了 Gatekeeper。Gatekeeper 基于文件隔离功能（File
    Quarantine）构建，检查下载项的代码签名信息，并阻止那些不符合系统政策的项。（例如，它检查项是否使用有效的开发者 ID 签名。）想深入了解 Gatekeeper
    的内部机制以及它的一些不足之处，请参见我的演讲《Gatekeeper Exposed》。^([1](#c01-endnote-1))
- en: Most recently, macOS Catalina (10.15) took yet another step at combatting user-assisted
    infections with the introduction of *application notarization* requirements. These
    requirements ensure that Apple has scanned and approved all software before it
    is allowed to run.^([2](#c01-endnote-2)) Though an excellent step at combatting
    basic macOS infection vectors, notarization is not infallible; malware authors
    have been quick to adapt. One simple notarization bypass leverages the fact that
    macOS still (as of Big Sur) allows unnotarized code to execute, albeit via manual
    user assistance. Malware such as older versions of Shlayer abuse this fact by
    simply instructing the user how to run the malicious unnotarized payload ([Figure
    1-1](#figure1-1)).^([3](#c01-endnote-3))
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，macOS Catalina（10.15）通过引入*应用程序公证*要求，迈出了与用户辅助感染作斗争的又一步。这些要求确保苹果在允许软件运行之前扫描并批准所有软件^([2](#c01-endnote-2))。尽管这是应对基础macOS感染途径的一个优秀举措，但公证并非万无一失；恶意软件作者已迅速适应。一种简单的公证绕过方法利用了macOS仍然（截至Big
    Sur）允许未公证的代码执行这一事实，尽管这需要用户手动协助。像旧版本Shlayer这样的恶意软件通过简单地指导用户如何运行恶意的未公证载荷，来利用这一事实（[图1-1](#figure1-1)）^([3](#c01-endnote-3))。
- en: '![Webpage instructing user to 1) right-click the flashinstaller icon and press
    open and 2) click open on the pop-up to run the installer.](image_fi/501942c01/f01001.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![网页指导用户1) 右键点击flashinstaller图标并选择打开，2) 在弹出窗口中点击打开以运行安装程序。](image_fi/501942c01/f01001.png)'
- en: 'Figure 1-1: Instructions for a user-assisted notarization bypass (Shlayer)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-1：用户辅助的公证绕过说明（Shlayer）
- en: 'More recent versions of Shlayer are far more insidious. In some cases, its
    authors successfully tricked Apple into notarizing their malicious creations.^([4](#c01-endnote-4))
    Take a look at the output of macOS’s `spctl` tool, which here we use to display
    the code-signing information of Shlayer’s malicious application, *Installer.app*
    ([Listing 1-1](#listing1-1)):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Shlayer的较新版本要狡猾得多。在某些情况下，其作者成功地欺骗了苹果，让其对他们的恶意创作进行公证^([4](#c01-endnote-4))。请查看macOS的`spctl`工具输出，我们在这里用它来显示Shlayer恶意应用程序*Installer.app*的代码签名信息（[列表1-1](#listing1-1)）：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 1-1: Notarized malware (Shlayer)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 列表1-1：已公证的恶意软件（Shlayer）
- en: The `source` field confirms it was inadvertently notarized by Apple. In subsequent
    chapters, we will discuss code-signing concepts and tools capable of extracting
    such code-signing information.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`字段确认它被苹果误公证了。在后续章节中，我们将讨论代码签名的概念以及能够提取此类代码签名信息的工具。'
- en: Unfortunately, other malware has been mistakenly notarized by Apple as well.
    And yes, though Apple eventually realizes its mistakes and revokes the developer
    ID of said malware to rescind the notarization, often it’s too late.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，其他恶意软件也被苹果错误地公证了。是的，虽然苹果最终意识到自己的错误并撤销了该恶意软件的开发者ID以撤回公证，但通常为时已晚。
- en: 'While the user-assisted infection vectors described in this chapter have unfortunately
    proven successful in the past, the latest version of macOS may often succeed in
    thwarting them, largely due to notarization requirements. Still, such infection
    vectors remain relevant, as users on older versions of macOS continue to be vulnerable,
    or as attackers continue to sidestep, receive inadvertent approval for, or exploit
    vulnerabilities in Apple’s stringent notarizing requirements. For an example of
    the latter, see my blog post, “All Your Macs Are Belong To Us: bypassing macOS’s
    file quarantine, gatekeeper, and notarization requirements.”^([5](#c01-endnote-5))'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管本章所描述的用户辅助感染途径不幸地在过去成功过，但最新版本的macOS常常能够成功阻止这些途径，这主要得益于公证要求。然而，这些感染途径仍然相关，因为使用旧版macOS的用户依然易受攻击，或者攻击者继续绕过、获得无意批准，或利用苹果严格公证要求中的漏洞。有关后者的示例，请参见我的博客文章《All
    Your Macs Are Belong To Us: 绕过macOS的文件隔离、Gatekeeper和公证要求》^([5](#c01-endnote-5))。'
- en: Malicious Emails
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恶意电子邮件
- en: When it comes to user-assisted infection vectors, the first challenge malware
    authors face is how to get the malware in front of the user in the first place.
    One proven approach is via email. Though the majority of users will likely disregard
    malicious emails, some may open them. But of course, unless the email contains
    some sophisticated exploit, simply opening an email won’t lead to infection.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及用户辅助感染途径时，恶意软件作者面临的第一个挑战是如何让恶意软件首先出现在用户面前。一种经过验证的方法是通过电子邮件。尽管大多数用户可能会忽视恶意电子邮件，但有些人可能会打开它们。但当然，除非电子邮件包含一些复杂的漏洞利用，否则仅仅打开一封电子邮件是不会导致感染的。
- en: Generally, attackers either directly send malware as an email attachment or
    include a URL that eventually leads to malicious code. In the former case, the
    body of the email may contain instructions that attempt to compel the user to
    open and run the attached malware. As a malicious attachment may masquerade as
    a harmless document, a user may be duped into opening it and inadvertently infecting
    themselves.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，攻击者要么直接通过电子邮件附件发送恶意软件，要么包含一个最终会指向恶意代码的URL。在前一种情况下，电子邮件的正文可能包含指示，试图迫使用户打开并运行附件中的恶意软件。由于恶意附件可能伪装成无害的文档，用户可能会被误导打开它，从而不小心感染自己。
- en: In 2017, researchers discovered a new kind of Mac malware that was targeting
    users in a widespread email campaign. Dubbed Dok, the malware would arrive in
    an email purporting to address inconsistencies in the targeted user’s tax returns.
    If the user opened the attachment (*Dokument.zip*) they would find a file with
    a name and icon designed to hide the fact that in reality it was a malicious application.^([6](#c01-endnote-6))
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年，研究人员发现了一种新的Mac恶意软件，针对的是一个广泛的电子邮件攻击活动中的用户。该恶意软件名为Dok，它以一封声称要解决目标用户税务申报不一致的邮件形式到达。如果用户打开附件（*Dokument.zip*），他们会发现一个名称和图标设计用来掩盖它实际上是一个恶意应用程序的文件。^([6](#c01-endnote-6))
- en: As users and security tools often treat emails containing attachments with extra
    caution, malicious emails may instead include malicious links. Once opened, these
    links generally redirect to a malicious website that attempts to trick the user
    into downloading and running malicious code. In later sections in this chapter,
    we will cover various examples in which attackers used emails with malicious links
    as the initial step in a multi-step infection vector.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户和安全工具通常对包含附件的电子邮件保持高度警惕，恶意电子邮件可能会改用包含恶意链接的方式。一旦点击，这些链接通常会将用户重定向到一个恶意网站，试图诱使用户下载并运行恶意代码。在本章的后续部分，我们将介绍多个示例，其中攻击者利用包含恶意链接的电子邮件作为多步骤感染途径的初步手段。
- en: Fake Tech and Support
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假冒技术与支持
- en: Another excellent mechanism used to distribute malware is, of course, the internet.
    If you’re a Mac user, you’ve likely encountered malicious pop-ups as you’ve browsed
    the web. These pop-ups may originate from malicious ads on legitimate websites,
    hijacked or poisoned search results, or even unscrupulous websites that target
    unsuspecting users via *typosquatting*, a technique that involves registering
    malicious domains with names that match typos or variants of other popular sites.
    Still others may entice willing visitors with free content. More often than not,
    these pop-ups don’t install malicious files on their own; rather, they attempt
    to coerce users into infecting themselves. Often, this starts with a fake security
    alert or update. Let’s briefly look at an example of the former.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个分发恶意软件的优秀机制当然是互联网。如果你是Mac用户，你可能在浏览网页时遇到过恶意弹窗。这些弹窗可能来自合法网站上的恶意广告、劫持或中毒的搜索结果，甚至是通过*拼写劫持*（typosquatting）技术的无良网站，后者通过注册与其他热门网站名称相似的恶意域名来针对不知情的用户。还有一些弹窗通过提供免费的内容吸引愿意访问的用户。通常，这些弹窗并不会直接安装恶意文件；相反，它们试图迫使用户自己感染自己。通常，这种情况从虚假的安全警告或更新开始。我们来简要看看前者的一个例子。
- en: Homebrew, a popular package manager that facilitates the installation of software
    on macOS and Linux, is hosted at *brew.sh*. In 2020, cybercriminals typosquatted
    the domain *homebrew.sh* in the hopes that unsuspecting users would inadvertently
    visit this site instead. If they did, various prominently displayed pop-ups would
    proclaim the user’s system infected, saying it had been blocked “for security
    reasons” ([Figure 1-2](#figure1-2)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew，一个流行的包管理器，用于在macOS和Linux上安装软件，托管在*brew.sh*网站上。在2020年，网络犯罪分子通过域名*homebrew.sh*进行拼写劫持，试图让不知情的用户误访问该网站。如果用户访问了该站点，页面上会弹出各种显眼的提示，宣称用户的系统已被感染，并表示因“安全原因”被阻止访问（[图1-2](#figure1-2)）。
- en: '![Various fake security alerts pop up from visiting the Mac website. Each pop-up
    tells the user that the computer has been infected with Trojan Spyware and asks
    the user to call mac support.](image_fi/501942c01/f01002.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![来自访问Mac网站的各种假冒安全警告弹出窗口。每个弹窗都告诉用户，计算机已经感染了木马间谍软件，并要求用户拨打Mac支持电话。](image_fi/501942c01/f01002.png)'
- en: 'Figure 1-2: Fake security alerts (Shlayer)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-2：假冒的安全警告（Shlayer）
- en: Users who believed these alerts and called the supposed support number may have
    been coerced into installing malicious software, thus infecting their Macs. As
    Intego, a Mac security company, noted, this software would allow the attackers
    to “remotely access information on your computer and possibly compromise your
    system further.”^([7](#c01-endnote-7))
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那些相信这些警告并拨打了所谓支持号码的用户，可能被强迫安装恶意软件，从而感染了他们的 Mac。正如 Mac 安全公司 Intego 所指出的，这些软件允许攻击者“远程访问你计算机上的信息，并可能进一步危害你的系统。”^([7](#c01-endnote-7))
- en: Fake Updates
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假冒更新
- en: Attackers are also rather fond of abusing web-based pop-ups to display alerts
    for fake updates. You’ve likely come across modal browser pop-ups warning that
    your Adobe Flash Player is out of date. These pop-ups are usually malicious, linking
    to a download that, unsurprisingly, isn’t a legitimate Flash update but rather
    malicious software ([Figure 1-3](#figure1-3)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还非常喜欢利用基于网页的弹窗显示虚假的更新警告。你可能曾遇到过浏览器弹窗，警告你 Adobe Flash Player 已过期。这些弹窗通常是恶意的，链接到一个下载页面，令人不惊讶的是，这并非合法的
    Flash 更新，而是恶意软件（见[图 1-3](#figure1-3)）。
- en: '![Three pop-ups alert the user that Adobe Flash Player is out of date and that
    downloading Flash is required to continue through the website.](image_fi/501942c01/f01003.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![三个弹窗警告用户 Adobe Flash Player 已过期，且必须下载 Flash 才能继续浏览该网站。](image_fi/501942c01/f01003.png)'
- en: 'Figure 1-3: A fake Flash Player update (Shlayer)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-3：虚假的 Flash Player 更新（Shlayer）
- en: Unfortunately, many Mac users still fall for this type of attack, believing
    the update to be required and infecting themselves, generally with adware, in
    the process.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，许多 Mac 用户仍然容易上当，认为更新是必要的，从而在此过程中感染了自己，通常是广告软件。
- en: Fake Applications
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假冒应用程序
- en: Attackers are quite partial to targeting Mac users via fake applications. They’ll
    often attempt to trick the user into downloading and running a malicious application
    masquerading as something legitimate. Unlike trojanized applications (described
    later) that still provide the functionality of the original application so that
    nothing appears amiss, fake applications generally just execute a malicious payload
    and then exit. For example, Siggen targeted Mac users by impersonating the popular
    WhatsApp messaging application.^([8](#c01-endnote-8)) The attacker-controlled
    site *message-whatsapp.com* would deliver “a zip file with an application inside,”
    the security company Lookout explained in a tweet.^([9](#c01-endnote-9)) This
    downloaded ZIP archive, named *WhatsAppWeb.zip*, wasn’t the official WhatsApp
    application (surprise, surprise), but rather a malicious application named WhatsAppService.
    As the *message-whatsapp.com* site appeared legitimate ([Figure 1-4](#figure1-4)),
    the average user, failing to notice anything amiss, would download and run the
    fake application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者非常倾向于通过假冒应用程序来针对 Mac 用户。他们通常会试图欺骗用户下载并运行一个伪装成合法应用程序的恶意应用。与稍后会提到的木马化应用程序不同，假冒应用程序通常只是执行恶意负载然后退出，而不提供原应用的功能。因此，假冒应用程序通常没有任何异常。例如，Siggen
    就通过伪装成流行的 WhatsApp 消息应用来针对 Mac 用户。[（见[8](#c01-endnote-8)）]攻击者控制的网站 *message-whatsapp.com*
    会提供“一个包含应用程序的 zip 文件”，安全公司 Lookout 在推特中解释道[（见[9](#c01-endnote-9)）]。这个下载的 ZIP 文件，名为
    *WhatsAppWeb.zip*，并非官方的 WhatsApp 应用程序（出乎意料，对吧），而是一个名为 WhatsAppService 的恶意应用。由于
    *message-whatsapp.com* 网站看起来很合法（见[图 1-4](#figure1-4)），普通用户没有注意到任何异常，就会下载并运行这个假冒的应用程序。
- en: '![The malicious message-whatsapp home page has options for downloading whatsapp
    on phones (left side of screen) and downloading whatsapp on a Mac or Windows PC
    (right side), with respective links. The top of the webpage lists WhatsApp Web,
    Features, Download, Security, and FAQ links.](image_fi/501942c01/f01004.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![恶意信息 - WhatsApp 首页提供了下载 WhatsApp 到手机（屏幕左侧）和下载 WhatsApp 到 Mac 或 Windows PC（屏幕右侧）的选项，并附有相应的链接。网页顶部列出了
    WhatsApp Web、功能、下载、安全性和 FAQ 链接。](image_fi/501942c01/f01004.png)'
- en: 'Figure 1-4: The *message-whatsapp.com* homepage (Siggen)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-4：*message-whatsapp.com* 首页（Siggen）
- en: Trojanized Applications
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 木马化应用程序
- en: Imagine you’re an employee of a popular cryptocurrency exchange who has just
    received an email requesting feedback on a new cryptocurrency trading application,
    JMTTrader. The link in the email takes you to a legitimate-looking company website,
    which prompts you to download what claims to be both the source code and prebuilt
    binary of the new application ([Figure 1-5](#figure1-5)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你是一家流行加密货币交易所的员工，刚收到一封要求反馈新加密货币交易应用程序 JMTTrader 的电子邮件。邮件中的链接将你带到一个看起来合法的公司网站，网站上提示你下载声称是新应用程序的源代码和预编译二进制文件（[图
    1-5](#figure1-5)）。
- en: '![The JMT Trading homepage has a link to download it from GitHub on the left
    side, and a brief description of the application on the right side.](image_fi/501942c01/f01005.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![JMT Trading主页左侧有一个链接，可以从GitHub下载，右侧则是应用程序的简要描述。](image_fi/501942c01/f01005.png)'
- en: 'Figure 1-5: The JMTTrading homepage'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-5：JMTTrading 主页
- en: After you’ve downloaded, installed, and run the application, still nothing appears
    amiss; as expected, you’re presented with a list of cryptocurrency exchanges and
    may select one in order to begin trading ([Figure 1-6](#figure1-6)).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下载、安装并运行应用程序后，依然没有异常出现；如预期所示，你会看到一个加密货币交易所的列表，可以选择其中一个开始交易（[图 1-6](#figure1-6)）。
- en: '![The JMT Trading application contains nine boxes identifying various cryptocurrency
    exchanges with their respective websites, including BitStamp, Bitfinex, and KCoin.
    The option to show more exchanges is a clickable box at the bottom left of the
    screen.](image_fi/501942c01/f01006.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![JMT Trading应用程序包含九个框，列出了不同的加密货币交易所及其相应的网站，包括 BitStamp、Bitfinex 和 KCoin。屏幕左下方有一个可点击的框，用于显示更多交易所。](image_fi/501942c01/f01006.png)'
- en: 'Figure 1-6: A trojanized cryptocurrency trading application (Lazarus Group
    backdoor)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-6：一个被植入木马的加密货币交易应用程序（Lazarus Group 后门）
- en: Unfortunately, although the source code for the application was pristine, the
    prebuilt installer for the *JMTTrader.app* had been surreptitiously trojanized
    with a malicious backdoor. During the installation process, this backdoor installed
    its own backdoor. This specific attack has been attributed to the infamous Lazarus
    APT Group, who have employed the same rather sophisticated, multifaceted social
    engineering approach to infect Mac users since 2018\. For more details on this
    Lazarus Group attack, as well as their general propensity for this infection vector,
    see my blog post “[Pass the AppleJeus](https://objective-see.com/blog/blog_0x49.html).”^([10](#c01-endnote-10))
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，尽管该应用程序的源代码完好无损，但 *JMTTrader.app* 的预编译安装程序已被偷偷植入了一个恶意后门。在安装过程中，这个后门安装了它自己的后门。这个特定的攻击被归咎于臭名昭著的
    Lazarus APT Group，自2018年以来，他们一直采用这种相当复杂且多方面的社会工程方法来感染 Mac 用户。有关此 Lazarus Group
    攻击的更多细节，以及他们对这种感染途径的普遍倾向，请参阅我的博客文章 “[Pass the AppleJeus](https://objective-see.com/blog/blog_0x49.html).”^([10](#c01-endnote-10))
- en: Pirated and Cracked Applications
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盗版和破解应用程序
- en: A slightly more sophisticated attack, although one that still requires a high
    degree of user interaction, involves packaging malware into cracked or pirated
    applications. In this attack scenario, malware authors will first crack popular
    commercial software, such as Photoshop, removing the copyright or licensing restrictions.
    Then they’ll inject malware into the software package before distributing it to
    the unsuspecting public. Users who download and run the cracked applications will
    then become infected.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一种稍微复杂一些的攻击，虽然仍然需要用户进行高度互动，涉及将恶意软件打包进破解或盗版应用程序。在这种攻击场景中，恶意软件作者首先破解流行的商业软件，如
    Photoshop，去除版权或许可限制。然后，他们会将恶意软件注入到软件包中，再分发给毫不知情的公众。下载并运行破解应用程序的用户将感染恶意软件。
- en: For instance, in 2014, malware called iWorm spread via pirated versions of desirable
    OS X applications such as Adobe Photoshop and Microsoft Office that attackers
    had uploaded to the popular torrent site The Pirate Bay, shown in [Figure 1-7](#figure1-7).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在2014年，恶意软件 iWorm 通过盗版的受欢迎的 OS X 应用程序传播，如 Adobe Photoshop 和 Microsoft Office，这些应用程序被攻击者上传到流行的
    BT 网站 The Pirate Bay，如[图 1-7](#figure1-7)所示。
- en: '![Pirate Bay site listing pirated versions of Adobe Photoshop, Parallels, and
    Microsoft Office for Mac.](image_fi/501942c01/f01007.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Pirate Bay 网站列出了盗版版本的 Adobe Photoshop、Parallels 和 Microsoft Office for Mac。](image_fi/501942c01/f01007.png)'
- en: 'Figure 1-7: Pirated applications (iWorm)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-7：盗版应用程序（iWorm）
- en: 'Users who installed these applications would indeed avoid paying for the software,
    but at the cost of an insidious infection. For more details on how iWorm persistently
    infected Mac users, see “[Invading the core: iWorm’s infection vector and persistence
    mechanism](https://www.virusbulletin.com/uploads/pdf/magazine/2014/vb201410-iWorm.pdf).”^([11](#c01-endnote-11))'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了这些应用程序的用户确实避免了为软件付费，但代价是潜伏的感染。有关 iWorm 如何持久感染 Mac 用户的更多详情，请参见“[侵入核心：iWorm
    的感染途径和持久机制](https://www.virusbulletin.com/uploads/pdf/magazine/2014/vb201410-iWorm.pdf)”^([11](#c01-endnote-11))
- en: More recently, attackers distributed malware, known variously as BirdMiner and
    LoudMiner, via pirated applications on the VST Crack website. Thomas Reed, a well-known
    Mac malware analyst, noted that BirdMiner had been found in a cracked installer
    for the high-end music production software Ableton Live.^([12](#c01-endnote-12))
    Moreover, the antivirus company ESET uncovered almost 100 other pirated applications
    related to digital audio and virtual studio technology that contained the BirdMiner
    malware.^([13](#c01-endnote-13)) Any user who downloaded and installed these pirated
    applications would infect their system with the malware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，攻击者通过 VST Crack 网站分发恶意软件，分别称为 BirdMiner 和 LoudMiner。这些恶意软件通过盗版应用程序传播。著名的
    Mac 恶意软件分析师 Thomas Reed 指出，BirdMiner 被发现在一个破解的高端音乐制作软件 Ableton Live 安装程序中。^([12](#c01-endnote-12))
    此外，杀毒公司 ESET 发现了近 100 个与数字音频和虚拟工作室技术相关的盗版应用程序，这些应用程序包含 BirdMiner 恶意软件。^([13](#c01-endnote-13))
    任何下载并安装这些盗版应用程序的用户都会使他们的系统感染该恶意软件。
- en: Custom URL Schemes
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 URL 方案
- en: Malware authors are a wily and creative bunch. As such, they often creatively
    abuse legitimate macOS functionality in order to infect users. The WindTail malware
    is an instructive example of this.^([14](#c01-endnote-14))
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意软件作者是非常狡猾且富有创意的一群人。因此，他们常常巧妙地滥用合法的 macOS 功能来感染用户。WindTail 恶意软件便是一个具有教育意义的典型例子。^([14](#c01-endnote-14))
- en: WindTail infected Mac users by abusing various features of macOS, including
    Safari’s automatic opening of files deemed safe and the operating system’s registration
    of custom URL schemes. A *custom URL scheme* is a feature that one application
    can use to launch another. To infect Mac users, the malware authors would first
    coerce targets to visit a malicious web page, which would automatically download
    a ZIP archive containing the malware. If the target was using Safari, the browser
    would extract the archive automatically thanks to its Open “safe” files option,
    which is enabled by default ([Figure 1-8](#figure1-8)).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: WindTail 通过滥用 macOS 的各种功能感染 Mac 用户，包括 Safari 自动打开被认为是安全的文件和操作系统对自定义 URL 方案的注册。*自定义
    URL 方案*是一项功能，允许一个应用程序启动另一个应用程序。为了感染 Mac 用户，恶意软件作者首先诱使目标访问一个恶意网页，该网页会自动下载包含恶意软件的
    ZIP 压缩包。如果目标使用 Safari，浏览器会由于启用了默认的“下载后打开安全文件”选项，自动解压该压缩包（见[图 1-8](#figure1-8)）。
- en: '![Safari’s General settings tab, with options to open Safari with specific
    windows, set the home page, remove history items and downloaded list items after
    a specified amount of time, save downloaded files to a specific folder, and open
    “safe” files after downloading.](image_fi/501942c01/f01008.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Safari 的常规设置选项卡，提供在特定窗口中打开 Safari、设置主页、在指定时间后删除历史项和下载项、将下载的文件保存到特定文件夹，以及下载后打开“安全”文件的选项。](image_fi/501942c01/f01008.png)'
- en: 'Figure 1-8: Safari’s Open “safe” files after downloading feature'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-8：Safari 的下载后打开“安全”文件功能
- en: This archive extraction is important, as macOS will automatically process any
    application as soon as it is saved to disk, which happens when it is extracted
    from an archive. This processing includes registering the application as a URL
    handler if the application supports any custom URL schemes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该压缩包的解压过程非常重要，因为 macOS 会在任何应用程序保存到磁盘后自动处理它，而解压自压缩包时便会发生这一过程。如果应用程序支持自定义 URL
    方案，系统会将其注册为 URL 处理程序。
- en: 'To determine if an application supports custom URL schemes, you can manually
    examine its *Info.plist*, a file that contains metadata and configuration information
    about the application. An examination of WindTail’s *Info.plist* reveals that
    it supports a custom URL scheme: `openurl2622007` ([Listing 1-2](#listing1-2)):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定一个应用程序是否支持自定义 URL 方案，您可以手动检查其 *Info.plist* 文件，该文件包含有关应用程序的元数据和配置信息。检查 WindTail
    的 *Info.plist* 文件会发现它支持一个自定义 URL 方案：`openurl2622007`（见[列表 1-2](#listing1-2)）：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 1-2: An *Info.plist* file, containing a custom URL scheme `openurl2622007`
    (WindTail)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-2：一个包含自定义 URL 方案 `openurl2622007`（WindTail）的*Info.plist* 文件
- en: 'Specifically note the presence of the `CFBundleURLTypes` array, which holds
    a list of URL schemes supported by WindTail. Within this list, we find a single
    entry describing the URL scheme, which includes a `CFBundleURLSchemes` array with
    the supported scheme: `openurl2622007`. After Safari automatically extracts the
    application, the macOS launch services daemon (`lsd`) will parse the application,
    extract any custom URL schemes, and register them in the launch services database.
    This database, *com.apple.LaunchServices-231-v2.csstore*, holds information such
    as application-to-URL scheme mappings. You can passively observe the daemon’s
    file actions via a file monitor such as macOS’s `fs_usage` ([Listing 1-3](#listing1-3)):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 特别注意 `CFBundleURLTypes` 数组的存在，该数组包含 WindTail 支持的 URL 方案列表。在这个列表中，我们找到一个条目描述了
    URL 方案，其中包括一个 `CFBundleURLSchemes` 数组，包含支持的方案：`openurl2622007`。在 Safari 自动解压应用程序后，macOS
    启动服务守护进程（`lsd`）会解析应用程序，提取任何自定义 URL 方案，并将它们注册到启动服务数据库中。该数据库 *com.apple.LaunchServices-231-v2.csstore*
    存储了诸如应用程序与 URL 方案映射等信息。您可以通过文件监控工具，如 macOS 的 `fs_usage`，被动地观察守护进程的文件操作（[清单 1-3](#listing1-3)）：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 1-3: Observing the launch services daemon (`lsd`) file I/O events'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-3：观察启动服务守护进程（`lsd`）的文件 I/O 事件
- en: 'In this output, you can see macOS’s built-in file monitor (`fs_usage`) capturing
    the launch services daemon (`lsd`), opening and parsing the malicious application,
    and accessing the launch services database (*com.apple.LaunchServices-231-v2.csstore*).
    Following this, if we print out the contents of the database via the `lsregister`
    command, we can see that a new entry now maps the malicious application, *Final_Presentation.app*,
    to the `openurl2622007` custom URL scheme ([Listing 1-4](#listing1-4)):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中，您可以看到 macOS 内置的文件监控工具（`fs_usage`）捕获启动服务守护进程（`lsd`），打开并解析恶意应用程序，并访问启动服务数据库（*com.apple.LaunchServices-231-v2.csstore*）。接下来，如果我们通过
    `lsregister` 命令打印出数据库内容，可以看到一个新条目将恶意应用程序 *Final_Presentation.app* 映射到 `openurl2622007`
    自定义 URL 方案（[清单 1-4](#listing1-4)）：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 1-4: WindTail (*Final_Presentation.app*), now registered as a custom
    URL handler'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-4：WindTail（*Final_Presentation.app*），现在作为自定义 URL 处理程序注册
- en: Now that the operating system has automatically registered the malware as the
    handler for the custom URL scheme `openurl2622007`, it can be launched directly
    from the malicious website.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在操作系统已自动将恶意软件注册为 `openurl2622007` 自定义 URL 方案的处理程序，它可以直接从恶意网站启动。
- en: 'The proof-of-concept code in [Listing 1-5](#listing1-5) wholly mimics how WindTail
    would infect users once they visited its malicious site:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[清单 1-5](#listing1-5) 中的概念验证代码完全模仿了 WindTail 一旦用户访问其恶意网站后如何感染用户：'
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 1-5: Downloading and launching WindTail via Safari (a proof of concept)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-5：通过 Safari 下载并启动 WindTail（一个概念验证）
- en: On page load 1, this JavaScript code executes a programmatic click 2 to coerce
    Safari into automatically downloading a ZIP archive containing a malicious application
    with a custom URL scheme. Once downloaded, Safari will automatically extract the
    archive, triggering the registration of the custom URL scheme. Then, via the `location.replace`
    API, the exploit code makes a request to the (newly registered) custom URL scheme
    3, which triggers the launching of the malicious application!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面加载 1 时，JavaScript 代码执行了一个程序化点击 2，强制 Safari 自动下载包含恶意应用程序的 ZIP 存档，该应用程序具有自定义
    URL 方案。下载完成后，Safari 会自动解压存档，触发自定义 URL 方案的注册。然后，通过 `location.replace` API，漏洞代码会向（新注册的）自定义
    URL 方案 3 发出请求，从而触发恶意应用程序的启动！
- en: Luckily for users, Safari and other browsers will display an alert notifying
    them that the web page is attempting to launch an application. Moreover, macOS
    may generate a second alert as the application actually launches. But since the
    attacker can name the application something innocuous (like *Final_Presentation*,
    as shown in [Figure 1-9](#figure1-9)), the average user may be tricked into clicking
    Allow and Open, thus infecting themselves.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户来说，幸运的是，Safari 和其他浏览器会显示一个警告，通知用户网页正在尝试启动一个应用程序。此外，macOS 可能会在应用程序实际启动时生成第二个警告。但由于攻击者可以将应用程序命名为某个无害的名称（例如*Final_Presentation*，如[图
    1-9](#figure1-9)所示），普通用户可能会被诱骗点击“允许”和“打开”，从而感染自己。
- en: '![On opening OSX.WindTail.A Demo, a browser warning pops up asking, “Do you
    want to allow this page to open ‘Final_Presentation’?” with options to Cancel
    or Allow.](image_fi/501942c01/f01009.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![打开 OSX.WindTail.A 演示时，浏览器警告弹出，询问“是否允许此页面打开‘Final_Presentation’？”并提供取消或允许选项。](image_fi/501942c01/f01009.png)'
- en: 'Figure 1-9: A browser warning . . . but is it enough?'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-9：浏览器警告……但这够吗？
- en: Office Macros
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Office 宏
- en: Although they are relatively unsophisticated, malicious documents containing
    Microsoft Office macros have become a popular method of infecting Mac users. *Macros*
    are simply commands that can be directly embedded into an Office document. Users
    can embed macros in Office documents for a variety of legitimate reasons, such
    as to automate common tasks. But malware authors can also abuse them to add malicious
    code to otherwise benign files. As macros are a Microsoft technology, they luckily
    remain unsupported in Apple’s suite of productivity tools (which includes Pages
    and Notes). But as macOS makes continued inroads into the enterprise, the popularity
    of Microsoft’s Office tool suite on macOS has surged as well. Hackers and malware
    authors are cognizant of this trend and thus macro-based attacks targeting Apple
    users are on the rise. For instance, the Lazarus APT Group launched a macro-based
    attack targeting Mac users in 2019.^([15](#c01-endnote-15))
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它们相对不复杂，但包含 Microsoft Office 宏的恶意文档已经成为感染 Mac 用户的一种流行手段。*宏*只是可以直接嵌入到 Office
    文档中的命令。用户可以出于多种合法原因在 Office 文档中嵌入宏，比如自动化常见任务。但是，恶意软件作者也可以滥用它们，将恶意代码添加到原本无害的文件中。由于宏是微软的技术，它们幸运地在苹果的生产力工具套件中（包括
    Pages 和 Notes）没有得到支持。然而，随着 macOS 在企业中的持续渗透，Microsoft Office 套件在 macOS 上的普及也急剧上升。黑客和恶意软件作者都意识到这一趋势，因此针对苹果用户的基于宏的攻击也在增加。例如，Lazarus
    APT 组织在 2019 年发起了针对 Mac 用户的基于宏的攻击。^([15](#c01-endnote-15))
- en: For macro-based attacks to succeed, a user must open an infected Microsoft Office
    document in a Microsoft Office application, such as Word, and click the Enable
    Macros prompt ([Figure 1-10](#figure1-10)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使基于宏的攻击成功，用户必须在 Microsoft Office 应用程序中打开一个感染了的 Microsoft Office 文档（如 Word），并点击启用宏提示框（[图
    1-10](#figure1-10)）。
- en: '![Upon opening a document containing macros, Microsoft Office will launch a
    pop-up warning the user that macros might contain viruses, and confirming that
    the user would like to Enable Macros, Do Not Open, or Disable Macros.](image_fi/501942c01/f01010.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![当打开一个包含宏的文档时，Microsoft Office 会弹出警告，告知用户宏可能包含病毒，并确认用户是否希望启用宏、不要打开或禁用宏。](image_fi/501942c01/f01010.png)'
- en: 'Figure 1-10: Microsoft Word’s macro warning'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-10：Microsoft Word 宏警告
- en: Usually written in Visual Basic for Applications (VBA), macro code generally
    invokes Microsoft APIs such as `AutoOpen` and `Document_Open` to ensure its malicious
    code will automatically execute once the document is opened and the user has enabled
    macros.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 宏代码通常是用 Visual Basic for Applications (VBA) 编写的，一般会调用微软的 API，如 `AutoOpen` 和
    `Document_Open`，以确保其恶意代码在文档打开并且用户启用宏时会自动执行。
- en: 'You can extract embedded macro code using a tool such as the [open-source](https://github.com/decalage2/oletools/wiki/olevba)
    `olevba` [utility](https://github.com/decalage2/oletools/wiki/olevba). For example,
    take a look at the following macro code ([Listing 1-6](#listing1-6)), found in
    a malicious Word document targeting South Korean users:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用诸如 [开源](https://github.com/decalage2/oletools/wiki/olevba) `olevba` [工具](https://github.com/decalage2/oletools/wiki/olevba)
    提取嵌入的宏代码。例如，看看以下宏代码（[清单 1-6](#listing1-6)），它出现在一个恶意 Word 文档中，目标是韩国用户：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 1-6: Malicious macro code (Lazarus Group backdoor)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 1-6：恶意宏代码（Lazarus Group 后门）
- en: The extracted Mac code contains Mac-specific logic within an `#If Mac Then`
    block 1. This code first performs some initializations, including setting a variable
    with a remote URL 2 and dynamically building a random path within the */tmp* directory
    3. Using `curl`, it then downloads the remote resource (*mt.dat*) to the randomly
    generated local path 4. Once the item has downloaded, it invokes `chmod` to set
    the executable bit on the item and then executes it via the `popen` API 5. This
    downloaded item is a persistent macOS backdoor. In Chapter 4, we’ll dive deeper
    into the details of analyzing malicious Office documents.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 提取的 Mac 代码包含了 Mac 特定的逻辑，位于 `#If Mac Then` 块中 1。该代码首先执行一些初始化操作，包括设置一个带有远程 URL
    的变量 2，并动态构建一个位于 */tmp* 目录下的随机路径 3。接着，它使用 `curl` 下载远程资源 (*mt.dat*) 到随机生成的本地路径 4。一旦下载完成，它会调用
    `chmod` 设置文件的可执行权限，并通过 `popen` API 执行该文件 5。这个下载的文件是一个持久化的 macOS 后门。在第 4 章中，我们将深入分析恶意
    Office 文档的细节。
- en: 'Since Office 2016, Microsoft Office applications on macOS run in a restrictive
    sandbox that seeks to constrict the impact of any malicious code. Still, in several
    instances, security researchers, including the author, have found trivial sandbox
    escapes. If you’re interested in reading more about macro-based attacks and sandbox
    escapes as a macOS infection vector, see my presentation “Documents of Doom: Infecting
    macOS via Office Macros.”^([16](#c01-endnote-16))'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '自2016年Office以来，macOS上的Microsoft Office应用程序运行在一个限制性沙盒中，旨在限制任何恶意代码的影响。然而，在多个情况下，安全研究人员，包括作者本人，发现了微小的沙盒逃逸。如果你有兴趣了解更多关于基于宏的攻击和沙盒逃逸作为macOS感染向量的内容，可以查看我的演讲“Documents
    of Doom: Infecting macOS via Office Macros。”^([16](#c01-endnote-16))'
- en: Xcode Projects
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xcode项目
- en: 'Sometimes infection vectors are very targeted, as in the case of XCSSET. This
    malware sought to infect macOS developers via infected Xcode projects. *Xcode*
    is the de facto IDE for developing software for Apple devices. If an XCSSET-infected
    Xcode project is downloaded and built, the malicious code will be automatically
    run, and the developer’s Mac will be infected. TrendMicro, which discovered XCSSET,
    explains:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，感染向量非常有针对性，就像XCSSET的案例一样。该恶意软件试图通过感染Xcode项目来感染macOS开发者。*Xcode*是开发Apple设备软件的事实标准IDE。如果下载并构建一个XCSSET感染的Xcode项目，恶意代码会被自动执行，开发者的Mac也会被感染。发现XCSSET的趋势科技公司解释道：
- en: These Xcode projects have been modified such that upon building, these projects
    would run a malicious code. This eventually leads to the main XCSSET malware being
    dropped and run on the affected system. Infected users are also vulnerable to
    having their credentials, accounts, and other vital data stolen.^([17](#c01-endnote-17))
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这些Xcode项目已被修改，使得在构建时，这些项目会运行恶意代码。最终，这导致主XCSSET恶意软件被丢弃并在受影响的系统上运行。感染的用户还容易遭遇凭证、账户和其他重要数据被窃取的风险。^([17](#c01-endnote-17))
- en: Examining an Xcode project infected with XCSSET reveals a script in the project’s
    *project.pbxproj* file that executes another script, *Assets.xcassets*, from a
    hidden directory called */.xcassets/* ([Figure 1-11](#figure1-11)).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一个感染了XCSSET的Xcode项目，可以看到项目的*project.pbxproj*文件中有一个脚本，执行来自一个名为*/.xcassets/*的隐藏目录中的另一个脚本*Assets.xcassets*（[图1-11](#figure1-11)）。
- en: '![Looking at the Assets Compiler within an Xcode project, we see a line of
    script that executes a hidden script.](image_fi/501942c01/f01011.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![查看Xcode项目中的Assets Compiler，我们看到一行脚本执行了一个隐藏的脚本。](image_fi/501942c01/f01011.png)'
- en: 'Figure 1-11: Malicious build script in an infected Xcode project (XCSSET)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-11：感染Xcode项目中的恶意构建脚本（XCSSET）
- en: 'Building the infected project will trigger the execution of the scripts. Taking
    a peek at the *Assets.xcassets* script ([Listing 1-7](#listing1-7)) reveals it
    executes a binary named *xcassets*, which is the core component of the malware:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 构建被感染的项目会触发脚本的执行。查看*Assets.xcassets*脚本（[清单 1-7](#listing1-7)）可以发现，它执行一个名为*xcassets*的二进制文件，这是恶意软件的核心组件：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 1-7: Malicious build script *Assets.xcassets* (XCSSET)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 清单1-7：恶意构建脚本*Assets.xcassets*（XCSSET）
- en: Specifically, the script changes into the hidden */.xcassets/* directory. Then
    it prepares the *xcassets* binary for execution by removing any extended attributes
    and setting the executable (`+x`) flag. Finally, the script executes the binary,
    passing in arguments such as the path to the project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 具体而言，脚本会进入隐藏的*/.xcassets/*目录。然后，它通过移除任何扩展属性并设置可执行（`+x`）标志，准备执行*xcassets*二进制文件。最后，脚本执行该二进制文件，并传入诸如项目路径等参数。
- en: Supply Chain Attacks
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应链攻击
- en: Another method of infecting target systems involves hacking legitimate developer
    or commercial websites that distribute third-party software. These so-called *supply
    chain attacks* are both highly effective and difficult to detect. For example,
    in mid-2017 attackers successfully compromised the official website of the popular
    video transcoder application HandBrake. With their access, they were able to subvert
    the legitimate transcoder application, repackaging it to contain a copy of their
    malware, called Proton.^([18](#c01-endnote-18))
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种感染目标系统的方法是黑客攻击合法的开发者或商业网站，这些网站分发第三方软件。这些所谓的*供应链攻击*既非常有效，又难以检测。例如，在2017年中期，攻击者成功入侵了流行的视频转码应用程序HandBrake的官方网站。通过这一访问，他们得以颠覆合法的转码应用程序，将其重新打包并加入他们的恶意软件副本，名为Proton。^([18](#c01-endnote-18))
- en: In 2018, another supply chain attack targeted the popular Mac application website
    *macupdate.com*. In this attack, hackers were able to modify the site by subverting
    download links to popular macOS applications, such as Firefox. Specifically, they
    modified the links to point to trojanized versions of the targeted applications
    containing malware known as CreativeUpdate ([Figure 1-12](#figure1-12)).^([19](#c01-endnote-19))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 2018 年，另一起供应链攻击针对了流行的 Mac 应用网站 *macupdate.com*。在此次攻击中，黑客通过篡改下载链接，成功修改了流行 macOS
    应用程序的下载链接，如 Firefox。具体来说，他们将这些链接修改为指向包含名为 CreativeUpdate 的恶意软件的木马版本（[图 1-12](#figure1-12)）。^([19](#c01-endnote-19))
- en: The majority of the attacks and infection vectors discussed so far in this chapter
    should be either fully or partially mitigated by the introduction of application
    notarization requirements in macOS 10.15+. As noted earlier, these requirements
    ensure that Apple has scanned and approved software before it is allowed to run
    on macOS.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的大部分攻击和感染向量，应当通过在 macOS 10.15+ 中引入应用程序公证要求得到完全或部分缓解。如前所述，这些要求确保 Apple 在允许软件运行之前，已经对其进行扫描和批准。
- en: Unfortunately, as we’ll discuss next, other avenues of infecting Mac systems
    still exist.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，正如我们接下来将讨论的，感染 Mac 系统的其他途径仍然存在。
- en: '![A modified version of macupdate.com, which tells the user that the newest
    version of Firefox has been validly signed. This web page contains details of
    the downloaded version of Firefox, such as the item type, hashes, and sign auth.
    The sign auth identifies the Developer ID Application: Ramos Jaxson. While we
    would expect to see the name Mozilla. This is a clear sign that something is wrong.](image_fi/501942c01/f01012.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![修改版的 macupdate.com，告诉用户最新版本的 Firefox 已经被有效签名。该网页包含下载的 Firefox 版本的详细信息，例如项目类型、哈希值和签名认证。签名认证标识开发者
    ID 应用程序：Ramos Jaxson。虽然我们本应看到 Mozilla 的名称，但这显然是一个问题的信号。](image_fi/501942c01/f01012.png)'
- en: 'Figure 1-12: Users who visited *macupdate.com* and downloaded and ran the trojanized
    applications may unfortunately have infected themselves—at no fault of their own,
    really.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1-12：访问 *macupdate.com* 并下载运行了木马应用程序的用户，可能不幸地感染了自己——这完全不是他们的错。
- en: Account Compromises of Remote Services
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程服务的账户泄露
- en: On macOS, users can enable and configure various *externally facing* services,
    like RDP and SSH, to allow users to share content remotely or provide legitimate
    remote access to the system. However, if the services are misconfigured or protected
    with weak or compromised passwords, attackers may be able to gain access to the
    system, allowing them to execute their malicious code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，用户可以启用并配置各种*面向外部*的服务，如 RDP 和 SSH，以允许用户远程共享内容或提供合法的远程访问。然而，如果这些服务配置错误或使用了弱密码或被泄露的密码，攻击者可能会通过这些服务访问系统，从而执行恶意代码。
- en: 'For many years, the notorious FruitFly malware’s infection vector remained
    a mystery. Then, in 2018, an FBI flash report provided insight into exactly how
    the malware was able to infect remote systems. The answer: compromising externally
    facing services. According to the report:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，臭名昭著的 FruitFly 恶意软件的感染向量一直是一个谜。直到 2018 年，FBI 的一份闪电报告揭示了该恶意软件是如何能够感染远程系统的。答案是：通过攻击面向外部的服务。根据报告：
- en: The attack vector included the scanning and identification of externally facing
    services, to include the Apple Filing Protocol (AFP, port 548), RDP or other VNC,
    SSH (port 22), and Back to My Mac (BTMM), which would be targeted with weak passwords
    or passwords derived from third party data breaches.^([20](#c01-endnote-20))
  id: totrans-107
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 攻击向量包括扫描和识别面向外部的服务，包括 Apple Filing Protocol (AFP，端口 548)、RDP 或其他 VNC、SSH（端口
    22）以及 “Back to My Mac”（BTMM），这些服务通常会被弱密码或从第三方数据泄露中派生的密码攻击。^([20](#c01-endnote-20))
- en: 'In 2020, attackers ported the IPStorm malware from Windows and Linux to macOS.
    IPStorm infects remote systems (including macOS systems with SSH enabled) by *brute-forcing*
    SSH accounts. Once it has guessed a valid username and password, it then downloads
    and executes a payload to the remote system.^([21](#c01-endnote-21)) [Listing
    1-8](#listing1-8) is a snippet of IPStorm’s code containing the logic responsible
    for installing itself on remote systems:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 2020 年，攻击者将 IPStorm 恶意软件从 Windows 和 Linux 移植到 macOS。IPStorm 通过 *暴力破解* SSH 账户来感染远程系统（包括启用了
    SSH 的 macOS 系统）。一旦猜测出有效的用户名和密码，它就会下载并执行有效负载到远程系统。^([21](#c01-endnote-21)) [列表
    1-8](#listing1-8) 是 IPStorm 代码的一部分，包含负责将自身安装到远程系统上的逻辑：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 1-8: Remote infection logic (IPStorm)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 1-8：远程感染逻辑（IPStorm）
- en: As you can see, IPStorm invokes a method named `GoArch` in order to gather information
    about the remote system, such as its architecture. With this information, it can
    then download a compatible payload via a call to its `GetFileContents` method.
    Finally, it executes the payload on the remote system, commencing a persistent
    infection.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，IPStorm 调用了一个名为 `GoArch` 的方法，用于收集远程系统的信息，例如其架构。通过这些信息，它可以通过调用 `GetFileContents`
    方法下载兼容的有效负载。最后，它在远程系统上执行该有效负载，开始持续感染。
- en: Exploits
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 漏洞利用
- en: The majority of macOS injection vectors require a fair amount of user interaction,
    such as downloading and running a malicious application. Moreover, as noted, recent
    macOS malware mitigations may now thwart the majority of such attacks. *Exploits,*
    on the other hand, are much more insidious, as they can silently install malware,
    often with no direct user interactions or detections from operating system–level
    protections. An exploit is code that leverages a vulnerability in order to execute
    attacker-specified code to, for example, install malware. *Zero-day exploits*
    are those that attack vulnerabilities for which no patch currently exists, making
    them the ultimate infection vector. Even once the vendor has released a patch
    for a zero-day, users who don’t apply the security update remain vulnerable. Attackers
    and malware may leverage this fact by targeting unpatched users.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 macOS 注入向量需要相当多的用户交互，例如下载和运行恶意应用程序。此外，如前所述，最近的 macOS 恶意软件防护措施可能已经能够阻止大多数此类攻击。*利用漏洞*，另一方面，更加隐蔽，因为它们可以在没有直接用户交互或操作系统级别防护检测的情况下静默安装恶意软件。利用漏洞是指通过代码利用某个漏洞来执行攻击者指定的代码，例如，安装恶意软件。*零日漏洞利用*是指那些攻击尚未发布修补程序的漏洞，使其成为最致命的感染途径。即使供应商发布了零日漏洞的修补程序，未应用安全更新的用户仍然容易受到攻击。攻击者和恶意软件可以利用这一事实，针对未修补的用户进行攻击。
- en: Attackers and malware authors often attempt to uncover or procure vulnerabilities
    in applications such as browsers and mail or chat clients, in order to weaponize
    exploits that may be remotely delivered to targets. For example, one of the most
    prolific Mac malware specimens, Flashback, leveraged an unpatched Java vulnerability
    to infect over a half million Mac computers.^([22](#c01-endnote-22))
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者和恶意软件作者通常会试图发现或采购浏览器、邮件或聊天客户端等应用程序中的漏洞，以便利用漏洞实施远程攻击。例如，最常见的 Mac 恶意软件之一 Flashback，利用了一个未修补的
    Java 漏洞，感染了超过五十万台 Mac 计算机。^([22](#c01-endnote-22))
- en: 'More recently, in 2019 hackers used a Firefox zero-day to deploy malware to
    fully patched macOS systems. The following compelling emails enticed targeted
    users to visit a malicious site containing the exploit code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，在 2019 年，黑客利用 Firefox 的零日漏洞，将恶意软件部署到完全修补的 macOS 系统中。以下诱人的电子邮件吸引了目标用户访问包含漏洞代码的恶意网站：
- en: Dear XXX,
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 亲爱的 XXX，
- en: ''
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My name is Neil Morris. I’m one of the Adams Prize Organizers.
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我的名字是 Neil Morris，我是 Adams Prize 组织者之一。
- en: ''
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Each year we update the team of independent specialists who could assess the
    quality of the competing projects: http://people.ds.cam.ac.uk/nm603/awards/Adams_Prize'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每年我们都会更新一支独立专家团队，他们负责评估竞争项目的质量：[Adams Prize 官方网站](http://people.ds.cam.ac.uk/nm603/awards/Adams_Prize)
- en: ''
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our colleagues have recommended you as an experienced specialist in this field.
    We need your assistance in evaluating several projects for Adams Prize.
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们的同事推荐您作为该领域的经验丰富的专家。我们需要您的协助，评估几项 Adams Prize 的项目。
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Looking forward to receiving your reply.
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 期待收到您的回复。
- en: ''
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Best regards,
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 此致敬礼，
- en: ''
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Neil Morris
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Neil Morris
- en: If the user visited the site via Firefox, a zero-day exploit would silently
    and persistently install a macOS backdoor.^([23](#c01-endnote-23)) Luckily for
    the average macOS user, the use of zero-day exploits to deploy malware is somewhat
    uncommon. Still, it would be naive to underestimate the use of such powerful capabilities,
    especially by sophisticated APT and nation-state hacking groups. And, of course,
    such exploits are available to anybody willing to pay. [Figure 1-13](#figure1-13)
    shows a leaked email, sent to the infamous cyberespionage company HackingTeam,
    offering exploits targeting Apple systems.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户通过 Firefox 访问该网站，零日漏洞将悄无声息且持续地安装一个 macOS 后门。^([23](#c01-endnote-23)) 幸运的是，对于普通的
    macOS 用户来说，利用零日漏洞部署恶意软件的情况相对较少见。然而，低估这些强大能力的使用，尤其是对于复杂的APT和国家级黑客组织来说，是天真的。当然，这些漏洞利用对于任何愿意付费的人都是可得的。[图
    1-13](#figure1-13) 显示了一封泄露的电子邮件，发送给臭名昭著的网络间谍公司 HackingTeam，提供了针对 Apple 系统的漏洞利用。
- en: '![An email that asks if HackingTeam is interested in buying zero-day vulnerabilities
    with RCE exploits for Flash Player, Silverlight, Java, and Safari. The email goes
    on to describe what these exploits do, including bypassing ASLR and DEP-like protection.](image_fi/501942c01/f01013.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![一封电子邮件询问HackingTeam是否有兴趣购买带有RCE漏洞的Flash Player、Silverlight、Java和Safari的零日漏洞。邮件进一步描述了这些漏洞的作用，包括绕过ASLR和类似DEP的保护。](image_fi/501942c01/f01013.png)'
- en: 'Figure 1-13: Zero-day exploits for sale'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图1-13：零日漏洞待售
- en: The company ultimately procured the exploit, a Flash zero-day, for $45,000.^([24](#c01-endnote-24))
    As Apple continues to harden macOS by adding security mechanisms to it, such as
    application notarization requirements, attackers will largely be forced to abandon
    inferior user-assisted infection vectors, instead leveraging exploits in order
    to successfully infect macOS users.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 该公司最终以45,000美元购买了该漏洞，一个Flash零日漏洞。^([24](#c01-endnote-24)) 随着苹果公司通过添加诸如应用程序公证要求等安全机制不断加强macOS的安全性，攻击者将大部分被迫放弃低效的用户协助感染方式，而转而利用漏洞来成功感染macOS用户。
- en: Physical Access
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 物理访问
- en: So far, all the infection vectors discussed in this chapter are *remote*, meaning
    the attacker is not actually present at the system’s location during the attack.
    There are several upsides to remote attacks. They allow attackers to overcome
    geographic disparities, as well as scale their attack to infect many targets around
    the world. Remote attacks also increase the attacker’s stealth, reducing their
    risk; if they’re careful, it’s unlikely that the attacker will be identified or
    physically apprehended.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章讨论的所有感染途径都是*远程*的，这意味着攻击者在攻击时并未实际出现在系统所在地。远程攻击有几个优点。它们使攻击者能够克服地理差异，并且能够扩大攻击范围，感染全球范围内的多个目标。远程攻击还增加了攻击者的隐蔽性，降低了他们被发现的风险；如果他们足够小心，攻击者很难被识别或被捕捉。
- en: 'The main downside to remote attacks is that their success is far from guaranteed.
    When given physical access to a computer, attackers greatly increase their likelihood
    of achieving a successful infection. To do so, however, they must first gain hands-on
    access to the target system, as well as accept the increased risk of getting caught
    red-handed. Also, physical attacks still often require exploits. Though the average
    hacker may not possess the resources, nor be willing to accept the risks of physical
    access attacks, nation-state hackers, who often chase specific high-value targets,
    have been known to pull them off. For example, in an article titled “WikiLeaks
    Reveals How the CIA Can Hack Mac’s Hidden Code,” *Wired* notes:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 远程攻击的主要缺点是其成功率远未得到保证。当攻击者能够获得计算机的物理访问权限时，他们实现成功感染的可能性大大增加。然而，要做到这一点，攻击者首先必须获得目标系统的实际访问权限，并且要承担被当场抓获的风险。此外，物理攻击通常仍然需要漏洞利用。尽管普通黑客可能没有资源，也不愿意接受物理访问攻击的风险，但国家级黑客，通常针对特定的高价值目标，已知曾成功实施过此类攻击。例如，在一篇标题为“维基解密揭示CIA如何破解Mac隐藏代码”的文章中，*Wired*指出：
- en: If the CIA wants inside your Mac, it may not be enough that you so carefully
    avoided those infected email attachments or maliciously crafted web sites designed
    to plant spyware on your machine . . . if Langley’s hackers got physical access,
    they still could have infected the deepest, most hidden recesses of your laptop.^([25](#c01-endnote-25))
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果CIA想要进入你的Mac，单单避免那些带有病毒附件的电子邮件或恶意设计的网页可能不足以保护你……如果兰利的黑客获得了物理访问权限，他们仍然可以感染你笔记本电脑中最深层、最隐秘的区域。^([25](#c01-endnote-25))
- en: 'The leaked government documents mentioned in the article discuss the agency’s
    capabilities and use of *Extensible Firmware Interface (EFI) exploits*, which
    target vulnerabilities in pre-operating system bootup code. The payloads they
    install are notoriously difficult to both detect and remove. Moreover, as the
    exploited vulnerabilities may exist in read-only memory, they may be impossible
    to fix with software-based patches. For more details on EFI and bootloader attacks,
    see “BootBandit: A macOS bootloader attack.”^([26](#c01-endnote-26))'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 文章中提到的泄露政府文件讨论了该机构在*可扩展固件接口（EFI）漏洞利用*方面的能力，这些漏洞针对的是操作系统启动前的代码中的漏洞。它们安装的有效载荷通常非常难以检测和移除。此外，由于被利用的漏洞可能存在于只读内存中，因此可能无法通过基于软件的修复来解决。有关EFI和引导加载程序攻击的更多细节，请参见《BootBandit：一项macOS引导加载程序攻击》。^([26](#c01-endnote-26))
- en: 'Of course, these low-level EFI-based exploits aren’t the only option for an
    attacker with physical access to a Mac. A local attacker could exploit vulnerabilities,
    for example in the USB stack, even if the target Mac is locked. Case in point:
    older versions of Apple’s desktop operating system contain a reliably exploitable
    USB flaw. Attackers can trigger this non-public vulnerability by simply inserting
    a USB device, even if the target is in a locked state. Moreover, as the vulnerable
    code runs with root privileges, a successful exploitation can lead to complete
    system compromise via the installation of persistent malware.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些基于低级EFI的攻击并不是拥有物理访问权限的攻击者唯一的选择。例如，攻击者可以利用漏洞（例如USB栈中的漏洞），即使目标Mac已锁定。举个例子：苹果桌面操作系统的旧版本中存在一个可靠可利用的USB漏洞。攻击者只需插入一个USB设备，即使目标处于锁定状态，也可以触发这个非公开的漏洞。此外，由于漏洞代码以root权限运行，成功利用该漏洞可能会导致通过安装持久性恶意软件来完全控制系统。
- en: More recently, the infamous Checkm8 vulnerability, well known for being able
    to jailbreak iPhones, was found to also impact Apple’s non-mobile devices too,
    such as Macs and MacBooks with T2 chips. When given physical access to a target
    system, attackers could abuse this flaw to infect a macOS system.^([27](#c01-endnote-27))
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，臭名昭著的Checkm8漏洞（因能够越狱iPhone而广为人知）被发现也影响了苹果的非移动设备，如带有T2芯片的Mac和MacBook。当攻击者获得目标系统的物理访问权限时，可以利用这个漏洞感染macOS系统。^([27](#c01-endnote-27))
- en: Up Next
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接下来
- en: You should now have a solid understanding of how malicious software can infect
    macOS systems. What does malware do once it has infected a system? More often
    than not, it will persistently install itself. In Chapter 2 we’ll turn our attention
    to the various methods of persistence.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经对恶意软件如何感染macOS系统有了扎实的理解。那么，一旦恶意软件感染了系统，它会做些什么呢？通常，它会持续安装自身。在第二章中，我们将关注各种持久化方法。
- en: Endnotes
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
