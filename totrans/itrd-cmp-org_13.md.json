["```\nint write(int fd, char *buf, int n);\n```", "```\nint read(int fd, char *buf, int n);\n```", "```\n> man 2 write\n> man 2 read\n```", "```\ninitialize loop control variable\nwhile (expression) {\n    body\n    change loop control variable\n}\nnext statement\n```", "```\n   // Write Hello, World! one character at a time.\n\n   #include <unistd.h>\n➊ #define NUL '\\x00'\n\n   int main(void)\n{\n  ➋ char *message_ptr = \"Hello, World!\\n\";\n\n  ➌ while (*message_ptr != NUL) {\n      ➍ write(STDOUT_FILENO, message_ptr, 1);\n      ➎ message_ptr++;\n    }\n\n    return 0;\n}\n```", "```\n        .arch armv8-a\n        .file   \"hello_world.c\"\n        .text\n     ➊ .section        .rodata\n        .align  3\n.LC0:\n        .string \"Hello, World!\\n\"\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     x29, x30, [sp, -32]!\n        mov     x29, sp\n     ➋ adrp    x0, .LC0\n        add     x0, x0, :lo12:.LC0 str     x0, [sp, 24]      /// message_ptr variable\n     ➌ b       .L2               /// Go to check\n.L3:\n        mov     x2, 1             /// One character\n        ldr     x1, [sp, 24]      /// Address in message_ptr\n        mov     w0, 1             /// STDOUT_FILENO\n        bl      write\n        ldr     x0, [sp, 24]\n        add     x0, x0, 1\n        str     x0, [sp, 24]      /// message_ptr++;\n.L2:\n        ldr     x0, [sp, 24]\n        ldrb    w0, [x0]          /// Current char\n     ➍ cmp     w0, 0             /// NUL?\n     ➎ bne     .L3               /// No, back to top\n        mov     w0, 0\n        ldp     x29, x30, [sp], 32\n        ret\n        .size   main, .-main\n        .ident  \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n        .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Write Hello, World! one character at a time.\n        .arch armv8-a\n// Useful names\n        .equ    NUL, 0\n        .equ    STDOUT, 1\n// Stack frame\n        .equ    save19, 16\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\nmessage:\n        .string \"Hello, World!\\n\"\n// Code\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     fp, lr, [sp, -FRAME]! // Create stack frame\n        mov     fp, sp                // Set our frame pointer\n        str     x19, [sp, save19]     // Save for caller\n        adr     x19, message          // Address of message\nloop:\n        ldrb    w0, [x19]             // Load character\n     ➊ cmp     w0, NUL               // End of string?\n        b.eq    done                  // Yes\n        mov     w2, 1                 // No, one char\n        mov     x1, x19               // Address of char\n        mov     x0, STDOUT            // Write on screen\n        bl      write\n        add     x19, x19, 1           // Increment pointer\n        b       loop                  //   and continue\ndone:\n        mov     w0, wzr               // Return 0\n        ldr     x19, [sp, save 19]    // Restore reg\n        ldp     fp, lr, [sp], FRAME   // Delete stack frame\n        ret\n```", "```\nfor (initialize loop control variable; expression; change loop control variable) {\n    body\n}\nnext statement\n```", "```\ninitialize loop control variable\nfor (;expression;) {\n    body\n    change loop control variable\n}\nnext statement\n```", "```\n// Write Hello, World! one character at a time.\n\n#include <unistd.h>\n#define NUL '\\x00'\n\nint main(void)\n{\n    char *message_ptr;\n\n    for (message_ptr = \"Hello, World!\\n\"; *message_ptr != NUL; message_ptr++) {\n        write(STDOUT_FILENO, message_ptr, 1);\n    } return 0;\n}\n```", "```\ndo {\n    body\n    change loop control variable\n} while (expression)\nnext statement\n```", "```\n// Write Hello, World! one character at a time.\n\n#include <unistd.h> #define NUL '\\x00'\n\nint main(void)\n{\n    char *message_ptr = \"Hello, World!\\n\";\n\n    do {\n        write(STDOUT_FILENO, message_ptr, 1);\n        message_ptr++;\n    } while (*message_ptr != NUL);\n\n    return 0;\n}\n```", "```\n           .arch armv8-a\n           .file   \"hello_world_do.c\"\n           .text\n           .section        .rodata\n           .align  3\n   .LC0:\n           .string \"Hello, World!\\n\"\n           .text\n           .align  2\n           .global main\n           .type   main, %function\n   main:\n           stp     x29, x30, [sp, -32]!\n           mov     x29, sp\n           adrp    x0, .LC0\n           add     x0, x0, :lo12:.LC0\n           str     x0, [sp, 24]      /// message_ptr variable\n➊ .L2:\n           mov     x2, 1             /// One character ldr     x1, [sp, 24]      /// Address in message_ptr\n           mov     w0, 1             /// STDOUT_FILENO\n           bl      write\n           ldr     x0, [sp, 24]\n           add     x0, x0, 1\n           str     x0, [sp, 24]      /// message_ptr++;\n           ldr     x0, [sp, 24]\n           ldrb    w0, [x0]          /// Current char\n        ➋ cmp     w0, 0             /// NUL?\n           bne     .L2               /// No, back to top\n           mov     w0, 0\n           ldp     x29, x30, [sp], 32\n           ret\n           .size   main, .-main\n           .ident  \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n           .section        .note.GNU-stack,\"\",@progbits\n```", "```\nif (expression) {\n    block\n}\nnext statement\n```", "```\n// Flip a coin, show heads.\n\n#include <stdio.h>\n#include <stdlib.h>\n#define N_TIMES 10\n\nint main()\n{\n    register int random_number;\n    register int i;\n\n ➊ for (i = 0; i < N_TIMES; i++) {\n     ➋ random_number = random();\n     ➌ if (random_number < RAND_MAX/2) {\n         ➍ puts(\"heads\");\n        }\n    }\n\n    return 0;\n}\n```", "```\n           .arch armv8-a\n           .file   \"coin_flips1.c\"\n           .text\n           .section        .rodata\n           .align  3\n   .LC0:\n           .string \"heads\"\n           .text\n           .align  2\n           .global main\n           .type   main, %function\n   main:\n           stp     x29, x30, [sp, -32]!\n           mov     x29, sp\n           stp     x19, x20, [sp, 16]  /// Use for i and random_number\n           mov     w19, 0\n           b       .L2\n   .L4:\n           bl      random\n           mov     w20, w0             /// Random number\n           mov     w0, 1073741822      /// RAND_MAX/2\n           cmp     w20, w0\n        ➊ bgt     .L3                 /// Skip message\n           adrp    x0, .LC0\n           add     x0, x0, :lo12:.LC0\n           bl      puts\n➋ .L3:\n           add     w19, w19, 1         /// i++;\n   .L2:\n           cmp     w19, 9\n           ble     .L4                 /// Continue if <= 9\n           mov     w0, 0\n           ldp     x19, x20, [sp, 16]  /// Restore regs for caller\n           ldp     x29, x30, [sp], 32\n           ret\n           .size   main, .-main\n           .ident  \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n           .section        .note.GNU-stack,\"\",@progbits\n```", "```\nif (expression) {\n    then block\n} else {\n    else block\n}\nnext statement\n```", "```\n// Flip a coin, showing heads or tails.\n\n#include <stdio.h>\n#include <stdlib.h>\n#define N_TIMES 10\n\nint main()\n{ register int random_number;\n    register int i;\n\n    for (i = 0; i < N_TIMES; i++) {\n        random_number = random();\n        if (random_number < RAND_MAX/2) {\n            puts(\"heads\");\n        } else {\n            puts(\"tails\");\n        }\n    }\n\n    return 0;\n}\n```", "```\n           .arch armv8-a\n           .file   \"coin_flips2.c\"\n           .text\n           .section        .rodata\n           .align  3\n   .LC0:\n           .string \"heads\"\n           .align  3\n   .LC1:\n           .string \"tails\"\n           .text\n           .align  2\n           .global main\n           .type   main, %function\n   main:\n           stp     x29, x30, [sp, -32]!\n           mov     x29, sp\n           stp     x19, x20, [sp, 16]\n           mov     w19, 0\n           b       .L2\n   .L5:\n           bl      random\n           mov     w20, w0\n           mov     w0, 1073741822\n           cmp     w20, w0\n           bgt     .L3                 /// Go to else block\n           adrp    x0, .LC0            /// Then block\n           add     x0, x0, :lo12:.LC0\n           bl      puts ➊ b       .L4                 /// Branch over else block\n   .L3:\n           adrp    x0, .LC1            /// Else block\n           add     x0, x0, :lo12:.LC1\n           bl      puts\n➋ .L4:\n           add     w19, w19, 1         /// Next statement\n   .L2:\n           cmp     w19, 9\n           ble     .L5\n           mov     w0, 0\n           ldp     x19, x20, [sp, 16]\n           ldp     x29, x30, [sp], 32\n           ret\n           .size   main, .-main\n           .ident  \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n           .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Flip a coin, showing heads or tails.\n        .arch armv8-a\n// Useful names\n        .equ    N_TIMES, 10           // Number of flips\n        .equ    RAND_MID, 1073741822  // RAND_MAX/2\n// Stack frame\n        .equ    save19, 28\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\nheads_msg:\n        .string \"heads\"\ntails_msg:\n        .string \"tails\"\n// Code\n        .text\n        .align  2\n        .global main\n        .type   main, %function\nmain:\n        stp     fp, lr, [sp, -FRAME]! // Create stack frame\n        mov     fp, sp                // Set our frame pointer\n        str     w19, [sp, save19]     // Save for i local var\n        mov     w19, wzr              // i = 0 loop:\n        mov     w0, N_TIMES           // Total number of times\n        cmp     w19, w0               // Is i at end?\n        b.hs    done                  // Yes\n        bl      random                // No, get random number\n        mov     w1, RAND_MID          // Halfway\n     ➊ cmp     w1, w0                // Above or below middle?\n        b.hi    tails                 // Above -> tails\n        adr     x0, heads_msg         // Below -> heads message\n        bl      puts                  // Print message\n        b       continue              // Skip else part\ntails:\n        adr     x0, tails_msg         // Tails message address\n        bl      puts                  // Print message\ncontinue:\n        add     w19, w19, 1           // Increment i\n        b       loop                  //   and continue loop\ndone:\n        mov     w0, wzr               // Return 0\n        ldr     w19, [sp, save19]     // Restore reg\n        ldp     fp, lr, [sp], FRAME   // Delete stack frame\n        ret                           // Back to caller\n```", "```\nif (expression_1) {\n    block_1\n} else if (expression_2)  {\n    block_2\n}\n⋮ } else if (expression_n-1) {\n    block_n-1\n} else {\n    block_n\n}\nnext statement\n```", "```\nswitch (selector) {\n    case selector_1:\n        block_1\n    case selector_2:\n        block_2\n    ⋮\n    case selector_n:\n        block_n\n    default:\n        default block\n}\nnext statement\n```", "```\n// Select one of three or default.\n\n#include <stdio.h>\n#define N_TIMES 10\n\nint main(void)\n{ register int selector;\n    register int i;\n\n    for (i = 1; i <= N_TIMES; i++) {\n        selector = i;\n        switch (selector) {\n            case 1:\n                puts(\"i = 1\");\n             ➊ break;\n            case 2:\n                puts(\"i = 2\");\n                break;\n            case 3:\n                puts(\"i = 3\");\n                break;\n            default:\n                puts(\"i > 3\");\n        }\n    }\n\n    return 0;\n}\n```", "```\n           .arch armv8-a\n           .file   \"switch.c\"\n           .text\n           .section        .rodata\n           .align  3\n   .LC0:\n           .string \"i = 1\"\n           .align  3\n   .LC1:\n           .string \"i = 2\"\n           .align  3\n   .LC2:\n           .string \"i = 3\"\n           .align  3\n   .LC3:\n           .string \"i > 3\"\n           .text\n           .align  2\n           .global main .type   main, %function\n   main:\n           stp     x29, x30, [sp, -32]!\n           mov     x29, sp\n           mov     w0, 1\n           str     w0, [sp, 28]\n           b       .L2\n➊ .L8:                              /// Branch logic to decide\n           ldr     w0, [sp, 28]      ///   which block to execute\n           cmp     w0, 3\n           beq     .L3\n           ldr     w0, [sp, 28]\n           cmp     w0, 3\n           bgt     .L4\n           ldr     w0, [sp, 28]\n           cmp     w0, 1\n           beq     .L5\n           ldr     w0, [sp, 28]\n           cmp     w0, 2\n           beq     .L6\n           b       .L4\n➋ .L5:                              /// Blocks to select from\n           adrp    x0, .LC0\n           add     x0, x0, :lo12:.LC0\n           bl      puts\n           b       .L7\n   .L6:\n           adrp    x0, .LC1\n           add     x0, x0, :lo12:.LC1\n           bl      puts\n           b       .L7\n   .L3:\n           adrp    x0, .LC2\n           add     x0, x0, :lo12:.LC2\n           bl      puts\n           b       .L7\n   .L4:\n           adrp    x0, .LC3\n           add     x0, x0, :lo12:.LC3\n           bl      puts\n   .L7:\n           ldr     w0, [sp, 28]\n           add     w0, w0, 1\n           str     w0, [sp, 28]\n   .L2:\n           ldr     w0, [sp, 28]\n           cmp     w0, 10 ble     .L8\n           mov     w0, 0\n           ldp     x29, x30, [sp], 32\n           ret\n           .size   main, .-main\n           .ident  \"GCC: (Debian 10.2.1-6) 10.2.1 20210110\"\n           .section        .note.GNU-stack,\"\",@progbits\n```", "```\n// Select one of three or default.\n        .arch armv8-a\n// Useful names\n        .equ    N_TIMES, 10           // Number of loops\n        .equ    DEFAULT, 4            // Default case\n// Stack frame\n        .equ    save1920, 16\n        .equ    FRAME, 32\n// Constant data\n        .section  .rodata\none_msg:\n        .string \"i = 1\"\ntwo_msg:\n        .string \"i = 2\"\nthree_msg:\n        .string \"i = 3\"\nover_msg:\n        .string \"i > 3\"\n// Branch table\n     ➊ .align  3\nbr_table:\n     ➋ .quad   one                   // Addresses where messages\n        .quad   two                   //   are printed\n        .quad   three\n        .quad   default\n// Program code\n        .text\n        .align  2 .global main\n        .type   main, %function\nmain:\n        stp     fp, lr, [sp, -FRAME]! // Create stack frame\n        mov     fp, sp                // Set our frame pointer\n     ➌ stp     x19, x20, [sp, save1920]  // Save for caller\n        mov     x19, 1                // i = 1\n        mov     x20, DEFAULT          // Default case\nloop:\n        cmp     x19, N_TIMES          // Is i at end?\n        b.hi    done                  // Yes, leave loop\n     ➍ adr     x0, br_table          // Address of branch table\n        cmp     x19, x20              // Default case?\n     ➎ csel    x1, x19, x20, lo      // Low, use i\n     ➏ sub     x1, x1, 1             // Relative to first table entry\n     ❼ add     x0, x0, x1, lsl 3     // Add address offset in table\n     ❽ ldr     x0, [x0]              // Load address from table\n        br      x0                    //   and branch there\none:\n        adr     x0, one_msg           // = 1\n        bl      puts                  // Write to screen\n        b       continue\ntwo:\n        adr     x0, two_msg           // = 2\n        bl      puts                  // Write to screen\n        b       continue\nthree:\n        adr     x0, three_msg         // = 3\n        bl      puts                  // Write to screen\n        b       continue\ndefault:\n        adr     x0, over_msg          // > 3\n        bl      puts                  // Write to screen\ncontinue:\n        add     x19, x19, 1           // Increment i\n        b       loop                  //   and continue loop\ndone:\n        mov     w0, wzr               // Return 0\n        ldp     x19, x20, [sp, save1920]  // Restore reg\n        ldp     fp, lr, [sp], FRAME   // Delete stack frame\n        ret                           // Back to caller\n```"]