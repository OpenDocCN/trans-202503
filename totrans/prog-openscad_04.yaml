- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Loops and Variables
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  prefs: []
  type: TYPE_IMG
- en: Starting with this chapter, you’ll learn ways to use OpenSCAD to work smarter,
    not harder. First, you’ll learn to use a very useful programming tool called a
    *loop*. Loops let you draw many similar shapes with only a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: This is particularly useful when your designs have repeated features. For instance,
    if you’re creating a model of the Empire State Building, typing one individual
    statement for each window in the building would consume a lot of time. With a
    loop, you can repeat a single window along a fixed pattern so OpenSCAD can take
    care of the tedious work of copying and pasting the same window many times. You’ll
    also learn how to use variables to keep track of important data related to your
    designs. Because these new OpenSCAD tools will allow you to create more complicated
    designs, you’ll also learn how to use comments to leave notes for yourself and
    other collaborators on your design.
  prefs: []
  type: TYPE_NORMAL
- en: Leaving Notes with Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, the designs are a bit more complex than in previous chapters,
    so we’ll use comments in the coding examples to explain important details in our
    designs. *Comments* provide a way for you to leave notes to yourself and others
    who might read your code. OpenSCAD ignores comment statements, as they are meant
    only as notes for the humans who read them rather than as instructions for OpenSCAD
    to draw a particular shape.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Single-Line Comments with //
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Single-line comments start with `//` and continue until the end of the line.
    They are useful for leaving short notes so you can remember later what your thought
    process was when you were creating your OpenSCAD design.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Multiline Comments with /* */
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Multiline comments begin with `/*` and end with `*/`. OpenSCAD ignores everything
    inside a multiline comment. Multiline comments are useful for temporarily ignoring
    parts of your design when you want to focus on a particular element. Multiline
    comments make it easy to ignore multiple statements at once.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows single-line and multiline comments, which results
    in exactly one shape being drawn (a cuboid, [Figure 4-1](#figure4-1)), as the
    other OpenSCAD statements are enclosed in comments and ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![f04001](image_fi/279547c04/f04001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-1: A single cube among a collection of comments'
  prefs: []
  type: TYPE_NORMAL
- en: Repeating Code with a for Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main focus of this chapter is on getting OpenSCAD to take care of the tedious
    and error prone “copy-and-paste” approach to typing very similar statements in
    order to draw a collection of similar shapes. If, for example, you want to draw
    10 identical cylinders on a straight line, you could write 10 statements—one for
    each cylinder—changing only the vector parameter in the `translate` operation
    to prevent overlap, as in the following design ([Figure 4-2](#figure4-2)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![f04002](image_fi/279547c04/f04002.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-2: A row of cylinders drawn with 10 separate statements or drawn with
    a single `for` loop'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the only change from one cylinder to the next is the increased
    position along the x-axis: the x position of the first cylinder is 10, the x position
    of the second cylinder is 20, and so on, until the last cylinder is drawn at an
    x position of 100\.'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using 10 separate statements, you can use a single `for` loop to
    generate this collection of cylinders. You just need to write a loop that draws
    the first cylinder 10 units from the x-axis, then increases the x position by
    10 units every time a new cylinder is drawn, until drawing the last cylinder 100
    units from the axis.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following pseudocode shows the `for` loop syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `for` keyword indicates that you want to repeat OpenSCAD statements. Then
    you create a `variable` to keep track of the changing value after each repetition.
    The `variable` has a `start` value, an `increment` value, and an `end` value.
    Similar to grouping multiple shapes together in order to apply a single transformation,
    use curly brackets (`{ }`) to enclose all of the statements you want to repeat.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example uses a single `for` loop to draw 10 cylinders instead
    of using 10 separate statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: A variable called `x_position` 1 keeps track of the position of each cylinder.
    This variable has an initial value of 10; then every time the `for` loop repeats,
    the value of `x_position` increases by 10 so that the next cylinder is drawn 10
    units farther along the x-axis. Once `x_position` is equal to 100, the last cylinder
    is drawn and the loop stops repeating. The resulting drawing will look the same
    as using 10 separate statements, as shown in [Figure 4-2](#figure4-2).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use loops to repeat shapes along many types of patterns. [Figure 4-3](#figure4-3)
    shows a cone repeating in a rotational pattern around the z-axis, and here’s the
    corresponding `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![f04003](image_fi/279547c04/f04003.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-3: Ten cones, rotated around the z-axis, generated with a`for`loop'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the curly brackets, the loop creates a cone 3, translates it 10 units
    along the x-axis 2, and then rotates it by `angle` degrees 1. The first cone is
    drawn when the value of the `angle` variable is 0, so it is not rotated at all.
    The value of the `angle` variable increases by 45 each time the loop is repeated,
    rotating each cone accordingly. The last value of the `angle` variable is 315,
    so the last cone drawn by the loop is rotated by 315 degrees around the z-axis.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging for Loops with echo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes it’s useful to examine the value of a variable as it changes during
    the repetition of a `for` loop. For instance, if you want to double-check your
    mental math, it can be easier to see the exact values being generated by the `for`
    loop. Use the `echo` function to print each successive value of a variable to
    the console window, and check the console window ([Figure 4-4](#figure4-4)) to
    gather feedback about the execution of your OpenSCAD code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![f04004](image_fi/279547c04/f04004.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-4: Console output generated with `echo`'
  prefs: []
  type: TYPE_NORMAL
- en: The `echo` function is helpful for debugging your programs. For example, you
    can use it to visualize all the values of a variable that controls the number
    of times a `for` loop repeats. The `echo` function provides a useful way to gather
    feedback about your `for` loops, because it will print out every value generated
    by the `for` loop. Adding string labels (like `"x:"`) to your console statements
    can help organize the console window output. Labels and variables in `echo` functions
    should be separated with commas (`,`).
  prefs: []
  type: TYPE_NORMAL
- en: Using Variables and Arithmetic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Variables are used in conjunction with `for` loops to keep track of a pattern
    created by the looping. You can either use the generated values directly, or you
    can perform arithmetic on them to produce more sophisticated repetitions.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you’ll learn variable naming best practices, mathematical operations
    to perform on variables, and applications of variables within loops.
  prefs: []
  type: TYPE_NORMAL
- en: Naming Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Neither the `x_position` variable from the preceding `for` loop example nor
    the `angle` variable from [Figure 4-3](#figure4-3) is built into OpenSCAD. Those
    names were chosen to describe how the values are used in the design. The `x_position`
    variable describes the x-position of the cylinder, while `angle` describes the
    angle of rotation of the cone.
  prefs: []
  type: TYPE_NORMAL
- en: OpenSCAD allows you to name your variables however you want, as long as you
    don’t include spaces or use any symbols other than letters, underscores, or numbers.
    Be sure to select a name that helps you remember a variable’s purpose. This allows
    you to keep track of multiple variables in a design more easily, which can help
    tremendously when debugging errors or sharing your design.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Mathematical Operations on Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To start exploring how OpenSCAD applies mathematical operations on variables,
    say you assign the values 10 and 3 to the following variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To perform mathematical operations like finding the sum, difference, product,
    quotient, or remainder of these values, OpenSCAD lets you use standard symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenSCAD also respects the conventional order of operations that you are probably
    familiar with from math class. Assigning the result of each of these arithmetic
    operations to a variable will help you separate your calculation statements from
    your output statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, use the `echo` function to display the result of each mathematical operation
    ([Figure 4-5](#figure4-5)). Each `echo` function uses a label to help identify
    which number is which in the console window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![f04005](image_fi/279547c04/f04005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-5: Console output of the five arithmetic operators'
  prefs: []
  type: TYPE_NORMAL
- en: Using Math and Variables Inside for Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use arithmetic inside a `for` loop to make a single variable represent
    two patterns. The following design creates 13 spheres that are all generated by
    the same `for` loop ([Figure 4-6](#figure4-6)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![f04006](image_fi/279547c04/f04006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-6: A succession of increasingly smoother spheres'
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the `faces` variable created by the `for` loop specifies both the
    number of faces used to render the sphere 2 and the position of the sphere along
    the x-axis 3. With each repetition of the `for` loop, the value of `faces` increases
    by one 1, while the value of  `x_position` is updated by multiplying the new value
    of the `faces` variable by 10\. The `echo` function 4 displays the changing values
    of `faces` and `x_position`. [Figure 4-7](#figure4-7) shows the console output.
  prefs: []
  type: TYPE_NORMAL
- en: '![f04007](image_fi/279547c04/f04007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-7: The console output of a succession of increasingly smoother spheres'
  prefs: []
  type: TYPE_NORMAL
- en: Using Arithmetic to Create Unique Patterns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In addition to using arithmetic to leverage the power of a `for` loop to progressively
    change characteristics of a shape, you can also use arithmetic to create interesting
    patterns. The following code generates a sequence of cylinders of increasing heights
    by using a quadratic pattern to increase the height of each cylinder ([Figure
    4-8](#figure4-8)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding design uses a `for` loop to increase one variable, called `x`
    1, from 1 to 10 2. The `x` variable increases by one each time the loop repeats,
    so this loop repeats 10 times. This variable controls both the position along
    the x-axis and height of a series of cylinders. By creatively using arithmetic,
    you change the x position of the cylinder by 5 4 every time the loop repeats.
    The height of the cylinder grows at a different rate, by squaring the value of
    `x` every time the loop repeats 3; this is known as *quadratic growth*.
  prefs: []
  type: TYPE_NORMAL
- en: '![f04008](image_fi/279547c04/f04008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-8: A succession of cylinders following a quadratic pattern to increase
    height'
  prefs: []
  type: TYPE_NORMAL
- en: Using Nested Loops to Draw 2D and 3D Grids
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OpenSCAD even lets you repeat a loop, so you can put a `for` loop inside another
    `for` loop. Whereas you can use one `for` loop to create a line of shapes, you
    can use a `for` loop inside another `for` loop to repeat that line of shapes to
    create a grid of shapes with only a few lines of code. This is called *nesting*
    the loops. The following design uses nested `for` loops to draw a grid of cylinders
    ([Figure 4-9](#figure4-9)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses one loop to draw a line of 10 cylinders 2. That `for`
    loop is repeated by the first `for` loop 1, so the line of cylinders repeats.
    Two variables—that is, the `x_pos` and `y_pos` variables—work together to change
    both the x position and y position of the repeated cylinder. The inner loop repeats
    10 times, while the outer loop repeats 5 times. This generates a total of 50 cylinders.
    The `echo` function is used to keep track of the changing values of both variables
    in the console window 3. Notice that comments are used to indicate which bracket
    belongs to which loop. Commenting brackets isn’t necessary but can be helpful
    when you have many curly brackets next to each other.
  prefs: []
  type: TYPE_NORMAL
- en: '![f04009](image_fi/279547c04/f04009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-9: A grid of cylinders drawn with nested `for` loops'
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to generate 50 cylinders with four lines of code, which certainly
    beats writing a long list of 50 statements to generate each cylinder individually.
    This would be the perfect technique for drawing the many windows in a skyscraper.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the Windows in a Skyscraper with Nested Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Listing 4-1](#listing4-1) draws a building with 60 windows ([Figure 4-10](#figure4-10))
    by using nested `for` loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 4-1: Drawing a skyscraper with 60 windows by using nested `for` loops'
  prefs: []
  type: TYPE_NORMAL
- en: '![f04010](image_fi/279547c04/f04010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-10: A window grid on a skyscraper'
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 4-1](#listing4-1) uses variables (named `num_rows` and `num_cols`)
    to control not only the number of windows, but also the width and height of the
    building. First, it draws a large cuboid to represent the building 2. Next, it
    uses nested `for` loops to draw a grid of 60 cuboids 3. Finally, the `difference`
    operation subtracts the cuboids from the larger building to create recessed windows
    1. Two variables (`x_pos` and `z_pos`) are used to calculate the specific x position
    and z position of each window prior to drawing the cuboid 4.'
  prefs: []
  type: TYPE_NORMAL
- en: Our organization of the code in [Listing 4-1](#listing4-1) makes it easy to
    change the skyscraper’s characteristics. The variables `num_rows` and `num_cols`
    not only control the number of times the two loops repeat, but also set the width
    and height of the building, because the values of the `building_width`  and `building_height`
    variables are dependent on the values of `num_rows` and `num_cols.` Making one
    change to either `num_rows` or `num_cols` will completely change the skyscraper’s
    look. You’ll learn more about the advantages of this sort of organization in the
    next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Triple Nesting to Create a 3D Grid of Shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also draw a 3D grid of shapes by adding another layer of nesting—that
    is, by putting a loop inside a loop, inside a loop—although this might take a
    while to render since it will generate a large number of shapes ([Figure 4-11](#figure4-11)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![f04011](image_fi/279547c04/f04011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4-11: A nested `for` loop representing the RGB color space'
  prefs: []
  type: TYPE_NORMAL
- en: This *triple nesting* essentially uses a third loop to repeat a grid of shapes.
    The preceding design uses three nested loops to draw a cube representing the RGB
    (red, green, blue) color space. The `color` transformation takes a 3D vector indicating
    the percentage of red, green, and blue light that should be represented in the
    color of the shape. Since RGB uses 255 as the maximum value, dividing by 255 results
    in a decimal between 0 and 1\. The `color` transformation can be useful for debugging
    and organizing your designs, but it is not very useful for 3D printing, since
    the color of a 3D print depends entirely on the type of filament used. Thus, the
    `color` transformation is effective only in Preview mode and will not display
    in Render mode.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter introduced the concept of looping, which lets you repeat statements
    without rewriting the same code. Looping lets you tell the computer to do all
    of the work of rewriting a statement over and over again. Variables are an important
    part of looping in OpenSCAD, although they are not exclusive to looping. Variables
    can also help you keep track of important values. Through the use of arithmetic
    operators, variables can act as important starting points for other variables,
    which is useful when you want to make changes to your design.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some important tips for using loops:'
  prefs: []
  type: TYPE_NORMAL
- en: If you find yourself copying, pasting, and making minor changes to a repeating
    statement, consider generating the repetition with a loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use arithmetic to create sophisticated repetitions based on the pattern created
    by a loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give variables names that describe their purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing all of your variables at the top of your program makes it easy to
    change your design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `echo` function to output the value of a variable as a loop repeats.
    This can help you keep track of variables that are the result of complicated arithmetic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Label all `echo` function output so you can output several variables when you
    have nested loops.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to use variable values generated by a `for` loop in a `text` shape,
    remember to convert the number to a string with `str` (as mentioned in Chapter
    3).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `color` transformation is useful for debugging in Preview mode, but it does
    not translate to Render mode or 3D printing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comments are notes programmers leave to help explain their coding choices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSCAD ignores comments, but humans use comments to help figure out what coding
    statements are trying to accomplish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
