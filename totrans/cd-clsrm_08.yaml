- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Self-Directed Project-Based Learning
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我导向的基于项目的学习
- en: In this chapter, we’re going to explore software projects your students will
    develop from start to finish in a more self-directed fashion than in their previous
    projects. The project development process and your role in it will include the
    popular academic methodology *project-based learning (PBL)* for making student
    projects meaningful in a personal and educational sense. Also included will be
    the *Software Development Life Cycle (SDLC)*, which is used in the professional
    world to best ensure successful projects. Throughout these projects, you’ll serve
    more as a facilitator than a teacher, supporting students as they need it and
    providing guidance as opposed to directing their learning.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨学生从头到尾以更自我导向的方式开发的软件项目，远比他们以往的项目更具自主性。项目开发过程以及你在其中的角色将包括流行的学术方法论——*基于项目的学习（PBL）*，使学生的项目在个人和教育意义上都变得有意义。还将包括*软件开发生命周期（SDLC）*，这是在专业领域中用于确保项目成功的最佳方法。在这些项目中，你将更多地充当一个促进者而不是一个教师，支持学生在需要时提供帮助，并给予指导，而不是直接引导他们的学习。
- en: Explorable Explanations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可探索的解释
- en: Let’s first define the kind of software project your students should work on
    and the end goal you’ll help them achieve. Mathematics education uses the concept
    of *manipulatives* to make its abstract concepts more tangible. These are toys
    or other physical objects that students can play with to better understand ideas,
    such as place values, operations, and patterns. Figure 8-1 shows some examples
    of these educational tools, including a hundred board, base-ten blocks, counting
    sticks, fraction cubes, and an abacus-style counting device that connects the
    abstract to the real world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义学生应当参与的那种软件项目，以及你将帮助他们实现的最终目标。数学教育使用*教具*的概念，将抽象概念转化为更具形象性的东西。这些是学生可以操作的玩具或其他物理物件，有助于他们更好地理解诸如位值、运算和模式等概念。图
    8-1 展示了这些教育工具的一些示例，包括百格板、十进制积木、计数棒、分数立方体和一种与算盘类似的计数工具，它们将抽象与现实世界连接起来。
- en: '![](image/CitC08_01_Manipulatives.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC08_01_Manipulatives.png)'
- en: 'Figure 8-1: Math manipulatives'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-1：数学教具
- en: Although these tools are very effective, they can be costly and take up physical
    space. As computers grew in popularity, academics and developers began creating
    online libraries of *virtual manipulatives*, software versions of these physical
    objects students could access freely, manipulate, and share. In 2011, software
    developers started talking about the concept of *explorable explanations*, which
    took the idea of a virtual manipulative and extended it into other academic subjects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些工具非常有效，但它们可能很昂贵，并且占用物理空间。随着计算机的普及，学者和开发者开始创建*虚拟教具*的在线库，这些是学生可以自由访问、操作和分享的物理对象的软件版本。2011
    年，软件开发者开始讨论*可探索的解释*的概念，这一概念将虚拟教具的思想扩展到了其他学科。
- en: An influential early explorable explanation was developed by Bret Victor, who
    initially coined the term. He programmed *reactive documents*, which were dynamic
    texts that allowed users to change fields in a paragraph, which in turn would
    change quantities attached to each field. For example, a town planning commission
    weighing the width of public parking spaces against the number of spaces they
    want available might read, “At a width of eight feet per parking space, which
    surveys find insufficient, the town provides 160 spaces, which accommodate 97.5
    percent of peak demand.”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有影响力的早期可探索解释由 Bret Victor 开发，他最早提出了这个术语。他编程了*反应性文档*，这些动态文本允许用户更改段落中的字段，从而改变与每个字段相关的量。例如，一个城镇规划委员会在衡量公共停车位的宽度与他们希望提供的停车位数量时，可能会读到：“在每个停车位宽度为
    8 英尺的情况下，调查显示这一宽度不足，镇上提供了 160 个停车位，可以容纳 97.5% 的高峰需求。”
- en: Modifying the width of “eight feet” in the preceding statement would result
    in a cascade of changes to the rest of the text. For example, “At a width of eight-and-a-half
    feet per parking space, which surveys find adequate, the town provides 150 spaces,
    which accommodate 91.4 percent of peak demand.” Such documents, Victor argued,
    promoted transparency in calculations by making the author’s math explicit, prompted
    the audience to read actively rather than passively, and let the reader more deeply
    think about the subject matter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 修改前述陈述中“八英尺宽”会导致其余文本发生一连串变化。例如，“在每个停车位宽度为八英尺半的情况下，调查发现这是足够的，该镇提供了150个停车位，能够满足高峰需求的91.4%。”维克托认为，这样的文档通过使作者的数学计算显式化，促进了计算的透明性，促使观众主动阅读而非被动接受，并让读者能更深刻地思考主题内容。
- en: Explorable vs. Demonstrative vs. Drilling
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可探索性与演示性与练习
- en: To best understand what explorable explanations are, it’s helpful to understand
    what they’re not. Let’s say a student is interested in visual arts and wants to
    explore expressing mathematics in that medium. They might start exploring fractals,
    patterns that are infinite and look similar no matter how deeply you zoom in on
    them. The student finds an algorithm for generating binary tree fractals, tweaks
    the seed variables—inputs that impact how the tree will “grow”—and outputs the
    tree, as shown in Figure 8-2.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解什么是可探索的解释，了解它们不是怎样的也很有帮助。假设一个学生对视觉艺术感兴趣，并希望探索在这种媒介中表达数学的方式。他们可能开始探索分形——一种无论你放大多少次，都会看起来相似的无限图案。学生找到了一个生成二叉树分形的算法，调整了种子变量——影响树木“生长”的输入——并输出了树木，如图8-2所示。
- en: '![](image/CitC08_02_fractaltree.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC08_02_fractaltree.png)'
- en: 'Figure 8-2: A binary tree fractal'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-2：二叉树分形
- en: 'The student demonstrates an understanding of the algorithm’s inputs and outputs,
    explaining that for this tree they set a length of 170 to make it tall, a divergence
    of 30 to make it broad, and a reduction of 0.75 to make it branch out in such
    a lovely fashion. But as great as this demonstration is, it’s only a demonstration.
    The audience consumes the concept passively. To make this explanation explorable,
    it needs to allow for user inputs. In this case, the student knows what those
    inputs are: length, divergence, and reduction. So they add form inputs like those
    in Figure 8-3, allowing the user to change the inputs and see what grows when
    they click the Generate button. This way, users can engage with the application
    to explore the concept.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 学生展示了对算法输入和输出的理解，解释了对于这棵树，他们设置了170的长度使其变高，30的发散度使其变宽，以及0.75的缩减因子使其以如此美丽的方式分枝。但尽管这个演示很棒，它只是一个演示。观众被动地接受这个概念。为了让这个解释变得可探索，它需要允许用户输入。在这种情况下，学生知道这些输入是什么：长度、发散度和缩减因子。所以他们添加了类似图8-3中所示的表单输入，允许用户改变输入并在点击“生成”按钮后看到树木如何生长。这样，用户可以与应用程序互动，探索这个概念。
- en: '![](image/CitC08_03_fractalcontrols.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC08_03_fractalcontrols.png)'
- en: 'Figure 8-3: User inputs for a binary tree fractal generator'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-3：二叉树分形生成器的用户输入
- en: Adding user inputs also incorporates an important challenge for students. Users
    introduce a wild card to a program. They submit inputs the developer doesn’t expect
    and use the application in ways that can break it. Accounting for this new variable—the
    user—will be part of the quality assurance (QA) phase later. This extra effort
    to add an interface that abstracts away needing to edit code to change the inputs
    will be worth it when students get to see users engage with their project and
    instantly produce forests of unique trees, like those in Figure 8-4.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 添加用户输入还带来了学生面临的重要挑战。用户为程序引入了一个“变数”。他们提交开发者未预见的输入，并以可能破坏程序的方式使用应用程序。考虑到这个新变量——用户——将是后续质量保证（QA）阶段的一部分。为了添加一个抽象界面，使得无需编辑代码即可改变输入，这项额外的工作将在学生看到用户与他们的项目互动，并立刻生成独特树木森林（如图8-4所示）时，变得非常值得。
- en: '![](image/CitC08_04_FractalForest.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC08_04_FractalForest.png)'
- en: 'Figure 8-4: Binary tree fractals with different seed variables'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图8-4：具有不同种子变量的二叉树分形
- en: Be aware that user inputs alone won’t make a project explorable. For example,
    a video game that provides the user with flash cards to blast with correct answers
    just drills the user, putting them through their paces in a gamified medium. It’s
    a fun way to memorize facts, but the application doesn’t give users a deeper understanding
    of the subject matter the way an explorable explanation does. Video games can
    make for amazing explorable explanations, but make sure students know the difference
    between a game that empowers discovery and one that merely gamifies the memorization
    of facts. Keep this in mind when you’re helping your students define what they
    want to work on for their software project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要意识到，仅仅依靠用户输入并不能让一个项目变得可探索。例如，一个提供闪卡并让用户用正确答案“击败”它们的视频游戏，只是让用户进行反复练习，将他们通过一个游戏化的媒介进行训练。这是一个有趣的记忆事实的方式，但应用程序并没有像可探索的解释那样使用户对主题有更深的理解。视频游戏可以成为极好的可探索解释，但要确保学生知道一个游戏能赋能发现与一个仅仅是让记忆游戏化的游戏之间的区别。在帮助学生定义他们想要从事的软件项目时，记得牢记这一点。
- en: A Driving Question
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个驱动问题
- en: Since the term was first introduced, the concept of explorable explanations
    has broadened to include applications that explore all kinds of concepts. With
    graphing and charting frameworks, students can develop visualizations that explore
    mathematical and statistical concepts. With physics engines, students can develop
    apps that simulate Newton’s three laws of motion. With 3D modeling frameworks
    and open source chemistry specifications, students can set up visualizations of
    complex molecules. In the subject of biology, students can simulate the process
    of natural selection through evolutionary algorithms.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 自从这个术语首次提出以来，可探索的解释的概念已经扩展到包括探索各种概念的应用。通过图形和图表框架，学生可以开发出探索数学和统计概念的可视化工具。通过物理引擎，学生可以开发出模拟牛顿三大运动定律的应用程序。通过3D建模框架和开源化学规格，学生可以设置复杂分子的可视化。在生物学科中，学生可以通过进化算法模拟自然选择的过程。
- en: On the humanities side, students can extend their prose with interactive features
    like pop-up citations or write interactive fiction that uses links instead of
    physical pages. Students interested in history can develop interactive timelines
    with links to primary sources or integrate with online maps to illustrate famous
    events.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在人文学科方面，学生可以通过互动功能扩展他们的散文，比如弹出式引用，或者编写互动小说，使用链接代替实体页面。对历史感兴趣的学生可以开发互动时间线，链接到原始资料，或与在线地图集成，展示著名事件。
- en: 'Once they have an idea of what they want to build, students must clearly articulate
    what they envision into a driving question. This question could be product oriented,
    such as “How do I write a chatbot that answers questions about the Revolutionary
    War?” It could be role oriented, as in “If I were a data scientist, how would
    I analyze the use of passive voice in *Pride and Prejudice*?” Either way, the
    question should be action oriented: it should help set the project scope and focus
    the student’s efforts.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他们有了自己想要构建的想法，学生必须清晰地表达他们的愿景，并将其转化为一个驱动问题。这个问题可以是面向产品的，例如：“我如何编写一个能够回答关于美国革命战争问题的聊天机器人？”它也可以是面向角色的，例如：“如果我是数据科学家，我如何分析《傲慢与偏见》中被动语态的使用？”无论哪种方式，问题应该是面向行动的：它应该帮助确定项目的范围，并集中学生的努力。
- en: When refining their driving question, students need to consider why the project
    is relevant and if the product can meet a local need to satisfy the essentials
    of PBL. In the SDLC, when developing a product, the team must determine who its
    *stakeholders* are. These are the people who have an interest in seeing the project
    succeed and help define what success looks like. You, as the educator and facilitator,
    are one crucial stakeholder, overseeing the technical aspects of the solution.
    Other stakeholders will be the end users, likely other students who will engage
    with the product and learn from it. A *subject-matter expert* *(SME)* (pronounced
    “shmee”) will also be involved. This person knows the business, can explain the
    requirements, and can verify the software meets those requirements accurately.
    For your students, this person will most likely be a teacher who best understands
    the subject for which they’re coding.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在完善他们的驱动问题时，学生需要考虑为什么这个项目是相关的，以及产品是否能够满足当地的需求，从而满足PBL的基本要素。在SDLC（软件开发生命周期）中，开发产品时，团队必须确定谁是其*利益相关者*。这些人对项目成功有兴趣，并帮助定义什么才算是成功。作为教育者和引导者，你是一个重要的利益相关者，负责监督解决方案的技术方面。其他利益相关者将是最终用户，可能是其他学生，他们将与产品互动并从中学习。*主题专家*（*SME*）（发音为“shmee”）也将参与其中。这个人了解业务，可以解释需求，并能验证软件是否准确地满足这些需求。对于你的学生来说，这个人最有可能是最了解他们正在编程的学科的老师。
- en: Project-Based Learning and the Software Development Life Cycle
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于项目的学习与软件开发生命周期
- en: With PBL, students take on long-term projects that deeply immerse them in answering
    an educationally relevant question that’s also of personal interest to them. The
    project development process requires critical thinking, creativity, communication,
    and inquiry. The student will move from understanding the academic content to
    applying it for more authentic subject matter comprehension.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在PBL中，学生承担长期项目，深度参与回答一个具有教育意义的且对他们个人感兴趣的问题。项目开发过程需要批判性思维、创造力、沟通能力和探究能力。学生将从理解学术内容转向应用这些内容，以便更真实地理解学科内容。
- en: PBL empowers students to construct their own understanding. Explorable explanations
    empower their users to interact with concepts in a dynamic way for deeper understanding.
    In this way, explorable explanations are code projects that perfectly complement
    PBL.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PBL（基于项目的学习）使学生能够构建自己的理解。可探索的解释使用户能够以动态的方式与概念互动，以便更深入地理解。从这个角度来看，可探索的解释是完美补充PBL的代码项目。
- en: Additionally, PBL develops skills students will need in college and throughout
    their careers. Students will foster an aptitude for respectful collaboration as
    they work with SMEs who will make sure the end product meets the local need. Independently
    working through a project requires inquisitiveness, accountability, self-motivation,
    and persistence. These are habits of mind that will benefit students throughout
    their lives.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，PBL还培养学生在大学及其整个职业生涯中需要的技能。学生将在与主题专家（SME）合作时培养尊重合作的能力，确保最终产品能够满足当地需求。独立完成项目需要好奇心、责任感、自我驱动和毅力。这些思维习惯将有益于学生一生。
- en: 'There are slight variations in how different organizations define the essentials
    of PBL; in this chapter, I’ll note several characteristics on which there is consensus:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不同组织在定义PBL的基本要素时会有一些细微的差异；在本章中，我将列出几个大家达成共识的特点：
- en: The project engages *significant content*, meaning the project focus must be
    educationally relevant and address a meaningful problem.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目涉及*重要内容*，意味着项目的重点必须具有教育意义，并解决一个有意义的问题。
- en: The project question triggers a *need to know* in the student because it’s intrinsically
    relevant to them and motivates them to want to learn more.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目问题激发了学生的*需求认知*，因为它与他们自身密切相关，并激励他们想要学习更多。
- en: A well-articulated *driving question* sets a focus for the project and the scope.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表达清晰的*驱动问题*为项目设置了焦点和范围。
- en: Empowering student *voice and choice* allows students to follow their own paths
    of inquiry and gives them freedom to decide how they want to proceed.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赋予学生*声音和选择*的权力，使学生能够按照自己的探究路径前进，并让他们自由决定如何进行。
- en: As students work on their projects, they have extended opportunities for *inquiry
    and innovation*.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在学生进行项目工作时，他们有更多机会进行*探究和创新*。
- en: These opportunities are followed by *feedback and revision* of their projects.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些机会紧随其后的是对他们项目的*反馈和修订*。
- en: All these efforts culminate into a *publicly presented product*.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有这些努力最终汇聚成一个*公开展示的产品*。
- en: These projects fall under the category of *computational artifacts,* covered
    in Chapter 1, where students produce tangible outputs related to computer science.
    Topics mentioned were program development, iterative development, debugging, feedback,
    documentation, and project management from the computer science standards. These
    are all subjects students will need to engage with in the project development
    process. As noted in “Educational Benefits” [on page 23](CitC_c02.xhtml#_idTextAnchor032),
    code projects are an ideal match for PBL.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目属于*计算性工件*类别，涵盖了第 1 章，学生制作与计算机科学相关的有形输出。提到的主题包括程序开发、迭代开发、调试、反馈、文档编写和项目管理，这些都是计算机科学标准中提到的内容。学生需要在项目开发过程中涉及这些主题。正如在《教育益处》[第
    23 页](CitC_c02.xhtml#_idTextAnchor032)中所述，代码项目与 PBL 是理想的匹配。
- en: PBL is academically focused, but as mentioned earlier, organizations in the
    professional world use the SDLC to manage their software projects. SDLC has six
    stages, and different organizations give different names to each stage. Organizations
    might also group the stages or execute them in diverse ways depending on their
    project management methodology. Figure 8-5 shows the different stages in the development
    process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PBL 以学术为重点，但正如前面提到的，职业世界中的组织使用 SDLC 来管理他们的软件项目。SDLC 有六个阶段，不同的组织为每个阶段起了不同的名字。组织还可能根据他们的项目管理方法将这些阶段进行分组或以不同方式执行。图
    8-5 展示了开发过程中的不同阶段。
- en: '![](image/CitC08_05_SDLC.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](image/CitC08_05_SDLC.png)'
- en: 'Figure 8-5: The stages of SDLC'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8-5：SDLC 的阶段
- en: The first stage, *requirements*, is where the developer or business analyst
    documents the details of the business need. The *design* phase is where the solution
    is architected. This is followed by the *development* phase when the actual code
    is written or the system is configured. Once the project reaches a point of stability,
    the *quality assurance* phase tests the application for bugs and to ensure it
    meets the business requirements. The product then goes live in the *deployment*
    phase, and its stability is monitored in the *maintenance* phase, which continues
    for the life of the system. The maintenance phase is shown leading to requirements
    as new feature requests or software enhancements start the process again.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段，*需求*，是开发者或业务分析师记录业务需求详细信息的地方。*设计*阶段是解决方案架构的地方。接下来是*开发*阶段，实际代码被编写或系统被配置。当项目达到稳定状态时，*质量保证*阶段对应用进行测试，以查找错误并确保它符合业务需求。产品随后进入*部署*阶段并上线，在*维护*阶段监控其稳定性，该阶段将持续到系统的生命周期结束。维护阶段被展示为指向需求，因为新的功能请求或软件增强开始时，整个过程将重新启动。
- en: As we’ll see shortly, there are many places where the stages of SDLC facilitate
    the essential characteristics of PBL; for example, the QA stage of SDLC is very
    similar to the feedback and revision aspect of PBL. In addition, the publicly
    presented project part of PBL is very much like the deployment phase of SDLC.
    These parallels exist as early as the start of the project, where developers plan
    and define their independent code project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们稍后将看到的，SDLC 的各个阶段在促进 PBL 的基本特征方面有许多地方相似；例如，SDLC 的 QA 阶段与 PBL 的反馈和修订方面非常相似。此外，PBL
    的公开展示部分非常像 SDLC 的部署阶段。这些相似之处从项目开始时就存在，开发者计划并定义他们独立的代码项目。
- en: Requirements
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求
- en: The first step in launching your student projects is to define what those projects
    are. For computer science, there are many kinds of computational artifacts that
    students can produce. Several of these projects don’t require coding, such as
    test plans, use cases, or flowcharts. But in this chapter, we’ll focus on building
    a software application because such a project involves creating many of the ancillary
    artifacts surrounding SDLC.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启动学生项目的第一步是定义这些项目是什么。对于计算机科学来说，学生可以制作许多类型的计算性工件。这些项目中有些不需要编写代码，比如测试计划、用例或流程图。但在本章中，我们将重点讨论构建软件应用程序，因为这样的项目涉及创建许多与
    SDLC 相关的辅助工件。
- en: A start-to-finish software project inherently addresses numerous topics in the
    computer science curriculum, meeting the need for PBL to involve significant content.
    But building applications also has great potential to address topics in other
    subjects at your school, provide services to other educators, and highlight the
    value of your computer science program in the community. Have your students think
    about the kinds of software they could write to explore topics in their other
    classes. By building an application that explores a concept covered in a non–computer
    science classroom, the student project becomes service oriented as they define
    a product that other students can learn from and other teachers can appreciate.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一个从头到尾的软件项目本身涵盖了计算机科学课程中的多个主题，满足了PBL（项目式学习）需要涉及重大内容的要求。但构建应用程序也具有极大的潜力，能够涉及学校其他学科的主题，为其他教育工作者提供服务，并展示计算机科学项目在社区中的价值。让学生思考他们可以编写什么样的软件，来探索其他课堂上的主题。通过构建一个探讨非计算机科学课堂中所学概念的应用程序，学生的项目变得具有服务导向性，因为他们定义了一个其他学生可以学习、其他教师可以欣赏的产品。
- en: With a project idea that allows them self-expression, a driving question to
    focus their efforts, and stakeholders to define the details of how it should work,
    students will begin by documenting all this information into a *project proposal*.
    This is a living document that will change as they dive into the work. Project
    proposals can take several forms. Generally, it’s best to keep them brief and
    to the point for busy decision makers in an organization. In the professional
    world, project proposals explain the *business need* or *opportunity*, what service
    could benefit the organization or community, or what problem could be solved.
    In student projects, this could describe a subject covered in class that students
    have difficulty with or find unengaging. After a description of the need, the
    project proposal then provides an overview of the solution and how it satisfies
    this need. The project proposal should also list the stakeholders—teachers and
    students—who will evaluate the project and how well it meets its defined goals.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 学生将通过一个能够自我表达的项目构想、一个驱动问题来集中精力，并与相关方一起定义其运作的细节，开始将所有这些信息记录到*项目提案*中。这是一个活文档，会随着他们深入工作而变化。项目提案可以有多种形式。通常，最好保持简洁明了，方便组织中的决策者快速理解。在职业领域中，项目提案解释了*商业需求*或*机会*，该服务可能如何惠及组织或社区，或者可以解决什么问题。在学生项目中，这可能描述了学生在课堂上遇到困难或觉得无趣的一个主题。在描述需求之后，项目提案接着提供了解决方案的概述，以及它如何满足这一需求。项目提案还应列出评估项目及其目标达成情况的相关方——教师和学生。
- en: As the project facilitator, your role is to evaluate the project scope and feasibility
    from a technical perspective. In this book, the code examples have been limited
    to client-side JavaScript, which also limits the scope of what students can do
    with their applications. Does the project proposal require saving user data between
    sessions? If so, the application will need a database and the learning curve required
    to set it up. Does the solution need to present personalized features based on
    saved data? If so, the application will require server-side code and a more comprehensive
    development environment.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为项目负责人，你的角色是从技术角度评估项目范围和可行性。在本书中，代码示例仅限于客户端JavaScript，这也限制了学生在应用程序中可以做的事情。项目提案是否需要在不同会话之间保存用户数据？如果是的话，应用程序将需要一个数据库，并且需要学习如何设置它。解决方案是否需要基于保存的数据呈现个性化功能？如果是这样，应用程序将需要服务器端代码和更全面的开发环境。
- en: If the student’s vision exceeds what is possible within the project time frame,
    have them scale back the scope. This can mean scaling back the application’s initial
    functionality as a starting point, with the intent to iteratively enhance it as
    time allows. Ideally, explorable explanations are meant to be simple, straightforward,
    and fun toys that engage and enlighten the user. They should mostly avoid needing
    a heavy information technology infrastructure to run on. Once students have this
    starting point, they can continue to the design and development phases of the
    SDLC.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果学生的愿景超出了项目时间框架内可实现的范围，建议让他们缩小项目的范围。这可以意味着将应用程序的初始功能缩小为起点，计划在时间允许的情况下逐步增强它。理想情况下，可探索的解释应简单、直接，并且是有趣的工具，能够吸引并启发用户。它们应该尽量避免需要复杂的信息技术基础设施来运行。一旦学生有了这个起点，他们就可以继续进行软件开发生命周期（SDLC）的设计和开发阶段。
- en: Design and Development
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计与开发
- en: With an initial project proposal setting the project scope, students begin the
    design and development phases. Here they research what is needed to build their
    envisioned application and begin committing code to making it happen. These phases
    parallel the PBL characteristics of inquiry and innovation, where students internalize
    existing research and conceive new ideas from what they’ve learned.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 随着初步项目提案设定了项目范围，学生开始设计和开发阶段。在这里，他们研究构建自己设想的应用程序所需的内容，并开始提交代码来实现这一目标。这些阶段与PBL（基于问题的学习）的探究和创新特点相符，学生在这一过程中内化现有的研究成果，并从学到的知识中构思新的想法。
- en: The project proposal is a brief, high-level overview of the project and its
    goals, but the *design document* provides the details of how the software will
    work. How to properly document an application’s design is a question that has
    many correct answers. Some organizations document the flow of how the user will
    interact with the software step-by-step and each use case. Other organizations
    document the various software components, such as the database, frontend, and
    third-party services, as well as what is responsible for what functions and how
    they’ll work together. Others use flowcharts, and some rely strictly on comments
    in the code. Unfortunately, many organizations don’t document at all, and that’s
    a problem.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 项目提案是对项目及其目标的简短高层概述，而*设计文档*提供了软件如何工作的详细信息。如何正确地记录应用程序的设计是一个有许多正确答案的问题。有些组织记录用户与软件交互的步骤流程和每个用例。其他组织则记录各种软件组件，如数据库、前端和第三方服务，以及每个组件负责的功能和它们如何协作。还有些组织使用流程图，另一些则严格依赖代码中的注释。不幸的是，许多组织根本不进行文档记录，这就是一个问题。
- en: 'It’s important that students document their solutions to communicate in detail
    how they work to stakeholders. When we get to the QA phase of the SDLC, testers
    and peer reviewers will use the design documentation to verify that the application’s
    inputs and outputs match the requirements. When the software goes into the SDLC
    maintenance phase, the design documentation will be an invaluable resource to
    future developers and administrators who will inherit it and be responsible for
    keeping it running. When writing and rewriting this documentation, students should
    remember they’re writing for several audiences: their technical peers who will
    work with the code, nontechnical peers who will test the application, users who
    need to navigate the application, and themselves as a means of tracking their
    development progress.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 学生记录他们的解决方案非常重要，以便向利益相关者详细说明他们的工作过程。当我们进入SDLC的QA阶段时，测试人员和同行评审人员将使用设计文档来验证应用程序的输入和输出是否符合需求。当软件进入SDLC的维护阶段时，设计文档将成为未来开发人员和管理员的宝贵资源，他们将继承这些文档并负责保持系统的正常运行。在编写和重写这些文档时，学生应该记住他们是为多个受众写作的：与代码合作的技术同行、将测试应用程序的非技术同行、需要操作应用程序的用户，以及作为跟踪自己开发进度的工具的自己。
- en: When planning how they’ll tackle the project, students should research existing
    solutions. At this stage in the professional world, the question of *build or
    buy* becomes relevant. Are there existing products and solutions that can meet
    the business need with minimal customization or is it better to build an application
    from scratch? Using an existing solution costs less in terms of money for the
    organization and development time for the student. But doing so also makes for
    a less customizable product because the developer is constrained by the existing
    application’s features or overwhelmed by the complexity of a product with many
    years of development behind it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划如何处理项目时，学生应该研究现有的解决方案。在职业世界中，这时*自建还是购买*的问题变得至关重要。是否有现成的产品和解决方案能够以最小的定制满足业务需求，还是从零开始构建应用程序更好？使用现有解决方案在组织的资金和学生的开发时间上花费较少。但这样做也会导致产品的可定制性较差，因为开发者受限于现有应用程序的功能，或者被一个开发多年、功能复杂的产品所压倒。
- en: Working from existing solutions is not an all-or-nothing choice. Software is
    made up of many different components, all of which might have existing solutions
    online. Remind students to decompose the entire product into smaller, more manageable
    pieces. For example, a student who intends to draw a number mandala, like the
    one described in Chapter 1, has many small problems to solve. For example, they
    must figure out how to draw pictures in the web browser, how to draw numbers,
    how to position numbers along the lines of a clock face, how to radiate those
    numbers outward along an imaginary spiraling line, and how to test for factors
    and primes. With seven billion humans on Earth, someone has probably solved each
    of these problems and has posted it to a forum or code repository.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The smaller and more numerous the pieces we can decompose to, the better. On
    a project level, each little problem to solve is a milestone we can use to track
    progress and clearly define roadblocks. On a personal level, there’s a great feeling
    of satisfaction that comes with scratching items off a to-do list and a sense
    of accomplishment that will keep students moving forward.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: This section combined the design and development phases of the SDLC because
    they’re iterative phases that inform one another. Well-researched designs are
    subject to change when the developer starts writing code and inevitably runs into
    unexpected complications, such as a chosen technology that doesn’t quite meet
    the project’s needs or, as happens very often, a planned feature that turns out
    to be more complex to develop than anticipated. When these problems happen, it’s
    important to revisit the design documentation and update it accordingly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: As the facilitator, you’ll monitor each student’s development progress with
    check-ins each day so you can meet with them. In the professional world, these
    are known as *stand-up meetings*, where each member of the team gives a brief
    update on what they accomplished since the last stand-up and what they’re working
    on now. To keep the meetings brief, limit them to groups of no more than five
    students each, and coach students on providing their updates as quickly as possible
    to be respectful of everyone’s time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: This is also when students can notify you of roadblocks they’re encountering.
    Acknowledge the student’s difficulty, make a note to follow up with them on it
    in more detail, and then schedule time to meet with the student to collaborate
    on solving the problem. In Chapter 9, we’ll review techniques and strategies for
    helping students who are experiencing difficulties.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: It’s also a good idea to have the student check in with their SME from time
    to time and make sure the project continues to meet the business need. It’s best
    to identify discrepancies between what is being developed and the educational
    requirements early on to prevent wasted effort. As the students’ applications
    grow more stable, they’ll move into the formal SDLC testing phase.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Quality Assurance
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The QA phase of the SDLC begins when students believe they have a presentable
    product. As the developer, they’ve personally tested their applications and feel
    they’re ready for others to try them. We’ll cover three types of QA testing in
    this section.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC（软件开发生命周期）的QA（质量保证）阶段开始于学生认为他们有一个可以展示的产品。作为开发者，他们已经亲自测试过自己的应用程序，觉得它们已经准备好让别人试用。我们将在本节中介绍三种类型的QA测试。
- en: '*Functional testing* is where the application is treated like a black box and
    only its inputs and outputs are reviewed. Here students give their applications
    to their peers who can interact with the product in every possible way they think
    a user might. The testers’ goal is to try to make the application behave in an
    unintended way.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*功能测试*是在这里应用程序被当作一个黑盒来处理，只检查它的输入和输出。在这里，学生将他们的应用程序交给同伴，后者会尝试从用户可能的各种方式与产品互动。测试者的目标是尽力让应用程序表现出非预期的行为。'
- en: 'This includes testing user inputs they might think are improbable or illogical.
    For example, a user might submit “−100” in a field that expects a positive quantity
    and causes the application to crash. As a software developer, it’s tempting to
    blame the user for the bad input. But in the professional world, the application
    must validate every user input and elegantly inform the user if they made an error.
    Here’s a popular joke about functionality testing: “A QA tester walks into a bar.
    They order one beer. They order zero beers. They order 1,000 beers. They order
    qwerty beers . . .”'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括测试用户输入，他们可能认为这些输入不太可能或不合逻辑。例如，用户可能在期望正数的字段中提交“−100”，从而导致应用程序崩溃。作为软件开发者，容易将问题归咎于用户的错误输入。但在专业领域，应用程序必须验证每个用户输入，并优雅地提醒用户如果他们犯了错误。这里有一个关于功能测试的流行笑话：“一个QA测试员走进酒吧。他们点了一杯啤酒。他们点了零杯啤酒。他们点了1000杯啤酒。他们点了qwerty杯啤酒……”
- en: Once the application satisfies functional testing, it’s stable enough for *user-acceptance
    testing (UAT)*. Here the SME reviews the application for content accuracy and
    to ensure it meets the business requirements. In the case of our explorable explanations,
    the teacher who best understands the concept being explored reviews the application
    for content accuracy and potentially offers corrections or suggestions for additional
    inputs, outputs, and features.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过了功能测试，就足够稳定，可以进行*用户验收测试（UAT）*了。在这里，SME（领域专家）会审查应用程序的内容准确性，并确保它符合业务需求。在我们的可探索解释示例中，最了解所探讨概念的教师会审查应用程序的内容准确性，并可能提出修改意见或建议增加输入、输出和功能。
- en: A final collaborative QA exercise in this phase is to conduct a *code review*,
    where developers read one another’s code and offer suggestions to improve it.
    This is very similar to *peer review* exercises in English classes, where students
    read each other’s papers and provide critical feedback. A good practice is for
    reviewers to first spend time articulating all the aspects they like about the
    code they’re reviewing. Have them explain what they think is clever and what they
    learned about coding from reviewing it. Then, with an eye toward tactful language,
    they can suggest ways they think the developer could improve the code or suggest
    additional features they would like to see.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段的最后一次协作QA练习是进行*代码审查*，开发者互相阅读彼此的代码并提供改进建议。这与英语课中的*同行评审*练习非常相似，在这些练习中，学生们阅读彼此的论文并提供批评反馈。一个好的做法是，评审者首先花时间阐述他们喜欢代码的各个方面。让他们解释他们认为聪明的地方，以及通过审查这段代码学到了什么。然后，考虑到语言的得体性，他们可以提出开发者可以改进代码的方式，或者建议他们希望看到的额外功能。
- en: A common complaint about peer reviews in academic settings is that students
    aren’t experts and might offer criticisms that aren’t valid. As the facilitator
    during this code review exercise, you’ll need to review all reviews and provide
    feedback on their tactfulness and accuracy before they go to the reviewee. Students
    who can learn to communicate their criticisms in a healthy, respectful way as
    well as accept criticisms and improve on them learn a valuable leadership skill
    that will benefit them throughout life.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在学术环境中，关于同行评审的一个常见抱怨是，学生不是专家，可能会提出不合理的批评。作为本次代码审查练习的主持人，你需要审查所有的评审意见，并在它们送交被评审者之前，提供关于其得体性和准确性的反馈。能够学会以健康、尊重的方式沟通批评，并接受批评并改进的学生，能学到一项宝贵的领导技能，这将终生受益。
- en: QA is another iterative process that has the developer repeatedly revisiting
    and revising their application. As the facilitator, you should assure students
    that this is all part of the process. Many commercial applications have entire
    teams of QA testers reviewing them, and they still need software patches after
    going live. There is nothing to be discouraged about in the QA phase. In fact,
    students should feel increasing levels of confidence as their applications begin
    to pass various QA tests. Soon, their software will be ready for the deployment
    phase.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: QA是另一个迭代过程，开发者需要反复回顾和修订他们的应用程序。作为指导者，你应该向学生保证，这一切都是过程的一部分。许多商业应用程序都有整个QA测试团队进行审核，即便如此，它们在上线后仍然需要软件补丁。QA阶段没有什么好气馁的。事实上，当学生的应用程序开始通过各种QA测试时，他们应该感到越来越自信。很快，他们的软件就会准备好进入部署阶段。
- en: Deployment
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: Once an application passes its QA, UAT, and code reviews with flying colors,
    it moves to the deployment phase of the SDLC, which is the point where the application
    goes live. In software development, this is when the application is posted online
    to a publicly accessible URL or made available to download. In Chapter 10, we’ll
    explore code repositories that facilitate sharing the application with the world,
    but the deployment covered here is meant to satisfy academic requirements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序通过了质量保证（QA）、用户验收测试（UAT）和代码审查，它将进入软件开发生命周期（SDLC）的部署阶段，这是应用程序上线的时刻。在软件开发中，这意味着应用程序会发布到一个公开可访问的网址，或者提供下载。在第10章中，我们将探讨有助于将应用程序分享给世界的代码仓库，但这里讨论的部署是为了满足学术要求。
- en: In PBL, the end of all our collaborative efforts culminates in a publicly presented
    project. This is an event in which students showcase their projects for an audience
    of teachers, other students, and parents. More important, this presentation reaches
    beyond the computer science classroom and promotes the students’ work in the larger
    school community and the community beyond the school.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目式学习（PBL）中，我们所有协作努力的终点是一次公开展示的项目。这是一个学生展示他们项目的活动，观众包括老师、其他学生和家长。更重要的是，这次展示超越了计算机科学课堂，将学生的作品推广到更大的学校社区和校外社区。
- en: These presentations are a comprehensive exercise in communication. Students
    communicate their learning process, technical understanding, subject matter understanding,
    and how these all contributed to their computational artifacts. These artifacts
    include the project proposal, design documentation, software code, testing outcomes,
    and the user-facing application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些展示是一次全面的沟通练习。学生们展示他们的学习过程、技术理解、学科理解，以及这些如何为他们的计算成果做出贡献。这些成果包括项目提案、设计文档、软件代码、测试结果和面向用户的应用程序。
- en: Students will need time to practice their presentations, and feedback on their
    presentations is essential. You don’t want your students to build an amazing application
    and then fall short of presenting it in a way that communicates its significance
    and depth of achievement. Software developers are often boxed into the stereotype
    of being socially awkward and lacking good communication skills. Having the ability
    to explain complex technical concepts so people unfamiliar with the subject can
    understand is a prized skill in the business world and a proficiency your students
    should value.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 学生们将需要时间来练习他们的展示，展示反馈是至关重要的。你不希望你的学生做出一个令人惊叹的应用程序，却未能以一种能够传达其重要性和成就深度的方式进行展示。软件开发人员常常被贴上社交笨拙且缺乏沟通技巧的刻板印象。能够解释复杂的技术概念，使不熟悉该主题的人也能理解，是商业世界中一种宝贵的技能，是学生们应该重视的能力。
- en: This communication also includes conveying your failures. According to the Project
    Management Institute, only 64 percent of software projects meet their goals, and
    that’s for businesses with professional software developers. There are many unknowns
    in programming projects, and this difficulty is exacerbated for novice programmers.
    Students can learn a lot from a failure. Many organizations hold a *project postmortem*,
    no matter whether the project succeeds or fails, to analyze how the project went,
    what worked, and what didn’t. So, give your students permission to fail. As long
    as they document that failure and demonstrate an understanding of why and how
    the problems were too difficult to overcome, their time won’t have been wasted.
    A great deal of wisdom can come from project failure, and students will have realistic
    insights for the next project they take on.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这种沟通也包括传达你的失败。根据项目管理协会的数据，只有64%的软件项目能够达成其目标，而且这仅适用于有专业软件开发人员的企业。编程项目中有许多未知因素，这种难度对于新手程序员来说尤为严重。学生可以从失败中学到很多。许多组织会举行*项目事后分析*，无论项目成功与否，都会分析项目的进展、哪些方面有效，哪些方面无效。所以，允许学生失败吧。只要他们能够记录下失败，并展示出理解为何以及如何这些问题难以克服，他们的时间就没有白费。项目的失败可以带来大量的智慧，学生也将对下一次项目有更实际的认识。
- en: 'The presentations should be an event: there are many ways to let the students
    shine. Giving each student a bit of time on stage with a projector is a great
    way to practice public speaking. You could also set up a fair-style environment
    where each student has a table and some presentation materials, such as a laptop.
    Attendees can roam around the room networking with students on a more conversational
    level. Online portfolios with code repositories and documentation can also supplement
    the presentations, allowing attendees to more deeply explore the projects beyond
    the event.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 展示应该是一个盛事：有很多方式可以让学生展示他们的才华。给每个学生一些时间在舞台上使用投影仪，这是练习公共演讲的好方法。你也可以设置一个类似博览会的环境，让每个学生都有一张桌子和一些展示材料，比如一台笔记本电脑。与会者可以在房间里四处走动，与学生进行更具对话性质的交流。在线作品集、代码库和文档也可以补充展示，允许与会者在活动之外更深入地探索项目。
- en: Summary
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we explored how to facilitate student code projects that foster
    self-­motivation, free inquiry, deep sustained engagement with computer science
    concepts, and translating another academic topic of student interest into computational
    thought. These projects adhere to the essentials of PBL, such as meaningfulness,
    relevance, student voice and choice, free inquiry and innovation, feedback and
    revision, and finally a publicly presented project. At the same time, these projects
    follow phases of the SDLC including requirements, design and development, QA,
    and deployment.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何促进学生的编码项目，这些项目能够激发学生的自我动机、自由探究、与计算机科学概念的深入持续接触，以及将学生感兴趣的其他学科主题转化为计算思维。这些项目遵循PBL的基本原则，如意义性、相关性、学生的声音和选择、自由探究与创新、反馈与修订，最终还有一个公开展示的项目。同时，这些项目也遵循SDLC的各个阶段，包括需求分析、设计与开发、质量保证以及部署。
- en: We did not cover the maintenance phase of the SDLC. What happens after the project
    goes live? In PBL, the project presentation is the shining moment in which the
    project concludes, and the student has a tangible accomplishment of which to be
    proud. In software development, the code going into production is an important
    milestone, but not the end of the process. Chapter 10 covers how these student
    projects will live on in your school’s code repository as a resource for future
    classes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有涵盖SDLC的维护阶段。项目上线之后会发生什么？在PBL中，项目展示是项目结束的高光时刻，学生有了一个切实的成就，值得骄傲。在软件开发中，代码上线是一个重要的里程碑，但并不是过程的结束。第十章将讨论这些学生项目如何在你学校的代码库中存活下来，成为未来课堂的资源。
- en: In addition to these projects being a resource for future computer science students
    to learn and build from, by building explorable explanations, your students are
    creating applications from which students can learn concepts in other subjects.
    You’re bringing positive visibility to your school’s computer science department
    by providing a growing repository of specialized educational applications for
    other teachers to use in their classes. PBL makes students knowledgeable about
    a very specific subject, and hopefully you’ll learn as your students are learning.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些项目为未来的计算机科学学生提供学习和构建的资源外，通过构建可探索的解释，你的学生还在创建可以让其他学科学生学习概念的应用程序。你通过为其他教师提供一个不断增长的专门教育应用程序库，提升了你学校计算机科学系的正面影响力。项目式学习（PBL）使学生对一个非常具体的学科有深刻了解，
    希望在学生学习的过程中，你也能有所收获。
- en: In the next chapter, we’ll learn about some of the challenges students will
    face when tackling coding projects and how you can provide the support and encouragement
    to see them through to success.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章节，我们将学习学生在解决编码项目时将面临的一些挑战，以及你如何提供支持和鼓励，帮助他们成功完成。
