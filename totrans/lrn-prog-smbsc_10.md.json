["```\n1 ' GlumGluff.sb\n2 TextWindow.Write(\"How many glum-gluffs? \")\n3 glumGluffs = TextWindow.ReadNumber()\n4\n5 inches = 0.75 * glumGluffs               ' Converts to inches\n6 inches = Math.Round(inches * 100) / 100  ' Rounds to 2 decimal places\n7 TextWindow.WriteLine(\"That's about \" + inches + \" inches.\")\n```", "```\n 1 ' GlumGluff2.sb\n 2 TextWindow.Write(\"How many glum-gluffs? \")\n 3 glumGluffs = TextWindow.ReadNumber()\n 4\n 5 GlumGluffToInch()    ' Calls the subroutine\n 6 TextWindow.WriteLine(\"That's about \" + inches + \" inches.\")\n 7\n 8 ' This subroutine converts from glum-gluffs to inches\n 9 ' Input: glumGluff; the size in glum-gluff units\n10 ' Output: inches; the size in inches rounded to 2 decimal places\n11 Sub GlumGluffToInch\n12   inches = 0.75 * glumGluffs\n13   inches = Math.Round(inches * 100) / 100\n14 EndSub\n```", "```\nHow many glum-gluffs? 8.5\nThat's about 6.38 inches.\n```", "```\n 1 ' LandArea.sb\n 2 ' Calculates the area of the first triangle\n 3 side1 = 7\n 4 side2 = 20.6\n 5 side3 = 25\n 6 TriangleArea()\n 7 totalArea = area    ' Saves the result from the subroutine call\n 8\n 9 ' Calculates the area of the second triangle\n10 side1 = 30\n11 side2 = 14\n12 side3 = 22.3\n13 TriangleArea()\n14 totalArea = totalArea + area    ' Adds the new area\n15\n16 totalArea = Math.Round(totalArea * 100) /  100 ' Rounds the answer\n17 TextWindow.WriteLine(\"Area = \" + totalArea + \" square meters\")\n18\n19 ' Subroutine: computes the area of a triangle given its three sides\n20 ' Inputs: side1, side2, and side3; the length of the three sides\n21 ' Outputs: area; the area of the triangle\n22 ' Temporary variables: s; the semiperimeter\n23 Sub TriangleArea\n24   s = 0.5 * (side1 + side2 + side3)\n25   area = Math.SquareRoot(s * (s - side1) * (s - side2) * (s - side3))\n26 EndSub\n```", "```\nArea = 208.63 square meters\n```", "```\n 1 ' PepperDare.sb\n 2 player = 1  ' 1 for player, 2 for computer\n 3 pepper = Math.GetRandomNumber(10) ' Which card has the pepper\n 4\n 5 Again:\n 6 Pick()      ' Updates the two variables: card and name\n 7 If (card = pepper) Then\n 8   TextWindow.Write(\"Hot tamale, it's a pepper! \")\n 9   TextWindow.WriteLine(name + \" wins!\")\n10   TextWindow.WriteLine(\"\")\n11 Else\n12   TextWindow.Write(\"The card is blank. \")\n13   TextWindow.WriteLine(\"You put it back in and shuffle the deck.\")\n14   TextWindow.WriteLine(\"\")\n15   player = 3 - player   ' Switches the player\n16   Goto Again\n17 EndIf\n```", "```\n 1 Sub Pick\n 2   If (player = 1) Then\n 3     name = \"The computer\"\n 4     TextWindow.WriteLine(\"Your turn. Pick a card.\")\n 5   Else\n 6     name = \"The player\"\n 7     TextWindow.WriteLine(\"The computer picks a card.\")\n 8   EndIf\n 9\n10   TextWindow.Write(\"[Press any key...]\")\n11   TextWindow.PauseWithoutMessage()\n12   TextWindow.WriteLine(\"\")\n13\n14   card = Math.GetRandomNumber(10) ' Picks a random card\n15   Animate() ' Animates the delay in picking a card\n16 EndSub\n```", "```\n1 Sub Animate\n2   For N = 1 To card\n3     TextWindow.Write(\"-\")\n4     Program.Delay(100)\n5   EndFor\n6   TextWindow.Write(\"-> \")\n7 EndSub\n```", "```\nYour turn. Pick a card.\n[Press any key...]\n--> The card is blank. You put it back in and shuffle the deck.\n\nThe computer picks a card.\n[Press any key...]\n--------> The card is blank. You put it back in and shuffle the deck.\n\nYour turn. Pick a card.\n[Press any key...]\n---------> Hot tamale, it's a pepper! The computer wins!\n```", "```\n 1 ' Dragon_Incomplete.sb\n 2 SetUp()    ' Does one-time set up\n 3\n 4 NewGame()  ' Sets the parameters for a new game\n 5\n 6 UpdateUserInterface() ' Shows values on background image\n 7\n 8 NextMove:\n 9 GetChoice()     ' Displays options and gets the knight's choice\n10\n11 ProcessChoice() ' Processes the user's choice\n12\n13 DragonFire()    ' Now it's the dragon's turn\n14 Goto NextMove\n```", "```\n 1 Sub SetUp\n 2   GraphicsWindow.Title = \"Slay the Dragon\"\n 3   TextWindow.Title = GraphicsWindow.Title\n 4\n 5   GraphicsWindow.Width = 480\n 6   GraphicsWindow.Height = 380\n 7   GraphicsWindow.CanResize = 0\n 8   GraphicsWindow.FontSize = 14\n 9   GraphicsWindow.Left = 40\n10   ' Positions the text window\n11   TextWindow.Left = GraphicsWindow.Left + GraphicsWindow.Width + 20\n12   TextWindow.Top = GraphicsWindow.Top\n13\n14   path = Program.Directory\n15   GraphicsWindow.DrawImage(path + \"\\bkgnd.png\", 0, 0)\n16\n17   ' Creates text objects to show distance, arrows,\n18   ' shield strength, and message\n19   distText = Shapes.AddText(\"\")\n20   arrowsText = Shapes.AddText(\"\")\n21   shieldText = Shapes.AddText(\"\")\n22   msgText = Shapes.AddText(\"Draggy VS Good Knight\")\n23   Shapes.Move(distText, 60, 30)\n24   Shapes.Move(arrowsText, 200, 30)\n25   Shapes.Move(shieldText, 370, 30)\n26   Shapes.Move(msgText, 5, 362)\n27\n28   ' Loads the images for the knight, dragon, and arrow\n29   knightImg = Shapes.AddImage(path + \"\\knight.png\")\n30   dragon1Img = Shapes.AddImage(path + \"\\dragon1.png\")\n31   dragon2Img = Shapes.AddImage(path + \"\\dragon2.png\")\n32   arrowImg = Shapes.AddImage(path + \"\\arrow.png\")\n33   Shapes.Move(dragon1Img, 0, 250)\n34   Shapes.Move(dragon2Img, 0, 250)\n35   Shapes.Move(knightImg, 380, 250)\n36\n37   Shapes.HideShape(dragon2Img)\n38   Shapes.HideShape(arrowImg)\n39 EndSub\n```", "```\n1 Sub NewGame\n2   dist = 9 + Math.GetRandomNumber(10) ' 10 to 19\n3   arrows = Math.Floor(0.4 * dist)       ' 4 to 8\n4   shield = Math.Floor(0.4 * dist)       ' 4 to 8\n5   moveStep = 280 / dist                 ' Knight's move in pixels\n6 EndSub\n```", "```\n1 Sub UpdateUserInterface\n2   Shapes.SetText(distText, dist)\n3   Shapes.SetText(arrowsText, arrows)\n4   Shapes.SetText(shieldText, shield)\n5 EndSub\n```", "```\n 1 Sub GetChoice\n 2   AskAgain:\n 3   TextWindow.WriteLine(\"Select:\")\n 4   TextWindow.WriteLine(\"  [1] Move 1 step forward\")\n 5   TextWindow.WriteLine(\"  [2] Shoot an arrow\")\n 6   TextWindow.WriteLine(\"  [3] Stab the dragon (you have to be 1 step away)\")\n 7   TextWindow.Write(\"  Your choice [1-3]: \")\n 8\n 9   choice = TextWindow.ReadNumber()\n10   If((choice <> 1) And (choice <> 2) And (choice <> 3)) Then\n11     Goto AskAgain\n12   EndIf\n13\n14   If ((choice = 2) And (arrows = 0)) Then\n15     Shapes.SetText(msgText, \"You ran out of arrows! Borrow some from Link.\")\n16     Goto AskAgain\n17   EndIf\n18\n19   If ((choice = 3) And (dist > 1)) Then\n20     Shapes.SetText(msgText, \"You're too far to use your sword. Too bad\n       you can't train dragons.\")\n21     Goto AskAgain\n22   EndIf\n23\n24   Shapes.SetText(msgText, \"\")\n25   TextWindow.WriteLine(\"\")\n26 EndSub\n```", "```\n1 Sub ProcessChoice\n2   If (choice = 1) Then     ' Move-forward subroutine\n3     MoveKnight()\n4   ElseIf (choice = 2) Then ' Shoot-arrow subroutine\n5     ShootArrow()\n6   Else ' Stab subroutine\n7     StabDragon()\n8   EndIf\n9 EndSub\n```", "```\n 1 Sub MoveKnight\n 2   dist = dist - 1\n 3   Shapes.SetText(distText, dist)\n 4\n 5   Shapes.Move(knightImg, 100 + dist * moveStep, 250)\n 6\n 7   If (dist = 0) Then  ' Checks whether the knight touched the dragon\n 8     Shapes.SetText(msgText, \"The dragon swallowed you! You taste like chicken.\")\n 9     GameOver()\n10   EndIf\n11 EndSub\n```", "```\n1 Sub GameOver\n2   TextWindow.Pause()\n3   Program.End()\n4 EndSub\n```", "```\n 1 Sub ShootArrow\n 2   arrows = arrows - 1\n 3   Shapes.SetText(arrowsText, arrows)\n 4\n 5   range = Math.GetRandomNumber(dist)\n 6\n 7   ' Animates the arrow\n 8   pos1X = 100 + dist * moveStep\n 9   pos2X = 100 + (dist - range)* moveStep\n10   Shapes.Move(arrowImg, pos1X, 280)\n11   Shapes.ShowShape(arrowImg)\n12   Shapes.Animate(arrowImg, pos2X, 280, 2000)\n13   Program.Delay(2000)\n14   Shapes.HideShape(arrowImg)\n15\n16   If (range = dist) Then    ' You hit the dragon right on\n17     Shapes.SetText(msgText, \"Perfect shot. The dragon's dead! You kiss the\n       princess's frog.\")\n18     GameOver()\n19   Else\n20     Shapes.SetText(msgText, \"Your arrow missed! Robin Hood is giving lessons.\")\n21     Program.Delay(2000)     ' To read the message\n22   EndIf\n23 EndSub\n```", "```\n1 Sub StabDragon\n2   If (Math.GetRandomNumber(2) = 1) Then\n3     Shapes.SetText(msgText, \"You killed the dragon! You marry the princess\n      and 7 dwarves.\")\n4     GameOver()\n5   Else\n6     Shapes.SetText(msgText, \"Your sword missed! Good one, Lance-a-Little!\")\n7     Program.Delay(2000) ' To read the message\n8   EndIf\n9 EndSub\n```", "```\n 1 Sub DragonFire\n 2   Shapes.SetText(msgText, \"The dragon ignited his fire. The Pokemon run.\")\n 3   Shapes.HideShape(dragon1Img)\n 4   Shapes.ShowShape(dragon2Img)\n 5   Program.Delay(1000)\n 6   Shapes.HideShape(dragon2Img)\n 7   Shapes.ShowShape(dragon1Img)\n 8\n 9   If (Math.GetRandomNumber(2) = 1) Then ' Knight is hit\n10     If (shield = 0) Then                ' Shield is damaged\n11       Shapes.SetText(msgText, \"The dragon's fire BURNINATED you!\")\n12       GameOver()\n13     Else\n14       shield = shield - 1\n15       Shapes.SetText(shieldText, shield)\n16       Shapes.SetText(msgText, \"You're hit! Your shield became weaker. Use\n         the force!\")\n17     EndIf\n18   Else\n19     Shapes.SetText(msgText, \"The fire missed you! Aunt Mildred could've used\n       your luck.\")\n20   EndIf\n21 EndSub\n```"]