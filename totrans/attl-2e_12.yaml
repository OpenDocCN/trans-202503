- en: '12'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LOCALIZATION
  prefs: []
  type: TYPE_NORMAL
- en: '*When I’m working on a problem, I never think about beauty. I think only how
    to solve the problem. But when I have finished, if the solution is not beautiful,
    I know it is wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: —R. Buckminster Fuller*
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve accomplished the significant work involved in internationalizing
    your software, you can begin to consider building message catalogs for other languages
    and cultures. Building a language-specific message catalog is known as *localization*.
    You are localizing your software for a target locale. We will spend this chapter
    discussing the way GNU projects approach these topics, including how to hook message
    catalog management into an Autotools build system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Message catalogs must be located where applications can find them. It could
    have been decided that applications should just store their language-specific
    message catalogs in a location selected by each project, but Linux (and Unix,
    in general) has long practiced the subtle art of quietly guiding application developers
    by convention. Not only do such conventions keep developers from having to make
    the same decisions over and over, but they also maximize the potential for reuse
    wherever possible. To these ends, the established convention for message catalogs
    is to place them in a common directory under the system data directory—what the
    *GNU Coding Standards* refers to as the `datadir`—most often defined as `$(prefix)`*/share*.^([1](footnote.xhtml#ch12fn1))
    A special directory, `$(datadir)`*/locale*, houses all application message catalogs
    in a format that provides some nice features for the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*Language Selection*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'I mentioned in [Chapter 11](ch11.xhtml) that application selection of the current
    language, and hence the message catalog used by the application, is done in two
    phases. I’ve discussed the programmer phase already. Now let’s turn to the user
    phase, which allows the user some choice over which message catalog is selected.
    As with the selection of locale, the selection of the message catalog can be directed
    through the use of environment variables. The following environment variables
    are used to select the message catalog an application will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LANGUAGE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_ALL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LC_`*`xxx`*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LANG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up to this point, we’ve only focused on the `LC_ALL` variable, but, in actuality,
    the application’s global locale is selected by first examining `LC_ALL`, then
    a category-specific variable (`LC_TIME`, for example), and finally `LANG`, in
    that order. In other words, if `LC_ALL` is not set or is set to the empty string,
    `setlocale` will look for `LC_`*`xxx`* variables (specifically, `LC_COLLATE`,
    `LC_CTYPE`, `LC_MESSAGES`, `LC_MONETARY`, `LC_NUMERIC`, and `LC_TIME`) and use
    their values to determine which locales are used for the associated areas of library
    functionality. Finally, if none of those are set, `LANG` is examined. If `LANG`
    is not set, you get an implementation-defined default, which is not always the
    same as the `C` locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'On top of these variables used by `setlocale`, the *gettext* functions look
    at `LANGUAGE` first, which, if set, will override all the others for message catalog
    selection. Additionally, the *value* set in the `LANGUAGE` variable has some impact
    on the selection criteria. Before we get into value formats, let’s take a look
    at the directory structure beneath `$(datadir)`*/locale*. If you look at this
    directory on your own system, you’d see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The format of these directory names should look somewhat familiar—it’s the
    same format used by locale names defined in “Generating and Installing Locales”
    on [page 303](ch11.xhtml#page_303). Under each locale directory containing message
    catalogs (it’s rather sparse—application localization is not as prevalent as you
    might imagine), you’ll find a directory named *LC_MESSAGES*, containing one or
    more *message object* (*.mo*) files, which are compiled message catalogs. Here’s
    Spanish in Spain, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you examine the region-independent Spanish locale directory, */usr/share/locale/es*,
    you’ll see a lot more message catalogs. Most programs don’t bother differentiating
    regional locales when translating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As I mentioned earlier, the base name of a message object file is the domain
    of the owning application. When you call `textdomain` and `bindtextdomain`, the
    *`domain`* you specify selects a message object file by name. In this directory
    listing, *blueberry* is the message catalog domain of the application that uses
    the *blueberry.mo* message catalog.
  prefs: []
  type: TYPE_NORMAL
- en: '*Building Message Catalogs*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *gettext* library provides a set of utilities that help you build message
    catalogs from source code that’s been internationalized for message catalog selection.
    Figure 11-1 depicts the flow of data through the *gettext* utilities, from source
    code to binary message object.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/12fig01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 12-1: The flow of data from source file to message object file*'
  prefs: []
  type: TYPE_NORMAL
- en: The `xgettext` utility extracts messages from programming language source files
    and builds a *portable object template* (*.pot*) file. This is done each time
    the message strings in source files are changed or updated in some way. Perhaps
    existing messages are modified or removed or new messages are added. In any case,
    the *.pot* file must be updated. The *.pot* file is usually named after the message
    catalog domain used by the package or program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming we created a message catalog in a project for a French locale, this
    process generates files in the current directory, but we’re going to follow a
    common convention by generating all of our message artifacts into a directory
    off the project root called *po*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The internal layout of the *po* directory in my examples is arbitrary—you can
    tell the *gettext* tools how to name output files, and you can put them anywhere
    you like. I chose this structure because it’s what we’re going to use when we
    integrate *gettext* with an Autotools project later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s generate a *.pot* file for the source code of the `gt` program in [Listing
    11-12](ch11.xhtml#ch11ex12) on [page 328](ch11.xhtml#page_328):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `xgettext` utility is designed to build *.pot* files from the source files
    of many different programming languages, so it accepts `--language` or `-L` command
    line options as hints. However, it will also guess the language, based on the
    file extension, if no such option is given.
  prefs: []
  type: TYPE_NORMAL
- en: Because `xgettext` is designed to parse many different types of source file,
    it can sometimes require help locating the messages we want it to extract. It
    assumes text to be extracted is somehow associated with the `gettext` function
    in the C language. For other language source files, it looks for appropriate variations
    of this function name. Unfortunately, we threw a monkey wrench into the works
    when we replaced `gettext` with the underscore (`_`) macro name. This is where
    the `--keyword` (`-k`) option can be used to tell `xgettext` where to look for
    message text to be extracted. Our use of `-k_` causes `xgettext` to look for `_`
    instead of `gettext`. Without this option, `xgettext` won’t find any messages
    to extract and, therefore, won’t generate a *.pot* file.^([2](footnote.xhtml#ch12fn2))
  prefs: []
  type: TYPE_NORMAL
- en: I’m also telling it to add comments (`-c`) and to sort the output messages (`-s`)
    as they’re added to the *.pot* file. If you don’t tell it otherwise (with the
    `-o` option), it’ll create a file called *messages.po*. Files not associated with
    a command line option are considered input files by `xgettext`.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, though not strictly required, and depending on the workflow you
    choose to use, you may want to hand-edit *gt.pot* to update placeholder values
    that `xgettext` adds. For example, you may want to replace the `PACKAGE` and `VERSION`
    placeholder strings in the `Project-Id-Version` field and perhaps add an email
    address to the `Report-Msgid-Bugs-To` field. These can be added during generation
    by using the `--package-name`, `--package-version`, and `--msgid-bugs-address`
    command line options. There are a few others; you can look them up in the manual.
  prefs: []
  type: TYPE_NORMAL
- en: From this template, we can now generate *portable object* (*.po*) files for
    different locales. The `msginit` utility is used to create an initial version
    of a locale-specific *.po* file, while `msgmerge` is used to update an existing
    *.po* file that was previously generated with `msginit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a French *fr.po* file from our template, *gt.pot*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t specify any input or output files, it looks in the current directory
    for a *.pot* file and derives the output filename from the locale you specify
    with the `--locale` (`-l`) option. I’ve also added the `--no-translator` option
    to suppress an interactive aspect of this utility. If you leave it off, `msginit`
    attempts to find your email address on the local host and use it. If it gets confused,
    it stops and asks you which address to use.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the specified or implied *.pot* file, it also examines makefiles
    and other build files within the near vicinity of the source files you specify
    to see what the project might be called. The project name, `PROJECT`, that you
    see in this output is the default it uses when it can’t find a project name, but
    it may surprise you how thorough `msginit` can be when searching for a project
    name.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there’s nothing very French about this *.po* file yet—would that it were
    so simple! No, you still have to translate the strings from English to French
    manually. So what’s different about this *.po* file from its source template file?
    Essentially, everything related to a locale-specific implementation in the template
    has been filled in, including the title and copyright year in the comments at
    the top as well as the `PO-Revision-Date`, `Last-Translator`, `Language-Team`,
    `Language`, and `Plural-Forms` fields.
  prefs: []
  type: TYPE_NORMAL
- en: The next step in the process is to actually translate the file. Normally, I’d
    go find a native French speaker with a good grasp of English and ask them to fill
    in the blanks for me. Since there’s little chance of misusing an internet translator
    with gt’s one simple message, I’ll just look it up myself and set the `msgstr`
    field at the bottom of the file to `"Bonjour le monde!\n"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once translated, the *.po* file is passed through the `msgfmt` utility to create
    the locale-specific *message object* (*.mo*) file. Let’s do this for *fr.po*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There are lots of options you can use with `msgfmt`. For our example, the default
    functionality is quite sufficient. Still, I specified the output file (with `-o`)
    because the default output file is *messages.mo* and I wanted to be clear that
    this is the French language message file.
  prefs: []
  type: TYPE_NORMAL
- en: To test our French message catalog, we could copy *fr.mo* over to */usr/local/share/locale/fr/LC_MESSAGES/gt.mo*
    as root and then execute `gt` with the `LANGUAGE` variable set to `fr`, but a
    simpler way is to use that hack I added to gt that lets us build a version that
    treats the current directory as the `localedir`.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I named the output file* fr.mo, *but the installed message file must be named
    after the project’s or program’s message domain*—gt *in this case*—*so during
    installation* fr.mo *should be renamed to* gt.mo. *It’s installed into a language-specific
    subdirectory of `localedir`, so the French nature of the* .mo *file is maintained
    after installation by virtue of its location in the filesystem.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s install our *fr.mo* file locally and then rebuild `gt` so that
    it looks in the current directory rather than the system data directory. Then
    we’ll run `gt` with English and French locales, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This console example should raise a few concerns: Why did I use `LANGUAGE`
    rather than `LC_ALL`? How was I able to use `french` instead of `fr` as the value
    of `LANGUAGE` without causing `gt` heartache while searching for the French version
    of *gt.mo*?'
  prefs: []
  type: TYPE_NORMAL
- en: To answer the first question, I cannot use the `LC_*` or `LANG` variables here,
    because I don’t have any French locales installed on my system and these variables
    merely set the locale, leaving `textdomain` and `bindtextdomain` to determine
    the locale based on queries to the structure returned by `localeconv` (or, rather,
    a more extensive internal form of that structure) in the C library. Because I
    don’t have any French locales installed, `setlocale` will not be able to set a
    locale based on the values of the `LANG` or `LC_*` variables, so it will simply
    leave the current global locale set to the system default—English, on my host.
    Therefore, the language used will continue to be English.
  prefs: []
  type: TYPE_NORMAL
- en: The answer to the second question brings us back to an as yet unproven statement
    I made in “Language Selection” on [page 332](ch12.xhtml#page_332), where I said
    that the *value* the user sets in the `LANGUAGE` variable has some impact on the
    selection criteria used by `textdomain` and `bindtextdomain`. The *gettext* library
    allows the user to select *fallback* message catalogs when a requested locale
    is not available on the system. This is done by being *less specific* in the `LANGUAGE`
    variable (which is specifically used by `textdomain` and `bindtextdomain`) than
    in the other variables, which are examined by `setlocale`. The value format supported
    by `LANGUAGE` can exactly duplicate the strict format required in `LC_*` and `LANG`,
    but it also supports locale names with missing components and language aliases.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s consider what I mean by missing components. Recall the components
    of a locale name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `bindtextdomain` function attempts to find message catalogs in the specified
    locale directories that match this entire format, as specified either in the `LANGUAGE`
    variable or in the current locale string, as provided by `localeconv`. But then
    it backs off by dropping first the *`codeset`*, then a normalized form of the
    *`codeset`*,^([3](footnote.xhtml#ch12fn3)) then the *`territory`*, and finally
    the *`modifier`*. If all components are dropped, we’re left with just the *`language`*
    portion of the locale name (or whatever other random text was specified in `LANGUAGE`).
    If a match still cannot be found, `bindtextdomain` then looks at the */usr/share/locale/locale.alias*
    file for an alias matching the value in `LANGUAGE` (`french` is an alias on my
    system for `fr_FR.ISO-8859-1`). This algorithm allows users to be rather vague
    about which message catalog they want to use and still obtain one that’s reasonably
    close to their native language, if an exact match for the current locale is not
    available.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating gettext with the Autotools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up to this point in this chapter, I’ve been building little utilities and programs
    like `gt` by just using `gcc` from the command line. Now it’s time to turn gt
    into an Autotools project so we can add *Native Language Support (NLS)* functionality
    in the manner the GNU project recommends. It’s really best to go this route, because
    it allows translators out there—people who love to do this sort of thing, and
    who like your program—to more easily add a message catalog for their language.
  prefs: []
  type: TYPE_NORMAL
- en: The information in this section was mostly taken from Section 13, “The Maintainer’s
    View,” of the *GNU gettext Utilities Manual*.^([4](footnote.xhtml#ch12fn4)) The
    *gettext* manual is a little out-of-date with respect to the Autotools and even
    the *gettext* package itself, but it’s otherwise well organized and very detailed
    on the topics of internationalization and localization. In fact, it’s so complete
    that it’s hard to get your head around it until you have some of the basics behind
    you. My goal in this chapter is to give you the background you need to dig into
    the *gettext* manual without fear. In fact, this chapter only lightly brushes
    over many topics that the manual covers in great detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s move *gt.c* into a project *src* directory and create *configure.ac*,
    *Makefile.am*, and the other GNU-mandated text files. Assuming you’re in the directory
    where our original *gt.c* file was created, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 12.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The *Makefile.am* file should look like the one shown in [Listing 12-1](ch12.xhtml#ch12ex1).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-1:* Makefile.am: *The initial contents of this Automake input file*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve added target-specific `CPPFLAGS` to allow me to pass the `LOCALE_DIR` on
    the compiler command line. We should also edit our *src/gt.c* file and add the
    *config.h* header file to it so we’ll have access to the `LOCALE_DIR` variable
    we’re defining in there. [Listing 12-2](ch12.xhtml#ch12ex2) shows the changes
    we need to make. You can also remove the `TEST_L10N` hack; we will no longer need
    this because we can test Autotools-built `gt` using a local installation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-2:* src/gt.c: *Changes required to configure the `LOCALE_DIR`*'
  prefs: []
  type: TYPE_NORMAL
- en: Now edit the new *configure.ac* file and make the changes shown in [Listing
    12-3](ch12.xhtml#ch12ex3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-3:* configure.ac: *Changes necessary to the `autoscan`-generated*
    .scan *file*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that some header file references were removed in the `AC_CHECK_HEADERS`
    line in [Listing 12-3](ch12.xhtml#ch12ex3).
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you should be able to execute `autoreconf -i`, followed by `configure`
    and `make` to build `gt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I created the m4 directory before running *`autoreconf`* because *`autoreconf`*
    complains about m4 not being present when it finds *`AC_CONFIG_MACRO_DIRS`* in*
    configure.ac. *It still works, but warns you that the directory is missing. Creating
    it in advance just reduces noise.*'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in enhancing an existing Autotools project for NLS support with
    *gettext* is to add a bunch of *gettext*-specific files to your project. It’s
    actually kind of tedious, so the *gettext* people have created a little utility
    called `gettextize` that works pretty well. When you run `gettextize`, it does
    a small amount of analysis, dumps a bunch of files into your project’s *po* directory
    (it creates one if it’s not there yet), and then displays a six- or seven-step
    procedure on your console. To ensure you don’t ignore this output, it waits until
    you press enter to terminate the program, obtaining from you in the process a
    promise that you’ll read and perform those steps. Sadly, the instructions are
    a little out-of-date—not all of them are actually necessary, and some of them
    don’t apply if you’re using the full Autotools suite. Like many programs that
    integrate with the Autotools, *gettext* was written to be usable by packages that
    use Autoconf alone and by programs that use the full Autotools suite. I’ll explain
    which ones are important as we go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by running `gettextize` on our gt project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 12.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The first thing `gettextize` does is create a *po* subdirectory (at ➊) in the
    root of our project directory, if needed. This will be where all the NLS-related
    files are kept and managed by an NLS-specific makefile, which `gettextize` also
    provides, as you can see from the third `Copying file` message found in the first
    few lines of the output.
  prefs: []
  type: TYPE_NORMAL
- en: After copying files from your system’s *gettext* installation folder to the
    *po* directory, it then updates the root-level *Makefile.am* file and *configure.ac*
    (at ➋). [Listings 12-4](ch12.xhtml#ch12ex4) and [12-5](ch12.xhtml#ch12ex5) show
    the changes it makes to these files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-4:* Makefile.am: *Changes to this file made by `gettextize`*'
  prefs: []
  type: TYPE_NORMAL
- en: A `SUBDIRS` variable is added (or updated, if one exists) to the top-level *Makefile.am*
    file so that *po/Makefile* will be processed by `make`, and `AC_LOCAL_AMFLAGS`
    is added to support the *m4* directory, which `gettextize` would have added had
    we not done so first. Finally, `gettextize` adds an `EXTRA_DIST` variable to ensure
    that *config.rpath* gets distributed.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Adding *`AC_LOCAL_AMFLAGS = -I m4`* is no longer necessary with later versions
    of Automake, because it provides the *`AC_CONFIG_MACRO_DIRS`* macro, which handles
    this include directive for *`aclocal`* transparently.*'
  prefs: []
  type: TYPE_NORMAL
- en: I manually changed `$(datadir)`*/locale* to the Autoconf-provided `$(localedir)`
    in the `src_gt_CPPFLAGS` line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-5:* configure.ac: *Changes to this file made by `gettextize`*'
  prefs: []
  type: TYPE_NORMAL
- en: The only change made to *configure.ac* by `gettextize` is to add the *po/**Makefile.in*
    file to the `AC_CONFIG_FILES` file list. An astute reader would notice the *.in*
    on the end of this reference and perhaps believe that `gettextize` had made a
    mistake. Looking back at the list of files copied by the utility shows us, however,
    that the file copied into the *po* directory really is called *Makefile.in.in*.
    Autoconf processes the file first, and then *gettext* utilities process it again
    later to remove the second *.in* extension.
  prefs: []
  type: TYPE_NORMAL
- en: Referring back to the output of `gettextize`, we see at ➌ that `gettextize`
    is asking us to add a macro invocation, `AM_GNU_GETTEXT([external])`, to *configure.ac*.
    This may perhaps seem strange, given that it just finished editing *configure.ac*
    for us. The displayed text isn’t clear on this point, but the fact is, an entire
    copy of the *gettext* runtime used to be added to projects on demand. This line
    is simply telling us that if we do not intend to use such an internal version
    of the *gettext* library, we should indicate so by using the `external` option
    in a call to this macro so that `configure` will know to look outside the project
    for the *gettext* utilities and libraries. As it happens, using an internal version
    of the *gettext* library is no longer generally promoted—mainly because *gettext*
    is now integrated into *libc* (at least on Linux systems), so everyone has ready
    access to an external version of *gettext*. If you’re using another type of system
    with GNU tools, you should install the *gettext* package so you can use that external
    version.
  prefs: []
  type: TYPE_NORMAL
- en: I noticed also when I added this macro that `autoreconf` complained that I was
    using `AM_GNU_GETTEXT` but not `AM_GETTEXT_VERSION`, which indicates to the build
    system the lowest allowable version of *gettext* that may be used with this project.
    I added this macro as well, with a version value corresponding to the output of
    `gettext --version` on my system. I might have used a lower version value to allow
    my project to build on other, perhaps older systems, but I’d have had to do a
    bit of research to ensure that all the options I used were valid back to the version
    I chose to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 12-6](ch12.xhtml#ch12ex6) shows this addition to *configure.ac*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-6:* configure.ac: *Adding `AM_GNU_GETTEXT`*'
  prefs: []
  type: TYPE_NORMAL
- en: The next step, at ➍, indicates that we should copy *po/Makevars.template* to
    *po/Makevars* and edit it to ensure the values are correct. I say “copy” rather
    than “move” because removing the template will just cause it to be replaced the
    next time you run `autoreconf -i` anyway, so there’s no point in being pedantic
    about it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 12-7](ch12.xhtml#ch12ex7) shows a pared-down version of this file—I’ve
    removed the comments so we can more easily see the functional content, but the
    comments are extensive and really quite useful, so please do examine the full
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-7:* po/Makevars.template: *A list of variables that control the
    NLS build*'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve highlighted the changes I made to gt’s version of this file. As you can
    see, the defaults are mostly just fine. I changed the copyright holder from the
    default, `Free Software Foundation`. I’ve also indicated that gt is not a GNU
    package—the default here was blank, which tells *gettext* to attempt to figure
    it out at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve specified a value for `MSGID_BUGS_ADDRESS`, which is a value in the generated
    *.pot* file. The value generate by the *po* directory’s makefile will be the email
    address (or web link) you specify here. Finally, I’ve set `PO_DEPENDS_ON_POT`
    to `no` because otherwise, anytime the *gt.pot* file changes in insignificant
    ways, the locale-specific *.po* files all get regenerated, and I’d rather just
    generate the *.po* files in my project when a distribution is created. This is
    an arbitrary decision based on personal preference; you can choose to leave it
    at its default value of `yes`, if you want.
  prefs: []
  type: TYPE_NORMAL
- en: At ➎, we see a request to add some text to *po/POTFILES.in*. This is a result
    of Automake’s requirement that all source files be specified in makefiles. We’re
    being asked to add all of the source files that must be processed by `xgettext`
    to extract messages. Files may be added one per line, and comments starting with
    a hash (`#`) mark may be used in this file if desired. [Listing 12-8](ch12.xhtml#ch12ex8)
    highlights what I’ve added to gt’s version of *po/POTFILES.in*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-8:* po/POTFILES.in: *Changes made to the generated version of this
    file*'
  prefs: []
  type: TYPE_NORMAL
- en: The files listed in *po/POTFILES.in* should be relative to the project directory
    root.
  prefs: []
  type: TYPE_NORMAL
- en: The steps listed at ➏ and ➐ are no longer necessary with late versions of the
    Autotools. The `configure` script will automatically run `aclocal` and rebuild
    itself for you when you execute it, if necessary. The *config.sub* and *config.guess*
    files are now automatically installed by `autoreconf` based on the use of the
    *gettext* macros. Unfortunately, `autoreconf` installs the versions of these files
    that ship with Autoconf; they’re likely out-of-date, so the advice to find and
    install the latest versions is still valid. If you need to, you can pull the latest
    versions of these files from the GNU Savannah *config* repository using the supplied
    `wget` commands. You’ll know if you need to if *gettext* has problems figuring
    out your platform using the ones installed by `autoreconf`. Be sure to run `autoreconf
    -i` at least once more after these steps are completed.
  prefs: []
  type: TYPE_NORMAL
- en: The request to copy and consume *gettext.h* at ➑ is optional but helpful, in
    my opinion, because it enables a `configure` script option added by *gettext*
    Autoconf macros that allows the user to disable NLS processing while building
    from a distribution archive. I copied */usr/share/gettext/gettext.h* into gt’s
    *src* directory and added it to the list of source files for the `gt` program
    in *Makefile.am*, as shown in [Listing 12-9](ch12.xhtml#ch12ex9).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-9:* Makefile.am: *Adding src/gettext.h to `src_gt_SOURCES`*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try building after all these changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Some corner-case conditions may cause files written by *`autoreconf`* to be
    considered “modified locally,” which would generate errors without the *`-f`*
    or *`--force`* flag. I recommend you try it first using only *`-i`*. If you get
    errors about files like* ABOUT-NLS *being modified locally, then re-execute it
    with the *`-f`* flag also. Just be aware that *`-f`* will overwrite some files
    you may have intentionally modified.*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from this output, `xgettext` is run against our source code—specifically,
    the files we mentioned in *po/POTFILES.in*—whenever we build, if any of the files
    are missing at build time. If a file is found, it won’t be rebuilt automatically,
    but there is a manual `make` target I’ll mention shortly.
  prefs: []
  type: TYPE_NORMAL
- en: '*What Should Be Committed?*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ve added a lot of new files to the gt project. In “A Word About the Utility
    Scripts” on [page 172](ch06.xhtml#page_172), I gave you my philosophy on what
    should be committed to a source repository, which is that people who check out
    your project from its repository should be willing to take on the role of maintainer
    or developer, rather than user. Users build from distribution archives, but maintainers
    and developers use a different set of tools. Therefore, people who check out source
    from repositories should be willing to use the Autotools.
  prefs: []
  type: TYPE_NORMAL
- en: It’s now time to consider which of these new files you should commit to gt’s
    repository. Following my philosophy, I would only commit those files that are
    actually assets of the project. Anything that can be easily regenerated or recopied
    from other sources during the Autotools bootstrap process (`autoreconf` `-i`)
    should be left out.
  prefs: []
  type: TYPE_NORMAL
- en: The `gettextize` utility runs a program called `autopoint`, which acts for NLS-enabled
    projects as `autoreconf -i` does for Autotools projects, copying files into the
    project directory structure as needed. The `AM_GETTEXT_*` macros we added to *configure.ac*
    earlier ensure that the appropriate *.m4* files are added to the *m4* directory,
    the appropriate NLS files are added to the *po* directory, and (if you were using
    an internal version of the *gettext* library) the *gettext* source and build files
    are added to the *intl* directory. In fact, `autopoint` is a sort of contraction
    of the phrase *auto-po-intl-m4*.^([5](footnote.xhtml#ch12fn5)) More recent versions
    of `autoreconf` are aware of `autopoint` and will execute it for you if they notice
    you have an NLS-enabled project, but only if you provide the `-i` option to `autoreconf`,
    because `autopoint` only installs missing files and file installation is a function
    of the `-i` option.
  prefs: []
  type: TYPE_NORMAL
- en: Because `autopoint` installs all required non-asset files in your *po* directory,
    the only thing you need to commit in that directory are the files you modified,
    including *POTFILES.in*, *Makevars*, *ChangeLog*,^([6](footnote.xhtml#ch12fn6))
    and, of course, your *.po* files. You don’t need to commit your *.pot* file because
    the *po/Makefile* will regenerate that from your source code if it’s missing.
    You don’t need to commit your *.mo* files, as those get generated directly from
    *.po* files at install time. You don’t need the *ABOUT-NLS* file unless you’ve
    modified it. You don’t need anything in the *m4* directory except macro files
    you wrote and added yourself. You will need to commit the *src/gettext.h* file
    since you manually copied that file from your system *gettext* install directory.^([7](footnote.xhtml#ch12fn7))
  prefs: []
  type: TYPE_NORMAL
- en: 'This leaves us with the following files in gt’s directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*Adding a Language*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let’s add our French language *.po* file:'
  prefs: []
  type: TYPE_NORMAL
- en: Git tag 12.2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: While we do run `msginit`, we don’t need to specify input and output files.
    Rather, `msginit` automatically discovers and uses all *.pot* files in the current
    directory as input files, and it automatically names the output *.po* file after
    the language specified. The only option we need to use is the `--locale` option
    to specify the target locale for which a *.po* file should be generated.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*I didn’t use the *`--no-translator`* option this time because when I run*
    msginit, *I’m acting in the role of the translator for the target language. That
    is to say, the person who runs *`msginit`* for a given locale or language* should
    *be the translator for that language. Therefore, that person should also be willing
    to provide contact information for the translation, which they can input at the
    interactive prompt for their email address when they run *`msginit`* in this manner.*'
  prefs: []
  type: TYPE_NORMAL
- en: We also need to add all supported languages to a file named *LINGUAS* in the
    *po* directory (and this new file should also be committed). This tells the build
    system which languages to support. We may actually have more languages in the
    *po* directory than we currently support. The languages in the *LINGUAS* file
    are those for which *.mo* files will be generated and installed when we run `make
    install`. The format of *LINGUAS* is fairly loose; you only need some sort of
    whitespace between languages. You may also use hash-preceded comments, if you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find a file named *fr.po* in the *po* directory now. Of course, it still
    has to be translated by someone who speaks both languages fairly well. The contents
    should look something like that of [Listing 12-10](ch12.xhtml#ch12ex10) after
    translation. I’ve updated mine, filling in all the blanks, so to speak.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 12-10:* po/fr.po: *The translated French portable object file*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Installing Language Files*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Installation of language files is no harder than running `make` with the usual
    Automake-provided `install` target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You may also use a `DESTDIR` variable on the `make` command line to test your
    installation in a local staging directory in order to see what gets installed.
    Of course you don’t need `sudo` when you do this, as long as you have write privileges
    in your `DESTDIR` location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing is not quite as simple as executing your program from the *src* directory
    after building, but neither is it that difficult. The problem is the entire Linux
    NLS system is designed to work with installed language files. You’ll need to install
    into a local prefix directory, such as `$PWD`*/root*, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Why does this work? Because we’re passing the locale directory, based on `prefix`,
    into *gt.c* in the makefile on the `gcc` command line. Therefore, the `prefix`
    you use tells `gt` where the NLS files will be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '**NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t try this with the *`DESTDIR`* variable. The *`prefix`* will still be
    set to* /usr/local, *but the *`install`* target will put everything into *`$(DESTDIR)/$(prefix)`*.
    The locale directory is based only on *`prefix`*, which tricks built software
    into thinking it’s being installed into *`$(prefix)`*, while allowing packagers
    to stage the installation locally.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Manual make Targets*'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The *gettext* makefile provides a couple of targets that can be used manually
    from the *po* directory (in fact, they’ll only work from the *po* directory).
    If you want to manually update one of your *.pot* files, you can run `make` *`domain`*`.update-pot`,
    where *`domain`* is the name of the NLS domain you specified when you called `textdomain`
    and `bindtextdomain` in your source code.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to update the translated language files using `msgmerge`, which
    will merge new messages from the *.pot* files into the locale-specific *.po* files,
    you can run `make update-po`. This will update all of the *.po* files whose locales
    are specified in *LINGUAS*.
  prefs: []
  type: TYPE_NORMAL
- en: Note that *.mo* files are not created at build time but only at installation
    time. The reason for this is that they’re useless before they’re installed. If
    you really need to have the *.mo* files without installing your package, you can
    install into a local prefix or into a `DESTDIR` staging directory, in the manner
    outlined earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, I barely grazed the surface of the topic of adding NLS support
    to projects.
  prefs: []
  type: TYPE_NORMAL
- en: What did I skip? Well, for instance, there are dozens of options in the *gettext*
    tools that help localizers build language files for programs that cause the software
    to display messages sensibly.
  prefs: []
  type: TYPE_NORMAL
- en: For another example, in a typical `printf` statement in C, you might provide
    a format string in English such as `"There are %d files in the '%s' directory."`
    In this example, `%d` and `%s` are placeholders for a count and a directory name,
    of course, but in German, the translated string would become something like `"Im
    verzeichnis '%s' befinden sich %d dateien."` Even a non-German-speaking programmer
    can see what’s wrong here—the order of the format specifiers has changed. One
    solution, of course, is to use `printf`’s newer positional format specifiers.
  prefs: []
  type: TYPE_NORMAL
- en: There are dozens of other issues you will want to consider; the *GNU gettext
    Utilities Manual* is a great place to start.
  prefs: []
  type: TYPE_NORMAL
