- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Going On-Call
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 值班安排
- en: Many companies ask engineers to go on-call. On-call engineers are the first
    line of defense for any unplanned work, be it production issues or ad hoc support
    requests. Separating deep work from operational work lets the majority of the
    team focus on development while on-call engineers focus only on unpredictable
    operational issues and support tasks. Effective on-call engineers are prized by
    their teammates and managers, and they grow quickly from the relationship-building
    and learning opportunities that on-call rotations provide.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司要求工程师进行值班。值班工程师是处理任何计划外工作的第一道防线，无论是生产问题还是临时支持请求。通过将深度工作与操作性工作分开，团队的大多数成员可以专注于开发，而值班工程师则专注于不可预测的操作问题和支持任务。有效的值班工程师受到队友和经理的高度赞赏，并能通过值班轮换提供的人际关系和学习机会迅速成长。
- en: This chapter covers the basic knowledge and skills you’ll need to participate
    in on-call, incident handling, and support. We’ll explain how on-call rotations
    work and teach you important on-call skills. Then, we’ll go in-depth on a real-world
    incident to give you a practical example of how an incident is handled. After
    incidents, we’ll teach you support best practices. The on-call experience can
    cause burnout, so we end with a warning about the temptation to be a hero.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了你参与值班、事件处理和支持所需的基本知识和技能。我们将解释值班轮换的工作原理，并教授你重要的值班技能。接下来，我们将深入分析一个真实的事件，提供一个实际的事件处理示例。事件处理后，我们将教你支持的最佳实践。值班体验可能导致倦怠，因此我们最后提醒你警惕成为英雄的诱惑。
- en: If you are in a role where an on-call rotation does not exist, read this chapter
    anyway. On-call skills apply in any urgent situation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你所在的角色没有值班轮换，仍然建议阅读这一章节。值班技能适用于任何紧急情况。
- en: How On-Call Works
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值班工作原理
- en: On-call developers rotate based on a schedule. The length of a rotation can
    be as short as a day, though more often it’s a week or two. Every qualified developer
    takes part in the rotation. Developers who are new to the team or lack necessary
    skills are often asked to “shadow” a few primary on-call rotations to learn the
    ropes.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 值班开发人员根据计划轮换。轮换的长度可以短至一天，但通常为一至两周。每个合格的开发人员都会参与轮换。新加入团队或缺乏必要技能的开发人员通常会被要求“跟随”几次主要值班轮换，以学习操作流程。
- en: 'Some schedules have a primary and a secondary on-call developer; the secondary
    acts as a backup when the primary is unavailable. (Needless to say, developers
    who routinely cause the secondary on-call to step in are not looked upon kindly.)
    Some organizations have a tiered response structure: the support team might get
    alerted first, and then the issue would get escalated to operations engineers,
    followed by the development team.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有些排班安排有主值班和副值班开发人员；当主值班人员无法值班时，副值班人员会充当备份。（不用多说，常常让副值班人员替换主值班人员的开发人员通常不会受到好评。）有些组织有分级响应结构：支持团队可能首先被警报通知，然后问题会被升级到运营工程师，再到开发团队。
- en: Most of an on-call’s time is spent fielding ad hoc support requests such as
    bug reports, questions about how their team’s software behaves, and usage questions.
    On-calls triage these requests and respond to the most urgent.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 值班人员的大部分时间都用来处理临时支持请求，如错误报告、关于团队软件行为的问题和使用问题。值班人员对这些请求进行分类并回应最紧急的请求。
- en: However, every on-call will eventually be hit with an operational incident (critical
    problem with production software). An incident is reported to on-call by an alert
    from an automated monitoring system or by a support engineer who manually observes
    a problem. On-call developers must triage, mitigate, and resolve incidents.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，每个值班人员最终都会遇到操作性事件（生产软件的关键问题）。当发生事件时，会通过自动监控系统的警报或支持工程师手动观察到的问题来通知值班人员。值班开发人员必须对事件进行分类、缓解和解决。
- en: On-call developers get paged when critical alerts fire. *Paging* is an anachronism
    from before cell phones—these days, an alert is routed through channels such as
    chat, email, phone calls, or text messages. Make sure you enter the alerting service’s
    phone number into your contacts if, like us, you don’t answer calls from unknown
    numbers!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当关键警报触发时，值班开发人员会被通知。*通知*这一术语源自早期的传呼机时代——如今，警报通过聊天、电子邮件、电话或短信等渠道发送。如果像我们一样不接听未知号码的电话，请确保将警报服务的电话号码添加到你的联系人中！
- en: All on-call rotations should begin and end with a handoff. The previous on-call
    developer summarizes any current operational incidents and provides context for
    any open tasks to the next on-call developer. If you’ve tracked your work well,
    handoffs are a nonevent.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的值班轮班应该以交接开始并结束。上一班的值班开发人员总结任何当前的操作事件，并向下一班的值班开发人员提供任何未完成任务的背景信息。如果你跟踪好自己的工作，交接应该是一个平常的过程。
- en: Important On-Call Skills
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要的值班技能
- en: On-call can be a rapid-fire, high-stress experience. Luckily, you can apply
    a common set of skills to handle both incidents and support requests. You’ll need
    to make yourself available and be on the lookout for incidents. You’ll also need
    to prioritize work so the most critical items get done first. Clear communication
    will be essential, and you’ll need to write down what you’re doing as you go.
    In this section, we’ll give you some tips to help you grow these skills.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 值班可能是一个快速反应、高压力的体验。幸运的是，你可以应用一套通用的技能来处理事件和支持请求。你需要让自己保持可用，随时关注事件。你还需要优先处理工作，确保最重要的事项优先完成。清晰的沟通至关重要，你还需要在工作中记录自己正在做的事情。在这一部分，我们将给你一些帮助你提升这些技能的建议。
- en: Make Yourself Available
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让自己可用
- en: “Your best ability is availability.” This old saying is key to a successful
    on-call. An on-call’s job is to respond to requests and alerts. Don’t ignore requests
    or try to hide. Expect to be interrupted, and accept that you can’t do as much
    deep work while on-call.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “你最好的能力是可用性。”这句老话是成功值班的关键。值班人员的工作就是回应请求和警报。不要忽视请求或试图躲避。准备好被打断，并接受在值班期间你不能进行深度工作的事实。
- en: Some on-call developers are expected to be near a computer 24/7 (though this
    doesn’t mean staying awake all night waiting for the alerts to fire. It means
    you’re reachable, able to react, and can adjust your nonwork plans accordingly).
    Larger companies have “follow the sun” on-call rotations that shift to developers
    in different time zones as the day goes on. Figure out what on-call expectations
    are, and don’t get caught in a situation where you can’t respond.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些值班开发人员需要全天候 24/7 靠近电脑（但这并不意味着整晚都保持清醒，等待警报响起。这意味着你能联系到，能够作出反应，并可以根据需要调整非工作计划）。大公司有“跟随太阳”值班轮班，将值班任务交给不同时间区的开发人员。弄清楚值班的预期是什么，避免陷入无法响应的情况。
- en: 'Being available does not mean immediately dropping whatever you are doing to
    address the latest question or problem. For many requests, it’s perfectly acceptable
    to acknowledge that you’ve received the query and respond with an approximate
    time when you should be able to look at the problem: “I am currently assisting
    someone else; can I get back to you in 15 minutes?” A fast response is generally
    expected from the on-call engineer, but not necessarily a fast resolution.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性并不意味着要立即放下手头的工作来处理最新的疑问或问题。对于许多请求，完全可以承认你已收到查询，并大致告知你能够查看问题的时间：“我现在正在协助其他人；我能在
    15 分钟后再回来处理吗？”值班工程师通常需要快速响应，但不一定是快速解决问题。
- en: Pay Attention
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'Information relevant to on-call work comes in through many channels: chat,
    email, phone calls, text messages, tickets, logs, metrics, monitoring tools, and
    even meetings. Pay attention to these channels so you’ll have context when debugging
    and troubleshooting.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与值班工作相关的信息通过许多渠道传入：聊天、电子邮件、电话、短信、工单、日志、度量指标、监控工具，甚至会议。注意这些渠道，这样你在调试和排查故障时就能获取上下文信息。
- en: Proactively read release notes and chat or email channels that list operational
    information like software deployments or configuration changes. Keep an eye on
    chat rooms in which operations teams discuss unusual observations and announce
    adjustments they are making. Read meeting notes, particularly operational scrum
    digests that track ongoing incidents and maintenance for the day. Keep operational
    dashboards up in the background or on a nearby TV so you can establish a baseline
    for normal behavior. When incidents do occur, you’ll be able to tell which graphs
    look odd.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 主动阅读发布说明和列出操作信息的聊天或邮件频道，如软件部署或配置更改。关注操作团队讨论异常现象并宣布他们正在进行的调整的聊天室。阅读会议记录，特别是跟踪当天持续事件和维护的操作
    Scrum 摘要。保持操作仪表盘在后台或附近的电视上，这样你可以建立一个正常行为的基准。当事件发生时，你将能够识别哪些图表看起来异常。
- en: 'Create a list of resources that you can rely on in an emergency: direct links
    to critical dashboards and runbooks for your services, instructions for accessing
    logs, important chat rooms, and troubleshooting guides. A separate “on-call” bookmark
    folder that you keep up-to-date will come in handy. Share your list with the team
    so others can use and improve it.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一份在紧急情况下可以依赖的资源清单：直接链接到关键的仪表板和服务的运行手册、访问日志的指引、重要的聊天房间以及故障排除指南。保持更新的单独“值班”书签文件夹会很有用。与团队分享你的清单，以便他人也能使用和完善它。
- en: Prioritize Work
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优先处理工作
- en: 'Work on the highest-priority tasks first. As tasks are finished or become blocked,
    work your way down the list from highest to lowest priority. As you work, alerts
    will fire, and new questions will come in. Quickly triage the interruption: either
    set it aside or begin working on it if it’s an emergency. If the new request is
    higher priority than your current task but isn’t critical, try to finish your
    current task, or at least get it to a good stopping point before context switching.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先处理优先级最高的任务。当任务完成或被阻塞时，从最高优先级到最低优先级依次处理。工作过程中，会有警报触发，新的问题会不断涌现。快速处理这些中断：要么将其搁置，要么如果是紧急情况就开始处理。如果新的请求优先级高于当前任务，但又不至于是紧急的，可以尝试先完成当前任务，或者至少在切换上下文之前将其完成到一个好的停顿点。
- en: Some support requests are extremely urgent, while others are fine getting done
    in a week. If you can’t tell how urgent a request is, ask what the impact of the
    request is. The impact will determine the priority. If you disagree with the requestor
    about an issue’s prioritization, discuss it with your manager.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有些支持请求非常紧急，而有些则可以在一周内完成。如果你无法判断请求的紧急程度，可以询问请求的影响范围。影响范围将决定优先级。如果你与请求者对某个问题的优先级有不同意见，请与经理讨论。
- en: 'On-call work is categorized by priority: P0, P1, P2, and so on. Prioritizing
    work into categories helps define a task’s urgency. Category names and meaning
    vary by company, but P0 tasks are the big ones. Google Cloud’s support priority
    ladder offers one example of how priority levels may be defined ([https://cloud.google.com/support/docs/best-practice#setting_the_priority_and_escalating/](https://cloud.google.com/support/docs/best-practice#setting_the_priority_and_escalating/)):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 值班工作按优先级分类：P0、P1、P2等。将工作按类别排序有助于定义任务的紧急性。不同公司对类别名称和含义的定义可能不同，但P0任务是最重要的。Google
    Cloud的支持优先级梯度提供了优先级定义的一个示例（[https://cloud.google.com/support/docs/best-practice#setting_the_priority_and_escalating/](https://cloud.google.com/support/docs/best-practice#setting_the_priority_and_escalating/)）：
- en: 'P1: Critical Impact—Service Unusable in Production'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P1：关键影响—服务在生产环境中不可用
- en: 'P2: High Impact—Service Use Severely Impaired'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P2：高影响—服务使用严重受限
- en: 'P3: Medium Impact—Service Use Partially Impaired'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P3：中等影响—服务使用部分受限
- en: 'P4: Low Impact—Service Fully Usable'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: P4：低影响—服务完全可用
- en: Service level indicators, objectives, and agreements also help prioritize operational
    work. *Service level indicators* *(SLIs**)* such as error rate, request latency,
    and requests per second are the easiest way to see if an application is healthy.
    *Service level objectives* *(SLOs**)* define SLI targets for healthy application
    behavior. If error rate is an SLI for an application, an SLO might be a request
    error rate less than 0.001 percent. *Service level agreements* *(SLAs**)* are
    agreements about what happens when an SLO is missed. (Companies that violate SLAs
    with their customers usually need to return money and may even face contract termination.)
    Learn the SLIs, SLOs, and SLAs for your applications. SLIs will point you to the
    most important metrics. SLOs and SLAs will help you prioritize incidents.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 服务级别指标、目标和协议有助于优先处理操作工作。*服务级别指标*（*SLIs*）如错误率、请求延迟和每秒请求数，是查看应用程序是否健康的最简单方法。*服务级别目标*（*SLOs*）定义了健康应用程序行为的SLI目标。如果错误率是应用程序的SLI，那么SLO可能是请求错误率低于0.001%。*服务级别协议*（*SLAs*）是关于SLO未达标时会发生什么的协议。（违反SLA的公司通常需要退还款项，甚至可能面临合同终止。）了解你的应用程序的SLIs、SLOs和SLAs。SLIs将帮助你找到最重要的指标。SLOs和SLAs将帮助你优先处理事件。
- en: Communicate Clearly
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清晰沟通
- en: Clear communication is critical when dealing with operational tasks. Things
    happen quickly, and miscommunication can cause major problems. To communicate
    clearly, be polite, direct, responsive, and thorough.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 清晰的沟通在处理操作任务时至关重要。事情发生得很快，沟通不畅可能会引发重大问题。为了清晰沟通，要礼貌、直接、响应及时并且全面。
- en: Under a barrage of operational tasks and interruptions, developers get stressed
    and grumpy—it’s human nature. Be patient and polite when responding to support
    tasks. While it might be your 10th interruption of the day, it’s the requestor’s
    first interaction with you.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在一连串的操作任务和中断中，开发人员会感到压力山大并且变得暴躁——这很正常。回应支持任务时要有耐心且保持礼貌。虽然这可能是你今天的第10次中断，但对于请求者来说，这是他们第一次与你互动。
- en: Communicate in concise sentences. It can feel uncomfortable to be direct, but
    being direct doesn’t mean being rude. Brevity ensures that your communication
    is read and understood. If you don’t know an answer, say so. If you do know the
    answer, speak up.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 用简洁的句子进行沟通。直接表达可能会让人感到不舒服，但直接并不意味着无礼。简洁确保你的沟通能被阅读并且理解。如果你不知道答案，就直接说。如果你知道答案，就说出来。
- en: 'Respond to requests quickly. Responses don’t have to be solutions. Tell the
    requestor that you’ve seen their request, and make sure you understand the problem:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 快速回应请求。回应不一定非得是解决方案。告诉请求者你已经看到他们的请求，并确保理解问题：
- en: 'Thanks for reaching out. To clarify: the login service is getting 503 response
    codes from the profile service? You’re not talking about auth, right? They’re
    two separate services, but confusingly named.'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 感谢你的联系。请确认一下：登录服务从个人资料服务那里收到了503响应码？你说的不是身份认证服务吧？它们是两个不同的服务，只是名字容易混淆。
- en: 'Post status updates periodically. Updates should include what you’ve found
    since your last update and what you’re planning on doing next. Every time you
    make an update, provide a new time estimate:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 定期发布状态更新。更新内容应包括自上次更新以来你发现的问题，以及你接下来计划做的事情。每次更新时，提供一个新的时间预估：
- en: I looked at the login service. I don’t see a spike in error rate, but I’ll take
    a look at the logs and get back to you. Expect an update in an hour.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我查看了登录服务，没发现错误率激增，但我会再查看一下日志并反馈。预计一小时内会有更新。
- en: Track Your Work
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跟踪你的工作
- en: Write down what you’re doing as you work. Each item that you work on while on-call
    should be in an issue tracker or the team’s on-call log. Track progress as you
    work by writing updates in each ticket. Include the final steps that mitigated
    or resolved the issue in the ticket so you’ll have the solution documented if
    the issue appears again. Tracking progress reminds you where you left off when
    you come back to a ticket after an interruption. The next on-call will be able
    to see the state of ongoing work by reading your issues, and anyone you ask for
    help can read the log to catch up. Logged questions and incidents also create
    a searchable knowledge base that future on-calls can refer to.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作时记录下你正在做的事情。你在值班时处理的每一项任务都应该记录在问题追踪系统或团队的值班日志中。在每个工单中写下更新，记录你的工作进展。包括最终解决问题的步骤，以便当问题再次出现时有解决方案可以查阅。记录进展可以帮助你在中断后回到工单时清楚记得上次的工作进展。下一个值班人员可以通过阅读你的工单了解当前工作的状态，任何需要你帮助的人也可以通过日志了解进展。记录下来的问题和事件还会形成一个可搜索的知识库，供未来的值班人员参考。
- en: 'Some companies use chat channels like Slack for operational incidents and support.
    Chat is a good way to communicate, but chat transcripts are hard to read later,
    so make sure to summarize everything in a ticket or document. Don’t be afraid
    to redirect support requests to appropriate channels. Be direct: “I’ll start looking
    into this right now. Could you open a ticket so this is counted when we evaluate
    our support workload?”'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司使用像Slack这样的聊天渠道来处理操作事件和支持请求。聊天是一个良好的沟通方式，但聊天记录以后很难阅读，所以一定要确保将所有内容总结到工单或文档中。不要害怕将支持请求引导到合适的渠道。要直接一些：“我现在就开始查看这个问题了。能否请你开个工单，这样在评估我们的支持工作量时可以统计到？”
- en: Close finished issues so dangling tickets don’t clutter on-call boards and skew
    on-call support metrics. Ask the requestor to confirm that their issue has been
    addressed before closing their ticket. If a requestor isn’t responding, say that
    you’re going to close the ticket in 24 hours due to lack of response; then do
    so.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭已完成的工单，避免悬而未决的工单杂乱无章地堆积在值班板上，影响支持指标。在关闭工单前，向请求者确认问题已经解决。如果请求者没有回应，说明你将在24小时内关闭工单，因未收到回应；然后按计划关闭工单。
- en: Always include timestamps in your notes. Timestamps help operators correlate
    events across the system when debugging issues. Knowing that a service was restarted
    at 1 PM is useful when customers begin reporting latency at 1:05 PM.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的笔记中始终包含时间戳。时间戳有助于操作人员在调试问题时，关联系统中的事件。例如，知道一个服务在下午1点重启，当客户在下午1:05开始报告延迟时，这个信息就非常有用。
- en: Handling Incidents
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理事件
- en: Incident handling is an on-call’s most important responsibility. Most developers
    think handling an incident is about fixing a production problem. Resolving the
    problem is important, but in a critical incident, the top objective is to mitigate
    the impact of the problem and restore service. The second objective is to capture
    information to later analyze how and why the problem happened. Determining the
    cause of the incident, proving it to be the culprit, and fixing the underlying
    problem is only your *third* priority.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理是值班工程师最重要的责任。大多数开发人员认为处理事件就是解决生产问题。解决问题固然重要，但在关键事件中，首要目标是减轻问题的影响并恢复服务。第二个目标是收集信息，后来分析问题发生的原因和经过。确定事件的根本原因，证明它是罪魁祸首，并修复潜在问题只是你的*第三*优先事项。
- en: 'Incident response is broken into these five steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 事件响应分为这五个步骤：
- en: '**Triage**: Engineers must find the problem, decide its severity, and determine
    who can fix it.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分类**：工程师必须找到问题，决定其严重性，并确定谁能解决它。'
- en: '**Coordination**: Teams (and potentially customers) must be notified of the
    issue. If the on-call can’t fix the problem themselves, they must alert those
    who can.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**协调**：必须通知团队（以及可能的客户）问题的存在。如果值班人员无法自己解决问题，他们必须通知可以解决问题的人。'
- en: '**Mitigation**: Engineers must get things stable as quickly as possible. Mitigation
    is not a long-term fix; you are just trying to “stop the bleeding.” Problems can
    be mitigated by rolling back a release, failing over to another environment, turning
    off misbehaving features, or adding hardware resources.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**缓解**：工程师必须尽快稳定系统。缓解并不是长期修复；你只是想“止住血”。可以通过回滚发布、切换到另一个环境、关闭不正常的功能或增加硬件资源来缓解问题。'
- en: '**Resolution**: After the problem is mitigated, engineers have some time to
    breathe, think, and work toward a resolution. Engineers continue to investigate
    the problem to determine and address underlying issues. The incident is resolved
    once the immediate problem has been fixed.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**解决**：问题缓解后，工程师有一些时间来喘口气、思考，并朝着解决方案努力。工程师继续调查问题，以确定并解决潜在的根本原因。只有当立即的问题得到解决时，事件才算解决。'
- en: '**Follow-up**: An investigation is conducted into the root cause—why it happened
    in the first place. If the incident was severe, a formal postmortem, or retrospective,
    is conducted. Follow-up tasks are created to prevent the root cause (or causes)
    from happening again. Teams look for any gaps in process, tooling, or documentation.
    The incident is not considered done until all follow-up tasks have been completed.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**后续跟进**：对根本原因进行调查——为什么问题最初发生。如果事件比较严重，将进行正式的事后分析或回顾。会创建后续任务，以防止根本原因（或原因）再次发生。团队将寻找流程、工具或文档中的任何漏洞。直到所有后续任务完成，事件才算结束。'
- en: The phases of an incident can sound abstract. To make things clear, we’ll walk
    you through a real incident and point out the different phases as we go. The incident
    occurs when data fails to load into a data warehouse. *Data warehouses* are databases
    meant to serve analytical queries for reports and machine learning. This particular
    data warehouse is kept up-to-date by a stream of updates in a real-time messaging
    system. Connectors read messages from the streaming system and write them into
    the warehouse. The data in the data warehouse is used by teams across the company
    for both internal and customer-facing reports, machine learning, application debugging,
    and more.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 事件的各个阶段听起来可能有些抽象。为了让你更清楚，我们将带你走过一个实际事件，并在过程中指出不同的阶段。事件发生在数据未能加载到数据仓库时。*数据仓库*是用于服务报告和机器学习的数据库。这个特定的数据仓库通过实时消息系统中的更新流保持最新。连接器从流系统中读取消息并将其写入仓库。数据仓库中的数据供公司各个团队使用，包括内部和面向客户的报告、机器学习、应用程序调试等。
- en: Triage
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分类
- en: 'Determine a problem’s priority by looking at its impact: How many people is
    it affecting, and how detrimental is it? Use your company’s prioritization categories
    and SLO/SLA definitions to prioritize the issue, with the help of SLIs and the
    metric that triggered the alert, if applicable.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看问题的影响来确定其优先级：它影响了多少人？影响有多严重？根据公司的优先级类别和SLO/SLA定义来优先处理问题，必要时参考触发警报的SLI和度量指标。
- en: If you’re having trouble determining issue severity, ask for help. Triage is
    not the time to prove you can figure things out on your own; time is of the essence.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在判断问题严重性时遇到困难，可以寻求帮助。分类不是证明你能独立解决问题的时刻；时间至关重要。
- en: Likewise, triage is not the time to troubleshoot problems. Your users will continue
    to suffer while you troubleshoot. Save troubleshooting for the mitigation and
    resolution phases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，分诊并不是解决问题的时机。在你进行故障排除时，用户将继续受到影响。将故障排除留到缓解和解决阶段进行。
- en: Coordination
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协调
- en: Coordination starts by figuring out who’s in charge. For lower-priority incidents,
    the on-call is in charge and will coordinate. For larger incidents, an *incident
    commander* will take charge. Commanders keep track of who is doing what and what
    the current state of the investigation is.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 协调从确定谁负责开始。对于低优先级事件，值班人员负责并进行协调。对于更大的事件，*事件指挥官*将负责指挥。指挥官跟踪谁在做什么以及调查的当前状态。
- en: Once someone takes charge, all relevant parties must be notified of the incident.
    Contact everyone needed to mitigate or resolve the problem—other developers or
    SREs. Internal stakeholders such as technical account managers, product managers,
    and support specialists might need to be notified. Impacted users might need to
    be alerted through status pages, emails, Twitter alerts, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有人负责，所有相关方必须被通知事件的发生。联系所有需要的人员来缓解或解决问题——其他开发人员或SRE。可能需要通知内部利益相关者，如技术账户经理、产品经理和支持专家。受影响的用户可能需要通过状态页面、电子邮件、Twitter
    提醒等方式得到通知。
- en: Many different conversations will happen in parallel, which makes it difficult
    to follow what’s happening. Large incidents have war rooms to help with communication.
    *War rooms* are virtual or physical spaces used to coordinate incident response.
    All interested parties join the war room to coordinate response.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 多个不同的对话会并行发生，这使得跟踪发生的事情变得困难。大型事件有指挥中心来帮助沟通。*指挥中心*是用于协调事件响应的虚拟或实体空间。所有相关方都加入指挥中心以协调响应。
- en: 'Track communication in written form in a central location: a ticketing system
    or chat. Communicating helps everyone track progress, saves you from constantly
    answering status questions, prevents duplicate work, and enables others to provide
    helpful suggestions. Share both your observations and your actions, and state
    what you are about to do before you do it. Communicate your work even if you are
    working alone—someone might join later and find the log helpful, and a detailed
    record will help to reconstruct the timeline afterward.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个中央位置（如票务系统或聊天工具）以书面形式跟踪沟通。沟通可以帮助所有人跟踪进展，避免你不断回答状态问题，防止重复工作，并使他人能够提供有益的建议。分享你的观察和行动，并在执行之前说明你将要做什么。即使你是一个人工作，也要进行沟通——后面可能会有其他人加入并发现日志有用，详细记录将有助于事后重建时间线。
- en: Mitigation
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓解
- en: Your goal in the mitigation phase is to reduce the problem’s impact. Mitigation
    isn’t about fixing the problem; it’s about reducing its severity. Fixing a problem
    can take a lot of time, while mitigating it can usually be done quickly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在缓解阶段，你的目标是减少问题的影响。缓解不是修复问题，而是减少其严重性。修复问题可能需要很长时间，而缓解通常可以很快完成。
- en: Incidents are commonly mitigated by rolling back a software release to a “last
    known good” version or by shifting traffic away from the problem. Depending on
    the situation, mitigation might involve turning off a feature flag, removing a
    machine from a pool, or rolling back a just-deployed service.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 事件通常通过回滚软件版本到“最后一个已知良好”版本或将流量转移离开问题来缓解。根据情况，缓解措施可能包括关闭功能标志、从池中移除机器或回滚刚部署的服务。
- en: Ideally, the software you’re working with will have a runbook for the problem.
    *Runbooks* are predefined step-by-step instructions to mitigate common problems
    and perform actions such as restarts and rollbacks. Make sure you know where runbooks
    and troubleshooting guides can be found.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你正在使用的软件应该有一本关于问题的操作手册。*操作手册*是预定义的逐步指令，用于缓解常见问题并执行如重启和回滚等操作。确保你知道操作手册和故障排除指南在哪里可以找到。
- en: Capture what data you can as you work to mitigate the problem. Once mitigated,
    the problem might be hard to reproduce. Quickly saving telemetry data, stack traces,
    heap dumps, logs, and screenshots of dashboards will help with debugging and root-cause
    analysis later.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在努力缓解问题时，尽可能捕获数据。问题缓解后，可能很难重现该问题。快速保存遥测数据、堆栈跟踪、堆转储、日志和仪表板截图，将有助于后续的调试和根本原因分析。
- en: You’ll often find gaps in metrics, tooling, and configuration while trying to
    mitigate the problem. Important metrics might be missing, incorrect permissions
    might be granted, or systems might be misconfigured. Quickly write down any gaps
    that you find—anything that would have made your life better while troubleshooting.
    Open tickets during the follow-up phase to address these gaps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试缓解问题时，你会经常发现度量指标、工具和配置中存在空白。重要的度量指标可能丢失、错误的权限可能被授予，或者系统可能配置错误。快速记录下你发现的任何空白——任何能够让你在故障排查过程中更顺利的内容。之后在后续阶段打开问题单来解决这些空白。
- en: Resolution
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: Once mitigation is complete, the incident is no longer an emergency. You can
    take time to troubleshoot and resolve the underlying issues. In our example incident,
    the priority was dropped once the customer-facing streams recovered. This gave
    breathing room to the engineers so they could investigate the problem.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦缓解措施完成，事件就不再是紧急情况了。你可以花时间排查并解决潜在的问题。在我们的示例事件中，一旦客户-facing 流恢复，优先级就被降低了。这给了工程师们喘息的空间，可以去调查问题。
- en: During the resolution phase, focus on the immediate technical problems. Focus
    on what is needed to recover without the temporary measures put in place during
    mitigation. Set aside larger technical and process problems for the follow-up
    phase.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决阶段，重点解决直接的技术问题。集中精力恢复所需的内容，而不依赖于缓解阶段采取的临时措施。将更大范围的技术和流程问题留到后续阶段再解决。
- en: Use the scientific method to troubleshoot technical problems. Chapter 12 of
    Google’s *Site Reliability Engineering* book offers a *hypothetico-deductive*
    model of the scientific method. Examine the problem, make a diagnosis, and then
    test and treat. If the treatment is successful, the problem is cured; if not,
    you reexamine and start again. The team in our example applied the scientific
    method when they formed a hypothesis that the connector was having deserialization
    issues and not dropping data. They looked at metric data and did their binary-search
    experiment to find the bad stream. If they came up empty-handed, the team would
    need to reformulate a new hypothesis.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用科学方法来排查技术问题。谷歌的《*站点可靠性工程*》一书的第12章提供了一种*假设演绎*的科学方法模型。审视问题，做出诊断，然后测试和治疗。如果治疗成功，问题就得到解决；如果不成功，就重新审视并重新开始。在我们的示例团队中，他们在假设连接器存在反序列化问题而非丢失数据时应用了科学方法。他们查看了度量数据并进行了二分查找实验，以找出坏流。如果没有发现问题，团队就需要重新制定一个新的假设。
- en: 'Ideally, you can quarantine a misbehaving program instance and examine its
    misbehavior. The engineers in our connector example did this when they isolated
    the bad stream to a separate connector. Your goal during resolution is to understand
    the symptoms of the problem and try to make it reproducible. Use all the operational
    data at your disposal: metrics, logs, stack traces, heap dumps, change notifications,
    issue tickets, and communications channels.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你可以隔离一个表现不佳的程序实例并检查其不当行为。在我们的连接器示例中，工程师们就是通过将坏的流隔离到一个单独的连接器来实现的。在解决问题的过程中，你的目标是了解问题的症状，并尝试使其可复现。利用你手头所有的操作数据：度量指标、日志、堆栈跟踪、堆转储、变更通知、问题单以及通讯渠道。
- en: Once you have a clear view of the symptoms, diagnose the problem by looking
    for the causes. Diagnosis is a search, and like any search, you can use search
    algorithms to troubleshoot. For small problems, a linear search—examining components
    front to back—is fine. Use divide and conquer or a binary search (also called
    *half-splitting*) on bigger systems. Find a point halfway through the call stack
    and see if the problem is upstream or downstream of the issue. If the problem
    is upstream, pick a new component halfway upstream; if it’s downstream, do the
    reverse. Keep iterating until you find the component where you believe the problem
    is occurring.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你清楚地了解了症状，就可以通过查找原因来诊断问题。诊断是一种搜索，就像任何搜索一样，你可以使用搜索算法来进行故障排查。对于小问题，线性搜索——从前到后检查组件——是可行的。对于更大的系统，使用分治法或二分查找（也称为*半分割*）会更有效。在调用栈中找到一个中间点，查看问题是发生在上游还是下游。如果问题在上游，选择上游中间的组件；如果问题在下游，则反过来进行。继续迭代，直到找到你认为问题发生的组件。
- en: Next, test your theory. Testing isn’t treatment—you’re not fixing the problem
    yet. Instead, see if you can control the bad behavior. Can you reproduce it? Can
    you change a configuration to make the problem go away? If so, you’ve located
    the cause. If not, you’ve eliminated one potential cause—go back, reexamine, and
    formulate a new diagnosis to test. Once the team in the connector example believed
    they had narrowed the problem to a header deserialization issue, they tested their
    theory by disabling header decoding in the connector configuration.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，测试你的理论。测试不是治疗——你还没有修复问题。相反，看看你是否能够控制不良行为。你能重现这个问题吗？你能更改配置使问题消失吗？如果可以，那么你已经找到了原因。如果不能，那就说明你排除了一个潜在的原因——回去重新检查，制定新的诊断进行测试。当连接器的团队认为他们已经将问题缩小到头信息反序列化问题时，他们通过禁用连接器配置中的头信息解码来测试他们的理论。
- en: After a successful test, you can decide on the best course of treatment. Perhaps
    a configuration change is all that’s needed. Often, a bug fix will need to be
    written, tested, and applied. Apply the treatment and verify that it’s working
    as expected. Keep an eye on metrics and logs until you’re convinced everything
    is stable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的测试之后，你可以决定最合适的处理方法。也许只需要更改配置。通常情况下，需要编写、测试并应用一个bug修复。应用修复并验证它是否按预期工作。保持关注指标和日志，直到你确信一切稳定。
- en: Follow-Up
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后续跟进
- en: Incidents are a big deal, so they need follow-up. The goal is to learn from
    the incident and to prevent it from happening again. A *postmortem* document is
    written and reviewed, and tasks are opened to prevent recurrence.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 事件是很严重的事情，因此需要跟进。目标是从事件中学习并防止其再次发生。撰写并审查*事后文档*，并打开任务以防止事件复发。
- en: The on-call engineer who dealt with the incident is responsible for drafting
    a postmortem document, which should capture what happened, what was learned, and
    what needs to be done to prevent the incident from happening again. There are
    many approaches and templates for writing a postmortem. One good example is Atlassian’s
    postmortem template ([https://www.atlassian.com/incident-management/postmortem/templates/](https://www.atlassian.com/incident-management/postmortem/templates/)).
    The template has sections and examples describing the lead-up, fault, impact,
    detection, response, recovery, timeline, root cause, lessons learned, and corrective
    actions needed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 处理该事件的值班工程师负责起草事后文档，文档应当记录发生了什么，学到了什么，以及需要采取哪些措施防止类似事件再次发生。有许多方法和模板可以用来编写事后文档。一个好的例子是Atlassian的事后文档模板（[https://www.atlassian.com/incident-management/postmortem/templates/](https://www.atlassian.com/incident-management/postmortem/templates/)）。该模板包含了各个部分和示例，描述了事件的前因、故障、影响、检测、响应、恢复、时间线、根本原因、教训和需要采取的纠正措施。
- en: 'A critical section of any postmortem document is the *root-cause analysis (RCA)*
    section. Root-cause analysis is performed using the five whys. This technique
    is pretty simple: keep asking why. Take a problem and ask why it happened. When
    you get an answer, ask why again. Keep asking why until you get to the root cause.
    The “five” is anecdotal—most problems take about five iterations to get to the
    root cause.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 任何事后分析文档的关键部分是*根本原因分析（RCA）*部分。根本原因分析使用五个“为什么”来进行。这种方法非常简单：不断地问为什么。找出一个问题并问它为什么会发生。当你得到一个答案时，再问为什么。一直问下去，直到你找出根本原因。“五个”是一个经验性说法——大多数问题大约需要五次迭代才能找到根本原因。
- en: '**Problem: Data Missing from Data Warehouse**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题：数据仓库中的数据丢失**'
- en: '**Why?** The connector wasn’t loading data into the data warehouse.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为什么？** 连接器未将数据加载到数据仓库中。'
- en: '**Why?** The connector couldn’t deserialize incoming messages.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为什么？** 连接器无法反序列化传入的消息。'
- en: '**Why?** The incoming messages had bad headers.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为什么？** 传入的消息有错误的头信息。'
- en: '**Why?** The APM was inserting headers into the messages.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为什么？** APM将头信息插入到消息中。'
- en: '**Why?** The APM defaulted to this behavior without developer knowledge.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为什么？** APM在没有开发人员知识的情况下默认采用了这种行为。'
- en: In this example, the root cause was the APM’s accidental message header configuration.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，根本原因是APM意外的消息头配置。
- en: After a postmortem document is written, one of the managers or tech leads schedules
    a review meeting with all interested parties. The postmortem document author leads
    the review, and participants discuss each section in detail. The author adds missing
    information and new tasks as they’re discovered during discussion.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在事后文档写好后，其中一位经理或技术负责人安排与所有相关方的评审会议。文档的作者主导评审，参与者详细讨论每个部分。作者会根据讨论中发现的新任务和缺失的信息进行补充。
- en: It’s easy to get upset and cast blame in high-stress situations. Do your best
    to provide constructive feedback. Point out areas for improvement, but avoid blaming
    individuals or teams for problems. “Peter didn’t disable message headers” assigns
    blame, while “Message header config changes aren’t going through code review”
    is an area for improvement. Don’t let postmortems turn into unhealthy vent fests.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在高压情况下，容易感到沮丧并责怪他人。尽量提供建设性的反馈。指出可以改进的地方，但避免将问题归咎于个人或团队。“Peter没有禁用消息头”是在指责，而“消息头配置变更没有通过代码审查”则是一个可以改进的地方。不要让事后分析会议变成不健康的发泄场所。
- en: 'Good postmortem meetings also keep “solutioning” separate from the review meeting.
    *Solutioning*—figuring out how to solve a problem—takes a long time and distracts
    from the purpose of the meeting: to discuss problems and assign tasks. “The message
    had a bad header” is a problem, while “We should put bad messages in a dead letter
    queue” is a solution. Any solutioning should happen in follow-up tasks.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的事后分析会议会将“解决方案”与回顾会议分开。*解决方案*——找出如何解决问题——需要很长时间，会分散会议的核心目的：讨论问题并分配任务。“消息头不正确”是一个问题，而“我们应该把错误的消息放入死信队列”是一个解决方案。所有的解决方案应该在后续任务中进行。
- en: After a postmortem meeting, follow-up tasks must be completed. If tasks are
    assigned to you, work with your manager and the postmortem team to prioritize
    them properly. An incident can’t be closed until all remaining follow-up tasks
    have been finished.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在事后分析会议之后，必须完成跟进任务。如果有任务分配给你，请与你的经理和事后分析团队合作，合理地对任务进行优先级排序。一个事件在所有剩余的跟进任务完成之前不能关闭。
- en: Old postmortem documents are a great way to learn. Some companies even share
    their postmortem documents publicly as valuable resources for the whole community
    to learn from. Look at Dan Luu’s collection for inspiration ([https://github.com/danluu/post-mortems](https://github.com/danluu/post-mortems)).
    You might find postmortem reading groups at your company, too. Teams get together
    to review postmortem documents with a wider audience. Some teams even use old
    postmortem documents to simulate production issues to train new engineers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的事后分析文档是很好的学习资料。一些公司甚至将其事后分析文档公开分享，作为社区内大家共同学习的宝贵资源。你可以参考Dan Luu的收藏作为灵感来源（[https://github.com/danluu/post-mortems](https://github.com/danluu/post-mortems)）。你也许能在公司内部找到事后分析阅读小组。团队会集合起来，和更多人一起回顾事后分析文档。一些团队甚至会用旧的事后分析文档来模拟生产问题，训练新工程师。
- en: Providing Support
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供支持
- en: When on-call engineers aren’t dealing with incidents, they spend time handling
    support requests. These requests come both from within the organization and from
    external customers, and they run the gamut from simple “Hey, how does this work?”
    questions to difficult troubleshooting problems. Most requests are bug reports,
    questions about business logic, or technical questions about how to use your software.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当值班工程师没有处理事件时，他们会花时间处理支持请求。这些请求既来自公司内部，也来自外部客户，内容从简单的“嘿，这个怎么用？”到困难的故障排除问题不等。大多数请求都是关于bug的报告、业务逻辑问题或如何使用你们的软件的技术问题。
- en: 'Support requests follow a pretty standard flow. When a request comes in, you
    should acknowledge that you’ve seen it and ask questions to make sure you understand
    the problem. Once you’ve got a grasp on the problem, give a time estimate on the
    next update: “I’ll get back to you by 5 PM with an update.” Next, start investigating,
    and update the requestor as you go. Follow the same mitigation and resolution
    strategies that we outlined earlier. When you think the issue is resolved, ask
    the requestor to confirm. Finally, close out the request. Here’s an example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 支持请求遵循一个相当标准的流程。当请求到达时，你应该确认已看到并提出问题，确保你理解问题。一旦你掌握了问题的关键，就给出下一次更新的时间估计：“我将在下午5点前给你回复。”接下来，开始调查，并在过程中不断更新请求者。按照我们之前概述的缓解和解决策略进行操作。当你认为问题已经解决时，请请求者确认。最后，关闭请求。以下是一个示例：
- en: '[3:48 PM] Sumeet: I’m getting reports from customers saying page loads are
    slow.'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[下午3:48] Sumeet: 我收到客户报告，说页面加载缓慢。'
- en: ''
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[4:12 PM] Janet: Hi, Sumeet. Thanks for reporting this. Can I get a few more
    pieces of information? Can you give me one or two customer IDs that reported slowness
    and any particular pages they are seeing the issue on? Our dashboards aren’t showing
    any widespread latency.'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[下午4:12] Janet: 你好，Sumeet。感谢你报告这个问题。能提供更多信息吗？能否给我一个或两个报告页面加载缓慢的客户ID，以及他们遇到问题的具体页面？我们的仪表盘没有显示出任何广泛的延迟。'
- en: ''
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[5:15 PM] Sumeet: Customer IDs 1934 and 12305\. Pages: the ops main page (/ops)
    and the APM chart (/ops/apm/dashboard). They’re saying loads are taking > 5 seconds.'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[5:15 PM] Sumeet: 客户ID 1934和12305。页面：操作主页面（/ops）和APM图表（/ops/apm/dashboard）。他们表示页面加载时间超过了5秒。'
- en: ''
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[5:32 PM] Janet: Great, thanks. I’ll have an update for you by 10 tomorrow
    morning.'
  id: totrans-101
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[5:32 PM] Janet: 很好，谢谢。我明早10点之前会给你一个更新。'
- en: ''
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[8:15 AM] Janet: Okay, I think I know what’s going on. We had maintenance on
    the database that powers the APM dashboard yesterday afternoon. It impacted the
    ops main page since we show a roll-up there, too. The maintenance finished around
    8 PM. Can you confirm that the customer is no longer seeing the issue?'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[8:15 AM] Janet: 好的，我想我知道发生了什么。我们昨天下午对APM仪表盘背后的数据库进行了维护。它影响了操作主页面，因为我们在那里也显示了汇总信息。维护大约在晚上8点完成。你能确认客户不再看到这个问题吗？'
- en: ''
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[9:34 AM] Sumeet: Awesome! Just confirmed with a couple of the customers who
    reported the issue. Page loads are now much better.'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[9:34 AM] Sumeet: 太棒了！刚刚与几位报告问题的客户确认了。页面加载现在好多了。'
- en: This example illustrates many practices covered in “Important On-Call Skills.”
    Janet, the on-call, is *paying attention* and *makes herself available*; she responds
    within a half hour of the first request. Janet *communicates clearly* by asking
    clarifying questions to understand the problem and its impact so she can properly
    *prioritize the issue*. She posts an ETA for the next update when she has enough
    information to investigate. Once Janet believes the problem is solved, she *tracks
    her work* by describing what happened and asks the requestor to confirm it’s not
    an issue anymore.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了在《重要的值班技能》中涉及的许多实践。Janet，作为值班人员，*保持关注*并*保持可用*；她在收到第一个请求后半小时内做出了回应。Janet通过提出澄清性问题来*清晰沟通*，以便理解问题及其影响，从而可以合理地*优先处理问题*。当她有足够信息进行调查时，她会发布下次更新的预计时间。一旦Janet认为问题已解决，她会通过描述发生了什么来*跟踪她的工作*，并请求请求者确认问题不再存在。
- en: Support can feel like a distraction, since your “real” job is programming. Think
    of support as an opportunity to learn. You’ll get to see how your team’s software
    is used in the real world and the ways in which it fails or confuses users. Answering
    support requests will take you to parts of the code you were not familiar with;
    you’ll have to think hard and experiment. You will notice patterns that cause
    problems, which will help you create better software in the future. Support rotations
    will make you a better engineer. Plus, you get to help others and build relationships
    and your reputation. Fast, high-quality support responses do not go unnoticed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 支持工作可能让人感觉像是一种干扰，因为你的“真正”工作是编程。将支持视为一次学习机会。你将看到团队软件在现实世界中的使用方式，以及它如何让用户感到困惑或出现故障。回答支持请求会带你去一些你不熟悉的代码部分；你必须深入思考并进行实验。你会注意到一些造成问题的模式，这将帮助你今后开发出更好的软件。支持轮换将使你成为一个更好的工程师。而且，你可以帮助他人，建立关系和声誉。快速、高质量的支持响应不会被忽视。
- en: Don’t Be a Hero
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 别做英雄
- en: 'We’ve spent quite a few words in this chapter encouraging you not to shy away
    from on-call responsibilities and ad hoc support requests. There is another extreme
    we want to warn you about: doing too much. On-call activities can feel gratifying.
    Colleagues routinely thank you for helping them with issues, and managers praise
    efficient incident resolution. However, doing too much can lead to burnout.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中花了不少篇幅鼓励你不要回避值班责任和临时支持请求。还有一个极端情况我们想提醒你：做得太多。值班工作可能会让人感到满足，同事们常常感谢你帮助他们解决问题，经理也会赞扬你高效地解决了突发事件。然而，做得太多会导致精疲力竭。
- en: 'For some engineers, jumping into “firefighting” mode becomes a reflex as they
    become more experienced. Talented firefighting engineers can be a godsend to a
    team: everyone knows that when things get tough, all they need to do is ask the
    firefighter, and they’ll fix it. Depending on a firefighter is not healthy. Firefighters
    who are pulled into every issue effectively become permanently on-call. The long
    hours and high stakes will cause burnout. Firefighter engineers also struggle
    with their programming or design work because they are constantly being interrupted.
    And teams that rely on a firefighter won’t develop their own expertise and troubleshooting
    abilities. Firefighter heroics can also cause fixes for serious underlying problems
    to be deprioritized because the firefighter is always around to patch things up.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一些工程师来说，进入“灭火”模式会随着经验的增加而成为一种本能反应。优秀的灭火工程师对于团队来说如同上天赐予的宝物：每个人都知道，当事情变得棘手时，只需要找灭火工程师，他们就能解决问题。然而，依赖灭火工程师并不健康。被频繁拉进每个问题中的灭火工程师，实际上变成了一个永久待命的角色。长时间的高压工作会导致职业倦怠。灭火工程师也会因为不断被打断而无法专心进行编程或设计工作。而依赖灭火工程师的团队将不会发展自己的专业知识和故障排除能力。灭火英雄式的行为还可能导致根本性问题的修复被优先级降低，因为灭火工程师总是在那儿及时补救。
- en: 'If you feel that you are the only one who can fix a problem or that you are
    routinely involved in firefighting when not on-call, you might be becoming a “hero.”
    Talk to your manager or tech lead about ways to find better balance and get more
    people trained and available to step in. If there’s a hero on your team, see if
    you can learn from them and pick up some of the burden; let them know when you
    are okay struggling a bit: “Thanks, Jen. I actually want to try to figure this
    out on my own for a bit so I can skill up . . . Can I ask for your help in 30
    minutes if this is still a mystery?”'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得自己是唯一能解决问题的人，或者当你没有在待命时仍然经常参与灭火工作，你可能正在变成一个“英雄”。与经理或技术负责人讨论如何找到更好的平衡，并让更多的人接受培训，随时准备接手工作。如果你的团队里有一个英雄，看看是否可以向他们学习，分担一些负担；让他们知道你什么时候能自己尝试一下：“谢谢你，Jen。我其实想自己试试解决这个问题，提升技能……如果这仍然是个谜，我能在30分钟后请你帮忙吗？”
- en: Do’s and Don’ts
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做与不做
- en: '| **Do’s** | **Don’ts** |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| **做的事** | **不做的事** |'
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **DO** add known “pager” numbers to your phone’s contacts. | **DON’T** ignore
    alerts. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| **做** 将已知的“寻呼机”号码添加到手机联系人中。 | **不要** 忽视警报。 |'
- en: '| **DO** use priority categories, SLIs, SLOs, and SLAs to prioritize incident
    response. | **DON’T** try to troubleshoot during triage. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| **做** 使用优先级类别、SLI、SLO 和 SLA 来优先处理事件响应。 | **不要** 在分诊时尝试排除故障。 |'
- en: '| **DO** triage, coordinate, mitigate, resolve, and follow up on critical incidents.
    | **DON’T** leave a problem unmitigated while you search for the root cause. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| **做** 对关键事件进行分诊、协调、缓解、解决和跟进。 | **不要** 在寻找根本原因时放任问题未得到缓解。 |'
- en: '| **DO** use the scientific method to troubleshoot. | **DON’T** cast blame
    during postmortems. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| **做** 使用科学方法来排除故障。 | **不要** 在事后分析中归咎于他人。 |'
- en: '| **DO** ask “the five whys” when following up on an incident. | **DON’T**
    hesitate to close nonresponsive support requests. |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| **做** 在跟进事件时提出“五个为什么”。 | **不要** 犹豫关闭无响应的支持请求。 |'
- en: '| **DO** acknowledge support requests. | **DON’T** ask support requestors what
    their priority is; ask about the impact of the problem. |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| **做** 确认支持请求。 | **不要** 询问支持请求者他们的优先级是什么；询问问题的影响。 |'
- en: '| **DO** give time estimates and periodic updates. | **DON’T** be a hero who
    has to fix all the things. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| **做** 给出时间估计和定期更新。 | **不要** 成为必须解决所有问题的英雄。 |'
- en: '| **DO** confirm a problem is fixed before closing a support request ticket.
    |  |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **做** 在关闭支持请求单之前确认问题已经解决。 |  |'
- en: '| **DO** redirect support requests to the appropriate communication channels.
    |  |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| **做** 将支持请求重定向到适当的沟通渠道。 |  |'
- en: Level Up
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提升技能
- en: The five phases of incident response in our “Handling Incidents” section come
    from an *Increment* article, “What Happens When the Pager Goes Off?” ([https://increment.com/on-call/when-the-pager-goes-off/](https://increment.com/on-call/when-the-pager-goes-off/)).
    The article has more quotes and detail around how different companies handle incidents.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在《处理事件》部分中提到的事件响应五个阶段来自*Increment*文章《当寻呼机响起时会发生什么？》([https://increment.com/on-call/when-the-pager-goes-off/](https://increment.com/on-call/when-the-pager-goes-off/))。这篇文章中有更多的引用和详细信息，讲述了不同公司是如何处理事件的。
- en: In more nascent operations settings, developers might need to define SLIs and
    SLOs themselves. If you find yourself responsible for SLIs and SLOs, we highly
    recommend Chapter 4 of Google’s *Site Reliability Engineering* book.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在较为初期的运维环境中，开发人员可能需要自行定义SLI和SLO。如果你发现自己负责SLI和SLO，我们强烈推荐阅读谷歌的《*站点可靠性工程*》第4章。
- en: Chapters 11, 13, 14, and 15 of *Site Reliability Engineering* cover on-call,
    emergency response, incident handling, and postmortems. We’ve included the most
    important information for new engineers in our chapter, but Google’s book provides
    more detail if you want to go deeper.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 《*站点可靠性工程*》第11、13、14和15章涵盖了值班、应急响应、事件处理和事后分析。我们在本章中包含了针对新工程师最重要的信息，但如果你想深入了解，谷歌的书籍提供了更多细节。
