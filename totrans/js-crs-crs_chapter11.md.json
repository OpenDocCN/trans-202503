["```\nclass GameView {\n❶ constructor() {\n    let canvas = document.querySelector(\"#canvas\");\n    this.ctx = canvas.getContext(\"2d\");\n this.width = canvas.width;\n    this.height = canvas.height;\n    this.offsetTop = canvas.offsetTop;\n  }\n\n❷ draw(…entities) {\n    // Fill the canvas with black\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.width, this.height);\n\n  ❸ entities.forEach(entity => entity.draw(this.ctx));\n    }\n\n❹ drawScores(scores) {\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"30px monospace\";\n    this.ctx.textAlign = \"left\";\n    this.ctx.fillText(scores.leftScore.toString(), 50, 50);\n    this.ctx.textAlign = \"right\";\n    this.ctx.fillText(scores.rightScore.toString(), this.width - 50, 50);\n  }\n\n❺ drawGameOver() {\n    this.ctx.fillStyle = \"white\";\n    this.ctx.font = \"30px monospace\";\n    this.ctx.textAlign = \"center\";\n    this.ctx.fillText(\"GAME OVER\", this.width / 2, this.height / 2);\n  }\n} \n```", "```\nclass Entity {\n❶ constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    }\n\n❷ boundingBox() {\n    return {\n      left: this.x,\n      right: this.x + this.width,\n      top: this.y,\n      bottom: this.y + this.height\n    };\n  }\n\n❸ draw(ctx) {\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(this.x, this.y, this.width, this.height);\n  }\n} \n```", "```\nclass Paddle extends Entity {\n❶ static WIDTH = 5;\n  static HEIGHT = 20\n  static OFFSET = 10;\n\n❷ constructor(x, y) {\n    super(x, y, Paddle.WIDTH, Paddle.HEIGHT);\n  }\n} \n```", "```\nclass Ball extends Entity {\n❶ static SIZE = 5;\n\n❷ constructor() {\n    super(0, 0, Ball.SIZE, Ball.SIZE);\n  ❸ this.init();\n  }\n\n❹ init() {\n    this.x = 20;\n    this.y = 30;\n    this.xSpeed = 4;\n    this.ySpeed = 2;\n  }\n\n❺ update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n    }\n\n❻ adjustAngle(distanceFromTop, distanceFromBottom) {\n    if (distanceFromTop < 0) {\n      // If ball hit near top of paddle, reduce ySpeed\n      this.ySpeed -= 0.5;\n    } else if (distanceFromBottom < 0) {\n      // If ball hit near bottom of paddle, increase ySpeed\n      this.ySpeed += 0.5;\n    }\n  } \n```", "```\nclass Ball extends Entity {\n--snip--\n  checkPaddleCollision(paddle, xSpeedAfterBounce) {\n  ❶ let ballBox = this.boundingBox();\n    let paddleBox = paddle.boundingBox();\n\n    // Check if the ball and paddle overlap vertically and horizontally\n  ❷ let collisionOccurred = (\n      ballBox.left< paddleBox.right &&\n      ballBox.right  > paddleBox.left &&\n      ballBox.top< paddleBox.bottom &&\n      ballBox.bottom > paddleBox.top\n    );\n\n    if (collisionOccurred) {\n      let distanceFromTop = ballBox.top - paddleBox.top;\n      let distanceFromBottom = paddleBox.bottom - ballBox.bottom;\n    ❸ this.adjustAngle(distanceFromTop, distanceFromBottom);\n    ❹ this.xSpeed = xSpeedAfterBounce;\n    }\n  }\n\n  checkWallCollision(width, height, scores) {\n    let ballBox = this.boundingBox();\n\n    // Hit left wall\n  ❺ if (ballBox.left < 0) {\n      scores.rightScore++;\n      this.init();\n    }\n    // Hit right wall\n  ❻ if (ballBox.right > width) {\n      scores.leftScore++;\n      this.init();\n    }\n    // Hit top or bottom walls\n    if (ballBox.top < 0 || ballBox.bottom > height) {\n    ❼ this.ySpeed = -this.ySpeed;\n    }\n  }\n} \n```", "```\nclass Scores {\n❶ constructor() {\n    this.leftScore = 0;\n    this.rightScore = 0;\n   }\n}\n\nclass Computer {\n❷ static followBall(paddle, ball) {\n    const MAX_SPEED = 2;\n    let ballBox = ball.boundingBox();\n    let paddleBox = paddle.boundingBox();\n\n    if (ballBox.top < paddleBox.top) {\n      paddle.y -= MAX_SPEED;\n    } else if (ballBox.bottom > paddleBox.bottom) {\n      paddle.y += MAX_SPEED;\n    }\n  }\n} \n```", "```\nclass Game {\n  constructor() {\n    this.gameView = new GameView();\n    this.ball = new Ball();\n  ❶ this.leftPaddle = new Paddle(Paddle.OFFSET, 10);\n  ❷ this.rightPaddle = new Paddle(\n      this.gameView.width - Paddle.OFFSET - Paddle.WIDTH,\n      30\n    );\n\n  ❸ this.scores = new Scores();\n    this.gameOver = false;\n\n  ❹ document.addEventListener(\"mousemove\", e => {\n    this.rightPaddle.y = e.y - this.gameView.offsetTop;\n    });\n  }\n\n  draw() {\n  ❺ this.gameView.draw(\n      this.ball,\n      this.leftPaddle,\n      this.rightPaddle\n    );\n\n  ❻ this.gameView.drawScores(this.scores);\n  } \n```", "```\nclass Game {\n--snip--\n  checkCollision() {\n    this.ball.checkPaddleCollision(this.leftPaddle,\n                                 ❶ Math.abs(this.ball.xSpeed));\n    this.ball.checkPaddleCollision(this.rightPaddle,\n                                 ❷ -Math.abs(this.ball.xSpeed));\n\n  ❸ this.ball.checkWallCollision(\n      this.gameView.width,\n      this.gameView.height,\n      this.scores\n    );\n\n  ❹ if (this.scores.leftScore > 9 || this.scores.rightScore > 9) {\n      this.gameOver = true;\n    }\n  }\n\n❺ update() {\n    this.ball.update();\n    Computer.followBall(this.leftPaddle, this.ball);\n  }\n\n❻ loop() {\n    this.draw();\n    this.update();\n    this.checkCollision();\n\n  ❼ if (this.gameOver) {\n      this.draw();\n      this.gameView.drawGameOver();\n    } else {\n      // Call this method again after a timeout\n    ❽ setTimeout(() => this.loop(), 30);\n    }\n  }\n} \n```", "```\nlet game = new Game();\ngame.loop(); \n```"]