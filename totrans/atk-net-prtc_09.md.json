["```\n def read_string()\n {\n➊ byte str[32];\n  int i  = 0;\n\n  do\n  {\n  ➋ str[i] = read_byte();\n     i = i + 1;\n  }\n➌ while(str[i-1] != 0);\n  printf(\"Read String: %s\\n\", str);\n}\n```", "```\n def read_string_fixed()\n {\n➊ byte str[32];\n  int i = 0;\n do\n  {\n  ➋ str[i] = read_byte();\n     i = i + 1;\n  }\n➌ while((str[i-1] != 0) && (i < 32));\n\n  /* Ensure zero terminated if we ended because of length */\n➍ str[i] = 0;\n\n  printf(\"Read String: %s\\n\", str);\n}\n```", "```\n   def read_uint32_array()\n   {\n     uint32 len;\n     uint32[] buf;\n\n     // Read the number of words from the network\n➊   len = read_uint32();\n\n     // Allocate memory buffer\n➋   buf = malloc(len * sizeof(uint32));\n\n     // Read values\n     for(uint32 i = 0; i < len; ++i)\n     {\n➌     buf[i] = read_uint32();\n     }\n     printf(\"Read in %d uint32 values\\n\", len);\n   }\n```", "```\n➊ byte app_flags[32];\n\n   def update_flag_value()\n   {\n  ➋ byte index = read_byte();\n     byte value = read_byte();\n\n     printf(\"Writing %d to index %d\\n\", value, index);\n\n  ➌ app_flags[index] = value;\n   }\n```", "```\n   void read_compressed_buffer()\n   {\n     byte buf[];\n     uint32 len;\n     int i = 0;\n\n     // Read the decompressed size\n➊   len = read_uint32();\n\n     // Allocate memory buffer\n➋   buf = malloc(len);\n\n➌   gzip_decompress_data(buf)\n\n     printf(\"Decompressed in %d bytes\\n\", len);\n   }\n```", "```\n def process_authentication()\n {\n➊ string username = read_string();\n   string password = read_string();\n\n   // Check for debug user, don't forget to remove this before release\n➋ if(username == \"debug\")\n   {\n     return true;\n   }\n   else\n   {\n  ➌ return check_user_password(username, password);\n   }\n}\n```", "```\n def process_authentication()\n {\n   string username = read_string();\n   string password = read_string();\n\n➊ if(user_exists(username) == false)\n   {\n  ➋ write_error(\"User \" + username \" doesn't exist\");\n   }\n   else\n   {\n  ➌ if(check_user_password(username, password))\n     {\n       write_success(\"User OK\");\n     }\n     else\n     {\n    ➍ write_error(\"User \" + username \" password incorrect\");\n     }\n   }\n}\n```", "```\n   def send_file_to_client()\n   {\n➊   string name = read_string();\n    // Concatenate name from client with base path\n➋   string fullPath = \"/files\" + name;\n\n➌   int fd = open(fullPath, READONLY);\n\n    // Read file to memory\n➍   byte data[] read_to_end(fd);\n\n    // Send to client\n➎   write_bytes(data, len(data));\n   }\n```", "```\n def send_file_to_client_with_error()\n {\n➊ string name = read_string();\n\n   // Concatenate name from client with base path\n➋ string fullPath = \"/files\" + name;\n\n➌ if(!exist(fullPath))\n   {\n  ➍ write_error(\"File \" + fullPath + \" doesn't exist\");\n   }\n   else\n   {\n  ➎ write_file_to_client(fullPath);\n   }\n}\n```", "```\n def read_buffer()\n {\n   byte buf[];\n   uint32 len;\n   int i = 0;\n\n   // Read the number of bytes from the network\n➊ len = read_uint32();\n\n   // Allocate memory buffer\n➋ buf = malloc(len);\n\n   // Allocate bytes from network\n➌ read_bytes(buf, len);\n\n   printf(\"Read in %d bytes\\n\", len);\n }\n```", "```\ndef bubble_sort(int[] buf)\n{\n  do\n  {\n    bool swapped = false;\n    int N = len(buf);\n    for(int i = 1; i < N - 1; ++i)\n    {\n      if(buf[i-1] > buf[i])\n      {\n        // Swap values\n        swap( buf[i-1], buf[i] );\n        swapped = true;\n      }\n    }\n  } while(swapped == false);\n}\n```", "```\n   def process_authentication()\n   {\n➊   string username = read_string();\n     string password = read_string();\n➋   int iterations = read_int();\n\n     for(int i = 0; i < interations; ++i)\n     {\n➌     password = hash_password(password);\n     }\n\n➍   return check_user_password(username, password);\n   }\n```", "```\ndef process_authentication()\n{\n      string username = read_string();\n      string password = read_string();\n\n      // Print username and password to terminal\n      printf(username);\n      printf(password);\n\n      return check_user_password(username, password))\n}\n```", "```\n def update_password(string username)\n {\n➊ string oldpassword = read_string();\n   string newpassword = read_string();\n\n   if(check_user_password(username, oldpassword))\n   {\n     // Invoke update_password command\n  ➋ system(\"/sbin/update_password -u \" + username + \" -p \" + newpassword);\n   }\n }\n```", "```\n   def process_authentication()\n   {\n➊   string username = read_string();\n     string password = read_string();\n\n➋   string sql = \"SELECT password FROM user_table WHERE user = '\" + username \"'\";\n\n➌   return run_query(sql) == password;\n   }\n```", "```\n def add_user()\n {\n➊ string username = read_unicode_string();\n\n   // Ensure username doesn't contain any single quotes\n➋ if(username.contains(\"'\") == false)\n   {\n     // Add user, need to convert to ASCII for the shell\n  ➌ system(\"/sbin/add_user '\" + username.toascii() + \"'\");\n   }\n }\n```"]