["```\n\n\t\t\t%1011\n%1010_1111\n%0011_1111_0001_1001\n%1011001010010101\n```", "```\n\n\t\t\t0b1011\n0b10101111\n0b0011111100011001\n0b1011001010010101\n```", "```\n\n\t\t\t1011b\n10101111b\n0011111100011001b\n1011001010010101b\n```", "```\n\n\t\t\t123\n1209345\n```", "```\n\n\t\t\t1_024\n1_021_567\n```", "```\n\n\t\t\t123\n1209345\n```", "```\n\n\t\t\t$1AB0\n$1234_ABCD\n$dead\n```", "```\n\n\t\t\t0x1AB0\n0x1234ABCD\n0xdead\n```", "```\n\n\t\t\t1AB0h\n1234ABCDh\n0deadh\n```", "```\n\n\t\t\t'a'\n''''\n' '\n#$d\n#10\n#%0000_1000\n```", "```\n\n\t\t\t\"Hello World\"\n\"\" -- The empty string\n\"He said \"\"Hello\"\" to them\"\n\"\"\"\" -- string containing one quote character\n```", "```\n\n\t\t\t'a\n''\n'!\n'a'   // Modern versions of Gas and Mac's assembler\n'!'   // Modern versions of Gas and Mac's assembler\n```", "```\n\n\t\t\t\"Hello World\"\n\"\" -- The empty string\n\"He said \\\"Hello\\\" to them\"\n\"\\\"\" -- string containing one quote character\n```", "```\n\n\t\t\t'a'\n\"'\" - An apostrophe character\n'\"' - A quote character\n\"Hello World\"\n\"\" -- The empty string\n'He said \"Hello\" to them'\n```", "```\n\n\t\t\t3.14159\n2.71e+2\n1.0e-5\n5e2\n```", "```\n\n\t\t\tconst\n    someIdentifier := someValue;\n```", "```\n\n\t\t\tconst\n    aCharConst := 'a';\n    anIntConst := 12345;\n    aStrConst := \"String Const\";\n    aFltConst := 3.12365e-2;\n\nval\n    anotherCharConst := 'A';\n    aSignedConst := -1;\n```", "```\n?aValConst := 0;\n```", "```\n\n\t\t\t.equ        symbolName, value\n```", "```\n\n\t\t\t.equ        false, 0\n.equ        true, 1\n.equ        anIntConst, 12345\n```", "```\n\n\t\t\tfalse       equ    0\ntrue        equ    1\nanIntConst  equ    12345\n```", "```\n\n\t\t\tfalse       =    0\ntrue        =    1\nanIntConst  =    12345\n```", "```\n\n\t\t\tmov( source, destination );\n```", "```\n\n\t\t\tmov( bx, ax );      // Copies the value from BX into AX\nmov( al, dl );      // Copies the value from AL into DL\nmov( edx, esi );    // Copies the value from EDX into ESI\n```", "```\n\n\t\t\t%al, %ah, %bl, %bh, %cl, %ch, %dl, %dh\n%ax, %bx, %cx, %dx, %si, %di, %bp, %sp\n%eax, %ebx, %ecx, %edx, %esi, %edi, %ebp, %esp\n%rax, %rbx, %rcx, %rdx, %rsi, %rdi, %rbp, %rsp\n%r15b, %r14b, %r13b, %r12b, %r11b, %r10b, %r9b, %r8b\n%r15w, %r14w, %r13w, %r12w, %r11w, %r10w, %r9w, %r8w\n%r15d, %r14d, %r13d, %r12d, %r11d, %r10d, %r9d, %r8d\n%r15, %r14, %r13, %r12, %r11, %r10, %r9, %r8\n```", "```\n\n\t\t\tmov %bx, %ax       // Copies the value from BX into AX\nmov %al, %dl       // Copies the value from AL into DL\nmov %edx, %esi     // Copies the value from EDX into ESI\n```", "```\n\n\t\t\tal, ah, bl, bh, cl, ch, dl, dh\nax, bx, cx, dx, si, di, bp, sp\neax, ebx, ecx, edx, esi, edi, ebp, esp\nrax, rbx, rcx, rdx, rsi, rdi, rbp, rsp\nr15b, r14b, r13b, r12b, r11b, r10b, r9b, r8b\nr15w, r14w, r13w, r12w, r11w, r10w, r9w, r8w\nr15d, r14d, r13d, r12d, r11d, r10d, r9d, r8d\nr15, r14, r13, r12, r11, r10, r9, r8\n```", "```\n\n\t\t\tmov destination, source\n```", "```\n\n\t\t\tmov ax, bx       ; Copies the value from BX into AX\nmov dl, al       ; Copies the value from AL into DL\nmov esi, edx     ; Copies the value from EDX into ESI\n```", "```\n\n\t\t\tmov( 0, al );\nmov( 12345, bx );\nmov( 123_456_789, ecx );\n```", "```\n\n\t\t\tmov( 'a', ch );  // HLA\nmov $'a', %ch    // Gas\nmov ch, 'a'       ; MASM\n\nmov( $1234, ax ); // HLA\nmov $0x1234, %ax  // Gas\nmov ax, 1234h      ; MASM\n\nmov( 4_012_345_678, eax ); // HLA\nmov $4012345678, %eax      // Gas\nmov eax, 4012345678         ; MASM\n```", "```\n\n\t\t\tmov( true, al );\nmov( false, ah );\n```", "```\n\n\t\t\tmov( byteVar, ch );  // HLA\nmovb byteVar, %ch    // Gas\nmov ch, byteVar       ; MASM\n\nmov( wordVar, ax ); // HLA\nmovw wordVar, %ax   // Gas\nmov ax, wordVar      ; MASM\n\nmov( dwordVar, eax );   // HLA\nmovl dwordVar, %eax     // Gas\nmov eax, dwordVar        ; MASM\n```", "```\n\n\t\t\tmov( [eax], al );\nmov( [ebx], al );\nmov( [ecx], al );\nmov( [edx], al );\nmov( [edi], al );\nmov( [esi], al );\nmov( [ebp], al );\nmov( [esp], al );\n```", "```\n\n\t\t\tmov al, [eax]\nmov al, [ebx]\nmov al, [ecx]\nmov al, [edx]\nmov al, [edi]\nmov al, [esi]\nmov al, [ebp]\nmov al, [esp]\n```", "```\n\n\t\t\tmov al,   [rax]\nmov ax,   [rbx]\nmov eax,  [rcx]\nmov rax,  [rdx]\nmov r15b, [rdi]\nmov r15w, [rsi]\nmov r15d, [rbp]\nmov r15,  [rsp]\nmov al,   [r8]\nmov ax,   [r9]\nmov eax,  [r10]\nmov rax,  [r11]\nmov r15b, [r12]\nmov r15w, [r13]\nmov r15d, [r14]\nmov r15,  [r15]\n```", "```\n\n\t\t\tmovb (%eax), %al\nmovb (%ebx), %al\nmovb (%ecx), %al\nmovb (%edx), %al\nmovb (%edi), %al\nmovb (%esi), %al\nmovb (%ebp), %al\nmovb (%esp), %al\n```", "```\n\n\t\t\tmovb (%rax), %al\nmovb (%rbx), %al\nmovb (%rcx), %al\nmovb (%rdx), %al\nmovb (%rdi), %al\nmovb (%rsi), %al\nmovb (%rbp), %al\nmovb (%rsp), %al\nmovb (%r8),  %al\nmovb (%r9),  %al\nmovb (%r10), %al\nmovb (%r11), %al\nmovb (%r12), %al\nmovb (%r13), %al\nmovb (%r14), %al\nmovb (%r15), %al\n```", "```\n\n\t\t\tmov( VarName[ eax ], al );\nmov( VarName[ ebx ], al );\nmov( VarName[ ecx ], al );\nmov( VarName[ edx ], al );\nmov( VarName[ edi ], al );\nmov( VarName[ esi ], al );\nmov( VarName[ ebp ], al );\nmov( VarName[ esp ], al );\n```", "```\nvarName[reg32]\n[reg32 + varName]\n[varName][reg32]\n[varName + reg32]\n[reg32][varName]\nvarName[reg32 + const]\n[reg32 + varName + const]\n[varName][reg32][const]\nvarName[const + reg32]\n[const + reg32 + varName]\n[const][reg32][varName]\nvarName[reg32 - const]\n[reg32 + varName - const]\n[varName][reg32][-const]\n```", "```\n\n\t\t\tmov  al, VarName[ eax ]\nmov  al, VarName[ ebx ]\nmov  al, VarName[ ecx ]\nmov  al, VarName[ edx ]\nmov  al, VarName[ edi ]\nmov  al, VarName[ esi ]\nmov  al, VarName[ ebp ]\nmov  al, VarName[ esp ]\n```", "```\n\n\t\t\tmov  al, [ rax + SomeConstant ]\nmov  al, [ rbx + SomeConstant ]\nmov  al, [ rcx + SomeConstant ]\nmov  al, [ rdx + SomeConstant ]\nmov  al, [ rdi + SomeConstant ]\nmov  al, [ rsi + SomeConstant ]\nmov  al, [ rbp + SomeConstant ]\nmov  al, [ rsp + SomeConstant ]\n```", "```\nvarName(%reg32)\nconst(%reg32)\nvarName + const(%reg32)\n```", "```\n\n\t\t\tmovb VarName( %eax ), al\nmovb VarName( %ebx ), al\nmovb VarName( %ecx ), al\nmovb VarName( %edx ), al\nmovb VarName( %edi ), al\nmovb VarName( %esi ), al\nmovb VarName( %ebp ), al\nmovb VarName( %esp ), al\n```", "```\n\n\t\t\tmov  %al, SomeConstant(%rax)\nmov  %al, SomeConstant(%rbx)\nmov  %al, SomeConstant(%rcx)\nmov  %al, SomeConstant(%rdx)\nmov  %al, SomeConstant(%rsi)\nmov  %al, SomeConstant(%rdi)\nmov  %al, SomeConstant(%rbp)\nmov  %al, SomeConstant(%rsp)\n```", "```\n\n\t\t\tmov( eax, VarName[ ebx + esi*4 ] );\n```", "```\nVarName[ IndexReg[32]*scale ]\nVarName[ IndexReg[32]*scale + displacement ]\nVarName[ IndexReg[32]*scale - displacement ]\n\n[ BaseReg[32] + IndexReg[32]*scale ]\n[ BaseReg[32] + IndexReg[32]*scale + displacement ]\n[ BaseReg[32] + IndexReg[32]*scale - displacement ]\n\nVarName[ BaseReg[32] + IndexReg[32]*scale ]\nVarName[ BaseReg[32] + IndexReg[32]*scale + displacement ]\nVarName[ BaseReg[32] + IndexReg[32]*scale - displacement ]\n```", "```\nexpression( baseReg[32], indexReg[32], scaleFactor )\n```", "```\nVarName( ,IndexReg[32], scale )\nVarName + displacement( ,IndexReg[32], scale )\nVarName - displacement( ,IndexReg[32], scale )\n( BaseReg[32], IndexReg[32], scale )\ndisplacement( BaseReg[32], IndexReg[32], scale)\n\nVarName( BaseReg[32], IndexReg[32], scale )\nVarName + displacement( BaseReg[32], IndexReg[32], scale )\nVarName - displacement( BaseReg[32], IndexReg[32], scale )\n```", "```\n\n\t\t\tstatic\n    variableName : byte;\n```", "```\n\n\t\t\tstatic\n    blockOfBytes : byte[ sizeOfBlock ];\n```", "```\n\n\t\t\tstatic\n    // InitializedByte has the initial value 5:\n\n    InitializedByte : byte := 5;\n\n    // InitializedArray is initialized with 0, 1, 2, and 3;\n\n    InitializedArray : byte[4] := [0,1,2,3];\n```", "```\nvariableName    db      ?\nvariableName    byte    ?\n```", "```\nvariableName    db      sizeOfBlock dup (?)\nvariableName    byte    sizeOfBlock dup (?)\n```", "```\n\n\t\t\t                        .data\nInitializedByte         db      5\nInitializedByte2        byte    6\nInitializedArray0       db      4 dup (5)   ; array is 5,5,5,5\nInitializedArray1       db      5 dup (6)   ; array is 6,6,6,6,6\n```", "```\n\n\t\t\t                    .data\nInitializedArray2   byte    0,1,2,3\nInitializedArray3   byte    4,5,6,7,8\n```", "```\nvariableName: .byte 0\n```", "```\n\n\t\t\tInitializedByte: .byte   5\nZeroedByte       .byte   0  // Zeroed value\n```", "```\nvariableName:\n        .rept   sizeOfBlock\n        .byte   0\n        .endr\n```", "```\n\n\t\t\t            .section    .data\nInitializedArray0:      // Creates an array with elements 5,5,5,5\n            .rept       4\n            .byte       5\n            .endr\n\nInitializedArray1:\n            .byte       0,1,2,3,4,5\n```", "```\n\n\t\t\t// HLA's mov instruction uses \"src, dest\" syntax:\n\nmov( byteVar, al );\nmov( byteArray[ebx], al ); // EBX is the index into byteArray\n\n// Gas's movb instruction also uses a \"src, dest\" syntax:\n\nmovb byteVar, %al\nmovb byteArray(%ebx), %al\n\n; MASM's mov instructions use \"dest, src\" syntax\n\nmov al, byteVar\nmov al, byteArray[ebx]\n```", "```\n\n\t\t\t// HLA example:\n\nstatic\n\n    // HLAwordVar: 2 bytes, initialized with 0s:\n\n    HLAwordVar : word;\n\n    // HLAwordArray: 8 bytes, initialized with 0s:\n\n    HLAwordArray : word[4];\n\n    // HLAwordArray2: 10 bytes, initialized with 0, ..., 5:\n\n    HLAwordArray2 : word[5] := [0,1,2,3,4];\n\n; MASM example:\n\n                    .data\nMASMwordVar         word    ?\nMASMwordArray       word    4 dup (?)\nMASMwordArray2      word    0,1,2,3,4\n\n// Gas example:\n\n                    .section    .data\nGasWordVar:         .int    0\nGasWordArray:\n                    .rept   4\n                    .int    0\n                    .endr\n\nGasWordArray2:      .int    0,1,2,3,4\n```", "```\n\n\t\t\t// HLA example:\n\nstatic\n    // HLAdwordVar: 4 bytes, initialized with 0s:\n\n    HLAdwordVar : dword;\n\n    // HLAdwordArray: 16 bytes, initialized with 0s.\n\n    HLAdwordArray : dword[4];\n\n    // HLAdwordArray: 20 bytes, initialized with 0, ..., 4:\n\n    HLAdwordArray2 : dword[5] := [0,1,2,3,4];\n\n; MASM/TASM example:\n\n                    .data\nMASMdwordVar        dword   ?\nMASMdwordArray      dword   4 dup (?)\nMASMdwordArray2     dword   0,1,2,3,4\n\n// Gas example:\n\n                    .section    .data\nGasDWordVar:        .long   0\nGasDWordArray:\n                    .rept   4\n                    .long   0\n                    .endr\n\nGasDWordArray2:     .long   0,1,2,3,4\n```", "```\n\n\t\t\tmov( 0, al );\nmov( 0, ax );\nmov( 0, eax );\n```", "```\n\n\t\t\tmov al,  0 ; 8-bit data movement\nmov ax,  0 ; 16-bit data movement\nmov eax, 0 ; 32-bit data movement\n```", "```\n\n\t\t\tmov( 0, [ebx] );  // Copy 0 to the memory location\n                  // pointed at by EBX.\n```", "```\nmov( 0, (type word [ebx]) );  // 16-bit data movement.\n```", "```\n\n\t\t\t(type new_type memory)\n```", "```\nmov  word ptr [ebx], 0   ; 16-bit data movement.\n```", "```\n\n\t\t\tmovb $0, (%ebx) // 8-bit data copy\nmovw $0, (%ebx) // 16-bit data copy\nmovl $0, (%ebx) // 32-bit data copy\nmovq $0, (%rbx) // 64-bit data copy\n```"]