["```\nclass ClassName(object):\n    def __init__(self):\n        # Body of init\n```", "```\nclass Cat(object):\n➊     def __init__(self, name, weight):\n➋         self.name = name\n➌         self.weight = weight\n```", "```\nclass Cat(object):\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n\nfluff = Cat(\"Fluff\", 4.5)\n```", "```\nprint(fluff.weight)\n```", "```\nfluff.weight = 5\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n➊ class Location(object):\n       def __init__(self, x, y, z):\n➋         self.x = x\n➌         # Add the y and z attributes here\n\n➍ bedroom = Location(64, 52, -8)\n➎ mc.player.setTilePos(bedroom.x, bedroom.y, bedroom.z)\n```", "```\nclass Cat(object):\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n\n    def eat(self, food):\n        self.weight = self.weight + 0.05\n        print(self.name + \" is eating \" + food)\n```", "```\nfluff = Cat(\"Fluff\", 4.5)\nfluff.eat(\"tuna\")\n```", "```\nFluff is eating tuna\n```", "```\ndef eatAndSleep(self, food):\n    self.eat(food)\n    print(self.name + \" is now sleeping...\")\n```", "```\nfluff.eatAndSleep(\"tuna\")\n```", "```\nFluff is eating tuna\nFluff is now sleeping...\n```", "```\nclass Cat(object):\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n\n    def eat(self, food):\n        self.weight = self.weight + 0.05\n        print(self.name + \" is eating \" + food)\n\n    def eatAndSleep(self, food):\n        self.eat(food)\n        print(self.name + \" is now sleeping...\")\n\nfluff = Cat(\"Fluff\", 4.5)\nprint(fluff.weight)\nfluff.eat(\"tuna\")\nfluff.eatAndSleep(\"tuna\")\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   import time\n➊ class Building(object):\n➋     def __init__(self, x, y, z, width, height, depth):\n           self.x = x\n           self.y = y\n           self.z = z\n\n           self.width = width\n           self.height = height\n           self.depth = depth\n\n➌     def build(self):\n           mc.setBlocks(self.x, self.y, self.z,\n                        self.x + self.width, self.y + self.height,\n                        self.z + self.depth, 4)\n\n           mc.setBlocks(self.x + 1, self.y + 1, self.z + 1,\n                        self.x + self.width - 1, self.y + self.height - 1,\n                        self.z + self.depth - 1, 0)\n➍         # Call the buildDoor() and buildWindows() methods here\n\n➎     def clear(self):\n           mc.setBlocks(self.x, self.y, self.z,\n                        self.x + self.width, self.y + self.height,\n                        self.z + self.depth, 0)\n➏         # Remove the doors and windows here\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   y = pos.y\n   z = pos.z\n\n➐ ghostHouse = Building(x, y, z, 10, 6, 8)\n   ghostHouse.build()\n\n   time.sleep(30)\n\n   ghostHouse.clear()\n➑ ghostHouse.x = 8\n```", "```\nclass Cat(object):\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n\n    def getWeightInGrams(self):\n        return self.weight * 1000\n```", "```\nfluff = Cat(\"Fluff\", 4.5)\nprint(fluff.getWeightInGrams())\n```", "```\n4500\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   import time\n\n➊ class NamedBuilding(object):\n➋     def __init__(self, x, y, z, width, height, depth, name):\n           self.x = x\n           self.y = y\n           self.z = z\n\n           self.width = width\n           self.height = height\n           self.depth = depth\n\n➌         self.name = name\n\n      def build(self):\n          mc.setBlocks(self.x, self.y, self.z,\n                       self.x + self.width, self.y + self.height,\n                       self.z + self.depth, 4)\n\n          mc.setBlocks(self.x + 1, self.y + 1, self.z + 1,\n                       self.x + self.width - 1, self.y + self.height - 1,\n                       self.z + self.depth - 1, 0)\n\n      def clear(self):\n          mc.setBlocks(self.x, self.y, self.z,\n                       self.x + self.width, self.y + self.height,\n                       self.z + self.depth, 0)\n\n➍     def getInfo():\n           # Add the body of the getInfo() method here\n\n   pos = mc.player.getTilePos()\n   x = pos.x\n   y = pos.y\n   z = pos.z\n   ghostCastle = NamedBuilding(x, y, z, 10, 16, 16, \"Ghost Castle\")\n   ghostCastle.build()\n➎ mc.postToChat(ghostCastle.getInfo())\n\n   time.sleep(30)\n\n   ghostCastle.clear()\n```", "```\nclass Cat(object):\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n\nfluff = Cat(\"Fluff\", 4.5)\nstella = Cat(\"Stella\", 3.9)\n```", "```\nprint(fluff.name)\nprint(stella.name)\n```", "```\nFluff\nStella\n```", "```\nfluff.eat(\"tuna\")\nstella.eat(\"cake\")\n```", "```\nFluff is eating tuna\nStella is eating cake\n```", "```\nghostHouse = Building(17, 22, -54, 10, 6, 8)\nghostHouse.build()\n\ntime.sleep(30)\n\nghostHouse.clear()\n```", "```\npos = mc.player.getTilePos()\nx = pos.x\ny = pos.y\nz = pos.z\nghostHouse = Building(x, y, z, 10, 6, 8)\nshop = Building(x + 12, y, z, 8, 12, 10)\n# Create more ghost building objects here\n\nghostHouse.build()\nshop.build()\n# Build more ghost building objects here\n\ntime.sleep(30)\n\nghostHouse.clear()\nshop.clear()\n```", "```\nclass Cat(object):\n    owner = \"Craig\"\n\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n```", "```\nfluff = Cat(\"Fluff\", 4.5)\nprint(fluff.owner)\n```", "```\nstella = Cat(\"Stella\", 3.9)\nprint(stella.owner)\n```", "```\nstella.owner = \"Matthew\"\nprint(stella.owner)\nprint(fluff.owner)\n```", "```\nclass Cat(object):\n    owner = \"Craig\"\n\n    def __init__(self, name, weight):\n        self.name = name\n        self.weight = weight\n\n    def eat(self, food):\n        self.weight = self.weight + 0.05\n        print(self.name + \" is eating \" + food)\n\n    def eatAndSleep(self, food):\n        self.eat(food)\n        print(self.name + \" is now sleeping...\")\n\n    def getWeightInGrams(self):\n        return self.weight * 1000\n\nfluff = Cat(\"Fluff\", 4.5)\nprint(fluff.owner)\nstella = Cat(\"Stella\", 3.9)\nprint(stella.owner)\n\nprint(fluff.weight)\nfluff.eat(\"tuna\")\nfluff.eatAndSleep(\"tuna\")\n\nprint(fluff.getWeightInGrams())\nprint(fluff.name)\nprint(stella.name)\n\nfluff.eat(\"tuna\")\nstella.eat(\"cake\")\n\nstella.owner = \"Matthew\"\nprint(stella.owner)\nprint(fluff.owner)\n```", "```\n➊ class Bird(object):\n➋     def __init__(self, name, wingspan):\n           self.name = name\n           self.wingspan = wingspan\n\n➌     def birdcall(self):\n           print(\"chirp\")\n\n➍     def fly(self):\n           print(\"flap\")\n```", "```\ngardenBird = Bird(\"Geoffrey\", 12)\ngardenBird.birdcall()\ngardenBird.fly()\n```", "```\nchirp\nflap\n```", "```\nclass Penguin(Bird):\n    def swim(self):\n        print(\"swimming\")\n```", "```\nsarahThePenguin = Penguin(\"Sarah\", 10)\nsarahThePenguin.swim()\n```", "```\nswimming\n```", "```\nsarahThePenguin.fly()\nsarahThePenguin.birdcall()\n```", "```\nflap\nchirp\n```", "```\n# Create a FancyBuilding class here\n\n    def upgrade(self):\n        # Carpet\n        mc.setBlocks(self.x + 1, self.y, self.z + 1,\n                     self.x + self.width - 1, self.y, self.z + self.depth - 1,\n                     35, 6)\n\n        # Flowers\n        mc.setBlocks(self.x - 1, self.y, self.z -1,\n                     self.x - 1, self.y, self.z + self.depth + 1,\n                     37)\n        mc.setBlocks(self.x - 1, self.y, self.z - 1,\n                     self.x + self.width + 1, self.y, self.z – 1,\n                     37)\n        mc.setBlocks(self.x + self.width + 1, self.y, self.z - 1,\n                     self.x + self.width + 1, self.y, self.z + self.depth + 1,\n                     37)\n        mc.setBlocks(self.x - 1, self.y, self.z + self.depth + 1,\n                     self.x + self.width + 1, self.y, self.z + self.depth = 1,\n                     37)\n\n# Create an instance of the FancyBuilding class\n# Call the build() and upgrade() methods\n```", "```\n   class Penguin(Bird):\n       def swim(self):\n           print(\"swimming\")\n\n➊     def birdcall(self):\n           print(\"sort of a quack\")\n\n➋     def fly(self):\n           print(\"Penguins cannot fly :(\")\n```", "```\nsarahThePenguin.fly()\nsarahThePenguin.birdcall()\n```", "```\nPenguins cannot fly :(\nsort of a quack\n```", "```\n   class Parrot(Bird):\n➊     def __init__(self, name, wingspan, color):\n           self.name = name\n           self.wingspan = wingspan\n           self.color = color\n```", "```\nfreddieTheParrot = Parrot(\"Freddie\", 12, \"blue\")\nprint(freddieTheParrot.color)\nfreddieTheParrot.fly()\nfreddieTheParrot.birdcall()\n```", "```\nblue\nflap\nchirp\n```", "```\nclass Bird(object):\n    def __init__(self, name, wingspan):\n        self.name = name\n        self.wingspan = wingspan\n\n    def birdcall(self):\n        print(\"chirp\")\n\n    def fly(self):\n        print(\"flap\")\n\nclass Penguin(Bird):\n    def swim(self):\n        print(\"swimming\")\n\n    def birdcall(self):\n        print(\"sort of a quack\")\n\n    def fly(self):\n        print(\"Penguins cannot fly :(\")\n\nclass Parrot(Bird):\n    def __init__(self, name, wingspan, color):\n        self.name = name\n        self.wingspan = wingspan\n        self.color = color\n\ngardenBird = Bird(\"Geoffrey\", 12)\ngardenBird.birdcall()\ngardenBird.fly()\n\nsarahThePenguin = Penguin(\"Sarah\", 10)\nsarahThePenguin.swim()\nsarahThePenguin.fly()\nsarahThePenguin.birdcall()\n\nfreddieTheParrot = Parrot(\"Freddie\", 12, \"blue\")\nprint(freddieTheParrot.color)\nfreddieTheParrot.fly()\nfreddieTheParrot.birdcall()\n```", "```\n   from mcpi.minecraft import Minecraft\n   mc = Minecraft.create()\n\n   # Paste the ghostHouse.py program here\n   # Create a Tree class here\n\n➊ def growTree(x, y, z):\n       \"\"\" Creates a tree at the coordinates given \"\"\"\n       wood = 17\n       leaves = 18\n\n       # Trunk\n       mc.setBlocks(x, y, z, x, y + 5, z, wood)\n\n       # Leaves\n       mc.setBlocks(x - 2, y + 6, z - 2, x + 2, y + 6, z + 2, leaves)\n       mc.setBlocks(x - 1, y + 7, z - 1, x + 1, y + 7, z + 1, leaves)\n\n   # Create build() and clear() methods for the Tree class here\n```"]