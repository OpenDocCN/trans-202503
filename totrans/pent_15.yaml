- en: Chapter 11. Social Engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a common saying in information security that users are the vulnerability
    that can never be patched. Put all the security controls in place that you want,
    but if an employee can be convinced to give up sensitive company information,
    it is all for naught. In fact, many of the most famous hacks include no system
    exploitation at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider notorious hacker Kevin Mitnick. Many of Mitnick’s most
    famous exploits came down to walking into a building, convincing the security
    guard he had permission to be there, and then walking out with what he wanted.
    This kind of attack, called *social engineering*, exploits human vulnerabilities:
    a desire to be helpful, unawareness of security policies, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Social-engineering attacks can involve complex technical requirements or no
    technology at all. A social engineer can buy a cable guy uniform at the thrift
    store and potentially walk into an organization, and even into the server room.
    The IT help desk can receive a frantic call from the boss’s boss’s assistant,
    who claims to have locked himself out of his webmail account. People generally
    want to be helpful, so unless there is a secure policy in place, the help desk
    worker may read back the password over the phone or set it to a default value,
    even though the caller is not who he says he is.
  prefs: []
  type: TYPE_NORMAL
- en: A common vector for social-engineering attacks is email. If you are ever short
    on entertainment at work, check out your email spam folder. Among the advertisements
    to make some things bigger and others smaller, you will find people trying desperately
    to give you all their money. I firmly believe that if you can find the one African
    prince who really does want to give you his fortune, it will be worth all those
    times your bank account got hacked from answering phishing emails. Joking aside,
    attempting to trick a user into giving up sensitive information by posing as a
    trusted person via email or other electronic means is known as a *phishing attack*.
    Phishing emails can be used to lure targets to visit malicious sites or download
    malicious attachments, among other things. Social-engineering attacks are the
    missing element needed to trick users into falling victim to the client-side attacks
    we studied in [Chapter 10](ch10.xhtml "Chapter 10. Client-Side Exploitation").
  prefs: []
  type: TYPE_NORMAL
- en: Companies should put time and effort into training all employees about social-engineering
    attacks. No matter what sort of security technologies you put in place, employees
    have to be able to use their workstations, their mobile devices, and so on to
    get their job done. They will have access to sensitive information or security
    controls that, in the wrong hands, could harm the organization. Some security-awareness
    training may seem obvious, like “Don’t share your password with anyone” and “Check
    someone’s badge before you hold the door to a secure area for him or her.” Other
    security awareness may be new to many employees. For instance, on some pentesting
    engagements, I’ve had great success leaving USB sticks in the parking lot or DVDs
    labeled “Payroll” on the bathroom floor. Curious users start plugging these in,
    opening files, and giving me access to their systems. Security-awareness training
    about malicious files, USB switchblades, and other attacks can help stop users
    from falling victim to these types of social-engineering attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The Social-Engineer Toolkit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TrustedSec’s Social-Engineer Toolkit (SET), an open source Python-driven tool,
    is designed to help you perform social-engineering attacks during pentests. SET
    will help you create a variety of attacks such as email phishing campaigns (designed
    to steal credentials, financial information, and so on using specially targeted
    email) and web-based attacks (such as cloning a client website and tricking users
    into entering their login credentials).
  prefs: []
  type: TYPE_NORMAL
- en: SET comes preinstalled in Kali Linux. To start SET in Kali Linux, enter **`setoolkit`**
    at a prompt, as shown in [Example 11-1](ch11.xhtml#starting_set "Example 11-1. Starting
    SET"). We’ll use SET to run social-engineering attacks, so enter a **`1`** at
    the prompt to move to the Social-Engineering Attacks menu. You will be prompted
    to accept the terms of service.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-1. Starting SET
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter we’ll look at just a few of the SET attacks that I use regularly
    on pentesting engagements. We’ll begin with spear-phishing attacks, which allow
    us to deliver attacks via email.
  prefs: []
  type: TYPE_NORMAL
- en: Spear-Phishing Attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Social-Engineering Attacks menu gives us several attack options, as shown
    in [Example 11-2](ch11.xhtml#choose_spear-phishing_attack_vectors "Example 11-2. Choose
    Spear-Phishing Attack Vectors"). We’ll create a spear-phishing attack, which will
    allow us to create malicious files for client-side attacks (like the ones covered
    in [Chapter 10](ch10.xhtml "Chapter 10. Client-Side Exploitation")), email them,
    and automatically set up a Metasploit handler to catch the payload.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-2. Choose `Spear-Phishing Attack Vectors`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Select option **`1`** to choose `Spear-Phishing Attack Vectors` ❶. The Spear-Phishing
    Attack Vectors menu is shown in [Example 11-3](ch11.xhtml#choose_perform_a_mass_email_attack
    "Example 11-3. Choose Perform a Mass Email Attack").
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-3. Choose `Perform a Mass Email Attack`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first option, `Perform a Mass Email Attack` ❶, allows us to send a malicious
    file to a predefined email address or list of addresses as well as set up a Metasploit
    listener for the selected payload. The second option, `Create a Fi``leFormat Payload`
    ❷, lets us create a malicious file with a Metasploit payload. The third option
    allows us to create a new email template ❸ to be used in SET attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Choose option **`1`** to create an email attack. (We’ll have the option to send
    a single email or mass email later.)
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a Payload
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to choose a payload. A selection of payload options is shown in [Example 11-4](ch11.xhtml#choose_a_spear-phishing_attack
    "Example 11-4. Choose a spear-phishing attack").
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-4. Choose a spear-phishing attack
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to re-create our PDF attack from [Chapter 10](ch10.xhtml "Chapter 10. Client-Side
    Exploitation"), choose option **`12`**: `Adobe util.printf() Buffer Overflow`
    ❶. (SET includes many Metasploit attacks, as well as its own, specific attacks.)'
  prefs: []
  type: TYPE_NORMAL
- en: You should be prompted to choose a payload for your malicious file (see [Example 11-5](ch11.xhtml#choose_a_payload
    "Example 11-5. Choose a payload")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-5. Choose a payload
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The usual suspects are all here, including *windows/meterpreter/reverse_tcp*,
    which appears in a more human-readable form as `Windows Meterpreter Reverse_TCP`
    ❶. We’ll choose this option for our sample attack.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SET should prompt for the relevant options for the payload, in this case the
    `LHOST` and `LPORT`. If you’re not very familiar with Metasploit, just answer
    the prompts to set the correct options automatically, as shown in [Example 11-6](ch11.xhtml#setting_options-id00031
    "Example 11-6. Setting options"). Set the payload listener to the IP address of
    Kali Linux. Leave the port to connect back on to the default (443).
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-6. Setting options
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Naming Your File
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next you should be prompted to name your malicious file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Select option **`2`** ❶ to rename the malicious PDF, and enter the filename
    *bulbsecuritysalaries.pdf*. SET should continue.
  prefs: []
  type: TYPE_NORMAL
- en: Single or Mass Email
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now to decide whether to have SET send our malicious file to a single email
    address or a list of addresses, as shown in [Example 11-7](ch11.xhtml#choosing_to_perform_a_single_email_addre
    "Example 11-7. Choosing to perform a single email address attack").
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-7. Choosing to perform a single email address attack
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Choose the single email address option ❶ for now. (We’ll look at sending mass
    email ❷ in [Mass Email Attacks](ch11.xhtml#mass_email_attacks "Mass Email Attacks").)
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When crafting the email, we can use one of SET’s email templates or enter text
    for one-time use in the template. In addition, if you choose `Create a Social-Engineering
    Template`, you can create a template that you can reuse.
  prefs: []
  type: TYPE_NORMAL
- en: Many of my social engineering customers like me to use fake emails that appear
    to come from a company executive or the IT manager, announcing new website functionality
    or a new company policy. Let’s use one of SET’s email templates as an example
    to fake this email now, as shown in [Example 11-8](ch11.xhtml#choosing_an_email_template
    "Example 11-8. Choosing an email template"); we’ll create our own email later
    in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-8. Choosing an email template
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Choose **`1`** for `Pre-Defined Template`, then choose template **`5`**.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Target
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now SET should prompt you for your target email address and a mail server for
    use in delivering the attack email. You can use your own mail server, one that
    is misconfigured to allow anyone to send mail (called an open relay), or a Gmail
    account, as shown in [Example 11-9](ch11.xhtml#sending_email_with_set "Example 11-9. Sending
    email with SET"). Let’s use Gmail for this attack by choosing option **`1`**.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-9. Sending email with SET
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When prompted, enter the email address and password for your Gmail account.
    SET should attempt to deliver the message. But as you can see in the message at
    the bottom of the listing, Gmail inspects attachments and catches our attack ❶.
  prefs: []
  type: TYPE_NORMAL
- en: That’s just a first attempt, of course. You may get better results using your
    own mail server or your client’s mail server, if you can gather or guess the credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, in this example, I’m just sending emails to myself. We looked at
    tools such as theHarvester to find valid email addresses to target in [Chapter 5](ch05.xhtml
    "Chapter 5. Information Gathering").
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up a Listener
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also have SET set up a Metasploit listener to catch our payload if anyone
    opens the email attachment. Even if you’re not familiar with Metasploit syntax,
    you should be able to use SET to set up this attack based on the options we chose
    in [Setting Options](ch04.xhtml#setting_options "Setting Options"). You can see
    that SET uses a resource file to automatically set the payload, `LHOST`, and `LPORT`
    options based on our previous answers when building the payload (see [Example 11-10](ch11.xhtml#setting_up_a_listener-id00032
    "Example 11-10. Setting up a listener")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-10. Setting up a listener
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now we wait for a curious user to open our malicious PDF and send us a session.
    Use ctrl-C to close the listener and type `exit` to move back to the previous
    menu. Option 99 will take you back to SET’s Social-Engineering Attacks menu.
  prefs: []
  type: TYPE_NORMAL
- en: Web Attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we’ll look at web-based attacks. Return to the Social-Engineering
    Attacks menu ([Example 11-2](ch11.xhtml#choose_spear-phishing_attack_vectors "Example 11-2. Choose
    Spear-Phishing Attack Vectors")), and choose option **`2`** (`Website Attack Vectors`).
    This is the sort of attack that I use most often in pentests that have a social-engineering
    component because it emulates many social-engineering attacks seen in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: You should be presented with a list of web-based attacks as shown in [Example 11-11](ch11.xhtml#set_website_attacks
    "Example 11-11. SET website attacks").
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-11. SET website attacks
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a description of some of the attacks:'
  prefs: []
  type: TYPE_NORMAL
- en: The Java Applet Attack Method automates the Java-signed applet attack we used
    in [Chapter 10](ch10.xhtml "Chapter 10. Client-Side Exploitation").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Metasploit Browser Exploit Method allows you to use all of Metasploit’s
    browser-exploitation client-side attacks without having to set parameters manually,
    by knowing Metasploit syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Credential Harvester Attack Method helps create websites to trick users
    into giving up their credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Tabnabbing Attack Method relies on users’ propensity to build up a collection
    of open browser tabs. When the user first opens the attack page, it says “Please
    wait.” Naturally, the user switches back to another tab while he waits. Once the
    attack tab is no longer in focus, it loads the attack site (which can be a clone
    of any website you like), with the goal of tricking the user into supplying his
    credentials or otherwise interacting with the malicious site. The assumption is
    that the user will use the first tab he encounters that looks legitimate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose option **`3`**, the `Credential Harvester Attack Method`.
  prefs: []
  type: TYPE_NORMAL
- en: Next you should see a prompt asking what sort of website you would like. We
    can choose from some prebuilt web templates, clone a website from the Internet
    with Site Cloner, or import a custom web page with Custom Import. Choose option
    **`1`** to use a SET template (see [Example 11-12](ch11.xhtml#set_website_template_options
    "Example 11-12. SET website template options")).
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-12. SET website template options
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now enter the IP address for the website to post credentials back to. We can
    just use the local IP address for the Kali virtual machine, but if you use this
    attack against a client, you will need an Internet-facing IP address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now choose a template. Because we want to trick users into entering their credentials,
    choose a template with a login field, such as Gmail (option **`2`**), as shown
    in [Example 11-13](ch11.xhtml#setting_up_the_site "Example 11-13. Setting up the
    site"). SET should now start a web server with our fake Gmail page, a clone of
    the actual Gmail page.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-13. Setting up the site
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now browse to the cloned Gmail site at the Kali Linux web server and enter some
    credentials to see how this works. After entering credentials you should be redirected
    to the real Gmail site. To a user it will just seem like he typed in his password
    incorrectly. In the meantime, back in SET, you should see a result that looks
    something like [Example 11-14](ch11.xhtml#set_capturing_credentials "Example 11-14. SET
    capturing credentials").
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-14. SET capturing credentials
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When the user submits the page, SET highlights the fields that it thinks are
    interesting. In this case, it found the Email ❶ and Passwd ❷ that were submitted.
    Once you shut down the web server with ctrl-C to end the web attack, the results
    should be written to a file.
  prefs: []
  type: TYPE_NORMAL
- en: When combined with the email attack discussed next, this is a great attack to
    use to gather credentials for a pentest or, at the very least, test the security
    awareness of your client’s employees.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this attack can be even more interesting if you use option **`5`**,
    `Site Cloner`, to make a copy of your customer’s site. If they do not have a page
    with a login form of some sort (VPN, webmail, blogging, and so on) you can even
    create one. Clone their site, and add a simple HTML form like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Then use option **`3`**, `Custom Import`, to have SET serve your modified page.
  prefs: []
  type: TYPE_NORMAL
- en: Mass Email Attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now to use SET to automate phishing email attacks. Create a file and enter a
    few email addresses, one per line, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now return to the main SET Social-Engineering Attacks menu with option 99 ([Example 11-15](ch11.xhtml#setting_up_an_email_attack
    "Example 11-15. Setting up an email attack")) and choose option **`5`**, `Mass
    Mailer Attack`. Large carbon copy or blind carbon copy lists can trigger spam
    filters or tip off users that something is amiss, and emailing a long list of
    client employees individually by hand can be tedious, so we’ll use SET to email
    multiple addresses (see [Example 11-15](ch11.xhtml#setting_up_an_email_attack
    "Example 11-15. Setting up an email attack")). Scripts are good for repetitive
    tasks like this.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-15. Setting up an email attack
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Choose option **`2`** and enter the name of the email address file to import
    ❶.
  prefs: []
  type: TYPE_NORMAL
- en: Next we need to choose a server (see [Example 11-16](ch11.xhtml#logging_in_to_gmail
    "Example 11-16. Logging in to Gmail")). Let’s use Gmail again—option **`1`**.
    When prompted, enter your credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-16. Logging in to Gmail
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You should be asked to create the email to send, as shown in [Example 11-17](ch11.xhtml#sending_the_email
    "Example 11-17. Sending the email").
  prefs: []
  type: TYPE_NORMAL
- en: Example 11-17. Sending the email
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When asked whether to make the email plaintext or HTML, choose **`h`** for HTML
    ❶. By using HTML for the email, we’ll be better able to hide the real destination
    of the links in the email behind graphics and such.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to enter the text for the email. Because we chose HTML as the email format,
    we can use HTML tags in our email. For example, this code creates a link for the
    recipient to click: `<a href="192.168.20.9">http://www.bulbsecurity.com/webportal</a>`.
    The text displayed indicates that the link goes to *[http://www.bulbsecurity.com/webportal](http://www.bulbsecurity.com/webportal)*,
    but the link will really open 192.168.20.9 in the browser. We control the website
    at 192.168.20.9, so we can put a browser exploit or a phishing attack there. Add
    some text to the email to convince users to click the included link. This is where
    you can be particularly creative. For example, in [Example 11-17](ch11.xhtml#sending_the_email
    "Example 11-17. Sending the email"), we inform the users that a new company portal
    has been added, and they should log in with their domain credentials to check
    it out. On a pentest, a better way to approach this would be to register a variation
    of the company’s domain name (bulb-security.com) or perhaps use a slight misspelling
    (bulbsecurty.com) that is likely to go unnoticed by users and host your social-engineering
    site there.'
  prefs: []
  type: TYPE_NORMAL
- en: After you finish the email, press ctrl-C to send it. The email will be sent
    to each address in the *emails.txt* file we entered earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recipients will see this email:'
  prefs: []
  type: TYPE_NORMAL
- en: All,
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We are adding a new company web portal. Please go to *[http://www.bulbsecurity.com/webportal](http://www.bulbsecurity.com/webportal)*
    and use your Windows domain credentials to log in.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Bulb Security Administrator
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: While a security-savvy user should know better than to click links in emails
    that are not from a trusted source, and would know how to verify where a link
    points to before clicking it, not all users are that savvy, and even the savvy
    ones aren’t always paying attention. In fact, I have never launched a social-engineering
    test that failed.
  prefs: []
  type: TYPE_NORMAL
- en: Multipronged Attacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s combine our previous two attacks (credential harvesting and phishing emails)
    to trick employees into submitting their credentials to a pentester-controlled
    site. We’ll use an email attack together with a web attack to send users to our
    attacker-controlled site by tricking them into clicking links in the emails.
  prefs: []
  type: TYPE_NORMAL
- en: But first we need to change an option in SET’s configuration file. In Kali this
    file is at */usr/share/set/config/set_config*. The option to change is `WEB_ATTACK_EMAIL`,
    which by default is set to `OFF`. Open the `config` file in a text editor and
    change this option to `ON`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now try running the Credential Harvesting attack again. Instead of using a template,
    you can clone one of your client’s web pages if they have a login site, such as
    webmail or an employee portal. If the client uses a web page and not a login site,
    use the `Custom Import` option to build your own page that looks like the employee’s
    web page with a login form added.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter we’ve looked at only a couple of social-engineering attacks
    that we can automate with SET. The scripts for your attacks will change based
    on your clients’ needs. Some clients may have a specific attack scenario in mind,
    or you may find the need to run multiple attacks at once. For instance, you may
    create a multipronged attack where you harvest credentials and the malicious website
    runs a malicious Java applet. In addition to the web-based attacks and malicious
    files we looked at here, SET can create other attacks, such as USB sticks, QR
    codes, and rogue wireless access points.
  prefs: []
  type: TYPE_NORMAL
