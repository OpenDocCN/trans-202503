- en: '## **4'
  prefs: []
  type: TYPE_NORMAL
- en: GETTING STARTED WITH GHIDRA**
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](Images/com.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It’s about time we got down to actually using Ghidra. The remainder of this
    book is dedicated to various features of Ghidra and how you can leverage them
    to best meet your reverse engineering needs. In this chapter, we begin by covering
    the options you are presented with when you launch Ghidra, and then we describe
    what happens when you open a single binary file for analysis. Finally, we present
    a quick overview of the user interface to lay the groundwork for the remaining
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '**Launching Ghidra**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Anytime you launch Ghidra, you will be greeted briefly by a splash screen that
    displays the Ghidra logo, build information, the Ghidra and Java version numbers,
    and the licensing information. If you wish to thoroughly read the splash screen
    to learn more about your versions, you can display it at any time by choosing
    Help ▸ About Ghidra from the Ghidra Project window. Once the splash screen clears,
    Ghidra displays the Ghidra Project window behind a Tip of the Day dialog, as shown
    in [Figure 4-1](ch04.xhtml#fig4_1). You can scroll through tips by clicking the
    Next Tip button. When you are ready to begin working, close the Tip of the Day
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer not to see the daily tips, feel free to uncheck the Show Tips
    on Startup? checkbox at the bottom of the dialog. If you uncheck the box and find
    yourself missing the Tip of the Day dialog, you can easily restore it through
    the Ghidra Help menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-1: Launching Ghidra*'
  prefs: []
  type: TYPE_NORMAL
- en: If you close the Tip of the Day dialog or uncheck the box and restart Ghidra,
    you will be presented with the Ghidra Project window. Ghidra uses a project environment
    to allow you to manage and control the tools and data associated with a file or
    group of files as you are working with them. This initial introduction focuses
    on a single file as a component of a nonshared project. More complex project capabilities
    are discussed in [Chapter 11](ch11.xhtml#ch11).
  prefs: []
  type: TYPE_NORMAL
- en: '### **Creating a New Project**'
  prefs: []
  type: TYPE_NORMAL
- en: If this is your first time launching Ghidra, you will need to create a project.
    If you have launched Ghidra previously, the active project will be the one you
    used most recently. Choosing File ▸ New Project allows you to specify characteristics
    of the environment associated with the project. The first step in creating a new
    project is to choose between a nonshared project and a shared project. In this
    chapter, we begin with a nonshared project. With that choice out of the way, you
    will be presented with the dialog in [Figure 4-2](ch04.xhtml#fig4_2). Nonshared
    projects require you to specify a project directory and name.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-2: Creating a Ghidra project*'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have entered the project location information, click **Finish** to
    complete the project creation process. This will return you to the Project window
    with the newly created project selected, as shown in [Figure 4-3](ch04.xhtml#fig4_3).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-3: Ghidra Project window*'
  prefs: []
  type: TYPE_NORMAL
- en: '#### ***Ghidra File Loading***'
  prefs: []
  type: TYPE_NORMAL
- en: To do any useful work, you will need to add at least one file to your new project.
    You can open a file either by choosing File ▸ Import File and browsing to the
    file you wish to import or by dragging and dropping a file directly into a folder
    in the Project window. After you have selected a file, you will be presented with
    the Import dialog shown in [Figure 4-4](ch04.xhtml#fig4_4).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-4: Ghidra Import dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ghidra generates a list of potential file types and provides these to you in
    the Format picklist at the top of the dialog. Clicking the Information button
    to the right of the Format field will provide you with a list of supported formats,
    which are described in [Chapter 17](ch17.xhtml#ch17). The Format picklist provides
    the subset of Ghidra loaders that are best suited for dealing with the selected
    file. For this example, two options are provided in the Format picklist: Portable
    Executable (PE) and Raw Binary. The Raw Binary option will always be present since
    it is Ghidra’s default for loading files that it does not recognize; this provides
    the lowest-level option for loading any file. When offered the choice of several
    loaders, it is not a bad strategy to accept the default selections unless you
    possess specific information that contradicts Ghidra’s determination.'
  prefs: []
  type: TYPE_NORMAL
- en: The Language field allows you to specify which processor module should be used
    during the disassembly process. A Ghidra language/compiler specification can consist
    of a processor type, an endian-ness specification (LE/BE), a bitness value (16/32/64),
    a processor variant, and a compiler ID (for example, ARM:LE:32:v7:default). For
    more information, refer to the Language/Compiler Specifications callout in [Chapter
    13](ch13.xhtml#ch13) as well as “[Language Definition Files](ch17.xhtml#ch17lev333)”
    on [page 396](ch17.xhtml#page_396). In most cases, Ghidra will choose the proper
    processor based on information that it reads from the executable file’s headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Destination Folder field lets you select the project folder in which the
    newly imported file will be displayed. The default is to display the top-level
    project folder, but subfolders can be added to organize imported programs within
    a project. You can select the extension buttons to the right of the Language and
    Destination Folder fields to view other options for each. You can also edit the
    text in the Program Name field. Don’t be confused by the change in terminology:
    Program Name is the name that Ghidra uses to refer to the imported binary within
    the project, including for display in the project window. It defaults to the name
    of the imported file but could be changed to something more descriptive, such
    as “Malware from Starship Enterprise.”'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the four fields shown in [Figure 4-4](ch04.xhtml#fig4_4), you
    can access other options to control the loading process via the Options button.
    These options are dependent on the selected format and processor. The options
    for *ch4_example.exe*, a PE file for x86, are shown in [Figure 4-5](ch04.xhtml#fig4_5),
    with the default options selected. While moving ahead with the default options
    is generally a good approach, you may choose other options as you gain experience.
    For example, you could include the Load External Libraries option if you wanted
    to have any dependent libraries imported into your project as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-5: Ghidra PE file-loading options*'
  prefs: []
  type: TYPE_NORMAL
- en: The import options are used to gain finer control over the file-loading process.
    The options are not applicable to all input file types, and in most cases, you
    can rely on the default selections. Additional information about options is available
    in Ghidra Help. More details about Ghidra’s import process and loaders are provided
    in [Chapter 17](ch17.xhtml#ch17).
  prefs: []
  type: TYPE_NORMAL
- en: When you are happy with your loading options and click OK to close the dialogs,
    you are presented with an Import Results Summary window, as shown in [Figure 4-6](ch04.xhtml#fig4_6).
    This provides you an opportunity to review the selected import options along with
    basic information that the loader has extracted from your chosen file. In “[Importing
    Files](ch13.xhtml#ch13lev218)” on [page 262](ch13.xhtml#page_262), we discuss
    ways to modify some of the import results prior to analysis if you have additional
    information that isn’t reflected in the Import Results Summary window.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-6: Ghidra Import Results Summary window*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Using the Raw Binary Loader***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At times, Raw Binary will be the only entry in the Format picklist. This is
    Ghidra’s way of telling you that none of its loaders recognize the chosen file.
    Examples of situations that may call for the use of the Raw Binary loader include
    the analysis of custom firmware images and exploit payloads that may have been
    extracted from network packet captures or log files. In these cases, Ghidra cannot
    recognize any file header information to guide the loading process, so it is up
    to you to step in and perform tasks that loaders often do automatically, like
    specifying the processor, the bit size, and, in some cases, a particular compiler.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you know the binary contains x86 code, many choices are available
    in the Language dialog, as shown in [Figure 4-7](ch04.xhtml#fig4_7). Often some
    research, and occasionally some trial and error, is required to narrow your language
    choices to something that will work for your binary. Any information you can obtain
    about the device the file was designed to run on will be useful. If you are confident
    that the file is not intended for a Windows system, you should select gcc or default
    (if available) for the Compiler setting.
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-7: Language and compiler selection options*'
  prefs: []
  type: TYPE_NORMAL
- en: If the binary file contains no header information Ghidra can work with, Ghidra
    also will not recognize the memory layout of the file. If you know the base address,
    file offset, or length of the file, you can enter those values into the corresponding
    loader option fields shown in [Figure 4-8](ch04.xhtml#fig4_8), or continue to
    load the file without entering this additional information. (This information
    can be provided or adjusted at any point before or after analysis through the
    Memory Map window discussed in the “[The Memory Map Window](ch05.xhtml#ch05lev86)”
    on [page 85](ch05.xhtml#page_85).)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-8: Ghidra Raw Binary loader options*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](ch17.xhtml#ch17) provides a more detailed discussion of manually
    loading and organizing unrecognized binary files.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Analyzing Files with Ghidra**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At its heart, Ghidra is essentially a database application controlled by a library
    of plugins, each with its own functionality. All project data is stored using
    a custom database that grows and evolves as the user adds information to the project.
    The various displays that Ghidra offers are simply views into the database that
    reveal information in formats useful to the software reverse engineer. Any modifications
    that users make to the database are reflected in the views and saved into the
    database, but these changes have no effect on the original executable file. The
    power of Ghidra lies in the tools it contains to analyze and manipulate the data
    within the database.
  prefs: []
  type: TYPE_NORMAL
- en: The CodeBrowser anchors the many tools available in Ghidra and has unique functionality
    to help you keep your windows organized, add and delete tools, rearrange content,
    and document your process. By default, the CodeBrowser opens with windows for
    Program Tree, Symbol Tree, Data Type Manager, Listing, Decompiler, and Console.
    These and other displays are introduced in [Chapter 5](ch05.xhtml#ch05).
  prefs: []
  type: TYPE_NORMAL
- en: The process just described can be used to create projects and populate them
    with files, but the real work of analysis has not yet begun. When you double-click
    a file in the Ghidra Project window, you are presented with the CodeBrowser window,
    shown in [Figure 4-9](ch04.xhtml#fig4_9). If this is your first time selecting
    one of the files you have imported, you will be presented with an option to allow
    Ghidra to auto analyze the file. An example of auto analysis using the Analysis
    Options dialog is shown in [Figure 4-10](ch04.xhtml#fig4_10). In the majority
    of cases involving binaries taken from common platforms and built with commonly
    available compilers, auto analysis is probably the correct first choice. You can
    halt the auto analysis process at any time by clicking the red stop button at
    the bottom-right corner of the CodeBrowser window. (The button is visible only
    during auto analysis.)
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-9: Ghidra CodeBrowser window*'
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-10: The Analysis Options dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that if you are not happy with Ghidra’s auto analysis, you can
    always discard your work by closing the CodeBrowser and electing not to save your
    changes, at which point you may reopen the file and try a different combination
    of auto analysis options. The most common reasons for modifying your auto analysis
    options involve unusually structured files such as obfuscated binaries, or binaries
    built with compilers or on operating systems that may be unknown to Ghidra.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you are opening an extremely large binary (perhaps 10MB or larger),
    Ghidra may take minutes to hours to perform its auto analysis. In such cases,
    you may opt to disable or set an analysis time-out for some of the more demanding
    analyzers (for example, Decompiler Switch Analysis, Decompiler Parameter ID, and
    Stack). As shown in [Figure 4-10](ch04.xhtml#fig4_10), highlighting an analyzer
    will display a description of the analyzer, which may include useful warnings
    about the amount of time the analyzer may take to run. In addition, you will see
    the Options frame, which provides you an opportunity to control some behavioral
    aspects of the individual analyzers. Any analysis that you opt to disable or that
    times out can always be run later using the options available under Ghidra’s Analysis
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: '**AUTO ANALYSIS WARNINGS**'
  prefs: []
  type: TYPE_NORMAL
- en: Once a loader begins to analyze a file, it may encounter issues during analysis
    that it deems important enough to warn you about. One example of this occurs with
    PE files that have been built without an associated Program Database (PDB) file.
    In such cases, once analysis is complete, you will be presented with an Auto Analysis
    Summary dialog that includes a message summarizing any issues encountered (see
    [Figure 4-11](ch04.xhtml#fig4_11)).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-11: Auto Analysis Summary dialog*'
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, the messages are simply informational. In some cases, the messages
    are instructional, offering you suggestions for ways to resolve an issue, perhaps
    by installing an optional, third-party utility for Ghidra to make use of in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: After Ghidra has auto analyzed the file, you can see that the import summary
    information has been supplemented with new information about your file, as shown
    in [Figure 4-12](ch04.xhtml#fig4_12).
  prefs: []
  type: TYPE_NORMAL
- en: '![image](Images/fig4-12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4-12: Ghidra Help ▸ About ch4_example.exe view of import summary information*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Auto Analysis Results***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Ghidra’s auto analysis is carried out by running each of the selected analyzers
    over your newly loaded binary. The Analysis Options dialog, as well as Ghidra
    Help, offers descriptions of each analyzer. The default analyzers are chosen because
    Ghidra users have historically found them to be the most useful across a wide
    range of file types. In the sections that follow, we discuss some of the most
    useful information extracted from a binary file during its initial loading and
    subsequent auto analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiler Identification**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Identifying the compiler used to build a piece of software can help us understand
    function-calling conventions used in a binary as well as determine which libraries
    the binary may be linked with. If the compiler can be identified when a file is
    loaded, Ghidra’s auto analysis will incorporate knowledge of behaviors specific
    to the identified compiler. Differences that you may observe when using different
    compilers and different compile time options are the focus of [Chapter 20](ch20.xhtml#ch20).
  prefs: []
  type: TYPE_NORMAL
- en: '**Function Argument and Local Variable Identification**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Within each identified function (identified from symbol table entries and addresses
    that are targets of call instructions), Ghidra performs a detailed analysis of
    the behavior of the stack pointer register in order to both recognize accesses
    to variables located within the stack and understand the layout of the function’s
    stack frame. Names are automatically generated for such variables based on their
    use as either local variables within the function or as stack-allocated arguments
    passed into the function as part of the function call process. Stack frames are
    discussed further in [Chapter 6](ch06.xhtml#ch06).
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Type Information**'
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Ghidra uses its knowledge of common library functions and their associated parameters
    to identify functions, data types, and data structures used within each function.
    This information is added to the Symbol Tree and Data Type Manager windows as
    well as the Listing window. This process saves you a tremendous amount of time
    by providing information that would otherwise need to be manually retrieved and
    applied from various application programming interface (API) references. Detailed
    information about Ghidra’s handling of library functions and associated data types
    is discussed in [Chapter 8](ch08.xhtml#ch08).
  prefs: []
  type: TYPE_NORMAL
- en: '**Desktop Behavior During Initial Analysis**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A tremendous amount of activity takes place within the CodeBrowser desktop during
    the initial analysis of a newly opened file. You can gain an understanding of
    this analysis by watching the analysis updates in the bottom right of the CodeBrowser
    window. This also keeps you updated on the progress of the analysis. If you are
    not an expert in speed reading, you can open the associated Ghidra log file and
    peruse the activities at a more leisurely pace. You can open the log file from
    the Ghidra Project window by selecting Help ▸ Show Log. (Note that the Show Log
    menu option is available only in the Ghidra Project ▸ Help menu, not in the CodeBrowser
    ▸ Help menu.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following output is from the log file generated by Ghidra during the auto
    analysis of *ch4_example.exe* and is representative of messages generated during
    the auto analysis process. The messages form a narrative of the analysis process
    and offer insight into the sequence of operations performed by Ghidra as well
    as the time required for each task during that analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Even before the auto analysis has completed, you can begin navigating through
    the various data displays. When the auto analysis is complete, it is safe to make
    any changes you like to your project file.
  prefs: []
  type: TYPE_NORMAL
- en: '***Saving Your Work and Exiting***'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'When you need to take a break from your analysis, it is a good idea to save
    your work. This is easy to accomplish in the CodeBrowser window in any of the
    following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Use one of the Save options within the **CodeBrowser File** menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the **Save** icon in the **CodeBrowser** toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close the **CodeBrowser** window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the project in the **Ghidra** window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit Ghidra through the **Ghidra File** menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In each case, you will be prompted to save any modified files. More detailed
    information about changing the appearance and functionality of CodeBrowser and
    other Ghidra tools is discussed in [Chapter 12](ch12.xhtml#ch12).
  prefs: []
  type: TYPE_NORMAL
- en: '**Ghidra Desktop Tips and Tricks**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ghidra displays a tremendous amount of information, and its desktop can become
    cluttered. Here are some quick tips for making the best use of your desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: The more screen real estate you dedicate to Ghidra, the happier you will be.
    Use this fact to justify the purchase of a king-size monitor (or four)!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t forget to use the Window menu in the CodeBrowser as a means of opening
    new views or restoring data displays that you have inadvertently closed. Many
    windows can also be opened using tool buttons on the CodeBrowser toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you open a new window, it may appear in front of an existing window. When
    this happens, look for tabs at the top or bottom of windows that allow you to
    switch between them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can close any window and reopen it as needed and drag it to a new location
    in the CodeBrowser desktop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The appearance of displays can be controlled using Edit ▸ Tool Options and locating
    the associated Display options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While these pointers are just the tip of the iceberg, they should be helpful
    as you begin to navigate the Ghidra CodeBrowser desktop. Additional CodeBrowser
    tips and tricks, including shortcuts and toolbar options, are discussed in [Chapter
    5](ch05.xhtml#ch05).
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Familiarity with the CodeBrowser desktop will greatly enhance your Ghidra experience.
    Reverse engineering binary code is difficult enough without having to struggle
    with your tools. The options you choose during the initial loading phase and the
    associated analysis performed by Ghidra set the stage for all of the analysis
    you will do later. At this point, you may be content with the work that Ghidra
    has accomplished on your behalf, and for simple binaries, this may be all that
    you need. On the other hand, if you wonder how you can gain additional control
    over your reverse engineering process, you are now ready to dive deeper into the
    functionality of Ghidra’s many data displays. In the coming chapters, you will
    be introduced to each of the primary displays, the circumstances under which you
    will find each one useful, and how to gain mastery of the tools and displays to
    optimize your workflow.
  prefs: []
  type: TYPE_NORMAL
