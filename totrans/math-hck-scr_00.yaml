- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Image](../images/common.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This book uses Scratch to invite exploration with math. It presents concepts
    such as number representations, divisibility, prime numbers, and cryptography
    that are useful and relevant in daily life and that are fun to code. It’s about
    how to ask interesting mathematical questions and how to program a computer to
    answer them.
  prefs: []
  type: TYPE_NORMAL
- en: The book is also about finding the best way to solve a problem. You’ll see how
    a little bit of planning, combined with the right mathematical or coding tricks,
    can make complex calculations doable. These are the “hacks” in the book’s title;
    you’ll learn programming strategies for coaxing Scratch into giving you the answer
    you want and mathematical tricks that offer neat solutions to seemingly impossible
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: Why Scratch?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exploring a computer language involves seeing what it can do and figuring out
    how it can answer the questions you want to ask. Scratch is a language that encourages
    play. While it’s often used to create graphics, sound, and games, its spirit of
    play works for exploring math, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scratch is simple to use: it runs directly in a web browser through the Scratch
    website, *[https://scratch.mit.edu](https://scratch.mit.edu)*, with no installation
    required (although you can download the Scratch app from *[https://scratch.mit.edu/download](https://scratch.mit.edu/download)*
    if you’d prefer to work offline). You create programs by putting commands together
    like LEGO^® bricks, with all the options immediately available via drag-and-drop.
    The block-based interface lets you focus on combining loops, conditionals, and
    variables to build whatever you want, without getting bogged down in the syntax
    details of a text-based language. If you’ve used Scratch to make games or write
    stories, it’s easy to start using it to answer math-related questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This book is for you if:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common-1.jpg) You like Scratch programming and want to learn
    more about it'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common-1.jpg) You like math and are ready to see some new
    ideas'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common-1.jpg) You like puzzles and patterns'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../images/common-1.jpg) You know how good it feels when you find the
    best way to solve a problem'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll get the most out of this book if you have some basic Scratch programming
    experience already. For example, you should be comfortable creating your own variables,
    lists, and custom blocks. It will also help to have some knowledge of algebra
    and geometry, such as understanding how to work with algebraic variables and interpret
    points on a coordinate plane. You’ll be amazed by what you can do in Scratch with
    just these few ingredients, from finding all the prime numbers in a set to creating
    unbreakable secret codes.
  prefs: []
  type: TYPE_NORMAL
- en: What’s in This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here’s an overview of what you’ll find in each chapter of the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 1: What Computers Think About Numbers](ch01.xhtml#ch01)** We’ll
    start by exploring how computers keep track of numbers internally. Knowing this
    can help you avoid tricky errors and overcome some of the limits of a programming
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 2: Exploring Divisibility and Primes](ch02.xhtml#ch02)** Next, we’ll
    investigate prime numbers, which are the building blocks of all integers. You’ll
    see how Scratch can help you find prime numbers and use them for computations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 3: Splitting Numbers with Prime Factorization](ch03.xhtml#ch03)** This
    chapter presents different strategies for figuring out how to write a number as
    a product of primes. Testing out different techniques will help you find the most
    efficient strategy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 4: Finding Patterns in Sequences](ch04.xhtml#ch04)** In this chapter,
    you’ll learn how to use Scratch to make sense of patterns in lists of numbers.
    Sometimes the patterns come from algebra, sometimes from geometry, and sometimes
    both.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 5: From Sequences to Arrays](ch05.xhtml#ch05)** Having mastered
    one-dimensional lists, we’ll move on to two-dimensional tables of numbers, like
    multiplication tables and Pascal’s triangle. You’ll learn strategies for keeping
    track of two-dimensional data structures in Scratch.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 6: Making Codes, and Cracking Them Too](ch06.xhtml#ch06)** This
    chapter will show you how to use mathematical rules to scramble messages into
    gibberish. You’ll also discover techniques for unscrambling those messages, with
    or without a secret key.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 7: Experiments in Counting](ch07.xhtml#ch07)** Next, we’ll tackle
    two interesting problems from the field of combinatorics, also called the art
    of counting. You’ll see how Scratch can make patterns out of simple rules and
    count how many ways the patterns can occur.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 8: Three Helpings of Pi](ch08.xhtml#ch08)** In this chapter, you’ll
    try out different ways of calculating the value of *π*, including by area, by
    convergence, and by using number theory.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Chapter 9: What Next?](ch09.xhtml#ch09)** The final chapter offers some
    suggestions about where to look for more math and programming problems and for
    more tools to solve them.'
  prefs: []
  type: TYPE_NORMAL
- en: Every chapter features a series of hands-on Scratch coding projects so you can
    see the chapter’s concepts in action. There are 33 projects in all. Challenges
    throughout the book will also help you build on the ideas and programs discussed
    in each chapter. The book’s [appendix](app01.xhtml) contains some sample code
    and hints on how to approach these challenges.
  prefs: []
  type: TYPE_NORMAL
- en: How to Read This Book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The easiest way to read this book is like a novel, straight through from beginning
    to end. The topics covered are largely independent, though, so you can read the
    chapters out of order if you like. If you’re particularly interested in one of
    the chapter topics, you might want to skip ahead to that one; or maybe one of
    the chapters is relevant to a subject you’re studying in school and you’d like
    to start there. Exploring in this way is absolutely fine, but I do have a couple
    of recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.xhtml#ch01), about computer arithmetic, will help you understand
    what can go wrong with arithmetic in the programs in later chapters. It’s a good
    idea to read this one first. [Chapter 2](ch02.xhtml#ch02) introduces prime numbers,
    so you should read it before [Chapter 3](ch03.xhtml#ch03), which builds prime
    factorizations. You’ll probably also want to read [Chapter 4](ch04.xhtml#ch04),
    on sequences, before [Chapter 5](ch05.xhtml#ch05), on arrays, since arrays can
    be thought of as the two-dimensional equivalent of one-dimensional sequences.
    The following chapters all stand alone, but [Chapter 7](ch07.xhtml#ch07), in particular,
    goes into some pretty complex concepts and programs; working through some of the
    other chapters before you tackle that one might be a good idea in order to get
    more practice with Scratch programming and mathematical thinking.'
  prefs: []
  type: TYPE_NORMAL
- en: Online Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find the Scratch code for all 33 projects and most of the challenge
    problems online at the Scratch studio for this book, *[https://scratch.mit.edu/studios/29153814](https://scratch.mit.edu/studios/29153814)*.
    The programs are also available for download from this book’s web page at *[https://nostarch.com/math-hacks-scratch](https://nostarch.com/math-hacks-scratch)*.
  prefs: []
  type: TYPE_NORMAL
- en: My Inspiration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I wrote this book with my grandchildren in mind. When they introduced me to
    Scratch, I was immediately struck by the language’s mascot, that smiling ginger
    kitten. I didn’t know the mascot’s name, but it might as well have been Gummitch,
    the precocious main character in one of my favorite short stories, “Space-Time
    for Springers” by Fritz Leiber. Gummitch is a supergenius kitten who has big plans
    to write books explaining the world to other supergenius kittens, including *The
    Encyclopedia of Odors*, *Anthropofeline Psychology*, and, most intriguing of all,
    *Space-Time for Springers*.
  prefs: []
  type: TYPE_NORMAL
- en: Seeing Scratch Cat’s resemblance to Gummitch, I wanted to write the math book
    Gummitch would have written, a sort of *Numbers for Springers*. I’ve aimed to
    keep the mathematical level of the book just right for supergenius kittens every-where.
    The book’s projects were fun to write and fun to hack in Scratch, combining a
    little bit of math with Scratch code to open up new ways to think about numbers,
    letters, geometry, and patterns. I hope you’ll enjoy the reading as much as I
    enjoyed the writing!
  prefs: []
  type: TYPE_NORMAL
