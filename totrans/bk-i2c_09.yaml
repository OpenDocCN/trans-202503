- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: I²C On Vendor Buses
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: I²C 在厂商总线上的应用
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: 'This chapter describes three popular vendor buses that support I²C signals:
    the Adafruit Feather bus, the SparkFun Qwiic bus (which Adafruit calls Stemma
    QT), and the Seeed Studio Grove bus. Hundreds of peripheral devices can connect
    to these buses, so it’s essential to familiarize yourself with them if you want
    to use a large number of existing peripheral devices in your systems. You’re also
    likely to encounter these buses in existing systems.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了三种流行的厂商总线，它们支持 I²C 信号：Adafruit Feather 总线、SparkFun Qwiic 总线（Adafruit 称其为
    Stemma QT）和 Seeed Studio Grove 总线。数百种外设设备可以连接到这些总线，因此，如果你想在系统中使用大量现有外设，了解这些总线是至关重要的。你也很可能在现有系统中遇到这些总线。
- en: 'To connect a pair of I²C devices, you need only three wires: SCL, SDA, and
    Gnd. Outfits like Adafruit, Seeed Studio, and SparkFun sell a wide variety of
    I²C breakout boards that connect to systems using pins with these three signals.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接一对 I²C 设备，您只需要三根线：SCL、SDA 和 Gnd。像 Adafruit、Seeed Studio 和 SparkFun 这样的公司销售各种
    I²C 扩展板，这些扩展板通过带有这三种信号的引脚连接到系统。
- en: Unfortunately, breakout board designers tend to bring out the IC’s signals to
    arbitrary header pins on the board. Two breakout boards, even from the same manufacturer,
    might bring out SCL and SDA signals to different sets of pins. This makes it difficult
    to swap different breakout boards. A few companies have attempted to organize
    these signals, along with ground and power supply lines, using a consistent interconnection
    scheme. Sadly, none of those systems was widely adopted, so you can’t mix and
    match modules from different vendors using the same connector.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，扩展板设计师往往将 IC 的信号引出到板上的任意插针。即使是同一制造商的两个扩展板，也可能将 SCL 和 SDA 信号引出到不同的引脚组。这使得交换不同的扩展板变得困难。一些公司曾尝试使用一致的互连方案来组织这些信号，以及接地和电源线。不幸的是，这些系统并未得到广泛采用，因此你无法使用相同的连接器将来自不同厂商的模块混合使用。
- en: In some respects, the Arduino, Raspberry Pi, and BeagleBone GPIO connectors
    provide a de facto standard for connecting I²C devices to embedded systems. It
    was not uncommon to see *shields* (Arduino add-on boards), *hats* (Raspberry Pi
    add-on boards), and *capes* (BeagleBone add-on boards) connecting I²C peripherals
    to these computer systems. However, these add-on boards are physically large and
    proportionately expensive. It’s a waste of space and money to build an I²C peripheral
    on one of these platforms when you typically need only four wires (SDA, SCL, Gnd,
    and power) for the actual connection.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，Arduino、Raspberry Pi 和 BeagleBone 的 GPIO 接口为将 I²C 设备连接到嵌入式系统提供了事实上的标准。通常可以看到
    *扩展板*（Arduino 附加板）、*帽子*（Raspberry Pi 附加板）和 *外壳*（BeagleBone 附加板）将 I²C 外设连接到这些计算机系统。然而，这些附加板体积较大，成本相对较高。若要在这些平台上构建
    I²C 外设是浪费空间和资金的，因为实际连接通常只需要四根线（SDA、SCL、Gnd 和电源）。
- en: For this reason, vendors created the Feather, Qwiic, Grove, and other buses
    that incorporate I²C signals, and sometimes other signals as well, into more compact
    form factors. These buses provide a well-defined mechanical connector for I²C
    devices, allowing you to easily connect peripherals and controllers, typically
    by simply plugging in a cable between the two devices, no soldering required.
    Many controller and peripheral devices support these buses, making it easy to
    prototype systems with them.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，厂商创建了 Feather、Qwiic、Grove 和其他总线，将 I²C 信号以及有时的其他信号，整合到更紧凑的外形中。这些总线为 I²C 设备提供了一个明确定义的机械连接器，允许您轻松连接外设和控制器，通常只需通过插入一根电缆连接这两个设备，无需焊接。许多控制器和外设设备支持这些总线，使得用它们原型化系统变得更加容易。
- en: 7.1 The Adafruit Feather Bus
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.1 Adafruit Feather 总线
- en: Adafruit developed the Feather bus to meet industry demands for a consistent
    platform that had a smaller form factor and was *CPU and peripheral agnostic*,
    pairable with any mix of appropriate CPUs and peripherals. As the Arduino devices
    became more popular, some designers wanted smaller devices that could easily fit
    in small spaces or even be included as part of a costume. The standard Arduino
    Uno and Mega 2560 boards were way too big for this purpose. To solve this problem,
    the Arduino company developed the Arduino Micro and Nano devices. Likewise, third
    parties developed devices like the Adafruit Trinket series. However, all these
    new devices used different pinouts for the signals coming off the PCBs. As such,
    a vibrant ecosystem of add-on boards similar to the Arduino shields for the Uno
    never developed. This made it difficult to design products that could easily swap
    out different CPUs, peripherals, battery packs, and other devices as with the
    standard Arduino Uno platform.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The Feather bus solved this problem by defining a standardized physical connection
    between an arbitrary CPU and an arbitrary set of peripheral devices using a fixed
    set of signals on 28 header pins (16 pins on one header, 12 on another). Because
    the signal lines exist in fixed positions on the Feather bus, Adafruit and many
    other vendors were able to create a whole set of add-on boards that could be used
    on a wide variety of SBCs that support the Feather bus.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The Feather bus has become very popular with costume designers and other system
    engineers who need compact, low-power designs. While it contains quite a few signals
    beyond I²C, its small form factor makes it a reasonable platform even if you’re
    hooking up only the I²C lines, power, and Gnd. Many vendors have produced Feather
    bus components, creating a large Feather ecosystem.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'The Feather bus supports two basic component types: Feathers and FeatherWings.
    The *Feather* is a small SBC that brings out various analog, digital, and other
    signals, including I²C. Different Feather implementations include 8-bit and 32-bit
    CPUs with a wide degree of performance, memory, and power consumption features,
    allowing a system designer to pick a CPU or other Feather feature ideal for the
    task at hand while still connecting the wide range of Feather peripherals to that
    SBC.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: A *FeatherWing* is an add-on board, like an Arduino shield, Pi HAT, or BeagleBone
    cape, holding the peripheral to connect to the controller. Although it is common
    to have only a single FeatherWing connected to a single Feather, it is possible
    to connect several FeatherWings to a single Feather (SBC) by stacking FeatherWings
    or by using FeatherWing expansion boards. This allows you to, for example, connect
    both OLED display and Ethernet FeatherWings to the same Feather.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: A particular FeatherWing board might not use all the I/O pins on the bus; indeed,
    many FeatherWings use only the I²C and Gnd pins on the bus and don’t connect to
    any of the other pins. Many FeatherWings also don’t use the I²C signals at all—they
    might use just some of the digital or analog pins, or perhaps the SPI pins on
    the Feather bus. This book discusses only those FeatherWings that use the I²C
    pins on the bus.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Adafruit provides formal specifications for Feathers and FeatherWings; see
    the Adafruit Feature bus specification for more details (link provided in “For
    More Information” at the end of this chapter). For Feathers, the basic specifications
    are the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Standard Feathers and Wings are 0.9 inches × 2.0 inches with 0.1-inch holes
    at each corner. The Feather length can vary a bit, but it should always maintain
    a width of 2.0 inches.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 16-pin header strip appears on the bottom side, centered 1.0 inch from the
    left edge.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 12-pin header strip appears on the top side, 1.2 inches from the left side.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The spacing between the two strips must remain 0.8 inches to ensure compatibility
    with FeatherWings.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Feathers and FeatherWings use 3.3-V logic for all digital inputs and outputs.
    Analog inputs may vary, but they are usually 3.3 V as well.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SparkFun calls its Feather-compatible boards *Thing Plus* boards. Particle also
    has a set of Feather-compatible boards it calls *Photon*. See their websites for
    details (links provided in “For More Information”).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 7.1.1 Feather Bus Pinouts
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Figure 7-1](#figure7-1) shows a typical pinout organization for the Feather
    bus. I say “typical” because the pin assignments are not absolute. Not all Feathers
    support all the pin types present on the Feather bus. For example, not all devices
    support six analog inputs. Whenever a particular CPU does not support a particular
    pin type, that Feather will attempt to map some other appropriate CPU function
    in its place. For example, if a CPU doesn’t support six analog inputs, its Feather
    may substitute a digital I/O pin in its place.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c07/f07001.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-1: Typical Feather bus pinouts'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: In [Figure 7-1](#figure7-1) I attached pin numbers to the 16-pin and 12-pin
    headers. This is not a standard Feather bus feature, however. Feather pins are
    generally identified by their function, not by a pin number.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Often, the pins on the Feather bus can take on other functions based on the
    CPU’s feature set. For example, most Arduino-class CPUs allow you to redefine
    analog pins as digital I/O pins if you don’t require the analog input functionality,
    so many Feathers support digital I/O on pins A0 through A5\. Similarly, a few
    CPUs provide a digital-to-analog output facility. By convention, most Feathers
    that have this feature attempt to map the DAC output to the A0 pin, so various
    FeatherWings that require this functionality can find it on a common pin.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The A0 through A5 pin designations do not necessarily correspond to Arduino
    analog pin numbers. For example, the Adafruit Feather 32u4 Basic maps the Arduino
    analog pins shown in [Table 7-1](#table7-1).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 7-1: Arduino-to-Feather Pin Mapping'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '| **Arduino pin** | **Feather pin** |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| ADC 7 | A0 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| ADC 6 | A1 |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| ADC 5 | A2 |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| ADC 4 | A3 |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| ADC 1 | A4 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| ADC 0 | A5 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: Feathers usually maintain the Arduino pin numbering for digital pins, since
    the I²C and SPI FeatherWings often use these pins as interrupt inputs and as chip
    selects. For example, D10 is the common chip select signal for the SPI bus.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 7.1.2 I²C on the Feather Bus
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is about the I²C bus, not the Feather bus. While many Feather bus
    pins might prove useful to someone wanting to use an I²C FeatherWing—for example,
    to provide a reset line or an interrupt input—the main pins of interest to us
    in this book are the SCL (pin 27 in [Figure 7-1](#figure7-1)) and SDA (pin 28)
    lines. Because the SDA and SCL lines are *always* brought out to the same pins
    on the Feather bus, any I²C-based FeatherWing peripheral will automatically work.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Because the Feather bus is a 3.3-V–only bus, the SDA and SCL lines have pullup
    resistors to the 3.3-V supply. If FeatherWings were to put 5 V on these lines,
    they could damage the underlying Feather CPU.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Feathers generally provide their own pullup resistors, as do most FeatherWings.
    If you attach multiple FeatherWings to a single Feather, each having its own set
    of pullup resistors, the cumulative pullup resistance could drop to a low value
    that interferes with I²C bus operation. FeatherWings that supply their own I²C
    pullups will often provide solder jumpers you can cut to remove the resistance
    from the lines (or, at the very least, the documentation will describe which resistors
    you remove). Consult your FeatherWing documentation for more details.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 7.1.3 Multicontroller Operation
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Feather bus assumes there is a single Feather (the controller) controlling
    one or more FeatherWings (peripherals). Multicontroller operation is not generally
    possible with the Feather bus. You might be able to wire a separate controller
    device to the SDA and SCL lines, but the Feather’s CPU may not support this. Generally,
    you should assume single-controller operation with the Feather bus. Of course,
    multiple peripherals are perfectly fine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 7.1.4 Feathers and FeatherWings
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adafruit and several other manufacturers produce a wide variety of Feather
    CPU modules and an even wider variety of FeatherWings peripherals. Although every
    Feather module supports I²C, not all FeatherWings use I²C: some use the SPI bus,
    and some use just the digital and analog pins on the Feather bus. [Table 7-2](#table7-2)
    lists many of the Feathers available from multiple vendors.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 7-2: Common Feather Modules'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Manufacturer** | **Description** | **Link** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| nRF52840 Express | Adafruit | Bluetooth LE with Cortex M4 CPU | [https://www.adafruit.com/product/4062](https://www.adafruit.com/product/4062)
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| 32u4 Bluefruit LE | Adafruit | Bluetooth LE with ATmega32u4 CPU | [https://www.adafruit.com/product/2829](https://www.adafruit.com/product/2829)
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| M0 Bluefruit LE | Adafruit | Bluetooth LE with Cortex M0 CPU | [https://www.adafruit.com/product/2995](https://www.adafruit.com/product/2995)
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| M0 WiFi | Adafruit | WiFi with Cortex M0+ CPU | [https://www.adafruit.com/product/3010](https://www.adafruit.com/product/3010)
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| HUZZAH32ESP32 | Adafruit | WiFi plus Bluetooth with ESP 32 CPU | [https://www.adafruit.com/product/3405](https://www.adafruit.com/product/3405)
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| Feather 32u4 RFM95 | Adafruit | LoRa Radio plus ATmega32u4 CPU | [https://www.adafruit.com/product/3078](https://www.adafruit.com/product/3078)
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| M0 RFM69HCW Packet Radio | Adafruit | Packet radio transceiver plus Cortex
    M0 CPU | [https://www.adafruit.com/product/3176](https://www.adafruit.com/product/3176)
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| STM32F405 Express | Adafruit | High-performance Cortex M4 CPU | [https://www.adafruit.com/product/4382](https://www.adafruit.com/product/4382)
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| WICED WiFi | Adafruit | WiFi plus Cortex M3 CPU | [https://www.adafruit.com/product/3056](https://www.adafruit.com/product/3056)
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| Teensy 3.x Feather Adapter | Adafruit | Puts Teensy 3.2 on Feather bus |
    [https://www.adafruit.com/product/3200](https://www.adafruit.com/product/3200)
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| Thing Plus SAMD51 | SparkFun | Cortex M4 CPU | [https://www.sparkfun.com/products/14713](https://www.sparkfun.com/products/14713)
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| Thing Plus Artemis | SparkFun | Artemis module (Cortex M4F, for machine learning)
    | [https://www.sparkfun.com/products/15574](https://www.sparkfun.com/products/15574)
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| Thing Plus ESP32 WROOM | SparkFun | WiFi with ESP32 module | [https://www.sparkfun.com/products/15663](https://www.sparkfun.com/products/15663)
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| RED-V Thing Plus | SparkFun | RISC-V CPU | [https://www.sparkfun.com/products/15799](https://www.sparkfun.com/products/15799)
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: '| Particle Boron LTE | Particle | Cellular modem plus nRF52840 SoC (Cortex
    M4) CPU | [https://www.adafruit.com/product/3998](https://www.adafruit.com/product/3998)
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '| Particle Argon | Particle | WiFi plus Bluetooth with nRF52840 and ESP32 processors
    | [https://docs.particle.io/argon](https://docs.particle.io/argon) |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '[Table 7-3](#table7-3) lists some FeatherWings that interface via the I²C bus.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 7-3: Examples of I²C-Based FeatherWing Modules'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Manufacturer** | **Description** | **Link** |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| 128×64 OLED | Adafruit | Small OLED display for Feather | [https://www.adafruit.com/product/4650](https://www.adafruit.com/product/4650)
    |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| RTC plus SD Add-on | Adafruit | I²C-based real-time clock and SPI-based SD
    card interface | [https://www.adafruit.com/product/2922](https://www.adafruit.com/product/2922)
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| DS3231 Precision RTC | Adafruit | High-precision real-time clock | [https://www.adafruit.com/product/3028](https://www.adafruit.com/product/3028)
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| 8-Channel PWM or Servo | Adafruit | Eight-channel motor (servo) controller
    | [https://www.adafruit.com/product/2928](https://www.adafruit.com/product/2928)
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| 4-Digit 7-Segment LED Matrix Display | Adafruit | Seven-segment display driver
    | [https://www.adafruit.com/product/3088](https://www.adafruit.com/product/3088)
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| AMG8833 IR Thermal Camera | Adafruit | Infrared thermal imaging camera |
    [https://www.adafruit.com/product/3622](https://www.adafruit.com/product/3622)
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| 14-Segment Alphanumeric LED | Adafruit | 14-segment display driver | [https://www.adafruit.com/product/3089](https://www.adafruit.com/product/3089)
    |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| 8×16 LED Matrix | Adafruit | Driver for 8×16 LED matrix | [https://www.adafruit.com/product/3090](https://www.adafruit.com/product/3090)
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| Joy FeatherWing | Adafruit | Joystick and game button adapter | [https://www.adafruit.com/product/3632](https://www.adafruit.com/product/3632)
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: '| LSM6DSOX plus LIS3MDL FeatherWing Precision 9-DoF IMU | Adafruit | Nine degrees
    of freedom sensor | [https://www.adafruit.com/product/4565](https://www.adafruit.com/product/4565)
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '| ADXL343 plus ADT7410 Sensor | Adafruit | Motion and temperature sensing |
    [https://www.adafruit.com/product/4147](https://www.adafruit.com/product/4147)
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| Qwiic Shield for Thing Plus | SparkFun | Breakout Qwiic connectors from Feather
    bus | [https://www.sparkfun.com/products/16790](https://www.sparkfun.com/products/16790)
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: See “For More Information” for links to a more complete and up-to-date list
    of Adafruit Feather modules, SparkFun modules, and vendors selling Feathers (SBCs)
    and FeatherWing (peripheral) boards.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 I²C on the SparkFun Qwiic Bus
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the Feather bus, the SparkFun Qwiic bus is strictly an I²C bus. The idea
    behind Qwiic was to create a standard plug and receptacle for connecting I²C devices.
    As with the Adafruit Feather bus, the Qwiic connectors have become immensely popular
    with many compatible products employing the Qwiic bus, both peripherals and CPU
    modules.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Qwiic connectors are four-pin JST SH connectors with very tiny pins (1-mm pitch).
    The connectors have a standardized pinout given in [Table 7-4](#table7-4).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 7-4: Qwiic Connector Pinout'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pin** | **Function** |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: '| 1 | Gnd |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: '| 2 | Vcc |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: '| 3 | SDA |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: '| 4 | SCL |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
- en: '[Figure 7-2](#figure7-2) shows the connector layout.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c07/f07002.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-2: Qwiic pinout'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The Qwiic bus is 3.3 V only. Connecting a 5-V device onto the Qwiic bus could
    damage the device, other devices on the bus, or the controller on the bus.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Though it was designed for a single controller, the Qwiic bus can, in theory,
    support multiple controllers. However, like the Feather bus, physical constraints
    prevent this. For example, the controller is generally responsible for putting
    3.3 V on the Qwiic bus. If two different controllers each supply different values
    for 3.3 V to the bus, this could create some problems. In theory, you could cut
    the 3.3 V from multiple controllers and use an independent 3.3-V supply or allow
    a single controller to provide the voltage. In practice, you’d likely run into
    problems.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Adafruit also makes several controller and peripheral devices that connect to
    the Qwiic bus. While it has some “pure” Qwiic devices, for the most part its modules
    use the name STEMMA/QT rather than Qwiic. STEMMA/QT is upward compatible from
    Qwiic, the major difference being that it supports 5-V devices as well as 3.3-V
    devices. STEMMA/QT peripherals contain level-shifting circuitry on every board
    to allow them to work properly with either 3.3-V or 5-V signal lines. In theory,
    this is a great idea, allowing 5-V parts to be used on the bus alongside the 3.3-V
    part. In practice, almost all Qwiic bus peripherals and controllers are 3.3 V
    today, so this extension seems to have gone to waste.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the Feather bus, a fair number of different manufacturers have created
    Qwiic bus–compatible products: SparkFun has dozens of boards, Adafruit makes several,
    and Smart Prototyping makes a bunch (such as Zio; the link is provided in “For
    More Information”), as do many other outfits. See the next section, “Qwiic Bus
    Peripherals,” for a small sampling of the Qwiic-compatible products available.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 Qwiic Bus Peripherals
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, SparkFun had created more than 150 different Qwiic-compatible
    modules (SBCs and peripheral devices). Many other vendors also produce Qwiic-compatible
    boards. [Table 7-5](#table7-5) provides a tiny sampling of the Qwiic peripherals
    you can purchase.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 7-5: Qwiic Peripheral Devices'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name** | **Manufacturer** | **Description** | **Link** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| Zio Qwiic MUX | Smart Prototyping | Eight-channel I²C multiplexer | [https://www.smart-prototyping.com/Zio-Qwiic-Mux.xhtml](https://www.smart-prototyping.com/Zio-Qwiic-Mux.xhtml)
    |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '| Zio OLED Display | Smart Prototyping | 128×32 OLED display | [https://www.smart-prototyping.com/Zio-OLED-Display-0-91-in-128-32-Qwiic.xhtml](https://www.smart-prototyping.com/Zio-OLED-Display-0-91-in-128-32-Qwiic.xhtml)
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '| Zio 16 Servo Controller | Smart Prototyping | 16-channel servo controller
    | [https://www.smart-prototyping.com/Zio-16-Servo-Controller.xhtml](https://www.smart-prototyping.com/Zio-16-Servo-Controller.xhtml)
    |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| Zio Qwiic IO Expander | Smart Prototyping | 16-channel GPIO expander | [https://www.smart-prototyping.com/Zio-Qwiic-IO-Expander.xhtml](https://www.smart-prototyping.com/Zio-Qwiic-IO-Expander.xhtml)
    |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| Zio 4 DC Motor Controller | Smart Prototyping | Two-channel bidirectional
    motor control | [https://www.smart-prototyping.com/Zio-4-DC-Motor-Controller.xhtml](https://www.smart-prototyping.com/Zio-4-DC-Motor-Controller.xhtml)
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
- en: '| Zio TOF Distance Sensor RFD77402 | Smart Prototyping | Time of flight distance
    measurement (10 cm to 200 cm) | [https://www.smart-prototyping.com/Zio-TOF-Distance-Sensor-RFD77402.xhtml](https://www.smart-prototyping.com/Zio-TOF-Distance-Sensor-RFD77402.xhtml)
    |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
- en: '| Zio 9DoF IMU BNO055 | Smart Prototyping | Nine degrees of freedom position
    measurement | [https://www.smart-prototyping.com/Zio-9DOF-IMU-BNO055.xhtml](https://www.smart-prototyping.com/Zio-9DOF-IMU-BNO055.xhtml)
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
- en: '| 9DoF Sensor Stick | SparkFun | Nine degrees of freedom position measurement
    | [https://www.sparkfun.com/products/13944](https://www.sparkfun.com/products/13944)
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| 6 Degrees of Freedom Breakout LSM6DS3 | SparkFun | Six degrees of freedom
    position measurement | [https://www.sparkfun.com/products/13339](https://www.sparkfun.com/products/13339)
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| Atmospheric Sensor Breakout BME280 | SparkFun | Barometric pressure, humidity,
    and temperature | [https://www.sparkfun.com/products/13676](https://www.sparkfun.com/products/13676)
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: '| I²C DAC Breakout | SparkFun | 12-bit digital-to-analog converter | [https://www.sparkfun.com/products/12918](https://www.sparkfun.com/products/12918)
    |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| 16 Output I/O Expander Breakout SX1509 | SparkFun | 16-channel GPIO expander
    | [https://www.sparkfun.com/products/13601](https://www.sparkfun.com/products/13601)
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '| GPS Breakout XA1110 | SparkFun | Global Positioning Satellite module | [https://www.sparkfun.com/products/14414](https://www.sparkfun.com/products/14414)
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| RFID Qwiic Reader | SparkFun | Radio Frequency ID tag reader | [https://www.sparkfun.com/products/15191](https://www.sparkfun.com/products/15191)
    |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| Qwiic Thermocouple Amplifier MCP9600 | SparkFun | Read temperatures with
    a thermocouple | [https://www.sparkfun.com/products/16295](https://www.sparkfun.com/products/16295)
    |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: '| Qwiic Quad Solid State Relay Kit | SparkFun | Four-channel high-current/high-voltage
    SSRs | [https://www.sparkfun.com/products/16833](https://www.sparkfun.com/products/16833)
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: '| Qwiic Twist RGB Rotary Encoder Breakout | SparkFun | Rotary encoder with
    RGB LED | [https://www.sparkfun.com/products/15083](https://www.sparkfun.com/products/15083)
    |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
- en: '| BH1750 Light Sensor | Adafruit | Ambient light sensor | [https://www.adafruit.com/product/4681](https://www.adafruit.com/product/4681)
    |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
- en: '| LPS25 Pressure Sensor | Adafruit | Atmospheric pressure sensor | [https://www.adafruit.com/product/4530](https://www.adafruit.com/product/4530)
    |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
- en: '| PCF8591 Quad 8-bit ADC plus 8-bit DAC | Adafruit | Four-channel 8-bit ADC
    and single-channel 8-bit DAC | [https://www.adafruit.com/product/4648](https://www.adafruit.com/product/4648)
    |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
- en: '| DS3502 I²C Digital 10K Potentiometer Breakout | Adafruit | 10 kΩ digital
    potentiometer | [https://www.adafruit.com/product/4286](https://www.adafruit.com/product/4286)
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
- en: '| MCP4728 Quad DAC with EEPROM | Adafruit | Four-channel 12-bit DAC | [https://www.adafruit.com/product/4470](https://www.adafruit.com/product/4470)
    |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
- en: '| PMSA003I Air Quality Breakout | Adafruit | Air quality monitor | [https://www.adafruit.com/product/4632](https://www.adafruit.com/product/4632)
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
- en: See “For More Information” for links to information on Zio devices, SparkFun
    devices, and Adafruit STEMMA/QT devices.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 7.4 I²C on the Seeed Studio Grove Bus
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Grove bus, created by Seeed Studio in 2010, was one of the earliest attempts
    at a standardized hobbyist interconnection system. It uses a proprietary four-pin
    locking connector on 2-mm centers, though it’s easy enough to force a JST PH four-pin
    female connector into the Grove socket.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: The Grove system looks like somebody went to the expense of creating a custom
    connector and then tried to utilize that connector for as many different things
    as possible. Grove uses a single connector to carry 3.3-V and 5-V versions of
    digital signals, analog signals, I²C signals, and UART signals. This means it’s
    easy to damage a device by plugging it into a connector with a different set of
    signals or voltages on the same pins. You must be careful to ensure you’re mating
    compatible devices because the connector offers no protection or indication of
    the types of signals present.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-3](#figure7-3) shows the pin layout for the Grove connector.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/502468c07/f07003.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-3: Grove connector'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: This book will not consider the UART, digital, or analog functions of the Grove
    connection system; [Table 7-6](#table7-6) simply lists the different possible
    functions for each Grove pin to show that the I²C signals share the same pins
    as other functions in the Grove system. Be aware that different devices might
    expect different voltages on the Vcc pin (that is, 3.3 V or 5 V).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 7-6: Grove Connector Pin Functions'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '| **Pin** | **I²C function** | **UART function** | **Digital function** | **Analog
    function** |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| 1 | SCL | Rx | D*n* | A*n* |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| 2 | SDA | Tx | D*n+1* | A*n+1* |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| 3 | Vcc | Vcc | Vcc | Vcc |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| 4 | Gnd | Gnd | Gnd | Gnd |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: Although a few manufacturers have placed Grove receptacles on their CPU boards,
    Seeed Studio seems to be the primary (if not only) manufacturer of Grove modules.
    The Seeed Studio Wiki gives specs for the Grove interconnection system and a list
    of the Grove products the company currently manufactures (link provided in “For
    More Information”).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 Chapter Summary
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This chapter discussed three common vendor-defined buses that support the I²C
    bus: the Adafruit Feather bus, the SparkFun Qwiic bus, and Seeed Studio’s Grove
    connection.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: The Adafruit Feather bus is probably the most popular of the three, in terms
    of the number of Feathers (CPU boards) and Featherwings (peripheral boards) available.
    The SparkFun Qwiic bus is also very popular. The main difference between the two
    is that the Qwiic bus is I²C (plus power) only, whereas the Feather bus also contains
    other signals. The Qwiic connection system is more convenient for attaching and
    detaching small devices to a breadboard system.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: The Grove connection system is similar to Qwiic insofar as it is a four-wire
    system. Different variants of the Grove connector support I²C, SPI, serial, analog,
    and digital signals, though you must take care not to confuse signal types when
    using the Grove bus.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of these vendor buses is the *ecosystem* support they provide.
    Several different manufacturers provide small boards that attach to these buses,
    making it easy to add functionality to systems you are assembling.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
