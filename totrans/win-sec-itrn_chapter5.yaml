- en: <hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SECURITY
    DESCRIPTORS</samp>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding chapter, we discussed the security access token, which describes
    the user’s identity to the SRM. In this chapter, you’ll learn how *security descriptors*
    define a resource’s security. A security descriptor does several things. It specifies
    the owner of a resource, allowing the SRM to grant specific rights to users who
    are accessing their own data. It also contains the *discretionary access control
    (DAC)* and *mandatory access control (MAC)*, which grant or deny access to users
    and groups. Finally, it
  prefs: []
  type: TYPE_NORMAL
- en: can contain entries that generate audit events. Almost every kernel resource
    has a security descriptor, and user-mode applications can implement their own
    access control through security descriptors without needing to create a kernel
    resource.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the structure of security descriptors is crucial to understanding
    the security of Windows, as they’re used to secure every kernel object and many
    user-mode components, such as services. You’ll even find security descriptors
    used across network boundaries to secure remote resources. While developing a
    Windows application or researching Windows security, you’ll inevitably have to
    inspect or create a security descriptor, so having a clear understanding of what
    a security descriptor contains will save you a lot of time. To help with this,
    I’ll start by describing the structure of a security descriptor in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Structure of a Security Descriptor</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Windows stores security descriptors as binary structures on disk or in memory.
    While you’ll rarely have to manually parse these structures, it’s worth understanding
    what they contain. A security descriptor consists of the following seven components:'
  prefs: []
  type: TYPE_NORMAL
- en: The revision
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optional resource manager flags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control flags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional owner SID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional group SID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional discretionary access control list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional system access control list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s look at each of these in turn. The first component of any security descriptor
    is the *revision*, which indicates the version of the security descriptor’s binary
    format. There is only one version, so the revision is always set to the value
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>. Next is an optional set
    of flags for use by a resource manager. You’ll almost never encounter these flags
    being set; however, they are used by Active Directory, so we’ll talk more about
    them in [Chapter 11](chapter11.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: 'The resource manager flags are followed by a set of *control flags*. These
    have three uses: they define which optional components of the security descriptor
    are valid, how the security descriptors and components were created, and how to
    process the security descriptor when applying it to an object. [Table 5-1](chapter5.xhtml#tab5-1)
    shows the list of valid flags and their descriptions. We’ll cover many of the
    terms in this table, such as inheritance, in more detail in the following chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-1:</samp> <samp class="SANS_Futura_Std_Book_11">Valid
    Control Flags</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OwnerDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0001</samp> | <samp class="SANS_Futura_Std_Book_11">The
    owner SID was assigned through a default method.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GroupDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0002</samp> | <samp class="SANS_Futura_Std_Book_11">The
    group SID was assigned through a default method.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclPresent</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0004</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL is present in the security descriptor.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0008</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL was assigned through a default method.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclPresent</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0010</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL is present in the security descriptor.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0020</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL was assigned through a default method.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclUntrusted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0040</samp> | <samp class="SANS_Futura_Std_Book_11">When
    combined with</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">ServerSecurity</samp><samp
    class="SANS_Futura_Std_Book_11">, the DACL is untrusted.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ServerSecurity</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0080</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL is replaced with a server ACL (more on the use of this in [Chapter 6](chapter6.xhtml)).</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInheritReq</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0100</samp> | <samp class="SANS_Futura_Std_Book_11">DACL
    auto-inheritance for child objects is requested.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInheritReq</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0200</samp> | <samp class="SANS_Futura_Std_Book_11">SACL
    auto-inheritance for child objects is requested.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0400</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL supports auto-inheritance.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInherited</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0800</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL supports auto-inheritance.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL is protected from inheritance.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x2000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL is protected from inheritance.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RmControlValid</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x4000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    resource manager flags are valid.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    security descriptor is in a relative format.</samp> |'
  prefs: []
  type: TYPE_TB
- en: After the control flags comes the *owner SID*, which represents the owner of
    the resource. This is typically the user’s SID; however, ownership can also be
    assigned to a group, such as the *Administrators* group. Being the owner of a
    resource grants you certain privileges, including the ability to modify the resource’s
    security descriptor. By ensuring the owner has this capability, the system prevents
    a user from locking themselves out of their own resources.
  prefs: []
  type: TYPE_NORMAL
- en: The *group SID* is like the owner SID, but it’s rarely used. It exists primarily
    to ensure POSIX compatibility (a concern in the days when Windows still had a
    POSIX subsystem) and plays no part in access control for Windows applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important part of the security descriptor is the *discretionary access
    control list (DACL)*. The DACL contains a list of *access control entries (ACEs)*,
    which define what access a SID is given. It’s considered *discretionary* because
    the user or system administrator can choose the level of access granted. There
    are many different types of ACEs. We’ll discuss these further in “Access Control
    List Headers and Entries” on page 151; for now, you just need to know that the
    basic information in each ACE includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The SID of the user or group to which the ACE applies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of ACE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The access mask to which the SID will be allowed or denied access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final component of the security descriptor is the *security access control
    list (SACL)*, which stores auditing rules. Like the DACL, it contains a list of
    ACEs, but rather than determining access based on whether a defined SID matches
    the current user’s, it determines the rules for generating audit events when the
    resource is accessed. Since Windows Vista, the SACL has also been the preferred
    location in which to store additional non-auditing ACEs, such as the resource’s
    mandatory label.
  prefs: []
  type: TYPE_NORMAL
- en: Two final elements to point out in the DACL and SACL are the <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclPresent</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclPresent</samp> control flags.
    These flags indicate that the DACL and SACL, respectively, are present in the
    security descriptor. Using flags allows for the setting of a *NULL ACL*, where
    the present flag is set but no value has been specified for the ACL field in the
    security descriptor. A NULL ACL indicates that no security for that ACL has been
    defined and causes the SRM to effectively ignore it. This is distinct from an
    empty ACL, where the present flag is set and a value for the ACL is specified
    but the ACL contains no ACEs.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Structure of a SID</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Until now, we’ve talked about SIDs as opaque binary values or strings of numbers.
    In this section, we’ll look more closely at what a SID contains. The diagram in
    [Figure 5-1](chapter5.xhtml#fig5-1) shows a SID as it’s stored in memory.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: The SID structure
    in memory</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four components to a binary SID:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Revision    **A value that is always set to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    as there is no other defined version number'
  prefs: []
  type: TYPE_NORMAL
- en: '**Relative identifier count    **The number of RIDs in the SID'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security authority    **A value representing the party that issued the SID'
  prefs: []
  type: TYPE_NORMAL
- en: '**Relative identifiers    **Zero or more 32-bit numbers that represent the
    user or group'
  prefs: []
  type: TYPE_NORMAL
- en: The security authority can be any value, but Windows has predefined some commonly
    used ones. All well-known authorities start with five <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    bytes followed by a value from [Table 5-2](chapter5.xhtml#tab5-2).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-2:</samp> <samp class="SANS_Futura_Std_Book_11">Well-Known
    Authorities</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Final
    value</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Example name</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Null</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NULL SID</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">World</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Everyone</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Local</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">CONSOLE LOGON</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Creator</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">CREATOR OWNER</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">BUILTIN\Users</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Package</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">15</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">APPLICATION PACKAGE AUTHORITY\Your
    Internet connection</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">16</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Mandatory
    Label\Medium Mandatory Level</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">17</samp> | <samp class="SANS_Futura_Std_Book_11">N/A</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrust</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">19</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">TRUST
    LEVEL\ProtectedLight-Windows</samp> |'
  prefs: []
  type: TYPE_TB
- en: After the security authority come the relative identifiers. A SID can contain
    one or more RIDs, with the domain RIDs followed by the user RIDs.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through how the SID is constructed for a well-known group, *BUILTIN\Users*.
    Note that the domain component is separated from the group name with a backslash.
    In this case, the domain is *BUILTIN*. This is a predefined domain represented
    by a single RID, <samp class="SANS_TheSansMonoCd_W5Regular_11">32</samp>. [Listing
    5-1](chapter5.xhtml#Lis5-1) builds the domain SID for the *BUILTIN* domain from
    its components by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    PowerShell command, then uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSidName</samp>
    command to retrieve the system-defined name for the SID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-1: Querying for the <samp class="SANS_Futura_Std_Book_11">BUILTIN</samp>
    domain’s SID'
  prefs: []
  type: TYPE_NORMAL
- en: The *BUILTIN* domain’s SID is a member of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp>
    security authority. We specify this security authority using the <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityAuthority</samp>
    parameter and specify the single RID using the <samp class="SANS_TheSansMonoCd_W5Regular_11">RelativeIdentifier</samp>
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We then pass the SID to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSidName</samp>
    command. The first two columns of the output show the domain name and the name
    of the SID. In this case, those values are the same; this is just a quirk of the
    *BUILTIN* domain’s registration.
  prefs: []
  type: TYPE_NORMAL
- en: The next column indicates the location from which the name was retrieved. In
    this example, the source, <samp class="SANS_TheSansMonoCd_W5Regular_11">Account</samp>,
    indicates that the name was retrieved from LSASS. If the source were <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnown</samp>,
    this would indicate that PowerShell knew the name ahead of time and didn’t need
    to query LSASS. The fourth column, <samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>,
    indicates the SID’s type. In this case, it’s <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp>,
    which we might have expected. The final column is the SID in its SDDL format.
  prefs: []
  type: TYPE_NORMAL
- en: Any RIDs specified for SIDs following the domain SID identify a particular user
    or group. For the *Users* group, we use a single RID with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">545</samp>
    (predefined by Windows). [Listing 5-2](chapter5.xhtml#Lis5-2) creates a new SID
    by adding the <samp class="SANS_TheSansMonoCd_W5Regular_11">545</samp> RID to
    the base domain’s SID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-2: Constructing a SID from a security authority and RIDs'
  prefs: []
  type: TYPE_NORMAL
- en: The output now shows *Users* as the SID name. Also notice that <samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>
    in this case is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">Alias</samp>.
    This indicates that the SID represents a local, built-in group, as distinct from
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>, which represents a
    user-defined group. When we print the <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>
    property on the SID, it outputs the fully qualified name, with the domain and
    the name separated by a backslash.
  prefs: []
  type: TYPE_NORMAL
- en: You can find lists of known SIDs in Microsoft’s technical documentation and
    on other websites. However, Microsoft sometimes adds SIDs without documenting
    them. Therefore, I encourage you to test multiple security authority and RID values
    to see what other users and groups you can find. Merely checking for different
    SIDs won’t cause any damage. For example, try replacing the user RID in [Listing
    5-2](chapter5.xhtml#Lis5-2) with <samp class="SANS_TheSansMonoCd_W5Regular_11">544</samp>.
    This new SID represents the *BUILTIN\Administrators* group, as shown in [Listing
    5-3](chapter5.xhtml#Lis5-3).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-3: Querying the <samp class="SANS_Futura_Std_Book_11">Administrators</samp>
    group SID'
  prefs: []
  type: TYPE_NORMAL
- en: Remembering the security authority and RIDs for a specific SID can be tricky,
    and you might not recall the exact name to query by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>
    parameter, as described in [Chapter 2](chapter2.xhtml). Therefore, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    implements a mode that can query a SID from a known set. For example, to query
    the SID of the *Administrators* group, you can use the command shown in [Listing
    5-4](chapter5.xhtml#Lis5-4).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-4: Querying the known <samp class="SANS_Futura_Std_Book_11">Administrators</samp>
    group SID'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll find SIDs used throughout the Windows operating system. It’s crucial
    that you understand how they’re structured, as this will allow you to quickly
    assess what a SID might represent. For example, if you identify a SID with the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> security authority and
    its first RID is <samp class="SANS_TheSansMonoCd_W5Regular_11">32</samp>, you
    can be sure it’s representing a built-in user or group. Knowing the structure
    also allows you to identify and extract SIDs from crash dumps or memory in cases
    where better tooling isn’t available.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Absolute and Relative Security Descriptors</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The kernel supports two binary representation formats for security descriptors:
    absolute and relative. We’ll examine both in this section, and consider the advantages
    and disadvantages of each.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both formats start with the same three values: the revision, the resource manager
    flags, and the control flags. The <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>
    flag in the control flags determines which format to use, as shown in [Figure
    5-2](chapter5.xhtml#fig5-2).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: Selecting the security
    descriptor format</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The total size of the security descriptor’s header is 32 bits, split between
    two 8-bit values, the revision and <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>,
    and the 16-bit control flags. The security descriptor’s resource manager flags
    are stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>; these
    are only valid if the <samp class="SANS_TheSansMonoCd_W5Regular_11">RmControlValid</samp>
    control flag is set, although the value will be present in either case. The rest
    of the security descriptor is stored immediately after the header.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest format, the absolute security descriptor, is used when the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> flag is not set. After
    the common header, the absolute format defines four pointers to reference in memory:
    the owner SID, the group SID, the DACL, and the SACL, in that order, as shown
    in [Figure 5-3](chapter5.xhtml#fig5-3).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: The structure of
    an absolute security descriptor</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: Each pointer references an absolute memory address at which the data is stored.
    The size of the pointer therefore depends on whether the application is 32 or
    64 bits. It’s also possible to specify a NULL value for the pointer to indicate
    that the value is not present. The owner and group SID values are stored using
    the binary format defined in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: When the <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> flag
    is set, the security descriptor instead follows the relative format. Rather than
    referencing its values using absolute memory addresses, a relative security descriptor
    stores these locations as positive offsets relative to the start of its header.
    [Figure 5-4](chapter5.xhtml#fig5-4) shows how a relative security descriptor is
    constructed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: The structure of
    a relative security descriptor</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: These values are stored in contiguous memory. The ACL format, which we’ll explore
    in the following section, is already a relative format and therefore doesn’t require
    any special handling when used in a relative security descriptor. Each offset
    is always 32 bits long, regardless of the system’s bit size. If an offset is set
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, the value doesn’t exist,
    as in the case of NULL for an absolute security descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of an absolute security descriptor is that you can easily
    update its individual components. For example, to replace the owner SID, you’d
    allocate a new SID in memory and assign its memory address to the owner pointer.
    In comparison, modifying a relative security descriptor in the same way might
    require adjusting its allocated memory if the new owner SID structure is larger
    than the old one.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the big advantage of a relative security descriptor is that
    it can be built in a single contiguous block of memory. This allows you to serialize
    the security descriptor to a persistent format, such as a file or a registry key.
    When you’re trying to determine the security of a resource, you might need to
    extract its security descriptor from memory or a persistent store. By understanding
    the two formats, you can determine how to read the security descriptor into something
    you can view or manipulate.
  prefs: []
  type: TYPE_NORMAL
- en: Most APIs and system calls accept either security descriptor format, determining
    how to handle a security descriptor automatically by checking the value of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> flag. However,
    you’ll find some exceptions in which an API takes only one format or another;
    in that case, if you pass the API a security descriptor in the wrong format, you’ll
    typically receive an error such as <samp class="SANS_TheSansMonoCd_W5Regular_11">STATUS_INVALID_SECURITY_DESCR</samp>.
    Security descriptors returned from an API will almost always be in relative format
    due to the simplicity of their memory management. The system provides the APIs
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RtlAbsoluteToSelfRelativeSD</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RtlSelfRelativeToAbsoluteSD</samp>
    to convert between the two formats if needed.
  prefs: []
  type: TYPE_NORMAL
- en: The PowerShell module handles all security descriptors using a <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    object, regardless of format. This object is written in .NET and converts to a
    relative or absolute security descriptor only when it’s required to interact with
    native code. You can determine whether a <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    object was generated from a relative security descriptor by inspecting the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> property.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Access Control List Headers and Entries</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The DACL and SACL make up most of the data in a security descriptor. While these
    elements have different purposes, they share the same basic structure. In this
    section we’ll cover how they’re arranged in memory, leaving the details of how
    they contribute to the access check process for [Chapter 7](chapter7.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Header</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: All ACLs consist of an ACL header followed by a list of zero or more ACEs in
    one contiguous block of memory. [Figure 5-5](chapter5.xhtml#fig5-5) shows this
    top-level format.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: A top-level overview
    of the ACL structure</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The ACL header contains a revision, the total size of the ACL in bytes, and
    the number of ACE entries that follow the header. [Figure 5-6](chapter5.xhtml#fig5-6)
    shows the header structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: The structure of
    the ACL header</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ACL header also contains two reserved fields, <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz2</samp>, both of which should
    always be <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>. They serve no
    purpose in modern versions of Windows and are there in case the ACL structure
    needs to be extended. Currently, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp>
    field can have one of three values, which determine the ACL’s valid ACEs. If an
    ACL uses an ACE that the revision doesn’t support, the ACL won’t be considered
    valid. Windows supports the following revisions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default    **The default ACL revision. Supports all the basic ACE types,
    such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>. Specified with the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp> value <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compound    **Adds support for compound ACEs to the default ACL revision.
    Specified with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp>
    value <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object    **Adds support for object ACEs to the compound. Specified with
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp> value <samp
    class="SANS_TheSansMonoCd_W5Regular_11">4</samp>.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The ACE List</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Following the ACL header is the list of ACEs, which determines what access the
    SID has. ACEs are of variable length but always start with a header that contains
    the ACE type, additional flags, and the ACE’s total size. The header is followed
    by data specific to the ACE type. [Figure 5-7](chapter5.xhtml#fig5-7) shows this
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-7: The ACE structure</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The ACE header is common to all ACE types. This allows an application to safely
    access the header when processing an ACL. The ACE type value can then be used
    to determine the exact format of the ACE’s type-specific data. If the application
    doesn’t understand the ACE type, it can use the size field to skip the ACE entirely
    (we’ll discuss how types affect access checking in [Chapter 7](chapter7.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: '[Table 5-3](chapter5.xhtml#tab5-3) lists the supported ACE types, the minimum
    ACE revision they are valid in, and whether they are valid in the DACL or the
    SACL.'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-3:</samp> <samp class="SANS_Futura_Std_Book_11">Supported
    ACE Types, Minimum ACL Revisions, and Locations</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Minimum revision</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACL</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Grants access to a resource</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x1</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Denies access to a resource</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x2</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Audits access to a resource</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x3</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Alarms upon access to a resource; unused</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCompound</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">Compound</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access to a resource during impersonation</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x5</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access to a resource with an object type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x6</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Denies
    access to a resource with an object type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x7</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Audits
    access to a resource with an object type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Alarms
    upon access with an object type; unused</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x9</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access to a resource with a callback</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xA</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Denies
    access to a resource with a callback</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xB</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access with a callback and an object type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xC</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Denies
    access with a callback and an object type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xD</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Audits
    access with a callback</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xE</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Alarms
    upon access with a callback; unused</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xF</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Audits
    access with a callback and an object type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Alarms
    upon access with a callback and an object type; unused</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x11</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    a mandatory label</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x12</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    attributes for the resource</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x13</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    a central access policy ID for the resource</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrustLabel</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x14</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    a process trust label to limit resource access</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x15</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    an access filter for the resource</samp> |'
  prefs: []
  type: TYPE_TB
- en: While Windows officially supports all these ACE types, the kernel does not use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp> types. User applications
    can specify their own ACE types, but various APIs in user and kernel mode check
    for valid types and will generate an error if the ACE type isn’t known.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ACE’s type-specific data falls primarily into one of three formats: normal
    ACEs, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>; compound ACEs; and
    object ACEs. A *normal ACE* contains the following fields after the header, with
    the field’s size indicated in parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access mask (32-bit)    **The access mask to be granted or denied based on
    the ACE type'
  prefs: []
  type: TYPE_NORMAL
- en: '**SID (variable size)    **The SID, in the binary format described earlier
    in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: '*Compound ACEs* are for use during impersonation. These ACEs can grant access
    to both the impersonated caller and the process user at the same time. The only
    valid type for them is <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCompound</samp>.
    Even though the latest versions of Windows still support compound ACEs, they’re
    effectively undocumented and presumably deprecated. I’ve included them in this
    book for completeness. Their format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access mask (32-bit)    **The access mask to be granted'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compound ACE type (16-bit)    **Set to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    which means the ACE is used for impersonation'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reserved (16-bit)    **Always <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server SID (variable size)    **The server SID in binary format; matches
    the service user'
  prefs: []
  type: TYPE_NORMAL
- en: '**SID (variable size)    **The SID in a binary format; matches the impersonated
    user'
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft introduced the *object ACE* format to support access control for
    Active Directory Domain Services. Active Directory uses a 128-bit GUID to represent
    a directory service object type; the object ACE determines access for specific
    types of objects, such as computers or users. For example, using a single security
    descriptor, a directory could grant a SID the access needed to create one type
    of object but not another. The object ACE format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access mask (32-bit)    **The access mask to be granted or denied based on
    the ACE type'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flags (32-bit)    **Used to indicate which of the following GUIDs are present'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object type (16-byte)    **The <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp>
    GUID; present only if the flag in bit 0 is set'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inherited object type (16-byte)    **The inherited object GUID; present only
    if the flag in bit 1 is set'
  prefs: []
  type: TYPE_NORMAL
- en: '**SID (variable size)    **The SID in a binary format'
  prefs: []
  type: TYPE_NORMAL
- en: ACEs can be larger than their types’ defined structures, and they may use additional
    space to stored unstructured data. Most commonly, they use this unstructured data
    for the callback ACE types, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp>,
    which defines a conditional expression that determines whether the ACE should
    be active during an access check. We can inspect the data that would be generated
    from a conditional expression using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom
    -NtAceCondition</samp> PowerShell command, as shown in [Listing 5-5](chapter5.xhtml#Lis5-5).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-5: Parsing a conditional expression and displaying binary data'
  prefs: []
  type: TYPE_NORMAL
- en: We refer to these ACEs as *callback ACEs* because prior to Windows 8 an application
    needed to call the <samp class="SANS_TheSansMonoCd_W5Regular_11">AuthzAccessCheck</samp>
    API to handle them. The API accepted a callback function that would be invoked
    to determine whether to include a callback ACE in the access check. Since Windows
    8, the kernel access check has built-in support for conditional ACEs in the format
    shown in [Listing 5-5](chapter5.xhtml#Lis5-5), although user applications are
    free to specify their own formats and handle these ACEs manually.
  prefs: []
  type: TYPE_NORMAL
- en: The primary use of the ACE flags is to specify inheritance rules for the ACE.
    [Table 5-4](chapter5.xhtml#tab5-4) shows the defined ACE flags.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-4:</samp> <samp class="SANS_Futura_Std_Book_11">ACE
    Flags</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE flag</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectInherit</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE can be inherited by an object.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ContainerInherit</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x2</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE can be inherited by a container.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoPropagateInherit</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE’s inheritance flags are not propagated to children.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE is used only for inheritance and not for access checks.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10</samp>
    | <samp class="SANS_Futura_Std_Book_11">The ACE was inherited from a parent container.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Critical</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x20</samp>
    | <samp class="SANS_Futura_Std_Book_11">The ACE is critical and can’t be removed.
    Applies only to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    <samp class="SANS_Futura_Std_Book_11">ACEs.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x40</samp> | <samp class="SANS_Futura_Std_Book_11">An
    audit event should be generated for a successful access.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x80</samp> | <samp class="SANS_Futura_Std_Book_11">An
    audit event should be generated for a failed access.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TrustProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x40</samp> | <samp class="SANS_Futura_Std_Book_11">When
    used with an</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp>
    <samp class="SANS_Futura_Std_Book_11">ACE, this flag prevents modification.</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: The inheritance flags take up only the lower 5 bits, leaving the top 3 bits
    for ACE-specific flags.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Constructing and Manipulating Security
    Descriptors</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you’re familiar with the structure of a security descriptor, let’s
    look at how to construct and manipulate them using PowerShell. By far the most
    common reason to do this is to view a security descriptor’s contents so you can
    understand the access applied to a resource. Another important use case is if
    you need to construct a security descriptor to lock down a resource. The PowerShell
    module used in this book aims to make constructing and viewing security descriptors
    as simple as possible.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Creating a New Security
    Descriptor</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To create a new security descriptor, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    command. By default, it creates a new <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    object with no owner, group, DACL, or SACL set. You can use the command’s parameters
    to add these parts of the security descriptor, as shown in [Listing 5-6](chapter5.xhtml#Lis5-6).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-6: Creating a new security descriptor with a specified owner'
  prefs: []
  type: TYPE_NORMAL
- en: We first get the SID for the *World* group. When calling <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    to create a new security descriptor, we use this SID to specify its <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>. We also specify
    the name of the kernel object type this security descriptor will be associated
    with; this step makes some of the later commands easier to use. In this case,
    we’ll assume it’s a <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    object’s security descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: We then display the security descriptor, formatting the output as a table. As
    you can see, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp> field
    is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">Everyone</samp>. The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> value isn’t printed by default,
    as it’s not as important. Neither a DACL nor a SACL is currently present in the
    security descriptor, and there is no integrity level specified.
  prefs: []
  type: TYPE_NORMAL
- en: To add some ACEs, we can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-NtSecurityDescriptorAce</samp>
    command. For normal ACEs, we need to specify the ACE type, the SID, and the access
    mask. Optionally, we can also specify the ACE flags. The script in [Listing 5-7](chapter5.xhtml#Lis5-7)
    adds some ACEs to our new security descriptor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-7: Adding ACEs to the new security descriptor'
  prefs: []
  type: TYPE_NORMAL
- en: We start by getting the SID of the current user with <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    ❶. We use this SID to add a new <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE to the DACL ❷. We also add a <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    ACE for the anonymous user by specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Type</samp>
    parameter, followed by another <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE for the *Everyone* group. We then modify the SACL to add an audit ACE ❸ and
    set the mandatory label to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>
    integrity level ❹. To finish creating the security descriptor, we set the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp>
    control flags ❺.
  prefs: []
  type: TYPE_NORMAL
- en: We can now print details about the security descriptor we’ve just created. Displaying
    the security descriptor ❻ shows that the DACL now contains three ACEs and the
    two SACLs, and the integrity level is <samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>.
    We also display the control flags ❼ and the lists of ACEs in the DACL ❽ and SACL
    ❾.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Ordering the ACEs</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Because of how access checking works, there is a canonical ordering to the
    ACEs in an ACL. For example, all <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    ACEs should come before any <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACEs, as otherwise the system might grant access to a resource improperly, based
    on which ACEs come first. The SRM doesn’t enforce this canonical ordering; it
    trusts that any application has correctly ordered the ACEs before passing them
    for an access check. ACLs should order their ACEs according to the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: 1.  All <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>-type ACEs
    must come before <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    types.
  prefs: []
  type: TYPE_NORMAL
- en: 2.  The <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACEs must
    come before <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> object
    ACEs.
  prefs: []
  type: TYPE_NORMAL
- en: 3.  The <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACEs must
    come before <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> object
    ACEs.
  prefs: []
  type: TYPE_NORMAL
- en: 4.  All non-inherited ACEs must come before ACEs with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp>
    flag set.
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 5-7](chapter5.xhtml#Lis5-7), we added a <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    ACE to the DACL after we added an <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE, failing the first order rule. We can ensure the DACL is canonicalized by
    using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Edit-NtSecurity</samp>
    command with the <samp class="SANS_TheSansMonoCd_W5Regular_11">CanonicalizeDacl</samp>
    parameter. We can also test whether a DACL is already canonical by using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Test-NtSecurityDescriptor</samp> PowerShell
    command with the <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclCanonical</samp>
    parameter. [Listing 5-8](chapter5.xhtml#Lis5-8) illustrates the use of both commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-8: Canonicalizing the DACL'
  prefs: []
  type: TYPE_NORMAL
- en: If you compare the list of ACEs in [Listing 5-8](chapter5.xhtml#Lis5-8) with
    the list in [Listing 5-7](chapter5.xhtml#Lis5-7), you’ll notice that the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACE has been moved from
    the middle to the start of the ACL. This ensures that it will be processed before
    any <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACEs.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Formatting Security
    Descriptors</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can print the values in the security descriptor manually, through the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp> command, but this
    is time-consuming. Another problem with manual formatting is that the access masks
    won’t be decoded, so instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadData</samp>,
    for example, you’ll see <samp class="SANS_TheSansMonoCd_W5Regular_11">00000001</samp>.
    It would be nice to have a simple way of printing out the details of a security
    descriptor and formatting them based on the object type. That’s what <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    is for. You can pass it a security descriptor, and the command will print it to
    the console. [Listing 5-9](chapter5.xhtml#Lis5-9) provides an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-9: Displaying the security descriptor'
  prefs: []
  type: TYPE_NORMAL
- en: We pass the <samp class="SANS_TheSansMonoCd_W5Regular_11">ShowAll</samp> parameter
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    to ensure that it displays the entire contents of the security descriptor; by
    default it won’t output the SACL or less common ACEs, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>.
    Note that the output kernel object type matches the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type we specified when creating the security descriptor in [Listing 5-6](chapter5.xhtml#Lis5-6).
    Specifying the kernel object type allows the formatter to print the decoded access
    mask for the type rather than a generic hex value.
  prefs: []
  type: TYPE_NORMAL
- en: The next line in the output shows the current control flags. These are calculated
    on the fly based on the current state of the security descriptor; later, we’ll
    discuss how to change these control flags to change the security descriptor’s
    behavior. The control flags are followed by the owner and group SIDs and the DACL,
    which account for most of the output. Any DACL-specific flags appear next to the
    header; in this case, these indicate that we set the <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>
    flag. Next, the output lists each of the ACEs in the ACL in order, starting with
    the type of ACE. Because the command knows the object type, it prints the decoded
    access mask for the type as well as the original access mask in hexadecimal.
  prefs: []
  type: TYPE_NORMAL
- en: Next is the SACL, which shows our single audit ACE as well as the <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp>
    flag. The final component shown is the mandatory label. The access mask for a
    mandatory label is the mandatory policy, and it’s decoded differently from the
    rest of the ACEs that use the type-specific access rights. The mandatory policy
    can be set to one or more of the bit flags shown in [Table 5-5](chapter5.xhtml#tab5-5).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-5:</samp> <samp class="SANS_Futura_Std_Book_11">Mandatory
    Policy Values</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoWriteUp</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    | <samp class="SANS_Futura_Std_Book_11">A lower integrity level caller can’t write
    to this resource.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoReadUp</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    | <samp class="SANS_Futura_Std_Book_11">A lower integrity level caller can’t read
    this resource.</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoExecuteUp</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp> | <samp class="SANS_Futura_Std_Book_11">A
    lower integrity level caller can’t execute this resource.</samp> |'
  prefs: []
  type: TYPE_TB
- en: By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    can be a bit verbose. To shorten its output, specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">Summary</samp>
    parameter, which will remove as much data as possible while keeping the important
    information. [Listing 5-10](chapter5.xhtml#Lis5-10) demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-10: Displaying the security descriptor in summary format'
  prefs: []
  type: TYPE_NORMAL
- en: I mentioned in [Chapter 2](chapter2.xhtml) that for ease of use the PowerShell
    module used in this book uses simple names for most common flags, but that you
    can display the full SDK names if you prefer (for example, to compare the output
    with native code). To display SDK names when viewing the contents of a security
    descriptor with <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>,
    use the <samp class="SANS_TheSansMonoCd_W5Regular_11">SDKName</samp> property,
    as shown in [Listing 5-11](chapter5.xhtml#Lis5-11).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-11: Formatting a security descriptor with SDK names'
  prefs: []
  type: TYPE_NORMAL
- en: One quirk of <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> objects
    is that their access masks have two naming conventions, one for files and one
    for directories. You can request that <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    print the directory version of the access mask by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    parameter, or more generally, by setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    property of the security descriptor object to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>.
    [Listing 5-12](chapter5.xhtml#Lis5-12) shows the impact of setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    parameter on the output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-12: Formatting the security descriptor as a container'
  prefs: []
  type: TYPE_NORMAL
- en: Note how the output line changes from <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadData|WriteData</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">ListDirectory|AddFile</samp>
    ❶ when we format it as a container. The <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type is the only object type with this behavior in Windows. This is important
    to security, as you could easily misinterpret <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    access rights if you formatted the security descriptor for a directory as a file,
    or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'If a GUI is more your thing, you can start a viewer using the following <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Show-NtSecurityDescriptor</samp> command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running the command should open the dialog shown in [Figure 5-8](chapter5.xhtml#fig5-8).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-8: A GUI displaying
    the security descriptor</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The dialog summarizes the security descriptor’s important data. At the top are
    the owner and group SIDs resolved into names, as well as the security descriptor’s
    integrity level and mandatory policy. These match the values we specified when
    creating the security descriptor. In the middle is the list of ACEs in the DACL
    (left) or SACL (right), depending on which tab you select, with the ACL flags
    at the top. Each entry in the list includes the type of ACE, the SID, the access
    mask in generic form, and the ACE flags. At the bottom is the decoded access.
    The list populates when you select an ACE in the ACL list.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Converting to and
    from a Relative Security Descriptor</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can convert a security descriptor object to a byte array in the relative
    format using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSecurityDescriptor</samp>
    command. We can then print its contents to see what the underlying structure really
    is, as shown in [Listing 5-13](chapter5.xhtml#Lis5-13).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-13: Converting an absolute security descriptor to relative format
    and displaying its bytes'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can convert the byte array back to a security descriptor object using <samp
    class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp> and the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Byte</samp> parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As an exercise, I’ll leave it to you to pick apart the hex output to find the
    various structures of the security descriptor based on the descriptions provided
    in this chapter. To get you started, [Figure 5-9](chapter5.xhtml#fig5-9) highlights
    the major structures.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure5-9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-9: An outline of the
    major structures in the relative security descriptor hex output</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to refer to the layout of the ACL and SID structures to manually
    decode the rest.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Security Descriptor Definition Language</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 2](chapter2.xhtml), we discussed the basics of the Security Descriptor
    Definition Language (SDDL) format for representing SIDs. The SDDL format can represent
    the entire security descriptor too. As the SDDL version of a security descriptor
    uses ASCII text, it’s somewhat human readable, and unlike the binary data shown
    in [Listing 5-13](chapter5.xhtml#Lis5-13), it can be easily copied. Because it’s
    common to see SDDL strings used throughout Windows, let’s look at how to represent
    a security descriptor in SDDL and how you can read it.
  prefs: []
  type: TYPE_NORMAL
- en: You can convert a security descriptor to SDDL format by specifying the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ToSddl</samp> parameter to <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>.
    This is demonstrated in [Listing 5-14](chapter5.xhtml#Lis5-14), where we pass
    the security descriptor we built in the previous section. You can also create
    a security descriptor from an SDDL string using <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">ToSddl</samp> parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-14: Converting a security descriptor to SDDL'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SDDL version of the security descriptor contains four optional components.
    You can identify the start of each component by looking for the following prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">O:  </samp>Owner SID
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">G:  </samp>Group SID
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">D:  </samp>DACL
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">S:  </samp>SACL
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 5-15](chapter5.xhtml#Lis5-15), we split the output from [Listing
    5-14](chapter5.xhtml#Lis5-14) into its components to make it easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-15: Splitting up the SDDL components'
  prefs: []
  type: TYPE_NORMAL
- en: The first two lines represent the owner and group SIDs in SDDL format. You might
    notice that these don’t look like the SDDL SIDs we’re used to seeing, as they
    don’t start with <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-</samp>. That’s
    because these strings are two-character aliases that Windows uses for well-known
    SIDs to reduce the size of an SDDL string. For example, the owner string is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">WD</samp>, which we could convert back
    to the full SID using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    ([Listing 5-16](chapter5.xhtml#Lis5-16)).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-16: Converting an alias to a name and SID'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp>
    alias represents the *Everyone* group. [Table 5-6](chapter5.xhtml#tab5-6) shows
    the aliases for a few well-known SIDs. You can find a more comprehensive list
    of all supported SDDL aliases in [Appendix B](appendix-B.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-6:</samp> <samp class="SANS_Futura_Std_Book_11">Well-Known
    SIDs and Their Aliases</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">SID alias</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">SDDL SID</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AU</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\Authenticated Users</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-11</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">BA</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">BUILTIN\Administrators</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-32-544</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">IU</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\INTERACTIVE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-4</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SY</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\SYSTEM</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-18</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Everyone</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-1-0</samp> |'
  prefs: []
  type: TYPE_TB
- en: If a SID has no alias, <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    will emit the SID in SDDL format, as shown in [Listing 5-15](chapter5.xhtml#Lis5-15).
    Even SIDs without aliases can have names defined by LSASS. For example, the SID
    in [Listing 5-15](chapter5.xhtml#Lis5-15) belongs to the current user, as shown
    in [Listing 5-17](chapter5.xhtml#Lis5-17).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-17: Looking up the name of the SID'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next in [Listing 5-15](chapter5.xhtml#Lis5-15) is the representation of the
    DACL. After the <samp class="SANS_TheSansMonoCd_W5Regular_11">D:</samp> prefix,
    the ACL in SDDL format looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The ACL flags are optional; the DACL’s are set to <samp class="SANS_TheSansMonoCd_W5Regular_11">AI</samp>
    and the SACL’s are set to <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp>.
    These values map to security descriptor control flags and can be one or more of
    the strings in [Table 5-7](chapter5.xhtml#tab5-7).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-7:</samp> <samp class="SANS_Futura_Std_Book_11">ACL
    Flag Strings Mapped to Security Descriptor Control Flags</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACL flag string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">DACL
    control flag</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">SACL control flag</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclProtected</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInherited</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInheritReq</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInheritReq</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'I’ll describe the uses of these three control flags in [Chapter 6](chapter6.xhtml).
    Each ACE is enclosed in parentheses and is made up of multiple strings separated
    by semicolons, following this general format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Type</samp> is a short string
    that maps to an ACE type. [Table 5-8](chapter5.xhtml#tab5-8) shows these mappings.
    Note that SDDL format does not support certain ACE types, so they’re omitted from
    the table.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-8:</samp> <samp class="SANS_Futura_Std_Book_11">Mappings
    of Type Strings to ACE Types</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE type string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACE
    type</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">A</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">D</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedObject</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmObject</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallback</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ZA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallbackObject</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ML</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrustLabel</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: The next component is <samp class="SANS_TheSansMonoCd_W5Regular_11">Flags</samp>,
    which represents the ACE flags. The audit entry in the SACL from [Listing 5-15](chapter5.xhtml#Lis5-15)
    shows the flag string <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp>,
    which represents <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp>.
    [Table 5-9](chapter5.xhtml#tab5-9) shows other mappings.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-9:</samp> <samp class="SANS_Futura_Std_Book_11">Mappings
    of Flag Strings to ACE Flags</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE flag string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACE
    flag</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectInherit</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ContainerInherit</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NoPropagateInherit</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">IO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Critical</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TrustProtected</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: Next is <samp class="SANS_TheSansMonoCd_W5Regular_11">Access</samp>, which represents
    the access mask in the ACE. This can be a number in hexadecimal (<samp class="SANS_TheSansMonoCd_W5Regular_11">0x1234</samp>),
    octal (<samp class="SANS_TheSansMonoCd_W5Regular_11">011064</samp>), or decimal
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">4660</samp>) format, or a list
    of short access strings. If no string is specified, then an empty access mask
    is used. [Table 5-10](chapter5.xhtml#tab5-10) shows the access strings.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-10:</samp> <samp class="SANS_Futura_Std_Book_11">Mappings
    of Access Strings to Access Masks</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Access string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access mask</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    Read</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x80000000</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x40000000</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    Execute</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x20000000</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    All</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10000000</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Write
    Owner</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00080000</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Write
    DAC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00040000</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Read
    Control</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020000</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Delete</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00010000</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Control
    Access</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000100</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">List
    Object</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000080</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Delete
    Tree</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000040</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Write
    Property</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000020</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Read
    Property</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000010</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Self
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000008</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">List
    Children</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Delete
    Child</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Create
    Child</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: Note that the available access strings do not cover the entire access mask range.
    This is because SDDL was designed to represent the masks for directory service
    objects, which don’t define access mask values outside of a limited range. This
    is also why the names of the rights are slightly confusing; for example, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Delete Child</samp> does not necessarily
    map to an arbitrary object type’s idea of deleting a child, and you can see in
    [Listing 5-15](chapter5.xhtml#Lis5-15) that the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type’s specific access maps to directory service object access, even though it
    has nothing to do with Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: To better support other types, the SDDL format provides access strings for common
    file and registry key access masks, as shown in [Table 5-11](chapter5.xhtml#tab5-11).
    If the available access strings can’t represent the entire mask, the only option
    is to represent it as a number string, typically in hexadecimal format.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-11:</samp> <samp class="SANS_Futura_Std_Book_11">Access
    Strings for File and Registry Key Types</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Access string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access mask</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    All Access</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x001F01FF</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    Execute</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x001200A0</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00120116</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    Read</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00120089</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    All Access</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x000F003F</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Read</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020019</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Execute</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020019</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020006</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: For the <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritedObjectType</samp> components,
    used with object ACEs, SDDL uses a string format for the GUIDs. The GUIDs can
    be any value. For example, [Table 5-12](chapter5.xhtml#tab5-12) contains a few
    well-known ones used by Active Directory.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-12:</samp> <samp class="SANS_Futura_Std_Book_11">Well-Known</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp> <samp class="SANS_Futura_Std_Book_11">GUIDs
    Used in Active Directory</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">GUID</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Directory
    object</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">19195a5a-6da0-11d0-afd3-00c04fd930c9</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967a86-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Computer</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967aba-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967a9c-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'Here is an example ACE string for an <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp>
    ACE with the <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp> set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: After the <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritedObjectType</samp>
    component in the ACE is the SID. As detailed earlier in this chapter, this can
    be a short alias if it’s a well-known SID, or the full SDDL format if not.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final component, which is optional for most ACE types, you can specify
    a conditional expression if using a callback ACE or a security attribute if using
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp> ACE.
    The conditional expression defines a Boolean expression that compares the values
    of a token’s security attribute. When evaluated, the result of the expression
    should be true or false. We saw a simple example in [Listing 5-5](chapter5.xhtml#Lis5-5):
    <samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"XYZ"</samp>, which compares the
    value of the security attribute <samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp>
    with the string value <samp class="SANS_TheSansMonoCd_W5Regular_11">XYZ</samp>
    and evaluates to true if they’re equal. The SDDL expression syntax has four different
    attribute name formats for the security attribute you want to refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple    **For local security attributes; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '**Device    **For device claims; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">@Device.ABC</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '**User    **For user claims; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">@User.XYZ</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource    **For resource attributes; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">@Resource.QRS</samp>'
  prefs: []
  type: TYPE_NORMAL
- en: The comparison values in the conditional expressions can accept several different
    types, as well. When converting from SDDL to a security descriptor, the condition
    expression will be parsed, but because the type of the security attribute won’t
    be known at this time, no validation of the value’s type can occur. [Table 5-13](chapter5.xhtml#tab5-13)
    shows examples for each conditional expression type.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-13:</samp> <samp class="SANS_Futura_Std_Book_11">Example
    Values for Different Conditional Expression Types</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Examples</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Number</samp> | <samp class="SANS_Futura_Std_Book_11">Decimal:</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-100</samp><samp class="SANS_Futura_Std_Book_11">;
    octal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp class="SANS_Futura_Std_Book_11">;
    hexadecimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">String</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"ThisIsAString"</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Fully qualified binary name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">{"O=MICROSOFT CORPORATION</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">L=REDMOND</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">S=WASHINGTON",1004}</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">SID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SID(BA)</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">SID(S-1-0-0)</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_Futura_Std_Book_11">Octet string</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">#0011223344</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: The syntax then defines operators to evaluate an expression, starting with the
    unary operators in [Table 5-14](chapter5.xhtml#tab5-14).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-14:</samp> <samp class="SANS_Futura_Std_Book_11">Unary
    Operators for Conditional Expressions</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Exists</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp class="SANS_Futura_Std_Book_11">exists</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Exists</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Exists</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">Checks
    whether the token groups contain all SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the token device groups
    contain all SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Device_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the token groups contain
    any SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of_Any</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the token device groups
    contain any SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Device_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of_Any</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">!(</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp> | <samp class="SANS_Futura_Std_Book_11">The
    logical NOT of an expression</samp> |'
  prefs: []
  type: TYPE_TB
- en: In [Table 5-14](chapter5.xhtml#tab5-14), <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    is the name of an attribute to test, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    is a list of SID values enclosed in braces <samp class="SANS_TheSansMonoCd_W5Regular_11">{}</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> is another
    conditional subexpression. [Table 5-15](chapter5.xhtml#tab5-15) shows the infix
    operators the syntax defines.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-15:</samp> <samp class="SANS_Futura_Std_Book_11">Infix
    Operators for Conditional Expressions</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Contains</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    contains the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Contains</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Contains</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Any_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUELIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">Checks
    whether the security attribute contains any of the values</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Any_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUELIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">Inverse
    of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Any_of</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    equals the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">!=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    does not equal the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is less than the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is less than or equal to the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">></samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is greater than the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">>=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is greater than or equal to the value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">&&</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>
    | <samp class="SANS_Futura_Std_Book_11">The logical AND between two expressions</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">&#124;&#124;</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>
    | <samp class="SANS_Futura_Std_Book_11">The logical OR between two expressions</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: 'In [Table 5-15](chapter5.xhtml#tab5-15), <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    can be either a single value from [Table 5-13](chapter5.xhtml#tab5-13) or a list
    of values enclosed in braces. The <samp class="SANS_TheSansMonoCd_W5Regular_11">Any_of</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Any_of</samp> operators
    work only on lists, and the conditional expression must always be placed in parentheses
    in the SDDL ACE. For example, if you wanted to use the conditional expression
    shown back in [Listing 5-5](chapter5.xhtml#Lis5-5) with an <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessCallback</samp>
    ACE, the ACE string would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The final component represents a security attribute for the <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    ACE. Its general format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrName</samp> value is the
    name of the security attribute, <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrFlags</samp>
    is a hexadecimal number that represents the security attribute flags, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">AttrValue</samp> is one or more values
    specific to the <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrType</samp>,
    separated by commas. The <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrType</samp>
    is a short string that indicates the type of data contained in the security attribute.
    [Table 5-16](chapter5.xhtml#tab5-16) shows the defined strings, with examples.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-16:</samp> <samp class="SANS_Futura_Std_Book_11">Security
    Attribute SDDL Type Strings</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Attribute type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Type
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Example value</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Int64</samp>
    | <samp class="SANS_Futura_Std_Book_11">Decimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">-100</samp><samp
    class="SANS_Futura_Std_Book_11">; octal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp
    class="SANS_Futura_Std_Book_11">; hexadecimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">UInt64</samp>
    | <samp class="SANS_Futura_Std_Book_11">Decimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp
    class="SANS_Futura_Std_Book_11">; octal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp
    class="SANS_Futura_Std_Book_11">; hexadecimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">String</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"XYZ"</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SID</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">BA</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-0-0</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TB</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Boolean</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">OctetString</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">#0011223344</samp> |'
  prefs: []
  type: TYPE_TB
- en: 'To give an example, the following SDDL string represents a <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    ACE with the name <samp class="SANS_TheSansMonoCd_W5Regular_11">Classification</samp>.
    It contains two string values, <samp class="SANS_TheSansMonoCd_W5Regular_11">TopSecret</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">MostSecret</samp>, and has the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">CaseSensitive</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">NonInheritable</samp>
    flags set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The last field in [Listing 5-15](chapter5.xhtml#Lis5-15) to define is the SACL.
    The structure is the same as that described for the DACL, although the types of
    ACEs supported differ. If you try to use a type that is not allowed in the specific
    ACL, parsing the string will fail. In the SACL example in [Listing 5-15](chapter5.xhtml#Lis5-15),
    the only ACE is the mandatory label. The mandatory label ACE has its own access
    strings used to represent the mandatory policy, as shown in [Table 5-17](chapter5.xhtml#tab5-17).
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-17:</samp> <samp class="SANS_Futura_Std_Book_11">Mandatory
    Label Access Strings</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Access string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access mask</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">No
    Execute Up</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">No
    Read Up</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">No
    Write Up</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: The SID represents the integrity level of the mandatory label; again, special
    SID aliases are defined. Anything outside the list shown in [Table 5-18](chapter5.xhtml#tab5-18)
    needs to be represented as a full SID.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-18:</samp> <samp class="SANS_Futura_Std_Book_11">Mandatory
    Label Integrity Level SIDs</samp>
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">SID alias</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">SDDL SID</samp> |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-4096</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ME</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Medium</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-8192</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MediumPlus</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-8448</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">HI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">High</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-12288</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-16384</samp>
    |'
  prefs: []
  type: TYPE_TB
- en: The SDDL format doesn’t preserve all information you can store in a security
    descriptor. For example, the SDDL format can’t represent the <samp class="SANS_TheSansMonoCd_W5Regular_11">OwnerDefaulted</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">GroupDefaulted</samp> control
    flag, so these are discarded. SDDL also doesn’t support some ACE types, so I omitted
    those from [Table 5-8](chapter5.xhtml#tab5-8).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, if an unsupported ACE type is encountered while converting
    a security descriptor to SDDL, the conversion process will fail. To get around
    this problem, the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSecurityDescriptor</samp>
    PowerShell command can convert a security descriptor in relative format to base64,
    as shown in [Listing 5-18](chapter5.xhtml#Lis5-18). Using base64 preserves the
    entire security descriptor and allows it to be copied easily.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-18: Converting a security descriptor to a base64 representation'
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the security descriptor, you can pass <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Base64</samp> parameter.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Worked Examples</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s finish this chapter with some worked examples that use the commands you’ve
    learned about here.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Manually Parsing
    a Binary SID</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The PowerShell module comes with commands you can use to parse SIDs that are
    structured in various forms. One of those forms is a raw byte array. You can convert
    an existing SID to a byte array using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSid</samp>
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also convert the byte array back to a SID using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Byte</samp>
    parameter to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    command, as shown here. The module will parse the byte array and return the SID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Although PowerShell can perform these conversions for you, you’ll find it valuable
    to understand how the data is structured at a low level. For example, you might
    identify code that parses SIDs incorrectly, which could lead to memory corruption;
    through this discovery, you might find a security vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to learn how to parse a binary structure is to write a parser,
    as we do in [Listing 5-19](chapter5.xhtml#Lis5-19).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-19: Manually parsing a binary SID'
  prefs: []
  type: TYPE_NORMAL
- en: For demonstration purposes, we start by creating an arbitrary SID and converting
    it to a byte array ❶. Typically, though, you’ll receive a SID to parse in some
    other way, such as from the memory of a process. We also print the SID as hex.
    (If you refer to the SID structure shown in [Figure 5-1](chapter5.xhtml#fig5-1),
    you might already be able to pick out its various components.)
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a <samp class="SANS_TheSansMonoCd_W5Regular_11">BinaryReader</samp>
    to parse the byte array in a structured form ❷. Using the reader, we first check
    whether the revision value is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    ❸; if it isn’t, we throw an error. Next in the structure is the RID count as a
    byte ❹, followed by the 6-byte security authority ❺. The <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadBytes</samp>
    method can return a short reader, so you’ll want to check that you read all six
    bytes.
  prefs: []
  type: TYPE_NORMAL
- en: We now enter a loop to read the RIDs from the binary structure and append them
    to an array ❻. Next, using the security authority and the RIDs, we can run <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp> to construct a new SID
    object ❼ and verify that the new SID matches the one we started with.
  prefs: []
  type: TYPE_NORMAL
- en: This listing gives you an example of how to manually parse a SID (or, in fact,
    any binary structure) using PowerShell. If you’re adventurous, you could implement
    your own parser for the binary security descriptor formats, but that’s outside
    the scope of this book. It’s simpler to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    command to do the parsing for you.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Enumerating SIDs</samp>
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LSASS service does not provide a publicly exposed method for querying every
    SID-to-name mapping it knows about. While the official Microsoft documentation
    provides a list of known SIDs, these aren’t always up to date and won’t include
    the SIDs specific to a computer or enterprise network. However, we can try to
    enumerate the mappings using brute force. [Listing 5-20](chapter5.xhtml#Lis5-20)
    defines a function, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-AccountSids</samp>,
    to brute-force a list of the SIDs for which LSASS has a name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Listing 5-20: Brute-forcing known SIDs'
  prefs: []
  type: TYPE_NORMAL
- en: The function accepts a base SID and the range of RID values to test ❶. It then
    creates each SID in the list and queries for its name. If the name’s source is
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Account</samp>, which indicates
    the name was retrieved from LSASS, we output the SID’s details ❷.
  prefs: []
  type: TYPE_NORMAL
- en: To test the function, we call it with the base SID, which contains the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> authority but no RIDs ❸. We
    get the list of retrieved names and SIDs from LSASS. Notice that the SIDs in the
    output are not domain SIDs, as you might expect, but <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnownGroup</samp>
    SIDs. For our purposes, the distinction between <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnownGroup</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Alias</samp>
    is not important; they’re all groups.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we try brute-forcing the *BUILTIN* domain SID ❹. In this case, we’ve changed
    the RID range based on our preexisting knowledge of the valid range, but you’re
    welcome to try any other range you like. Note that you could automate the search
    by inspecting the <samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>
    property in the returned objects and calling <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-AccountSids</samp>
    when its value is <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp>.
    I leave this as an exercise for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wrapping Up</samp>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We started this chapter by delving into the structure of the security descriptor.
    We detailed its binary structures, such as SIDs, and looked at access control
    lists and the access control entries that make up the discretionary and system
    ACLs. We then discussed the differences between absolute and relative security
    descriptors and why the two formats exist.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explored the use of the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-NtSecurityDescriptorAce</samp>
    commands to create and modify a security descriptor so that it contains whatever
    entries we require. We also saw how to display security descriptors in a convenient
    form using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we covered the SDDL format used for representing security descriptors.
    We discussed how to represent the various types of security descriptor values,
    such as ACEs, and how you can write your own. Some tasks we haven’t yet covered
    are how to query a security descriptor from a kernel object and how to assign
    a new one. We’ll get to these topics in the next chapter.
  prefs: []
  type: TYPE_NORMAL
