- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SECURITY
    DESCRIPTORS</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">5</samp> <samp class="SANS_Dogma_OT_Bold_B_11">安全描述符</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: In the preceding chapter, we discussed the security access token, which describes
    the user’s identity to the SRM. In this chapter, you’ll learn how *security descriptors*
    define a resource’s security. A security descriptor does several things. It specifies
    the owner of a resource, allowing the SRM to grant specific rights to users who
    are accessing their own data. It also contains the *discretionary access control
    (DAC)* and *mandatory access control (MAC)*, which grant or deny access to users
    and groups. Finally, it
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了安全访问令牌，它描述了用户的身份给 SRM。在本章中，你将学习*安全描述符*如何定义资源的安全性。安全描述符执行几个功能。它指定资源的所有者，允许
    SRM 授予访问自己数据的用户特定权限。它还包含*自主访问控制 (DAC)* 和 *强制访问控制 (MAC)*，它们授予或拒绝用户和组的访问权限。最后，它
- en: can contain entries that generate audit events. Almost every kernel resource
    has a security descriptor, and user-mode applications can implement their own
    access control through security descriptors without needing to create a kernel
    resource.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以包含生成审计事件的条目。几乎每个内核资源都有一个安全描述符，用户模式的应用程序可以通过安全描述符实现自己的访问控制，而无需创建内核资源。
- en: Understanding the structure of security descriptors is crucial to understanding
    the security of Windows, as they’re used to secure every kernel object and many
    user-mode components, such as services. You’ll even find security descriptors
    used across network boundaries to secure remote resources. While developing a
    Windows application or researching Windows security, you’ll inevitably have to
    inspect or create a security descriptor, so having a clear understanding of what
    a security descriptor contains will save you a lot of time. To help with this,
    I’ll start by describing the structure of a security descriptor in more detail.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 理解安全描述符的结构对于理解 Windows 的安全性至关重要，因为它们用于保护每个内核对象和许多用户模式组件，如服务。你甚至会发现安全描述符被用于跨网络边界保护远程资源。在开发
    Windows 应用程序或研究 Windows 安全性时，你不可避免地需要检查或创建安全描述符，因此清楚地理解安全描述符的内容将为你节省大量时间。为了帮助理解这一点，我将从更详细地描述安全描述符的结构开始。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Structure of a Security Descriptor</samp>
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">安全描述符的结构</samp>
- en: 'Windows stores security descriptors as binary structures on disk or in memory.
    While you’ll rarely have to manually parse these structures, it’s worth understanding
    what they contain. A security descriptor consists of the following seven components:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 将安全描述符作为二进制结构存储在磁盘或内存中。虽然你很少需要手动解析这些结构，但了解它们的内容是有价值的。一个安全描述符由以下七个组成部分构成：
- en: The revision
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修订版本
- en: Optional resource manager flags
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的资源管理器标志
- en: Control flags
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制标志
- en: An optional owner SID
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的所有者 SID
- en: An optional group SID
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的组 SID
- en: An optional discretionary access control list
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的自主访问控制列表
- en: An optional system access control list
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的系统访问控制列表
- en: Let’s look at each of these in turn. The first component of any security descriptor
    is the *revision*, which indicates the version of the security descriptor’s binary
    format. There is only one version, so the revision is always set to the value
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>. Next is an optional set
    of flags for use by a resource manager. You’ll almost never encounter these flags
    being set; however, they are used by Active Directory, so we’ll talk more about
    them in [Chapter 11](chapter11.xhtml).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们依次看看这些内容。任何安全描述符的第一个组成部分是*修订版本*，它表示安全描述符的二进制格式版本。只有一个版本，因此修订版本始终设置为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">1</samp>。接下来是一个可选的标志集，供资源管理器使用。你几乎不会遇到这些标志被设置的情况；然而，它们被活动目录（Active
    Directory）使用，所以我们将在[第11章](chapter11.xhtml)中详细讨论它们。
- en: 'The resource manager flags are followed by a set of *control flags*. These
    have three uses: they define which optional components of the security descriptor
    are valid, how the security descriptors and components were created, and how to
    process the security descriptor when applying it to an object. [Table 5-1](chapter5.xhtml#tab5-1)
    shows the list of valid flags and their descriptions. We’ll cover many of the
    terms in this table, such as inheritance, in more detail in the following chapter.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 资源管理器标志后面跟着一组 *控制标志*。这些标志有三个用途：定义安全描述符中哪些可选组件是有效的，安全描述符及其组件是如何创建的，以及在将安全描述符应用于对象时如何处理它。[表
    5-1](chapter5.xhtml#tab5-1) 显示了有效标志及其描述。我们将在下一章中更详细地介绍此表中的许多术语，如继承。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-1:</samp> <samp class="SANS_Futura_Std_Book_11">Valid
    Control Flags</samp>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-1：</samp> <samp class="SANS_Futura_Std_Book_11">有效的控制标志</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">值</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OwnerDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0001</samp> | <samp class="SANS_Futura_Std_Book_11">The
    owner SID was assigned through a default method.</samp> |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OwnerDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0001</samp> | <samp class="SANS_Futura_Std_Book_11">通过默认方法分配了所有者
    SID。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GroupDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0002</samp> | <samp class="SANS_Futura_Std_Book_11">The
    group SID was assigned through a default method.</samp> |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GroupDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0002</samp> | <samp class="SANS_Futura_Std_Book_11">通过默认方法分配了组
    SID。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclPresent</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0004</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL is present in the security descriptor.</samp> |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclPresent</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0004</samp> | <samp class="SANS_Futura_Std_Book_11">DACL
    存在于安全描述符中。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0008</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL was assigned through a default method.</samp> |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0008</samp> | <samp class="SANS_Futura_Std_Book_11">通过默认方法分配了
    DACL。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclPresent</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0010</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL is present in the security descriptor.</samp> |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclPresent</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0010</samp> | <samp class="SANS_Futura_Std_Book_11">SACL
    存在于安全描述符中。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0020</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL was assigned through a default method.</samp> |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclDefaulted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0020</samp> | <samp class="SANS_Futura_Std_Book_11">通过默认方法分配了
    SACL。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclUntrusted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0040</samp> | <samp class="SANS_Futura_Std_Book_11">When
    combined with</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">ServerSecurity</samp><samp
    class="SANS_Futura_Std_Book_11">, the DACL is untrusted.</samp> |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclUntrusted</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0040</samp> | <samp class="SANS_Futura_Std_Book_11">与</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ServerSecurity</samp><samp class="SANS_Futura_Std_Book_11">组合时，DACL
    被认为是不可信的。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ServerSecurity</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0080</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL is replaced with a server ACL (more on the use of this in [Chapter 6](chapter6.xhtml)).</samp>
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ServerSecurity</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x0080</samp> | <samp class="SANS_Futura_Std_Book_11">DACL
    被替换为服务器 ACL（关于这方面的更多内容请参见 [第 6 章](chapter6.xhtml)）。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInheritReq</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0100</samp> | <samp class="SANS_Futura_Std_Book_11">DACL
    auto-inheritance for child objects is requested.</samp> |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInheritReq</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0100</samp> | <samp class="SANS_Futura_Std_Book_11">请求对子对象的
    DACL 自动继承。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInheritReq</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0200</samp> | <samp class="SANS_Futura_Std_Book_11">SACL
    auto-inheritance for child objects is requested.</samp> |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInheritReq</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0200</samp> | <samp class="SANS_Futura_Std_Book_11">请求对子对象的
    SACL 自动继承。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0400</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL supports auto-inheritance.</samp> |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0400</samp> | <samp class="SANS_Futura_Std_Book_11">DACL
    支持自动继承。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInherited</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0800</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL supports auto-inheritance.</samp> |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInherited</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0800</samp> | <samp class="SANS_Futura_Std_Book_11">SACL
    支持自动继承。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    DACL is protected from inheritance.</samp> |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1000</samp> | <samp class="SANS_Futura_Std_Book_11">DACL
    受到继承保护。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x2000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    SACL is protected from inheritance.</samp> |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x2000</samp> | <samp class="SANS_Futura_Std_Book_11">SACL
    受到继承保护。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RmControlValid</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x4000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    resource manager flags are valid.</samp> |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RmControlValid</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x4000</samp> | <samp class="SANS_Futura_Std_Book_11">资源管理器标志有效。</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8000</samp> | <samp class="SANS_Futura_Std_Book_11">The
    security descriptor is in a relative format.</samp> |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8000</samp> | <samp class="SANS_Futura_Std_Book_11">安全描述符为相对格式。</samp>
    |'
- en: After the control flags comes the *owner SID*, which represents the owner of
    the resource. This is typically the user’s SID; however, ownership can also be
    assigned to a group, such as the *Administrators* group. Being the owner of a
    resource grants you certain privileges, including the ability to modify the resource’s
    security descriptor. By ensuring the owner has this capability, the system prevents
    a user from locking themselves out of their own resources.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 控制标志之后是 *所有者 SID*，它表示资源的所有者。通常这是用户的 SID；然而，所有权也可以分配给某个组，例如 *Administrators*
    组。成为资源的所有者会授予你某些特权，包括修改资源安全描述符的能力。通过确保所有者具有此能力，系统防止用户将自己锁定在自己的资源之外。
- en: The *group SID* is like the owner SID, but it’s rarely used. It exists primarily
    to ensure POSIX compatibility (a concern in the days when Windows still had a
    POSIX subsystem) and plays no part in access control for Windows applications.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*组 SID* 类似于所有者 SID，但很少使用。它主要存在是为了确保 POSIX 兼容性（这是在 Windows 仍然拥有 POSIX 子系统的时代所关注的问题），并且在
    Windows 应用程序的访问控制中没有作用。'
- en: 'The most important part of the security descriptor is the *discretionary access
    control list (DACL)*. The DACL contains a list of *access control entries (ACEs)*,
    which define what access a SID is given. It’s considered *discretionary* because
    the user or system administrator can choose the level of access granted. There
    are many different types of ACEs. We’ll discuss these further in “Access Control
    List Headers and Entries” on page 151; for now, you just need to know that the
    basic information in each ACE includes the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '安全描述符中最重要的部分是*自主访问控制列表（DACL）*。DACL包含一个*访问控制条目（ACE）*列表，用于定义分配给SID的访问权限。它被认为是*自主的*，因为用户或系统管理员可以选择授予的访问权限级别。有许多不同类型的ACE。我们将在“访问控制列表头和条目”第151页进一步讨论这些内容；现在，你只需要知道每个ACE中的基本信息包括以下内容：  '
- en: The SID of the user or group to which the ACE applies
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '适用于该ACE的用户或组的SID  '
- en: The type of ACE
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ACE的类型  '
- en: The access mask to which the SID will be allowed or denied access
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SID允许或拒绝访问的访问掩码  '
- en: The final component of the security descriptor is the *security access control
    list (SACL)*, which stores auditing rules. Like the DACL, it contains a list of
    ACEs, but rather than determining access based on whether a defined SID matches
    the current user’s, it determines the rules for generating audit events when the
    resource is accessed. Since Windows Vista, the SACL has also been the preferred
    location in which to store additional non-auditing ACEs, such as the resource’s
    mandatory label.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '安全描述符的最后一个组成部分是*安全访问控制列表（SACL）*，它存储审计规则。与DACL类似，SACL包含一个ACE列表，但它不是根据定义的SID是否与当前用户匹配来确定访问权限，而是确定在资源访问时生成审计事件的规则。自Windows
    Vista以来，SACL也成为存储附加非审计ACE的首选位置，例如资源的强制标签。  '
- en: Two final elements to point out in the DACL and SACL are the <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclPresent</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclPresent</samp> control flags.
    These flags indicate that the DACL and SACL, respectively, are present in the
    security descriptor. Using flags allows for the setting of a *NULL ACL*, where
    the present flag is set but no value has been specified for the ACL field in the
    security descriptor. A NULL ACL indicates that no security for that ACL has been
    defined and causes the SRM to effectively ignore it. This is distinct from an
    empty ACL, where the present flag is set and a value for the ACL is specified
    but the ACL contains no ACEs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'DACL和SACL中需要指出的两个最终元素是<samp class="SANS_TheSansMonoCd_W5Regular_11">DaclPresent</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SaclPresent</samp>控制标志。这些标志表示DACL和SACL是否分别存在于安全描述符中。使用这些标志可以设置*NULL
    ACL*，其中present标志已设置，但安全描述符中的ACL字段没有指定任何值。NULL ACL表示没有为该ACL定义安全性，并使SRM有效地忽略它。这与空ACL不同，后者present标志已设置，ACL字段中指定了一个值，但ACL中不包含任何ACE。  '
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Structure of a SID</samp>
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Bold_B_11">SID的结构</samp>  '
- en: Until now, we’ve talked about SIDs as opaque binary values or strings of numbers.
    In this section, we’ll look more closely at what a SID contains. The diagram in
    [Figure 5-1](chapter5.xhtml#fig5-1) shows a SID as it’s stored in memory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '到目前为止，我们一直将SID视为不透明的二进制值或数字字符串。在本节中，我们将更详细地查看SID包含的内容。[图5-1](chapter5.xhtml#fig5-1)中的示意图展示了SID在内存中的存储方式。  '
- en: '![](../images/Figure5-1.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-1.jpg)  '
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-1: The SID structure
    in memory</samp>'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-1：内存中的SID结构</samp>  '
- en: 'There are four components to a binary SID:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '二进制SID有四个组成部分：  '
- en: '**Revision    **A value that is always set to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    as there is no other defined version number'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**修订版    **一个始终设置为<samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>的值，因为没有其他定义的版本号  '
- en: '**Relative identifier count    **The number of RIDs in the SID'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**相对标识符计数    **SID中的RID数量  '
- en: '**Security authority    **A value representing the party that issued the SID'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全权限    **表示颁发SID的方的值'
- en: '**Relative identifiers    **Zero or more 32-bit numbers that represent the
    user or group'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**相对标识符    **零个或多个32位数字，表示用户或组  '
- en: The security authority can be any value, but Windows has predefined some commonly
    used ones. All well-known authorities start with five <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    bytes followed by a value from [Table 5-2](chapter5.xhtml#tab5-2).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '安全权限可以是任何值，但Windows已预定义了一些常用的安全权限。所有知名的安全权限以五个<samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>字节开头，后跟[表5-2](chapter5.xhtml#tab5-2)中的一个值。  '
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-2:</samp> <samp class="SANS_Futura_Std_Book_11">Well-Known
    Authorities</samp>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-2:</samp> <samp class="SANS_Futura_Std_Book_11">知名权限</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Final
    value</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Example name</samp> |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">最终值</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">示例名称</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Null</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NULL SID</samp> |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">空值</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">空SID</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">World</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Everyone</samp> |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">世界</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">所有人</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Local</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">CONSOLE LOGON</samp> |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">本地</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">控制台登录</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Creator</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">CREATOR OWNER</samp> |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">创建者</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">创建者拥有者</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">BUILTIN\Users</samp> |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">5</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">BUILTIN\Users</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Package</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">15</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">APPLICATION PACKAGE AUTHORITY\Your
    Internet connection</samp> |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">包</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">15</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">应用程序包权限\您的互联网连接</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">16</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Mandatory
    Label\Medium Mandatory Level</samp> |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">强制标签</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">16</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">强制标签\中等强制级别</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">17</samp> | <samp class="SANS_Futura_Std_Book_11">N/A</samp>
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">作用域策略ID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">17</samp>
    | <samp class="SANS_Futura_Std_Book_11">N/A</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrust</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">19</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">TRUST
    LEVEL\ProtectedLight-Windows</samp> |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">进程信任</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">19</samp>
    | <samp class="SANS_Futura_Std_Book_Oblique_I_11">信任级别\受保护轻量- Windows</samp> |'
- en: After the security authority come the relative identifiers. A SID can contain
    one or more RIDs, with the domain RIDs followed by the user RIDs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 安全权限之后是相关的标识符。一个 SID 可以包含一个或多个 RID，其中域 RID 紧跟在用户 RID 之前。
- en: Let’s walk through how the SID is constructed for a well-known group, *BUILTIN\Users*.
    Note that the domain component is separated from the group name with a backslash.
    In this case, the domain is *BUILTIN*. This is a predefined domain represented
    by a single RID, <samp class="SANS_TheSansMonoCd_W5Regular_11">32</samp>. [Listing
    5-1](chapter5.xhtml#Lis5-1) builds the domain SID for the *BUILTIN* domain from
    its components by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    PowerShell command, then uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSidName</samp>
    command to retrieve the system-defined name for the SID.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何为一个著名的组构建 SID，*BUILTIN\Users*。请注意，域组件与组名之间使用反斜杠分隔。在此情况下，域是*BUILTIN*。这是一个由单个
    RID 表示的预定义域，RID 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">32</samp>。[列表
    5-1](chapter5.xhtml#Lis5-1)通过使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    PowerShell 命令，从组件构建 *BUILTIN* 域的 SID，然后使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSidName</samp>
    命令来检索 SID 的系统定义名称。
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 5-1: Querying for the <samp class="SANS_Futura_Std_Book_11">BUILTIN</samp>
    domain’s SID'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-1：查询 *BUILTIN* 域的 SID
- en: The *BUILTIN* domain’s SID is a member of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp>
    security authority. We specify this security authority using the <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityAuthority</samp>
    parameter and specify the single RID using the <samp class="SANS_TheSansMonoCd_W5Regular_11">RelativeIdentifier</samp>
    parameter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*BUILTIN* 域的 SID 是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp>
    安全权限的成员。我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityAuthority</samp>
    参数指定此安全权限，并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">RelativeIdentifier</samp>
    参数指定单个 RID。'
- en: We then pass the SID to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSidName</samp>
    command. The first two columns of the output show the domain name and the name
    of the SID. In this case, those values are the same; this is just a quirk of the
    *BUILTIN* domain’s registration.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将 SID 传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSidName</samp>
    命令。输出的前两列显示域名和 SID 名称。在这种情况下，这些值是相同的；这是 *BUILTIN* 域注册的一个特殊情况。
- en: The next column indicates the location from which the name was retrieved. In
    this example, the source, <samp class="SANS_TheSansMonoCd_W5Regular_11">Account</samp>,
    indicates that the name was retrieved from LSASS. If the source were <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnown</samp>,
    this would indicate that PowerShell knew the name ahead of time and didn’t need
    to query LSASS. The fourth column, <samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>,
    indicates the SID’s type. In this case, it’s <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp>,
    which we might have expected. The final column is the SID in its SDDL format.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下一列指示检索名称的来源位置。在这个示例中，源 <samp class="SANS_TheSansMonoCd_W5Regular_11">Account</samp>
    表示名称是从 LSASS 获取的。如果源是 <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnown</samp>，这将表示
    PowerShell 事先知道该名称，无需查询 LSASS。第四列，<samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>，表示
    SID 的类型。在这种情况下，它是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp>，这是我们可能预期的。最后一列是
    SID 以 SDDL 格式表示。
- en: Any RIDs specified for SIDs following the domain SID identify a particular user
    or group. For the *Users* group, we use a single RID with the value <samp class="SANS_TheSansMonoCd_W5Regular_11">545</samp>
    (predefined by Windows). [Listing 5-2](chapter5.xhtml#Lis5-2) creates a new SID
    by adding the <samp class="SANS_TheSansMonoCd_W5Regular_11">545</samp> RID to
    the base domain’s SID.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为跟随域 SID 后的 SIDs 指定的任何 RIDs 都标识特定的用户或组。对于*Users*组，我们使用一个 RID，其值为<samp class="SANS_TheSansMonoCd_W5Regular_11">545</samp>（由
    Windows 预定义）。[列表 5-2](chapter5.xhtml#Lis5-2) 通过将<samp class="SANS_TheSansMonoCd_W5Regular_11">545</samp>
    RID 添加到基础域的 SID 来创建一个新的 SID。
- en: '[PRE1]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 5-2: Constructing a SID from a security authority and RIDs'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-2：从安全权限和 RIDs 构造 SID
- en: The output now shows *Users* as the SID name. Also notice that <samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>
    in this case is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">Alias</samp>.
    This indicates that the SID represents a local, built-in group, as distinct from
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>, which represents a
    user-defined group. When we print the <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>
    property on the SID, it outputs the fully qualified name, with the domain and
    the name separated by a backslash.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出现在显示 *Users* 作为 SID 名称。还请注意，在这种情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>
    被设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">Alias</samp>。这表示该 SID 代表一个本地的内建组，与
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> 不同，后者代表一个用户定义的组。当我们打印
    SID 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp> 属性时，它输出完全限定的名称，其中域和名称由反斜杠分隔。
- en: You can find lists of known SIDs in Microsoft’s technical documentation and
    on other websites. However, Microsoft sometimes adds SIDs without documenting
    them. Therefore, I encourage you to test multiple security authority and RID values
    to see what other users and groups you can find. Merely checking for different
    SIDs won’t cause any damage. For example, try replacing the user RID in [Listing
    5-2](chapter5.xhtml#Lis5-2) with <samp class="SANS_TheSansMonoCd_W5Regular_11">544</samp>.
    This new SID represents the *BUILTIN\Administrators* group, as shown in [Listing
    5-3](chapter5.xhtml#Lis5-3).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在微软的技术文档和其他网站上找到已知的SID列表。然而，微软有时会添加未记录的SID。因此，我建议你测试多个安全权限和RID值，以查看能找到哪些其他用户和组。仅仅检查不同的SID不会造成任何损害。例如，尝试将[列表5-2](chapter5.xhtml#Lis5-2)中的用户RID替换为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">544</samp>。这个新SID代表*BUILTIN\Administrators*组，如[列表5-3](chapter5.xhtml#Lis5-3)所示。
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 5-3: Querying the <samp class="SANS_Futura_Std_Book_11">Administrators</samp>
    group SID'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-3：查询<samp class="SANS_Futura_Std_Book_11">Administrators</samp>组SID
- en: Remembering the security authority and RIDs for a specific SID can be tricky,
    and you might not recall the exact name to query by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>
    parameter, as described in [Chapter 2](chapter2.xhtml). Therefore, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    implements a mode that can query a SID from a known set. For example, to query
    the SID of the *Administrators* group, you can use the command shown in [Listing
    5-4](chapter5.xhtml#Lis5-4).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住特定SID的安全权限和RID可能很棘手，你可能无法准确回忆起用<samp class="SANS_TheSansMonoCd_W5Regular_11">Name</samp>参数查询时的确切名称，如[第2章](chapter2.xhtml)所述。因此，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>实现了一种模式，可以从已知的集合中查询SID。例如，要查询*Administrators*组的SID，你可以使用[列表5-4](chapter5.xhtml#Lis5-4)中显示的命令。
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 5-4: Querying the known <samp class="SANS_Futura_Std_Book_11">Administrators</samp>
    group SID'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-4：查询已知的<samp class="SANS_Futura_Std_Book_11">Administrators</samp>组SID
- en: You’ll find SIDs used throughout the Windows operating system. It’s crucial
    that you understand how they’re structured, as this will allow you to quickly
    assess what a SID might represent. For example, if you identify a SID with the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> security authority and
    its first RID is <samp class="SANS_TheSansMonoCd_W5Regular_11">32</samp>, you
    can be sure it’s representing a built-in user or group. Knowing the structure
    also allows you to identify and extract SIDs from crash dumps or memory in cases
    where better tooling isn’t available.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在整个Windows操作系统中找到使用SID的地方。理解SID的结构至关重要，因为这将帮助你快速评估SID可能表示的内容。例如，如果你识别出一个SID具有<Nt>安全权限，并且它的第一个RID是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">32</samp>，你可以确定它代表的是一个内建的用户或组。了解结构还可以让你在没有更好工具的情况下，从崩溃转储或内存中识别和提取SID。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Absolute and Relative Security Descriptors</samp>
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">绝对和相对安全描述符</samp>
- en: 'The kernel supports two binary representation formats for security descriptors:
    absolute and relative. We’ll examine both in this section, and consider the advantages
    and disadvantages of each.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 内核支持两种二进制表示格式的安全描述符：绝对格式和相对格式。在本节中，我们将分别讨论这两种格式，并考虑它们的优缺点。
- en: 'Both formats start with the same three values: the revision, the resource manager
    flags, and the control flags. The <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>
    flag in the control flags determines which format to use, as shown in [Figure
    5-2](chapter5.xhtml#fig5-2).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 两种格式都以相同的三个值开始：修订版本、资源管理器标志和控制标志。控制标志中的<samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>标志决定了使用哪种格式，如[图5-2](chapter5.xhtml#fig5-2)所示。
- en: '![](../images/Figure5-2.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-2.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-2: Selecting the security
    descriptor format</samp>'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-2：选择安全描述符格式</samp>
- en: The total size of the security descriptor’s header is 32 bits, split between
    two 8-bit values, the revision and <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>,
    and the 16-bit control flags. The security descriptor’s resource manager flags
    are stored in <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>; these
    are only valid if the <samp class="SANS_TheSansMonoCd_W5Regular_11">RmControlValid</samp>
    control flag is set, although the value will be present in either case. The rest
    of the security descriptor is stored immediately after the header.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 安全描述符头部的总大小为 32 位，分为两个 8 位值：修订号和<samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>，以及
    16 位控制标志。安全描述符的资源管理器标志存储在<samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>中；这些标志只有在设置了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RmControlValid</samp>控制标志时才有效，尽管无论如何该值都会存在。安全描述符的其余部分紧接在头部之后存储。
- en: 'The simplest format, the absolute security descriptor, is used when the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> flag is not set. After
    the common header, the absolute format defines four pointers to reference in memory:
    the owner SID, the group SID, the DACL, and the SACL, in that order, as shown
    in [Figure 5-3](chapter5.xhtml#fig5-3).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的格式——绝对安全描述符，适用于未设置<samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>标志的情况。在通用头信息之后，绝对格式定义了四个指针来引用内存中的内容：拥有者
    SID、组 SID、DACL 和 SACL，依次排列，如[图 5-3](chapter5.xhtml#fig5-3)所示。
- en: '![](../images/Figure5-3.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-3.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-3: The structure of
    an absolute security descriptor</samp>'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-3：绝对安全描述符的结构</samp>
- en: Each pointer references an absolute memory address at which the data is stored.
    The size of the pointer therefore depends on whether the application is 32 or
    64 bits. It’s also possible to specify a NULL value for the pointer to indicate
    that the value is not present. The owner and group SID values are stored using
    the binary format defined in the previous section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个指针引用一个存储数据的绝对内存地址。因此，指针的大小取决于应用程序是 32 位还是 64 位。也可以为指针指定一个 NULL 值，表示该值不存在。拥有者和组
    SID 值采用前一节中定义的二进制格式存储。
- en: When the <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> flag
    is set, the security descriptor instead follows the relative format. Rather than
    referencing its values using absolute memory addresses, a relative security descriptor
    stores these locations as positive offsets relative to the start of its header.
    [Figure 5-4](chapter5.xhtml#fig5-4) shows how a relative security descriptor is
    constructed.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当<samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>标志被设置时，安全描述符会采用相对格式。相对安全描述符不是通过绝对内存地址引用其值，而是将这些位置存储为相对于其头部起始位置的正偏移量。[图
    5-4](chapter5.xhtml#fig5-4)展示了相对安全描述符的构建方式。
- en: '![](../images/Figure5-4.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-4.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-4: The structure of
    a relative security descriptor</samp>'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-4：相对安全描述符的结构</samp>
- en: These values are stored in contiguous memory. The ACL format, which we’ll explore
    in the following section, is already a relative format and therefore doesn’t require
    any special handling when used in a relative security descriptor. Each offset
    is always 32 bits long, regardless of the system’s bit size. If an offset is set
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>, the value doesn’t exist,
    as in the case of NULL for an absolute security descriptor.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值存储在连续的内存中。我们将在下一节探讨的 ACL 格式已经是相对格式，因此在相对安全描述符中使用时无需进行特别处理。每个偏移量始终为 32 位长，无论系统的位数如何。如果偏移量设置为<samp
    class="SANS_TheSansMonoCd_W5Regular_11">0</samp>，则表示该值不存在，如同绝对安全描述符中的 NULL 情况。
- en: The main advantage of an absolute security descriptor is that you can easily
    update its individual components. For example, to replace the owner SID, you’d
    allocate a new SID in memory and assign its memory address to the owner pointer.
    In comparison, modifying a relative security descriptor in the same way might
    require adjusting its allocated memory if the new owner SID structure is larger
    than the old one.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对安全描述符的主要优点在于你可以轻松更新其各个组件。例如，要替换拥有者 SID，你只需在内存中分配一个新的 SID，并将其内存地址分配给拥有者指针。相比之下，按照相同方式修改相对安全描述符时，如果新的拥有者
    SID 结构比旧的结构大，可能需要调整其分配的内存。
- en: On the other hand, the big advantage of a relative security descriptor is that
    it can be built in a single contiguous block of memory. This allows you to serialize
    the security descriptor to a persistent format, such as a file or a registry key.
    When you’re trying to determine the security of a resource, you might need to
    extract its security descriptor from memory or a persistent store. By understanding
    the two formats, you can determine how to read the security descriptor into something
    you can view or manipulate.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，相对安全描述符的一个大优点是它可以在一个连续的内存块中构建。这使得你能够将安全描述符序列化为持久化格式，如文件或注册表项。当你需要确定某个资源的安全性时，你可能需要从内存或持久化存储中提取它的安全描述符。通过理解这两种格式，你可以确定如何读取安全描述符，以便查看或操作。
- en: Most APIs and system calls accept either security descriptor format, determining
    how to handle a security descriptor automatically by checking the value of the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> flag. However,
    you’ll find some exceptions in which an API takes only one format or another;
    in that case, if you pass the API a security descriptor in the wrong format, you’ll
    typically receive an error such as <samp class="SANS_TheSansMonoCd_W5Regular_11">STATUS_INVALID_SECURITY_DESCR</samp>.
    Security descriptors returned from an API will almost always be in relative format
    due to the simplicity of their memory management. The system provides the APIs
    <samp class="SANS_TheSansMonoCd_W5Regular_11">RtlAbsoluteToSelfRelativeSD</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">RtlSelfRelativeToAbsoluteSD</samp>
    to convert between the two formats if needed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数API和系统调用都可以接受这两种安全描述符格式，它们通过检查<samp class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>标志来自动确定如何处理安全描述符。然而，你会发现一些例外情况，在这些情况下，某些API仅接受一种格式；在这种情况下，如果你向API传递了错误格式的安全描述符，通常会收到类似<samp
    class="SANS_TheSansMonoCd_W5Regular_11">STATUS_INVALID_SECURITY_DESCR</samp>的错误。由于内存管理的简便性，从API返回的安全描述符几乎总是相对格式。系统提供了<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RtlAbsoluteToSelfRelativeSD</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">RtlSelfRelativeToAbsoluteSD</samp>这两个API，以便在需要时在两种格式之间进行转换。
- en: The PowerShell module handles all security descriptors using a <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    object, regardless of format. This object is written in .NET and converts to a
    relative or absolute security descriptor only when it’s required to interact with
    native code. You can determine whether a <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    object was generated from a relative security descriptor by inspecting the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp> property.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell模块使用<samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>对象处理所有的安全描述符，无论其格式如何。该对象是用.NET编写的，并且仅在需要与本地代码交互时才会转换为相对或绝对安全描述符。你可以通过检查<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SelfRelative</samp>属性来确定一个<samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>对象是否是从相对安全描述符生成的。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Access Control List Headers and Entries</samp>
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">访问控制列表头部和条目</samp>
- en: The DACL and SACL make up most of the data in a security descriptor. While these
    elements have different purposes, they share the same basic structure. In this
    section we’ll cover how they’re arranged in memory, leaving the details of how
    they contribute to the access check process for [Chapter 7](chapter7.xhtml).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: DACL和SACL构成了安全描述符中的大部分数据。虽然这些元素的用途不同，但它们共享相同的基本结构。在本节中，我们将讨论它们在内存中的排列方式，关于它们如何在访问检查过程中发挥作用的详细信息请参见[第7章](chapter7.xhtml)。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The Header</samp>
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">头部</samp>
- en: All ACLs consist of an ACL header followed by a list of zero or more ACEs in
    one contiguous block of memory. [Figure 5-5](chapter5.xhtml#fig5-5) shows this
    top-level format.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的ACL都由一个ACL头部和后续的零个或多个ACE组成，所有内容在一个连续的内存块中。 [图5-5](chapter5.xhtml#fig5-5)展示了这一顶层格式。
- en: '![](../images/Figure5-5.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-5.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-5: A top-level overview
    of the ACL structure</samp>'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-5：ACL结构的顶层概述</samp>
- en: The ACL header contains a revision, the total size of the ACL in bytes, and
    the number of ACE entries that follow the header. [Figure 5-6](chapter5.xhtml#fig5-6)
    shows the header structure.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ACL头部包含一个修订版本、ACL的总大小（以字节为单位）以及紧随其后的ACE条目数量。 [图5-6](chapter5.xhtml#fig5-6)展示了头部的结构。
- en: '![](../images/Figure5-6.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-6.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-6: The structure of
    the ACL header</samp>'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-6：ACL 头部结构</samp>
- en: 'The ACL header also contains two reserved fields, <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz2</samp>, both of which should
    always be <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>. They serve no
    purpose in modern versions of Windows and are there in case the ACL structure
    needs to be extended. Currently, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp>
    field can have one of three values, which determine the ACL’s valid ACEs. If an
    ACL uses an ACE that the revision doesn’t support, the ACL won’t be considered
    valid. Windows supports the following revisions:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 头部还包含两个保留字段，<samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz1</samp> 和
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Sbz2</samp>，它们的值应始终为 <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>。这两个字段在现代版本的
    Windows 中没有实际用途，它们存在是为了在 ACL 结构需要扩展时使用。目前，<samp class="SANS_TheSansMonoCd_W5Regular_11">版本</samp>
    字段可以具有三种值，这些值决定了 ACL 的有效 ACE。如果 ACL 使用了一个版本不支持的 ACE，该 ACL 将被认为是无效的。Windows 支持以下版本：
- en: '**Default    **The default ACL revision. Supports all the basic ACE types,
    such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>. Specified with the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp> value <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp>.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认    **默认的 ACL 版本。支持所有基本的 ACE 类型，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">允许</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">拒绝</samp>。通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">版本</samp>
    值 <samp class="SANS_TheSansMonoCd_W5Regular_11">2</samp> 来指定。'
- en: '**Compound    **Adds support for compound ACEs to the default ACL revision.
    Specified with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp>
    value <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp>.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**复合    **为默认的 ACL 版本添加了对复合 ACE 的支持。通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">版本</samp>
    值 <samp class="SANS_TheSansMonoCd_W5Regular_11">3</samp> 来指定。'
- en: '**Object    **Adds support for object ACEs to the compound. Specified with
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Revision</samp> value <samp
    class="SANS_TheSansMonoCd_W5Regular_11">4</samp>.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象    **为复合 ACL 添加了对对象 ACE 的支持。通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">版本</samp>
    值 <samp class="SANS_TheSansMonoCd_W5Regular_11">4</samp> 来指定。'
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">The ACE List</samp>
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">ACE 列表</samp>
- en: Following the ACL header is the list of ACEs, which determines what access the
    SID has. ACEs are of variable length but always start with a header that contains
    the ACE type, additional flags, and the ACE’s total size. The header is followed
    by data specific to the ACE type. [Figure 5-7](chapter5.xhtml#fig5-7) shows this
    structure.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ACL 头部之后是 ACE 列表，它决定了 SID 的访问权限。ACE 的长度可变，但总是以一个包含 ACE 类型、附加标志和 ACE 总大小的头部开始。头部后跟特定于
    ACE 类型的数据。[图 5-7](chapter5.xhtml#fig5-7) 显示了这一结构。
- en: '![](../images/Figure5-7.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-7.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-7: The ACE structure</samp>'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-7：ACE 结构</samp>
- en: The ACE header is common to all ACE types. This allows an application to safely
    access the header when processing an ACL. The ACE type value can then be used
    to determine the exact format of the ACE’s type-specific data. If the application
    doesn’t understand the ACE type, it can use the size field to skip the ACE entirely
    (we’ll discuss how types affect access checking in [Chapter 7](chapter7.xhtml)).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: ACE 头部是所有 ACE 类型共有的。这使得应用程序在处理 ACL 时可以安全地访问头部。ACE 类型值可以用来确定 ACE 类型特定数据的确切格式。如果应用程序不理解
    ACE 类型，它可以使用大小字段跳过整个 ACE（我们将在[第 7 章](chapter7.xhtml)中讨论类型如何影响访问检查）。
- en: '[Table 5-3](chapter5.xhtml#tab5-3) lists the supported ACE types, the minimum
    ACE revision they are valid in, and whether they are valid in the DACL or the
    SACL.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[表 5-3](chapter5.xhtml#tab5-3) 列出了支持的 ACE 类型、它们有效的最小 ACE 版本，以及它们是否在 DACL 或
    SACL 中有效。'
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-3:</samp> <samp class="SANS_Futura_Std_Book_11">Supported
    ACE Types, Minimum ACL Revisions, and Locations</samp>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-3：</samp> <samp class="SANS_Futura_Std_Book_11">支持的
    ACE 类型、最小 ACL 版本和位置</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Minimum revision</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACL</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE 类型</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">值</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">最小版本</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACL</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp> |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Grants access to a resource</samp> |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">允许</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x0</samp>
    | <samp class="SANS_Futura_Std_Book_11">默认</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">允许访问资源</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x1</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Denies access to a resource</samp> |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">拒绝</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x1</samp>
    | <samp class="SANS_Futura_Std_Book_11">默认</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">拒绝访问资源</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x2</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Audits access to a resource</samp> |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">审计</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x2</samp>
    | <samp class="SANS_Futura_Std_Book_11">默认</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">审计资源访问</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x3</samp>
    | <samp class="SANS_Futura_Std_Book_11">Default</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">Alarms upon access to a resource; unused</samp>
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">报警</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x3</samp>
    | <samp class="SANS_Futura_Std_Book_11">默认</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">访问资源时触发警报；未使用</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCompound</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">Compound</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access to a resource during impersonation</samp> |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">允许复合</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x4</samp>
    | <samp class="SANS_Futura_Std_Book_11">复合</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">在冒充期间允许对资源的访问</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x5</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access to a resource with an object type</samp> |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">允许对象</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x5</samp>
    | <samp class="SANS_Futura_Std_Book_11">对象</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">允许对带有对象类型的资源的访问</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x6</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Denies
    access to a resource with an object type</samp> |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">拒绝对象</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x6</samp>
    | <samp class="SANS_Futura_Std_Book_11">对象</samp> | <samp class="SANS_Futura_Std_Book_11">DACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">拒绝对带有对象类型的资源的访问</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x7</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Audits
    access to a resource with an object type</samp> |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">审计对象</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x7</samp>
    | <samp class="SANS_Futura_Std_Book_11">对象</samp> | <samp class="SANS_Futura_Std_Book_11">SACL</samp>
    | <samp class="SANS_Futura_Std_Book_11">审计带有对象类型的资源访问</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Alarms
    upon access with an object type; unused</samp> |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmObject</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8</samp> | <samp class="SANS_Futura_Std_Book_11">对象</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">访问时触发警报，带有对象类型；未使用</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x9</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access to a resource with a callback</samp> |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x9</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">通过回调授予对资源的访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xA</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Denies
    access to a resource with a callback</samp> |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xA</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">通过回调拒绝对资源的访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xB</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Grants
    access with a callback and an object type</samp> |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xB</samp> | <samp class="SANS_Futura_Std_Book_11">对象</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">通过回调和对象类型授予访问权限</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xC</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">Denies
    access with a callback and an object type</samp> |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xC</samp> | <samp class="SANS_Futura_Std_Book_11">对象</samp>
    | <samp class="SANS_Futura_Std_Book_11">DACL</samp> | <samp class="SANS_Futura_Std_Book_11">通过回调和对象类型拒绝访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xD</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Audits
    access with a callback</samp> |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xD</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">通过回调审核访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xE</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Alarms
    upon access with a callback; unused</samp> |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmCallback</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0xE</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">访问时触发回调警报；未使用</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xF</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Audits
    access with a callback and an object type</samp> |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0xF</samp> | <samp class="SANS_Futura_Std_Book_11">对象</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">通过回调和对象类型审核访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10</samp> | <samp class="SANS_Futura_Std_Book_11">Object</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Alarms
    upon access with a callback and an object type; unused</samp> |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmCallbackObject</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10</samp> | <samp class="SANS_Futura_Std_Book_11">对象</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">访问时触发回调警报，带有对象类型；未使用</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x11</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    a mandatory label</samp> |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x11</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">指定强制标签</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x12</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    attributes for the resource</samp> |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x12</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">指定资源的属性</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x13</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    a central access policy ID for the resource</samp> |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x13</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">指定资源的中央访问策略
    ID</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrustLabel</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x14</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    a process trust label to limit resource access</samp> |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrustLabel</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x14</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">指定一个进程信任标签以限制资源访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x15</samp> | <samp class="SANS_Futura_Std_Book_11">Default</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">Specifies
    an access filter for the resource</samp> |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x15</samp> | <samp class="SANS_Futura_Std_Book_11">默认</samp>
    | <samp class="SANS_Futura_Std_Book_11">SACL</samp> | <samp class="SANS_Futura_Std_Book_11">指定资源的访问过滤器</samp>
    |'
- en: While Windows officially supports all these ACE types, the kernel does not use
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp> types. User applications
    can specify their own ACE types, but various APIs in user and kernel mode check
    for valid types and will generate an error if the ACE type isn’t known.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 正式支持所有这些 ACE 类型，但内核不使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp>
    类型。用户应用程序可以指定自己的 ACE 类型，但用户模式和内核模式中的各种 API 会检查有效类型，并在 ACE 类型未知时生成错误。
- en: 'An ACE’s type-specific data falls primarily into one of three formats: normal
    ACEs, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>; compound ACEs; and
    object ACEs. A *normal ACE* contains the following fields after the header, with
    the field’s size indicated in parentheses:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ACE 的类型特定数据主要分为三种格式：常规 ACE（如 <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>）；复合 ACE；和对象 ACE。*常规
    ACE* 在标题后包含以下字段，字段大小在括号内表示：
- en: '**Access mask (32-bit)    **The access mask to be granted or denied based on
    the ACE type'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问掩码（32 位）    **根据 ACE 类型授予或拒绝的访问掩码'
- en: '**SID (variable size)    **The SID, in the binary format described earlier
    in this chapter'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**SID（可变大小）    **在本章前述的二进制格式中的 SID'
- en: '*Compound ACEs* are for use during impersonation. These ACEs can grant access
    to both the impersonated caller and the process user at the same time. The only
    valid type for them is <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCompound</samp>.
    Even though the latest versions of Windows still support compound ACEs, they’re
    effectively undocumented and presumably deprecated. I’ve included them in this
    book for completeness. Their format is as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*Compound ACEs* 用于模拟操作期间使用。这些 ACE 可以同时授予模拟调用者和进程用户的访问权限。它们唯一的有效类型是 <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCompound</samp>。尽管最新版本的
    Windows 仍支持复合 ACE，但它们实际上是未记录的，可能已弃用。为了完整起见，我在本书中包括了它们。它们的格式如下：'
- en: '**Access mask (32-bit)    **The access mask to be granted'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问掩码（32位）    **授予的访问掩码'
- en: '**Compound ACE type (16-bit)    **Set to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>,
    which means the ACE is used for impersonation'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**复合ACE类型（16位）    **设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>，表示该ACE用于模拟'
- en: '**Reserved (16-bit)    **Always <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**保留（16位）    **始终为 <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp>'
- en: '**Server SID (variable size)    **The server SID in binary format; matches
    the service user'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器SID（可变大小）    **服务器的SID，以二进制格式表示；与服务用户匹配'
- en: '**SID (variable size)    **The SID in a binary format; matches the impersonated
    user'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**SID（可变大小）    **以二进制格式表示的SID；与被模拟的用户匹配'
- en: 'Microsoft introduced the *object ACE* format to support access control for
    Active Directory Domain Services. Active Directory uses a 128-bit GUID to represent
    a directory service object type; the object ACE determines access for specific
    types of objects, such as computers or users. For example, using a single security
    descriptor, a directory could grant a SID the access needed to create one type
    of object but not another. The object ACE format is as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 微软引入了*对象ACE*格式，以支持Active Directory域服务的访问控制。Active Directory使用128位GUID来表示目录服务对象类型；对象ACE决定特定类型对象的访问权限，例如计算机或用户。例如，使用单一的安全描述符，目录可以授予SID创建某种类型对象的访问权限，但不授予另种类型的访问权限。对象ACE格式如下：
- en: '**Access mask (32-bit)    **The access mask to be granted or denied based on
    the ACE type'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问掩码（32位）    **根据ACE类型授予或拒绝的访问掩码'
- en: '**Flags (32-bit)    **Used to indicate which of the following GUIDs are present'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**标志（32位）    **用于指示以下哪些GUID存在'
- en: '**Object type (16-byte)    **The <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp>
    GUID; present only if the flag in bit 0 is set'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象类型（16字节）    **<samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp>
    GUID；仅当位0的标志设置时才存在'
- en: '**Inherited object type (16-byte)    **The inherited object GUID; present only
    if the flag in bit 1 is set'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**继承的对象类型（16字节）    **继承的对象GUID；仅当位1的标志设置时才存在'
- en: '**SID (variable size)    **The SID in a binary format'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**SID（可变大小）    **以二进制格式表示的SID'
- en: ACEs can be larger than their types’ defined structures, and they may use additional
    space to stored unstructured data. Most commonly, they use this unstructured data
    for the callback ACE types, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp>,
    which defines a conditional expression that determines whether the ACE should
    be active during an access check. We can inspect the data that would be generated
    from a conditional expression using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom
    -NtAceCondition</samp> PowerShell command, as shown in [Listing 5-5](chapter5.xhtml#Lis5-5).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ACE的大小可以大于其类型定义的结构，它们可能使用额外的空间来存储非结构化数据。最常见的情况是，这些非结构化数据用于回调ACE类型，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp>，该类型定义了一个条件表达式，决定ACE是否在访问检查期间处于活动状态。我们可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom -NtAceCondition</samp>
    PowerShell命令检查条件表达式生成的数据，如[列表5-5](chapter5.xhtml#Lis5-5)所示。
- en: '[PRE4]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Listing 5-5: Parsing a conditional expression and displaying binary data'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-5：解析条件表达式并显示二进制数据
- en: We refer to these ACEs as *callback ACEs* because prior to Windows 8 an application
    needed to call the <samp class="SANS_TheSansMonoCd_W5Regular_11">AuthzAccessCheck</samp>
    API to handle them. The API accepted a callback function that would be invoked
    to determine whether to include a callback ACE in the access check. Since Windows
    8, the kernel access check has built-in support for conditional ACEs in the format
    shown in [Listing 5-5](chapter5.xhtml#Lis5-5), although user applications are
    free to specify their own formats and handle these ACEs manually.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些ACE称为*回调ACE*，因为在Windows 8之前，应用程序需要调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">AuthzAccessCheck</samp>
    API来处理它们。该API接受一个回调函数，该函数会被调用以确定是否在访问检查中包含回调ACE。从Windows 8开始，内核访问检查内建支持条件ACE格式，如[列表5-5](chapter5.xhtml#Lis5-5)所示，尽管用户应用程序可以自由指定自己的格式并手动处理这些ACE。
- en: The primary use of the ACE flags is to specify inheritance rules for the ACE.
    [Table 5-4](chapter5.xhtml#tab5-4) shows the defined ACE flags.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ACE标志的主要用途是指定ACE的继承规则。[表5-4](chapter5.xhtml#tab5-4)展示了已定义的ACE标志。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-4:</samp> <samp class="SANS_Futura_Std_Book_11">ACE
    Flags</samp>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表5-4：</samp> <samp class="SANS_Futura_Std_Book_11">ACE标志</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE flag</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE 标志</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">值</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectInherit</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE can be inherited by an object.</samp> |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectInherit</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1</samp> | <samp class="SANS_Futura_Std_Book_11">ACE
    可以被对象继承。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ContainerInherit</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x2</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE can be inherited by a container.</samp> |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ContainerInherit</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x2</samp> | <samp class="SANS_Futura_Std_Book_11">ACE
    可以被容器继承。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoPropagateInherit</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE’s inheritance flags are not propagated to children.</samp> |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoPropagateInherit</samp> |
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x4</samp> | <samp class="SANS_Futura_Std_Book_11">ACE
    的继承标志不会传递到子项。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8</samp> | <samp class="SANS_Futura_Std_Book_11">The
    ACE is used only for inheritance and not for access checks.</samp> |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x8</samp> | <samp class="SANS_Futura_Std_Book_11">ACE
    仅用于继承，不用于访问检查。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10</samp>
    | <samp class="SANS_Futura_Std_Book_11">The ACE was inherited from a parent container.</samp>
    |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10</samp>
    | <samp class="SANS_Futura_Std_Book_11">ACE 是从父容器继承的。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Critical</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x20</samp>
    | <samp class="SANS_Futura_Std_Book_11">The ACE is critical and can’t be removed.
    Applies only to</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    <samp class="SANS_Futura_Std_Book_11">ACEs.</samp> |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Critical</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x20</samp>
    | <samp class="SANS_Futura_Std_Book_11">ACE 是关键的，无法移除。仅适用于</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">允许的</samp>
    <samp class="SANS_Futura_Std_Book_11">ACE。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x40</samp> | <samp class="SANS_Futura_Std_Book_11">An
    audit event should be generated for a successful access.</samp> |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x40</samp> | <samp class="SANS_Futura_Std_Book_11">应该为成功的访问生成审计事件。</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x80</samp> | <samp class="SANS_Futura_Std_Book_11">An
    audit event should be generated for a failed access.</samp> |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x80</samp> | <samp class="SANS_Futura_Std_Book_11">应该为失败的访问生成审计事件。</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TrustProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x40</samp> | <samp class="SANS_Futura_Std_Book_11">When
    used with an</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp>
    <samp class="SANS_Futura_Std_Book_11">ACE, this flag prevents modification.</samp>
    |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TrustProtected</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x40</samp> | <samp class="SANS_Futura_Std_Book_11">当与</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp> <samp class="SANS_Futura_Std_Book_11">ACE
    一起使用时，此标志会防止修改。</samp> |'
- en: The inheritance flags take up only the lower 5 bits, leaving the top 3 bits
    for ACE-specific flags.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 继承标志仅占用最低的 5 位，剩下的 3 位用于 ACE 特定的标志。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Constructing and Manipulating Security
    Descriptors</samp>
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">构建和操作安全描述符</samp>
- en: Now that you’re familiar with the structure of a security descriptor, let’s
    look at how to construct and manipulate them using PowerShell. By far the most
    common reason to do this is to view a security descriptor’s contents so you can
    understand the access applied to a resource. Another important use case is if
    you need to construct a security descriptor to lock down a resource. The PowerShell
    module used in this book aims to make constructing and viewing security descriptors
    as simple as possible.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了安全描述符的结构，让我们看看如何使用 PowerShell 构建和操作它们。到目前为止，最常见的使用场景是查看安全描述符的内容，以便理解访问权限如何应用于资源。另一个重要的使用场景是当你需要构建一个安全描述符来锁定资源时。本书中使用的
    PowerShell 模块旨在尽可能简化构建和查看安全描述符的过程。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Creating a New Security
    Descriptor</samp>
  id: totrans-183
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">创建新安全描述符</samp>
- en: To create a new security descriptor, you can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    command. By default, it creates a new <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    object with no owner, group, DACL, or SACL set. You can use the command’s parameters
    to add these parts of the security descriptor, as shown in [Listing 5-6](chapter5.xhtml#Lis5-6).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的安全描述符，可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    命令。默认情况下，它会创建一个没有所有者、组、DACL 或 SACL 的新 <samp class="SANS_TheSansMonoCd_W5Regular_11">SecurityDescriptor</samp>
    对象。你可以使用命令的参数来添加这些安全描述符的组成部分，如 [列表 5-6](chapter5.xhtml#Lis5-6) 所示。
- en: '[PRE5]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 5-6: Creating a new security descriptor with a specified owner'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-6：使用指定的所有者创建新的安全描述符
- en: We first get the SID for the *World* group. When calling <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    to create a new security descriptor, we use this SID to specify its <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>. We also specify
    the name of the kernel object type this security descriptor will be associated
    with; this step makes some of the later commands easier to use. In this case,
    we’ll assume it’s a <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    object’s security descriptor.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先获取 *World* 组的 SID。在调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    创建一个新的安全描述符时，我们使用这个 SID 来指定其 <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>。我们还指定了该安全描述符将关联的内核对象类型；这一步骤使得后续的一些命令更容易使用。在本例中，我们假设它是一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 对象的安全描述符。
- en: We then display the security descriptor, formatting the output as a table. As
    you can see, the <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp> field
    is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">Everyone</samp>. The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> value isn’t printed by default,
    as it’s not as important. Neither a DACL nor a SACL is currently present in the
    security descriptor, and there is no integrity level specified.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后显示安全描述符，并将输出格式化为表格。正如你所看到的，<samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp>
    字段被设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">Everyone</samp>。默认情况下，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> 值不会显示，因为它并不是那么重要。当前，安全描述符中既没有
    DACL 也没有 SACL，并且没有指定完整性级别。
- en: To add some ACEs, we can use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-NtSecurityDescriptorAce</samp>
    command. For normal ACEs, we need to specify the ACE type, the SID, and the access
    mask. Optionally, we can also specify the ACE flags. The script in [Listing 5-7](chapter5.xhtml#Lis5-7)
    adds some ACEs to our new security descriptor.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一些 ACEs，我们可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-NtSecurityDescriptorAce</samp>
    命令。对于普通 ACEs，我们需要指定 ACE 类型、SID 和访问掩码。我们还可以选择性地指定 ACE 标志。[列表 5-7](chapter5.xhtml#Lis5-7)
    中的脚本将一些 ACEs 添加到我们的新安全描述符中。
- en: '[PRE6]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Listing 5-7: Adding ACEs to the new security descriptor'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-7：向新安全描述符添加 ACEs
- en: We start by getting the SID of the current user with <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    ❶. We use this SID to add a new <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE to the DACL ❷. We also add a <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    ACE for the anonymous user by specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Type</samp>
    parameter, followed by another <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE for the *Everyone* group. We then modify the SACL to add an audit ACE ❸ and
    set the mandatory label to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>
    integrity level ❹. To finish creating the security descriptor, we set the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp>
    control flags ❺.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过<samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp> ❶获取当前用户的SID。我们使用此SID将一个新的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACE添加到DACL ❷。接着，通过指定<Type>参数，添加一个用于匿名用户的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACE，之后再为*Everyone*组添加一个<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACE。然后，我们修改SACL，添加一个审计ACE
    ❸，并将强制标签设置为<samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>完整性级别 ❹。为了完成安全描述符的创建，我们设置<samp
    class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>和<samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp>控制标志
    ❺。
- en: We can now print details about the security descriptor we’ve just created. Displaying
    the security descriptor ❻ shows that the DACL now contains three ACEs and the
    two SACLs, and the integrity level is <samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>.
    We also display the control flags ❼ and the lists of ACEs in the DACL ❽ and SACL
    ❾.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以打印刚刚创建的安全描述符的详细信息。显示安全描述符❻表明，DACL现在包含三个ACE和两个SACL，同时完整性级别为<samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>。我们还展示了控制标志❼以及DACL❽和SACL❾中的ACE列表。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Ordering the ACEs</samp>
  id: totrans-194
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">ACE排序</samp>
- en: 'Because of how access checking works, there is a canonical ordering to the
    ACEs in an ACL. For example, all <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    ACEs should come before any <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACEs, as otherwise the system might grant access to a resource improperly, based
    on which ACEs come first. The SRM doesn’t enforce this canonical ordering; it
    trusts that any application has correctly ordered the ACEs before passing them
    for an access check. ACLs should order their ACEs according to the following rules:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 由于访问检查的工作方式，ACL中的ACE有一个规范的排序。例如，所有<samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>类型的ACE应该排在所有<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>类型ACE之前，否则系统可能会根据ACE的顺序错误地授予对资源的访问权限。SRM并不强制执行这种规范的排序；它相信任何应用程序在进行访问检查前，都会正确地对ACE进行排序。ACL应根据以下规则对ACE进行排序：
- en: 1.  All <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>-type ACEs
    must come before <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    types.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  所有<samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>-类型的ACE必须排在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>类型的ACE之前。
- en: 2.  The <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACEs must
    come before <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> object
    ACEs.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>类型的ACE必须排在<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>对象ACE之前。
- en: 3.  The <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACEs must
    come before <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> object
    ACEs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>类型的ACE必须排在<sup class="SANS_TheSansMonoCd_W5Regular_11">Denied</sup>对象ACE之前。
- en: 4.  All non-inherited ACEs must come before ACEs with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp>
    flag set.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 所有非继承的ACE必须排在带有<samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp>标志的ACE之前。
- en: In [Listing 5-7](chapter5.xhtml#Lis5-7), we added a <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    ACE to the DACL after we added an <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE, failing the first order rule. We can ensure the DACL is canonicalized by
    using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Edit-NtSecurity</samp>
    command with the <samp class="SANS_TheSansMonoCd_W5Regular_11">CanonicalizeDacl</samp>
    parameter. We can also test whether a DACL is already canonical by using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Test-NtSecurityDescriptor</samp> PowerShell
    command with the <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclCanonical</samp>
    parameter. [Listing 5-8](chapter5.xhtml#Lis5-8) illustrates the use of both commands.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在[示例 5-7](chapter5.xhtml#Lis5-7)中，我们在添加了一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    ACE 后，添加了一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACE，从而违反了第一个顺序规则。我们可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Edit-NtSecurity</samp> 命令，并通过 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">CanonicalizeDacl</samp> 参数来确保 DACL 被标准化。我们还可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Test-NtSecurityDescriptor</samp>
    PowerShell 命令，并通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclCanonical</samp>
    参数来测试 DACL 是否已经是标准化的。[示例 5-8](chapter5.xhtml#Lis5-8) 演示了这两个命令的使用。
- en: '[PRE7]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 5-8: Canonicalizing the DACL'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5-8：标准化 DACL
- en: If you compare the list of ACEs in [Listing 5-8](chapter5.xhtml#Lis5-8) with
    the list in [Listing 5-7](chapter5.xhtml#Lis5-7), you’ll notice that the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACE has been moved from
    the middle to the start of the ACL. This ensures that it will be processed before
    any <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACEs.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将[示例 5-8](chapter5.xhtml#Lis5-8)中的 ACE 列表与[示例 5-7](chapter5.xhtml#Lis5-7)中的列表进行比较，你会注意到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp> ACE 已经从中间移到了 ACL 的开始位置。这确保了它会在任何
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp> ACE 之前被处理。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Formatting Security
    Descriptors</samp>
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">格式化安全描述符</samp>
- en: You can print the values in the security descriptor manually, through the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp> command, but this
    is time-consuming. Another problem with manual formatting is that the access masks
    won’t be decoded, so instead of <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadData</samp>,
    for example, you’ll see <samp class="SANS_TheSansMonoCd_W5Regular_11">00000001</samp>.
    It would be nice to have a simple way of printing out the details of a security
    descriptor and formatting them based on the object type. That’s what <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    is for. You can pass it a security descriptor, and the command will print it to
    the console. [Listing 5-9](chapter5.xhtml#Lis5-9) provides an example.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-Table</samp> 命令手动打印安全描述符中的值，但这会很耗时。手动格式化的另一个问题是访问掩码不会被解码，因此，你会看到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">00000001</samp>，而不是像 <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadData</samp>
    这样的值。最好能有一个简单的方法来打印出安全描述符的详细信息，并根据对象类型进行格式化。这就是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    的作用。你可以将安全描述符传递给它，命令将把它打印到控制台上。[示例 5-9](chapter5.xhtml#Lis5-9) 提供了一个例子。
- en: '[PRE8]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 5-9: Displaying the security descriptor'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5-9：显示安全描述符
- en: We pass the <samp class="SANS_TheSansMonoCd_W5Regular_11">ShowAll</samp> parameter
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    to ensure that it displays the entire contents of the security descriptor; by
    default it won’t output the SACL or less common ACEs, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>.
    Note that the output kernel object type matches the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type we specified when creating the security descriptor in [Listing 5-6](chapter5.xhtml#Lis5-6).
    Specifying the kernel object type allows the formatter to print the decoded access
    mask for the type rather than a generic hex value.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 <samp class="SANS_TheSansMonoCd_W5Regular_11">ShowAll</samp> 参数传递给 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>，以确保它显示安全描述符的所有内容；默认情况下，它不会输出
    SACL 或其他不常见的 ACE，如 <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>。请注意，输出的内核对象类型与我们在[示例
    5-6](chapter5.xhtml#Lis5-6)中创建安全描述符时指定的 <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    类型匹配。指定内核对象类型允许格式化器打印出该类型的解码访问掩码，而不是一个通用的十六进制值。
- en: The next line in the output shows the current control flags. These are calculated
    on the fly based on the current state of the security descriptor; later, we’ll
    discuss how to change these control flags to change the security descriptor’s
    behavior. The control flags are followed by the owner and group SIDs and the DACL,
    which account for most of the output. Any DACL-specific flags appear next to the
    header; in this case, these indicate that we set the <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>
    flag. Next, the output lists each of the ACEs in the ACL in order, starting with
    the type of ACE. Because the command knows the object type, it prints the decoded
    access mask for the type as well as the original access mask in hexadecimal.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的下一行显示了当前的控制标志。这些标志是根据安全描述符的当前状态动态计算的；稍后我们将讨论如何更改这些控制标志，以改变安全描述符的行为。控制标志后面是所有者和组
    SID 以及 DACL，它们占据了输出的大部分。任何特定于 DACL 的标志会出现在标头旁边；在这种情况下，这些标志表示我们设置了 <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>
    标志。接下来，输出按顺序列出 ACL 中的每个 ACE，从 ACE 的类型开始。因为命令已经知道对象类型，所以它会打印出该类型的解码访问掩码，以及原始的十六进制访问掩码。
- en: Next is the SACL, which shows our single audit ACE as well as the <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp>
    flag. The final component shown is the mandatory label. The access mask for a
    mandatory label is the mandatory policy, and it’s decoded differently from the
    rest of the ACEs that use the type-specific access rights. The mandatory policy
    can be set to one or more of the bit flags shown in [Table 5-5](chapter5.xhtml#tab5-5).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 SACL，它显示了我们的单个审计 ACE 以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp>
    标志。最后显示的组件是强制标签。强制标签的访问掩码即为强制策略，它的解码方式与使用类型特定访问权限的其他 ACEs 不同。强制策略可以设置为 [表 5-5](chapter5.xhtml#tab5-5)
    中所示的一个或多个位标志。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-5:</samp> <samp class="SANS_Futura_Std_Book_11">Mandatory
    Policy Values</samp>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-5：</samp> <samp class="SANS_Futura_Std_Book_11">强制策略值</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Value</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp> |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">值</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoWriteUp</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    | <samp class="SANS_Futura_Std_Book_11">A lower integrity level caller can’t write
    to this resource.</samp> |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoWriteUp</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    | <samp class="SANS_Futura_Std_Book_11">较低完整性级别的调用者无法写入此资源。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoReadUp</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    | <samp class="SANS_Futura_Std_Book_11">A lower integrity level caller can’t read
    this resource.</samp> |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoReadUp</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    | <samp class="SANS_Futura_Std_Book_11">较低完整性级别的调用者无法读取此资源。</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoExecuteUp</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp> | <samp class="SANS_Futura_Std_Book_11">A
    lower integrity level caller can’t execute this resource.</samp> |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NoExecuteUp</samp> | <samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp> | <samp class="SANS_Futura_Std_Book_11">较低完整性级别的调用者无法执行此资源。</samp>
    |'
- en: By default, <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    can be a bit verbose. To shorten its output, specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">Summary</samp>
    parameter, which will remove as much data as possible while keeping the important
    information. [Listing 5-10](chapter5.xhtml#Lis5-10) demonstrates.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，<samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    的输出可能会比较冗长。为了缩短其输出，可以指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">Summary</samp>
    参数，这将尽可能删除多余的数据，同时保留重要信息。[列表 5-10](chapter5.xhtml#Lis5-10) 演示了这一点。
- en: '[PRE9]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 5-10: Displaying the security descriptor in summary format'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-10：以摘要格式显示安全描述符
- en: I mentioned in [Chapter 2](chapter2.xhtml) that for ease of use the PowerShell
    module used in this book uses simple names for most common flags, but that you
    can display the full SDK names if you prefer (for example, to compare the output
    with native code). To display SDK names when viewing the contents of a security
    descriptor with <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>,
    use the <samp class="SANS_TheSansMonoCd_W5Regular_11">SDKName</samp> property,
    as shown in [Listing 5-11](chapter5.xhtml#Lis5-11).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[第 2 章](chapter2.xhtml)中提到，为了简化使用，本书中使用的 PowerShell 模块为大多数常见标志提供了简单的名称，但你可以根据需要显示完整的
    SDK 名称（例如，用于将输出与原生代码进行比较）。要在使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    查看安全描述符内容时显示 SDK 名称，可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SDKName</samp>
    属性，如[列表 5-11](chapter5.xhtml#Lis5-11)所示。
- en: '[PRE10]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 5-11: Formatting a security descriptor with SDK names'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-11：使用 SDK 名称格式化安全描述符
- en: One quirk of <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> objects
    is that their access masks have two naming conventions, one for files and one
    for directories. You can request that <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    print the directory version of the access mask by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    parameter, or more generally, by setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    property of the security descriptor object to <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>.
    [Listing 5-12](chapter5.xhtml#Lis5-12) shows the impact of setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    parameter on the output.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 对象的一个特点是它们的访问掩码有两种命名约定，一种用于文件，另一种用于目录。你可以通过使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp> 参数，或者更一般地，通过将安全描述符对象的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp> 属性设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">True</samp>
    来请求 <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    打印目录版本的访问掩码。[列表 5-12](chapter5.xhtml#Lis5-12) 显示了设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">Container</samp>
    参数对输出的影响。
- en: '[PRE11]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 5-12: Formatting the security descriptor as a container'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 5-12：将安全描述符格式化为容器
- en: Note how the output line changes from <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadData|WriteData</samp>
    to <samp class="SANS_TheSansMonoCd_W5Regular_11">ListDirectory|AddFile</samp>
    ❶ when we format it as a container. The <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type is the only object type with this behavior in Windows. This is important
    to security, as you could easily misinterpret <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    access rights if you formatted the security descriptor for a directory as a file,
    or vice versa.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当我们将其格式化为容器时，输出行从 <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadData|WriteData</samp>
    变为 <samp class="SANS_TheSansMonoCd_W5Regular_11">ListDirectory|AddFile</samp>
    ❶。在 Windows 中，<samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 类型是唯一具有此行为的对象类型。这对安全性非常重要，因为如果将安全描述符格式化为文件而非目录，或反之，你可能会错误地解读
    <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 的访问权限。
- en: 'If a GUI is more your thing, you can start a viewer using the following <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Show-NtSecurityDescriptor</samp> command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢图形用户界面（GUI），可以使用以下 <samp class="SANS_TheSansMonoCd_W5Regular_11">Show-NtSecurityDescriptor</samp>
    命令启动查看器：
- en: '[PRE12]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the command should open the dialog shown in [Figure 5-8](chapter5.xhtml#fig5-8).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令应该会打开在[图 5-8](chapter5.xhtml#fig5-8)中显示的对话框。
- en: '![](../images/Figure5-8.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-8.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-8: A GUI displaying
    the security descriptor</samp>'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 5-8：显示安全描述符的图形用户界面</samp>
- en: The dialog summarizes the security descriptor’s important data. At the top are
    the owner and group SIDs resolved into names, as well as the security descriptor’s
    integrity level and mandatory policy. These match the values we specified when
    creating the security descriptor. In the middle is the list of ACEs in the DACL
    (left) or SACL (right), depending on which tab you select, with the ACL flags
    at the top. Each entry in the list includes the type of ACE, the SID, the access
    mask in generic form, and the ACE flags. At the bottom is the decoded access.
    The list populates when you select an ACE in the ACL list.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 该对话框总结了安全描述符的重要数据。顶部显示的是所有者和组SID（已解析为名称），以及安全描述符的完整性级别和强制策略。这些值与我们创建安全描述符时指定的值匹配。中间是DACL（左侧）或SACL（右侧）中的ACE列表，具体取决于你选择的选项卡，顶部有ACL标志。列表中的每个条目包括ACE类型、SID、以通用形式表示的访问掩码和ACE标志。底部是解码后的访问权限。当你在ACL列表中选择一个ACE时，列表将被填充。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Converting to and
    from a Relative Security Descriptor</samp>
  id: totrans-233
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">转换为和从相对安全描述符转换</samp>
- en: We can convert a security descriptor object to a byte array in the relative
    format using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSecurityDescriptor</samp>
    command. We can then print its contents to see what the underlying structure really
    is, as shown in [Listing 5-13](chapter5.xhtml#Lis5-13).
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSecurityDescriptor</samp>
    命令将安全描述符对象转换为相对格式的字节数组。然后，我们可以打印其内容，查看其底层结构，正如[列表5-13](chapter5.xhtml#Lis5-13)中所示。
- en: '[PRE13]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 5-13: Converting an absolute security descriptor to relative format
    and displaying its bytes'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 列表5-13：将绝对安全描述符转换为相对格式并显示其字节
- en: 'We can convert the byte array back to a security descriptor object using <samp
    class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp> and the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Byte</samp> parameter:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Byte</samp> 参数将字节数组转换回安全描述符对象：
- en: '[PRE14]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As an exercise, I’ll leave it to you to pick apart the hex output to find the
    various structures of the security descriptor based on the descriptions provided
    in this chapter. To get you started, [Figure 5-9](chapter5.xhtml#fig5-9) highlights
    the major structures.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个练习，我将留给你自己分析十六进制输出，以根据本章提供的描述找出安全描述符的各种结构。为了帮助你入门，[图5-9](chapter5.xhtml#fig5-9)突出了主要结构。
- en: '![](../images/Figure5-9.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure5-9.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 5-9: An outline of the
    major structures in the relative security descriptor hex output</samp>'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图5-9：相对安全描述符十六进制输出中主要结构的概述</samp>
- en: You’ll need to refer to the layout of the ACL and SID structures to manually
    decode the rest.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要参考ACL和SID结构的布局，手动解码其余部分。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Security Descriptor Definition Language</samp>
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">安全描述符定义语言</samp>
- en: In [Chapter 2](chapter2.xhtml), we discussed the basics of the Security Descriptor
    Definition Language (SDDL) format for representing SIDs. The SDDL format can represent
    the entire security descriptor too. As the SDDL version of a security descriptor
    uses ASCII text, it’s somewhat human readable, and unlike the binary data shown
    in [Listing 5-13](chapter5.xhtml#Lis5-13), it can be easily copied. Because it’s
    common to see SDDL strings used throughout Windows, let’s look at how to represent
    a security descriptor in SDDL and how you can read it.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](chapter2.xhtml)中，我们讨论了用于表示SID的安全描述符定义语言（SDDL）格式的基础知识。SDDL格式也可以表示整个安全描述符。由于安全描述符的SDDL版本使用ASCII文本，因此它在某种程度上是可读的，且与[列表5-13](chapter5.xhtml#Lis5-13)中显示的二进制数据不同，它可以轻松复制。因为在Windows中常常看到使用SDDL字符串，所以让我们来看一下如何用SDDL表示安全描述符以及如何读取它。
- en: You can convert a security descriptor to SDDL format by specifying the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ToSddl</samp> parameter to <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>.
    This is demonstrated in [Listing 5-14](chapter5.xhtml#Lis5-14), where we pass
    the security descriptor we built in the previous section. You can also create
    a security descriptor from an SDDL string using <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">ToSddl</samp> parameter.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">ToSddl</samp> 参数给 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp> 来将安全描述符转换为
    SDDL 格式。这个过程在 [Listing 5-14](chapter5.xhtml#Lis5-14) 中有演示，我们传递了前一节中构建的安全描述符。你还可以使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">ToSddl</samp> 参数从 SDDL 字符串创建一个安全描述符。
- en: '[PRE15]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 5-14: Converting a security descriptor to SDDL'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 5-14: 将安全描述符转换为 SDDL'
- en: 'The SDDL version of the security descriptor contains four optional components.
    You can identify the start of each component by looking for the following prefixes:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 安全描述符的 SDDL 版本包含四个可选组件。你可以通过查找以下前缀来识别每个组件的开始：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">O:  </samp>Owner SID
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">O:  </samp>所有者 SID
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">G:  </samp>Group SID
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">G:  </samp>组 SID
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">D:  </samp>DACL
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">D:  </samp>DACL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">S:  </samp>SACL
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">S:  </samp>SACL
- en: In [Listing 5-15](chapter5.xhtml#Lis5-15), we split the output from [Listing
    5-14](chapter5.xhtml#Lis5-14) into its components to make it easier to read.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [Listing 5-15](chapter5.xhtml#Lis5-15) 中，我们将 [Listing 5-14](chapter5.xhtml#Lis5-14)
    的输出拆分为各个组件，便于阅读。
- en: '[PRE16]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Listing 5-15: Splitting up the SDDL components'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 5-15: 拆分 SDDL 组件'
- en: The first two lines represent the owner and group SIDs in SDDL format. You might
    notice that these don’t look like the SDDL SIDs we’re used to seeing, as they
    don’t start with <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-</samp>. That’s
    because these strings are two-character aliases that Windows uses for well-known
    SIDs to reduce the size of an SDDL string. For example, the owner string is <samp
    class="SANS_TheSansMonoCd_W5Regular_11">WD</samp>, which we could convert back
    to the full SID using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    ([Listing 5-16](chapter5.xhtml#Lis5-16)).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行表示所有者和组的 SID，采用 SDDL 格式。你可能会注意到这些看起来不像我们通常看到的 SDDL SID，因为它们不是以 <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-</samp>
    开头。这是因为这些字符串是 Windows 用于知名 SID 的两字符别名，以减少 SDDL 字符串的大小。例如，所有者字符串是 <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp>，我们可以通过
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp> 将其转换回完整的 SID（见
    [Listing 5-16](chapter5.xhtml#Lis5-16)）。
- en: '[PRE17]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 5-16: Converting an alias to a name and SID'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'Listing 5-16: 将别名转换为名称和 SID'
- en: As you can see, the <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp>
    alias represents the *Everyone* group. [Table 5-6](chapter5.xhtml#tab5-6) shows
    the aliases for a few well-known SIDs. You can find a more comprehensive list
    of all supported SDDL aliases in [Appendix B](appendix-B.xhtml).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，<samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> 别名代表 *Everyone*
    组。[表 5-6](chapter5.xhtml#tab5-6) 显示了一些知名 SID 的别名。你可以在 [附录 B](appendix-B.xhtml)
    中找到所有支持的 SDDL 别名的更全面列表。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-6:</samp> <samp class="SANS_Futura_Std_Book_11">Well-Known
    SIDs and Their Aliases</samp>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-6：</samp> <samp class="SANS_Futura_Std_Book_11">知名
    SID 及其别名</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">SID alias</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">SDDL SID</samp> |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">SID 别名</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">名称</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">SDDL SID</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AU</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\Authenticated Users</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-11</samp>
    |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AU</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\Authenticated Users</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-11</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">BA</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">BUILTIN\Administrators</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-32-544</samp> |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">BA</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">BUILTIN\Administrators</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-32-544</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">IU</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\INTERACTIVE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-4</samp>
    |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">IU</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\INTERACTIVE</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-4</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SY</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\SYSTEM</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-18</samp>
    |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SY</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">NT
    AUTHORITY\SYSTEM</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-5-18</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Everyone</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-1-0</samp> |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> | <samp class="SANS_Futura_Std_Book_Oblique_I_11">Everyone</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-1-0</samp> |'
- en: If a SID has no alias, <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    will emit the SID in SDDL format, as shown in [Listing 5-15](chapter5.xhtml#Lis5-15).
    Even SIDs without aliases can have names defined by LSASS. For example, the SID
    in [Listing 5-15](chapter5.xhtml#Lis5-15) belongs to the current user, as shown
    in [Listing 5-17](chapter5.xhtml#Lis5-17).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SID 没有别名，<samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    将以 SDDL 格式输出 SID，如[清单 5-15](chapter5.xhtml#Lis5-15)所示。即使是没有别名的 SID，也可以由 LSASS
    定义名称。例如，[清单 5-15](chapter5.xhtml#Lis5-15)中的 SID 属于当前用户，如[清单 5-17](chapter5.xhtml#Lis5-17)所示。
- en: '[PRE18]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 5-17: Looking up the name of the SID'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 5-17：查找 SID 的名称
- en: 'Next in [Listing 5-15](chapter5.xhtml#Lis5-15) is the representation of the
    DACL. After the <samp class="SANS_TheSansMonoCd_W5Regular_11">D:</samp> prefix,
    the ACL in SDDL format looks as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是[清单 5-15](chapter5.xhtml#Lis5-15)中的 DACL 表示。在 <samp class="SANS_TheSansMonoCd_W5Regular_11">D:</samp>
    前缀之后，SDDL 格式的 ACL 如下所示：
- en: '[PRE19]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The ACL flags are optional; the DACL’s are set to <samp class="SANS_TheSansMonoCd_W5Regular_11">AI</samp>
    and the SACL’s are set to <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp>.
    These values map to security descriptor control flags and can be one or more of
    the strings in [Table 5-7](chapter5.xhtml#tab5-7).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: ACL 标志是可选的；DACL 的设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">AI</samp>，SACL
    的设置为 <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp>。这些值映射到安全描述符控制标志，并且可以是[表
    5-7](chapter5.xhtml#tab5-7)中一个或多个字符串。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-7:</samp> <samp class="SANS_Futura_Std_Book_11">ACL
    Flag Strings Mapped to Security Descriptor Control Flags</samp>
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-7：</samp> <samp class="SANS_Futura_Std_Book_11">ACL
    标志字符串映射到安全描述符控制标志</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACL flag string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">DACL
    control flag</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">SACL control flag</samp>
    |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACL 标志字符串</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">DACL
    控制标志</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">SACL 控制标志</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclProtected</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp> |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">P</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclProtected</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclProtected</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInherited</samp> |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInherited</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInherited</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInheritReq</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInheritReq</samp> |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DaclAutoInheritReq</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">SaclAutoInheritReq</samp> |'
- en: 'I’ll describe the uses of these three control flags in [Chapter 6](chapter6.xhtml).
    Each ACE is enclosed in parentheses and is made up of multiple strings separated
    by semicolons, following this general format:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在[第六章](chapter6.xhtml)中描述这三个控制标志的用途。每个 ACE 都被括在括号中，由多个以分号分隔的字符串组成，遵循以下通用格式：
- en: '[PRE20]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">Type</samp> is a short string
    that maps to an ACE type. [Table 5-8](chapter5.xhtml#tab5-8) shows these mappings.
    Note that SDDL format does not support certain ACE types, so they’re omitted from
    the table.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Type</samp> 是一个简短的字符串，映射到ACE类型。[表
    5-8](chapter5.xhtml#tab5-8) 显示了这些映射。请注意，SDDL格式不支持某些ACE类型，因此它们在表格中被省略。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-8:</samp> <samp class="SANS_Futura_Std_Book_11">Mappings
    of Type Strings to ACE Types</samp>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-8：</samp> <samp class="SANS_Futura_Std_Book_11">类型字符串与ACE类型的映射</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE type string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACE
    type</samp> |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE 类型字符串</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACE
    类型</samp> |'
- en: '| --- | --- |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">A</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Allowed</samp>
    |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">A</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">允许</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">D</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Denied</samp>
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">D</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">拒绝</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">审计</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Alarm</samp>
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">AL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">警报</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp>
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">允许对象</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedObject</samp>
    |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">拒绝对象</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp>
    |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">审计对象</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AlarmObject</samp>
    |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">警报对象</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallback</samp>
    |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">允许回调</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">DeniedCallback</samp>
    |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">拒绝回调</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ZA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedCallbackObject</samp>
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ZA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">允许回调对象</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp>
    |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">XU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">审计回调</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ML</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MandatoryLabel</samp>
    |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ML</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">强制标签</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">资源属性</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ScopedPolicyId</samp>
    |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">作用域策略ID</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ProcessTrustLabel</samp>
    |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">处理信任标签</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessFilter</samp>
    |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FL</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">访问过滤器</samp>
    |'
- en: The next component is <samp class="SANS_TheSansMonoCd_W5Regular_11">Flags</samp>,
    which represents the ACE flags. The audit entry in the SACL from [Listing 5-15](chapter5.xhtml#Lis5-15)
    shows the flag string <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp>,
    which represents <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp>.
    [Table 5-9](chapter5.xhtml#tab5-9) shows other mappings.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分是 <samp class="SANS_TheSansMonoCd_W5Regular_11">标志</samp>，它表示 ACE 标志。来自
    [列表 5-15](chapter5.xhtml#Lis5-15) 的审计条目显示了标志字符串 <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp>，它代表
    <samp class="SANS_TheSansMonoCd_W5Regular_11">访问失败</samp>。 [表 5-9](chapter5.xhtml#tab5-9)
    显示了其他映射。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-9:</samp> <samp class="SANS_Futura_Std_Book_11">Mappings
    of Flag Strings to ACE Flags</samp>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-9：</samp> <samp class="SANS_Futura_Std_Book_11">标志字符串与
    ACE 标志的映射</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE flag string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACE
    flag</samp> |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">ACE 标志字符串</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">ACE
    标志</samp> |'
- en: '| --- | --- |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectInherit</samp>
    |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">OI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">对象继承</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">ContainerInherit</samp>
    |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">容器继承</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">NoPropagateInherit</samp>
    |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">不传播继承</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">IO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp>
    |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">IO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">仅继承</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Inherited</samp>
    |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">继承</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Critical</samp>
    |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">关键</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp>
    |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">成功访问</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp>
    |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">访问失败</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">TrustProtected</samp>
    |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">信任保护</samp>
    |'
- en: Next is <samp class="SANS_TheSansMonoCd_W5Regular_11">Access</samp>, which represents
    the access mask in the ACE. This can be a number in hexadecimal (<samp class="SANS_TheSansMonoCd_W5Regular_11">0x1234</samp>),
    octal (<samp class="SANS_TheSansMonoCd_W5Regular_11">011064</samp>), or decimal
    (<samp class="SANS_TheSansMonoCd_W5Regular_11">4660</samp>) format, or a list
    of short access strings. If no string is specified, then an empty access mask
    is used. [Table 5-10](chapter5.xhtml#tab5-10) shows the access strings.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 <samp class="SANS_TheSansMonoCd_W5Regular_11">访问</samp>，它代表 ACE 中的访问掩码。可以是十六进制数（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">0x1234</samp>）、八进制数（<samp class="SANS_TheSansMonoCd_W5Regular_11">011064</samp>）或十进制数（<samp
    class="SANS_TheSansMonoCd_W5Regular_11">4660</samp>），或者是短访问字符串的列表。如果没有指定字符串，则使用空的访问掩码。[表
    5-10](chapter5.xhtml#tab5-10) 显示了访问字符串。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-10:</samp> <samp class="SANS_Futura_Std_Book_11">Mappings
    of Access Strings to Access Masks</samp>
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-10：</samp> <samp class="SANS_Futura_Std_Book_11">访问字符串与访问掩码的映射</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Access string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access mask</samp> |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">访问字符串</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">访问名称</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">访问掩码</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    Read</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x80000000</samp>
    |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">通用读取</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x80000000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x40000000</samp>
    |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">通用写入</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x40000000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    Execute</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x20000000</samp>
    |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">通用执行</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x20000000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Generic
    All</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10000000</samp> |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">GA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">通用所有权限</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x10000000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Write
    Owner</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00080000</samp>
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">写入所有者</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00080000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Write
    DAC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00040000</samp> |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">写入
    DAC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00040000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Read
    Control</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020000</samp>
    |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">读取控制</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Delete</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00010000</samp> |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">删除</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00010000</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Control
    Access</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000100</samp>
    |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">控制访问</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000100</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">List
    Object</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000080</samp>
    |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LO</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">列出对象</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000080</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Delete
    Tree</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000040</samp>
    |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DT</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">删除树</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000040</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Write
    Property</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000020</samp>
    |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">WP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">写入属性</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000020</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Read
    Property</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000010</samp>
    |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">读取属性</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000010</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Self
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000008</samp>
    |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">自我写入</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000008</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">List
    Children</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp>
    |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">列出子项</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Delete
    Child</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">DC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">删除子项</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Create
    Child</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">CC</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">创建子项</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp> |'
- en: Note that the available access strings do not cover the entire access mask range.
    This is because SDDL was designed to represent the masks for directory service
    objects, which don’t define access mask values outside of a limited range. This
    is also why the names of the rights are slightly confusing; for example, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Delete Child</samp> does not necessarily
    map to an arbitrary object type’s idea of deleting a child, and you can see in
    [Listing 5-15](chapter5.xhtml#Lis5-15) that the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type’s specific access maps to directory service object access, even though it
    has nothing to do with Active Directory.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，现有的访问字符串无法覆盖整个访问掩码范围。这是因为SDDL（安全描述符定义语言）设计用于表示目录服务对象的掩码，而目录服务对象并没有定义超出有限范围的访问掩码值。这也是为什么权利名称有些混淆的原因；例如，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">删除子项</samp>不一定映射到任意对象类型中删除子项的定义，正如在[列表
    5-15](chapter5.xhtml#Lis5-15)中所见，<samp class="SANS_TheSansMonoCd_W5Regular_11">文件</samp>类型的特定访问映射到目录服务对象访问，即使它与活动目录无关。
- en: To better support other types, the SDDL format provides access strings for common
    file and registry key access masks, as shown in [Table 5-11](chapter5.xhtml#tab5-11).
    If the available access strings can’t represent the entire mask, the only option
    is to represent it as a number string, typically in hexadecimal format.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地支持其他类型，SDDL格式提供了常见文件和注册表项访问掩码的访问字符串，如[表 5-11](chapter5.xhtml#tab5-11)所示。如果现有的访问字符串无法表示整个掩码，唯一的选择是将其表示为数字字符串，通常采用十六进制格式。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-11:</samp> <samp class="SANS_Futura_Std_Book_11">Access
    Strings for File and Registry Key Types</samp>
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-11：</samp> <samp class="SANS_Futura_Std_Book_11">文件和注册表项类型的访问字符串</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Access string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access mask</samp> |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">访问字符串</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">访问名称</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">访问掩码</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    All Access</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x001F01FF</samp>
    |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">文件全部访问</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x001F01FF</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    Execute</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x001200A0</samp>
    |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">文件执行</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x001200A0</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00120116</samp>
    |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">文件写入</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00120116</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    Read</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00120089</samp>
    |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">FR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">文件读取</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00120089</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    All Access</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x000F003F</samp>
    |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KA</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">键盘全部访问</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x000F003F</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Read</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020019</samp>
    |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">键盘读取</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020019</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Execute</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020019</samp>
    |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">键盘执行</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020019</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020006</samp>
    |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">KW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Key
    Write</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00020006</samp>
    |'
- en: For the <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp> and
    <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritedObjectType</samp> components,
    used with object ACEs, SDDL uses a string format for the GUIDs. The GUIDs can
    be any value. For example, [Table 5-12](chapter5.xhtml#tab5-12) contains a few
    well-known ones used by Active Directory.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与对象 ACE 一起使用的 <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritedObjectType</samp> 组件，SDDL
    使用字符串格式表示 GUID。GUID 可以是任何值。例如，[表 5-12](chapter5.xhtml#tab5-12) 包含了一些 Active Directory
    使用的知名 GUID。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-12:</samp> <samp class="SANS_Futura_Std_Book_11">Well-Known</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp> <samp class="SANS_Futura_Std_Book_11">GUIDs
    Used in Active Directory</samp>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-12：</samp> <samp class="SANS_Futura_Std_Book_11">Active
    Directory 中使用的知名</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp>
    <samp class="SANS_Futura_Std_Book_11">GUID</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">GUID</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Directory
    object</samp> |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">GUID</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">目录对象</samp>
    |'
- en: '| --- | --- |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">19195a5a-6da0-11d0-afd3-00c04fd930c9</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp> |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">19195a5a-6da0-11d0-afd3-00c04fd930c9</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967a86-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Computer</samp> |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967a86-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Computer</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967aba-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp> |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967aba-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967a9c-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">bf967a9c-0de6-11d0-a285-00aa003049e2</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> |'
- en: 'Here is an example ACE string for an <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp>
    ACE with the <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp> set:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例 ACE 字符串，用于设置了 <samp class="SANS_TheSansMonoCd_W5Regular_11">AllowedObject</samp>
    ACE 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectType</samp>：
- en: '[PRE21]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After the <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritedObjectType</samp>
    component in the ACE is the SID. As detailed earlier in this chapter, this can
    be a short alias if it’s a well-known SID, or the full SDDL format if not.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ACE 中，紧随 <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritedObjectType</samp>
    组件之后的是 SID。如本章前面详细说明的，如果是知名 SID，则可以使用简短别名；如果不是，则使用完整的 SDDL 格式。
- en: 'In the final component, which is optional for most ACE types, you can specify
    a conditional expression if using a callback ACE or a security attribute if using
    a <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp> ACE.
    The conditional expression defines a Boolean expression that compares the values
    of a token’s security attribute. When evaluated, the result of the expression
    should be true or false. We saw a simple example in [Listing 5-5](chapter5.xhtml#Lis5-5):
    <samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"XYZ"</samp>, which compares the
    value of the security attribute <samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp>
    with the string value <samp class="SANS_TheSansMonoCd_W5Regular_11">XYZ</samp>
    and evaluates to true if they’re equal. The SDDL expression syntax has four different
    attribute name formats for the security attribute you want to refer to:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个组件中，对于大多数ACE类型来说这是可选的，如果使用回调ACE，可以指定一个条件表达式；如果使用<samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    ACE，则可以指定一个安全属性。条件表达式定义了一个布尔表达式，用于比较令牌的安全属性值。评估时，该表达式的结果应为真或假。在[示例5-5](chapter5.xhtml#Lis5-5)中，我们看到了一个简单的例子：<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">==</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"XYZ"</samp>，它将安全属性<samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp>的值与字符串值<samp
    class="SANS_TheSansMonoCd_W5Regular_11">XYZ</samp>进行比较，并在它们相等时返回true。SDDL表达式语法有四种不同的属性名称格式，用于引用你想要的安全属性：
- en: '**Simple    **For local security attributes; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp>'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单    **用于本地安全属性；例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">WIN://TokenId</samp>'
- en: '**Device    **For device claims; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">@Device.ABC</samp>'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**设备    **用于设备声明；例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">@Device.ABC</samp>'
- en: '**User    **For user claims; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">@User.XYZ</samp>'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户    **用于用户声明；例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">@User.XYZ</samp>'
- en: '**Resource    **For resource attributes; for example, <samp class="SANS_TheSansMonoCd_W5Regular_11">@Resource.QRS</samp>'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源    **用于资源属性；例如，<samp class="SANS_TheSansMonoCd_W5Regular_11">@Resource.QRS</samp>'
- en: The comparison values in the conditional expressions can accept several different
    types, as well. When converting from SDDL to a security descriptor, the condition
    expression will be parsed, but because the type of the security attribute won’t
    be known at this time, no validation of the value’s type can occur. [Table 5-13](chapter5.xhtml#tab5-13)
    shows examples for each conditional expression type.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 条件表达式中的比较值也可以接受几种不同的类型。当从SDDL转换到安全描述符时，条件表达式将被解析，但由于此时无法知道安全属性的类型，因此无法对值的类型进行验证。[表5-13](chapter5.xhtml#tab5-13)展示了每种条件表达式类型的示例。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-13:</samp> <samp class="SANS_Futura_Std_Book_11">Example
    Values for Different Conditional Expression Types</samp>
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表5-13：</samp> <samp class="SANS_Futura_Std_Book_11">不同条件表达式类型的示例值</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Examples</samp>
    |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">类型</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">示例</samp>
    |'
- en: '| --- | --- |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Number</samp> | <samp class="SANS_Futura_Std_Book_11">Decimal:</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-100</samp><samp class="SANS_Futura_Std_Book_11">;
    octal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp class="SANS_Futura_Std_Book_11">;
    hexadecimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">数字</samp> | <samp class="SANS_Futura_Std_Book_11">十进制：</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp class="SANS_Futura_Std_Book_11">，</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">-100</samp><samp class="SANS_Futura_Std_Book_11">；八进制：</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp class="SANS_Futura_Std_Book_11">；十六进制：</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp> |'
- en: '| <samp class="SANS_Futura_Std_Book_11">String</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"ThisIsAString"</samp>
    |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">字符串</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">"ThisIsAString"</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Fully qualified binary name</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">{"O=MICROSOFT CORPORATION</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">L=REDMOND</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">S=WASHINGTON",1004}</samp>
    |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">完全限定的二进制名称</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">{"O=MICROSOFT
    CORPORATION</samp><samp class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">L=REDMOND</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">S=WASHINGTON",1004}</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">SID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SID(BA)</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">SID(S-1-0-0)</samp>
    |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">SID</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SID(BA)</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">SID(S-1-0-0)</samp>
    |'
- en: '| <samp class="SANS_Futura_Std_Book_11">Octet string</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">#0011223344</samp>
    |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Book_11">八位字节字符串</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">#0011223344</samp>
    |'
- en: The syntax then defines operators to evaluate an expression, starting with the
    unary operators in [Table 5-14](chapter5.xhtml#tab5-14).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 语法接下来定义了用于评估表达式的运算符，从[表 5-14](chapter5.xhtml#tab5-14)中的单目运算符开始。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-14:</samp> <samp class="SANS_Futura_Std_Book_11">Unary
    Operators for Conditional Expressions</samp>
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-14：</samp> <samp class="SANS_Futura_Std_Book_11">条件表达式的单目运算符</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">操作符</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp>
    |'
- en: '| --- | --- |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Exists</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp class="SANS_Futura_Std_Book_11">exists</samp>
    |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Exists</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    <samp class="SANS_Futura_Std_Book_11">是否存在</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Exists</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Exists</samp>
    |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Exists</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    | <samp class="SANS_Futura_Std_Book_11">与</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Exists</samp>
    <samp class="SANS_Futura_Std_Book_11">相反</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">Checks
    whether the token groups contain all SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">检查标记组是否包含</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp> <samp class="SANS_Futura_Std_Book_11">中的所有
    SID</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of</samp>
    |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">与</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of</samp>
    <samp class="SANS_Futura_Std_Book_11">相反</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the token device groups
    contain all SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查标记设备组是否包含</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    <samp class="SANS_Futura_Std_Book_11">中的所有 SID</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Device_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of</samp>
    |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Device_Member_of {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">与</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of</samp>
    <samp class="SANS_Futura_Std_Book_11">的逆操作</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the token groups contain
    any SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查标记组是否包含任何在</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    <samp class="SANS_Futura_Std_Book_11">中的SID</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of_Any</samp>
    |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">与</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Member_of_Any</samp>
    <samp class="SANS_Futura_Std_Book_11">的逆操作</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the token device groups
    contain any SIDs in</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查标记设备组是否包含任何在</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    <samp class="SANS_Futura_Std_Book_11">中的SID</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Device_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of_Any</samp>
    |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Device_Member_of_Any {</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">}</samp>
    | <samp class="SANS_Futura_Std_Book_11">与</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Device_Member_of_Any</samp>
    <samp class="SANS_Futura_Std_Book_11">的逆操作</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">!(</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp> | <samp class="SANS_Futura_Std_Book_11">The
    logical NOT of an expression</samp> |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">!(</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">)</samp> | <samp class="SANS_Futura_Std_Book_11">表达式的逻辑NOT</samp>
    |'
- en: In [Table 5-14](chapter5.xhtml#tab5-14), <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>
    is the name of an attribute to test, <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>
    is a list of SID values enclosed in braces <samp class="SANS_TheSansMonoCd_W5Regular_11">{}</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> is another
    conditional subexpression. [Table 5-15](chapter5.xhtml#tab5-15) shows the infix
    operators the syntax defines.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表 5-14](chapter5.xhtml#tab5-14)中，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp>是要测试的属性名称，<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">SIDLIST</samp>是一个用大括号<samp class="SANS_TheSansMonoCd_W5Regular_11">{}</samp>括起来的SID值列表，<samp
    class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>是另一个条件子表达式。[表 5-15](chapter5.xhtml#tab5-15)展示了该语法定义的中缀运算符。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-15:</samp> <samp class="SANS_Futura_Std_Book_11">Infix
    Operators for Conditional Expressions</samp>
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-15：</samp> <samp class="SANS_Futura_Std_Book_11">条件表达式的中缀运算符</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Operator</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Description</samp>
    |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">运算符</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">描述</samp>
    |'
- en: '| --- | --- |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Contains</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    contains the value</samp> |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Contains</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否包含该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Contains</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Inverse of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Contains</samp>
    |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Contains</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">与</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Contains</samp>
    <samp class="SANS_Futura_Std_Book_11">相反</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Any_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUELIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">Checks
    whether the security attribute contains any of the values</samp> |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Any_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUELIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否包含列表中的任何值</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Any_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUELIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">Inverse
    of</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">Any_of</samp> |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Any_of {</samp><samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUELIST</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">}</samp> | <samp class="SANS_Futura_Std_Book_11">与</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Any_of</samp> <samp class="SANS_Futura_Std_Book_11">相反</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    equals the value</samp> |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">==</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否等于该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">!=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    does not equal the value</samp> |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">!=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否不等于该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is less than the value</samp> |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否小于该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is less than or equal to the value</samp> |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11"><=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否小于或等于该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">></samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is greater than the value</samp> |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">></samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否大于该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">>=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">Checks whether the security attribute
    is greater than or equal to the value</samp> |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">ATTR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">>=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    | <samp class="SANS_Futura_Std_Book_11">检查安全属性是否大于或等于该值</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">&&</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>
    | <samp class="SANS_Futura_Std_Book_11">The logical AND between two expressions</samp>
    |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">&&</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>
    | <samp class="SANS_Futura_Std_Book_11">两个表达式之间的逻辑与运算</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">&#124;&#124;</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>
    | <samp class="SANS_Futura_Std_Book_11">The logical OR between two expressions</samp>
    |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp> <samp
    class="SANS_TheSansMonoCd_W5Regular_11">&#124;&#124;</samp> <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">EXPR</samp>
    | <samp class="SANS_Futura_Std_Book_11">两个表达式之间的逻辑或运算</samp> |'
- en: 'In [Table 5-15](chapter5.xhtml#tab5-15), <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>
    can be either a single value from [Table 5-13](chapter5.xhtml#tab5-13) or a list
    of values enclosed in braces. The <samp class="SANS_TheSansMonoCd_W5Regular_11">Any_of</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Not_Any_of</samp> operators
    work only on lists, and the conditional expression must always be placed in parentheses
    in the SDDL ACE. For example, if you wanted to use the conditional expression
    shown back in [Listing 5-5](chapter5.xhtml#Lis5-5) with an <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessCallback</samp>
    ACE, the ACE string would be as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在[表 5-15](chapter5.xhtml#tab5-15)中，<samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">VALUE</samp>可以是[表
    5-13](chapter5.xhtml#tab5-13)中的单个值，也可以是用大括号括起来的值列表。<samp class="SANS_TheSansMonoCd_W5Regular_11">Any_of</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Not_Any_of</samp>运算符仅适用于列表，并且条件表达式必须始终放在SDDL
    ACE中的括号内。例如，如果你想在[清单 5-5](chapter5.xhtml#Lis5-5)中使用显示的条件表达式，并与<code class="SANS_TheSansMonoCd_W5Regular_11">AccessCallback</code>
    ACE一起使用，则ACE字符串如下所示：
- en: '[PRE22]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The final component represents a security attribute for the <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    ACE. Its general format is as follows:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的组件表示<code class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</code>
    ACE的安全属性。它的一般格式如下所示：
- en: '[PRE23]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrName</samp> value is the
    name of the security attribute, <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrFlags</samp>
    is a hexadecimal number that represents the security attribute flags, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">AttrValue</samp> is one or more values
    specific to the <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrType</samp>,
    separated by commas. The <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrType</samp>
    is a short string that indicates the type of data contained in the security attribute.
    [Table 5-16](chapter5.xhtml#tab5-16) shows the defined strings, with examples.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">AttrName</samp>值是安全属性的名称，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">AttrFlags</samp>是表示安全属性标志的十六进制数字，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">AttrValue</samp>是一个或多个特定于<samp class="SANS_TheSansMonoCd_W5Regular_11">AttrType</samp>的值，值之间用逗号分隔。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">AttrType</samp>是一个短字符串，表示安全属性中包含的数据类型。[表
    5-16](chapter5.xhtml#tab5-16)显示了已定义的字符串及其示例。
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-16:</samp> <samp class="SANS_Futura_Std_Book_11">Security
    Attribute SDDL Type Strings</samp>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Heavy_B_11">表 5-16:</samp> <samp class="SANS_Futura_Std_Book_11">安全属性
    SDDL 类型字符串</samp>
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Attribute type</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Type
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Example value</samp> |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_Futura_Std_Heavy_B_11">属性类型</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">类型名称</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">示例值</samp> |'
- en: '| --- | --- | --- |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Int64</samp>
    | <samp class="SANS_Futura_Std_Book_11">Decimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">-100</samp><samp
    class="SANS_Futura_Std_Book_11">; octal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp
    class="SANS_Futura_Std_Book_11">; hexadecimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Int64</samp>
    | <samp class="SANS_Futura_Std_Book_11">十进制:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp
    class="SANS_Futura_Std_Book_11">,</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">-100</samp><samp
    class="SANS_Futura_Std_Book_11">; 八进制:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp
    class="SANS_Futura_Std_Book_11">; 十六进制:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">UInt64</samp>
    | <samp class="SANS_Futura_Std_Book_11">Decimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp
    class="SANS_Futura_Std_Book_11">; octal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp
    class="SANS_Futura_Std_Book_11">; hexadecimal:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TU</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">UInt64</samp>
    | <samp class="SANS_Futura_Std_Book_11">十进制:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">100</samp><samp
    class="SANS_Futura_Std_Book_11">; 八进制:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0100</samp><samp
    class="SANS_Futura_Std_Book_11">; 十六进制:</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">0x100</samp>
    |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">String</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"XYZ"</samp> |'
  id: totrans-416
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TS</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">字符串</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">"XYZ"</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SID</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">BA</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-0-0</samp> |'
  id: totrans-417
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TD</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">SID</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">BA</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-0-0</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TB</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Boolean</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> |'
  id: totrans-418
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">TB</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">布尔值</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">0</samp><samp class="SANS_Futura_Std_Book_11">,</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp> |'
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">OctetString</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">#0011223344</samp> |'
  id: totrans-419
  prefs: []
  type: TYPE_TB
  zh: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">RX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">八位字节串</samp>
    | <samp class="SANS_TheSansMonoCd_W5Regular_11">#0011223344</samp> |'
- en: 'To give an example, the following SDDL string represents a <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp>
    ACE with the name <samp class="SANS_TheSansMonoCd_W5Regular_11">Classification</samp>.
    It contains two string values, <samp class="SANS_TheSansMonoCd_W5Regular_11">TopSecret</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">MostSecret</samp>, and has the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">CaseSensitive</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">NonInheritable</samp>
    flags set:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，下面的 SDDL 字符串表示一个名为 <samp class="SANS_TheSansMonoCd_W5Regular_11">Classification</samp>
    的 <samp class="SANS_TheSansMonoCd_W5Regular_11">ResourceAttribute</samp> ACE。它包含两个字符串值，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">TopSecret</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">MostSecret</samp>，并且设置了
    <samp class="SANS_TheSansMonoCd_W5Regular_11">CaseSensitive</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">NonInheritable</samp>
    标志：
- en: '[PRE24]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The last field in [Listing 5-15](chapter5.xhtml#Lis5-15) to define is the SACL.
    The structure is the same as that described for the DACL, although the types of
    ACEs supported differ. If you try to use a type that is not allowed in the specific
    ACL, parsing the string will fail. In the SACL example in [Listing 5-15](chapter5.xhtml#Lis5-15),
    the only ACE is the mandatory label. The mandatory label ACE has its own access
    strings used to represent the mandatory policy, as shown in [Table 5-17](chapter5.xhtml#tab5-17).
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-17:</samp> <samp class="SANS_Futura_Std_Book_11">Mandatory
    Label Access Strings</samp>
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">Access string</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access
    name</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Access mask</samp> |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NX</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">No
    Execute Up</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000004</samp>
    |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NR</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">No
    Read Up</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000002</samp>
    |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">NW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">No
    Write Up</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">0x00000001</samp>
    |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
- en: The SID represents the integrity level of the mandatory label; again, special
    SID aliases are defined. Anything outside the list shown in [Table 5-18](chapter5.xhtml#tab5-18)
    needs to be represented as a full SID.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Heavy_B_11">Table 5-18:</samp> <samp class="SANS_Futura_Std_Book_11">Mandatory
    Label Integrity Level SIDs</samp>
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '| <samp class="SANS_Futura_Std_Heavy_B_11">SID alias</samp> | <samp class="SANS_Futura_Std_Heavy_B_11">Name</samp>
    | <samp class="SANS_Futura_Std_Heavy_B_11">SDDL SID</samp> |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">LW</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Low</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-4096</samp>
    |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">ME</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">Medium</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-8192</samp>
    |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">MP</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">MediumPlus</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-8448</samp>
    |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">HI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">High</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-12288</samp>
    |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
- en: '| <samp class="SANS_TheSansMonoCd_W5Regular_11">SI</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">System</samp>
    <samp class="SANS_Futura_Std_Book_11">integrity level</samp> | <samp class="SANS_TheSansMonoCd_W5Regular_11">S-1-16-16384</samp>
    |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
- en: The SDDL format doesn’t preserve all information you can store in a security
    descriptor. For example, the SDDL format can’t represent the <samp class="SANS_TheSansMonoCd_W5Regular_11">OwnerDefaulted</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">GroupDefaulted</samp> control
    flag, so these are discarded. SDDL also doesn’t support some ACE types, so I omitted
    those from [Table 5-8](chapter5.xhtml#tab5-8).
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, if an unsupported ACE type is encountered while converting
    a security descriptor to SDDL, the conversion process will fail. To get around
    this problem, the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSecurityDescriptor</samp>
    PowerShell command can convert a security descriptor in relative format to base64,
    as shown in [Listing 5-18](chapter5.xhtml#Lis5-18). Using base64 preserves the
    entire security descriptor and allows it to be copied easily.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Listing 5-18: Converting a security descriptor to a base64 representation'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: To retrieve the security descriptor, you can pass <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Base64</samp> parameter.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Worked Examples</samp>
  id: totrans-443
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s finish this chapter with some worked examples that use the commands you’ve
    learned about here.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Manually Parsing
    a Binary SID</samp>
  id: totrans-445
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The PowerShell module comes with commands you can use to parse SIDs that are
    structured in various forms. One of those forms is a raw byte array. You can convert
    an existing SID to a byte array using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ConvertFrom-NtSid</samp>
    command:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also convert the byte array back to a SID using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Byte</samp>
    parameter to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp>
    command, as shown here. The module will parse the byte array and return the SID:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Although PowerShell can perform these conversions for you, you’ll find it valuable
    to understand how the data is structured at a low level. For example, you might
    identify code that parses SIDs incorrectly, which could lead to memory corruption;
    through this discovery, you might find a security vulnerability.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: The best way to learn how to parse a binary structure is to write a parser,
    as we do in [Listing 5-19](chapter5.xhtml#Lis5-19).
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Listing 5-19: Manually parsing a binary SID'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: For demonstration purposes, we start by creating an arbitrary SID and converting
    it to a byte array ❶. Typically, though, you’ll receive a SID to parse in some
    other way, such as from the memory of a process. We also print the SID as hex.
    (If you refer to the SID structure shown in [Figure 5-1](chapter5.xhtml#fig5-1),
    you might already be able to pick out its various components.)
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create a <samp class="SANS_TheSansMonoCd_W5Regular_11">BinaryReader</samp>
    to parse the byte array in a structured form ❷. Using the reader, we first check
    whether the revision value is set to <samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
    ❸; if it isn’t, we throw an error. Next in the structure is the RID count as a
    byte ❹, followed by the 6-byte security authority ❺. The <samp class="SANS_TheSansMonoCd_W5Regular_11">ReadBytes</samp>
    method can return a short reader, so you’ll want to check that you read all six
    bytes.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: We now enter a loop to read the RIDs from the binary structure and append them
    to an array ❻. Next, using the security authority and the RIDs, we can run <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtSid</samp> to construct a new SID
    object ❼ and verify that the new SID matches the one we started with.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: This listing gives you an example of how to manually parse a SID (or, in fact,
    any binary structure) using PowerShell. If you’re adventurous, you could implement
    your own parser for the binary security descriptor formats, but that’s outside
    the scope of this book. It’s simpler to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    command to do the parsing for you.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Enumerating SIDs</samp>
  id: totrans-458
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LSASS service does not provide a publicly exposed method for querying every
    SID-to-name mapping it knows about. While the official Microsoft documentation
    provides a list of known SIDs, these aren’t always up to date and won’t include
    the SIDs specific to a computer or enterprise network. However, we can try to
    enumerate the mappings using brute force. [Listing 5-20](chapter5.xhtml#Lis5-20)
    defines a function, <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-AccountSids</samp>,
    to brute-force a list of the SIDs for which LSASS has a name.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Listing 5-20: Brute-forcing known SIDs'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: The function accepts a base SID and the range of RID values to test ❶. It then
    creates each SID in the list and queries for its name. If the name’s source is
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Account</samp>, which indicates
    the name was retrieved from LSASS, we output the SID’s details ❷.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: To test the function, we call it with the base SID, which contains the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Nt</samp> authority but no RIDs ❸. We
    get the list of retrieved names and SIDs from LSASS. Notice that the SIDs in the
    output are not domain SIDs, as you might expect, but <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnownGroup</samp>
    SIDs. For our purposes, the distinction between <samp class="SANS_TheSansMonoCd_W5Regular_11">WellKnownGroup</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">Alias</samp>
    is not important; they’re all groups.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个函数，我们使用包含< sclass="SANS_TheSansMonoCd_W5Regular_11">Nt</samp>权限但没有RID的基本SID调用它❸。我们从LSASS获取检索到的名称和SID列表。注意，输出中的SID不是域SID，正如你可能预期的那样，而是<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WellKnownGroup</samp> SID。对于我们的目的，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">WellKnownGroup</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Alias</samp>之间的区别并不重要；它们都是组。
- en: Next, we try brute-forcing the *BUILTIN* domain SID ❹. In this case, we’ve changed
    the RID range based on our preexisting knowledge of the valid range, but you’re
    welcome to try any other range you like. Note that you could automate the search
    by inspecting the <samp class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>
    property in the returned objects and calling <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-AccountSids</samp>
    when its value is <samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp>.
    I leave this as an exercise for the reader.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们尝试暴力破解*BUILTIN*域SID❹。在这种情况下，我们根据对有效范围的先前了解改变了RID范围，但你可以尝试任何你喜欢的其他范围。注意，你可以通过检查返回对象中的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">NameUse</samp>属性并在其值为<samp class="SANS_TheSansMonoCd_W5Regular_11">Domain</samp>时调用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-AccountSids</samp>来自动化搜索。我将此作为读者的练习。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wrapping Up</samp>
  id: totrans-465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: We started this chapter by delving into the structure of the security descriptor.
    We detailed its binary structures, such as SIDs, and looked at access control
    lists and the access control entries that make up the discretionary and system
    ACLs. We then discussed the differences between absolute and relative security
    descriptors and why the two formats exist.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过深入研究安全描述符的结构开始了本章内容。我们详细介绍了其二进制结构，如SID，并查看了访问控制列表及构成自愿和系统ACL的访问控制条目。然后，我们讨论了绝对安全描述符和相对安全描述符之间的差异，以及为什么这两种格式会共存。
- en: Next, we explored the use of the <samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Add-NtSecurityDescriptorAce</samp>
    commands to create and modify a security descriptor so that it contains whatever
    entries we require. We also saw how to display security descriptors in a convenient
    form using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    command.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们探讨了如何使用<samp class="SANS_TheSansMonoCd_W5Regular_11">New-NtSecurityDescriptor</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Add-NtSecurityDescriptorAce</samp>命令来创建和修改安全描述符，使其包含我们需要的条目。我们还展示了如何使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>命令以便捷的形式显示安全描述符。
- en: Finally, we covered the SDDL format used for representing security descriptors.
    We discussed how to represent the various types of security descriptor values,
    such as ACEs, and how you can write your own. Some tasks we haven’t yet covered
    are how to query a security descriptor from a kernel object and how to assign
    a new one. We’ll get to these topics in the next chapter.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们介绍了用于表示安全描述符的SDDL格式。我们讨论了如何表示各种类型的安全描述符值，例如ACE，以及如何编写你自己的安全描述符。我们尚未覆盖的一些任务包括如何从内核对象查询安全描述符以及如何分配一个新的安全描述符。我们将在下一章讨论这些主题。
