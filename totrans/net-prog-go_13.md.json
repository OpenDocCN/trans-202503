["```\n$ **git clone \"https://github.com/caddyserver/caddy.git\"**\nCloning into 'caddy'...\n$ **cd caddy/cmd/caddy**\n$ **go build**\n```", "```\n$ **caddy start**\n2006/01/02 15:04:05.000 INFO    admin   endpoint started\n{\"address\": \"tcp/localhost:2019\", \"enforce_origin\": false,\n\"origins\": [\"localhost:2019\", \"[::1]:2019\", \"127.0.0.1:2019\"]}\n2006/01/02 15:04:05.000 INFO    serving initial configuration\nSuccessfully started Caddy (pid=24587) - Caddy is running in the background\n```", "```\n$ **curl localhost:2019/load \\**\n1 **-X POST -H \"Content-Type: application/json\" \\** \n**-d '**\n**{**\n **\"apps\": {**\n **\"http\": {**\n **\"servers\": {**\n **\"hello\": {**\n **\"listen\": [\"localhost:2020\"],**\n       2 **\"routes\": [{**\n **\"handle\": [{**\n           3 **\"handler\": \"static_response\",**\n **\"body\": \"Hello, world!\"**\n **}]**\n **}]**\n **}**\n **}**\n **}**\n **}**\n**}'**\n```", "```\n$ **lsof -Pi :2019-2025**\nCOMMAND   PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME\ncaddy   24587 user    3u  IPv4 811511      0t0  TCP localhost:2019 (LISTEN)\ncaddy   24587 user    9u  IPv4 915742      0t0  TCP localhost:2020 (LISTEN)\n```", "```\n$ **curl localhost:2019/config/**\n{\"apps\":{\"http\":{\"servers\":{\"hello\":{\"listen\":[\"localhost:2020\"],\n\"routes\":[{\"handle\":[{\"body\":\"Hello, world!\",\"handler\":\"static_response\"}]}]}}}}}\n```", "```\n$ **curl localhost:2019/config/apps/http/servers/hello/listen**\n[\"localhost:2020\"]\n```", "```\n$ **curl localhost:2020**\nHello, world!\n```", "```\n$ **curl localhost:2019/config/apps/http/servers/hello/listen \\**\n**-X POST -H \"Content-Type: application/json\" -d '\"localhost:2021\"'**\n$ **lsof -Pi :2019-2025**\nCOMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\ncaddy   24587 user    3u  IPv4  811511      0t0  TCP localhost:2019 (LISTEN)\ncaddy   24587 user    9u  IPv4  915742      0t0  TCP localhost:2020 (LISTEN)\n1 caddy   24587 user   11u  IPv4 1148212      0t0  TCP localhost:2021 (LISTEN)\n```", "```\n$ **curl localhost:2019/config/apps/http/servers/hello/listen \\**\n**-X PATCH -H \"Content-Type: application/json\" -d '[\"localhost:2020-2025\"]'**\n$ **lsof -Pi :2019-2025**\nCOMMAND   PID USER   FD   TYPE  DEVICE SIZE/OFF NODE NAME\ncaddy   24587 user    3u  IPv4  811511      0t0  TCP localhost:2019 (LISTEN)\n1 caddy   24587 user    9u  IPv4  915742      0t0  TCP localhost:2020 (LISTEN)\ncaddy   24587 user   10u  IPv4 1149557      0t0  TCP localhost:2021 (LISTEN)\ncaddy   24587 user   11u  IPv4 1166333      0t0  TCP localhost:2022 (LISTEN)\ncaddy   24587 user   12u  IPv4 1169409      0t0  TCP localhost:2023 (LISTEN)\ncaddy   24587 user   13u  IPv4 1169413      0t0  TCP localhost:2024 (LISTEN)\n2 caddy   24587 user   14u  IPv4 1169417      0t0  TCP localhost:2025 (LISTEN)\n```", "```\n$ **curl localhost:2019/config/apps/http/servers/test \\**\n**-X POST -H \"Content-Type: application/json\" \\**\n**-d '{**\n **\"listen\": [\"localhost:2030\"],**\n **\"routes\": [{**\n **\"handle\": [{**\n **\"handler\": \"static_response\",**\n **\"body\": \"Welcome to my temporary test server.\"**\n **}]**\n **}]**\n**}'**\n```", "```\n$ **curl localhost:2030**\nWelcome to my temporary test server.\n```", "```\n$ **curl localhost:2019/config/apps/http/servers/test -X DELETE**\n```", "```\n$ **caddy start --config caddy.json**\nSuccessfully started Caddy (pid=46112) - Caddy is running in the background\n$ **curl localhost:2019/config/**\n{\"apps\":{\"http\":{\"servers\":{\"hello\":{\"listen\":[\"localhost:2020\"],\n\"routes\":[{\"handle\":[{\"body\":\"Hello, world!\",\"handler\":\"static_response\"}]}]}}}}}\n```", "```\n$ **caddy start --config Caddyfile --adapter caddyfile**\n```", "```\n$ **mkdir caddy-toml-adapter**\n$ **cd caddy-toml-adapter**\n1 $ **go mod init github.com/awoodbeck/caddy-toml-adapter**\ngo: creating new go.mod: module github.com/awoodbeck/caddy-toml-adapter\n```", "```\npackage tomladapter\n\nimport (\n    \"encoding/json\"\n\n    \"github.com/caddyserver/caddy/v2/caddyconfig\"\n    \"github.com/pelletier/go-toml\"\n)\n\nfunc init() {\n    caddyconfig.RegisterAdapter(1\"toml\", 2Adapter{})\n}\n\n// Adapter converts a TOML Caddy configuration to JSON.\ntype Adapter struct{}\n\n// Adapt the TOML body to JSON.\nfunc (a Adapter) Adapt(body []byte, _ map[string]interface{}) (\n    []byte, []caddyconfig.Warning, error) {\n    tree, err := 3toml.LoadBytes(body)\n    if err != nil {\n        return nil, nil, err\n    }\n\n    b, err := json.Marshal(4tree.ToMap())\n\n    return b, nil, err\n}\n```", "```\n$ **go mod tidy**\ngo: finding module for package github.com/caddyserver/caddy/v2/caddyconfig\ngo: found github.com/caddyserver/caddy/v2/caddyconfig in\ngithub.com/caddyserver/caddy/v2 v2.0.0\n```", "```\nfunc(http.Handler) http.Handler\n```", "```\ntype Handler interface {\n    ServeHTTP(http.ResponseWriter, *http.Request)\n}\n```", "```\nh := middleware1(middleware2(middleware3(myHandler)))\n```", "```\ntype Handler interface {\n    ServeHTTP(http.ResponseWriter, *http.Request) error\n}\n```", "```\ntype MiddlewareHandler interface {\n    ServeHTTP(http.ResponseWriter, *http.Request, Handler) error\n}\n```", "```\n$ **mkdir caddy-restrict-prefix**\n$ **cd caddy-restrict-prefix**\n$ **go mod init github.com/awoodbeck/caddy-restrict-prefix**\ngo: creating new go.mod: module github.com/awoodbeck/caddy-restrict-prefix\n```", "```\npackage restrictprefix\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"strings\"\n\n    \"github.com/caddyserver/caddy/v2\"\n    \"github.com/caddyserver/caddy/v2/modules/caddyhttp\"\n    \"go.uber.org/zap\"\n)\n\nfunc init() {\n  1caddy.RegisterModule(RestrictPrefix{})\n}\n\n// RestrictPrefix is middleware that restricts requests where any portion\n// of the URI matches a given prefix.\ntype RestrictPrefix struct {\n  2Prefix string `json:\"prefix,omitempty\"`\n  3logger *zap.Logger\n}\n\n// CaddyModule returns the Caddy module information.\nfunc (RestrictPrefix) 4CaddyModule() caddy.ModuleInfo {\n    return caddy.ModuleInfo{\n      5ID:  \"http.handlers.restrict_prefix\",\n      6New: func() caddy.Module { return new(RestrictPrefix) },\n    }\n}\n```", "```\n`--snip--`\n\n// Provision a Zap logger to RestrictPrefix.\nfunc (p *RestrictPrefix) 1Provision(ctx caddy.Context) error {\n    p.logger = 2ctx.Logger(p)\n    return nil\n}\n\n// Validate the prefix from the module's configuration, setting the\n// default prefix \".\" if necessary.\nfunc (p *RestrictPrefix) 3Validate() error {\n    if p.Prefix == \"\" {\n        p.Prefix = \".\"\n    }\n    return nil\n}\n```", "```\n`--snip--`\n\n// ServeHTTP implements the caddyhttp.MiddlewareHandler interface.\nfunc (p RestrictPrefix) ServeHTTP(w http.ResponseWriter, r *http.Request,\n    next caddyhttp.Handler) error {\n 1 for _, part := range strings.Split(r.URL.Path, \"/\") {\n        if strings.HasPrefix(part, p.Prefix) {\n          2http.Error(w, \"Not Found\", http.StatusNotFound)\n            if p.logger != nil {\n              3p.logger.Debug(fmt.Sprintf(\n                    \"restricted prefix: %q in %s\", part, r.URL.Path))\n }\n            return nil\n        }\n    }\n    return 4next.ServeHTTP(w, r)\n}\n\nvar (\n 5 _ caddy.Provisioner           = (*RestrictPrefix)(nil)\n    _ caddy.Validator             = (*RestrictPrefix)(nil)\n    _ caddyhttp.MiddlewareHandler = (*RestrictPrefix)(nil)\n)\n```", "```\n$ **go mod tidy**\ngo: finding module for package github.com/caddyserver/caddy/v2\ngo: finding module for package github.com/caddyserver/caddy/v2/modules/caddyhttp\ngo: finding module for package go.uber.org/zap\ngo: found github.com/caddyserver/caddy/v2 in github.com/caddyserver/caddy/v2 v2.0.0\ngo: found go.uber.org/zap in go.uber.org/zap v1.15.0\ngo: downloading github.com/golang/mock v1.4.1\ngo: downloading github.com/onsi/gomega v1.8.1\ngo: downloading github.com/smallstep/assert v0.0.0-20200103212524-b99dc1097b15\ngo: downloading github.com/onsi/ginkgo v1.11.0\ngo: downloading github.com/imdario/mergo v0.3.7\ngo: downloading github.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1\ngo: downloading github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b\ngo: downloading github.com/alangpierce/go-forceexport v0.0.0-20160317203124-\n8f1d6941cd75\ngo: downloading github.com/chzyer/logex v1.1.10\ngo: downloading github.com/hpcloud/tail v1.0.0\ngo: downloading gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7\ngo: downloading gopkg.in/fsnotify.v1 v1.4.7\n```", "```\n$ **mkdir caddy**\n$ **cd caddy**\n```", "```\npackage main\n\nimport (\n 1 cmd \"github.com/caddyserver/caddy/v2/cmd\"\n 2 _ \"github.com/caddyserver/caddy/v2/modules/standard\"\n\n    // Injecting custom modules into Caddy\n 3 _ \"github.com/awoodbeck/caddy-restrict-prefix\"\n 4 _ \"github.com/awoodbeck/caddy-toml-adapter\"\n)\n\nfunc main() {\n    cmd.Main()\n}\n```", "```\n$ **go mod init caddy**\n$ **go build**\n```", "```\n$ **./caddy list-modules | grep \"toml\\|restrict_prefix\"**\ncaddy.adapters.toml\nhttp.handlers.restrict_prefix\n```", "```\n> **caddy list-modules | findstr \"toml restrict_prefix\"**\ncaddy.adapters.toml\nhttp.handlers.restrict_prefix\n```", "```\n$ **mkdir files backend**\n```", "```\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"os/signal\"\n    \"time\"\n)\n\nvar addr = flag.String(\"listen\", 1\"localhost:8080\", \"listen address\")\n\nfunc main() {\n    flag.Parse()\n\n    c := make(chan os.Signal, 1)\n    signal.Notify(c, os.Interrupt)\n\n    err := 2run(*addr, c)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    log.Println(\"Server stopped\")\n}\n```", "```\n`--snip--`\n\nfunc run(addr string, c chan os.Signal) error {\n    mux := http.NewServeMux()\n    mux.Handle(\"/\",\n        http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            clientAddr := r.Header.Get(1\"X-Forwarded-For\")\n            log.Printf(\"%s -> %s -> %s\", clientAddr, r.RemoteAddr, r.URL)\n            _, _ = w.Write(2index)\n        }),\n    )\n\n    srv := &http.Server{\n        Addr:              addr,\n        Handler:           mux,\n        IdleTimeout:       time.Minute,\n        ReadHeaderTimeout: 30 * time.Second,\n    }\n\n    go func() {\n        for {\n            if <-c == os.Interrupt {\n                _ = srv.Close()\n                return\n            }\n        }\n    }()\n\n    fmt.Printf(\"Listening on %s ...\\n\", srv.Addr)\n    err := srv.ListenAndServe()\n\n if err == http.ErrServerClosed {\n        err = nil\n    }\n\n    return err\n}\n```", "```\n`--snip--`\n\nvar index = []byte(`<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Caddy Backend Test</title>\n    <link href=1\"/style.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <p><img src=2\"/hiking.svg\" alt=\"hiking gopher\"></p>\n</body>\n</html>`)\n```", "```\n1 [apps.http.servers.test_server]\nlisten = [\n    'localhost:2020',\n]\n```", "```\n`--snip--`\n\n1 [[apps.http.servers.test_server.routes]]\n2 [[apps.http.servers.test_server.routes.match]]\npath = [\n    '/backend',\n 3 '/backend/*',\n]\n4 [[apps.http.servers.test_server.routes.handle]]\nhandler = 'reverse_proxy'\n5 [[apps.http.servers.test_server.routes.handle.upstreams]]\ndial = 6'localhost:8080'\n```", "```\n`--snip--`\n\n1 [[apps.http.servers.test_server.routes]]\n2 [[apps.http.servers.test_server.routes.handle]]\nhandler = 'restrict_prefix'\nprefix = '.'\n3 [[apps.http.servers.test_server.routes.handle]]\nhandler = 'file_server'\nroot = 4'./files'\nindex_names = [\n  5'index.html',\n]\n```", "```\n$ **./caddy start --config caddy.toml --adapter toml**\n```", "```\n> **caddy start --config caddy.toml --adapter toml**\n```", "```\n$ **cd backend**\n$ **go run backend.go**\nListening on localhost:8080 ...\n```", "```\n[[apps.http.servers.server.routes.match]]\nhost = [\n    'example.com',\n]\n```"]