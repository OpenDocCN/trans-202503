["```\nNSMutableDictionary *dict = [NSMutableDictionary dictionary];\nNSData *passwordData = [@\"mypassword\" dataUsingEncoding:NSUTF8StringEncoding];\n\n[dict setObject:(__bridge id)kSecClassGenericPassword forKey:(__bridge id)\n     kSecClass];\n[dict setObject:@\"Conglomco login\" forKey:(__bridge id)kSecAttrLabel];\n[dict setObject:@\"This is your password for the Conglomco service.\" forKey:\n     (__bridge id)kSecAttrDescription];\n[dict setObject:@\"dthiel\" forKey:(__bridge id)kSecAttrAccount];\n[dict setObject:@\"com.isecpartners.SampleKeychain\" forKey:(__bridge id)\n     kSecAttrService];\n[dict setObject:passwordData forKey:(__bridge id)kSecValueData];\n[dict setObject:(__bridge id)kSecAttrAccessibleWhenUnlocked forKey:(__bridge id)\n     kSecAttrAccessible];\n\nOSStatus error = SecItemAdd((__bridge CFDictionaryRef)dict, NULL);\nif (error == errSecSuccess) {\n    NSLog(@\"Yay\");\n}\n```", "```\nNSString *newPassword = @\"\";\nNSMutableDictionary *dict = [NSMutableDictionary dictionary];\n\n[dict setObject:(__bridge id)kSecClassGenericPassword forKey:(__bridge id)\n     kSecClass];\n[dict setObject:@\"dthiel\" forKey:(__bridge id)kSecAttrAccount];\n[dict setObject:@\"com.isecpartners.SampleKeychain\" forKey:(__bridge id)\n     kSecAttrService];\n\nNSDictionary *updatedAttribute = [NSDictionary dictionaryWithObject:[newPassword\n     dataUsingEncoding:NSUTF8StringEncoding] forKey:(__bridge id)kSecValueData];\nOSStatus error = SecItemUpdate((__bridge CFDictionaryRef)dict, (__bridge\n     CFDictionaryRef)updatedAttribute);\n```", "```\n[dict setObject:(__bridge id)kSecClassGenericPassword forKey:(__bridge id)\n     kSecClass];\n[dict setObject:@\"dthiel\" forKey:(__bridge id)kSecAttrAccount];\n[dict setObject:@\"com.isecpartners.SampleKeychain\" forKey:(__bridge id)\n     kSecAttrService];\n\n[dict setObject:(id)kCFBooleanTrue forKey:(__bridge id)kSecReturnAttributes];\n\nNSDictionary *result = nil;\nOSStatus error = SecItemCopyMatching((__bridge CFDictionaryRef)dict, (void *)&\n     result);\nNSLog(@\"Yay %@\", result);\n```", "```\nNSMutableDictionary *searchDictionary = [NSMutableDictionary dictionary];\n\n[searchDictionary setObject:(__bridge id)kSecClassGenericPassword forKey:\n     (__bridge id)kSecClass];\n[searchDictionary setObject:@\"dthiel\" forKey:(__bridge id)kSecAttrAccount];\n[searchDictionary setObject:@\"com.isecpartners.SampleKeychain\" forKey:(__bridge id)\n     kSecAttrService];\n\nOSStatus error = SecItemDelete((__bridge CFDictionaryRef)searchDictionary);\n```", "```\n#import \"Lockbox.h\"\n\nNSString *keyname = @\"KeyForMyApp\";\nNSString *secret = @\"secretstring\";\n\n[Lockbox setString:secret\n             forKey:keyname\n     accessibility:kSecAttrAccessibleWhenUnlocked];\n```", "```\nNSString *result = [Lockbox stringForKey:secret];\n```", "```\n[dict setObject:@\"DTHIELISEC.securitySuite\" forKey:(id)kSecAttrAccessGroup];\n```", "```\n[query setObject:(id)kCFBooleanTrue forKey:(id)kSecAttrSynchronizable];\n```", "```\nNSData *data = [request responseData];\n\nif (data) {\n    NSError *error = nil;\n    NSString *downloadFilePath = [NSString stringWithFormat:@\"%@mydoc.pdf\", NS\n     TemporaryDirectory()];\n    [data writeToFile:downloadFilePath options:NSDataWritingFileProtectionComplete\n     error:&error];\n```", "```\nNSArray *searchPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NS\n     UserDomainMask, YES);\nNSString *applicationDocumentsDirectory = [searchPaths lastObject];\nNSString *filePath = [applicationDocumentsDirectory stringByAppendingPathComponent:\n     @\"mySensitivedata.txt\"];\n\nNSError *error = nil;\nNSDictionary *attr =\n      [NSDictionary dictionaryWithObject:NSFileProtectionComplete\n                                  forKey:NSFileProtectionKey];\n\n[[NSFileManager defaultManager] setAttributes:attr\n                                 ofItemAtPath:filePath\n                                        error:&error];\n```", "```\nNSString *databasePath = [documentsDirectory stringByAppendingPathComponent:@\"\n     MyNewDB.sqlite\"];\n\nsqlite3_open_v2([databasePath UTF8String], &handle, SQLITE_OPEN_CREATE|\n     SQLITE_OPEN_READWRITE_SQLITE_OPEN_FILEPROTECTION_COMPLETEUNLESSOPEN,NULL);\n```", "```\n- (void)applicationProtectedDataWillBecomeUnavailable:\n    (UIApplication *)application {\n\n    [self [theBodies hide]];\n}\n\n- (void)applicationProtectedDataDidBecomeAvailable:\n    (UIApplication *)application {\n\n    [self [theBodies exhume]];\n}\n```", "```\n   - (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:\n       (NSDictionary*)launchOptions {\n\n➊ NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];\n\n➋ [nc addObserver:self\n          selector:@selector(dataGoingAway:)\n              name:UIApplicationProtectedDataWillBecomeUnavailable\n            object:nil];\n   }\n\n➌ - (void)dataGoingAway {\n\n       [self [theBodies hide]];\n\n   }\n```", "```\nif ([[UIApplication sharedApplication] isProtectedDataAvailable]) {\n\n    [self [theBodies hide]];\n}\n```", "```\nCCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options,\n   const void *key, size_t keyLength, const void *iv, const void *dataIn,\n   size_t dataInLength, void *dataOut, size_t dataOutAvailable,\n   size_t *dataOutMoved);\n```", "```\nuint8_t randomdata[16];\nint result = SecRandomCopyBytes(kSecRandomDefault, 16, (uint8_t*)randomdata);\n```", "```\n   char secret[] = \"swordfish\";\n   size_t length = sizeof(secret);\n   unsigned char hash[CC_SHA256_DIGEST_LENGTH];\n\n➊ CC_SHA256(data, length, hash);\n```", "```\n#ifdef COMMON_DIGEST_FOR_OPENSSL\n\n--snip--\n\n#define SHA_DIGEST_LENGTH        CC_SHA1_DIGEST_LENGTH\n#define SHA_CTX                    CC_SHA1_CTX\n#define SHA1_Init                  CC_SHA1_Init\n#define SHA1_Update                CC_SHA1_Update\n#define SHA1_Final                 CC_SHA1_Final\n```", "```\n#define COMMON_DIGEST_FOR_OPENSSL\n#include <CommonCrypto/CommonDigest.h>\n\nSHA_CTX ctx;\nunsigned char hash[SHA_DIGEST_LENGTH];\n\nSHA1_Init(&ctx);\nmemset(hash, 0, sizeof(hash));\nSHA1_Update(&ctx, \"Secret chunk\", 12);\nSHA1_Update(&ctx, \"Other secret chunk\", 18);\nSHA1_Final(hash, &ctx);\n```", "```\n   #include <CommonCrypto/CommonDigest.h>\n   #include <CommonCrypto/CommonHMAC.h>\n\n➊ NSData *key = [@\"key for the hash\" dataUsingEncoding:NSUTF8StringEncoding];\n➋ NSData *data = [@\"data to be hashed\" dataUsingEncoding:NSUTF8StringEncoding];\n➌ NSMutableData *hash = [NSMutableData dataWithLength:CC_SHA256_DIGEST_LENGTH];\n➍ CCHmac(kCCHmacAlgSHA256, [key bytes], [key length], [data bytes], [data length],\n         [hash mutableBytes]);\n```", "```\nNSData *data = [@\"Data\" dataUsingEncoding:NSUTF8StringEncoding];\nNSError *error;\nNSData *encryptedData = [RNEncryptor encryptData:data\n                                    withSettings:kRNCryptorAES256Settings\n                                        password:aPassword\n                                           error:&error];\n```", "```\nNSData *decryptedData = [RNDecryptor decryptData:encryptedData\n                                    withPassword:aPassword\n                                           error:&error];\n```", "```\n➊ LAContext *context = [[LAContext alloc] init];\n➋ NSError *error = nil;\n➌ NSString *reason = @\"We use this to verify your identity\";\n\n➍ if ([context canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n       error:&error]) {\n➎     [context evaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics\n              localizedReason:reason\n                        reply:^(BOOL success, NSError *error) {\n                          if (success) {\n➏                             NSLog(@\"Hooray, that's your finger!\");\n                          } else {\n➐                 NSLog(@\"Couldn't read your fingerprint. Falling back to PIN or\n       something.\");\n              }\n          }];\n   } else {\n       // Something went wrong. Maybe the policy can't be evaluated because the\n       // device doesn't have a fingerprint reader.\n➑     NSLog(@\"Error: %@ %@\", error, [error userInfo]);\n   }\n```"]