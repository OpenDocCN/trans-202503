- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">7</samp> <samp class="SANS_Dogma_OT_Bold_B_11">EXPLORING
    MACHINE LEARNING</samp>
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">7</samp> <samp class="SANS_Dogma_OT_Bold_B_11">探索机器学习</samp>
- en: '![](../images/opener-img.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/opener-img.png)'
- en: This chapter explains how you can use Dash to visually explore and present the
    internals of machine learning models and classification algorithms. For instance,
    say you create a machine learning model for self-driving cars that classifies
    objects into humans, plants, and other cars, and you need to be able to explain
    to other programmers and non-technical management how and why your model works.
    Dashboard apps can help you do this in a quick, convincing, and visually appealing
    way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了如何使用 Dash 直观地探索和展示机器学习模型及分类算法的内部。例如，假设你创建了一个自驾车的机器学习模型，该模型将物体分类为人类、植物和其他汽车，你需要向其他程序员和非技术管理人员解释你的模型是如何工作的以及为什么有效。仪表盘应用程序可以帮助你以快速、令人信服且视觉上吸引人的方式做到这一点。
- en: In particular, this chapter starts with a conceptual introduction to the *support
    vector machine (SVM)*, the popular machine learning classification algorithm.
    SVMs provide a way to categorize data by telling us how to accurately split the
    data so that it is placed in the correct category. We’ll visualize the functioning
    of SVMs in a dashboard app using various kinds of plots and graphs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章特别从支持向量机（SVM）这一流行的机器学习分类算法的概念介绍开始。SVM 提供了一种通过告诉我们如何准确地划分数据，从而将数据放置到正确类别中的方式。我们将在仪表盘应用程序中使用各种图表和图形来可视化
    SVM 的工作原理。
- en: We’ll then use the powerful NumPy library for numerical computations and the
    easy-to-use machine learning algorithms from scikit-learn. Most importantly, you’ll
    experience the great benefit of being able to use the gallery as a basis for diving
    deeper into more advanced dashboard applications written by the pros.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用强大的 NumPy 库进行数值计算，并利用 scikit-learn 提供的易用机器学习算法。最重要的是，你将体验到使用这个图库作为基础，深入探索专业人士编写的更高级仪表盘应用程序的巨大好处。
- en: This chapter also introduces *wrapper functions*, a new Dash concept for creating
    custom, reusable components to give you more options than just the predefined
    Dash and HTML components. You’ll also learn about some new Dash standard components
    such as contour plots and graphs, and we’ll cover the Dash *load spinner*, which
    gives the user visual feedback when a specific dashboard component is loading.
    Load spinners are useful for more complicated dashboard applications that build
    slowly, often due to heavy computational load.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还介绍了*包装函数*，这是 Dash 中用于创建自定义、可重用组件的新概念，提供了比预定义的 Dash 和 HTML 组件更多的选择。你还将学习一些新的
    Dash 标准组件，如轮廓图和图形，并且我们将介绍 Dash 的*加载指示器*，它在特定仪表盘组件加载时向用户提供视觉反馈。加载指示器对于那些因为计算负载较重而加载缓慢的复杂仪表盘应用程序非常有用。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: '*The purpose of this chapter is to provide you with an overview of what is
    possible with Dash and to help you develop further skills. We don’t go too far
    into the weeds on any one topic. Our intention is to be informative rather than
    comprehensive, so if anything is particularly interesting to you, we recommend
    you check out the supplementary material on the Charming Data YouTube channel
    and on the companion website to this book:* [https://learnplotlydash.com](https://learnplotlydash.com).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*本章的目的是为你提供 Dash 可以实现的概述，并帮助你发展更多的技能。我们不会在任何一个主题上深入探讨。我们的目标是提供信息，而不是全面覆盖，因此，如果某个内容特别引起你的兴趣，我们建议你查看
    Charming Data YouTube 频道以及本书配套网站上的补充材料：* [https://learnplotlydash.com](https://learnplotlydash.com)。'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dashboard Apps to Make Machine Learning
    Models</samp> <samp class="SANS_Futura_Std_Bold_B_11">More Intuitive</samp>
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">仪表盘应用程序使机器学习模型</samp> <samp class="SANS_Futura_Std_Bold_B_11">更直观</samp>
- en: As machine learning becomes more prevalent in computer science and in our everyday
    lives, it’s increasingly important to understand how computers reach the conclusions
    they reach. Machines can beat human grandmasters in chess and Go, reduce accident
    rates in many traffic scenarios, and produce more goods than human workers in
    a factory environment. When it comes to measurable performance, machines can often
    prove their superiority, convincing even the fiercest critics that their power
    can free up human labor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着机器学习在计算机科学和我们日常生活中变得越来越普及，理解计算机如何得出结论变得愈发重要。机器可以在国际象棋和围棋中战胜人类棋王，减少许多交通场景中的事故发生率，并在工厂环境中生产比人工更多的商品。当谈到可量化的表现时，机器往往能够证明它们的优越性，甚至能说服最激烈的批评者，认为它们的力量能够解放人类劳动力。
- en: However, it can be dangerous to observe the effectiveness of machines only through
    their performance metrics. We can’t know how machines will perform in extreme
    situations that couldn’t have been learned from datasets; data-driven approaches
    will always be biased toward past experiences. If a machine has not observed a
    stock market crash of 95 percent in 100 years of stock market history, it will
    unlikely consider this scenario in its models, but this scenario will likely occur
    someday in the future.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅通过机器的表现指标来观察其有效性可能是危险的。我们无法知道机器在无法从数据集学习到的极端情况中会如何表现；数据驱动的方法总是会偏向于过去的经验。如果一台机器在100年的股市历史中没有观察到95%的股市崩盘，它很可能不会在其模型中考虑到这种情况，但这种情况在未来某天很可能会发生。
- en: To mitigate this danger, organizations must better understand where the “intelligence”
    of machines comes from. What are their assumptions? On what basis do they reach
    their conclusions? How does their behavior change when presented with extreme
    inputs? A machine learning model from the 1960s would undoubtedly consider negative
    interest rates as “extreme” or even “impossible.” Today we know better.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了降低这种风险，组织必须更好地理解机器“智能”的来源。它们的假设是什么？它们是基于什么做出结论的？在面对极端输入时，它们的行为会如何变化？1960年代的机器学习模型无疑会把负利率视为“极端”甚至是“不可行”的。今天我们知道得更清楚了。
- en: This leads us to the motivation of machine learning dashboards. A dashboard
    is a powerful tool for visualizing what is going on *inside* a machine. You can
    train a model and observe how it performs when given changing inputs. You can
    test extreme cases. You can see the internals and assess potential risks by overfitting
    the learning to past data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了机器学习仪表盘的动机。仪表盘是一个强大的工具，可以可视化机器内部发生的事情。你可以训练一个模型，并观察它在输入变化时的表现。你可以测试极端情况。你可以查看内部机制，并通过对过去数据的过拟合来评估潜在风险。
- en: Visualizing machine learning models allows you to *show* your models to your
    clients, enabling them to play with the input parameters and reach a level of
    trust in the models that would never have been possible in command line models.
    Dashboards help make the intelligence of your machines tangible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化机器学习模型可以让你*展示*你的模型给客户，让他们能够调整输入参数，从而建立起对模型的信任，这是在命令行模型中永远无法实现的。仪表盘帮助让机器的智能变得可触摸。
- en: '<samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Classification: A
    Short Guide</samp>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">分类：简短指南</samp>
- en: You don’t need to have an in-depth understanding of classification or SVMs to
    follow the app in this chapter. We’ll go into some detail to facilitate understanding
    for those who are interested, but if you want to skip this section and the SVM
    section after it, feel free to do so and treat the SVM algorithm as a black box
    as you read through the rest of the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要深入理解分类或支持向量机（SVM）就能跟随本章中的应用。我们会为那些有兴趣的读者提供一些详细的解释，但如果你想跳过这一部分以及后面的SVM部分，完全可以这样做，并把SVM算法当作一个黑箱，继续阅读后面的内容。
- en: Still here? Okay, let’s dive into the very basics of the classification problem
    in machine learning.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还在吗？好吧，让我们深入了解机器学习中的分类问题的基础知识。
- en: 'Generally, the classification problem attempts to assign a category (that is,
    a class) to input data based on the learnings from a set of provided labeled (classified)
    training data. For example, if we want to predict what major students will likely
    study at college based on training data, we might measure aptitude for creative
    and logical thinking for each student in a school. The goal is to create a classification
    algorithm that predicts a label—the students’ predicted majors—from the features:
    aptitude for creative versus logical thinking.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，分类问题试图根据一组提供的标注（已分类）训练数据中的学习，给输入数据分配一个类别（即类别标签）。例如，如果我们想根据训练数据预测学生可能会在大学学习的专业，我们可能会测量每个学生在学校的创造性和逻辑思维能力。目标是创建一个分类算法，从特征（创造性与逻辑思维能力的对比）中预测标签——即学生预测的专业。
- en: SVMs, such as the one visualized in this dashboard app, are *classification*
    algorithms. Classification algorithms take a set of data and assign to each data
    point a label corresponding to a particular category, based on model learnings
    from training data. More specifically, a classification algorithm will search
    for a *decision boundary* that divides the data into two or more classes. A linear
    SVM models the decision boundary in an *n*-dimensional space as an *(n – 1)*-dimensional
    plane that divides the data points into two classes. All data points on one side
    of the decision boundary belong to one class and all data points on the other
    side belong to another class. Thus, assuming you can represent all data points
    in an *n*-dimensional space and you have an *(n – 1)*-dimensional decision boundary,
    you can use the decision boundary to classify new data, because any new data point
    falls on exactly one side of the boundary. Roughly speaking, the goal of classification,
    then, is to identify the decision boundary that separates the training and test
    data well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 支持向量机（SVM），例如在此仪表盘应用中可视化的那种，是*分类*算法。分类算法接受一组数据，并根据从训练数据中学到的模型，为每个数据点分配一个标签，表示该数据点所属的特定类别。更具体地说，分类算法将寻找一个*决策边界*，将数据划分为两个或更多类别。线性支持向量机将决策边界建模为*n*维空间中的*(n
    – 1)*维平面，从而将数据点分为两类。决策边界一侧的所有数据点属于一个类别，而另一侧的所有数据点属于另一个类别。因此，假设你能在*n*维空间中表示所有数据点，并且你有一个*(n
    – 1)*维决策边界，你可以使用该决策边界来对新数据进行分类，因为任何新数据点都会落在决策边界的某一侧。粗略地说，分类的目标就是识别一个决策边界，将训练数据和测试数据有效地分开。
- en: '[Figure 7-1](chapter7.xhtml#fig7-1) gives an example inspired by but slightly
    modified from *Python One-Liners* by Christian Mayer (No Starch Press, 2020).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-1](chapter7.xhtml#fig7-1) 给出了一个例子，灵感来源于但稍作修改的*Python One-Liners*，作者是Christian
    Mayer（No Starch Press，2020）。'
- en: '![](../images/Figure7-1.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-1.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-1: Example classification
    problem: different decision boundaries would lead to different classifications
    of the new data point (either “computer science” or “art”)</samp>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 7-1：示例分类问题：不同的决策边界会导致对新数据点的不同分类（可以是“计算机科学”或“艺术”）</samp>
- en: 'This classification scenario creates a classification model that helps aspiring
    university students find a field of study that may fit their strengths. We have
    training data from previous students from two fields: computer science and art.
    Fortunately, the students already provided us with an estimation of their own
    logical and creative thinking skills. When mapped into a two-dimensional space
    that models logical and creative thinking as separate axes, the data seems to
    be clustered so that the computer science students tend to be strong in logical
    thinking whereas the artists tend to be strong in creative thinking. We use the
    data to find a decision boundary that maximizes the classification accuracy for
    the training data. Technically, the obtained classification model will only give
    aspiring students a hint about what they are likely to pick based on their strengths.
    It doesn’t necessarily help them decide what they should be picking (for example,
    to maximize their happiness). That is a much harder problem.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分类场景创建了一个分类模型，帮助有抱负的大学生找到可能符合自己优势的学科领域。我们有来自两个学科的前学生的训练数据：计算机科学和艺术。幸运的是，这些学生已经提供了他们自己的逻辑思维和创造力估计值。当数据映射到一个二维空间时，将逻辑和创造性思维视为独立的坐标轴，数据似乎呈现出一种聚类模式，计算机科学的学生通常在逻辑思维上较强，而艺术类学生通常在创造力上较强。我们使用这些数据来找到一个决策边界，以最大化训练数据的分类准确性。从技术上讲，所获得的分类模型仅仅给有抱负的学生提供一个关于他们基于优势可能选择的学科方向的提示。它并不一定能帮助他们决定应该选择什么（例如，最大化他们的幸福感）。那是一个更加复杂的问题。
- en: We’ll use the decision boundary to classify new users for whom we only have
    data on their logic and creativity. The figure shows two linear classifiers (depicted
    with lines) that perfectly separate the data when used as decision boundaries.
    They have 100 percent accuracy when classifying the test data, so both lines seem
    to be equally good. For a machine learning algorithm to perform well, it must
    choose the decision boundary wisely. But how do we find the best one?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用决策边界来分类新的用户，这些用户只有关于其逻辑和创造力的数据。图中展示了两个线性分类器（用线表示），当作为决策边界时，它们能够完美地将数据分开。它们在分类测试数据时的准确率为
    100%，因此这两条线看起来都同样优秀。为了让机器学习算法表现良好，它必须明智地选择决策边界。但是，我们如何找到最好的边界呢？
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Support Vector Machines</samp>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">支持向量机（SVM）</samp>
- en: SVMs attempt to maximize the distance between the closest data points from both
    classes and the decision boundary; this distance between the closest points and
    the decision boundary line is known as the *margin of safety*, *safety margin*,
    or just *margin*. These closest data points are called *support vectors*. By maximizing
    the margin of safety, SVMs aim to minimize the error when classifying new points
    that are close to the decision boundary.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 支持向量机（SVM）试图最大化来自两个类别的最接近数据点与决策边界之间的距离；这个距离被称为*安全边距*、*边际*或简称为*边距*。这些最接近的点被称为*支持向量*。通过最大化安全边距，SVM
    旨在最小化分类新点时的错误，尤其是那些接近决策边界的点。
- en: As a visual example, take a look at [Figure 7-2](chapter7.xhtml#fig7-2).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个视觉示例，请查看[图 7-2](chapter7.xhtml#fig7-2)。
- en: '![](../images/Figure7-2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-2.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-2: Example SVM classification
    with decision boundary and support vectors</samp>'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 7-2：示例 SVM 分类及决策边界与支持向量</samp>
- en: The SVM classifier finds the support vectors for each class and places the line
    at the greatest distance from each (halfway between) so that the zone between
    the different support vectors is as thick as possible. This line is the decision
    boundary. In [Figure 7-2](chapter7.xhtml#fig7-2) a new data point is added that
    needs classifying; however, because the point to be classified falls in the margin
    zone, the model cannot confidently decide whether it belongs to the art class
    or the computer science class. This nicely demonstrates that SVMs come with a
    built-in mechanism to explicitly tell us whether the model performs a borderline
    classification. For example, the SVM may tell us that a student ranking high on
    creativity belongs to the art class and a student ranking high in logical thinking
    belongs to the computer science class, but a student ranking high in creativity
    *and* logic cannot be confidently assigned to either class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SVM 分类器为每个类别找到支持向量，并将直线放置在每个支持向量的最大距离处（即两者之间的中点），这样不同支持向量之间的区域就尽可能厚。这个直线就是决策边界。在[图
    7-2](chapter7.xhtml#fig7-2)中，添加了一个需要分类的新数据点；然而，由于该点位于间隔区，模型无法自信地判断它属于艺术类还是计算机科学类。这恰好展示了
    SVM 内建机制，它可以明确告诉我们模型是否进行了边界分类。例如，SVM 可能会告诉我们，一个在创造力方面排名很高的学生属于艺术类，而一个在逻辑思维方面排名很高的学生属于计算机科学类，但一个在创造力和逻辑思维方面都很强的学生则无法自信地归属于任何一个类别。
- en: Note that SVM models can also be trained in a way that allows for *outliers*
    in the training data; these are points that fall on one side of the decision boundary
    but belong to the other side. This is the most common case for real-world data.
    However, instead of exploring these SVM optimizations further, we suggest you
    check out the excellent SVM classification tutorials listed at the end of this
    chapter so that we can dive into the exciting dashboard app right away.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，SVM 模型也可以通过允许训练数据中的*异常值*来进行训练；这些异常值是位于决策边界一侧，但实际上属于另一侧的点。这是现实世界数据中最常见的情况。然而，本文不会进一步探讨这些
    SVM 优化方法，而是建议您查看本章末尾列出的优秀 SVM 分类教程，这样我们可以立即深入了解这个令人兴奋的仪表板应用。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The SVM Explorer App</samp>
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">SVM Explorer 应用</samp>
- en: '[Figure 7-3](chapter7.xhtml#fig7-3) shows how we can visualize SVMs using the
    SVM Explorer app, a Python dashboard app from the gallery that uses various kinds
    of plots and graphs. Feel free to play with the live project at [*https://<wbr>dash<wbr>-gallery<wbr>.plotly<wbr>.host<wbr>/dash<wbr>-svm*](https://dash-gallery.plotly.host/dash-svm).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-3](chapter7.xhtml#fig7-3)展示了我们如何使用 SVM Explorer 应用来可视化 SVM，这是一个来自画廊的 Python
    仪表板应用，使用了各种类型的图表和图形。欢迎在[*https://<wbr>dash<wbr>-gallery<wbr>.plotly<wbr>.host<wbr>/dash<wbr>-svm*](https://dash-gallery.plotly.host/dash-svm)上玩转这个实时项目。'
- en: '![](../images/Figure7-3.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-3.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-3: The SVM Explorer
    app from the gallery</samp>'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 7-3：来自画廊的 SVM Explorer 应用</samp>
- en: We’ll give you an overview of the SVM Explorer app first so that you can gain
    a rough understanding. The app showcases how a given SVM model classifies a given
    training dataset. You control the model using the dashboard controls, such as
    sliders, dropdowns, and radio buttons. Based on your selections, the output graphs
    and plots change to reflect the changing instantiation of the SVM model.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为您提供 SVM Explorer 应用的概述，以便您大致了解其工作原理。该应用展示了给定 SVM 模型如何对给定的训练数据集进行分类。您可以通过仪表板控件（如滑块、下拉菜单和单选按钮）来控制模型。根据您的选择，输出的图表和图形会随
    SVM 模型的实例化变化而发生变化。
- en: 'One of the authors of this app, Xing Han, has kindly provided us with a quick
    overview of the SVM Explorer app:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的作者之一，邢汉，友好地为我们提供了 SVM Explorer 应用的简要概述：
- en: This app is fully written in Dash and scikit-learn. All the components are used
    as input parameters for scikit-learn functions, which then generate a model with
    respect to the parameters the user changes. The model then performs predictions
    that are displayed on a contour plot, and its predictions are evaluated to create
    the ROC [receiver operating characteristic] curve and confusion matrix. In addition
    to creating models, it uses scikit-learn to generate the datasets you see, as
    well as the data needed for the metrics plots.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序完全使用 Dash 和 scikit-learn 编写。所有组件都作为输入参数传递给 scikit-learn 函数，后者根据用户更改的参数生成模型。模型随后会进行预测，并显示在等高线图上，同时其预测结果会被评估，用于创建
    ROC [接收器操作特性] 曲线和混淆矩阵。除了创建模型外，它还使用 scikit-learn 生成您看到的数据集，以及生成度量图所需的数据。
- en: 'Let’s quickly examine each visible component. There are multiple input components
    in the left column of the dashboard:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看每个可见组件。仪表板左列有多个输入组件：
- en: The *Select Dataset* dropdown menu allows you to choose the synthetic dataset
    to use for training and testing. The default selection is Moon, named for its
    moon-shaped dataset. This input dropdown allows you to explore how the SVM model
    works on data with different inherent properties. For example, you can select
    the Circles dataset (not shown in the figure), which is nonlinear, so that the
    two datasets to be classified are shaped like an inner circle and an outer ring
    around that circle. The SVM model can classify those types of data too!
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*选择数据集*下拉菜单允许你选择用于训练和测试的合成数据集。默认选择是Moon数据集，以其月亮形状的数据集命名。这个输入下拉菜单让你探索SVM模型如何在具有不同固有特性的数据显示上工作。例如，你可以选择Circles数据集（图中未显示），这是一个非线性数据集，其中两个待分类的数据集形状像一个内圈和围绕该圈的外环。SVM模型同样可以对这些类型的数据进行分类！'
- en: The *Sample Size* slider allows you to control the number of data points used
    to test and train the model. A higher sample size usually leads to a more accurate
    model, which is why machine learning companies never stop collecting more data!
    In our toy dashboard, however, a higher sample size may result in a more crowded
    visualization.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*样本大小*滑块允许你控制用于测试和训练模型的数据点数量。更高的样本大小通常会导致更准确的模型，这就是为什么机器学习公司永远不会停止收集更多数据的原因！然而，在我们的玩具仪表板中，较高的样本大小可能会导致更拥挤的可视化效果。'
- en: The *Noise Level* slider allows you to control the standard deviation of Gaussian
    noise added to the data. A higher noise level yields a less accurate model because
    noise reduces the clarity of patterns in the data and makes it harder to find
    a separating decision boundary during the training phase. You can, however, use
    the Noise Level slider to check how robust the SVM model will be in practice,
    because real-world data tends to be noisy.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*噪声水平*滑块允许你控制添加到数据中的高斯噪声的标准差。更高的噪声水平会导致模型的准确性降低，因为噪声会减少数据中模式的清晰度，并且在训练阶段使得找到一个分离决策边界变得更加困难。然而，你可以使用噪声水平滑块来检查SVM模型在实际应用中的鲁棒性，因为现实世界中的数据通常是嘈杂的。'
- en: The *Threshold* slider allows you to add a bias toward one class or the other.
    Roughly speaking, by increasing the threshold value you shift the decision boundary
    from class A more toward class B (or vice versa by decreasing the threshold) so
    that for a given input, the likelihood of being classified as A increases. For
    example, if the threshold is 0.4, any score greater than 0.4 is considered a positive
    prediction and any score less than 0.4 is considered a negative prediction on
    whether the point belongs to a certain class.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*阈值*滑块允许你对某个类别或另一个类别增加偏置。大致来说，通过增加阈值，你可以将决策边界从A类更多地移动到B类（或者通过减少阈值，反之亦然），以便对于给定的输入，A类的分类可能性增加。例如，如果阈值为0.4，任何大于0.4的得分都会被视为正向预测，而任何小于0.4的得分都会被视为负向预测，用于判断该点是否属于某个类别。'
- en: The *Reset Threshold* button resets the threshold to a default value without
    a customized threshold or bias.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重置阈值*按钮将阈值重置为默认值，而不使用自定义的阈值或偏置。'
- en: The *Kernel* dropdown menu, the *Costs* sliders, and other controls such as
    the *Gamma* slider and the *Shrinking* radio buttons allow you to further control
    other SVM parameters and their effect on classification accuracy. Discussing these
    parameters would need more than just one or two sentences in this quick overview,
    so we’ll skip it. If you’re interested in learning the theory behind these controls,
    feel free to consult Chapter 15 of *Introduction to Information Retrieval* (Cambridge
    University Press, 2008). You can read the chapter for free at [*https://<wbr>nlp<wbr>.stanford<wbr>.edu<wbr>/IR<wbr>-book<wbr>/pdf<wbr>/15svm<wbr>.pdf*](https://nlp.stanford.edu/IR-book/pdf/15svm.pdf).
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*核函数*下拉菜单、*成本*滑块以及其他控制项，如*Gamma*滑块和*收缩*单选按钮，允许你进一步控制其他SVM参数及其对分类准确性的影响。在这个简要概述中讨论这些参数需要的不仅仅是一个或两个句子，因此我们将跳过这一部分。如果你有兴趣了解这些控制项背后的理论，可以参考《信息检索导论》15章（剑桥大学出版社，2008年）。你可以在[*https://<wbr>nlp<wbr>.stanford<wbr>.edu<wbr>/IR<wbr>-book<wbr>/pdf<wbr>/15svm<wbr>.pdf*](https://nlp.stanford.edu/IR-book/pdf/15svm.pdf)免费阅读该章节。'
- en: 'Three output components change as the model changes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 三个输出组件会随着模型的变化而变化：
- en: The *Dash Graph component* is a contour plot that visualizes the training and
    testing data, as well as the model classification confidence levels, in a heat
    map overlay. The dots represent the training data and the triangles represent
    the test data. Red data points belong to one class and blue to another. First
    we train the SVM model based on a subset of the sample data. Then we classify
    the test data using the trained model and plot the predicted class in the visualization.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Dash 图表组件*是一个等高线图，它通过热力图叠加可视化训练数据、测试数据及模型分类置信度。数据点表示训练数据，三角形表示测试数据。红色数据点属于一个类别，蓝色数据点属于另一个类别。首先，我们基于样本数据的一个子集训练
    SVM 模型。然后，我们使用训练好的模型对测试数据进行分类，并在可视化中绘制预测的类别。'
- en: The *ROC curve plot* is a measure of quality of the SVM model on the given dataset.
    It measures the *true positive rate*, which is the proportion of data points that
    are correctly classified, against the *false positive rate,* which is the proportion
    of data points that are incorrectly classified.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ROC 曲线图*是衡量给定数据集上 SVM 模型质量的指标。它衡量的是*真正例率*，即正确分类的数据点的比例，与*假正例率*，即错误分类的数据点的比例。'
- en: The *confusion matrix* refers to the predicted versus actual classes. Specifically,
    it’s a bar chart that shows the number of true positive, true negative, false
    positive, and false negative classifications of the test data. You can think of
    this as yet another measure of how well the SVM model performs the training and
    classification task on the given dataset.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*混淆矩阵*指的是预测类别与实际类别之间的对比。具体来说，它是一个柱状图，展示了测试数据的真正例、真负例、假正例和假负例的分类数量。你可以把它看作是另一个衡量
    SVM 模型在给定数据集上进行训练和分类任务表现的指标。'
- en: We’ve provided links to more detailed explanations of the Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Graph</samp>,
    the ROC curve plot, and the confusion matrix at the end of this chapter. However,
    a great way to get a better understanding is to play around with the SVM Explorer
    app. We recommend spending 10 to 20 minutes playing with the app to fully grasp
    the idea of each component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章末提供了更多关于 Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">图表</samp>、ROC
    曲线图和混淆矩阵的详细解释链接。然而，了解这些概念的一个好方法是通过 SVM Explorer 应用进行操作。我们建议花费 10 到 20 分钟操作该应用，充分理解每个组件的理念。
- en: You can find the code for the app in the GitHub repository at [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash<wbr>/tree<wbr>/master<wbr>/Chapter<wbr>-7*](https://github.com/DashBookProject/Plotly-Dash/tree/master/Chapter-7).
    The complete code has more than 650 lines, but don’t worry, we will focus only
    on the most important aspects. Note that well-maintained code seldom stays the
    same forever. Since this chapter’s writing, the authors have already updated the
    original code base by adding new styles to the app, among other things. But because
    the core of the app didn’t change, we have provided the original code on the specified
    GitHub repository so you can download it and reproduce the exact app explained
    in this chapter. We highly recommend that you download the code to accelerate
    your learning.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 仓库中找到该应用的代码，地址是 [*https://<wbr>github<wbr>.com<wbr>/DashBookProject<wbr>/Plotly<wbr>-Dash<wbr>/tree<wbr>/master<wbr>/Chapter<wbr>-7*](https://github.com/DashBookProject/Plotly-Dash/tree/master/Chapter-7)。完整代码超过
    650 行，但不用担心，我们将重点关注最重要的部分。请注意，维护良好的代码不会永远保持不变。自本章写作以来，作者们已经通过添加新样式等方式更新了原始代码库。但由于应用程序的核心没有改变，我们已经在指定的
    GitHub 仓库中提供了原始代码，你可以下载并复现本章中所解释的精确应用。我们强烈建议你下载代码，以加速学习进程。
- en: Without further ado, let’s dive into the code!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 事不宜迟，接下来让我们深入研究代码吧！
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Python Libraries</samp>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Python 库</samp>
- en: We’ll stand on the shoulders of giants and rely on several Python libraries
    to create our SVM dashboard app. [Listing 7-1](chapter7.xhtml#List7-1) shows the
    libraries used in this project.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将借助巨人的肩膀，依赖几个 Python 库来创建我们的 SVM 仪表板应用。[列表 7-1](chapter7.xhtml#List7-1) 显示了本项目中使用的库。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import time</samp>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import time</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import importlib</samp>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import importlib</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html,
    Input, Output, State</samp>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash import Dash, dcc, html,
    Input, Output, State</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import numpy as np</samp>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">import numpy as np</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash.dependencies import
    Input, Output, State</samp>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from dash.dependencies import
    Input, Output, State</samp>
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn.model_selection
    import train_test_split</samp>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn.model_selection
    import train_test_split</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn.preprocessing import
    StandardScaler</samp>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn.preprocessing import
    StandardScaler</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn import datasets</samp>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn import datasets</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn.svm import SVC</samp>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">from sklearn.svm import SVC</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-1: Dependencies for
    the SVM app</samp>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-1：SVM 应用的依赖项</samp>
- en: You’ve already seen the Dash library statements that import the core and HTML
    components, as well as the overall Dash app functionality. The core code in this
    chapter consists of the computations for the SVM. We won’t implement our own SVM
    from scratch, but we will rely on the excellent implementations provided by the
    scikit-learn library. We therefore import some modules from this library, which
    we’ll look at in more detail as they come up ❶. If you’re interested in machine
    learning, scikit-learn is your best friend!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经看到过导入 Dash 库的语句，这些语句用于导入核心和 HTML 组件，以及整体 Dash 应用的功能。本章的核心代码包括支持向量机（SVM）的计算。我们不会从头开始实现
    SVM，而是依赖于 scikit-learn 库提供的优秀实现。因此，我们会从这个库中导入一些模块，稍后会详细介绍它们 ❶。如果你对机器学习感兴趣，scikit-learn
    将是你最好的朋友！
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Data Management</samp>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">数据管理</samp>
- en: scikit-learn provides some great synthetic datasets for testing all kinds of
    classification and prediction algorithms. In [Listing 7-2](chapter7.xhtml#List7-2)
    we show how the function <samp class="SANS_TheSansMonoCd_W5Regular_11">generate_data()</samp>
    dynamically creates the dataset using the number of sample points, the type of
    the dataset, and the noise level, all specified in the left column of the SVM
    Explorer app shown in [Figure 7-3](chapter7.xhtml#fig7-3). We’ll use the functions
    <samp class="SANS_TheSansMonoCd_W5Regular_11">datasets.make_moons()</samp>, <samp
    class="SANS_TheSansMonoCd_W5Regular_11">datasets.make_circles()</samp>, and <samp
    class="SANS_TheSansMonoCd_W5Regular_11">datasets.make_classification()</samp>
    to generate different datasets (<samp class="SANS_TheSansMonoCd_W5Regular_11">"moons"</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"circles"</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">"linear"</samp>,
    respectively) according to the value obtained through the input dropdown menu.
    This dataset is used later to train and test our SVM.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: scikit-learn 提供了一些很棒的合成数据集，用于测试各种分类和预测算法。在[列表 7-2](chapter7.xhtml#List7-2)中，我们展示了函数
    <samp class="SANS_TheSansMonoCd_W5Regular_11">generate_data()</samp> 如何根据样本点数量、数据集类型和噪声水平动态创建数据集，这些参数都在
    SVM Explorer 应用的左列中指定，如[图 7-3](chapter7.xhtml#fig7-3)所示。我们将使用函数 <samp class="SANS_TheSansMonoCd_W5Regular_11">datasets.make_moons()</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">datasets.make_circles()</samp> 和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">datasets.make_classification()</samp>
    来生成不同的数据集（分别为 <samp class="SANS_TheSansMonoCd_W5Regular_11">"moons"</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"circles"</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">"linear"</samp>），这些数据集会根据输入下拉菜单中获得的值生成。此数据集稍后用于训练和测试我们的
    SVM。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def generate_data(n_samples, dataset,
    noise):</samp>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def generate_data(n_samples, dataset,
    noise):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if dataset == "moons":</samp>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   if dataset == "moons":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return datasets.make_moons(n_samples=n_samples,</samp>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return datasets.make_moons(n_samples=n_samples,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                                 noise=noise,
    random_state=0)</samp>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                                 noise=noise,
    random_state=0)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif dataset == "circles":</samp>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif dataset == "circles":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return datasets.make_circles(</samp>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return datasets.make_circles(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_samples=n_samples,
    noise=noise, factor=0.5, random_state=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_samples=n_samples,
    noise=noise, factor=0.5, random_state=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">1</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif dataset == "linear":</samp>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   elif dataset == "linear":</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      X, y = datasets.make_classification(</samp>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      X, y = datasets.make_classification(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_samples=n_samples,</samp>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_samples=n_samples,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_features=2,</samp>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_features=2,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_redundant=0,</samp>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_redundant=0,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_informative=2,</samp>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_informative=2,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         random_state=2,</samp>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         random_state=2,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_clusters_per_class=1,</samp>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         n_clusters_per_class=1,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      rng = np.random.RandomState(2)</samp>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      rng = np.random.RandomState(2)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      X +=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">noise
    * rng.uniform(size=X.shape)</samp>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      X +=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">noise
    * rng.uniform(size=X.shape)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      linearly_separable = (X,
    y)</samp>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      linearly_separable = (X,
    y)</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return linearly_separable</samp>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      return linearly_separable</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   else:</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      raise ValueError(</samp>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      raise ValueError(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        "Data type incorrectly
    specified. Choose an existing dataset."</samp>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        "数据类型指定错误。请选择一个现有的数据集。"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      )</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-2: Data management
    for the SVM app</samp>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 7-2：SVM 应用的数据管理</samp>
- en: 'At a high level, the code consists of <samp class="SANS_TheSansMonoCd_W5Regular_11">if…elif…elif…else</samp>
    statements that differentiate user inputs. This allows the user to choose among
    three datasets: <samp class="SANS_TheSansMonoCd_W5Regular_11">"moons"</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"circles"</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">"linear"</samp>.
    In each case, a new dataset is created with scikit-learn’s <samp class="SANS_TheSansMonoCd_W5Regular_11">dataset.make_X()</samp>
    function, which takes different input arguments (such as the number of sample
    points) and returns the data as a NumPy array. Interested readers can learn more
    about the input arguments we used here at [*https://<wbr>scikit<wbr>-learn<wbr>.org<wbr>/stable<wbr>/modules<wbr>/classes<wbr>.xhtml#module<wbr>-sklearn<wbr>.datasets*](https://scikit-learn.org/stable/modules/classes.xhtml#module-sklearn.datasets).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，代码由 <samp class="SANS_TheSansMonoCd_W5Regular_11">if…elif…elif…else</samp>
    语句组成，用于区分用户输入。这样，用户可以从三个数据集选择： <samp class="SANS_TheSansMonoCd_W5Regular_11">"moons"</samp>、<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"circles"</samp> 和 <samp class="SANS_TheSansMonoCd_W5Regular_11">"linear"</samp>。在每种情况下，都会使用
    scikit-learn 的 <samp class="SANS_TheSansMonoCd_W5Regular_11">dataset.make_X()</samp>
    函数创建一个新的数据集，该函数接收不同的输入参数（例如样本点的数量），并将数据作为 NumPy 数组返回。有兴趣的读者可以通过以下链接了解我们在此使用的输入参数的更多信息：[*https://<wbr>scikit<wbr>-learn<wbr>.org<wbr>/stable<wbr>/modules<wbr>/classes<wbr>.xhtml#module<wbr>-sklearn<wbr>.datasets*](https://scikit-learn.org/stable/modules/classes.xhtml#module-sklearn.datasets)。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Layout and Styling</samp>
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">布局与样式</samp>
- en: The layout and styling sections give you an idea of the structure of the SVM
    Explorer app and the basic Dash components from which it is built. Let’s start
    with the overall layout of the project.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 布局和样式部分展示了 SVM Explorer 应用程序的结构以及构建它的基本 Dash 组件。我们从项目的整体布局开始。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Layout</samp>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">布局</samp>
- en: As you start working on larger apps, the number of lines of code in the *app.py*
    file quickly becomes harder to manage. To help manage the code, the SVM Explorer
    app includes a *utils* folder with two helper modules, *dash_resuable_components.py*
    and *figures.py*, which contain the definitions of some customized Dash components
    that we’ll explore in more detail later in this chapter, as well as some plotting
    and styling functionality. This approach of pulling out utility functionality
    from the *app.py* file into some imported external modules is good practice for
    your own larger dashboard projects, to make sure the main *app.py* remains clean
    and focused.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始处理更大的应用时，*app.py* 文件中的代码行数很快变得难以管理。为了帮助管理代码，SVM Explorer 应用包括一个 *utils*
    文件夹，其中包含两个帮助模块，*dash_resuable_components.py* 和 *figures.py*，它们包含了一些自定义 Dash 组件的定义，我们将在本章后面详细探讨这些组件，以及一些绘图和样式功能。将实用功能从
    *app.py* 文件中提取到一些导入的外部模块中，是处理你自己的大型仪表盘项目的良好实践，以确保主要的 *app.py* 保持整洁和专注。
- en: 'The structure of the SVM Explorer app looks like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: SVM Explorer 应用的结构如下：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- app.py</samp>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- app.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- utils/</samp>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- utils/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--dash_reusable_components.py</samp>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--dash_reusable_components.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--figures.py</samp>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--figures.py</samp>
- en: The layout of the app is a hierarchically nested structure of HTML elements,
    as shown in [Listing 7-3](chapter7.xhtml#List7-3).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的布局是 HTML 元素的分层嵌套结构，如 [列表 7-3](chapter7.xhtml#List7-3) 所示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   children=[html.Div(…), # Heading
    etc.</samp>'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   children=[html.Div(…), # 标题等。</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div(…)] # Body</samp>'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div(…)] # 主体</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-3: Zooming one level
    in the SVM app layout</samp>'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-3：放大 SVM 应用布局的一个级别</samp>
- en: The first child of the outer <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    contains the app’s heading, logo, and other meta-information. The second child
    contains the body of the app, which is the central part of the app. [Listing 7-4](chapter7.xhtml#List7-4)
    shows the full code for the layout section of our SVM Explorer app. Just skim
    over it and try to understand how the app is structured; we’ll discuss the relevant
    parts afterward.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 外部 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 的第一个子元素包含应用的标题、标志和其他元信息。第二个子元素包含应用的主体，即应用的中心部分。[列表
    7-4](chapter7.xhtml#List7-4) 展示了 SVM Explorer 应用布局部分的完整代码。只需简单浏览一下，尝试理解应用的结构；我们将在后面讨论相关部分。
- en: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ❶ <samp class="SANS_TheSansMonoCd_W5Regular_11">app.layout = html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children=[</samp>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     # .container class is fixed,
    .container.scalable is scalable</samp>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     # .container 类是固定的，.container.scalable
    是可扩展的</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❷ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="banner",</samp>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="banner",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        children=[</samp>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div(</samp>
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              className="container
    scalable",</samp>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              className="container
    scalable",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[</samp>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 # Change App
    Name here</samp>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 # 在此更改应用名称</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 html.H2(</samp>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 html.H2(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="banner-title",</samp>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="banner-title",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=[</samp>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                       html.A(</samp>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                       html.A(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                          "Support
    Vector Machine (SVM) Explorer",</samp>
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                          "支持向量机（SVM）浏览器",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                          href=("</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">https://github.com/"</samp>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                          href=("</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">https://github.com/"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                            "plotly/dash-svm"),</samp>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                            "plotly/dash-svm"),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              style={</samp>
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              style={</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            "text-decoration":
    "none",</samp>'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            "text-decoration":
    "none",</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            "color":
    "inherit",</samp>'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">                            "color":
    "inherit",</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              },</samp>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">              },</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      )</samp>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    ],</samp>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ),</samp>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 html.A(</samp>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 html.A(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="banner-logo",</samp>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="banner-logo",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=[</samp>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">               html.Img(src=app.get_asset_url(</samp>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">               html.Img(src=app.get_asset_url(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">    "dash-logo-new.png"))</samp>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">    "dash-logo-new.png"))</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    ],</samp>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">        href="</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">https://plot.ly/products/dash/",</samp>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">        href="</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">https://plot.ly/products/dash/",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ),</samp>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">             ],</samp>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">             ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ],</samp>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">     ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp>❸ <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        id="body",</samp>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        id="body",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="container scalable",</samp>
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        className="container scalable",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        children=[</samp>
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           html.Div(</samp>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">           html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              id="app-container",</samp>
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              id="app-container",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              # className="row",</samp>
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              # className="row",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              children=[</samp>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">              children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  html.Div(</samp>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    # className=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"three columns",</samp>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    # className=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"three columns",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="left-column",</samp>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="left-column",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=[</samp>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># … See Dash Components</samp>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11"># … 查看 Dash 组件</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    ],</samp>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  html.Div(</samp>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  html.Div(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="div-graphs",</samp>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="div-graphs",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=dcc.Graph(</samp>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    children=dcc.Graph(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      id="graph-sklearn-svm",</samp>
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                    id="graph-sklearn-svm",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                    figure=dict(</samp>
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">  </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">                    figure=dict(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">       layout=dict(</samp>
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">       layout=dict(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                            plot_bgcolor=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"#282b38",</samp>
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                            plot_bgcolor=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"#282b38",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                            paper_bgcolor="#282b38"</samp>
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                            paper_bgcolor="#282b38"</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      </samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">    )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      ),</samp>
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          ),</samp>
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">          ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  ),</samp>
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">                  ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">      ],</samp>
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">      ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            )</samp>
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">            )</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ],</samp>
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    ),</samp>
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">  ]</samp>
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">  ]</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-4: Zooming multiple
    levels in the SVM app layout</samp>'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-4: SVM 应用布局的多级缩放</samp>'
- en: 'The code references stylesheets and Dash components that we’ll talk about in
    upcoming sections, so it may not be clear how this section works just yet. But
    it does show you what a nontrivial Dash app looks like: hierarchically nested
    HTML components using dash-html-components. In large apps you’ll use this structure
    to add more components as you modify the app’s look and feel.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 代码引用了样式表和 Dash 组件，我们将在接下来的章节中讨论这些内容，因此现在可能还不清楚这一部分是如何工作的。但它确实向你展示了一个非平凡的 Dash
    应用程序的样子：使用 dash-html-components 的层次化嵌套 HTML 组件。在大型应用中，你将使用这种结构在修改应用的外观和感觉时添加更多组件。
- en: As with the smaller apps we’ve seen in earlier chapters, the app consists of
    an outer <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> ❶ that contains
    two inner <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> elements at
    ❷ and ❸. The first inner <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    contains meta-information, such as the headline and logo. The second inner <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> contains the body of the app.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在早期章节中看到的小型应用一样，应用由一个外部的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    ❶ 组成，里面包含两个内部的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 元素，分别位于
    ❷ 和 ❸。第一个内部的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 包含了元信息，如标题和
    logo。第二个内部的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 包含了应用的主体内容。
- en: In “Reusable Components” later in this chapter, we’ll focus on the different
    Dash components to learn how they are working individually.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章稍后的“可重用组件”部分，我们将专注于不同的 Dash 组件，了解它们是如何独立工作的。
- en: Next, we’ll look at the CSS stylesheets we used to style the SVM Explorer app.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看我们用来样式化 SVM Explorer 应用的 CSS 样式表。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Styling</samp>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">样式化</samp>
- en: We know from [Chapters 4](chapter4.xhtml) and [5](chapter5.xhtml) that we can
    style our HTML elements using either a CSS stylesheet or dash-bootstrap-components.
    In this app we opt for the CSS stylesheet, since it allows us to create a more
    customized look and feel with margins, padding, colors, fonts, and borders. Note
    that the main styling is already built into the default Plotly Dash components,
    so using custom stylesheets is a relatively minor design decision by the creators
    of the SVM Explorer app.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从[第 4 章](chapter4.xhtml)和[第 5 章](chapter5.xhtml)中知道，我们可以使用 CSS 样式表或 dash-bootstrap-components
    来样式化我们的 HTML 元素。在这个应用中，我们选择了 CSS 样式表，因为它允许我们通过边距、填充、颜色、字体和边框来创建更为个性化的外观和感觉。请注意，主要的样式已经内置在默认的
    Plotly Dash 组件中，因此使用自定义样式表只是 SVM Explorer 应用创建者的一个相对次要的设计决策。
- en: 'We define the stylesheet in the *assets* subfolder, with a structure like this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将样式表定义在 *assets* 子文件夹中，结构如下：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- app.py</samp>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- app.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- assets/</samp>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- assets/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--base-styles.css</samp>
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--base-styles.css</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--custom-styles.css</samp>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--custom-styles.css</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--snip--</samp>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--snip--</samp>
- en: 'We’ll use two stylesheets: the *base-styles.css* and *custom-styles.css* files
    that were added to the SVM Explorer app by the app creators. The *base-styles.css*
    stylesheet defines how basic HTML elements such as headings and paragraphs should
    be styled. The *custom-styles.css* stylesheet defines how Dash-specific elements
    such as named sliders, graph containers, and cards should be styled. Let’s quickly
    dip into *base-styles.css* to see how we can manipulate the default styling.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用两个样式表：*base-styles.css* 和 *custom-styles.css*，这两个文件是由应用创建者添加到 SVM Explorer
    应用中的。*base-styles.css* 样式表定义了如何样式化基础的 HTML 元素，如标题和段落。*custom-styles.css* 样式表定义了如何样式化
    Dash 特定的元素，如命名的滑块、图表容器和卡片。让我们快速浏览一下 *base-styles.css*，看看如何修改默认的样式。
- en: The *base-styles.css* stylesheet consists of the 13 sections shown in [Listing
    7-5](chapter7.xhtml#List7-5), each defining how certain types of HTML elements
    look.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '*base-styles.css* 样式表由 [Listing 7-5](chapter7.xhtml#List7-5) 中显示的 13 个部分组成，每个部分定义了某些类型
    HTML 元素的外观。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">/* Table of contents</samp>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">/* 目录内容</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">—————————————————————————</samp>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">—————————————————————————</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Grid</samp>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 网格</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Base Styles</samp>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 基础样式</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Typography</samp>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 排版</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Links</samp>
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 链接</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Buttons</samp>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 按钮</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Forms</samp>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 表单</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Lists</samp>
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 列表</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Code</samp>
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 代码</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Tables</samp>
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 表格</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Spacing</samp>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 间距</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Utilities</samp>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 工具类</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Clearing</samp>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 清除浮动</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- Media Queries</samp>
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- 媒体查询</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">*/</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-5: Overview of</samp>
    <samp class="SANS_Futura_Std_Book_11">base-styles.css</samp>'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表7-5：概述</samp> <samp class="SANS_Futura_Std_Book_11">base-styles.css</samp>
- en: This stylesheet allows you to define things like the fonts, background colors,
    margins, and padding for these basic elements. For example, in the typography
    section, shown in [Listing 7-6](chapter7.xhtml#List7-6), we define the font size,
    weight, and spacing for the different headings.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这个样式表允许你定义基本元素的字体、背景颜色、边距和内边距等样式。例如，在排版部分（见[列表7-6](chapter7.xhtml#List7-6)），我们定义了不同标题的字体大小、粗细和间距。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">/* Typography</samp>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">/* 排版</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">—————————————————————————*/</samp>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">—————————————————————————*/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">h1, h2, h3, h4, h5, h6 {</samp>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">h1, h2, h3, h4, h5, h6 {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-top: 0;</samp>'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-top: 0;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-bottom: 0;</samp>'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-bottom: 0;</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   font-weight: 300;}</samp>'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   font-weight: 300;}</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h1 {font-size: 4.5rem; line-height:
    1.2; letter-spacing: -.1rem; margin-bottom: 2rem;}</samp>'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h1 {font-size: 4.5rem; line-height:
    1.2; letter-spacing: -.1rem; margin-bottom: 2rem;}</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h2 {font-size: 3.6rem; line-height:
    1.25; letter-spacing: -.1rem; margin-bottom: 1.8rem; margin-top: 1.8rem;}</samp>'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h2 {font-size: 3.6rem; line-height:
    1.25; letter-spacing: -.1rem; margin-bottom: 1.8rem; margin-top: 1.8rem;}</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h3 {font-size: 3.0rem; line-height:
    1.3; letter-spacing: -.1rem; margin-bottom: 1.5rem; margin-top: 1.5rem;}</samp>'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h3 {font-size: 3.0rem; line-height:
    1.3; letter-spacing: -.1rem; margin-bottom: 1.5rem; margin-top: 1.5rem;}</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h4 {font-size: 2.6rem; line-height:
    1.35; letter-spacing: -.08rem; margin-bottom: 1.2rem; margin-top: 1.2rem;}</samp>'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h4 {font-size: 2.6rem; line-height:
    1.35; letter-spacing: -.08rem; margin-bottom: 1.2rem; margin-top: 1.2rem;}</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h5 {font-size: 2.2rem; line-height:
    1.5; letter-spacing: -.05rem; margin-bottom: 0.6rem; margin-top: 0.6rem;}</samp>'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h5 {font-size: 2.2rem; line-height:
    1.5; letter-spacing: -.05rem; margin-bottom: 0.6rem; margin-top: 0.6rem;}</samp>'
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h6 {font-size: 2.0rem; line-height:
    1.6; letter-spacing: 0; margin-bottom: 0.75rem; margin-top: 0.75rem;}</samp>'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">h6 {font-size: 2.0rem; line-height:
    1.6; letter-spacing: 0; margin-bottom: 0.75rem; margin-top: 0.75rem;}</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">p {</samp>
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">p {</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-top: 0;}</samp>'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   margin-top: 0;}</samp>'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-6: Zooming into the
    typography section of</samp> <samp class="SANS_Futura_Std_Book_11">base-styles.css</samp>'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">列表 7-6：放大查看</samp> <samp class="SANS_Futura_Std_Book_11">base-styles.css</samp>
    中的排版部分
- en: You can see that we set the font size for the top-level heading <samp class="SANS_TheSansMonoCd_W5Regular_11">h1</samp>
    at <samp class="SANS_TheSansMonoCd_W5Regular_11">4.5rem</samp> so that it’s the
    largest.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，我们为顶级标题 <samp class="SANS_TheSansMonoCd_W5Regular_11">h1</samp> 设置了字体大小为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">4.5rem</samp>，使其成为最大的标题。
- en: We won’t go into the specifics of each element in this chapter, though we do
    recommend that you take a quick look at the code to see how we apply custom styles
    to various elements.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们不会深入探讨每个元素的具体细节，但我们建议你快速浏览一下代码，了解我们是如何为各种元素应用自定义样式的。
- en: 'Instead of losing ourselves in minor CSS details (which you could decide to
    ignore in your own dashboard app and default to the Dash standard styling), let’s
    have a look at the heart of the SVM app: the Dash components.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要陷入细节的 CSS 调整（你可以选择在自己的仪表盘应用中忽略这些，并默认使用 Dash 的标准样式），让我们来看看 SVM 应用的核心部分：Dash
    组件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Reusable Components</samp>
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">可重用组件</samp>
- en: 'Here we’ll look at a new Dash concept in the form of *reusable components*,
    which allow you to add your own style and functionality to existing components.
    We use several components in our SVM Explorer app that are similar in pattern
    to the built-in components but with slight differences, such as dropdown menus
    with different labels and value ranges. We define the components in the *dash_reusable_components.py*
    file and instantiate the components with their custom features in *app.py*. First
    we’ll add the *dash_reusable_components.py* module to the *utils* folder:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将介绍一个新的 Dash 概念，即 *可重用组件*，它允许你为现有组件添加自定义的样式和功能。在我们的 SVM Explorer 应用中，我们使用了几个与内置组件类似但略有不同的组件，例如带有不同标签和取值范围的下拉菜单。我们在
    *dash_reusable_components.py* 文件中定义这些组件，并在 *app.py* 文件中实例化它们，给每个组件赋予自定义的特性。首先，我们将把
    *dash_reusable_components.py* 模块添加到 *utils* 文件夹中：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- app.py</samp>
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- app.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- assets/</samp>
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- assets/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">- utils/</samp>
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">- utils/</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--dash_reusable_components.py</samp>
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   |--dash_reusable_components.py</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--snip--</samp>
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_Italic_I_11">--snip--</samp>
- en: Say our goal is to create a custom button we’ll use several times throughout
    the code. The custom button component could be arbitrarily complex; it might just
    contain a button label or it might have something more complex, like a chart showing
    how often the button was clicked over time (yes, Dash can do that!). We want to
    avoid creating the customized button repeatedly in our *app.py* file for clarity
    and conciseness. To accomplish this, we create this customized button as an instance
    of the custom class <samp class="SANS_TheSansMonoCd_W5Regular_11">CustomButton</samp>.
    We define the class in the *dash_reusable_components.py* module once and then
    can instantiate the customized button component as many times as we like in the
    main *app.py* file, each potentially with its own individual features, such as
    different background colors or text.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的目标是创建一个自定义按钮，这个按钮将在代码中多次使用。这个自定义按钮组件可以非常复杂；它可能仅包含一个按钮标签，或者可能包含更复杂的内容，例如一个图表，显示按钮在一段时间内被点击的频率（是的，Dash
    可以做到这一点！）。为了保持代码简洁和清晰，我们希望避免在 *app.py* 文件中重复创建自定义按钮。为此，我们将这个自定义按钮作为自定义类 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">CustomButton</samp> 的一个实例来创建。我们在 *dash_reusable_components.py*
    模块中定义这个类一次，然后可以在主 *app.py* 文件中根据需要多次实例化这个自定义按钮组件，每次实例化时可以拥有不同的特性，例如不同的背景颜色或文本。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Defining a Card</samp>
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">定义卡片</samp>
- en: 'In [Chapter 6](chapter6.xhtml) we used a Bootstrap <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>
    to create a small contained area for content. Here we’ll create a <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>
    with multiple components: a label, a slider, and a button. You can think of a
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> as a meta component
    consisting of multiple child components, using a specific (relative) width and
    padding and adding a solid gray border at the bottom to group the components visually.
    A <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> is actually a wrapper
    around the HTML component <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section</samp>,
    a container that groups different HTML elements or text inside a (possibly) styled
    area. All content in a <samp class="SANS_TheSansMonoCd_W5Regular_11">Section</samp>
    belongs together semantically or thematically. [Figure 7-4](chapter7.xhtml#fig7-4)
    gives an example of a <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>
    in our SVM Explorer app that uses the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section</samp>
    element to group three components: a label, a slider, and a button.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 6 章](chapter6.xhtml)中，我们使用了一个 Bootstrap <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>
    来创建一个包含内容的小区域。这里，我们将创建一个包含多个组件的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>：一个标签，一个滑块和一个按钮。你可以把
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 想象成一个由多个子组件组成的元组件，使用特定的（相对）宽度和内边距，并在底部添加一个实心灰色边框来将这些组件在视觉上分组。一个
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 实际上是 HTML 组件 <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section</samp>
    的包装器，这是一个将不同 HTML 元素或文本分组在（可能是）样式化区域内的容器。所有位于 <samp class="SANS_TheSansMonoCd_W5Regular_11">Section</samp>
    中的内容在语义上或主题上是相关的。[图 7-4](chapter7.xhtml#fig7-4) 展示了我们在 SVM Explorer 应用中使用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">html.Section</samp> 元素将三个组件分组的一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 示例：标签、滑块和按钮。
- en: '![](../images/Figure7-4.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-4.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-4: Example of a custom
    Card</samp>'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">图 7-4: 自定义 Card 的示例</samp>'
- en: <samp class="SANS_Dogma_OT_Bold_B_11">WHAT IS A WRAPPER?</samp>
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_11">什么是 Wrapper？</samp>
- en: <samp class="SANS_Futura_Std_Book_11">A</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">wrapper</samp>
    <samp class="SANS_Futura_Std_Book_11">is a function whose only purpose is to call
    another function. By doing so, the wrapper shields the caller from unnecessary
    complexity or redundancy. For example, the inner function call may be complicated,
    with many specific arguments the caller doesn’t know about. The wrapper function
    call simplifies access to the inner function by requiring fewer arguments and
    hardcoding the remaining arguments. This improves readability, reduces complexity,
    and improves maintainability of the code.</samp>
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_11">A</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">wrapper</samp>
    <samp class="SANS_Futura_Std_Book_11">是一个函数，它的唯一目的是调用另一个函数。通过这样做，wrapper 将调用者从不必要的复杂性或冗余中解救出来。例如，内部函数的调用可能非常复杂，包含许多调用者不知晓的特定参数。wrapper
    函数通过要求更少的参数并将剩余的参数硬编码，从而简化了对内部函数的访问。这提高了代码的可读性，减少了复杂性，并改善了代码的可维护性。</samp>
- en: '[Listing 7-7](chapter7.xhtml#List7-7) shows the actual definition of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> wrapper function from *dash_reusable_components.py*.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[Listing 7-7](chapter7.xhtml#List7-7) 展示了来自 *dash_reusable_components.py* 的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 包装器函数的实际定义。'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def Card(children, **kwargs):</samp>
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def Card(children, **kwargs):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return html.Section(className=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"card", children=children, **_omit(["style"],
    kwargs))</samp>
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return html.Section(className=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"card", children=children, **_omit(["style"],
    kwargs))</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-7: Defining the Card
    component</samp>'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-7: 定义 Card 组件</samp>'
- en: 'To see how the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> component
    works in full, let’s dive deeper into these arguments:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要全面了解 <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> 组件的工作原理，我们需要深入探讨以下这些参数：
- en: '<samp class="SANS_TheSansMonoCd_W7Bold_B_11">children   </samp>A list of other
    Dash elements that are included in the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>**,**
    and so are displayed grouped together in the dashboard app. You can create all
    kinds of nested and hierarchical HTML trees and pass any iterable of HTML elements
    into the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>**.** The <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> will then wrap these elements
    into one common element that resembles a physical card: a 2D box with consistent
    styling that encloses some other design elements.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">children   </samp>是包含在<samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>中的其他Dash元素的列表，因此它们会在仪表盘应用中一起显示。你可以创建各种嵌套和层次化的HTML树，并将任何HTML元素的可迭代对象传递给<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>。然后，<samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>会将这些元素包装成一个共同的元素，类似于一个物理卡片：一个二维框，具有一致的样式，封装了一些其他设计元素。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">**kwargs   </samp>Stands for *arbitrary
    keyword arguments*. The <samp class="SANS_TheSansMonoCd_W5Regular_11">**kwargs</samp>
    argument packs all keyword arguments passed into the function call into a single
    <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs</samp> dictionary. The keyword
    argument names are the dictionary keys, and the keyword arguments’ values are
    the dictionary values. For example, if somebody called the function <samp class="SANS_TheSansMonoCd_W5Regular_11">Card(children,
    example</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">"123")</samp>,
    we could use <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs['example']</samp>
    within the function to obtain the value <samp class="SANS_TheSansMonoCd_W5Regular_11">"123"</samp>.
    We could use this dictionary later to unpack a potentially large number of arguments
    into the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section()</samp> constructor,
    including metadata such as the language of the section or the number of times
    this component has been clicked by the user. We don’t really use the opportunity
    to pass arbitrary keyword arguments in our SVM Explorer app, but this is an interesting
    aspect of the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp> component.
    You can find a detailed tutorial on the double-asterisk operator at [*https://blog.finxter.com/python-double-asterisk*](https://blog.finxter.com/python-double-asterisk).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">**kwargs   </samp>代表*任意关键字参数*。<samp
    class="SANS_TheSansMonoCd_W5Regular_11">**kwargs</samp>参数将传递给函数调用的所有关键字参数打包成一个单独的<samp
    class="SANS_TheSansMonoCd_W5Regular_11">kwargs</samp>字典。关键字参数名是字典的键，关键字参数的值是字典的值。例如，如果某人调用函数<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Card(children, example</samp> <samp class="SANS_TheSansMonoCd_W5Regular_11">=</samp>
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"123")</samp>，我们可以在函数内部使用<samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs['example']</samp>来获得值<samp
    class="SANS_TheSansMonoCd_W5Regular_11">"123"</samp>。我们可以稍后使用这个字典将大量的参数解包到<samp
    class="SANS_TheSansMonoCd_W5Regular_11">html.Section()</samp>构造函数中，包括诸如节的语言或用户点击该组件的次数等元数据。我们在SVM
    Explorer应用中并没有真正使用传递任意关键字参数的机会，但这是<Card>组件的一个有趣方面。你可以在[*https://blog.finxter.com/python-double-asterisk*](https://blog.finxter.com/python-double-asterisk)找到关于双星号操作符的详细教程。
- en: 'The other argument is actually a function. Let’s have a closer look at it:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个参数实际上是一个函数。让我们仔细看看它：
- en: '<samp class="SANS_TheSansMonoCd_W7Bold_B_11">_omit</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">   </samp>Allows
    us to exclude certain elements if they’re not needed. We might, for example, remove
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">"style"</samp> key from the
    dictionary because it is not needed in the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section()</samp>
    constructor, since we already defined the style using the CSS stylesheet. The
    <samp class="SANS_TheSansMonoCd_W5Regular_11">_omit()</samp> function takes two
    arguments: a list of strings in the variable <samp class="SANS_TheSansMonoCd_W5Regular_11">omitted
    _keys</samp> and a dictionary <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp>.
    The function returns a new dictionary that consists of the elements in the original
    dictionary <samp class="SANS_TheSansMonoCd_W5Regular_11">d</samp> with all keys
    in <samp class="SANS_TheSansMonoCd_W5Regular_11">omitted_keys</samp> and their
    associated values filtered out. Here is how the authors of the SVM Explorer app
    concisely accomplished this:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def _omit(omitted_keys, d):</samp>
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11"> return {k: v for k, v in d.items()
    if k not in omitted_keys}</samp>'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: In the SVM Explorer app, you call <samp class="SANS_TheSansMonoCd_W5Regular_11">**_omit(["style"],
    kwargs)</samp> to pass the keyword arguments dictionary <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs</samp>
    from the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card()</samp> call after
    removing the key <samp class="SANS_TheSansMonoCd_W5Regular_11">"style"</samp>
    using the <samp class="SANS_TheSansMonoCd_W5Regular_11">_omit()</samp> function.
    The double-asterisk prefix unpacks all those values from the dictionary into the
    argument list of the <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section()</samp>
    constructor.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: In *app.py*, we can now use the <samp class="SANS_TheSansMonoCd_W5Regular_11">Card</samp>
    reusable component to create a card containing a named slider and a button, as
    shown in [Listing 7-8](chapter7.xhtml#List7-8).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">.drc.Card(</samp>
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="button-card",</samp>
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children=[</samp>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      drc.NamedSlider(</samp>
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         name="Threshold",</samp>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="slider-threshold",</samp>
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         min=0,</samp>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         max=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">1,</samp>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         value=0.5,</samp>
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         step=0.01,</samp>
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Button(</samp>
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Button(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         "Reset Threshold",</samp>
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         "重置阈值",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="button-zero-threshold",</samp>
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="button-zero-threshold",</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-8: Combining the
    named slider and button components within the Card definition</samp>'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单 7-8：在 Card 定义中组合命名滑块和按钮组件</samp>
- en: Note that <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.NamedSlider</samp>
    is a reusable component itself, so we wrap a reusable component <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.Card</samp>
    around another reusable component hierarchically.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，<samp class="SANS_TheSansMonoCd_W5Regular_11">drc.NamedSlider</samp> 本身就是一个可重用的组件，因此我们将另一个可重用组件
    <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.Card</samp> 以层次结构的方式包装在另一个可重用组件周围。
- en: '[Figure 7-4](chapter7.xhtml#fig7-4) shows how the <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.Card</samp>
    looks in the SVM Explorer app. The named slider consists of two components: an
    HTML component to display the text <samp class="SANS_TheSansMonoCd_W5Regular_11">"Threshold"</samp>
    and a Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp> component
    to set the float value between 0 and 1.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 7-4](chapter7.xhtml#fig7-4) 显示了 <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.Card</samp>
    在 SVM Explorer 应用中的显示效果。命名滑块由两个组件组成：一个 HTML 组件用来显示文本 <samp class="SANS_TheSansMonoCd_W5Regular_11">"Threshold"</samp>，另一个是
    Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp> 组件，用来设置 0 到 1
    之间的浮动值。'
- en: The threshold is later used as an input value for our SVM model as a means to
    control the bias of the classification model toward one class or the other. While
    this is a specific parameter in a specific classification model, you can use this
    exact strategy to display the performance impact of various model parameters in
    machine learning. Exploring the impact of a critical parameter becomes as simple
    as using a slider on your smartphone! Won’t this make a lasting impression when
    you present your next machine learning model to the public?
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 阈值随后作为我们 SVM 模型的输入值，用来控制分类模型对某一类或另一类的偏倚。虽然这是一个特定分类模型中的参数，但你可以使用这种策略展示机器学习中各种模型参数对性能的影响。探索关键参数的影响变得和在智能手机上使用滑块一样简单！当你向公众展示下一个机器学习模型时，这不会留下深刻印象吗？
- en: 'Now you know how to create reusable components using a wrapper function around
    another component. Don’t worry if you didn’t get all the details; we only want
    you to grasp the big picture: how to create reusable components by means of wrapper
    functions. Let’s dive into the next custom-defined component used in our app:
    the formatted slider.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何通过在另一个组件周围使用包装函数来创建可重用的组件。如果你没有完全理解细节也不用担心；我们只希望你把握大局：如何通过包装函数创建可重用的组件。接下来，我们来深入了解在我们的应用中使用的下一个自定义组件：格式化滑块。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Defining a Formatted
    Slider</samp>
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">定义格式化滑块</samp>
- en: The formatted slider is another custom wrapper that consists of an HTML <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> element and a <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>,
    a Dash Core component introduced in [Chapter 6](chapter6.xhtml). A formatted slider
    is a <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp> component
    with some predefined formatting applied, usually pertaining to padding. For simpler
    usage, we’d instead use simple CSS to associate formatting with a slider component,
    but the authors of this app probably considered adding some more advanced components
    or functionality later, so they made this a reusable component that is easily
    extendable.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 格式化滑块是另一个自定义包装器，由一个 HTML <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    元素和一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp> 组件组成，这是
    Dash Core 组件，在[第 6 章](chapter6.xhtml)中介绍。格式化滑块是一个应用了某些预定义格式的 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>
    组件，通常与内边距相关。为了简化使用，我们通常会使用简单的 CSS 来将格式与滑块组件关联，但该应用的作者可能考虑到未来会添加一些更复杂的组件或功能，因此他们将其做成了一个可重用的组件，易于扩展。
- en: '[Listing 7-9](chapter7.xhtml#List7-9) shows the code of the wrapper function
    we place in *dash_reusable_components.py*.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def FormattedSlider(**kwargs):</samp>
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return html.Div(</samp>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      style=kwargs.get("style",
    {}),</samp>
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      children=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider(**_omit(["style"],
    kwargs))</samp>
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-9: Defining the FormattedSlider
    component</samp>'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 'In *app.py* we create a particular instance of a formatted slider, presented
    in [Figure 7-5](chapter7.xhtml#fig7-5), with this slider creation code snippet:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.FormattedSlider(</samp>
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="slider-svm-parameter-C-coef",</samp>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=1,</samp>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=9,</samp>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=1,</samp>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: This creates a formatted slider with a minimum value of 1, a maximum value of
    9, and a slider granularity of 1 between two consecutive values. We pass four
    keyword arguments into the <samp class="SANS_TheSansMonoCd_W5Regular_11">FormattedSlider()</samp>
    function, which are then packed into the <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs</samp>
    dictionary. There’s no <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    key in the dictionary, so the <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs.get("style",
    {})</samp> call from [Listing 7-9](chapter7.xhtml#List7-9) returns the empty dictionary.
    In this case, the default styling from Dash is used. We pass the remaining key-value
    pairs in the dictionary as keyword arguments into the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider()</samp>
    creation routine. These arguments build a new slider with the specified range;
    note that Dash automatically adds the labels 1, 3, 5, 7, and 9 as values of the
    specific formatted slider shown in the SVM Explorer app (see [Figure 7-5](chapter7.xhtml#fig7-5)).
    If you try out the slider yourself, you’ll realize that the slider granularity
    is 1 even though the marks show only every other value. Of course, you can customize
    the marks if needed by adding another <samp class="SANS_TheSansMonoCd_W5Regular_11">marks</samp>
    argument that maps slider values to text labels in a dictionary.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-5.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-5: Example of a formatted
    slider</samp>'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Defining a Named Slider</samp>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: The named slider is another wrapper around the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>
    component that adds a custom heading. [Figure 7-6](chapter7.xhtml#fig7-6) shows
    a slider in our SVM Explorer app that we named Degree.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 命名滑块是对 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp> 组件的另一个包装器，它添加了一个自定义标题。[图7-6](chapter7.xhtml#fig7-6)
    显示了我们在SVM Explorer应用中命名为Degree的滑块。
- en: '![](../images/Figure7-6.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure7-6.png)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-6: Example of a named
    slider</samp>'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图7-6：命名滑块的示例</samp>
- en: The code that defines the <samp class="SANS_TheSansMonoCd_W5Regular_11">NamedSlider</samp>
    in *dash_reusable_components.py* is shown in [Listing 7-10](chapter7.xhtml#List7-10).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 <samp class="SANS_TheSansMonoCd_W5Regular_11">NamedSlider</samp> 的代码在 [清单7-10](chapter7.xhtml#List7-10)
    中显示。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def NamedSlider(name, **kwargs):</samp>
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">def NamedSlider(name, **kwargs):</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return html.Div(</samp>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return html.Div(</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      style={"padding": "20px
    10px 25px 4px"},</samp>'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      style={"padding": "20px
    10px 25px 4px"},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      children=[</samp>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">      children=[</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        html.P(f"{name}:"),</samp>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">        html.P(f"{name}:"),</samp>
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        html.Div(style={"margin-left":
    "6px"},</samp>'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        html.Div(style={"margin-left":
    "6px"},</samp>'
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider(**kwargs)),</samp>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">          children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider(**kwargs)),</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    ],</samp>
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">    ],</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-10: Defining the
    NamedSlider component</samp>'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">清单7-10：定义NamedSlider组件</samp>
- en: 'We create an HTML <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    container that contains two elements: an HTML paragraph element that adds the
    label to the named slider using <samp class="SANS_TheSansMonoCd_W5Regular_11">html.P()</samp>
    and another <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> that contains
    a regular Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider()</samp>
    element. Here we hardcode some style elements by setting the <samp class="SANS_TheSansMonoCd_W5Regular_11">padding</samp>
    attribute of the style dictionary of the outer <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>.
    This is a great example of why we might choose to remove the <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    key from the dictionary using <samp class="SANS_TheSansMonoCd_W5Regular_11">_omit()</samp>,
    as discussed earlier; if we wanted to change the style, we’d use this specific
    style parameter of Dash’s HTML components. In our case, the custom styling extends
    the box width around the named slider component. If we were to change this in
    *dash_reusable_components.py*, every instance we create in *app.py* would change
    to match!'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个HTML <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 容器，包含两个元素：一个HTML段落元素，通过
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.P()</samp> 向命名的滑块添加标签，另一个 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 容器，包含一个常规的Dash <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider()</samp>
    元素。这里我们通过设置外部 <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> 样式字典的 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">padding</samp> 属性来硬编码一些样式元素。这是我们为什么可能会选择使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">_omit()</samp> 从字典中移除 <samp class="SANS_TheSansMonoCd_W5Regular_11">style</samp>
    键的一个很好的例子，正如前面讨论的那样；如果我们想更改样式，可以使用Dash HTML组件的这个特定样式参数。在我们的案例中，自定义样式扩展了命名滑块组件周围的框宽度。如果我们在
    *dash_reusable_components.py* 中更改了此样式，那么我们在 *app.py* 中创建的每个实例都会进行相应的更改！
- en: We use the formatting string <samp class="SANS_TheSansMonoCd_W5Regular_11">f"{name}:"</samp>
    to access the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    argument of the <samp class="SANS_TheSansMonoCd_W5Regular_11">NamedSlider()</samp>
    call from *app.py* and put it into the string that will serve as the label for
    our slider. This is what allows us to give each slider its own label.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: The <samp class="SANS_TheSansMonoCd_W5Regular_11">"margin-left"</samp> attribute
    of the inner <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp> shifts the
    whole slider slightly to the right to give the appearance of an indentation of
    the slider component.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '*The custom function names in* dash_reusable_components.py *start with a capitalized
    letter by convention because Dash components are capitalized too. This way, calling
    a reusable component feels similar to calling a predefined Dash component.*'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-11](chapter7.xhtml#List7-11) shows the code in *app.py* that instantiates
    the named slider in [Figure 7-6](chapter7.xhtml#fig7-6).'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.NamedSlider(</samp>
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   name="Degree",</samp>
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="slider-svm-parameter-degree",</samp>
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=2,</samp>
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=10,</samp>
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=3,</samp>
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   step=1,</samp>
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      str(i): str(i) for i in
    range(2, 11, 2)</samp>'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-11: Instantiating
    the NamedSlider component</samp>'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: The slider has a minimum value of 2 and a maximum value of 10\. We also set
    the marks of the slider to the integers 2, 4, 6, 8, and 10, created by the generator
    expression <samp class="SANS_TheSansMonoCd_W5Regular_11">str(i) for i in range(2,
    11, 2)</samp>.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Defining a Named Dropdown</samp>
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: As with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Slider</samp>, we’ll
    build on <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown()</samp> to
    create a named dropdown that includes a label. The process here is similar to
    creating a named slider, so we’ll go over it very briefly to show it to you in
    different contexts. [Listing 7-12](chapter7.xhtml#List7-12) shows the definition
    that goes in *dash_reusable_components.py*.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def NamedDropdown(name, **kwargs):</samp>
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return html.Div(</samp>
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      style={"margin": "10px
    0px"},</samp>'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      children=[</samp>
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        html.P(children=f"{name}:",
    style={"margin-left": "3px"}),</samp>'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        dcc.Dropdown(**kwargs),</samp>
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ],</samp>
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-12: Defining the
    NamedDropdown component</samp>'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: We pass through the list of keyword arguments using the double-asterisk operator
    to both catch all keyword arguments in the <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs</samp>
    dictionary and unpack all those keyword arguments into the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown()</samp>
    creation routine. The function argument <samp class="SANS_TheSansMonoCd_W5Regular_11">name</samp>
    that is passed in when creating the <samp class="SANS_TheSansMonoCd_W5Regular_11">NamedDropdown</samp>
    instance serves as the text label in the HTML paragraph element.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: The resultant <samp class="SANS_TheSansMonoCd_W5Regular_11">NamedDropdown</samp>
    reusable component will look something like [Figure 7-7](chapter7.xhtml#fig7-7).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-7.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-7: Example of a named
    dropdown</samp>'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: In [Listing 7-13](chapter7.xhtml#List7-13) we create this component in *app.py*.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.NamedDropdown(</samp>
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   name="Select Dataset",</samp>
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="dropdown-select-dataset",</samp>
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   options=[</samp>
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      {"label": "Moons", "value":
    "moons"},</samp>'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      {</samp>
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "label": "Linearly Separable",</samp>'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "value": "linear",</samp>'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      },</samp>
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      {</samp>
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "label": "Circles",</samp>'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">        "value": "circles",</samp>'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      },</samp>
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   clearable=False,</samp>
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   searchable=False,</samp>
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value="moons",</samp>
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-13: Instantiating
    the NamedDropdown</samp> <samp class="SANS_Futura_Std_Book_Oblique_I_11">component</samp>'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: We call the newly created <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.NamedDropdown()</samp>
    function with the name we want to give the named dropdown component. The remaining
    keyword arguments <samp class="SANS_TheSansMonoCd_W5Regular_11">id</samp> (identifier
    of the HTML element), <samp class="SANS_TheSansMonoCd_W5Regular_11">options</samp>
    (labels and values of the dropdown), <samp class="SANS_TheSansMonoCd_W5Regular_11">clearable</samp>
    (a Boolean either allowing or disallowing users to clear the current selected
    entry by clicking a small icon), <samp class="SANS_TheSansMonoCd_W5Regular_11">searchable</samp>
    (a Boolean either allowing or disallowing users to search the dropdown for a specific
    value), and <samp class="SANS_TheSansMonoCd_W5Regular_11">value</samp> (a default
    dropdown value) are packed into the <samp class="SANS_TheSansMonoCd_W5Regular_11">kwargs</samp>
    dictionary and handed downstream to the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown()</samp>
    creation routine.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: This instantiation will create the named dropdown in [Figure 7-8](chapter7.xhtml#fig7-8),
    with the default dataset set to “Moons” and both <samp class="SANS_TheSansMonoCd_W5Regular_11">searchable</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">clearable</samp> disabled.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-8.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-8: Named dropdown
    clicked state</samp>'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Using reusable components is an extremely efficient way to scale your application
    and create whole new libraries for global use. Just define your own *dash_reusable_components.py*
    file and use the wrapper functions around existing Dash and HTML components in
    your main program file. Reusable components give you easy ways to customize the
    look and feel of your app and make your code easier to understand, more concise,
    and easier to maintain, even if your app requires thousands of lines of code!
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll dive into some new Dash components in the SVM Explorer app that
    haven’t been covered yet.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Using a Dash Graph</samp>
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: The core component of the whole SVM Explorer app is, of course, the graph that
    visualizes the learning and classification performance on the chosen training
    data. [Figure 7-9](chapter7.xhtml#fig7-9) shows the final graph.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-9.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-9: Example Dash graph</samp>'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: First we train the model using the input parameters from the different controls
    in the dashboard. Then we test the accuracy of the model for the test dataset.
    The dots visualize the training data. The triangles visualize the test data. Red
    data points belong to one class and blue to another; we’ll call them class X and
    class Y, respectively. For each piece of training data, we already know whether
    it is X or Y; that is, whether it falls on one side of the decision boundary or
    the other. The model then estimates which class each piece of test data belongs
    to, based on the learned decision boundary from the training data.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用仪表盘中不同控件的输入参数来训练模型。然后，我们测试模型在测试数据集上的准确性。点状图表示训练数据，三角形表示测试数据。红色数据点属于一个类别，蓝色数据点属于另一个类别；我们分别将它们称为类别
    X 和类别 Y。对于每一条训练数据，我们已经知道它是 X 还是 Y；也就是说，知道它位于决策边界的哪一侧。然后，模型会基于从训练数据中学习到的决策边界，估算每条测试数据所属的类别。
- en: 'The following function call accomplishes this powerful visualization (line
    434 in the *app.py* sample project):'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数调用实现了这个强大的可视化效果（位于 *app.py* 示例项目的第 434 行）：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="graph-sklearn-svm",
    figure=prediction_figure)</samp>
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph(id="graph-sklearn-svm",
    figure=prediction_figure)</samp>
- en: We create a <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> component
    with the <samp class="SANS_TheSansMonoCd_W5Regular_11">id "graph-sklearn-svm"</samp>.
    As a <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> argument, we
    pass the <samp class="SANS_TheSansMonoCd_W5Regular_11">prediction_figure</samp>
    variable, which we defined in lines 410 through 421 in *app.py* (see [Listing
    7-14](chapter7.xhtml#List7-14)).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个 <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> 组件，使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">id "graph-sklearn-svm"</samp>。作为
    <samp class="SANS_TheSansMonoCd_W5Regular_11">figure</samp> 参数，我们传入了 <samp class="SANS_TheSansMonoCd_W5Regular_11">prediction_figure</samp>
    变量，它是在 *app.py* 文件的第 410 到 421 行定义的（见 [Listing 7-14](chapter7.xhtml#List7-14)）。
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">prediction_figure = figs.serve_prediction_plot(</samp>
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">prediction_figure = figs.serve_prediction_plot(</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   model=clf,</samp>
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   model=clf,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   X_train=X_train,</samp>
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   X_train=X_train,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   X_test=X_test,</samp>
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   X_test=X_test,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   y_train=y_train,</samp>
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   y_train=y_train,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   y_test=y_test,</samp>
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   y_test=y_test,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Z=Z,</samp>
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Z=Z,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   xx=xx,</samp>
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   xx=xx,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   yy=yy,</samp>
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   yy=yy,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   mesh_step=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">h,</samp>
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   mesh_step=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">h,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   threshold=threshold,</samp>
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">   threshold=threshold,</samp>
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-14: Defining the
    graph’s attributes</samp>'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-14: 定义图形的属性</samp>'
- en: 'We won’t go into a lot of technical detail here, but notice that the function
    call uses four primary datasets: <samp class="SANS_TheSansMonoCd_W5Regular_11">X_train</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">y_train</samp>, as well as <samp
    class="SANS_TheSansMonoCd_W5Regular_11">X_test</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">y_test</samp>.
    Like in all supervised learning, we train the model using a training dataset consisting
    of a collection of *(X, y)* tuples for input data *X* and output data *y* to obtain
    the mapping *X* → *y*. We pass all these bits of information into the following
    function:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨技术细节，但请注意，函数调用使用了四个主要数据集：<samp class="SANS_TheSansMonoCd_W5Regular_11">X_train</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">y_train</samp>，以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">X_test</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">y_test</samp>。像所有监督学习一样，我们使用由
    *(X, y)* 元组组成的训练数据集来训练模型，其中 *X* 是输入数据，*y* 是输出数据，目的是得到映射关系 *X* → *y*。我们将所有这些信息传递给以下函数：
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">figs.serve_prediction_plot()</samp>
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: 'This function plots the prediction contour of the SVM, the threshold line,
    and the test and training scatter data. Then it returns the resultant figure as
    an object that can be passed in the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>
    component, as shown before. We’ll break it down and discuss its composite parts.
    First, the <samp class="SANS_TheSansMonoCd_W5Regular_11">figs</samp> section refers
    to this import statement in the header of *app.py*:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import utils.figures as figs</samp>
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: We import the <samp class="SANS_TheSansMonoCd_W5Regular_11">figures</samp> module
    from the *utils* folder and name it <samp class="SANS_TheSansMonoCd_W5Regular_11">figs</samp>.
    The module contains utility functions to create the various plots shown in the
    dashboard, including the <samp class="SANS_TheSansMonoCd_W5Regular_11">serve_prediction_plot()</samp>
    function for the SVM model’s training and testing data visualization.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: The function <samp class="SANS_TheSansMonoCd_W5Regular_11">serve_prediction_plot()</samp>
    creates the Plotly graph object used to visualize the training and testing data
    and the contour plot (see [Figure 7-10](chapter7.xhtml#fig7-10)). We define it
    in lines 7 through 96 in the *figures.py* module, shown in [Listing 7-15](chapter7.xhtml#List7-15).
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.graph_objs as go</samp>
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def serve_prediction_plot(...):</samp>
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Create the plot</samp>
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Plot the prediction contour
    of the SVM</samp>
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   trace0 = go.Contour(</samp>
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Plot the threshold</samp>
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   trace1 = go.Contour(</samp>
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # Plot Training Data</samp>
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   trace2 = go.Scatter(</samp>
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   trace3 = go.Scatter(</samp>
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   layout = go.Layout(</samp>
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">...</samp>
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   )</samp>
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   data = [trace0, trace1, trace2,
    trace3]</samp>
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   figure = go.Figure(data=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">data, layout=layout)</samp>
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   return figure</samp>
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-15: Creating a graph
    object and filling it with data</samp>'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: 'This code skeleton shows how we create the contour plots shown in [Figure 7-10](chapter7.xhtml#fig7-10)
    that visualize the SVM confidence levels, as well as the two scatter plots for
    the training and test data. We store these plots in four variables: <samp class="SANS_TheSansMonoCd_W5Regular_11">trace0</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">trace1</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">trace2</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">trace3</samp>. We then use these
    variables as the data input argument of the <samp class="SANS_TheSansMonoCd_W5Regular_11">go.Figure()</samp>
    constructor that creates a Plotly figure object containing the four datasets.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: We’ll take a look at the <samp class="SANS_TheSansMonoCd_W5Regular_11">go.Contour</samp>
    component next.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Creating a Plotly
    Contour Plot</samp>
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: A *contour line* is a great way to visualize three-dimensional data in a two-dimensional
    plot. Each point *(x,y)* in 2D space has an associated *z* value, which you can
    think of as the “height” of the point (for example, an altitude value for a 2D
    map). All points on a contour line have the same *z* values. [Figure 7-10](chapter7.xhtml#fig7-10)
    shows an example of contour lines.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-10.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-10: Example contour
    plot</samp>'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: To define these contour lines, we define the *z* values in a 2D array where
    cell *(x,y)* defines the *z* value for the respective *x* and *y* points in space.
    Python will then automatically “connect” these points in contour lines. The code
    snippet in [Listing 7-16](chapter7.xhtml#List7-16) produces this plot.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">import plotly.graph_objects as
    go</samp>
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig = go.Figure(data =</samp>
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   go.Contour(</samp>
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      z = [[1, 2, 3],</samp>
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [2, 3, 4],</samp>
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">          [3, 4, 5]]</samp>
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ))</samp>
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">fig.show()</samp>
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-16: Creating a basic
    contour plot</samp>'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: In the *z* array, which cells *(x,y)* have a *z* value of 3? The three cells
    (0,2), (1,1), and (2,0). Now, investigate the contour plot figure and find those
    points *(x,y)* in 2D space. Is the visualized *z* value the same value of 3?
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: You can see that by defining a few points with similar *z* values. Plotly does
    all the heavy lifting of visualizing the contour plot and even coloring it! If
    you want to learn more about the contour plot (for example, how to customize the
    *x* and *y* values or the shape of the contour lines), visit [*https://<wbr>plotly<wbr>.com<wbr>/python<wbr>/contour<wbr>-plots*](https://plotly.com/python/contour-plots).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: In the contour plot in the SVM model, the contour lines are the points that
    generate the same certainty of a point belonging to a particular class. This “certainty”
    is called a *decision function*, and it associates a value to each point in space.
    It is the heart of the machine learning model. You could argue that the decision
    function *is* the model. For a given input *x*, the sign of the decision function
    *f(x)* defines whether the model *f* predicts that *x* belongs to one class. If
    it is positive, it belongs to class X, and if it is negative, it belongs to class
    Y. The more positive or negative the decision function is, the more certain it
    is that the input point belongs to the class.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_I_11">Using Dash Loading</samp>
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: 'In “Using a Dash Graph” earlier, you learned about the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>
    component with the <samp class="SANS_TheSansMonoCd_W5Regular_11">prediction_figure</samp>
    argument. The computations involved are relatively complicated and may take some
    loading or initialization time. The user may have to wait, and it can hurt usability
    and feel clunky to use, so the designers of the SVM Explorer app decided to wrap
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> in a <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Loading</samp> component. The idea
    is simple: while your Python interpreter crunches the numbers and runs the computation,
    Dash shows you a loading symbol (load spinner). Always keep the user in the loop!'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-11](chapter7.xhtml#fig7-11) shows what such a loading symbol may
    look like at different points in time.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-11.png)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-11: Example Dash loading
    symbol</samp>'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: This dynamic loading symbol is then shown to the user for as long as it takes
    to load the Dash component that is wrapped by the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Loading</samp>
    component.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s have a look at how we used the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Loading</samp>
    component in the SVM Explorer app (see [Listing 7-17](chapter7.xhtml#List7-17)).
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">children=dcc.Loading(</samp>
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   className=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">"graph-wrapper",</samp>
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   children=dcc.Graph(id="graph-sklearn-svm",
    figure=prediction_figure),</samp>
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">   style={"display": "none"},</samp>'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-17: Setting the loading
    behavior</samp>'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 'The function call has three arguments:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">className   </samp>We associate
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">graph-wrapper</samp> class definition
    from the CSS stylesheet. This simply defines some width and height constraints
    for the component.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">children   </samp>This is the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> object to be wrapped
    by the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Loading</samp> component.
    While this object loads, the loading symbol is supposed to be shown.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">style</samp>   We add a dictionary
    of style attributes to the element. In particular, we set the <samp class="SANS_TheSansMonoCd_W5Regular_11">"display"</samp>
    attribute to <samp class="SANS_TheSansMonoCd_W5Regular_11">"none"</samp>. This
    essentially hides the whole element. However, in the stylesheet, we overwrite
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">"display"</samp> attribute to
    <samp class="SANS_TheSansMonoCd_W5Regular_11">"flex"</samp>, which sets the size
    flexibly according to the available space. Code is never perfect, and this could
    have been written more concisely by the creators of the SVM app.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: As it turns out, we won’t even see the loading symbol if we run the SVM Explorer
    app because the components load so quickly. We suspect that this app was initially
    implemented for a slower version of Dash. But Dash is improving rapidly in speed
    and usability, so this SVM app can now be computed quickly—and we can simply skip
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Loading</samp> wrapper.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: For a complete video tutorial on using loading spinners in Dash apps, see the
    video “Dash Bootstrap Spinner & Progress Bar” available at [*https://<wbr>learnplotlydash<wbr>.com*](https://learnplotlydash.com).
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Dash Callbacks</samp>
  id: totrans-464
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The SVM Explorer app is an advanced app with many interacting code pieces. So
    far, we’ve focused on the isolated components you haven’t already seen in another
    app. Now it’s time to look at the bigger picture again, by exploring how the different
    components interact.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: To get a quick overview of where to focus, let’s start with the callback graph
    provided by the Dash framework when you run your app with <samp class="SANS_TheSansMonoCd_W5Regular_11">debug=True</samp>
    (see [Listing 7-18](chapter7.xhtml#List7-18)).
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11"># Running the server</samp>
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">if __name__ == "__main__":</samp>
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   app.run_server(debug=True)</samp>
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-18: Enabling debugging</samp>'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: You can now access the automatically generated callback graph via the button
    menu shown in [Figure 7-12](chapter7.xhtml#fig7-12).
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-12.png)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-12: Callback graph
    button menu</samp>'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: This button menu should appear at the lower right of your Dash app in your browser.
    Click **Callback Graph** to obtain what’s shown in [Figure 7-13](chapter7.xhtml#fig7-13).
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-13.png)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-13: The callback graph
    for the SVM Explorer app</samp>'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: The names above the boxes are the Dash components you defined in your *app.py*
    file. [Listing 7-19](chapter7.xhtml#List7-19) shows an example of the code for
    a named slider.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">drc.NamedSlider(</samp>
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   name="Cost (C)",</samp>
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   id="slider-svm-parameter-C-power",</samp>
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   min=-2,</samp>
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   max=4,</samp>
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   value=</samp><samp class="SANS_TheSansMonoCd_W5Regular_11">0,</samp>
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   marks={</samp>
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">      i: "{}".format(10 ** i)</samp>'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      for i in range(-2, 5)</samp>
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   },</samp>
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-19: NamedSlider component
    definition, showing where the names in the callback graph come from</samp>'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: You can find the name <samp class="SANS_TheSansMonoCd_W5Regular_11">slider-svm-parameter-C-power</samp>
    in one of the upper four boxes. With the named slider, you feed into the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">slider-svm-parameter-C-coef</samp> component.
    All components feed into the <samp class="SANS_TheSansMonoCd_W5Regular_11">div-graphs</samp>
    component that holds all our SVM graphs.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s focus on the callback function that maps all those inputs into the
    single output component <samp class="SANS_TheSansMonoCd_W5Regular_11">div-graphs</samp>
    in lines 346 through 453 in the *app.py* main file. In particular, we’re going
    to start with the input and output annotations and the function definition, shown
    in [Listing 7-20](chapter7.xhtml#List7-20).
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">@app.callback(</samp>
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   Output("div-graphs", "children"),</samp>
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   [</samp>
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("dropdown-svm-parameter-kernel",
    "value"),</samp>
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-svm-parameter-degree",
    "value"),</samp>
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-svm-parameter-C-coef",
    "value"),</samp>
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-svm-parameter-C-power",
    "value"),</samp>
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-svm-parameter-gamma-coef",
    "value"),</samp>
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-svm-parameter-gamma-power",
    "value"),</samp>
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("dropdown-select-dataset",
    "value"),</samp>
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-dataset-noise-level",
    "value"),</samp>
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("radio-svm-parameter-shrinking",
    "value"),</samp>
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-threshold",
    "value"),</samp>
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      Input("slider-dataset-sample-size",
    "value"),</samp>
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ],</samp>
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">)</samp>
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">def update_svm_graph(</samp>
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   kernel,</samp>
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   degree,</samp>
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   C_coef,</samp>
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   C_power,</samp>
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   gamma_coef,</samp>
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   gamma_power,</samp>
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   dataset,</samp>
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   noise,</samp>
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   shrinking,</samp>
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   threshold,</samp>
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   sample_size,</samp>
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">):</samp>
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-20: Input and output
    annotations of the SVM graph</samp>'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a single input, the function has a list of inputs, as shown graphically
    in the callback graph. All those inputs are needed to calculate the SVM model.
    This SVM model is then used to create all the graphs you see in the SVM Explorer
    app.
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 7-21](chapter7.xhtml#List7-21) shows the code that generates the different
    graphs.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   # … Model Computations Skipped
    for Readability …</samp>
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">return
    [</samp>
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div(</samp>
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         id="svm-graph-container",</samp>
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">         children=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Loading(</samp>
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">className="graph-wrapper",</samp>
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">            children=dcc.Graph(id="graph-sklearn-svm",</samp>
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                               figure=prediction_figure),</samp>
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_TheSansMonoCd_W5Regular_11">           style={"display":
    "none"},</samp>'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        ),</samp>
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      ),</samp>
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">      html.Div(</samp>
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        id="graphs-container",</samp>
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        children=[</samp>
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           dcc.Loading(</samp>
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              className="graph-wrapper",</samp>
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              children=dcc.Graph(id=</samp><samp
    class="SANS_TheSansMonoCd_W5Regular_11">"graph-line-roc-curve",</samp>
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                                 figure=roc_figure),</samp>
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           ),</samp>
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           dcc.Loading(</samp>
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              className="graph-wrapper",</samp>
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              children=dcc.Graph(</samp>
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 id="graph-pie-confusion-matrix",</samp>
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">                 figure=confusion_figure</samp>
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">              ),</samp>
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">           ),</samp>
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">        </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">],</samp>
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">    </samp><samp class="SANS_TheSansMonoCd_W5Regular_11">),</samp>
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W5Regular_11">   ]</samp>
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Listing 7-21: Return value
    of the update_svm_graph function that generates the graphs in the SVM Explorer
    app</samp>'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 'The return value is a list of two <samp class="SANS_TheSansMonoCd_W5Regular_11">Div</samp>
    elements. The first holds the prediction figure discussed in the “Creating a Plotly
    Contour Plot” section earlier in this chapter. The second holds two more <samp
    class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp> elements: a line graph
    and a pie chart. [Figure 7-14](chapter7.xhtml#fig7-14) shows the three generated
    graphs.'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure7-14.png)'
  id: totrans-555
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 7-14: Three dcc.Graph</samp>
    <samp class="SANS_Futura_Std_Book_Oblique_I_11">elements</samp>'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Summary</samp>
  id: totrans-557
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We covered many advanced Dash concepts in this chapter. You learned about the
    robust SVM classification algorithm and how dashboards can help you visualize
    machine learning models. You learned how to integrate NumPy and scikit-learn into
    your Dashboard apps, and how to create reusable components. You also learned about
    or strengthened your understanding of Dash HTML components such as <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Div</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.A</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Section</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">html.P</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">html.Button</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">html.H2</samp>, as well as standard
    Dash components such as <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Graph</samp>,
    <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Slider</samp>, and <samp class="SANS_TheSansMonoCd_W5Regular_11">dcc.Dropdown</samp>.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: You now possess the skills to go out there and create your own complex dashboard
    apps and dive into the gallery to learn about advanced Dash components and features.
    We didn’t just give you the fish; we told you how and where to get the fish yourself.
    The gallery is an ocean full of fish, and if you ever feel hungry for more, you’ll
    know where to go!
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Resources</samp>
  id: totrans-560
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To dive deeper into the SVM Explorer app, feel free to check out the following
    resources recommended to us by Xing Han, one of the app’s creators:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: 'Classifier comparison: [*https://<wbr>scikit<wbr>-learn<wbr>.org<wbr>/stable<wbr>/auto<wbr>_examples<wbr>/classification<wbr>/plot<wbr>_classifier<wbr>_comparison<wbr>.xhtml*](https://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.xhtml)'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ROC metric: [*https://<wbr>scikit<wbr>-learn<wbr>.org<wbr>/stable<wbr>/auto<wbr>_examples<wbr>/model<wbr>_selection<wbr>/plot<wbr>_roc<wbr>.xhtml*](https://scikit-learn.org/stable/auto_examples/model_selection/plot_roc.xhtml)'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Confusion matrix: [*https://<wbr>scikit<wbr>-learn<wbr>.org<wbr>/stable<wbr>/modules<wbr>/model<wbr>_evaluation<wbr>.xhtml#confusion<wbr>-matrix*](https://scikit-learn.org/stable/modules/model_evaluation.xhtml#confusion-matrix)'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SVM classifier (SVC): [*https://<wbr>scikit<wbr>-learn<wbr>.org<wbr>/stable<wbr>/modules<wbr>/generated<wbr>/sklearn<wbr>.svm<wbr>.SVC<wbr>.xhtml*](https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.xhtml)'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“A Practical Guide to Support Vector Classification (SVC)”: [*https://<wbr>www<wbr>.csie<wbr>.ntu<wbr>.edu<wbr>.tw<wbr>/~cjlin<wbr>/papers<wbr>/guide<wbr>/guide<wbr>.pdf*](https://www.csie.ntu.edu.tw/~cjlin/papers/guide/guide.pdf)'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
