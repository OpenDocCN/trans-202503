- en: Chapter 7. Image Preprocessing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Preprocessing is most commonly used in scientific imaging to remove noise and
    distortions from an image prior to analyzing its meaningful content. Scientists
    preprocess satellite images, for example, to remove interference like atmospheric
    debris and clouds before using the images for research. Even if you’re not a scientist,
    you may want to preprocess your images, since these techniques can help you correct
    distortions, improve color balance, and enhance visibility.
  prefs: []
  type: TYPE_NORMAL
- en: '7.1 Tutorial: Extracting Information from a Picture'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, how do you separate noise from the meaningful elements in a picture? One
    way is to gather information about the image, via histograms, to see if there’s
    distortion in any of the channels. The image we’ll use in this tutorial isn’t
    particularly interesting, but it is representative of the problems you may encounter
    when dealing with badly taken photographs. As you can see in [Figure 7-1](ch07s01.html#initial_photograph-id00073
    "Figure 7-1. The initial photograph"), the picture’s quality is very poor. The
    photograph was taken through a closed window, in poor lighting, and with the camera’s
    automatic settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![The initial photograph](httpatomoreillycomsourcenostarchimages1454932.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-1. The initial photograph
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Begin by gathering information on the image dynamics, such as the ratio between
    the smallest and largest values in various channels. The combined histograms shown
    in [Figure 7-2](ch07s01.html#histogram_for_the_initial_photograph "Figure 7-2. The
    histogram for the initial photograph") are a way to visualize the image dynamics.
    Open them via **Image: Colors > Info > Histogram**, and change the CHANNEL to
    RGB. The three channels—Red, Green, and Blue—are shown in the same graph in their
    corresponding colors. The colors in the areas where the histograms superimpose
    are additive. A position on the horizontal axis represents a specific value between
    0 and 255\. The height of the histogram (the vertical axis) represents the number
    of pixels with that value.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The histogram for the initial photograph](httpatomoreillycomsourcenostarchimages1454934.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-2. The histogram for the initial photograph
  prefs: []
  type: TYPE_NORMAL
- en: '![The meaningful part of the histogram](httpatomoreillycomsourcenostarchimages1454936.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-3. The meaningful part of the histogram
  prefs: []
  type: TYPE_NORMAL
- en: '![After equalizing](httpatomoreillycomsourcenostarchimages1454938.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-4. After equalizing
  prefs: []
  type: TYPE_NORMAL
- en: Move the small triangles under the horizontal grayscale bar to frame the meaningful
    interval of values. [Figure 7-3](ch07s01.html#meaningful_part_of_the_histogram
    "Figure 7-3. The meaningful part of the histogram") shows that almost no pixels
    have a value less than 65 or greater than 173\. In fact, 99.1 percent of the pixels
    are in the framed interval, which explains why the image is dull and hazy.
  prefs: []
  type: TYPE_NORMAL
- en: '![The histogram after equalization](httpatomoreillycomsourcenostarchimages1454940.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-5. The histogram after equalization
  prefs: []
  type: TYPE_NORMAL
- en: '![After stretching the contrast](httpatomoreillycomsourcenostarchimages1454942.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-6. After stretching the contrast
  prefs: []
  type: TYPE_NORMAL
- en: 'Extending the dynamic range is fairly easy with the tools available in GIMP.
    The simplest one is **Image: Colors > Auto > Equalize**, which automatically stretches
    the dynamic range in each channel to span the entire available range. [Figure 7-4](ch07s01.html#after_equalizing
    "Figure 7-4. After equalizing") shows the result, and [Figure 7-5](ch07s01.html#histogram_after_equalization
    "Figure 7-5. The histogram after equalization") shows the corresponding histogram.
    Because the image has only slightly more than a hundred different values, and
    the range has 255 values, extending the existing values over the full range leaves
    a lot of values unrepresented, which explains the strange “comb” shape.'
  prefs: []
  type: TYPE_NORMAL
- en: In the resulting image ([Figure 7-4](ch07s01.html#after_equalizing "Figure 7-4. After
    equalizing")), you see the squirrel is more visible, but the color distortions
    in the image have been exaggerated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same menu contains other automatic tools. For example, [Figure 7-6](ch07s01.html#after_stretching_the_contrast
    "Figure 7-6. After stretching the contrast") shows the image and its histograms
    after we used **Image: Colors > Auto > Stretch Contrast**. You could also try
    **Image: Colors > Auto > Normalize**, which gives a similar result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After using Auto in the Levels tool](httpatomoreillycomsourcenostarchimages1454944.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-7. After using Auto in the Levels tool
  prefs: []
  type: TYPE_NORMAL
- en: '![Extracting the RGB channels](httpatomoreillycomsourcenostarchimages1454946.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-8. Extracting the RGB channels
  prefs: []
  type: TYPE_NORMAL
- en: 'Pressing the AUTO button in the Levels tool yields the image shown in [Figure 7-7](ch07s01.html#after_using_auto_in_the_levels_tool
    "Figure 7-7. After using Auto in the Levels tool"). You can get a similar result
    by using **Image: Colors > Curves** to manipulate the curves in each color channel
    and suppress high and low values, which are not present in this photograph.'
  prefs: []
  type: TYPE_NORMAL
- en: Histogram Modification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The histograms you saw in the preceding section are not very useful because
    they are crammed into one window, and their significance is not obvious in the
    image. A better way to visualize the three channels is to use **Image: Colors
    > Components > Decompose**. In the dialog shown in [Figure 7-8](ch07s01.html#extracting_the_rgb_channels
    "Figure 7-8. Extracting the RGB channels"), choose RGB to decompose the image
    into its three RGB channels. A new image with three grayscale layers, one for
    each channel, is created. In the Histogram window, choose the Value channel, which
    is done automatically because the image has no color or transparency.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The red channel](httpatomoreillycomsourcenostarchimages1454948.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-9. The red channel
  prefs: []
  type: TYPE_NORMAL
- en: '![The green channel](httpatomoreillycomsourcenostarchimages1454950.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-10. The green channel
  prefs: []
  type: TYPE_NORMAL
- en: '![The blue channel](httpatomoreillycomsourcenostarchimages1454952.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-11. The blue channel
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-9](ch07s01.html#red_channel "Figure 7-9. The red channel") to [Figure 7-11](ch07s01.html#blue_channel
    "Figure 7-11. The blue channel") show the three channels, along with their respective
    histogram. Clearly the Blue channel contributes much less to the image than the
    other two channels. Let’s see what happens if you stretch its histogram and leave
    the others unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stretching the dynamics of the Blue layer](httpatomoreillycomsourcenostarchimages1454954.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-12. Stretching the dynamics of the Blue layer
  prefs: []
  type: TYPE_NORMAL
- en: '![After recomposing the image](httpatomoreillycomsourcenostarchimages1454956.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-13. After recomposing the image
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Blue layer in the Layers dialog and apply **Image: Colors > Auto
    > Equalize**. The result, if you hide the other two layers, appears in [Figure 7-12](ch07s01.html#stretching_the_dynamics_of_the_blue_laye
    "Figure 7-12. Stretching the dynamics of the Blue layer"). Next, apply **Image:
    Colors > Components > Recompose**. The result, shown in [Figure 7-13](ch07s01.html#after_recomposing_the_image
    "Figure 7-13. After recomposing the image"), is worse than the original. This
    image demonstrates that proper preprocessing requires an understanding of image
    dynamics that goes beyond being able to use the automatic tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Noise Reduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Noise is a set of small fluctuations around the average value intensity in
    some region of an image. As you’ll see later in this chapter, noise reduction
    is useful in many circumstances. But in the present case, the image is mostly
    noise, and no noise reduction process can really improve it. The only tool that’s
    even slightly useful is **Image: Filters > Enhance > Unsharp Mask**, which brings
    up the dialog shown in [Figure 7-14](ch07s01.html#unsharp_mask_dialog "Figure 7-14. The
    Unsharp Mask dialog").'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Unsharp Mask dialog](httpatomoreillycomsourcenostarchimages1454958.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-14. The Unsharp Mask dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![After using Unsharp Mask](httpatomoreillycomsourcenostarchimages1454960.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-15. After using Unsharp Mask
  prefs: []
  type: TYPE_NORMAL
- en: If you increase the RADIUS to more than 40, you improve the image a bit, as
    shown in [Figure 7-15](ch07s01.html#after_using_unsharp_mask "Figure 7-15. After
    using Unsharp Mask"). The squirrel is more visible and has more relief, but identifying
    most of the plants in the background would still be very difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Edge Detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generally, edge detection enhances the visibility of objects in a photograph.
    But when we applied the various filters in the **Image: Filters > Edge Detect**
    menu to our initial squirrel photograph, we didn’t see any improvement. You can
    achieve a better result by successively applying several different tools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, first select the Levels tool, and click AUTO. Next, apply the
    Unsharp Mask filter. Finally, choose the **Image: Filters > Edge-Detect > Edge**
    filter. Using the settings shown in [Figure 7-16](ch07s01.html#edge_filter_dialog
    "Figure 7-16. The Edge filter dialog"), you get the result shown in [Figure 7-17](ch07s01.html#after_using_the_roberts_edge_detection_f
    "Figure 7-17. After using the Roberts edge detection filter"). Admittedly, this
    version is not really an improvement if your goal is to create a realistic image
    of the squirrel in its habitat. You could try applying the last filter on a copy
    of the layer and then adjusting the blending mode to get a more natural result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Edge filter dialog](httpatomoreillycomsourcenostarchimages1454962.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-16. The Edge filter dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![After using the Roberts edge detection filter](httpatomoreillycomsourcenostarchimages1454964.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-17. After using the Roberts edge detection filter
  prefs: []
  type: TYPE_NORMAL
- en: 7.2 The Principles of Preprocessing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we introduce you to the general principles of preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: Subjective Aspects of Preprocessing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image preprocessing enhances the visibility of the elements that we’re interested
    in within an image. In other words, the aim is to restore the original information
    as faithfully as possible. Generally speaking, preprocessing methods make pixels
    in the same regions more similar or increase the differences among pixels in different
    regions. But defining exactly what makes up a “region” is difficult.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned at the beginning of this chapter, preprocessing is more commonly
    used in scientific imaging applications than when creating decorative imagery
    or photos for fun. If a photographer wants to touch up portraits he’s taken of
    an actor, he’ll probably use the techniques from [Chapter 2](ch02.html "Chapter 2. Photograph
    Retouching") and [Chapter 5](ch05.html "Chapter 5. Composite Photography"), not
    the techniques in this chapter. Erasing wrinkles or blemishes doesn’t require
    a lot of information, just a steady hand and a little time.
  prefs: []
  type: TYPE_NORMAL
- en: On the contrary, biologists often want to extract as much information as possible
    from a *micrograph*, a photo taken through a microscope. If they want to enhance
    the image quality, they can’t use techniques that degrade the information contained
    in the image. This also holds true for an intelligence agent using a photo taken
    via satellite or for an astronomer using a photo taken through a telescope.
  prefs: []
  type: TYPE_NORMAL
- en: The techniques used in this chapter modify the look of an image so you can extract
    information from it more easily. They remove useless and detrimental information
    (i.e., noise) to reinforce the meaningful information.
  prefs: []
  type: TYPE_NORMAL
- en: The idea of improving an image is a highly subjective one. But the human eye
    is especially sensitive to high contrasts, so the techniques we present here are
    generally intended to increase an image’s contrast, as it’s is the best way to
    improve visibility within a scene.
  prefs: []
  type: TYPE_NORMAL
- en: Although this chapter’s appeal is narrower than that of previous chapters, we
    think the techniques presented here can be useful to almost anyone who processes
    photographs with GIMP. In particular, the noise-reduction and edge-detection techniques
    have a variety of applications. Moreover, this information will help you to build
    a more thorough understanding of GIMP’s capabilities, which might come in handy
    when you least expect it.
  prefs: []
  type: TYPE_NORMAL
- en: '![A micrograph of bacteria](httpatomoreillycomsourcenostarchimages1454966.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-18. A micrograph of bacteria
  prefs: []
  type: TYPE_NORMAL
- en: '![The histogram for](httpatomoreillycomsourcenostarchimages1454968.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-19. The histogram for [Figure 7-18](ch07s02.html#micrograph_of_bacteria
    "Figure 7-18. A micrograph of bacteria")
  prefs: []
  type: TYPE_NORMAL
- en: Histograms and Decomposition into Channels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main purpose of image preprocessing is to get information that helps make
    the image more readable. When you use the image histogram to make adjustments,
    you change the individual pixel intensities. This transformation does not change
    the shape of the regions, but it can change their texture, color, luminosity,
    or contrast with the surroundings.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-18](ch07s02.html#micrograph_of_bacteria "Figure 7-18. A micrograph
    of bacteria") is a grayscale photo of bacteria that was taken with a microscope.
    [Figure 7-19](ch07s02.html#histogram_for_figure_7dot18 "Figure 7-19. The histogram
    for Figure 7-18") shows its corresponding histogram. Among the 160,000 pixels
    in this image, 1684 of them have a value of 77, in the interval from 0 to 255.'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the Levels tool and adjust the image’s only level, as shown in [Figure 7-20](ch07s02.html#improving_the_value_dynamics
    "Figure 7-20. Improving the value dynamics"). The result appears in [Figure 7-21](ch07s02.html#after_improvement
    "Figure 7-21. After improvement") with its histogram. The histogram now spans
    the entire range, but not all values are represented because the total number
    of discrete colors is less than the length of the interval [0:255]. The contrast
    has been increased, and the resulting image is more readable.
  prefs: []
  type: TYPE_NORMAL
- en: '![Improving the value dynamics](httpatomoreillycomsourcenostarchimages1454970.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-20. Improving the value dynamics
  prefs: []
  type: TYPE_NORMAL
- en: '![After improvement](httpatomoreillycomsourcenostarchimages1454972.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-21. After improvement
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-22](ch07s02.html#micrograph_of_human_blood "Figure 7-22. A micrograph
    of human blood") shows a micrograph of human blood, this time in color. [Figure 7-23](ch07s02.html#combined_histograms_for_figure_7dot22
    "Figure 7-23. The combined histograms for Figure 7-22") shows the combined histograms
    for this image. You see that these histograms each have two separated peaks of
    different heights and in different positions depending on the channel chosen.
    The Red channel extends further into the high values than the other two, but none
    of the channels extends all the way to 255.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get more information by decomposing the image into its three channels
    using **Image: Colors > Components > Decompose**. From the dialog that appears
    ([Figure 7-24](ch07s02.html#decompose_tool_dialog "Figure 7-24. The Decompose
    tool dialog")), choose the first color model—RGB. Leave DECOMPOSE TO LAYERS checked,
    and click OK. A new image is created with a layer for each channel. Each layer
    is a grayscale representation of the corresponding channel. For example, [Figure 7-25](ch07s02.html#red_channel_for_figure_7dot22
    "Figure 7-25. The Red channel for Figure 7-22") shows the Red layer.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A micrograph of human blood](httpatomoreillycomsourcenostarchimages1454974.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-22. A micrograph of human blood
  prefs: []
  type: TYPE_NORMAL
- en: '![The combined histograms for](httpatomoreillycomsourcenostarchimages1454976.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-23. The combined histograms for [Figure 7-22](ch07s02.html#micrograph_of_human_blood
    "Figure 7-22. A micrograph of human blood")
  prefs: []
  type: TYPE_NORMAL
- en: '![The Decompose tool dialog](httpatomoreillycomsourcenostarchimages1454978.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-24. The Decompose tool dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'One useful tool for improving these channels separately is **Image: Colors
    > Curves**. When you apply it to the layer corresponding to the Red channel, you
    get [Figure 7-26](ch07s02.html#adjusting_the_red_channel "Figure 7-26. Adjusting
    the Red channel"). Click the small button on the right, just above the curve,
    to get a logarithmic histogram. In this histogram, the height of the vertical
    bars is not proportional to the number of pixels: The ratio between the height
    and the number decreases as the height increases. In many cases, this type of
    histogram is more readable.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Red channel for](httpatomoreillycomsourcenostarchimages1454980.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-25. The Red channel for [Figure 7-22](ch07s02.html#micrograph_of_human_blood
    "Figure 7-22. A micrograph of human blood")
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the Red channel](httpatomoreillycomsourcenostarchimages1454982.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-26. Adjusting the Red channel
  prefs: []
  type: TYPE_NORMAL
- en: Adjust the curve as shown in [Figure 7-27](ch07s02.html#changing_the_curve "Figure 7-27. Changing
    the curve") to keep only the interesting parts of the histogram. [Figure 7-28](ch07s02.html#resulting_red_channel
    "Figure 7-28. The resulting Red channel") shows the result with the corresponding
    altered histogram. Note the white vertical bars that correspond to the unrepresented
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the same thing with the other two channels: Select the corresponding layer,
    select the Curves tool, and adjust the curve. When you’ve done this for the three
    layers, choose **Image: Colors > Components > Recompose**, which reconstitutes
    the original image using the values of the three channels in the decomposed layers.
    The result appears in [Figure 7-29](ch07s02.html#after_adjusting_the_three_channels
    "Figure 7-29. After adjusting the three channels") with its combined RGB histograms.
    The image is much more readable, and the biologist can now see and interpret some
    details that weren’t really visible before.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the curve](httpatomoreillycomsourcenostarchimages1454984.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-27. Changing the curve
  prefs: []
  type: TYPE_NORMAL
- en: '![The resulting Red channel](httpatomoreillycomsourcenostarchimages1454986.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-28. The resulting Red channel
  prefs: []
  type: TYPE_NORMAL
- en: '![After adjusting the three channels](httpatomoreillycomsourcenostarchimages1454988.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-29. After adjusting the three channels
  prefs: []
  type: TYPE_NORMAL
- en: '![After Image: Colors > Auto > Equalize](httpatomoreillycomsourcenostarchimages1454990.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-30. After Image: Colors > Auto > Equalize'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Image: Colors > Auto > White Balance](httpatomoreillycomsourcenostarchimages1454992.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-31. After Image: Colors > Auto > White Balance'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Image: Colors > Auto > Color Enhance](httpatomoreillycomsourcenostarchimages1454994.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-32. After Image: Colors > Auto > Color Enhance'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting Information through Dynamics Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous tutorial, we used some automatic tools to extend an image’s
    dynamics, but the results weren’t very good. Although they can be useful in some
    cases, you clearly shouldn’t depend on automatic tools to adjust an image’s dynamics.
    In this section, we use several automatic tools on a micrograph of bacteria—with
    some interesting results.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-30](ch07s02.html#after_image_colors_greater_than_auto_gre "Figure 7-30. After
    Image: Colors > Auto > Equalize") to [Figure 7-35](ch07s02.html#after_image_colors_greater_than-id00078
    "Figure 7-35. After Image: Colors > Auto > Stretch HSV") show the result of using
    the six entries from the **Image: Colors > Auto** menu. In this case, the best
    choice is not a matter of taste but rather of utility. The biologist who will
    interpret this picture will choose the transformation that provides her with the
    most significant information.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Image: Colors > Auto > Normalize](httpatomoreillycomsourcenostarchimages1454996.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-33. After Image: Colors > Auto > Normalize'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Image: Colors > Auto > Stretch Contrast](httpatomoreillycomsourcenostarchimages1454998.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-34. After Image: Colors > Auto > Stretch Contrast'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Image: Colors > Auto > Stretch HSV](httpatomoreillycomsourcenostarchimages1455000.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7-35. After Image: Colors > Auto > Stretch HSV'
  prefs: []
  type: TYPE_NORMAL
- en: transformations are global and cannot be parameterized. They work on all the
    channels in the same way, although the Stretch HSV transformation operates on
    the HSV model rather than the RGB one. For comparison, [Figure 7-36](ch07s02.html#after_using_auto_in_the_levels_t-id00079
    "Figure 7-36. After using Auto in the Levels tool") shows the effect of using
    the AUTO button in the Levels tool. That transformation operates separately on
    each channel, removing the lowest values in the histograms, so it takes away some
    background noise but can also delete meaningful information.
  prefs: []
  type: TYPE_NORMAL
- en: '![After using Auto in the Levels tool](httpatomoreillycomsourcenostarchimages1455002.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-36. After using Auto in the Levels tool
  prefs: []
  type: TYPE_NORMAL
- en: '![Increasing gray pixel values (darkening)](httpatomoreillycomsourcenostarchimages1455004.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-37. Increasing gray pixel values (darkening)
  prefs: []
  type: TYPE_NORMAL
- en: Next, try some more complicated manipulations with the Curves tool. Work only
    on the Value channel (i.e., the grayscale values), although you could also work
    on the three color channels separately. In each case, first apply the curve modification
    shown in [Figure 7-27](ch07s02.html#changing_the_curve "Figure 7-27. Changing
    the curve") to remove the unrepresented extreme values.
  prefs: []
  type: TYPE_NORMAL
- en: In the sequence of figures from [Figure 7-37](ch07s02.html#increasing_gray_pixel_values_left_parent
    "Figure 7-37. Increasing gray pixel values (darkening)") to [Figure 7-44](ch07s02.html#result_of_diversifying_pixel_values
    "Figure 7-44. The result of diversifying pixel values"), you see the modification
    made to each curve, its effect (stated in each figure’s caption), and the resulting
    image. The results are fairly diverse, and some of them are probably not very
    useful. In these last examples, the correlation among channels, and thus the general
    hue, was maintained in the images. Note that if you use the AUTO button in the
    Levels tool, the correlation would not be maintained. For most users, this makes
    no difference.
  prefs: []
  type: TYPE_NORMAL
- en: '![The result of increasing pixel values](httpatomoreillycomsourcenostarchimages1455006.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-38. The result of increasing pixel values
  prefs: []
  type: TYPE_NORMAL
- en: '![Decreasing gray pixel values (lightening)](httpatomoreillycomsourcenostarchimages1455008.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-39. Decreasing gray pixel values (lightening)
  prefs: []
  type: TYPE_NORMAL
- en: '![The result of decreasing pixel values](httpatomoreillycomsourcenostarchimages1455010.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-40. The result of decreasing pixel values
  prefs: []
  type: TYPE_NORMAL
- en: A variety of manipulations are possible with the Curves tool. Changing the shape
    of the curves can lead to interesting results—but more often to weird and useless
    results. For example, [Figure 7-45](ch07s02.html#bizarre_curve "Figure 7-45. A
    bizarre curve") shows a bizarre curve applied to the Red channel. A similar curve
    was applied to the two other channels to create [Figure 7-46](ch07s03.html#result_of_applying_bizarre_curves_to_all
    "Figure 7-46. The result of applying bizarre curves to all channels"), which probably
    does not provide the biologist with any additional useful information.
  prefs: []
  type: TYPE_NORMAL
- en: '![Homogenizing gray pixel values](httpatomoreillycomsourcenostarchimages1455012.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-41. Homogenizing gray pixel values
  prefs: []
  type: TYPE_NORMAL
- en: '![The result of homogenizing pixel values](httpatomoreillycomsourcenostarchimages1455014.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-42. The result of homogenizing pixel values
  prefs: []
  type: TYPE_NORMAL
- en: '![Diversifying the pixel values](httpatomoreillycomsourcenostarchimages1455016.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-43. Diversifying the pixel values
  prefs: []
  type: TYPE_NORMAL
- en: '![The result of diversifying pixel values](httpatomoreillycomsourcenostarchimages1455018.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-44. The result of diversifying pixel values
  prefs: []
  type: TYPE_NORMAL
- en: '![A bizarre curve](httpatomoreillycomsourcenostarchimages1455020.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-45. A bizarre curve
  prefs: []
  type: TYPE_NORMAL
- en: 7.3 Filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Filtering removes noise from an image. In this section, we’ll introduce the
    concept behind filtering and show you some common techniques.
  prefs: []
  type: TYPE_NORMAL
- en: The Principles of Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Noise occurs in images for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The photograph was taken in poor conditions; there was not enough light, as
    in [Figure 7-47](ch07s03.html#noise_due_to_poor_conditions "Figure 7-47. Noise
    due to poor conditions"), or the photographer moved, as in [Figure 7-48](ch07s03.html#noise_because_the_photographer_moved
    "Figure 7-48. Noise because the photographer moved").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![The result of applying bizarre curves to all channels](httpatomoreillycomsourcenostarchimages1455022.png.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 7-46. The result of applying bizarre curves to all channels
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Noise due to poor conditions](httpatomoreillycomsourcenostarchimages1455024.png.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 7-47. Noise due to poor conditions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Noise because the photographer moved](httpatomoreillycomsourcenostarchimages1455026.png.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Figure 7-48. Noise because the photographer moved
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The camera was a very low-cost model with too few CCD sensors, which generated
    strong RGB noise, as shown in [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors
    "Figure 7-49. Noise caused by too few image sensors").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sampling frequency was too low, as shown in [Figure 7-50](ch07s03.html#noise_due_to_low_sampling_frequency
    "Figure 7-50. Noise due to low sampling frequency"). This noise is typical in
    a photograph taken from a mobile phone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The printed photograph has been scratched or otherwise damaged, as in [Figure 7-51](ch07s03.html#noise_due_to_photograph_scratching
    "Figure 7-51. Noise due to photograph scratching").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Noise caused by too few image sensors](httpatomoreillycomsourcenostarchimages1455028.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-49. Noise caused by too few image sensors
  prefs: []
  type: TYPE_NORMAL
- en: '![Noise due to low sampling frequency](httpatomoreillycomsourcenostarchimages1455030.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-50. Noise due to low sampling frequency
  prefs: []
  type: TYPE_NORMAL
- en: The most common way to reduce the noise in an image is to use *filtering*. The
    idea is to reduce the amplitude of the perturbations in areas that should be consistent,
    such as a wall or the surface of an object, while preserving the transition areas,
    which are the borders between objects and their surroundings. If possible, these
    transition areas should actually be emphasized.
  prefs: []
  type: TYPE_NORMAL
- en: Characteristic Matrices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filtering changes every pixel value, depending on the values of neighboring
    pixels. A filter is defined by the formula or mathematical mechanism that computes
    this new value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Noise due to photograph scratching](httpatomoreillycomsourcenostarchimages1455032.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-51. Noise due to photograph scratching
  prefs: []
  type: TYPE_NORMAL
- en: '![The Convolution Matrix filter dialog](httpatomoreillycomsourcenostarchimages1455034.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-52. The Convolution Matrix filter dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'We will consider only the simplest and most frequently used filters from among
    those available in GIMP. The noise reduction filters are found in various submenus
    of the **Image: Filters** menu. The most general one is **Image: Filters > Generic
    > Convolution Matrix**, which brings up the dialog shown in [Figure 7-52](ch07s03.html#convolution_matrix_filter_dialog
    "Figure 7-52. The Convolution Matrix filter dialog").'
  prefs: []
  type: TYPE_NORMAL
- en: The MATRIX is an array of numbers with five rows and five columns. Initially
    only the center point contains a value different from zero, in this case 1\. This
    means every pixel is replaced by itself (i.e., it is unchanged).
  prefs: []
  type: TYPE_NORMAL
- en: '![A noise attenuation matrix](httpatomoreillycomsourcenostarchimages1455036.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-53. A noise attenuation matrix
  prefs: []
  type: TYPE_NORMAL
- en: You can modify matrix entries to create various effects. If you change one entry,
    pressing the ![](httpatomoreillycomsourcenostarchimages1453804.png.jpg) key takes
    you to the next one, and its content is selected. If you then key in a new value,
    it replaces the previous one. In [Figure 7-53](ch07s03.html#noise_attenuation_matrix
    "Figure 7-53. A noise attenuation matrix"), we set the eight entries that surround
    the center entry to 1, which means the new pixel is computed as the sum of itself
    and its eight immediate neighbors. To calculate the pixel value as the average
    of these nine values, set the DIVISOR to 9.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the preview shows, this filter reduces the noise and smooths the image.
    [Figure 7-54](ch07s03.html#after_applying_an_averaging_filter_to_fi "Figure 7-54. After
    applying an averaging filter to Figure 7-49") shows the result on the image from
    [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors "Figure 7-49. Noise
    caused by too few image sensors"). The Convolution Matrix filter is easy to use,
    but be warned: The resulting image is blurred. Because its matrix has five rows
    and five columns, you could define a larger filter by adding the four points in
    the middle of the matrix sides. The DIVISOR would then be 13\. The neighboring
    pixels used by the filter should be evenly spaced around the central target pixel.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the same filter with different values in the matrix. For example,
    [Figure 7-55](ch07s03.html#gaussian_filter_matrix "Figure 7-55. A Gaussian filter
    matrix") shows the values for a Gaussian blur, where the pixels closer to the
    central pixel are weighted more heavily. Of course, the DIVISOR must be adjusted
    appropriately. This filter blurs the image even more than the preceding one.
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying an averaging filter to](httpatomoreillycomsourcenostarchimages1455038.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-54. After applying an averaging filter to [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors
    "Figure 7-49. Noise caused by too few image sensors")
  prefs: []
  type: TYPE_NORMAL
- en: '![A Gaussian filter matrix](httpatomoreillycomsourcenostarchimages1455040.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-55. A Gaussian filter matrix
  prefs: []
  type: TYPE_NORMAL
- en: Comparing the Built-in Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of the many filters in the **Image: Filters** menu, several are genuine preprocessing
    filters. For example, take the **Image: Filters > Blur** menu. The Blur entry
    is not very useful because you can’t change the settings. Focus Blur and Motion
    Blur are used for specialized effects. The most useful entries for preprocessing
    are the two Gaussian filters. [Figure 7-56](ch07s03.html#after_applying_an_iie_gaussian_blur_filt
    "Figure 7-56. After applying an IIE Gaussian Blur filter with a radius of 5 to
    Figure 7-49") to [Figure 7-58](ch07s03.html#after_applying_the_selective_gaussian_bl
    "Figure 7-58. After applying the Selective Gaussian Blur filter with a radius
    of 8 to Figure 7-49") show various results of using these filters on the image
    in [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors "Figure 7-49. Noise
    caused by too few image sensors"). As you can see, the Selective Gaussian Blur
    filter worked best for this image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful filter is **Image: Filters > Enhance > Despeckle**. The Despeckle
    filter is called a *median filter*. It doesn’t use the same method as the Convolution
    Matrix, although it relies on a matrix too. [Figure 7-59](ch07s03.html#despeckle_filter_dialog
    "Figure 7-59. The Despeckle filter dialog") shows its dialog, and [Figure 7-60](ch07s03.html#after_using_the_despeckle_filter_on_figu
    "Figure 7-60. After using the Despeckle filter on Figure 7-51") shows the result
    of applying the Despeckle filter to the image in [Figure 7-51](ch07s03.html#noise_due_to_photograph_scratching
    "Figure 7-51. Noise due to photograph scratching"). You could hide the remaining
    scratches by adjusting the parameters. As a matter of fact, simply checking the
    RECURSIVE checkbox, which repeats the filter’s last action, would work, but doing
    so would increase the blurring as well. Still, aesthetically, the result could
    be considered an improvement over the initial photograph.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying an IIE Gaussian Blur filter with a radius of 5 to](httpatomoreillycomsourcenostarchimages1455042.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-56. After applying an IIE Gaussian Blur filter with a radius of 5 to
    [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors "Figure 7-49. Noise
    caused by too few image sensors")
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying an RLE Gaussian Blur filter with a radius of 8 to](httpatomoreillycomsourcenostarchimages1455044.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-57. After applying an RLE Gaussian Blur filter with a radius of 8 to
    [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors "Figure 7-49. Noise
    caused by too few image sensors")
  prefs: []
  type: TYPE_NORMAL
- en: 'The preprocessing filters that we’ve tried so far all have the same drawback:
    They blur the image to some degree. The blurring is because, by averaging the
    values of neighboring pixels, these filters decrease the image quality at strong
    transitions, which delimit the various regions of the image. Sharpening, on the
    other hand, strengthens the transitions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying the Selective Gaussian Blur filter with a radius of 8 to](httpatomoreillycomsourcenostarchimages1455046.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-58. After applying the Selective Gaussian Blur filter with a radius
    of 8 to [Figure 7-49](ch07s03.html#noise_caused_by_too_few_image_sensors "Figure 7-49. Noise
    caused by too few image sensors")
  prefs: []
  type: TYPE_NORMAL
- en: '![The Despeckle filter dialog](httpatomoreillycomsourcenostarchimages1455048.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-59. The Despeckle filter dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Sharpening can be done by building a specific convolution matrix with a more
    complicated pattern than what you used before. You can also apply **Image: Filters
    > Enhance > NL Filter**, but choosing the correct parameters is challenging. The
    best sharpening filter by far is the familiar filter with the paradoxical name:
    **Image: Filters > Enhance > Unsharp Mask**. Its dialog is shown in [Figure 7-61](ch07s03.html#unsharp_mask_filter_dialog-id00080
    "Figure 7-61. The Unsharp Mask filter dialog").'
  prefs: []
  type: TYPE_NORMAL
- en: '![After using the Despeckle filter on](httpatomoreillycomsourcenostarchimages1455050.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-60. After using the Despeckle filter on [Figure 7-51](ch07s03.html#noise_due_to_photograph_scratching
    "Figure 7-51. Noise due to photograph scratching")
  prefs: []
  type: TYPE_NORMAL
- en: '![The Unsharp Mask filter dialog](httpatomoreillycomsourcenostarchimages1455052.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-61. The Unsharp Mask filter dialog
  prefs: []
  type: TYPE_NORMAL
- en: RADIUS sets the thickness of the image edges. AMOUNT sets the effect intensity
    of the mask. Keeping the amount value low (0.25 to 0.5) is generally best. If
    necessary, repeat the action two or more times. This is what we did with [Figure 7-48](ch07s03.html#noise_because_the_photographer_moved
    "Figure 7-48. Noise because the photographer moved") to get the result shown in
    [Figure 7-62](ch07s03.html#after_applying_unsharp_mask_to_figure_7d "Figure 7-62. After
    applying Unsharp Mask to Figure 7-48 twice").
  prefs: []
  type: TYPE_NORMAL
- en: '![After applying Unsharp Mask to twice](httpatomoreillycomsourcenostarchimages1455054.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-62. After applying Unsharp Mask to [Figure 7-48](ch07s03.html#noise_because_the_photographer_moved
    "Figure 7-48. Noise because the photographer moved") twice
  prefs: []
  type: TYPE_NORMAL
- en: '![The original photograph](httpatomoreillycomsourcenostarchimages1455056.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-63. The original photograph
  prefs: []
  type: TYPE_NORMAL
- en: 7.4 Edge Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most cases, major variations in intensity in an image correspond to edges
    of objects. You can often extract objects in an image by detecting these variations
    through a process called *segmentation*. In GIMP, you can do this using the *edge
    detection* tools.
  prefs: []
  type: TYPE_NORMAL
- en: The Principles of Edge Detection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technically, the edges in an image are any areas where the intensity presents
    a strong local variation. Edge detection is a fundamental part of extracting information
    from an image during preprocessing. Often, the discovered edges are then fed to
    a shape recognition system. Shape recognition has applications in robotics, medical
    image analysis, video surveillance, and other fields.
  prefs: []
  type: TYPE_NORMAL
- en: '![After a strong Gaussian blur](httpatomoreillycomsourcenostarchimages1455058.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-64. After a strong Gaussian blur
  prefs: []
  type: TYPE_NORMAL
- en: '![The Edge-Detect menu](httpatomoreillycomsourcenostarchimages1455060.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-65. The Edge-Detect menu
  prefs: []
  type: TYPE_NORMAL
- en: 'We won’t go into the mathematical details of the various edge detection methods
    available. Instead, we’ll demonstrate several of them on one image—the photograph
    in [Figure 7-63](ch07s03.html#original_photograph-id00081 "Figure 7-63. The original
    photograph"). To make this image worthy of edge detection, we first apply a strong
    blur to it by applying **Image: Filters > Blur > Gaussian Blur**. The result is
    shown in [Figure 7-64](ch07s04.html#after_a_strong_gaussian_blur "Figure 7-64. After
    a strong Gaussian blur").'
  prefs: []
  type: TYPE_NORMAL
- en: Edge Detection Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The edge detection filters in GIMP are all found in the **Image: Filters >
    Edge-Detect** menu (see [Figure 7-65](ch07s04.html#edge-detect_menu "Figure 7-65. The
    Edge-Detect menu")). Here, we explore the various entries on this menu.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Difference of Gaussians dialog](httpatomoreillycomsourcenostarchimages1455062.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-66. The Difference of Gaussians dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![After Difference of Gaussians edge detection](httpatomoreillycomsourcenostarchimages1455064.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-67. After Difference of Gaussians edge detection
  prefs: []
  type: TYPE_NORMAL
- en: 'Choosing **Image: Filters > Edge-Detect > Difference of Gaussians** brings
    up the dialog shown in [Figure 7-66](ch07s04.html#difference_of_gaussians_dialog
    "Figure 7-66. The Difference of Gaussians dialog"). Here, we adjusted the radius
    and suggest you do the same. We also unchecked the INVERT box. [Figure 7-67](ch07s04.html#after_difference_of_gaussians_edge_detec
    "Figure 7-67. After Difference of Gaussians edge detection") shows the result.
    Edge detection using the Difference of Gaussians filter worked rather poorly,
    at least for this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Neon dialog](httpatomoreillycomsourcenostarchimages1455066.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-68. The Neon dialog
  prefs: []
  type: TYPE_NORMAL
- en: '![After Neon edge detection](httpatomoreillycomsourcenostarchimages1455068.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-69. After Neon edge detection
  prefs: []
  type: TYPE_NORMAL
- en: '**Image: Filters > Edge-Detect > Neon** works better for this image. [Figure 7-68](ch07s04.html#neon_dialog
    "Figure 7-68. The Neon dialog") shows this filter’s dialog with the settings we
    used. See the result in [Figure 7-69](ch07s04.html#after_neon_edge_detection "Figure 7-69. After
    Neon edge detection"). Note that the important features of the image are much
    more visible than with the previous filter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Image: Filters > Edge-Detect > Laplace** filter is a bit disconcerting:
    When you apply it to this image, no dialog pops up, and the result is completely
    black. But after applying **Image: Colors > Auto > Stretch Contrast** to this
    image, you get the result in [Figure 7-70](ch07s04.html#after_laplace_edge_detection_and_applyin
    "Figure 7-70. After Laplace edge detection and applying Stretch Contrast"). Not
    great, but better than nothing.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Laplace edge detection and applying Stretch Contrast](httpatomoreillycomsourcenostarchimages1455070.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-70. After Laplace edge detection and applying Stretch Contrast
  prefs: []
  type: TYPE_NORMAL
- en: '![The Edge dialog](httpatomoreillycomsourcenostarchimages1455072.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-71. The Edge dialog
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the most handy tool is **Image: Filters > Edge-Detect > Edge**, which
    contains six different filters (algorithms). The dialog, shown in [Figure 7-71](ch07s04.html#edge_dialog
    "Figure 7-71. The Edge dialog"), is simple. The only setting is the AMOUNT. A
    low amount value results in a black image with thin edges; a high amount value
    leads to thicker edges and multicolored dark regions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Sobel edge detection](httpatomoreillycomsourcenostarchimages1455074.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-72. After Sobel edge detection
  prefs: []
  type: TYPE_NORMAL
- en: '![After Prewitt compass edge detection](httpatomoreillycomsourcenostarchimages1455076.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-73. After Prewitt compass edge detection
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 7-72](ch07s04.html#after_sobel_edge_detection "Figure 7-72. After Sobel
    edge detection") shows the result of applying Sobel edge detection with an AMOUNT
    of 6.5\. [Figure 7-73](ch07s04.html#after_prewitt_compass_edge_detection "Figure 7-73. After
    Prewitt compass edge detection") shows the result of applying Prewitt compass
    edge detection with an AMOUNT of 10\. [Figure 7-74](ch07s04.html#after_gradient_edge_detection
    "Figure 7-74. After Gradient edge detection") shows the result of applying Gradient
    edge detection with the same AMOUNT.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stretching the contrast of an image you’ve used edge detection on may be useful.
    For example, we got the image shown in [Figure 7-75](ch07s04.html#after_differential_edge_detection_and_ap
    "Figure 7-75. After Differential edge detection and applying Stretch Contrast")
    by using Differential edge detection with an AMOUNT of 2.5 and then applying **Image:
    Colors > Auto > Stretch Contrast**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![After Gradient edge detection](httpatomoreillycomsourcenostarchimages1455078.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-74. After Gradient edge detection
  prefs: []
  type: TYPE_NORMAL
- en: '![After Differential edge detection and applying Stretch Contrast](httpatomoreillycomsourcenostarchimages1455080.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-75. After Differential edge detection and applying Stretch Contrast
  prefs: []
  type: TYPE_NORMAL
- en: You can use an edge detection filter to decompose the image into more readable
    objects. We show this in two different examples.
  prefs: []
  type: TYPE_NORMAL
- en: '![Edge detection combined with the original image ()](httpatomoreillycomsourcenostarchimages1455082.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-76. Edge detection combined with the original image ([Figure 7-63](ch07s03.html#original_photograph-id00081
    "Figure 7-63. The original photograph"))
  prefs: []
  type: TYPE_NORMAL
- en: 'To create [Figure 7-76](ch07s04.html#edge_detection_combined_with_the_origina
    "Figure 7-76. Edge detection combined with the original image (Figure 7-63)")
    from [Figure 7-63](ch07s03.html#original_photograph-id00081 "Figure 7-63. The
    original photograph"), do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an Alpha channel to the top layer (**Layers: right-click > Add Alpha Channel**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Apply an edge detection filter to this layer (in this case, **Image: Filters
    > Edge-Detect > Edge > Sobel**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the Select by Color tool (![](httpatomoreillycomsourcenostarchimages1453942.png.jpg))
    and click a black area in the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cut the selection (![](httpatomoreillycomsourcenostarchimages1454122.png.jpg)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide the selection (![](httpatomoreillycomsourcenostarchimages1453950.png.jpg)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another possible use for edge detection is demonstrated in [Figure 7-77](ch07s04.html#merging_edge_detection_with_the_original
    "Figure 7-77. Merging edge detection with the original image (Figure 7-22)").
    Begin with the image from [Figure 7-22](ch07s02.html#micrograph_of_human_blood
    "Figure 7-22. A micrograph of human blood"). Duplicate the layer and apply the
    edge detection operator Sobel, as we did in the previous example. Finally, we
    experiment with the various merging modes in the Layers window to find the one
    that suits our needs. We choose Screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Merging edge detection with the original image ()](httpatomoreillycomsourcenostarchimages1455084.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7-77. Merging edge detection with the original image ([Figure 7-22](ch07s02.html#micrograph_of_human_blood
    "Figure 7-22. A micrograph of human blood"))
  prefs: []
  type: TYPE_NORMAL
- en: 7.5 Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For these exercises, feel free to utilize the images on this book’s website
    (*[http://the-book-ofgimp.blogspot.com](http://the-book-ofgimp.blogspot.com)*).
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.1.** One simple tool we did not use in this chapter is **Image:
    Colors > Threshold**. Try using it on a poor-quality image. Experiment with the
    placement of the cursors. Try to remove noise and to emphasize the important parts
    of the image.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.2.** Because the Threshold tool generates a black and white image,
    combine its result with the initial image in a different layer. Try various merging
    modes until you feel that you’ve increased the amount of information that a researcher
    could extract from your image.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.3.** Try using the image generated by the Threshold tool to fill
    a layer mask added to the original image. Do this again, but this time invert
    the threshold image.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 7.4.** Find an image that’s difficult to interpret, either one that
    we’ve provided or one of your own. Try various methods for improving the edges
    and making the image’s information more readable. Use a combination of edge detection
    tools, layer merging modes, and other tools that we demonstrated in this chapter.'
  prefs: []
  type: TYPE_NORMAL
