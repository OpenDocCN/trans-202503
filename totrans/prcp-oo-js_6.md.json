["```\n  `var` yourObject `=` (`function`() {\n\n      `// private data variables`\n\n      `return` {\n          `// public methods and properties`\n      };\n❶ }());\n```", "```\n  `var` person `=` (`function`() {\n\n❶     `var` age `=` `25`;\n\n      `return` {\n          name: `\"Nicholas\"`,\n\n❷         getAge: `function`() {\n              `return` age;\n          },\n\n❸         growOlder: `function`() {\n              age++;\n          }\n      };\n\n  }());\n\n  console.log(person.name);       `// \"Nicholas\"`\n  console.log(person.getAge());   `// 25`\n\n  person.age `=` `100`;\n  console.log(person.getAge());   `// 25`\n\n  person.growOlder();\n  console.log(person.getAge());   `// 26`\n```", "```\n  `var` person `=` (`function`() {\n\n      `var` age `=` `25`;\n\n      `function` getAge() {\n          `return` age;\n      }\n\n      `function` growOlder() {\n          age++;\n      }\n\n      `return` {\n          name: `\"Nicholas\"`,\n❶         getAge: getAge,\n          growOlder: growOlder\n      };\n\n  }());\n```", "```\n  `function` Person(name) {\n\n      `// define a variable only accessible inside of the Person constructor`\n      `var` age `=` `25`;\n\n      `this`.name `=` name;\n\n❶     `this`.getAge `=` function() {\n          `return` age;\n      };\n\n❷     `this`.growOlder `=` `function`() {\n          age++;\n      };\n   }\n\n   `var` person `=` `new` Person(`\"Nicholas\"`);\n\n   console.log(person.name);       `// \"Nicholas\"`\n   console.log(person.getAge());   `// 25`\n\n   person.age `=` `100`;\n   console.log(person.getAge());   `// 25`\n\n   person.growOlder();\n   console.log(person.getAge());   `// 26`\n```", "```\n  `var` Person `=` (`function`() {\n\n      `// everyone shares the same age`\n❶     `var` age `=` `25`;\n\n❷     `function` InnerPerson(name) {\n          `this`.name `=` name;\n      }\n\n      InnerPerson.prototype.getAge `=` `function`() {\n          `return` age;\n      };\n\n      InnerPerson.prototype.growOlder `=` `function`() {\n          age++;\n      };\n\n      `return` InnerPerson;\n\n  }());\n  `var` person1 `=` `new` Person(`\"Nicholas\"`);\n  `var` person2 `=` `new` Person(`\"Greg\"`);\n\n  console.log(person1.name);      `// \"Nicholas\"`\n  console.log(person1.getAge());  `// 25`\n\n  console.log(person2.name);      `// \"Greg\"`\n  console.log(person2.getAge());  `// 25`\n\n  person1.growOlder();\n  console.log(person1.getAge());  `// 26`\n  console.log(person2.getAge());  `// 26`\n```", "```\n`function` mixin(receiver, supplier) {\n    `for` (`var` property `in` supplier) {\n        `if` (supplier.hasOwnProperty(property)) {\n            receiver[property] `=` supplier[property]\n        }\n    }\n\n    `return` receiver;\n}\n```", "```\n  `function` EventTarget(){\n  }\n\n  EventTarget.prototype `=` {\n\n      constructor: EventTarget,\n\n❶     addListener: `function`(type, listener){\n\n          `// create an array if it doesn't exist`\n          `if` (`!``this`.hasOwnProperty(`\"_listeners\"`)) {\n              `this`._listeners `=` [];\n          }\n\n          `if` (`typeof` `this`._listeners[type] `==` `\"undefined\"`){\n              `this`._listeners[type] `=` [];\n          }\n\n          `this`._listeners[type].push(listener);\n      },\n\n❷     fire: `function`(event){\n\n          `if` (`!`event.target){\n              event.target `=` `this`;\n          }\n\n          `if` (`!`event.type){ `// falsy`\n              `throw` `new` `Error`(`\"Event object missing 'type' property.\"`);\n          }\n\n          `if` (`this`._listeners `&&` `this`._listeners[event.type] `instanceof` `Array`){\n              `var` listeners `=` `this`._listeners[event.type];\n              `for` (`var` `i``=``0`, len`=`listeners.length; i `<` len; i`++`){\n                  listeners[i].call(this, event);\n              }\n          }\n      },\n❸     removeListener: `function`(type, listener){\n          `if` (`this`._listeners `&&` `this`._listeners[type] `instanceof` `Array`){\n              `var` listeners `=` `this`._listeners[type];\n              `for` (`var` `i``=``0`, len`=`listeners.length; i `<` len; `i``++`){\n                   `if` (listeners[`i`] `===` listener){\n                       listeners.splice(i, `1`);\n                       `break`;\n                   }\n              }\n          }\n      }\n };\n```", "```\n`var` target `=` `new` EventTarget();\ntarget.addListener(`\"message\"`, `function`(event) {\n    console.log(`\"Message is \"` `+` event.data);\n})\n\ntarget.fire({\n    type: `\"message\"`,\n    data: `\"Hello world!\"`\n});\n```", "```\n`var` person `=` `new` EventTarget();\nperson.name `=` `\"Nicholas\"`;\nperson.sayName `=` `function`() {\n    console.log(`this`.name);\n    `this`.fire({ type`:` `\"namesaid\"`, name`:` name });\n};\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n❶ Person.prototype `=` `Object`.create(EventTarget.prototype);\n  Person.prototype.constructor `=` Person;\n\n  Person.prototype.sayName = `function`() {\n      console.log(`this`.name);\n      `this`.fire({ type`:` `\"namesaid\"`, name`:` name });\n  };\n\n  `var` person `=` `new` Person(`\"Nicholas\"`);\n\n  console.log(person `instanceof` Person);      `// true`\n  console.log(person `instanceof` EventTarget); `// true`\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n❶ mixin(Person.prototype, `new` EventTarget());\n  mixin(Person.prototype, {\n      constructor: Person,\n\n      sayName: function() {\n          console.log(`this`.name);\n          this.fire({ type: \"namesaid\", name: name });\n      }\n  });\n\n  `var` person `=` `new` Person(`\"Nicholas\"`);\n\n  console.log(person `instanceof` Person);      `// true`\n  console.log(person `instanceof` EventTarget); `// false`\n```", "```\n`var` person `=` mixin(`new` EventTarget(), {\n\n    name: `\"Nicholas\"`,\n\n    sayName: `function`() {\n        console.log(`this`.name);\n        `this`.fire({ type`:` `\"namesaid\"`, name`:` name });\n    }\n});\n```", "```\n  `var` person `=` mixin(`new` EventTarget(), {\n\n❶     get name() {\n          `return` `\"Nicholas\"`\n      },\n\n      sayName: `function`() {\n          console.log(`this`.name);\n          `this`.fire({ type`:` `\"namesaid\"`, name`:` name });\n      }\n  });\n\n  console.log(person.name);        `// \"Nicholas\"`\n\n❷ person.name `=` `\"Greg\"`;\n  console.log(person.name);        `// \"Greg\"`\n```", "```\n  `function` mixin(receiver, supplier) {\n❶     `Object`.keys(supplier).forEach(`function`(property) {\n          `var` descriptor `=` `Object`.getOwnPropertyDescriptor(supplier, property);\n❷         `Object`.defineProperty(receiver, property, descriptor);\n      });\n\n      `return` receiver;\n  }\n\n  `var` person `=` mixin(`new` EventTarget(), {\n\n      get name() {\n          `return` `\"Nicholas\"`\n      },\n\n      sayName: `function`() {\n          console.log(`this`.name);\n          `this`.fire({ type`:` `\"namesaid\"`, name`:` name });\n      }\n  });\n\n  console.log(person.name);       `// \"Nicholas\"`\n\n  person.name `=` `\"Greg\"`;\n  console.log(person.name);       `// \"Nicholas\"`\n```", "```\n  `function` mixin(receiver, supplier) {\n\n❶     `if` (`Object`.getOwnPropertyDescriptor) {\n\n          `Object`.keys(supplier).forEach(`function`(property) {\n              `var` descriptor `=` `Object`.getOwnPropertyDescriptor(supplier, property);\n              `Object`.defineProperty(receiver, property, descriptor);\n          });\n\n      } `else` {\n\n❷         `for` (`var` property `in` supplier) {\n              `if` (supplier.hasOwnProperty(property)) {\n                  receiver[property] `=` supplier[property]\n              }\n          }\n      }\n\n      `return` receiver;\n  }\n```", "```\n  `function` Person(name) {\n      `this`.name `=` name;\n  }\n\n  Person.prototype.sayName `=` `function`() {\n      console.log(`this`.name);\n  };\n\n❶ `var` person1 `=` Person(`\"Nicholas\"`);           `// note: missing \"new\"`\n\n  console.log(person1 `instanceof` Person);     `// false`\n  console.log(`typeof` person1);                `// \"undefined\"`\n  console.log(name);                          `// \"Nicholas\"`\n```", "```\n`function` Person(name) {\n    `if` (`this` `instanceof` Person) {\n        `// called with \"new\"`\n    } `else` {\n        `// called without \"new\"`\n    }\n}\n```", "```\n`function` Person(name) {\n    `if` (`this` `instanceof` Person) {\n        `this`.name `=` name;\n    } `else` {\n        `return` `new` Person(name);\n    }\n}\n```", "```\n`var` person1 `=` `new` Person(`\"Nicholas\"`);\n`var` person2 `=` Person(`\"Nicholas\"`);\n\nconsole.log(person1 `instanceof` Person);     `// true`\nconsole.log(person2 `instanceof` Person);     `// true`\n```"]