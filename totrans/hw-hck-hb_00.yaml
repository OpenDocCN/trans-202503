- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
- en: Once upon a time, in a universe not too far away, computers were massive machines
    that filled up big rooms and needed a small crew to run. With shrinking technology,
    it became more and more feasible to put computers in small spaces. Around 1965,
    the Apollo Guidance Computer was small enough to be carried into space, and it
    supported the astronauts with computation functions and control over the Apollo
    modules. This computer could be considered one of the earliest embedded systems.
    Nowadays, the overwhelming majority of processor chips produced are embedded—in
    phones, cars, medical equipment, critical infrastructure, and “smart” devices.
    Even your laptop has bundles of them. In other words, everyone’s lives are being
    affected by these little chips, which means understanding their security is critical.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Now, what qualifies a device to be labeled *embedded*? Embedded devices are
    computers small enough to be included in the structure of the equipment that they
    control. These computers are generally in the form of microprocessors that most
    likely include memory and interfaces to control the equipment in which they are
    embedded. The word *embedded* emphasizes that they’re used deep inside some object.
    Sometimes embedded devices are small enough to fit inside the thickness of a credit
    card to provide the intelligence to manage a transaction. Embedded devices are
    intended to be virtually undetectable to users who have limited or no access to
    their internal workings and are unable to modify the software on them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: What do these devices actually do? Embedded devices are used in a multitude
    of applications. They can host a full-blown Android operating system (OS) in a
    smart TV or be featured in a motor car’s electronic control unit (ECU) running
    a real-time OS. They can take the form of a Windows 98 PC inside a magnetic resonance
    imaging (MRI) scanner. Programmable logic controllers (PLCs) in industrial settings
    use them, and they even provide the control and communications in internet-connected
    toothbrushes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Reasons for restricting access to the innards of a device often have to do with
    warranty, safety, and regulatory compliance. This inaccessibility, of course,
    makes reverse engineering more interesting, complicated, and enticing. Embedded
    systems come with a great variety of board designs, processors, and different
    operating systems, so there is a lot to explore, and the reverse engineering challenges
    are wide. This book is meant to help readers meet these challenges by providing
    an understanding of the design of the system and its components. It pushes the
    limits of embedded system security by exploring analysis methods called power-side
    channel attacks and fault attacks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Many live embedded systems ensure safe use of equipment or may have actuators
    that can cause damage if triggered outside their intended working environment.
    We encourage you to play with a secondhand ECU in your lab, but we don’t encourage
    you to play with the ECU while your car is being driven! Have fun, be careful,
    and don’t hurt yourself or others.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: In this book, you’ll learn how to progress from admiring a device in your hands
    to learning about security strengths and weaknesses. This book shows each step
    in that process and provides sufficient theoretical background for you to understand
    the process, with a focus on showing how to perform practical experiments yourself.
    We cover the entire process, so you’ll learn more than what is in the academic
    and other literature, but yet is important and relevant, such as how to identify
    components on a printed circuit board (PCB). We hope you enjoy it!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: What Embedded Devices Look Like
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Embedded devices are designed with functions appropriate to the equipment in
    which they’re embedded. During development, aspects such as safety, functionality,
    reliability, size, power consumption, time-to-market, cost, and, yes, even security
    are subject to trade-offs. The variety of implementation makes it possible for
    most designs to be unique, as required by a particular application. For example,
    in an automotive electronic control unit, the focus on safety may mean that multiple
    redundant central processing unit (CPU) cores are simultaneously computing the
    same brake actuator response so that a final arbiter can verify their individual
    decisions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Security is sometimes the prime function of an embedded device, such as in credit
    cards. Despite the importance of financial security, cost trade-offs are made
    since the card itself must remain affordable. Time to market could be a significant
    consideration with a new product because a company needs to get into the market
    before losing dominance to competitors. In the case of an internet-connected toothbrush,
    security may be considered a low priority and take a back seat in the final design.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: With the ubiquity of cheap, off-the-shelf hardware from which to develop embedded
    systems, there is a trend away from custom parts. Application-specific integrated
    circuits (ASICs) are being replaced by common microcontrollers. Custom OS implementations
    are being replaced by FreeRTOS, bare Linux kernels, or even full Android stacks.
    The power of modern-day hardware can make some embedded devices the equivalent
    of a tablet, a phone, or even a complete PC.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: This book is written to apply to most of the embedded systems you will encounter.
    We recommend that you start off with a development board of a simple microcontroller;
    anything under $100 and ideally with Linux support will do. This will help you
    understand the basics before moving on to more complex devices or devices you
    have less knowledge of or control over.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Ways of Hacking Embedded Devices
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say you have a device with a security requirement not to allow third-party code,
    but your goal is to run code on it anyway. When contemplating a hack for whatever
    reason, the function of the device and its technical implementation influence
    the approach. For example, if the device contains a full Linux OS with an open
    network interface, it may be possible to gain full access simply by logging in
    with the known default root account password. You can then run your code on it.
    However, if you have a different microcontroller performing firmware signature
    verification and all debugging ports have been disabled, that approach will not
    work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个设备，其安全要求是不允许第三方代码，但你的目标是无论如何都要在其上运行代码。在考虑进行黑客攻击时，无论出于什么原因，设备的功能和技术实现都会影响攻击的方式。例如，如果设备包含一个完整的Linux操作系统并具有开放的网络接口，可能只需通过已知的默认root账户密码登录，即可获得完全访问权限。然后，你可以在其上运行你的代码。然而，如果设备有一个执行固件签名验证的微控制器并且所有调试端口都已禁用，这种方法将无法奏效。
- en: To reach the same goal, a different device will require you to take a different
    approach. You must carefully match your goal to the device’s hardware implementation.
    In this book, we approach this need by drawing an attack tree, which is a way
    of doing some lightweight threat modeling to help visualize and understand the
    best path to your goal.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到相同的目标，不同的设备需要采用不同的方法。你必须小心地将你的目标与设备的硬件实现相匹配。在本书中，我们通过绘制攻击树来处理这一需求，这是一种进行轻量级威胁建模的方式，有助于可视化并理解达到目标的最佳路径。
- en: What Does Hardware Attack Mean?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是硬件攻击？
- en: We focus mostly on hardware attacks and what you need to know to execute them
    rather than software attacks, which have been covered extensively elsewhere. First,
    let’s straighten out some terminology. We aim to give useful definitions and avoid
    going into all the exceptions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要关注硬件攻击以及执行它们所需了解的内容，而不是软件攻击，后者在其他地方已有广泛的讨论。首先，让我们澄清一些术语。我们的目标是提供有用的定义，并避免深入讨论所有的例外情况。
- en: A device comprises both software and hardware. For our purposes, we consider
    *software* to consist of bits, and we consider *hardware* to consist of atoms.
    We regard *firmware* (code that is embedded in the embedded device) to be the
    same as software.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 设备包括软件和硬件。就我们的目的而言，我们将*软件*视为由位组成，将*硬件*视为由原子组成。我们认为*固件*（嵌入式设备中的代码）与软件相同。
- en: 'When speaking of hardware attacks, it’s easy to conflate an attack that *uses*
    hardware versus an attack that *targets* hardware. It becomes more confusing when
    we realize that there are also software targets and software attacks. Here are
    some examples that describe the various combinations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论硬件攻击时，很容易将*使用*硬件的攻击与*针对*硬件的攻击混淆。当我们意识到也有软件目标和软件攻击时，这变得更加复杂。以下是描述各种组合的一些例子：
- en: We can attack a device’s ring oscillator (hardware target) by glitching the
    supply voltage (hardware attack).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过扰动供电电压来攻击设备的环形振荡器（硬件目标）（硬件攻击）。
- en: We can inject a voltage glitch on a CPU (hardware attack) that influences an
    executing program (software target).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在CPU上注入电压故障（硬件攻击），进而影响正在执行的程序（软件目标）。
- en: We can flip bits in memory (hardware target) by running Rowhammer code on the
    CPU (software attack).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过在CPU上运行Rowhammer代码（软件攻击）来翻转内存中的位（硬件目标）。
- en: For completeness, we can perform a buffer overflow (software attack) on a network
    daemon (software target).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了完整性，我们可以对网络守护进程（软件目标）执行缓冲区溢出（软件攻击）。
- en: In this book, we’re addressing hardware attacks, so the target is either the
    software or the hardware. Bear in mind that hardware attacks are generally harder
    to execute than software attacks because software attacks require less tricky
    physical intervention. However, where a device may be resistant to software attacks,
    a hardware attack may end up being the successful, cheaper (and, in our opinion,
    definitely more fun) option. Remote attacks, where the device is not at hand,
    are limited to access through a network interface, whereas every type of attack
    can be performed if the hardware is physically accessible.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们讨论的是硬件攻击，因此目标可能是软件或硬件。请记住，硬件攻击通常比软件攻击更难执行，因为软件攻击需要的物理干预较少。然而，当设备可能抵御软件攻击时，硬件攻击可能会成为成功的、更便宜（并且在我们看来，绝对更有趣）选择。远程攻击（设备不在手边时）仅限于通过网络接口访问，而如果硬件可以物理接触，则可以执行所有类型的攻击。
- en: In summary, there are many different types of embedded devices, and each device
    has its own function, trade-offs, security objectives, and implementations. This
    variety makes possible a range of hardware attack strategies, which this book
    will teach you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Who Should Read This Book?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we’ll assume that you’re taking the role of an attacker who is
    interested in breaking security to do good. We’ll also assume that you’re mostly
    able to use some relatively inexpensive hardware like simple oscilloscopes and
    soldering equipment, and that you have a computer with Python installed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: We won’t assume that you have access to laser equipment, particle accelerators,
    or other items beyond the limits of a hobbyist’s budget. If you do have access
    to such equipment, perhaps at your local university laboratory, you should be
    able to benefit even further from this book. In terms of embedded device targets,
    we assume that you have physical access to them and that you’re interested in
    accessing assets stored in your devices. And most important, we assume that you’re
    interested in learning about new techniques, have a reverse-engineering mindset,
    and are ready to dig in!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: About This Book
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a brief overview of what you’ll find in this book:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 1: Dental Hygiene: Introduction to Embedded Security**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Focuses on the various implementation architectures of embedded systems and
    some threat modeling, as well as discusses various attacks.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 2: Reaching Out, Touching Me, Touching You: Hardware Peripheral Interfaces**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Talks about a variety of ports and communication protocols, including the electrical
    basics needed to understand signaling and measurement.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 3: Casing the Joint: Identifying Components and Gathering Information**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Describes how to gather information about your target, interpret datasheets
    and schematics, identify components on a PCB, and extract and analyze firmware
    images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 4: Bull in a Porcelain Shop: Introducing Fault Injection**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Presents the ideas behind fault attacks, including how to identify points of
    fault injection, prepare a target, create a fault injection setup, and hone in
    on effective parameters.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 5: Don’t Lick the Probe: How to Inject Faults**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Discusses clock, voltage, electromagnetic, laser and body biasing
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: fault injection, and what sort of tools you need to build or buy to perform
    them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 6: Bench Time: Fault Injection Lab**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Presents three practical fault injection labs to perform at home.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 7: X Marks the Spot: Trezor One Wallet Memory Dump**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Takes the Trezor One wallet and shows how to extract the key using fault injection
    on a vulnerable firmware version.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 8: I’ve Got the Power: Introduction to Power Analysis**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Introduces timing attacks and simple power analysis, and shows how these can
    be used to extract passwords and cryptographic keys.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 9: Bench Time: Simple Power Analysis**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Takes you all the way from building a basic hardware setup to everything needed
    to perform an SPA attack in your home lab.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 10: Splitting the Difference: Differential Power Analysis**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Explains differential power analysis and shows how tiny fluctuations in power
    consumption can lead to cryptographic key extraction.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 11: Gettin’ Nerdy with It: Advanced Power Analysis**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Provides a smorgasbord of techniques that allow you to level up your power
    analysis: from practical measurement tips to trace set filtering, signal analysis,
    processing, and visualization.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 12: Bench Time: Differential Power Analysis**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Takes a physical target with a special bootloader and breaks various secrets
    using different power analysis techniques.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 13: No Kiddin’: Real-Life Examples**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Summarizes a number of published fault and side-channel attacks performed on
    real-life targets.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter 14: Think of the Children: Countermeasures, Certifications, and Goodbytes**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Discusses numerous countermeasures that mitigate some of the risks explained
    in this book and touches on device certification and where to go next.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix A: Maxing Out Your Credit Card: Setting Up a Test Lab**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Makes your mouth water with a splendid exposé of all the tools you’ll ever want,
    and more.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**Appendix B: All Your Base Are Belong to Us: Popular Pinouts**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: A cheat sheet for a few popular pinouts you’ll regularly encounter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
