- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](image_fi/book_art/chapterart.png)'
- en: Once upon a time, in a universe not too far away, computers were massive machines
    that filled up big rooms and needed a small crew to run. With shrinking technology,
    it became more and more feasible to put computers in small spaces. Around 1965,
    the Apollo Guidance Computer was small enough to be carried into space, and it
    supported the astronauts with computation functions and control over the Apollo
    modules. This computer could be considered one of the earliest embedded systems.
    Nowadays, the overwhelming majority of processor chips produced are embedded—in
    phones, cars, medical equipment, critical infrastructure, and “smart” devices.
    Even your laptop has bundles of them. In other words, everyone’s lives are being
    affected by these little chips, which means understanding their security is critical.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 曾几何时，在一个不远的宇宙里，计算机是巨大的机器，充满了大房间，需要小型团队来操作。随着技术的不断进步，将计算机放入小空间变得越来越可行。大约在1965年，阿波罗导航计算机足够小，可以被带入太空，并为宇航员提供计算功能以及对阿波罗模块的控制。这台计算机可以被认为是最早的嵌入式系统之一。如今，绝大多数生产的处理器芯片都是嵌入式的——用于手机、汽车、医疗设备、关键基础设施和“智能”设备。甚至你的笔记本电脑也有大量这样的芯片。换句话说，每个人的生活都受这些小芯片的影响，这意味着理解它们的安全性至关重要。
- en: Now, what qualifies a device to be labeled *embedded*? Embedded devices are
    computers small enough to be included in the structure of the equipment that they
    control. These computers are generally in the form of microprocessors that most
    likely include memory and interfaces to control the equipment in which they are
    embedded. The word *embedded* emphasizes that they’re used deep inside some object.
    Sometimes embedded devices are small enough to fit inside the thickness of a credit
    card to provide the intelligence to manage a transaction. Embedded devices are
    intended to be virtually undetectable to users who have limited or no access to
    their internal workings and are unable to modify the software on them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么样的设备才能被称为*嵌入式*设备呢？嵌入式设备是足够小的计算机，可以被集成到它们控制的设备结构中。这些计算机通常以微处理器的形式存在，通常包括内存和用于控制嵌入其中设备的接口。*嵌入式*一词强调它们被用在某些物体内部的深层位置。有时候，嵌入式设备小到足以装进信用卡的厚度，提供管理交易所需的智能。嵌入式设备的设计目标是使其几乎对用户不可察觉，用户只能有限或没有访问其内部结构的权限，也无法修改其软件。
- en: What do these devices actually do? Embedded devices are used in a multitude
    of applications. They can host a full-blown Android operating system (OS) in a
    smart TV or be featured in a motor car’s electronic control unit (ECU) running
    a real-time OS. They can take the form of a Windows 98 PC inside a magnetic resonance
    imaging (MRI) scanner. Programmable logic controllers (PLCs) in industrial settings
    use them, and they even provide the control and communications in internet-connected
    toothbrushes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备到底是做什么的？嵌入式设备被广泛应用于各种场景。它们可以在智能电视中托管完整的安卓操作系统（OS），或者出现在汽车的电子控制单元（ECU）中，运行实时操作系统。它们可以以
    Windows 98 PC 的形式出现在磁共振成像（MRI）扫描仪中。工业环境中的可编程逻辑控制器（PLC）也使用它们，甚至在互联网连接的牙刷中提供控制和通信功能。
- en: Reasons for restricting access to the innards of a device often have to do with
    warranty, safety, and regulatory compliance. This inaccessibility, of course,
    makes reverse engineering more interesting, complicated, and enticing. Embedded
    systems come with a great variety of board designs, processors, and different
    operating systems, so there is a lot to explore, and the reverse engineering challenges
    are wide. This book is meant to help readers meet these challenges by providing
    an understanding of the design of the system and its components. It pushes the
    limits of embedded system security by exploring analysis methods called power-side
    channel attacks and fault attacks.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 限制设备内部结构访问的原因通常与保修、安全性和法规合规性有关。当然，这种不可接触性使得逆向工程变得更加有趣、复杂和吸引人。嵌入式系统具有多种不同的电路板设计、处理器和操作系统，因此有很多可以探索的内容，逆向工程的挑战也很广泛。本书旨在通过提供对系统及其组件设计的理解，帮助读者应对这些挑战。它通过探索名为电力侧信道攻击和故障攻击的分析方法，推动了嵌入式系统安全的极限。
- en: Many live embedded systems ensure safe use of equipment or may have actuators
    that can cause damage if triggered outside their intended working environment.
    We encourage you to play with a secondhand ECU in your lab, but we don’t encourage
    you to play with the ECU while your car is being driven! Have fun, be careful,
    and don’t hurt yourself or others.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 许多实时嵌入式系统确保设备的安全使用，或者可能具有触发器，如果在其预期工作环境之外被激活，可能会造成损害。我们鼓励你在实验室里玩二手的ECU，但我们不鼓励你在驾驶汽车时玩ECU！玩得开心，小心点，别伤到自己或他人。
- en: In this book, you’ll learn how to progress from admiring a device in your hands
    to learning about security strengths and weaknesses. This book shows each step
    in that process and provides sufficient theoretical background for you to understand
    the process, with a focus on showing how to perform practical experiments yourself.
    We cover the entire process, so you’ll learn more than what is in the academic
    and other literature, but yet is important and relevant, such as how to identify
    components on a printed circuit board (PCB). We hope you enjoy it!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将学习如何从单纯欣赏手中的设备，进而了解其安全优缺点。本书展示了这个过程的每个步骤，并提供足够的理论背景，以帮助你理解该过程，重点展示如何亲自进行实际实验。我们涵盖了整个过程，因此你将学到的不仅仅是学术文献和其他资料中的内容，而是那些同样重要且相关的知识，例如如何识别印刷电路板（PCB）上的元件。我们希望你会喜欢！
- en: What Embedded Devices Look Like
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入式设备的外观
- en: Embedded devices are designed with functions appropriate to the equipment in
    which they’re embedded. During development, aspects such as safety, functionality,
    reliability, size, power consumption, time-to-market, cost, and, yes, even security
    are subject to trade-offs. The variety of implementation makes it possible for
    most designs to be unique, as required by a particular application. For example,
    in an automotive electronic control unit, the focus on safety may mean that multiple
    redundant central processing unit (CPU) cores are simultaneously computing the
    same brake actuator response so that a final arbiter can verify their individual
    decisions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入式设备的设计功能适应于其所嵌入的设备。在开发过程中，安全性、功能性、可靠性、体积、功耗、上市时间、成本，甚至安全性等方面常常需要做出取舍。实施的多样性使得大多数设计具有独特性，以满足特定应用的要求。例如，在汽车电子控制单元中，对安全性的关注可能意味着多个冗余的中央处理单元（CPU）核心同时计算相同的刹车执行器响应，以便最终仲裁者可以验证它们的独立决策。
- en: Security is sometimes the prime function of an embedded device, such as in credit
    cards. Despite the importance of financial security, cost trade-offs are made
    since the card itself must remain affordable. Time to market could be a significant
    consideration with a new product because a company needs to get into the market
    before losing dominance to competitors. In the case of an internet-connected toothbrush,
    security may be considered a low priority and take a back seat in the final design.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安全有时是嵌入式设备的首要功能，例如信用卡。尽管金融安全至关重要，但由于卡片本身必须保持价格可承受，因此会进行成本权衡。新产品的上市时间可能是一个重要的考虑因素，因为公司需要在竞争对手夺取市场主导地位之前进入市场。以互联网连接的牙刷为例，安全性可能被视为低优先级，并在最终设计中退居次要地位。
- en: With the ubiquity of cheap, off-the-shelf hardware from which to develop embedded
    systems, there is a trend away from custom parts. Application-specific integrated
    circuits (ASICs) are being replaced by common microcontrollers. Custom OS implementations
    are being replaced by FreeRTOS, bare Linux kernels, or even full Android stacks.
    The power of modern-day hardware can make some embedded devices the equivalent
    of a tablet, a phone, or even a complete PC.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着廉价现成硬件的普及，嵌入式系统的开发趋向于不再使用定制部件。专用集成电路（ASIC）正被通用微控制器取代。定制操作系统的实现被FreeRTOS、裸机Linux内核，甚至完整的Android堆栈所取代。现代硬件的强大性能使得一些嵌入式设备相当于平板电脑、手机，甚至完整的PC。
- en: This book is written to apply to most of the embedded systems you will encounter.
    We recommend that you start off with a development board of a simple microcontroller;
    anything under $100 and ideally with Linux support will do. This will help you
    understand the basics before moving on to more complex devices or devices you
    have less knowledge of or control over.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在适用于你将遇到的大多数嵌入式系统。我们建议你从一个简单的微控制器开发板开始；任何价格在100美元以下、最好支持Linux的开发板都可以。这将帮助你在转向更复杂的设备或你了解较少或控制较少的设备之前，掌握基本知识。
- en: Ways of Hacking Embedded Devices
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌入式设备的破解方式
- en: Say you have a device with a security requirement not to allow third-party code,
    but your goal is to run code on it anyway. When contemplating a hack for whatever
    reason, the function of the device and its technical implementation influence
    the approach. For example, if the device contains a full Linux OS with an open
    network interface, it may be possible to gain full access simply by logging in
    with the known default root account password. You can then run your code on it.
    However, if you have a different microcontroller performing firmware signature
    verification and all debugging ports have been disabled, that approach will not
    work.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个设备，其安全要求是不允许第三方代码，但你的目标是无论如何都要在其上运行代码。在考虑进行黑客攻击时，无论出于什么原因，设备的功能和技术实现都会影响攻击的方式。例如，如果设备包含一个完整的Linux操作系统并具有开放的网络接口，可能只需通过已知的默认root账户密码登录，即可获得完全访问权限。然后，你可以在其上运行你的代码。然而，如果设备有一个执行固件签名验证的微控制器并且所有调试端口都已禁用，这种方法将无法奏效。
- en: To reach the same goal, a different device will require you to take a different
    approach. You must carefully match your goal to the device’s hardware implementation.
    In this book, we approach this need by drawing an attack tree, which is a way
    of doing some lightweight threat modeling to help visualize and understand the
    best path to your goal.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了达到相同的目标，不同的设备需要采用不同的方法。你必须小心地将你的目标与设备的硬件实现相匹配。在本书中，我们通过绘制攻击树来处理这一需求，这是一种进行轻量级威胁建模的方式，有助于可视化并理解达到目标的最佳路径。
- en: What Does Hardware Attack Mean?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是硬件攻击？
- en: We focus mostly on hardware attacks and what you need to know to execute them
    rather than software attacks, which have been covered extensively elsewhere. First,
    let’s straighten out some terminology. We aim to give useful definitions and avoid
    going into all the exceptions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要关注硬件攻击以及执行它们所需了解的内容，而不是软件攻击，后者在其他地方已有广泛的讨论。首先，让我们澄清一些术语。我们的目标是提供有用的定义，并避免深入讨论所有的例外情况。
- en: A device comprises both software and hardware. For our purposes, we consider
    *software* to consist of bits, and we consider *hardware* to consist of atoms.
    We regard *firmware* (code that is embedded in the embedded device) to be the
    same as software.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 设备包括软件和硬件。就我们的目的而言，我们将*软件*视为由位组成，将*硬件*视为由原子组成。我们认为*固件*（嵌入式设备中的代码）与软件相同。
- en: 'When speaking of hardware attacks, it’s easy to conflate an attack that *uses*
    hardware versus an attack that *targets* hardware. It becomes more confusing when
    we realize that there are also software targets and software attacks. Here are
    some examples that describe the various combinations:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论硬件攻击时，很容易将*使用*硬件的攻击与*针对*硬件的攻击混淆。当我们意识到也有软件目标和软件攻击时，这变得更加复杂。以下是描述各种组合的一些例子：
- en: We can attack a device’s ring oscillator (hardware target) by glitching the
    supply voltage (hardware attack).
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过扰动供电电压来攻击设备的环形振荡器（硬件目标）（硬件攻击）。
- en: We can inject a voltage glitch on a CPU (hardware attack) that influences an
    executing program (software target).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在CPU上注入电压故障（硬件攻击），进而影响正在执行的程序（软件目标）。
- en: We can flip bits in memory (hardware target) by running Rowhammer code on the
    CPU (software attack).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以通过在CPU上运行Rowhammer代码（软件攻击）来翻转内存中的位（硬件目标）。
- en: For completeness, we can perform a buffer overflow (software attack) on a network
    daemon (software target).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了完整性，我们可以对网络守护进程（软件目标）执行缓冲区溢出（软件攻击）。
- en: In this book, we’re addressing hardware attacks, so the target is either the
    software or the hardware. Bear in mind that hardware attacks are generally harder
    to execute than software attacks because software attacks require less tricky
    physical intervention. However, where a device may be resistant to software attacks,
    a hardware attack may end up being the successful, cheaper (and, in our opinion,
    definitely more fun) option. Remote attacks, where the device is not at hand,
    are limited to access through a network interface, whereas every type of attack
    can be performed if the hardware is physically accessible.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们讨论的是硬件攻击，因此目标可能是软件或硬件。请记住，硬件攻击通常比软件攻击更难执行，因为软件攻击需要的物理干预较少。然而，当设备可能抵御软件攻击时，硬件攻击可能会成为成功的、更便宜（并且在我们看来，绝对更有趣）选择。远程攻击（设备不在手边时）仅限于通过网络接口访问，而如果硬件可以物理接触，则可以执行所有类型的攻击。
- en: In summary, there are many different types of embedded devices, and each device
    has its own function, trade-offs, security objectives, and implementations. This
    variety makes possible a range of hardware attack strategies, which this book
    will teach you.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，嵌入式设备有很多不同类型，每个设备都有自己的功能、权衡、安保目标和实现方式。正是这种多样性，使得本书将教授一系列硬件攻击策略。
- en: Who Should Read This Book?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 谁该阅读本书？
- en: In this book, we’ll assume that you’re taking the role of an attacker who is
    interested in breaking security to do good. We’ll also assume that you’re mostly
    able to use some relatively inexpensive hardware like simple oscilloscopes and
    soldering equipment, and that you have a computer with Python installed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们假设你扮演的是一个攻击者的角色，目的是通过破坏安全来做些好事。我们还假设你能够使用一些相对便宜的硬件，比如简单的示波器和焊接设备，并且你有一台安装了Python的计算机。
- en: We won’t assume that you have access to laser equipment, particle accelerators,
    or other items beyond the limits of a hobbyist’s budget. If you do have access
    to such equipment, perhaps at your local university laboratory, you should be
    able to benefit even further from this book. In terms of embedded device targets,
    we assume that you have physical access to them and that you’re interested in
    accessing assets stored in your devices. And most important, we assume that you’re
    interested in learning about new techniques, have a reverse-engineering mindset,
    and are ready to dig in!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会假设你有激光设备、粒子加速器或其他超出业余爱好者预算范围的物品。如果你确实有机会接触到这些设备，可能在本地大学实验室中，你应该能够从本书中获得更多的收获。关于嵌入式设备目标，我们假设你能物理接触到它们，并且你有兴趣访问存储在设备中的资产。最重要的是，我们假设你对学习新技术感兴趣，拥有反向工程的思维方式，并且已经准备好深入研究！
- en: About This Book
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于本书
- en: 'Here’s a brief overview of what you’ll find in this book:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是你在本书中将找到的内容简要概述：
- en: '**Chapter 1: Dental Hygiene: Introduction to Embedded Security**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**第1章：口腔卫生：嵌入式安全简介**'
- en: Focuses on the various implementation architectures of embedded systems and
    some threat modeling, as well as discusses various attacks.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 重点介绍了嵌入式系统的各种实现架构和一些威胁建模，并讨论了各种攻击方式。
- en: '**Chapter 2: Reaching Out, Touching Me, Touching You: Hardware Peripheral Interfaces**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**第2章：伸手触摸我，触摸你：硬件外设接口**'
- en: Talks about a variety of ports and communication protocols, including the electrical
    basics needed to understand signaling and measurement.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了各种端口和通信协议，包括理解信号和测量所需的电气基础知识。
- en: '**Chapter 3: Casing the Joint: Identifying Components and Gathering Information**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**第3章：勘察现场：识别组件和收集信息**'
- en: Describes how to gather information about your target, interpret datasheets
    and schematics, identify components on a PCB, and extract and analyze firmware
    images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 描述了如何收集关于目标的信息，解读数据表和原理图，识别PCB上的组件，并提取和分析固件镜像。
- en: '**Chapter 4: Bull in a Porcelain Shop: Introducing Fault Injection**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**第4章：瓷器店里的公牛：故障注入介绍**'
- en: Presents the ideas behind fault attacks, including how to identify points of
    fault injection, prepare a target, create a fault injection setup, and hone in
    on effective parameters.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了故障攻击背后的思想，包括如何识别故障注入点、准备目标、创建故障注入设置，并集中精力调整有效参数。
- en: '**Chapter 5: Don’t Lick the Probe: How to Inject Faults**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**第5章：不要舔探针：如何注入故障**'
- en: Discusses clock, voltage, electromagnetic, laser and body biasing
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了时钟、电压、电磁、激光和人体偏置等方面。
- en: fault injection, and what sort of tools you need to build or buy to perform
    them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 故障注入，以及进行这些操作所需的工具，你需要自己制造或购买的工具。
- en: '**Chapter 6: Bench Time: Fault Injection Lab**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**第6章：测试台时间：故障注入实验室**'
- en: Presents three practical fault injection labs to perform at home.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了三个实用的故障注入实验，适合在家中进行。
- en: '**Chapter 7: X Marks the Spot: Trezor One Wallet Memory Dump**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**第7章：标记位置：Trezor One钱包内存转储**'
- en: Takes the Trezor One wallet and shows how to extract the key using fault injection
    on a vulnerable firmware version.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以Trezor One钱包为例，展示如何利用故障注入从一个易受攻击的固件版本中提取密钥。
- en: '**Chapter 8: I’ve Got the Power: Introduction to Power Analysis**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**第8章：我掌握着电力：功率分析介绍**'
- en: Introduces timing attacks and simple power analysis, and shows how these can
    be used to extract passwords and cryptographic keys.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了时序攻击和简单的功率分析，并展示了如何利用这些方法提取密码和加密密钥。
- en: '**Chapter 9: Bench Time: Simple Power Analysis**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**第9章：测试台时间：简单功率分析**'
- en: Takes you all the way from building a basic hardware setup to everything needed
    to perform an SPA attack in your home lab.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 带你从搭建基础硬件设置开始，直到完成SPA攻击所需的一切，全部在家用实验室中实现。
- en: '**Chapter 10: Splitting the Difference: Differential Power Analysis**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**第10章：差异化处理：差分功率分析**'
- en: Explains differential power analysis and shows how tiny fluctuations in power
    consumption can lead to cryptographic key extraction.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解释了差分功率分析，并展示了功率消耗中的微小波动如何导致密码学密钥的提取。
- en: '**Chapter 11: Gettin’ Nerdy with It: Advanced Power Analysis**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**第11章：深入探讨：高级功率分析**'
- en: 'Provides a smorgasbord of techniques that allow you to level up your power
    analysis: from practical measurement tips to trace set filtering, signal analysis,
    processing, and visualization.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一系列技术手段，帮助你提升功率分析能力：从实用的测量技巧到跟踪设置过滤、信号分析、处理和可视化。
- en: '**Chapter 12: Bench Time: Differential Power Analysis**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**第12章：测试时间：差分功率分析**'
- en: Takes a physical target with a special bootloader and breaks various secrets
    using different power analysis techniques.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个带有特殊引导程序的物理目标为例，使用不同的功率分析技术破解各种秘密。
- en: '**Chapter 13: No Kiddin’: Real-Life Examples**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**第13章：不是开玩笑：真实案例**'
- en: Summarizes a number of published fault and side-channel attacks performed on
    real-life targets.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 总结了在真实目标上执行的多个已发布的故障和侧信道攻击。
- en: '**Chapter 14: Think of the Children: Countermeasures, Certifications, and Goodbytes**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**第14章：想想孩子们：对策、认证与安全字节**'
- en: Discusses numerous countermeasures that mitigate some of the risks explained
    in this book and touches on device certification and where to go next.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了多种能够减轻本书中提到的风险的对策，并涉及设备认证以及接下来该做什么。
- en: '**Appendix A: Maxing Out Your Credit Card: Setting Up a Test Lab**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**附录A：用光你的信用卡：搭建测试实验室**'
- en: Makes your mouth water with a splendid exposé of all the tools you’ll ever want,
    and more.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过精彩的揭秘让你垂涎欲滴，展示了你可能需要的所有工具，甚至更多。
- en: '**Appendix B: All Your Base Are Belong to Us: Popular Pinouts**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**附录B：你们的基地已经归我们所有：常见引脚排列**'
- en: A cheat sheet for a few popular pinouts you’ll regularly encounter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了一个备忘单，列出了你常遇到的几种流行引脚排列。
