- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">9</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SECURITY
    AUDITING</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: Intertwined with the access check process is the auditing process. An administrator
    can configure the system’s auditing mechanism to generate a log of accessed resources.
    Each log event will include details about the user and application that opened
    the resource and whether the access succeeded or failed. This information can
    help us identify incorrect security settings or detect malicious access to sensitive
    resources.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In this short chapter, we’ll first discuss where the resource access log gets
    stored once the kernel generates it. We’ll then describe how a system administrator
    can configure the audit mechanism. Finally, we’ll detail how to configure individual
    resources to generate audit log events through the SACL.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Security Event Log</samp>
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows generates log events whenever an access check succeeds or fails. The
    kernel writes these log events to the *security event log*, which only administrators
    can access.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'When performing access checks on kernel resources, Windows will generate the
    following types of audit events. The security event log represents these by using
    the event ID included in parentheses:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Object handle opened (<samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object handle closed (<samp class="SANS_TheSansMonoCd_W5Regular_11">4658</samp>)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object deleted (<samp class="SANS_TheSansMonoCd_W5Regular_11">4660</samp>)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object handle duplicated (<samp class="SANS_TheSansMonoCd_W5Regular_11">4690</samp>)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SACL changed (<samp class="SANS_TheSansMonoCd_W5Regular_11">4717</samp>)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we access resources via kernel system calls such as <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateMutant</samp>,
    the auditing mechanism generates these events automatically. But for the object-related
    audit events, we must first configure two aspects of the system: we must set the
    system policy to generate audit events, and we must enable audit ACEs in the resource’s
    SACL. Let’s discuss each of these configuration requirements in turn.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the System
    Audit Policy</samp>
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most Windows users don’t need to capture audit information for kernel resources,
    so the audit policy is disabled by default. Enterprise environments commonly configure
    the audit policy through a *domain security policy*, which the enterprise network
    distributes to the individual devices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Users not in an enterprise network can enable the audit policy manually. One
    way to do so is to edit the *local security policy*, which looks the same as the
    domain security policy but applies only to the current system. There are two types
    of audit policy: the legacy policy used prior to Windows 7 and the advanced audit
    policy. Using the advanced audit policy is recommended, as it provides more granular
    configuration; we won’t discuss the legacy policy further.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: If you open the local security policy editor by running the <samp class="SANS_TheSansMonoCd_W5Regular_11">secpol.msc</samp>
    command in PowerShell, you can view the current configuration of the advanced
    audit policy, as shown in [Figure 9-1](chapter9.xhtml#fig9-1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/Figure9-1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-1: The security policy
    editor showing the advanced audit policy</samp>'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the categories in the audit policy aren’t currently configured.
    To explore how audit events are generated, we’ll use PowerShell to enable the
    required audit policy temporarily and run some example code. Any changes you make
    with PowerShell won’t be reflected in the local security policy, which will revert
    the next time it synchronizes (for example, during a reboot or when the group
    policy is updated on an enterprise network). You can force the settings to synchronize
    by running the command <samp class="SANS_TheSansMonoCd_W5Regular_11">gpupdate.exe
    /force</samp> as an administrator in PowerShell or at the command prompt.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced audit policies have two levels: a top-level category and multiple
    subcategories. You can query for the top-level categories using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditPolicy</samp>,
    as in [Listing 9-1](chapter9.xhtml#Lis9-1).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 9-1: The top-level audit policy categories'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: In the output, you can see the name of each category and a count of its subcategories.
    Each category also has an associated GUID, but this value is hidden by default.
    To see it, select the <samp class="SANS_TheSansMonoCd_W5Regular_11">Id</samp>
    property from the command’s output, as shown in [Listing 9-2](chapter9.xhtml#Lis9-2).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 9-2: Displaying category GUIDs'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: You can display the subcategories by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ExpandCategory</samp>
    parameter. In [Listing 9-3](chapter9.xhtml#Lis9-3), we specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">System</samp>
    category by name and then expand the output to show its subcategories.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 9-3: Displaying the audit policy’s subcategories'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also select a category by specifying its GUID using the <samp class="SANS_TheSansMonoCd_W5Regular_11">CategoryGuid</samp>
    parameter. The audit policy is based on these subcategories. Each subcategory
    policy can have one or more of the following values:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Unchanged</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>The
    policy is not configured and should not be changed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">未更改</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>策略未配置，且不应更改。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Success  </samp>The policy should
    generate audit events when an auditable resource is opened successfully.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">成功  </samp>策略应在可审计资源成功打开时生成审计事件。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Failure  </samp>The policy should
    generate audit events when an auditable resource can’t be opened.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">失败  </samp>策略应在无法打开可审计资源时生成审计事件。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">None  </samp>The policy should
    never generate an audit event.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">无  </samp>策略应从不生成审计事件。
- en: In [Listing 9-3](chapter9.xhtml#Lis9-3) the subcategories all show the value
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Unchanged</samp>, which means no
    policy has been configured. We can enable kernel object auditing by running the
    commands shown in [Listing 9-4](chapter9.xhtml#Lis9-4) as an administrator.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 9-3](chapter9.xhtml#Lis9-3)中，所有子类别显示值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">Unchanged</samp>，这意味着没有配置策略。我们可以通过以管理员身份运行[清单
    9-4](chapter9.xhtml#Lis9-4)中显示的命令来启用内核对象审计。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 9-4: Setting the policy and viewing the resulting ObjectAccess audit
    policy list'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-4：设置策略并查看生成的 ObjectAccess 审计策略列表
- en: Here, we’ve enabled the <samp class="SANS_TheSansMonoCd_W5Regular_11">Success</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Failure</samp> audit policies
    for all subcategories under <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectAccess</samp>.
    To make this modification, we need the <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    privilege. We can set a single subcategory rather than the entire category by
    name by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryName</samp>
    parameter or specifying the GUID using <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryGuid</samp>.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为所有子类别启用了 <samp class="SANS_TheSansMonoCd_W5Regular_11">Success</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Failure</samp> 审计策略，这些子类别都在 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ObjectAccess</samp> 下。要进行此修改，我们需要 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp> 权限。我们可以使用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryName</samp> 参数按名称设置单个子类别，而不是整个类别，或者使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryGuid</samp> 参数指定 GUID。
- en: We confirm that the audit policy has been configured correctly by specifying
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">PassThru</samp> parameter, which
    lists the modified <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategory</samp>
    objects. The output displays some important audit policies, including <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    System</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">Registry</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Kernel Object</samp>, which
    enable auditing on files, registry keys, and other kernel objects, respectively.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">PassThru</samp> 参数来确认审计策略已正确配置，该参数列出已修改的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategory</samp> 对象。输出显示了一些重要的审计策略，包括
    <samp class="SANS_TheSansMonoCd_W5Regular_11">文件系统</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">注册表</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">内核对象</samp>，分别启用了对文件、注册表键和其他内核对象的审计。
- en: 'You can run the following command as an administrator to disable the change
    we made in [Listing 9-4](chapter9.xhtml#Lis9-4):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以管理员身份运行以下命令，以禁用我们在[清单 9-4](chapter9.xhtml#Lis9-4)中所做的更改：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Unless you need to enable the audit policy for some reason, it’s best to disable
    it once you’re finished experimenting.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除非出于某种原因需要启用审计策略，否则最好在实验结束后禁用它。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the Per-User
    Audit Policy</samp>
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">配置每用户审计策略</samp>
- en: 'In addition to configuring a system-wide policy, it’s also possible to configure
    the audit policy on a per-user basis. You could use this feature to add auditing
    to a specific user account in cases when the system does not define an overall
    audit policy. You could also use it to exclude a specific user account from auditing.
    To facilitate this behavior, the policy settings differ slightly for per-user
    policies:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置系统范围的策略外，还可以基于每个用户配置审计策略。在系统未定义整体审计策略时，可以使用此功能为特定用户帐户添加审计。还可以使用它将特定用户帐户排除在审计之外。为了方便这种行为，针对每个用户策略的策略设置略有不同：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Unchanged  </samp>The policy is
    not configured. When set, the policy should not be changed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SuccessInclude  </samp>The policy
    should generate audit events on success, regardless of the system policy.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SuccessExclude  </samp>The policy
    should never generate audit events on success, regardless of the system policy.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FailureInclude  </samp>The policy
    should generate audit events on failure, regardless of the system policy.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FailureExclude</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>The
    policy should never generate audit events on failure, regardless of the system
    policy.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">None  </samp>The policy should
    never generate an audit event.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: To configure a per-user policy, you can specify a SID to the <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp>
    parameter when using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditPolicy</samp>
    command. This SID must represent a user account; it can’t represent a group, such
    as *Administrators*, or a service account, such as *SYSTEM*, or you’ll receive
    an error when setting the policy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[Listing 9-5](chapter9.xhtml#Lis9-5) configures a per-user policy for the current
    user. You must run these commands as an administrator.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 9-5: Configuring a per-user audit policy'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we specify the user’s SID to the <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp>
    parameter, then specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessExclude</samp>
    user policy. This will exclude success audit events for only this user. If you
    want to remove the per-user policy for a user, you can specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>
    user policy:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also enumerate all users who have configured policies using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">AllUser</samp> parameter of <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditPolicy</samp>,
    as shown in [Listing 9-6](chapter9.xhtml#Lis9-6).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 9-6: Querying per-user policies for all users'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to query and set policies for the system and for a specific
    user. Next, we’ll look at how to grant users the access needed to query and set
    these policies on the system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Audit Policy Security</samp>
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To query or set a policy, the caller must have <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    enabled on their token. If the privilege is not enabled, LSASS will perform an
    access check based on a security descriptor in the system configuration. We can
    configure the following access rights in the security descriptor to grant a user
    the ability to query or set the policy for the system or a single user:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetSystemPolicy  </samp>Enables
    setting the system audit policy
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetSystemPolicy  </samp>启用设置系统审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QuerySystemPolicy  </samp>Enables
    querying the system audit policy
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QuerySystemPolicy  </samp>启用查询系统审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetUserPolicy</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>Enables
    setting a per-user audit policy
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetUserPolicy</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>启用设置每用户审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryUserPolicy  </samp>Enables
    querying a per-user audit policy
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryUserPolicy  </samp>启用查询每用户审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">EnumerateUsers  </samp>Enables
    enumerating all per-user audit policies
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">EnumerateUsers  </samp>启用枚举所有每用户审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetMiscPolicy  </samp>Enables setting
    a miscellaneous audit policy
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetMiscPolicy  </samp>启用设置杂项审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryMiscPolicy  </samp>Enables
    querying a miscellaneous audit policy
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryMiscPolicy  </samp>启用查询杂项审核策略
- en: No standard auditing API seems to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">SetMiscPolicy</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryMiscPolicy</samp> access
    rights, but because they are defined in the Windows SDK, I’ve included them here
    for completeness.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 没有标准的审计 API 似乎使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SetMiscPolicy</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryMiscPolicy</samp> 访问权限，但因为它们在
    Windows SDK 中已定义，因此我在此处列出它们以供完整性参考。
- en: As an administrator, you can query the currently configured security descriptor
    by enabling <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    and using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp>
    command, as shown in [Listing 9-7](chapter9.xhtml#Lis9-7).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，您可以通过启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> 命令来查询当前配置的安全描述符，如[列表
    9-7](chapter9.xhtml#Lis9-7)所示。
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 9-7: Querying and displaying the audit security descriptor'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-7：查询并显示审核安全描述符
- en: We pass the queried security descriptor to <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    to display the DACL. Notice that only *Administrators* and *SYSTEM* can access
    the policy ❶. Also, they’re limited to <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    access, which allows users to query the policy but not modify it. Thus, even administrators
    will need to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    to modify the audit policy, as that privilege bypasses any access check.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询到的安全描述符传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    来显示 DACL。请注意，只有*管理员*和*系统*才能访问该策略❶。此外，他们仅限于 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    访问权限，这允许用户查询该策略，但不能修改它。因此，即使是管理员也需要启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    来修改审核策略，因为该特权可以绕过任何访问检查。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A user who has not been granted read access to the policy can still query
    the advanced audit categories and subcategories, which ignore the security descriptor.
    However, they won’t be granted access to query the configured settings. Get-NtAuditPolicy
    will return the value of Unchanged for audit settings the user wasn’t able to
    query.*'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一个未被授予读取访问权限的用户仍然可以查询高级审核类别和子类别，这些类别忽略安全描述符。然而，他们不会被授予查询已配置设置的权限。Get-NtAuditPolicy
    将返回用户无法查询的审核设置的“未更改”值。*'
- en: If you want to allow non-administrators to change the advanced audit policy,
    you can change the security descriptor using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    command. Run the commands in [Listing 9-8](chapter9.xhtml#Lis9-8) as an administrator.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望允许非管理员更改高级审核策略，您可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    命令更改安全描述符。以管理员身份运行[列表 9-8](chapter9.xhtml#Lis9-8)中的命令。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 9-8: Modifying the audit security descriptor'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-8：修改审核安全描述符
- en: We first query the existing security descriptor for the audit policy and grant
    the local administrator all access rights. Then we set the modified security descriptor
    using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    command. Now the local administrator can query and modify the audit policy without
    needing to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: You shouldn’t normally reconfigure the security of the audit policy, and you
    certainly shouldn’t grant all users write access. Note that the security descriptor
    doesn’t affect who can query or set the security descriptor itself; only callers
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    enabled can do this, no matter the values in the security descriptor.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the Resource
    SACL</samp>
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Just enabling the audit policies isn’t enough to start generating audit events.
    We also need to configure an object’s SACL to specify the auditing rules to use.
    To set the SACL on an object we’ll again need to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>,
    which can only be done as an administrator. [Listing 9-9](chapter9.xhtml#Lis9-9)
    demonstrates the process for creating a <samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>
    object with a SACL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 9-9: Creating a Mutant object with a SACL'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: We start by creating an empty security descriptor, then add a single <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    ACE to the SACL. Other ACE types we could add include <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp>.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The processing of <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    ACEs looks a lot like the discretionary access check described in [Chapter 7](chapter7.xhtml).
    The SID must match a group in the calling token (including any <samp class="SANS_TheSansMonoCd_W5Regular_11">DenyOnly</samp>
    SIDs), and the access mask must match one or more bits of the granted access.
    The *Everyone* group’s SID is a special case; it will always match, regardless
    of whether the SID is available in the token.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: In addition to any of the usual inheritance ACE flags, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp>,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE must specify
    one or both of the <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp> flags, which
    provide the auditing code with the conditions in which it should generate the
    audit entry.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: We’ll create the <samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>
    object with a security descriptor containing the SACL. Before creating the object,
    we need to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>.
    If we don’t do this, the creation will fail. To make it easier to see the generated
    audit event, we also clear the security event log. Next, we create the object,
    passing it the SACL we built, and then reopen it to trigger the generation of
    an audit log.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Now we can query the security event log using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-WinEvent</samp>,
    passing it the event ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>
    to find the generated audit event ([Listing 9-10](chapter9.xhtml#Lis9-10)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 9-10: Viewing the open audit event for the Mutant object'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: We first set up a filter for the security event log and event ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>,
    which corresponds to the opening of a handle. We then use the filter with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-WinEvent</samp> and select the event’s
    textual message.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The output begins with this textual description of the event, which confirms
    that it was generated in response to a handle being opened. After this comes the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Subject</samp>, which includes the
    user’s information, including their SID and username. To look up the username,
    the kernel sends the audit event to the LSASS process.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Next are the details of the opened object. These include the object server (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Security</samp>, representing the SRM),
    the object type (<samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>),
    and the native path to the object, as well as the handle ID (the handle number
    for the object). If you query the handle value returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateMutant</samp>
    system call, it should match this value. We then get some basic process information,
    and finally some information about the access granted to the handle.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: How can we distinguish between success and failure events? The best way to do
    this is to extract the <samp class="SANS_TheSansMonoCd_W5Regular_11">KeywordsDisplayNames</samp>
    property, which contains either <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit
    Success</samp> if the handle was opened or <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit
    Failure</samp> if the handle could not be opened. [Listing 9-11](chapter9.xhtml#Lis9-11)
    shows an example.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 9-11: Extracting KeywordsDisplayNames to view the success or failure
    status'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: When you close the handle to the object you’ll get another audit event, with
    the event ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4658</samp>, as shown
    in [Listing 9-12](chapter9.xhtml#Lis9-12).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 9-12: Viewing the audit event generated when the Mutant object handle
    is closed'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that the information provided about the closing of the object
    handle is slightly less detailed than the information generated when the handle
    was opened. You can manually correlate the open and close handle events by using
    the handle IDs, which should match.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: It’s possible to generate object audit events manually from user mode using
    some additional system calls. However, to do so you need the <samp class="SANS_TheSansMonoCd_W5Regular_11">SeAuditPrivilege</samp>
    privilege, which is typically only granted to the *SYSTEM* account, not to normal
    administrators.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: You can generate the audit event at the same time as an access check using the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtAccessCheckAndAuditAlarm</samp>
    system call, which has all the same object ACE variants as the normal access checks
    do. You can access it using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp>
    PowerShell command with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    parameter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: You can also generate events manually using the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenObjectAuditAlarm</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>
    system calls, which PowerShell exposes through the <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp>
    command. Run the commands in [Listing 9-13](chapter9.xhtml#Lis9-13) as the *SYSTEM*
    user to manually generate audit log events.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 9-13: Manually generating audit log events'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: We start by enabling <samp class="SANS_TheSansMonoCd_W5Regular_11">SeAuditPrivilege</samp>
    ❶, as otherwise the rest of the script will fail. This privilege must be enabled
    on the primary token; you can’t impersonate a token with the privilege, which
    is why you must run the PowerShell instance as the *SYSTEM* user.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: After enabling the required privilege, we build a security descriptor with a
    SACL to audit successful and failed access attempts ❷. We generate a fake handle
    ID ❸; this value would be the kernel handle in a normal audit event, but when
    we generate an event from user mode it can be any value we like. We can then run
    the access check, specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    parameter, which enables the other auditing parameters. We need to specify the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SubsystemName</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectTypeName</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectName</samp> parameters,
    which can be completely arbitrary. We also specify the handle ID ❹.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'In the output, we receive an access check result with one additional property:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>, which indicates
    whether we need to write a closed handle event. Calling the <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp>
    command and specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Close</samp>
    parameter will call the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>
    system call to generate the event. We do so, specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>
    value from the result ❺. If <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>
    were <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>, we would still
    need to write the close event to complete the audit, but the actual close event
    would not be written to the audit log.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们接收到一个访问检查结果，并且包含一个额外的属性：<samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>，它指示我们是否需要写入一个关闭句柄事件。调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp> 命令并指定 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Close</samp> 参数将会调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>
    系统调用以生成该事件。我们这样做时，会指定结果 ❺ 中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>
    值。如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp> 为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">False</samp>，我们仍然需要写入关闭事件来完成审计，但实际的关闭事件不会写入审计日志。
- en: If you don’t receive any audit events when you run the commands in [Listing
    9-13](chapter9.xhtml#Lis9-13), ensure that you’ve enabled object auditing, as
    we did in [Listing 9-4](chapter9.xhtml#Lis9-4).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行 [清单 9-13](chapter9.xhtml#Lis9-13) 中的命令时没有收到任何审计事件，请确保您已启用对象审计，正如我们在 [清单
    9-4](chapter9.xhtml#Lis9-4) 中所做的那样。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the Global
    SACL</samp>
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">配置全局 SACL</samp>
- en: Correctly configuring the SACL for every resource can be difficult, as well
    as time-consuming. For this reason, the advanced audit policy allows you to configure
    a global SACL for files or registry keys. The system will use this global SACL
    if no SACL exists for a resource, and for resources that already have a SACL,
    it will merge the global and resource SACLs. Because these broad auditing configurations
    can swamp your logging output and impede your ability to monitor events, I recommend
    that you use global SACLs sparingly.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置每个资源的 SACL 可能很困难，也可能非常耗时。为此，先进的审计策略允许您为文件或注册表项配置全局 SACL。如果某个资源没有 SACL，系统将使用这个全局
    SACL；对于已经有 SACL 的资源，系统将合并全局 SACL 和资源的 SACL。由于这些广泛的审计配置可能会使您的日志输出过载，进而妨碍您监控事件，我建议您谨慎使用全局
    SACL。
- en: You can query the global SACL by specifying either the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">Key</samp> value to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp> parameter of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> PowerShell
    command. You can also modify the global SACL with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    command, specifying the same <samp class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp>
    parameter. To test this behavior, run the commands in [Listing 9-14](chapter9.xhtml#Lis9-14)
    as an administrator.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将 <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">Key</samp>
    值指定给 <samp class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp> 参数来查询全局 SACL，该参数属于
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> PowerShell
    命令。您还可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    命令修改全局 SACL，并指定相同的 <samp class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp>
    参数。要测试此行为，请以管理员身份运行 [清单 9-14](chapter9.xhtml#Lis9-14) 中的命令。
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 9-14: Setting and querying the global file SACL'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-14：设置和查询全局文件 SACL
- en: We start by building a security descriptor containing a SACL with a single <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE. We then call <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    to set the global SACL for the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type. Finally, we query the global SACL to make sure it’s set correctly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先构建一个包含单个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE
    的安全描述符。然后，我们调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 类型的全局 SACL。最后，我们查询全局
    SACL 以确保它已正确设置。
- en: 'You can remove the global SACL by passing a security descriptor with a NULL
    SACL to <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>.
    To create this security descriptor, use the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Worked Examples</samp>
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s wrap up with some worked examples that use the commands you learned about
    in this chapter.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Verifying Audit Access
    Security</samp>
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you’re checking whether malicious code has compromised an untrusted Windows
    system, it’s a good idea to verify that the security settings haven’t been modified.
    One check you might want to perform is determining whether a non-administrator
    user has the access needed to change the audit policy on the system. If a non-administrator
    user can change the policy, they could disable auditing and hide their access
    to sensitive resources.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: We can inspect the audit policy’s security descriptor manually, or do so using
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp> PowerShell
    command. Run the commands in [Listing 9-15](chapter9.xhtml#Lis9-15) as an administrator.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 9-15: Performing an access check on the audit policy security descriptor'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: We start by querying for the audit policy security descriptor and setting the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>
    fields. These fields are required for the access check process, but the security
    descriptor returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp>
    command does not contain them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: We can then pass the security descriptor to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp>
    command to check it against the current administrator token. The result indicates
    the caller has <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    access to the audit policy, which allows them to query the policy but not set
    it without enabling <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we can remove the *Administrators* group from the token by creating
    a filtered token with the <samp class="SANS_TheSansMonoCd_W5Regular_11">LuaToken</samp>
    flag. Running the access check with the filtered token indicates that it has no
    granted access to the audit policy (not even read access). If this second check
    returns a status other than <samp class="SANS_TheSansMonoCd_W5Regular_11">STATUS_ACCESS_DENIED</samp>,
    you can conclude that the default audit policy security descriptor has been changed,
    and it’s worth checking whether this was done intentionally or maliciously.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Finding Resources
    with Audit ACEs</samp>
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most resources aren’t configured with a SACL, so you might want to enumerate
    the resources on the system that have one. This can help you understand what resources
    might generate audit log events. [Listing 9-16](chapter9.xhtml#Lis9-16) provides
    a simple example in which we find these resources. Run the commands as an administrator.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 9-16: Finding processes with configured SACLs'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: We focus on <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> objects
    here, but you can apply this same approach to other resource types.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: We first open all processes for <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryLimitedInformation</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessSystemSecurity</samp>
    access ❶. We apply a filter to the processes, querying for the SACL from the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> object, then returning
    the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">HasAuditAce</samp>
    property ❷. This property indicates whether the security descriptor has at least
    one audit ACE.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: We then pipe the results returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtProcess</samp>
    command into <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    to display the SACLs ❸. In this case, there is only a single entry, for the LSASS
    process. We can see that the audit ACE logs an event whenever the LSASS process
    is opened for <samp class="SANS_TheSansMonoCd_W5Regular_11">VmRead</samp> access
    ❹.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: This policy is a default audit configuration on Windows, used to detect access
    to the LSASS process. The <samp class="SANS_TheSansMonoCd_W5Regular_11">VmRead</samp>
    access right allows a caller to read the virtual memory of a process, and this
    ACE aims to detect the extraction of the LSASS memory contents, which can include
    passwords and other authentication credentials. If the process is opened for any
    other access right, no audit log entry will be generated.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wrapping Up</samp>
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of security auditing. We started with
    a description of the security event log and the types of log entries you might
    find when auditing resource access. Next, we looked at configuring the audit policy
    and setting advanced audit policies with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditPolicy</samp>
    command. We also discussed how Windows controls access to the audit policy and
    the importance of the <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    privilege, used for almost all audit-related configuration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: To enable auditing on an object, we must modify the SACL to define rules for
    generating the events enabled by the policy. We walked through examples of generating
    audit events automatically, using the SACL, and manually, during a user-mode access
    check.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve now covered all aspects of the SRM: security access tokens, security
    descriptors, access checking, and auditing. In the rest of this book, we’ll explore
    the various mechanisms to authenticate to a Windows system.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
