- en: <hgroup>
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <hgroup>
- en: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">9</samp> <samp class="SANS_Dogma_OT_Bold_B_11">SECURITY
    AUDITING</samp>
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_B_11">9</samp> <samp class="SANS_Dogma_OT_Bold_B_11">安全审计</samp>
- en: </hgroup>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: </hgroup>
- en: '![](../images/chapter.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/chapter.jpg)'
- en: Intertwined with the access check process is the auditing process. An administrator
    can configure the system’s auditing mechanism to generate a log of accessed resources.
    Each log event will include details about the user and application that opened
    the resource and whether the access succeeded or failed. This information can
    help us identify incorrect security settings or detect malicious access to sensitive
    resources.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 访问检查过程与审计过程是交织在一起的。管理员可以配置系统的审计机制以生成访问资源的日志。每个日志事件将包括有关打开资源的用户和应用程序的详细信息，以及访问是否成功。此信息可以帮助我们识别错误的安全设置或检测恶意访问敏感资源。
- en: In this short chapter, we’ll first discuss where the resource access log gets
    stored once the kernel generates it. We’ll then describe how a system administrator
    can configure the audit mechanism. Finally, we’ll detail how to configure individual
    resources to generate audit log events through the SACL.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短的章节中，我们将首先讨论内核生成资源访问日志后，它会存储在哪里。接着，我们将描述系统管理员如何配置审计机制。最后，我们将详细介绍如何通过 SACL
    配置单个资源生成审计日志事件。
- en: <samp class="SANS_Futura_Std_Bold_B_11">The Security Event Log</samp>
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">安全事件日志</samp>
- en: Windows generates log events whenever an access check succeeds or fails. The
    kernel writes these log events to the *security event log*, which only administrators
    can access.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 每当访问检查成功或失败时都会生成日志事件。内核将这些日志事件写入*安全事件日志*，只有管理员可以访问该日志。
- en: 'When performing access checks on kernel resources, Windows will generate the
    following types of audit events. The security event log represents these by using
    the event ID included in parentheses:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在对内核资源执行访问检查时，Windows 会生成以下类型的审计事件。安全事件日志通过括号中的事件 ID 来表示这些事件：
- en: Object handle opened (<samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象句柄已打开 (<samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>)
- en: Object handle closed (<samp class="SANS_TheSansMonoCd_W5Regular_11">4658</samp>)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象句柄已关闭 (<samp class="SANS_TheSansMonoCd_W5Regular_11">4658</samp>)
- en: Object deleted (<samp class="SANS_TheSansMonoCd_W5Regular_11">4660</samp>)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象已删除 (<samp class="SANS_TheSansMonoCd_W5Regular_11">4660</samp>)
- en: Object handle duplicated (<samp class="SANS_TheSansMonoCd_W5Regular_11">4690</samp>)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象句柄已复制 (<samp class="SANS_TheSansMonoCd_W5Regular_11">4690</samp>)
- en: SACL changed (<samp class="SANS_TheSansMonoCd_W5Regular_11">4717</samp>)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SACL 已更改 (<samp class="SANS_TheSansMonoCd_W5Regular_11">4717</samp>)
- en: 'When we access resources via kernel system calls such as <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateMutant</samp>,
    the auditing mechanism generates these events automatically. But for the object-related
    audit events, we must first configure two aspects of the system: we must set the
    system policy to generate audit events, and we must enable audit ACEs in the resource’s
    SACL. Let’s discuss each of these configuration requirements in turn.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们通过内核系统调用访问资源时，例如 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateMutant</samp>，审计机制会自动生成这些事件。但是，对于与对象相关的审计事件，我们必须首先配置系统的两个方面：我们必须设置系统策略以生成审计事件，并且必须在资源的
    SACL 中启用审计 ACE。让我们逐一讨论这些配置要求。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the System
    Audit Policy</samp>
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">配置系统审计策略</samp>
- en: Most Windows users don’t need to capture audit information for kernel resources,
    so the audit policy is disabled by default. Enterprise environments commonly configure
    the audit policy through a *domain security policy*, which the enterprise network
    distributes to the individual devices.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Windows 用户无需捕获内核资源的审计信息，因此默认情况下审计策略是禁用的。企业环境通常通过*域安全策略*配置审计策略，该策略由企业网络分发到各个设备。
- en: 'Users not in an enterprise network can enable the audit policy manually. One
    way to do so is to edit the *local security policy*, which looks the same as the
    domain security policy but applies only to the current system. There are two types
    of audit policy: the legacy policy used prior to Windows 7 and the advanced audit
    policy. Using the advanced audit policy is recommended, as it provides more granular
    configuration; we won’t discuss the legacy policy further.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不在企业网络中的用户可以手动启用审计策略。一种方法是编辑 *本地安全策略*，该策略与域安全策略相同，但仅适用于当前系统。审计策略有两种类型：Windows
    7 之前使用的传统策略和高级审计策略。建议使用高级审计策略，因为它提供了更细粒度的配置；我们将不再讨论传统策略。
- en: If you open the local security policy editor by running the <samp class="SANS_TheSansMonoCd_W5Regular_11">secpol.msc</samp>
    command in PowerShell, you can view the current configuration of the advanced
    audit policy, as shown in [Figure 9-1](chapter9.xhtml#fig9-1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过在 PowerShell 中运行 <samp class="SANS_TheSansMonoCd_W5Regular_11">secpol.msc</samp>
    命令打开本地安全策略编辑器，你可以查看高级审计策略的当前配置，如 [图 9-1](chapter9.xhtml#fig9-1) 所示。
- en: '![](../images/Figure9-1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/Figure9-1.jpg)'
- en: '<samp class="SANS_Futura_Std_Book_Oblique_I_11">Figure 9-1: The security policy
    editor showing the advanced audit policy</samp>'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Book_Oblique_I_11">图 9-1：显示高级审计策略的安全策略编辑器</samp>
- en: As you can see, the categories in the audit policy aren’t currently configured.
    To explore how audit events are generated, we’ll use PowerShell to enable the
    required audit policy temporarily and run some example code. Any changes you make
    with PowerShell won’t be reflected in the local security policy, which will revert
    the next time it synchronizes (for example, during a reboot or when the group
    policy is updated on an enterprise network). You can force the settings to synchronize
    by running the command <samp class="SANS_TheSansMonoCd_W5Regular_11">gpupdate.exe
    /force</samp> as an administrator in PowerShell or at the command prompt.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，审计策略中的类别目前未配置。为了探索审计事件是如何生成的，我们将使用 PowerShell 临时启用所需的审计策略并运行一些示例代码。你使用
    PowerShell 所做的任何更改不会反映在本地安全策略中，该策略将在下次同步时恢复（例如，在重启时或在企业网络上更新组策略时）。你可以通过在 PowerShell
    或命令提示符中以管理员身份运行命令 <samp class="SANS_TheSansMonoCd_W5Regular_11">gpupdate.exe /force</samp>
    来强制设置同步。
- en: 'Advanced audit policies have two levels: a top-level category and multiple
    subcategories. You can query for the top-level categories using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditPolicy</samp>,
    as in [Listing 9-1](chapter9.xhtml#Lis9-1).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 高级审计策略有两个级别：顶级类别和多个子类别。你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditPolicy</samp>
    查询顶级类别，如 [清单 9-1](chapter9.xhtml#Lis9-1) 所示。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Listing 9-1: The top-level audit policy categories'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-1：顶级审计策略类别
- en: In the output, you can see the name of each category and a count of its subcategories.
    Each category also has an associated GUID, but this value is hidden by default.
    To see it, select the <samp class="SANS_TheSansMonoCd_W5Regular_11">Id</samp>
    property from the command’s output, as shown in [Listing 9-2](chapter9.xhtml#Lis9-2).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你可以看到每个类别的名称及其子类别的数量。每个类别还有一个关联的 GUID，但默认情况下该值是隐藏的。要查看它，请从命令的输出中选择 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Id</samp> 属性，如 [清单 9-2](chapter9.xhtml#Lis9-2)
    所示。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Listing 9-2: Displaying category GUIDs'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-2：显示类别 GUIDs
- en: You can display the subcategories by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">ExpandCategory</samp>
    parameter. In [Listing 9-3](chapter9.xhtml#Lis9-3), we specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">System</samp>
    category by name and then expand the output to show its subcategories.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">ExpandCategory</samp> 参数显示子类别。在
    [清单 9-3](chapter9.xhtml#Lis9-3) 中，我们按名称指定了 <samp class="SANS_TheSansMonoCd_W5Regular_11">System</samp>
    类别，然后展开输出以显示其子类别。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Listing 9-3: Displaying the audit policy’s subcategories'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-3：显示审计策略的子类别
- en: 'You can also select a category by specifying its GUID using the <samp class="SANS_TheSansMonoCd_W5Regular_11">CategoryGuid</samp>
    parameter. The audit policy is based on these subcategories. Each subcategory
    policy can have one or more of the following values:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">CategoryGuid</samp> 参数指定其
    GUID 来选择类别。审计策略基于这些子类别。每个子类别策略可以具有以下一个或多个值：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Unchanged</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>The
    policy is not configured and should not be changed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">未更改</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>策略未配置，且不应更改。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Success  </samp>The policy should
    generate audit events when an auditable resource is opened successfully.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">成功  </samp>策略应在可审计资源成功打开时生成审计事件。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Failure  </samp>The policy should
    generate audit events when an auditable resource can’t be opened.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">失败  </samp>策略应在无法打开可审计资源时生成审计事件。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">None  </samp>The policy should
    never generate an audit event.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">无  </samp>策略应从不生成审计事件。
- en: In [Listing 9-3](chapter9.xhtml#Lis9-3) the subcategories all show the value
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Unchanged</samp>, which means no
    policy has been configured. We can enable kernel object auditing by running the
    commands shown in [Listing 9-4](chapter9.xhtml#Lis9-4) as an administrator.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在[清单 9-3](chapter9.xhtml#Lis9-3)中，所有子类别显示值为 <samp class="SANS_TheSansMonoCd_W5Regular_11">Unchanged</samp>，这意味着没有配置策略。我们可以通过以管理员身份运行[清单
    9-4](chapter9.xhtml#Lis9-4)中显示的命令来启用内核对象审计。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Listing 9-4: Setting the policy and viewing the resulting ObjectAccess audit
    policy list'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-4：设置策略并查看生成的 ObjectAccess 审计策略列表
- en: Here, we’ve enabled the <samp class="SANS_TheSansMonoCd_W5Regular_11">Success</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Failure</samp> audit policies
    for all subcategories under <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectAccess</samp>.
    To make this modification, we need the <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    privilege. We can set a single subcategory rather than the entire category by
    name by using the <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryName</samp>
    parameter or specifying the GUID using <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryGuid</samp>.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为所有子类别启用了 <samp class="SANS_TheSansMonoCd_W5Regular_11">Success</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Failure</samp> 审计策略，这些子类别都在 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">ObjectAccess</samp> 下。要进行此修改，我们需要 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp> 权限。我们可以使用 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryName</samp> 参数按名称设置单个子类别，而不是整个类别，或者使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategoryGuid</samp> 参数指定 GUID。
- en: We confirm that the audit policy has been configured correctly by specifying
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">PassThru</samp> parameter, which
    lists the modified <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategory</samp>
    objects. The output displays some important audit policies, including <samp class="SANS_TheSansMonoCd_W5Regular_11">File
    System</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">Registry</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">Kernel Object</samp>, which
    enable auditing on files, registry keys, and other kernel objects, respectively.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">PassThru</samp> 参数来确认审计策略已正确配置，该参数列出已修改的
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SubCategory</samp> 对象。输出显示了一些重要的审计策略，包括
    <samp class="SANS_TheSansMonoCd_W5Regular_11">文件系统</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">注册表</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">内核对象</samp>，分别启用了对文件、注册表键和其他内核对象的审计。
- en: 'You can run the following command as an administrator to disable the change
    we made in [Listing 9-4](chapter9.xhtml#Lis9-4):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以管理员身份运行以下命令，以禁用我们在[清单 9-4](chapter9.xhtml#Lis9-4)中所做的更改：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Unless you need to enable the audit policy for some reason, it’s best to disable
    it once you’re finished experimenting.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除非出于某种原因需要启用审计策略，否则最好在实验结束后禁用它。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the Per-User
    Audit Policy</samp>
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">配置每用户审计策略</samp>
- en: 'In addition to configuring a system-wide policy, it’s also possible to configure
    the audit policy on a per-user basis. You could use this feature to add auditing
    to a specific user account in cases when the system does not define an overall
    audit policy. You could also use it to exclude a specific user account from auditing.
    To facilitate this behavior, the policy settings differ slightly for per-user
    policies:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置系统范围的策略外，还可以基于每个用户配置审计策略。在系统未定义整体审计策略时，可以使用此功能为特定用户帐户添加审计。还可以使用它将特定用户帐户排除在审计之外。为了方便这种行为，针对每个用户策略的策略设置略有不同：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Unchanged  </samp>The policy is
    not configured. When set, the policy should not be changed.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">Unchanged  </samp>该策略未配置。设置后，该策略不应被更改。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SuccessInclude  </samp>The policy
    should generate audit events on success, regardless of the system policy.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SuccessInclude  </samp>该策略应在成功时生成审计事件，无论系统策略如何。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SuccessExclude  </samp>The policy
    should never generate audit events on success, regardless of the system policy.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SuccessExclude  </samp>该策略应从不在成功时生成审计事件，无论系统策略如何。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FailureInclude  </samp>The policy
    should generate audit events on failure, regardless of the system policy.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FailureInclude  </samp>该策略应在失败时生成审计事件，无论系统策略如何。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FailureExclude</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>The
    policy should never generate audit events on failure, regardless of the system
    policy.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">FailureExclude</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>该策略应从不在失败时生成审计事件，无论系统策略如何。
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">None  </samp>The policy should
    never generate an audit event.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">None  </samp>该策略应从不生成审计事件。
- en: To configure a per-user policy, you can specify a SID to the <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp>
    parameter when using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditPolicy</samp>
    command. This SID must represent a user account; it can’t represent a group, such
    as *Administrators*, or a service account, such as *SYSTEM*, or you’ll receive
    an error when setting the policy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置每个用户的策略，可以在使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditPolicy</samp>
    命令时，指定一个 SID 给 <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp> 参数。此
    SID 必须代表一个用户帐户；它不能代表一个组，如 *Administrators*，或一个服务帐户，如 *SYSTEM*，否则在设置策略时将收到错误。
- en: '[Listing 9-5](chapter9.xhtml#Lis9-5) configures a per-user policy for the current
    user. You must run these commands as an administrator.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表 9-5](chapter9.xhtml#Lis9-5) 配置当前用户的每个用户策略。你必须以管理员身份运行这些命令。'
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Listing 9-5: Configuring a per-user audit policy'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-5：配置每个用户的审计策略
- en: 'Here, we specify the user’s SID to the <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp>
    parameter, then specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessExclude</samp>
    user policy. This will exclude success audit events for only this user. If you
    want to remove the per-user policy for a user, you can specify the <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp>
    user policy:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将用户的 SID 指定给 <samp class="SANS_TheSansMonoCd_W5Regular_11">User</samp>
    参数，然后指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessExclude</samp> 用户策略。这将只排除此用户的成功审计事件。如果要删除某个用户的每个用户策略，可以指定
    <samp class="SANS_TheSansMonoCd_W5Regular_11">None</samp> 用户策略：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also enumerate all users who have configured policies using the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">AllUser</samp> parameter of <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditPolicy</samp>,
    as shown in [Listing 9-6](chapter9.xhtml#Lis9-6).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">AllUser</samp> 参数和 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditPolicy</samp> 命令列出所有已配置策略的用户，如
    [列表 9-6](chapter9.xhtml#Lis9-6) 所示。
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Listing 9-6: Querying per-user policies for all users'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-6：查询所有用户的每个用户策略
- en: You now know how to query and set policies for the system and for a specific
    user. Next, we’ll look at how to grant users the access needed to query and set
    these policies on the system.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经知道如何查询和设置系统和特定用户的策略。接下来，我们将看看如何授予用户查询和设置这些策略所需的访问权限。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Audit Policy Security</samp>
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">审计策略安全性</samp>
- en: 'To query or set a policy, the caller must have <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    enabled on their token. If the privilege is not enabled, LSASS will perform an
    access check based on a security descriptor in the system configuration. We can
    configure the following access rights in the security descriptor to grant a user
    the ability to query or set the policy for the system or a single user:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要查询或设置策略，调用者必须在其令牌上启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    权限。如果该权限未启用，LSASS 将基于系统配置中的安全描述符执行访问检查。我们可以在安全描述符中配置以下访问权限，以授予用户查询或设置系统或单个用户策略的能力：
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetSystemPolicy  </samp>Enables
    setting the system audit policy
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetSystemPolicy  </samp>启用设置系统审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QuerySystemPolicy  </samp>Enables
    querying the system audit policy
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QuerySystemPolicy  </samp>启用查询系统审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetUserPolicy</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>Enables
    setting a per-user audit policy
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetUserPolicy</samp><samp class="SANS_TheSansMonoCd_W7Bold_B_11">  </samp>启用设置每用户审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryUserPolicy  </samp>Enables
    querying a per-user audit policy
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryUserPolicy  </samp>启用查询每用户审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">EnumerateUsers  </samp>Enables
    enumerating all per-user audit policies
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">EnumerateUsers  </samp>启用枚举所有每用户审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetMiscPolicy  </samp>Enables setting
    a miscellaneous audit policy
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">SetMiscPolicy  </samp>启用设置杂项审核策略
- en: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryMiscPolicy  </samp>Enables
    querying a miscellaneous audit policy
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W7Bold_B_11">QueryMiscPolicy  </samp>启用查询杂项审核策略
- en: No standard auditing API seems to use the <samp class="SANS_TheSansMonoCd_W5Regular_11">SetMiscPolicy</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryMiscPolicy</samp> access
    rights, but because they are defined in the Windows SDK, I’ve included them here
    for completeness.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 没有标准的审计 API 似乎使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SetMiscPolicy</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryMiscPolicy</samp> 访问权限，但因为它们在
    Windows SDK 中已定义，因此我在此处列出它们以供完整性参考。
- en: As an administrator, you can query the currently configured security descriptor
    by enabling <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    and using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp>
    command, as shown in [Listing 9-7](chapter9.xhtml#Lis9-7).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，您可以通过启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    并使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> 命令来查询当前配置的安全描述符，如[列表
    9-7](chapter9.xhtml#Lis9-7)所示。
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Listing 9-7: Querying and displaying the audit security descriptor'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-7：查询并显示审核安全描述符
- en: We pass the queried security descriptor to <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    to display the DACL. Notice that only *Administrators* and *SYSTEM* can access
    the policy ❶. Also, they’re limited to <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    access, which allows users to query the policy but not modify it. Thus, even administrators
    will need to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    to modify the audit policy, as that privilege bypasses any access check.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询到的安全描述符传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    来显示 DACL。请注意，只有*管理员*和*系统*才能访问该策略❶。此外，他们仅限于 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    访问权限，这允许用户查询该策略，但不能修改它。因此，即使是管理员也需要启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    来修改审核策略，因为该特权可以绕过任何访问检查。
- en: <samp class="SANS_Dogma_OT_Bold_B_15">NOTE</samp>
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <samp class="SANS_Dogma_OT_Bold_B_15">注意</samp>
- en: ''
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*A user who has not been granted read access to the policy can still query
    the advanced audit categories and subcategories, which ignore the security descriptor.
    However, they won’t be granted access to query the configured settings. Get-NtAuditPolicy
    will return the value of Unchanged for audit settings the user wasn’t able to
    query.*'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一个未被授予读取访问权限的用户仍然可以查询高级审核类别和子类别，这些类别忽略安全描述符。然而，他们不会被授予查询已配置设置的权限。Get-NtAuditPolicy
    将返回用户无法查询的审核设置的“未更改”值。*'
- en: If you want to allow non-administrators to change the advanced audit policy,
    you can change the security descriptor using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    command. Run the commands in [Listing 9-8](chapter9.xhtml#Lis9-8) as an administrator.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望允许非管理员更改高级审核策略，您可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    命令更改安全描述符。以管理员身份运行[列表 9-8](chapter9.xhtml#Lis9-8)中的命令。
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Listing 9-8: Modifying the audit security descriptor'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 9-8：修改审核安全描述符
- en: We first query the existing security descriptor for the audit policy and grant
    the local administrator all access rights. Then we set the modified security descriptor
    using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    command. Now the local administrator can query and modify the audit policy without
    needing to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查询现有的安全描述符以获取审计策略，并授予本地管理员所有访问权限。然后，我们使用<samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>命令设置修改后的安全描述符。现在，本地管理员可以查询和修改审计策略，而无需启用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>。
- en: You shouldn’t normally reconfigure the security of the audit policy, and you
    certainly shouldn’t grant all users write access. Note that the security descriptor
    doesn’t affect who can query or set the security descriptor itself; only callers
    with <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    enabled can do this, no matter the values in the security descriptor.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通常不应重新配置审计策略的安全性，更不应授予所有用户写入访问权限。请注意，安全描述符不会影响谁可以查询或设置安全描述符本身；只有启用了 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    的调用者才能做到这一点，无论安全描述符中的值如何。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the Resource
    SACL</samp>
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">配置资源 SACL</samp>
- en: Just enabling the audit policies isn’t enough to start generating audit events.
    We also need to configure an object’s SACL to specify the auditing rules to use.
    To set the SACL on an object we’ll again need to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>,
    which can only be done as an administrator. [Listing 9-9](chapter9.xhtml#Lis9-9)
    demonstrates the process for creating a <samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>
    object with a SACL.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅启用审计策略还不足以开始生成审计事件。我们还需要配置对象的 SACL，以指定要使用的审计规则。为了在对象上设置 SACL，我们需要再次启用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>，这只能作为管理员来完成。[清单
    9-9](chapter9.xhtml#Lis9-9)演示了创建带有 SACL 的<samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>对象的过程。
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Listing 9-9: Creating a Mutant object with a SACL'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-9：创建一个带有 SACL 的突变体对象
- en: We start by creating an empty security descriptor, then add a single <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    ACE to the SACL. Other ACE types we could add include <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp>.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个空的安全描述符，然后向 SACL 中添加一个单独的<samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    ACE。我们还可以添加其他类型的 ACE，例如<samp class="SANS_TheSansMonoCd_W5Regular_11">AuditObject</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">AuditCallback</samp>。
- en: The processing of <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    ACEs looks a lot like the discretionary access check described in [Chapter 7](chapter7.xhtml).
    The SID must match a group in the calling token (including any <samp class="SANS_TheSansMonoCd_W5Regular_11">DenyOnly</samp>
    SIDs), and the access mask must match one or more bits of the granted access.
    The *Everyone* group’s SID is a special case; it will always match, regardless
    of whether the SID is available in the token.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE 的处理过程与[第 7 章](chapter7.xhtml)中描述的可分配访问检查非常相似。SID
    必须与调用令牌中的某个组匹配（包括任何 <samp class="SANS_TheSansMonoCd_W5Regular_11">DenyOnly</samp>
    SID），且访问掩码必须与授予的访问权限的一项或多项匹配。*Everyone* 组的 SID 是一个特殊情况；无论 SID 是否存在于令牌中，它都会始终匹配。
- en: In addition to any of the usual inheritance ACE flags, such as <samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp>,
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE must specify
    one or both of the <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp> flags, which
    provide the auditing code with the conditions in which it should generate the
    audit entry.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了任何常见的继承 ACE 标志，如<samp class="SANS_TheSansMonoCd_W5Regular_11">InheritOnly</samp>外，<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE 必须指定 <samp class="SANS_TheSansMonoCd_W5Regular_11">SuccessfulAccess</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">FailedAccess</samp> 标志中的一个或两个，这些标志为审计代码提供了生成审计条目的条件。
- en: We’ll create the <samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>
    object with a security descriptor containing the SACL. Before creating the object,
    we need to enable <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>.
    If we don’t do this, the creation will fail. To make it easier to see the generated
    audit event, we also clear the security event log. Next, we create the object,
    passing it the SACL we built, and then reopen it to trigger the generation of
    an audit log.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个包含 SACL 的安全描述符的 <samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>
    对象。在创建对象之前，我们需要启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>。如果不这样做，创建将失败。为了更方便地查看生成的审计事件，我们还清除了安全事件日志。接下来，我们创建对象，传递给它我们构建的
    SACL，然后重新打开它以触发审计日志的生成。
- en: Now we can query the security event log using <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-WinEvent</samp>,
    passing it the event ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>
    to find the generated audit event ([Listing 9-10](chapter9.xhtml#Lis9-10)).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-WinEvent</samp> 查询安全事件日志，传递事件
    ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp> 来查找生成的审计事件（[清单 9-10](chapter9.xhtml#Lis9-10)）。
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Listing 9-10: Viewing the open audit event for the Mutant object'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-10：查看 Mutant 对象的打开审计事件
- en: We first set up a filter for the security event log and event ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>,
    which corresponds to the opening of a handle. We then use the filter with <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-WinEvent</samp> and select the event’s
    textual message.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置一个安全事件日志过滤器，使用事件 ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4656</samp>，该
    ID 对应于句柄的打开。然后，我们使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-WinEvent</samp>
    和该过滤器来选择事件的文本消息。
- en: The output begins with this textual description of the event, which confirms
    that it was generated in response to a handle being opened. After this comes the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Subject</samp>, which includes the
    user’s information, including their SID and username. To look up the username,
    the kernel sends the audit event to the LSASS process.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 输出以该事件的文本描述开始，确认它是响应于句柄打开时生成的。接下来是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Subject</samp>，其中包含用户的信息，包括他们的
    SID 和用户名。为了查找用户名，内核会将审计事件发送给 LSASS 进程。
- en: Next are the details of the opened object. These include the object server (<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Security</samp>, representing the SRM),
    the object type (<samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>),
    and the native path to the object, as well as the handle ID (the handle number
    for the object). If you query the handle value returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateMutant</samp>
    system call, it should match this value. We then get some basic process information,
    and finally some information about the access granted to the handle.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是已打开对象的详细信息。这些信息包括对象服务器（<samp class="SANS_TheSansMonoCd_W5Regular_11">Security</samp>，表示
    SRM）、对象类型（<samp class="SANS_TheSansMonoCd_W5Regular_11">Mutant</samp>）和对象的本地路径，以及句柄
    ID（对象的句柄编号）。如果你查询从 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCreateMutant</samp>
    系统调用返回的句柄值，它应该与此值匹配。然后我们获取一些基本的进程信息，最后是有关授予句柄访问权限的信息。
- en: How can we distinguish between success and failure events? The best way to do
    this is to extract the <samp class="SANS_TheSansMonoCd_W5Regular_11">KeywordsDisplayNames</samp>
    property, which contains either <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit
    Success</samp> if the handle was opened or <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit
    Failure</samp> if the handle could not be opened. [Listing 9-11](chapter9.xhtml#Lis9-11)
    shows an example.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何区分成功和失败事件？最好的方法是提取 <samp class="SANS_TheSansMonoCd_W5Regular_11">KeywordsDisplayNames</samp>
    属性，它包含 <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit Success</samp>（如果句柄已打开）或
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit Failure</samp>（如果句柄无法打开）。[清单
    9-11](chapter9.xhtml#Lis9-11) 显示了一个示例。
- en: '[PRE12]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Listing 9-11: Extracting KeywordsDisplayNames to view the success or failure
    status'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-11：提取 KeywordsDisplayNames 以查看成功或失败状态
- en: When you close the handle to the object you’ll get another audit event, with
    the event ID <samp class="SANS_TheSansMonoCd_W5Regular_11">4658</samp>, as shown
    in [Listing 9-12](chapter9.xhtml#Lis9-12).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当你关闭对象的句柄时，会生成另一个审计事件，事件 ID 为 <samp class="SANS_TheSansMonoCd_W5Regular_11">4658</samp>，如[清单
    9-12](chapter9.xhtml#Lis9-12) 所示。
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Listing 9-12: Viewing the audit event generated when the Mutant object handle
    is closed'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-12：查看关闭 Mutant 对象句柄时生成的审计事件
- en: You might notice that the information provided about the closing of the object
    handle is slightly less detailed than the information generated when the handle
    was opened. You can manually correlate the open and close handle events by using
    the handle IDs, which should match.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，关于关闭对象句柄提供的信息，比打开句柄时生成的信息要少一些。你可以通过使用句柄ID来手动关联打开和关闭句柄事件，这些ID应该是匹配的。
- en: It’s possible to generate object audit events manually from user mode using
    some additional system calls. However, to do so you need the <samp class="SANS_TheSansMonoCd_W5Regular_11">SeAuditPrivilege</samp>
    privilege, which is typically only granted to the *SYSTEM* account, not to normal
    administrators.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户模式手动生成对象审计事件是可能的，使用一些额外的系统调用。然而，为了做到这一点，你需要<samp class="SANS_TheSansMonoCd_W5Regular_11">SeAuditPrivilege</samp>权限，通常这个权限仅授予*SYSTEM*账户，而不是普通管理员。
- en: You can generate the audit event at the same time as an access check using the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">NtAccessCheckAndAuditAlarm</samp>
    system call, which has all the same object ACE variants as the normal access checks
    do. You can access it using the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp>
    PowerShell command with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    parameter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用<samp class="SANS_TheSansMonoCd_W5Regular_11">NtAccessCheckAndAuditAlarm</samp>系统调用，在执行访问检查的同时生成审计事件，该调用具有与正常访问检查相同的所有对象ACE变体。你可以通过使用<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp> PowerShell命令，并带上<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>参数来访问它。
- en: You can also generate events manually using the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenObjectAuditAlarm</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>
    system calls, which PowerShell exposes through the <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp>
    command. Run the commands in [Listing 9-13](chapter9.xhtml#Lis9-13) as the *SYSTEM*
    user to manually generate audit log events.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用<samp class="SANS_TheSansMonoCd_W5Regular_11">NtOpenObjectAuditAlarm</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>系统调用手动生成事件，PowerShell通过<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp>命令公开这些调用。以*SYSTEM*用户身份运行[清单9-13](chapter9.xhtml#Lis9-13)中的命令，以手动生成审计日志事件。
- en: '[PRE14]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Listing 9-13: Manually generating audit log events'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 清单9-13：手动生成审计日志事件
- en: We start by enabling <samp class="SANS_TheSansMonoCd_W5Regular_11">SeAuditPrivilege</samp>
    ❶, as otherwise the rest of the script will fail. This privilege must be enabled
    on the primary token; you can’t impersonate a token with the privilege, which
    is why you must run the PowerShell instance as the *SYSTEM* user.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先启用<samp class="SANS_TheSansMonoCd_W5Regular_11">SeAuditPrivilege</samp>❶，否则脚本的其余部分将失败。这个权限必须在主令牌上启用；你不能模拟一个拥有此权限的令牌，这就是为什么你必须以*SYSTEM*用户身份运行PowerShell实例的原因。
- en: After enabling the required privilege, we build a security descriptor with a
    SACL to audit successful and failed access attempts ❷. We generate a fake handle
    ID ❸; this value would be the kernel handle in a normal audit event, but when
    we generate an event from user mode it can be any value we like. We can then run
    the access check, specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>
    parameter, which enables the other auditing parameters. We need to specify the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">SubsystemName</samp>, <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectTypeName</samp>,
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectName</samp> parameters,
    which can be completely arbitrary. We also specify the handle ID ❹.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用所需权限后，我们构建一个包含SACL的安全描述符，以审核成功和失败的访问尝试❷。我们生成一个虚假的句柄ID❸；在正常的审计事件中，这个值将是内核句柄，但当我们从用户模式生成事件时，它可以是任何我们喜欢的值。然后我们可以运行访问检查，指定<samp
    class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp>参数，从而启用其他审计参数。我们需要指定<samp
    class="SANS_TheSansMonoCd_W5Regular_11">SubsystemName</samp>、<samp class="SANS_TheSansMonoCd_W5Regular_11">ObjectTypeName</samp>和<samp
    class="SANS_TheSansMonoCd_W5Regular_11">ObjectName</samp>参数，这些可以完全是任意的。我们还需要指定句柄ID❹。
- en: 'In the output, we receive an access check result with one additional property:
    <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>, which indicates
    whether we need to write a closed handle event. Calling the <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp>
    command and specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">Close</samp>
    parameter will call the <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>
    system call to generate the event. We do so, specifying the <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>
    value from the result ❺. If <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>
    were <samp class="SANS_TheSansMonoCd_W5Regular_11">False</samp>, we would still
    need to write the close event to complete the audit, but the actual close event
    would not be written to the audit log.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，我们接收到一个访问检查结果，并且包含一个额外的属性：<samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>，它指示我们是否需要写入一个关闭句柄事件。调用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Write-NtAudit</samp> 命令并指定 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Close</samp> 参数将会调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">NtCloseObjectAuditAlarm</samp>
    系统调用以生成该事件。我们这样做时，会指定结果 ❺ 中的 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp>
    值。如果 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenerateOnClose</samp> 为 <samp
    class="SANS_TheSansMonoCd_W5Regular_11">False</samp>，我们仍然需要写入关闭事件来完成审计，但实际的关闭事件不会写入审计日志。
- en: If you don’t receive any audit events when you run the commands in [Listing
    9-13](chapter9.xhtml#Lis9-13), ensure that you’ve enabled object auditing, as
    we did in [Listing 9-4](chapter9.xhtml#Lis9-4).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在运行 [清单 9-13](chapter9.xhtml#Lis9-13) 中的命令时没有收到任何审计事件，请确保您已启用对象审计，正如我们在 [清单
    9-4](chapter9.xhtml#Lis9-4) 中所做的那样。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Configuring the Global
    SACL</samp>
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">配置全局 SACL</samp>
- en: Correctly configuring the SACL for every resource can be difficult, as well
    as time-consuming. For this reason, the advanced audit policy allows you to configure
    a global SACL for files or registry keys. The system will use this global SACL
    if no SACL exists for a resource, and for resources that already have a SACL,
    it will merge the global and resource SACLs. Because these broad auditing configurations
    can swamp your logging output and impede your ability to monitor events, I recommend
    that you use global SACLs sparingly.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正确配置每个资源的 SACL 可能很困难，也可能非常耗时。为此，先进的审计策略允许您为文件或注册表项配置全局 SACL。如果某个资源没有 SACL，系统将使用这个全局
    SACL；对于已经有 SACL 的资源，系统将合并全局 SACL 和资源的 SACL。由于这些广泛的审计配置可能会使您的日志输出过载，进而妨碍您监控事件，我建议您谨慎使用全局
    SACL。
- en: You can query the global SACL by specifying either the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    or <samp class="SANS_TheSansMonoCd_W5Regular_11">Key</samp> value to the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp> parameter of the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> PowerShell
    command. You can also modify the global SACL with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    command, specifying the same <samp class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp>
    parameter. To test this behavior, run the commands in [Listing 9-14](chapter9.xhtml#Lis9-14)
    as an administrator.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将 <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 或 <samp class="SANS_TheSansMonoCd_W5Regular_11">Key</samp>
    值指定给 <samp class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp> 参数来查询全局 SACL，该参数属于
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> PowerShell
    命令。您还可以使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    命令修改全局 SACL，并指定相同的 <samp class="SANS_TheSansMonoCd_W5Regular_11">GlobalSacl</samp>
    参数。要测试此行为，请以管理员身份运行 [清单 9-14](chapter9.xhtml#Lis9-14) 中的命令。
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Listing 9-14: Setting and querying the global file SACL'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 9-14：设置和查询全局文件 SACL
- en: We start by building a security descriptor containing a SACL with a single <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE. We then call <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    to set the global SACL for the <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp>
    type. Finally, we query the global SACL to make sure it’s set correctly.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先构建一个包含单个 <samp class="SANS_TheSansMonoCd_W5Regular_11">Audit</samp> ACE
    的安全描述符。然后，我们调用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">File</samp> 类型的全局 SACL。最后，我们查询全局
    SACL 以确保它已正确设置。
- en: 'You can remove the global SACL by passing a security descriptor with a NULL
    SACL to <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>.
    To create this security descriptor, use the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将一个 NULL SACL 的安全描述符传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditSecurity</samp>
    来移除全局 SACL。要创建此安全描述符，请使用以下命令：
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: <samp class="SANS_Futura_Std_Bold_B_11">Worked Examples</samp>
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">实际操作示例</samp>
- en: Let’s wrap up with some worked examples that use the commands you learned about
    in this chapter.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们通过一些实际操作的示例来总结本章学习的命令。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Verifying Audit Access
    Security</samp>
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">验证审计访问安全</samp>
- en: When you’re checking whether malicious code has compromised an untrusted Windows
    system, it’s a good idea to verify that the security settings haven’t been modified.
    One check you might want to perform is determining whether a non-administrator
    user has the access needed to change the audit policy on the system. If a non-administrator
    user can change the policy, they could disable auditing and hide their access
    to sensitive resources.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查恶意代码是否破坏了一个不受信任的 Windows 系统时，最好确认安全设置没有被修改。你可能需要执行的一项检查是确定非管理员用户是否具备更改系统审计策略的权限。如果非管理员用户可以更改该策略，他们就可能禁用审计功能，并隐藏对敏感资源的访问。
- en: We can inspect the audit policy’s security descriptor manually, or do so using
    the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp> PowerShell
    command. Run the commands in [Listing 9-15](chapter9.xhtml#Lis9-15) as an administrator.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以手动检查审计策略的安全描述符，或者使用 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp>
    PowerShell 命令来检查。以管理员身份运行 [Listing 9-15](chapter9.xhtml#Lis9-15) 中的命令。
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Listing 9-15: Performing an access check on the audit policy security descriptor'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Listing 9-15：对审计策略安全描述符执行访问检查
- en: We start by querying for the audit policy security descriptor and setting the
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp> and <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp>
    fields. These fields are required for the access check process, but the security
    descriptor returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp>
    command does not contain them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查询审计策略安全描述符，并设置 <samp class="SANS_TheSansMonoCd_W5Regular_11">Owner</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">Group</samp> 字段。这些字段是访问检查过程所必需的，但从
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtAuditSecurity</samp> 命令返回的安全描述符中并不包含它们。
- en: We can then pass the security descriptor to the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp>
    command to check it against the current administrator token. The result indicates
    the caller has <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    access to the audit policy, which allows them to query the policy but not set
    it without enabling <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将安全描述符传递给 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtGrantedAccess</samp>
    命令，将其与当前管理员令牌进行比较。结果表明，调用者对审计策略拥有 <samp class="SANS_TheSansMonoCd_W5Regular_11">GenericRead</samp>
    访问权限，这使得他们能够查询该策略，但在未启用 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    的情况下，无法修改它。
- en: Finally, we can remove the *Administrators* group from the token by creating
    a filtered token with the <samp class="SANS_TheSansMonoCd_W5Regular_11">LuaToken</samp>
    flag. Running the access check with the filtered token indicates that it has no
    granted access to the audit policy (not even read access). If this second check
    returns a status other than <samp class="SANS_TheSansMonoCd_W5Regular_11">STATUS_ACCESS_DENIED</samp>,
    you can conclude that the default audit policy security descriptor has been changed,
    and it’s worth checking whether this was done intentionally or maliciously.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过创建带有 <samp class="SANS_TheSansMonoCd_W5Regular_11">LuaToken</samp>
    标志的过滤令牌，移除 *Administrators* 组。使用过滤令牌进行访问检查表明，它对审计策略没有授权访问（甚至没有读取权限）。如果第二次检查返回的状态不是
    <samp class="SANS_TheSansMonoCd_W5Regular_11">STATUS_ACCESS_DENIED</samp>，则可以得出结论，默认的审计策略安全描述符已被更改，值得检查是否是故意或恶意的更改。
- en: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">Finding Resources
    with Audit ACEs</samp>
  id: totrans-132
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_Condensed_Oblique_BI_11">查找带有审计 ACE 的资源</samp>
- en: Most resources aren’t configured with a SACL, so you might want to enumerate
    the resources on the system that have one. This can help you understand what resources
    might generate audit log events. [Listing 9-16](chapter9.xhtml#Lis9-16) provides
    a simple example in which we find these resources. Run the commands as an administrator.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数资源没有配置 SACL，因此你可能想要枚举系统上具有 SACL 的资源。这可以帮助你了解哪些资源可能会生成审计日志事件。[示例 9-16](chapter9.xhtml#Lis9-16)提供了一个简单的例子，展示了我们如何找到这些资源。以管理员身份运行命令。
- en: '[PRE18]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Listing 9-16: Finding processes with configured SACLs'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 9-16：查找配置了 SACL 的进程
- en: We focus on <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> objects
    here, but you can apply this same approach to other resource types.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里关注的是 <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> 对象，但你也可以将这种方法应用于其他资源类型。
- en: We first open all processes for <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryLimitedInformation</samp>
    and <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessSystemSecurity</samp>
    access ❶. We apply a filter to the processes, querying for the SACL from the <samp
    class="SANS_TheSansMonoCd_W5Regular_11">Process</samp> object, then returning
    the value of the <samp class="SANS_TheSansMonoCd_W5Regular_11">HasAuditAce</samp>
    property ❷. This property indicates whether the security descriptor has at least
    one audit ACE.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为所有进程打开 <samp class="SANS_TheSansMonoCd_W5Regular_11">QueryLimitedInformation</samp>
    和 <samp class="SANS_TheSansMonoCd_W5Regular_11">AccessSystemSecurity</samp> 访问权限
    ❶。我们对进程应用过滤器，查询来自 <samp class="SANS_TheSansMonoCd_W5Regular_11">Process</samp>
    对象的 SACL，然后返回 <samp class="SANS_TheSansMonoCd_W5Regular_11">HasAuditAce</samp>
    属性的值 ❷。该属性指示安全描述符是否至少具有一个审计 ACE。
- en: We then pipe the results returned from the <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtProcess</samp>
    command into <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>
    to display the SACLs ❸. In this case, there is only a single entry, for the LSASS
    process. We can see that the audit ACE logs an event whenever the LSASS process
    is opened for <samp class="SANS_TheSansMonoCd_W5Regular_11">VmRead</samp> access
    ❹.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将从 <samp class="SANS_TheSansMonoCd_W5Regular_11">Get-NtProcess</samp> 命令返回的结果通过管道传输到
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Format-NtSecurityDescriptor</samp>，以显示
    SACL ❸。在这种情况下，只有一个条目，针对 LSASS 进程。我们可以看到，审计 ACE 会在 LSASS 进程以 <samp class="SANS_TheSansMonoCd_W5Regular_11">VmRead</samp>
    访问权限打开时记录事件 ❹。
- en: This policy is a default audit configuration on Windows, used to detect access
    to the LSASS process. The <samp class="SANS_TheSansMonoCd_W5Regular_11">VmRead</samp>
    access right allows a caller to read the virtual memory of a process, and this
    ACE aims to detect the extraction of the LSASS memory contents, which can include
    passwords and other authentication credentials. If the process is opened for any
    other access right, no audit log entry will be generated.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 该策略是 Windows 上的默认审计配置，用于检测对 LSASS 进程的访问。<samp class="SANS_TheSansMonoCd_W5Regular_11">VmRead</samp>
    访问权限允许调用者读取进程的虚拟内存，而此 ACE 旨在检测 LSASS 内存内容的提取，这可能包括密码和其他认证凭据。如果进程以其他访问权限打开，则不会生成审计日志条目。
- en: <samp class="SANS_Futura_Std_Bold_B_11">Wrapping Up</samp>
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <samp class="SANS_Futura_Std_Bold_B_11">总结</samp>
- en: In this chapter, we covered the basics of security auditing. We started with
    a description of the security event log and the types of log entries you might
    find when auditing resource access. Next, we looked at configuring the audit policy
    and setting advanced audit policies with the <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditPolicy</samp>
    command. We also discussed how Windows controls access to the audit policy and
    the importance of the <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    privilege, used for almost all audit-related configuration.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了安全审计的基础知识。我们首先描述了安全事件日志以及在审计资源访问时可能找到的日志条目类型。接下来，我们查看了如何配置审计策略，并使用
    <samp class="SANS_TheSansMonoCd_W5Regular_11">Set-NtAuditPolicy</samp> 命令设置高级审计策略。我们还讨论了
    Windows 如何控制对审计策略的访问，以及 <samp class="SANS_TheSansMonoCd_W5Regular_11">SeSecurityPrivilege</samp>
    权限的重要性，该权限几乎用于所有与审计相关的配置。
- en: To enable auditing on an object, we must modify the SACL to define rules for
    generating the events enabled by the policy. We walked through examples of generating
    audit events automatically, using the SACL, and manually, during a user-mode access
    check.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用对象的审计，我们必须修改 SACL，以定义生成由策略启用的事件的规则。我们已经演示了如何使用 SACL 自动生成审计事件，以及在用户模式访问检查期间手动生成审计事件的示例。
- en: 'We’ve now covered all aspects of the SRM: security access tokens, security
    descriptors, access checking, and auditing. In the rest of this book, we’ll explore
    the various mechanisms to authenticate to a Windows system.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经涵盖了SRM的所有方面：安全访问令牌、安全描述符、访问检查和审计。在本书的剩余部分，我们将探讨用于验证Windows系统身份的各种机制。
