["```\n     *******************************************************************\n\n     *                         FUNCTION                                *\n\n     *******************************************************************\n\n     undefined demo_stackframe(undefined param_1, undefined4\\. . . \n\n        undefined   AL:1            <RETURN>\n\n        undefined   Stack[0x4]:4    param_1 \n\n        undefined4  Stack[0x8]:4    param_2   XREF[1]:➊0804847f➋(R)➌\n\n        undefined4  Stack[0xc]:4    param_3   XREF[1]:  08048479(R) \n\n        undefined4  Stack[-0x10]:4  local_10  XREF[1]:  0804847c(W)  \n\n        undefined4  Stack[-0x14]:4  local_14  XREF[2]:  08048482(W), \n\n                                                        08048493(R)  \n\n        undefined4  Stack[-0x18]:4  local_18  XREF[2]:  08048485(W), \n\n                                                        08048496(R)  \n\n        undefined1  Stack[-0x58]:1  local_58  XREF[1]:  0804848c(W)  \n\n     demo_stackframe                          XREF[4]:  Entry Point(*),  \n\n                                                        main:080484be(c)➍, \n\n                                                        080485e4, 08048690(*)  \n```", "```\n     ********************************************************************\n\n     *                         FUNCTION                                 *\n\n     ********************************************************************\n\n     undefined4 __stdcall main(void)\n\n        undefined4  EAX:4           <RETURN>\n\n        undefined4  Stack[-0x8]:4   ptr      ➊XREF[3]:  00401014(W),\n\n                                                         0040101b(R),\n\n                                                         00401026(R)\n\n     main                                    ➋XREF[1]:  entry:0040121e(c)\n```", "```\n0040121e  CALL   main\n```", "```\n004011fe  JZ     LAB_00401207➊\n\n00401200  PUSH   EAX\n\n00401201  CALL   __amsg_exit\n\n00401206  POP    ECX\n\n        LAB_00401207                           XREF[1]: 004011fe(j)➋\n\n00401207  MOV    EAX,[DAT_0040acf0]\n```", "```\nint read_it;            // integer variable read in main\n\nint write_it;           // integer variable written 3 times in main\n\nint ref_it;             // integer variable whose address is taken in main\n\nvoid callflow() {}      // function called twice from main\n\nint main() {\n\n    int *ptr = &ref_it; // results in a \"pointer\" style data reference (*)\n\n    *ptr = read_it;     // results in a \"read\" style data reference (R)\n\n    write_it = *ptr;    // results in a \"write\" style data reference (W)\n\n    callflow();         // results in a \"call\" style code reference (c)\n\n    if (read_it == 3) { // results in \"jump\" style code reference (j)\n\n        write_it = 2;   // results in a \"write\" style data reference (W)\n\n    }\n\n    else {              // results in an \"jump\" style code reference (j)\n\n        write_it = 1;   // results in a \"write\" style data reference (W)\n\n    }\n\n    callflow();         // results in an \"call\" style code reference (c)\n\n}\n```", "```\n     undefined4 __stdcall main(void)\n\n        undefined4 EAX:4 <RETURN>\n\n        undefined4 Stack[-0x8]:4 ptr          XREF[3]:  00401014(W),\n\n                                                        0040101b(R),\n\n                                                        00401026(R)\n\n     main                                     XREF[1]:  entry:0040121e(c)\n\n00401010  PUSH   EBP\n\n00401011  MOV    EBP,ESP\n\n00401013  PUSH   ECX\n\n00401014  MOV➊  dword ptr [EBP + ptr],ref_it\n\n0040101b  MOV    EAX,dword ptr [EBP + ptr]\n\n0040101e  MOV➋  ECX,dword ptr [read_it]\n\n00401024  MOV    dword ptr [EAX]=>ref_it,ECX\n\n00401026  MOV    EDX,dword ptr [EBP + ptr]\n\n00401029  MOV    EAX=>ref_it,dword ptr [EDX]\n\n0040102b  MOV    [write_it],EAX\n\n00401030  CALL➌ callflow\n\n00401035  CMP    dword ptr [read_it],3\n\n0040103c  JNZ    LAB_0040104a\n\n0040103e  MOV    dword ptr [write_it],2\n\n00401048  JMP➍  LAB_00401054\n\n        LAB_0040104a                          XREF[1]:➎0040103c(j)\n\n0040104a  MOV   dword ptr [write_it],1\n\n LAB_00401054                          XREF[1]:  00401048(j)\n\n00401054  CALL   callflow\n\n00401059  XOR    EAX,EAX\n\n0040105b  MOV    ESP,EBP\n\n0040105d  POP    EBP\n\n0040105e  RET➏\n```", "```\n     undefined __stdcall callflow(void)\n\n        undefined AL:1 <RETURN>\n\n     callflow                                 XREF[4]:  0040010c(*),\n\n                                                        004001e4(*),\n\n                                                        main:00401030(c),\n\n                                                        main:00401054(c)\n\n00401000  PUSH   EBP\n\n00401001  MOV    EBP,ESP\n\n00401003  POP    EBP\n\n00401004  RET\n```", "```\n0040010c  00 10 00 00 ibo32     callflow               BaseOfCode\n\n               .  .  .\n\n004001e4  00 10 00 00 ibo32     callflow               VirtualAddress\n```", "```\n        read_it                               XREF[2]:  main:0040101e(R),\n\n                                                        main:00401035(R)\n\n0040b720 undefined4    ??\n\n        write_it                              XREF[3]:  main:0040102b(W),\n\n                                                        main:0040103e(W),\n\n                                                        main:0040104a(W)\n\n 0040b724    ??         ??\n\n0040b725    ??         ??\n\n0040b726    ??         ??\n\n0040b727    ??         ??\n\n        ref_it                                XREF[3]:  main:00401014(*),\n\n                                                        main:00401024(W),\n\n                                                        main:00401029(R)\n\n0040b728 undefined4    ??\n```", "```\n           SubClass::vftable           XREF[1]:  SubClass_Constructor:00401062(*)\n\n   00408148 void * SubClass::vfunc1 vfunc1\n\n➊ 0040814c void * BaseClass::vfunc2 vfunc2\n\n   00408150 void * SubClass::vfunc3 vfunc3\n\n   00408154 void * BaseClass::vfunc4 vfunc4\n\n   00408158 void * SubClass::vfunc5 vfunc5\n```", "```\n     **************************************************************\n\n     *                          FUNCTION                          *\n\n     **************************************************************\n\n     undefined __stdcall vfunc2(void)\n\n        undefined AL:1 <RETURN>\n\n        undefined4 Stack[-0x8]:4 local_8      XREF[1]:  00401024(W)\n\n     BaseClass::vfunc2                        XREF[2]:  00408138(*)➊,\n\n                                                        0040814c(*)➋\n\n00401020  PUSH   EBP\n\n00401021  MOV    EBP,ESP\n\n00401023  PUSH   ECX\n\n00401024  MOV    dword ptr [EBP + local_8],ECX\n\n00401027  MOV    ESP,EBP\n\n00401029  POP    EBP\n\n0040102a  RET\n```", "```\n        undefined4 Stack[-0x10]:4 local_10    XREF[1]:  0804847c(W)  \n\n        undefined4 Stack[-0x14]:4 local_14    XREF[2]:➊08048482(W), \n\n                                                        08048493(R)  \n```", "```\n0001072e  PUSH   EBP\n\n0001072f  MOV    EBP,ESP\n\n00010731  SUB    ESP,8\n\n00010734  MOV    EAX,dword ptr [EBP + param_1]➊\n\n00010737  MOV    EAX,dword ptr [EAX]\n\n00010739  ADD    EAX,8\n\n0001073c  MOV    EAX,dword ptr [EAX]\n\n0001073e  SUB    ESP,12\n\n00010741  PUSH   dword ptr [EBP + param_1]\n\n00010744  CALL➋ EAX\n\n00010746  ADD    ESP,16\n\n00010749  NOP\n\n0001074a  LEAVE\n\n0001074b  RET\n```"]