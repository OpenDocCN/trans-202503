- en: '**17**'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**17**'
- en: '**DENIAL-OF-SERVICE ATTACKS**'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**拒绝服务攻击**'
- en: '![image](Images/common01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![image](Images/common01.jpg)'
- en: 'On October 21, 2016, internet users woke up and found that many of their favorite
    websites were inaccessible: Twitter, Spotify, Netflix, GitHub, Amazon, and many
    others all appeared to be offline. The root cause was an attack against a DNS
    provider. A massive wave of DNS lookup requests had brought the popular DNS provider
    Dyn to its knees. It took most of the day—during which two more huge waves of
    DNS lookups occurred—before services were fully restored.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2016年10月21日，互联网用户醒来后发现他们许多喜爱的网站无法访问：Twitter、Spotify、Netflix、GitHub、Amazon等许多网站似乎都无法连接。根本原因是对一个DNS提供商的攻击。大量的DNS查询请求使得受欢迎的DNS提供商Dyn瘫痪。直到大部分的一天过去——期间发生了两波巨大的DNS查询请求——服务才完全恢复。
- en: The scale and impact of the outage were unprecedented. (The only incident of
    comparable impact occurred when a shark chomped through an undersea internet cable
    and the whole of Vietnam went offline for a while.) It was, however, just the
    latest incarnation of the common and increasingly dangerous *denial-of-service
    (DoS)* attack.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这次中断的规模和影响前所未有。（唯一一次可比的事件发生在一只鲨鱼咬断了一条海底互联网电缆，导致整个越南一度无法联网。）然而，这只是拒绝服务（DoS）攻击日益常见且日益危险的最新体现。
- en: 'A denial-of-service attack is different from most types of vulnerabilities
    discussed in this book, as the intent of the attack isn’t to compromise a system
    or website: the intent is to simply make it unavailable to other users. Generally,
    this is achieved by flooding the site with inbound traffic, so all server resources
    are exhausted. This chapter breaks down some of the more common techniques used
    in denial-of-service attacks and presents various ways to defend against them.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 拒绝服务攻击不同于本书中讨论的大多数漏洞类型，因为该攻击的目的不是要攻陷系统或网站：其目的仅仅是使其无法为其他用户提供服务。通常，这是通过向网站发送大量流量来实现的，直到所有服务器资源被耗尽。本章将分析一些常见的拒绝服务攻击技术，并提出防御它们的各种方法。
- en: '**Denial-of-Service Attack Types**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拒绝服务攻击类型**'
- en: 'Responding to a network request generally requires more processing power than
    sending one. When a web server handles an HTTP request, for example, it has to
    parse the request, run database queries, write data to the logs, and construct
    the HTML to be returned. The user agent simply has to generate the request containing
    three pieces of information: the HTTP verb, the IP address it is being sent to,
    and the URL. Hackers use this asymmetry to overwhelm servers with network requests
    so they are unable to respond to legitimate users.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 响应一个网络请求通常比发送一个请求需要更多的处理能力。例如，当一个Web服务器处理一个HTTP请求时，它必须解析请求、运行数据库查询、将数据写入日志，并构建返回的HTML内容。用户代理只需生成包含三部分信息的请求：HTTP动词、发送的IP地址和URL。黑客利用这种不对称性，通过发送大量网络请求来压垮服务器，使其无法响应合法用户的请求。
- en: Hackers have discovered ways to launch denial-of-service attacks at every level
    of the network stack, not just over HTTP. Given how successful they have been
    in the past, many more methods will likely be discovered in the future. Let’s
    look at some of the tools in an attacker’s toolkit.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客们已经发现了在网络堆栈的各个层面发起拒绝服务攻击的方法，而不仅仅是通过 HTTP。鉴于他们过去的成功，未来可能会发现更多的方法。让我们来看看攻击者工具包中的一些工具。
- en: '***Internet Control Message Protocol Attacks***'
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***互联网控制消息协议攻击***'
- en: 'The *Internet Control Message Protocol (ICMP)* is used by servers, routers,
    and command line tools to check whether a network address is online. The protocol
    is simple: a request is transmitted to an IP address, and if the responding server
    is online, it will send back a confirmation that it is online. If you have ever
    used the `ping` utility to check whether a server is accessible, you have used
    ICMP under the hood.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*互联网控制消息协议（ICMP）* 被服务器、路由器和命令行工具用于检查网络地址是否在线。这个协议非常简单：请求会发送到一个IP地址，如果响应的服务器在线，它会返回确认信息。假如你曾使用过`ping`工具来检查服务器是否可达，那么你就曾在背后使用了ICMP协议。'
- en: ICMP is the simplest of the internet protocols, so inevitably, it was the first
    to be used in malicious ways. A *ping flood* attempts to overwhelm a server by
    sending an endless stream of ICMP requests, and can be initiated simply by a few
    lines of code. A slightly more sophisticated attack is the *ping of death* attack,
    which sends corrupt ICMP packets in an attempt to crash a server. This type of
    attack takes advantage of older software that does not correctly do bounds checking
    in incoming ICMP packets.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ICMP 是最简单的互联网协议，因此不可避免地，它是第一个被恶意使用的协议。*Ping 洪水*试图通过发送源源不断的 ICMP 请求来压倒服务器，且只需几行代码即可发起。稍微复杂一些的攻击是
    *死神 Ping* 攻击，它发送损坏的 ICMP 数据包，试图使服务器崩溃。这种攻击利用了旧版软件在接收 ICMP 数据包时未正确进行边界检查的漏洞。
- en: '***Transmission Control Protocol Attacks***'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***传输控制协议攻击***'
- en: Most ICMP-based attacks can be defused by modern network interfaces, so attackers
    have moved higher up the network stack to the TCP, which underpins most internet
    communication.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数基于 ICMP 的攻击可以通过现代网络接口来化解，因此攻击者已将目标转移到更高层的网络协议栈，即 TCP，后者是大多数互联网通信的基础。
- en: A TCP conversation begins with the TCP client sending a `SYN` (synchronize)
    message to the server, which is then expected to reply with a `SYN-ACK` (synchronize
    acknowledgement) response. The client should then complete the handshake by sending
    a final `ACK` message to the server. By flooding a server with `SYN` messages—a
    *SYN flood*—without completing the TCP handshake, hacking tools leave a server
    with a large number of “half-open” connections, exhausting the connection pool
    for legitimate clients. Then, when a legitimate client attempts to connect, the
    server rejects the connection.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 会话从 TCP 客户端向服务器发送一个 `SYN`（同步）消息开始，服务器随后应该回复一个 `SYN-ACK`（同步确认）响应。然后，客户端通过向服务器发送最后一个
    `ACK` 消息来完成握手。通过用 `SYN` 消息淹没服务器——即 *SYN 洪水*——而不完成 TCP 握手，黑客工具会使服务器留下大量“半开”连接，从而耗尽合法客户端的连接池。接着，当合法客户端尝试连接时，服务器会拒绝连接。
- en: '***Application Layer Attacks***'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***应用层攻击***'
- en: Application layer attacks against a web server abuse the HTTP protocol. The
    *Slowloris* attack opens many HTTP connections to a server, and keeps those connections
    open by periodically sending partial HTTP requests, thus exhausting the server’s
    connection pool. The *R-U-Dead-Yet? (RUDY)* attack sends never-ending `POST` requests
    to a server, with arbitrarily long `Content-Length` header values, to keep the
    server busy reading meaningless data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 Web 服务器的应用层攻击滥用 HTTP 协议。*Slowloris* 攻击通过向服务器打开多个 HTTP 连接，并通过定期发送部分 HTTP 请求保持这些连接，从而耗尽服务器的连接池。*R-U-Dead-Yet?
    (RUDY)* 攻击向服务器发送永无止境的 `POST` 请求，并带有任意长的 `Content-Length` 头部值，以使服务器忙于读取无意义的数据。
- en: Hackers have also found ways to take web servers offline by exploiting particular
    HTTP endpoints. Uploading *zip bombs*—corrupt archive files that grow exponentially
    in size when expanded—to a file upload function can exhaust the server’s available
    disk space. Any URL that performs deserialization—converting the contents of HTTP
    requests to in-memory code objects—is potentially vulnerable too. One example
    of this type of attack is an XML bomb, which you looked at in [Chapter 15](ch15.xhtml#ch15).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 黑客还发现了通过利用特定 HTTP 端点将 Web 服务器下线的方法。上传 *zip bomb*——扩展时会呈指数增长的损坏归档文件——到文件上传功能中，可以耗尽服务器的可用磁盘空间。任何执行反序列化——将
    HTTP 请求的内容转换为内存中的代码对象——的 URL 也可能是潜在的漏洞。此类攻击的一个例子是 XML bomb，如你在[第 15 章](ch15.xhtml#ch15)中看到的那样。
- en: '***Reflected and Amplified Attacks***'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***反射和放大攻击***'
- en: One difficulty in launching an effective denial-of-service attack is finding
    enough computing power to generate malicious traffic. Hackers overcome this limitation
    by using a third-party service to generate the traffic for them. By sending malicious
    requests to a third party, with a spoofed return address belonging to their intended
    victim, hackers *reflect* the responses to their target, potentially overwhelming
    the server responding to traffic at that address. Reflected attacks also disguise
    the original source of the attack, making them harder to pin down. If the third-party
    service replies with larger or more numerous responses than the initial request,
    the larger responses *amplify* the attack power.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 启动有效的拒绝服务攻击的一个难点是找到足够的计算能力来生成恶意流量。黑客通过使用第三方服务来生成流量，从而克服这一限制。通过向第三方发送恶意请求，并伪造返回地址为他们的目标受害者，黑客*反射*响应到他们的目标，可能会压垮响应流量的服务器。反射攻击还会掩盖攻击的原始来源，使得追踪变得更加困难。如果第三方服务的回复比初始请求更大或更多，较大的响应将*放大*攻击的威力。
- en: One of the largest denial-of-service attacks to date was committed using reflection.
    A single attacker was able to generate 1.3 terabytes of data *per second* and
    point it at the GitHub website in 2018\. The hacker achieved this by locating
    a large number of insecure Memcached servers and sending them *User Datagram Protocol
    (UDP)* requests signed with the IP address of the GitHub servers. Each response
    was around 50 times larger than the original request, effectively multiplying
    the attacker’s computing power by the same factor.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止最大的一次拒绝服务攻击是通过反射实现的。2018年，一名攻击者成功生成了每秒1.3TB的数据，并将其指向GitHub网站。黑客通过定位大量不安全的Memcached服务器，并向它们发送带有GitHub服务器IP地址的*用户数据报协议（UDP）*请求来实现这一点。每个响应大约是原始请求的50倍，实际上将攻击者的计算能力放大了相同的倍数。
- en: '***Distributed Denial-of-Service Attacks***'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分布式拒绝服务攻击***'
- en: If a denial-of-service attack is launched from a single IP address, it is relatively
    easy to blacklist traffic from that IP and stop the attack. Modern denial-of-service
    attacks, such as the 2018 attack on GitHub, come from a multitude of cooperating
    sources—a *distributed denial-of-service (DDoS)* attack. In addition to using
    reflection, these attacks are usually launched from a *botnet*, a network of malware
    bots that have infected various computers and internet-connected devices, and
    that can be controlled by an attacker. Because many types of devices connect to
    the internet these days—thermostats, refrigerators, cars, doorbells, hairbrushes—and
    are prone to having security vulnerabilities, there are a lot of places for these
    bots to hide.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果拒绝服务攻击是从单一IP地址发起的，那么将该IP的流量列入黑名单并停止攻击是相对容易的。现代的拒绝服务攻击，如2018年针对GitHub的攻击，来自多个协作源——即*分布式拒绝服务（DDoS）*攻击。除了利用反射，这些攻击通常是从*僵尸网络*发起的，僵尸网络是由恶意软件控制的各种计算机和互联网连接设备组成的网络，攻击者可以控制这些设备。如今，许多类型的设备都连接到互联网——恒温器、冰箱、汽车、门铃、发刷——而且这些设备容易出现安全漏洞，成为这些僵尸程序的藏身之地。
- en: '***Unintentional Denial-of-Service Attacks***'
  id: totrans-23
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***无意的拒绝服务攻击***'
- en: Not all surges in internet traffic are malicious. It is common to see a website
    go viral and experience an unexpectedly large number of visitors in a short time,
    effectively taking it offline for a while because it wasn’t built to handle such
    a high volume of traffic. The Reddit *hug of death* frequently takes smaller websites
    offline when they manage to reach the front page of the social news site.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的互联网流量激增都是恶意的。网站突然变得热门，短时间内吸引大量访问者，导致网站瘫痪，这是很常见的情况，因为这些网站并没有设计来应对如此高的流量。Reddit的*死亡之拥*常常会使得较小的网站在其登上社交新闻网站的首页时被迫下线。
- en: '**Denial-of-Service Attack Mitigation**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**拒绝服务攻击缓解**'
- en: Defending yourself against a major denial-of-service attack is expensive and
    time-consuming. Fortunately, you are unlikely to be the target of an attack the
    size of the one that took Dyn offline in 2016\. Such attacks require extensive
    planning, and only a handful of adversaries would be able to pull them off. You
    are unlikely to see terabytes of data a second hitting your recipe blog!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 防御一次重大拒绝服务攻击既昂贵又耗时。幸运的是，你不太可能成为像2016年使Dyn公司瘫痪那样规模的攻击的目标。此类攻击需要广泛的计划，只有少数敌人能够实施。你不太可能在你的食谱博客上看到每秒数TB的数据流量！
- en: 'However, smaller denial-of-service attacks combined with extortion requests
    *do* happen, so it pays to put in some safeguards. The following sections describe
    some of the countermeasures you should consider using: firewalls and intrusion
    prevention systems, DDoS prevention services, and highly scalable website technologies.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，较小的拒绝服务攻击结合勒索请求*确实*发生，因此进行一些防护措施是非常值得的。以下部分描述了一些你应考虑使用的对策：防火墙和入侵防御系统、DDoS防护服务以及高度可扩展的网站技术。
- en: '***Firewalls and Intrusion Prevention Systems***'
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***防火墙和入侵防御系统***'
- en: All modern server operating systems come with a *firewall*—software that monitors
    and controls incoming and outgoing network traffic based on predetermined security
    rules. Firewalls allow you to determine which ports should be open to incoming
    traffic, and to filter out traffic from IP addresses via *access control rules*.
    Firewalls are placed at the perimeter of an organization’s network, to filter
    out bad traffic before it hits internal servers. Modern firewalls block most ICMP-based
    attacks and can be used to blacklist individual IP addresses, an effective way
    of shutting down traffic from a single source.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代服务器操作系统都配备了*防火墙*——一种基于预定安全规则，监控和控制进出网络流量的软件。防火墙使你能够确定哪些端口应该允许传入流量，并通过*访问控制规则*过滤掉来自特定IP地址的流量。防火墙被放置在组织网络的边界，用于在流量进入内部服务器之前过滤掉不良流量。现代防火墙能够阻止大多数基于ICMP的攻击，并可用于将单个IP地址列入黑名单，这是一种有效的方式来阻止来自单一来源的流量。
- en: '*Application firewalls* operate at a higher level of the network stack, acting
    as proxies that scan HTTP and other internet traffic before it passes to the rest
    of the network. An application firewall scans incoming traffic for corrupted or
    malicious requests, and rejects anything that matches a malicious signature. Because
    signatures are kept up-to-date by vendors, this approach can block many types
    of hacking attempts (for example, attempts to perform SQL injection), as well
    as mitigating denial-of-service attacks. In addition to open source implementations
    such as ModSecurity, commercial application firewall vendors exist (for example,
    Norton and Barracuda Networks), some of which sell hardware-based solutions.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*应用防火墙* 在网络堆栈的更高层运行，充当代理，扫描HTTP及其他互联网流量，在流量进入网络其他部分之前进行检查。应用防火墙扫描传入流量，检测是否存在损坏或恶意请求，并拒绝匹配恶意签名的任何内容。由于签名由供应商持续更新，这种方法能够阻止许多类型的黑客攻击（例如，SQL注入攻击尝试），并有效减轻拒绝服务攻击。此外，除了像ModSecurity这样的开源实现外，还有商业应用防火墙供应商（例如，Norton和Barracuda
    Networks），其中一些提供基于硬件的解决方案。'
- en: '*Intrusion prevention systems (IPSs)* take a more holistic approach to protecting
    a network: in addition to implementing firewalls and matching signatures, they
    look for statistical anomalies in network traffic and scan files on disk for unusual
    changes. An IPS is usually a serious investment but can protect you very effectively.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*入侵防御系统（IPS）* 对保护网络采取更全面的方法：除了实施防火墙和匹配签名外，它们还会寻找网络流量中的统计异常，并扫描硬盘上的文件，查找不寻常的变化。IPS通常需要较大的投资，但能够提供非常有效的保护。'
- en: '***Distributed Denial-of-Service Protection Services***'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***分布式拒绝服务保护服务***'
- en: Network packets in a sophisticated denial-of-service attack will usually be
    indistinguishable from regular packets. The traffic is valid; only the intent
    and volume of traffic is malicious. This means firewalls cannot filter out the
    packets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的拒绝服务攻击中，网络数据包通常与常规数据包无法区分。流量是有效的；只有流量的意图和量才是恶意的。这意味着防火墙无法筛选出这些数据包。
- en: Numerous companies offer protection against distributed denial-of-service attacks,
    usually at a significant cost. When you integrate with a DDoS solutions provider,
    you route all incoming traffic through its data centers, where it scans and blocks
    anything that looks malicious. Because the solutions provider has a global view
    of malicious internet activity and a massive amount of available bandwidth, it
    can use heuristics to prevent any harmful traffic from reaching you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司提供分布式拒绝服务攻击的保护，通常费用较高。当你与DDoS解决方案供应商集成时，你将所有传入流量通过其数据中心，这里会扫描并拦截任何看起来恶意的流量。由于解决方案供应商对全球恶意互联网活动有全面的了解，并且拥有大量可用带宽，它可以使用启发式方法防止任何有害流量到达你。
- en: DDoS protection is often offered by CDNs, because they have geographically dispersed
    data centers and often already host static content for their clients. If the bulk
    of your requests are already being served by content hosted on a CDN, it doesn’t
    take too much extra effort to route the remainder of your traffic through its
    data centers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DDoS保护通常由CDN提供，因为它们拥有地理上分布的数据中心，并且通常已经为客户托管静态内容。如果大部分请求已经由托管在CDN上的内容处理，那么将剩余的流量通过其数据中心路由也不会花费太多额外的精力。
- en: '***Building for Scale***'
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '***构建可扩展性***'
- en: In many ways, being the target of a denial-of-service attack is indistinguishable
    from having many visitors on your website at once. You can protect yourself against
    many attempted denial-of-service attacks by being ready to handle large surges
    in traffic. Building for scale is a big subject—whole books have been written
    on the topic, and it’s an active area of research. Some of the most impactful
    approaches you should look into are offloading static content, caching database
    queries, using asynchronous processing for long-running tasks, and deploying to
    multiple web servers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，遭受拒绝服务攻击的情形与网站同时有很多访客是无法区分的。通过准备应对大流量的激增，你可以有效防止许多拒绝服务攻击。构建可扩展性是一个庞大的话题——这方面已经写了许多书籍，且它是一个活跃的研究领域。你应该关注的一些最有效的方法包括：转移静态内容，缓存数据库查询，使用异步处理长时间运行的任务，以及部署多个Web服务器。
- en: CDNs offload the burden of serving static content—such as images and font files—to
    a third party. Using a CDN significantly improves the responsiveness of your site
    and reduces the load on your server. CDNs are easy to integrate, cost-efficient
    for most websites, and will significantly reduce the amount of network requests
    your web servers have to handle.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CDN将提供静态内容（如图片和字体文件）的负担转移给第三方。使用CDN显著提高了网站的响应速度，并减少了服务器的负载。CDN易于集成，对大多数网站来说具有成本效益，并且能显著减少Web服务器需要处理的网络请求量。
- en: 'Once you offload static content, database access calls typically become the
    next bottleneck. Effective *caching* can prevent your database from becoming overloaded
    in the event of a traffic surge. Cached data can be stored on disk, in memory,
    or in a shared memory cache like Redis or Memcached. Even the browser can help
    with caching: setting a `Cache-Control` header on a resource (for example, an
    image) tells the browser to store a local copy of the resource and not request
    it again until a configurable future date.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将静态内容转移出去，数据库访问调用通常会成为下一个瓶颈。有效的*缓存*可以防止数据库在流量激增时过载。缓存的数据可以存储在磁盘、内存中，或者在像Redis或Memcached这样的共享内存缓存中。甚至浏览器也可以帮助缓存：在资源（例如图片）上设置`Cache-Control`头，告诉浏览器存储资源的本地副本，并在可配置的未来日期之前不再请求它。
- en: Offloading long-running tasks to a *job queue* will help your web server respond
    quickly when traffic ramps up. This is an approach to web architecture that moves
    long-running jobs (such as generating large download files or sending email) to
    background *worker* processes. These workers are deployed separately from the
    web server, which creates the jobs and puts them on the queue. The workers take
    jobs off the queue and handle them one at a time, notifying the web server when
    the job is completed. Have a look at the Netflix technology blog (*[https://medium.com/@NetflixTechBlog/](https://medium.com/@NetflixTechBlog/)*)
    for an example of a massively scalable system built on this type of principle.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将长时间运行的任务转移到*作业队列*中，将帮助你的Web服务器在流量激增时迅速响应。这是一种Web架构方法，它将长时间运行的任务（例如生成大文件或发送电子邮件）移到后台的*工作进程*中。这些工作进程与Web服务器分开部署，Web服务器创建任务并将它们放入队列中。工作进程从队列中取出任务并逐个处理，任务完成后通知Web服务器。可以查看Netflix技术博客（*[https://medium.com/@NetflixTechBlog/](https://medium.com/@NetflixTechBlog/)）*，该博客展示了基于这种原则构建的大规模可扩展系统。
- en: Finally, you should have a deployment strategy that allows you to scale out
    the number of web servers relatively quickly, so you can ramp up your computing
    power during busy periods. An Infrastructure as a Service (IaaS) provider like
    Amazon Web Services (AWS) makes it easy to deploy the same server image multiple
    times behind a load balancer. Platforms like Heroku make it as simple as moving
    a slider on their web dashboard! Your hosting provider will have some method of
    monitoring traffic volume, and tools like Google Analytics can be used to track
    when and how many sessions are open on your site. Then you need only to increase
    the number of servers when monitoring thresholds are hit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你应该有一个部署策略，允许你相对快速地扩展 Web 服务器的数量，以便在繁忙时期提升计算能力。像 Amazon Web Services (AWS)
    这样的基础设施即服务 (IaaS) 提供商让你可以轻松地在负载均衡器后多次部署相同的服务器镜像。像 Heroku 这样的平台使得在其 Web 仪表板上移动滑块就能做到这一点！你的托管服务提供商会有某种方法来监控流量量，像
    Google Analytics 这样的工具可以用来追踪你网站上有多少会话是何时开启的。然后，当监控阈值被触发时，你只需要增加服务器数量即可。
- en: '**Summary**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Attackers use denial-of-service attacks to make a site unavailable to legitimate
    users by flooding it with a large volume of traffic. Denial-of-service attacks
    can happen at any layer of the network stack, and can be reflected or amplified
    by third-party services. Frequently, they are launched as a distributed attack
    from a botnet controlled by the attacker.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者利用拒绝服务攻击通过大量流量将网站淹没，使其无法为合法用户提供服务。拒绝服务攻击可以发生在网络栈的任何层次，并且可以通过第三方服务进行反射或放大。通常，它们作为来自攻击者控制的僵尸网络的分布式攻击发起。
- en: Simple denial-of-service attacks can be defused by sensible firewall settings.
    Application firewalls and intrusion prevention systems help protect you against
    more-sophisticated attacks. The most comprehensive (and hence most expensive)
    protection comes from distributed denial-of-service attack solution providers,
    which will filter out all bad traffic before it hits your network.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的拒绝服务攻击可以通过合理的防火墙设置来化解。应用防火墙和入侵防御系统有助于防范更为复杂的攻击。最全面（因此也是最昂贵）的保护来自分布式拒绝服务攻击解决方案提供商，它们会在恶意流量到达你的网络之前将其过滤掉。
- en: All types of denial-of-service attacks—including inadvertent ones, when you
    suddenly see a surge of new visitors—can be mitigated by building your site to
    scale well. Content delivery networks alleviate the burden of serving static content
    from your site, and effective caching prevents your database from being a bottleneck.
    Moving long-running processes to a job queue will keep your web servers running
    efficiently at full capacity. Active traffic monitoring, and the ability to easily
    scale up the number of web servers, will prepare you well for busy periods.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 各种类型的拒绝服务攻击——包括意外的攻击，当你突然看到大量新访客时——都可以通过构建能够良好扩展的网站来缓解。内容分发网络减轻了从你的网站提供静态内容的负担，且有效的缓存能够防止数据库成为瓶颈。将长时间运行的进程移至任务队列，将使你的
    Web 服务器能够高效运行并达到满负荷。积极的流量监控以及轻松扩展 Web 服务器数量的能力，将为你在繁忙时期做好充分准备。
- en: That concludes all the individual vulnerabilities you will be looking at in
    this book! The final chapter summarizes the major security principles covered
    over the course of the book and recaps the individual vulnerabilities and how
    to protect against them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中你将要查看的所有个体漏洞已经讲解完毕！最后一章总结了本书中涉及的主要安全原则，并回顾了各个漏洞以及如何防范它们。
