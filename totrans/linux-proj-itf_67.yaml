- en: Appendix C. Casting the `NULL` Pointer
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录C. 转换`NULL`指针
- en: 'Consider the following call to the variadic function *execl()*:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下对可变参数函数*execl()*的调用：
- en: '[PRE0]'
  id: totrans-2
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A *variadic function* is one that takes a variable number of arguments or arguments
    of varying types.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*可变参数函数*是指接受可变数量或类型不定的参数的函数。'
- en: Whether the cast is required before the `NULL` in cases like this is the source
    of some confusion. While we can often get away without the cast, the C standards
    require it; failure to include it may lead an application to break on some systems.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 是否需要在`NULL`前进行类型转换，是一些混淆的根源。虽然我们在很多情况下可以不使用类型转换，但C标准要求必须使用类型转换；如果不包含转换，可能会导致应用程序在某些系统上崩溃。
- en: '`NULL` is typically defined as either 0 or as *(void *) 0*. (The C standards
    allow other definitions, but they are essentially equivalent to one of these two
    possibilities.) The main reason casts are needed is that `NULL` is allowed to
    be defined as 0, so this is the case we examine first.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '`NULL`通常被定义为0或*(void *) 0*。（C标准允许其他定义，但它们本质上等价于这两种可能性之一。）需要类型转换的主要原因是，`NULL`允许定义为0，因此我们首先讨论这种情况。'
- en: 'The C preprocessor translates `NULL` to 0 before the source code is passed
    to the compiler. The C standards specify that the integer constant 0 may be used
    in any context where a pointer may be used, and the compiler will ensure that
    this value is treated as a null pointer. In most cases, everything is fine, and
    we don’t need to worry about casts. We can, for example, write code such as the
    following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: C预处理器在源代码传递给编译器之前，会将`NULL`转换为0。C标准规定，整数常量0可以在任何可能使用指针的上下文中使用，编译器将确保该值被视为空指针。在大多数情况下，一切正常，我们无需担心类型转换。例如，我们可以写出如下代码：
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The above assignments work because the compiler can determine that a pointer
    value is required on the right-hand side of the assignment, and it will convert
    the value 0 to a null pointer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上述赋值之所以有效，是因为编译器可以确定赋值右侧需要一个指针值，并会将值0转换为空指针。
- en: 'Similarly, for functions with prototypes specifying a fixed argument list,
    we can specify either 0 or `NULL` for a pointer argument, to indicate that a null
    pointer should be passed to the function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于具有固定参数列表的函数，我们可以为指针参数指定0或`NULL`，以表示应传递一个空指针给函数：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If we are passing a null pointer to an old-style, nonprototyped C function,
    then all of the arguments given here about the need to appropriately cast 0 or
    `NULL` also apply, regardless of whether the argument is part of a variadic argument
    list.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要传递一个空指针给一个旧式的、没有原型的C函数，那么关于需要适当地转换0或`NULL`的所有论点仍然适用，无论该参数是否是可变参数列表的一部分。
- en: 'Because casting is not required in any of the above examples, one might conclude
    that it is never required. But this is wrong. The need for casting arises when
    specifying a null pointer as one of the varying arguments in a call to a variadic
    function such as *execl()*. To realize why this is necessary, we need to be aware
    of the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因为在上述示例中不需要类型转换，有人可能会得出结论认为类型转换永远不需要。但这是错误的。当在调用像*execl()*这样的可变参数函数时，如果指定了空指针作为其中一个可变参数，类型转换是必须的。为了理解为何需要这样做，我们需要知道以下几点：
- en: The compiler can’t determine the expected types of the varying arguments of
    a variadic function.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器无法确定可变参数函数中各个参数的预期类型。
- en: The C standards don’t require that a null pointer is actually represented in
    the same way as the integer constant 0\. (In theory, a null pointer could be represented
    by any bit pattern that wasn’t the same as a valid pointer.) Nor do the standards
    even require that a null pointer is the same size as the integer constant 0\.
    All that the standards require is that when the integer constant 0 is found in
    a context where a pointer is expected, the 0 should be interpreted as a null pointer.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C标准并不要求空指针必须以与整数常量0相同的方式表示。（理论上，空指针可以通过任何与有效指针不同的位模式表示。）标准也并未要求空指针的大小与整数常量0相同。标准只要求，在期望指针的上下文中出现整数常量0时，0应被解释为空指针。
- en: 'Consequently, it is wrong to write either of the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，写出以下任意一种情况都是错误的：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is an error because the compiler will pass the integer constant 0 to *execl()*,
    and there is no guarantee that this is equivalent to a null pointer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个错误，因为编译器会将整数常量0传递给*execl()*，但无法保证这与空指针等价。
- en: 'In practice, we can often get away without the cast, since, on many C implementations
    (e.g., Linux/x86-32), the representations of the integer (*int*) constant 0 and
    the null pointer are the same. However, there are implementations where they are
    not—for example, where the size of a null pointer is larger than the size of the
    integer constant 0—so that in the above examples, *execl()* is likely to receive
    some random bits adjacent to the integer 0, and the resulting value will be interpreted
    as a random (nonnull) pointer. Omitting the cast leads to programs breaking when
    ported to such implementations. (On some of the aforementioned implementations,
    `NULL` is defined as the *long* integer constant *0L*, and *long* and *void **
    have the same size, which may save wrongly constructed programs that use the second
    of the *execl()* calls above.) Therefore, we should rewrite the above *execl()*
    calls in the following ways:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们通常可以不使用强制类型转换，因为在许多 C 实现中（例如 Linux/x86-32），整数（*int*）常量 0 和空指针的表示是相同的。然而，也有一些实现是不同的——例如，在某些实现中，空指针的大小大于整数常量
    0 的大小——因此，在上述示例中，*execl()* 很可能会接收到一些与整数 0 相邻的随机位，这些位会被解释为一个随机（非空）指针。省略强制类型转换会导致程序在移植到这些实现时出现问题。（在一些上述实现中，`NULL`
    被定义为 *long* 整数常量 *0L*，并且 *long* 和 *void ** 有相同的大小，这可能会拯救那些错误构造的程序，尤其是使用上面第二个 *execl()*
    调用的程序。）因此，我们应当以以下方式重写上述 *execl()* 调用：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Casting `NULL` in the manner of the last call above is generally required, even
    on implementations where `NULL` is defined as *(void *) 0*. This is because, although
    the C standards require that null pointers of different types should test true
    for comparisons on equality, they don’t require that pointers of different types
    have the same internal representation (although on most implementations they do).
    And, as before, in a variadic function, the compiler can’t cast *(void *) 0* to
    a null pointer of the appropriate type.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在 `NULL` 被定义为 *(void *) 0* 的实现中，通常也需要按照上面最后一个调用的方式进行强制类型转换。这是因为，尽管 C 标准要求不同类型的空指针在进行相等比较时应返回真值，但它并不要求不同类型的指针具有相同的内部表示（尽管在大多数实现中它们具有相同的表示）。而且，正如之前所述，在变参函数中，编译器无法将
    *(void *) 0* 强制转换为适当类型的空指针。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The C standards make one exception to the rule that pointers of different types
    need not have the same representation: pointers of the types *char ** and *void
    ** are required to have the same internal representation. This means that passing
    *(void *) 0* instead of *(char *) 0* would not be a problem in the example case
    of *execl()*, but, in the general case, a cast is needed.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: C 标准对不同类型的指针不需要具有相同表示的规则作出一个例外：*char ** 和 *void ** 类型的指针必须具有相同的内部表示。这意味着在 *execl()*
    的示例中，传递 *(void *) 0* 而不是 *(char *) 0* 不会有问题，但在一般情况下，仍然需要强制类型转换。
