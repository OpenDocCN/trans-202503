["```\nThink of an animal.\n\nDoes it bark? Yes\n\nIs it a dog?\n\nYes\n\nI knew it!\n\nLet's play again.\n\nThink of an animal.\n\nDoes it bark?\n\nYes\n\nIs it a dog?\n\nNo\n\nI give up. What is it?\n\ngiant purple snorklewhacker\n\nWhat's a question that I could use to tell a giant purple snorklewhacker from a dog?\n\nDoes it live in an anxiety closet?\n\nThanks. I'll remember that.\n\nLet's play again.\n\nThink of an animal.\n\nDoes it bark?\n\nYes\n\nIs it a dog?\n\nNo\n\nDoes it live in an anxiety closet?\n\nYes\n\nIs it a giant purple snorklewhacker?\n\nYes\n\nI knew it!\n\nLet's play again.\n```", "```\n 1 <html>\n\n 2   <head>\n\n 3     <!-- include jQuery -->\n\n 4     <script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.1.1.min.js\"> </script>\n\n 5\n\n 6     <title>Web Page Skeleton</title>\n\n 7\n\n 8     <style>\n\n 9       <!-- CSS goes here -->\n\n10     </style>\n\n11\n\n12     <script type=\"text/javascript\">\n\n13\n\n14       <!-- JavaScript goes here -->\n\n15\n\n16       $(function() {\n\n17         <!-- JavaScript to run when document ready -->\n\n18       });\n\n19\n\n20     </script>\n\n21   </head>\n\n22\n\n23   <body>\n\n24     <!-- HTML goes here -->\n\n25   </body>\n\n26 </html>\n```", "```\n 1 <!-- This is the knowledge tree that is never visible -->\n\n 2\n\n 3 <div id=\"root\" class=\"invisible\">\n\n 4   <div string=\"Does it bark\">\n\n 5     <div string=\"dog\"></div>\n\n 6     <div string=\"cat\"></div>\n\n 7  </div>\n\n 8 </div>\n\n 9\n\n10 <div id=\"dialog\">\n\n11   <!-- The conversation will go here -->\n\n12 </div>\n\n13\n\n14 <!-- Get new animal name dialog -->\n\n15\n\n16 <div id=\"what-is-it\" class=\"start-hidden\">\n\n17   <input id=\"what\" type=\"text\"/>\n\n18   <button id=\"done-what\">Done</button>\n\n19 </div>\n\n20\n\n21 <!-- Get new animal question dialog -->\n\n22\n\n23 <div id=\"new-question\" class=\"start-hidden\">\n\n24   What's a good question that I could use to tell a\n\n25   <span id=\"new\"></span> from a <span id=\"old\"></span>?\n\n26   <input id=\"question\" type=\"text\"/>\n\n27   <button id=\"done-question\">Done</button>\n\n28 </div>\n\n29\n\n30 <!-- Yes and no buttons -->\n\n31\n\n32 <div id=\"yesno\" class=\"start-hidden\">\n\n33   <button id=\"yes\">Yes</button>\n\n34   <button id=\"no\">No</button>\n\n35 </div>\n```", "```\n 1 var node; // current position in tree of knowledge\n\n 2\n\n 3 // Append the supplied html to the dialog. Bail if the new node has\n\n 4 // no children because there is no question to ask. Otherwise, make\n\n 5 // the new node the current node and ask a question using the string\n\n 6 // attribute of the node. Turn the animal name into a question if a\n\n 7 // leaf node. Returns true if the new node is a leaf node.\n\n 8\n\n 9 function\n\n10 question(new_node, html)\n\n11 {\n\n12    $('#dialog').append(html);     // add the html to the dialog\n\n13\n\n14    if ($(new_node).length == 0) { // no question if no children\n\n15      return (true);\n\n16    }\n\n17    else {\n\n18      node = new_node;             // descend to new node\n\n19\n\n20      if ($(node).children().length == 0)\n\n21        $('#dialog').append('Is it a ' + $(node).attr('string') + '?');\n\n22      else\n\n23        $('#dialog').append($(node).attr('string') + '?');\n\n24\n\n25      return (false);\n\n26    }\n\n27 }\n\n28\n\n29 // Restarts the game. Hides all buttons and text fields, clears\n\n30 // the text fields, sets the initial node and greeting, asks the\n\n31 // first question, displays the yes/no buttons.\n\n32\n\n33 function\n\n34 restart()\n\n35 {\n\n36    $('.start-hidden').hide();\n\n37    $('#question,#what').val('');\n\n38    question($('#root>div'), '<div><b>Think of an animal.</b></div>');\n\n39    $('#yesno').show();\n\n40 }\n```", "```\n 1 restart(); // Sets everything up the first time through.\n\n 2\n\n 3 // The user has entered a new question. Make a node with that\n\n 4 // question and put the old no-node into it. Then, make a node\n\n 5 // with the new animal and put it into the new question node ahead\n\n 6 // of the old no-node so that it becomes the yes choice. Start over.\n\n 7\n\n 8 $('#done-question').click(function() {\n\n 9   $(node).wrap('<div string=\"' + $('#question').val() + '\"></div>');\n\n10   $(node).parent().prepend('<div string=\"' + $(what).val() + '\"></div>');\n\n11   $('#dialog').append(\"<div>Thanks! I'll remember that.</div><p>\");\n\n12   restart();\n\n13 });\n\n14\n\n15 // The user has entered a new animal name and clicked done. Hide\n\n16 // those items and make the new-question text field and done button\n\n17 // visible. Plug the old and new animal names into the query.\n\n18\n\n19 $('#done-what').click(function() {\n\n20    $('#what-is-it').hide();\n\n21    $('#new').text($('#what').val());\n\n22    $('#old').text($(node).attr('string'));\n\n23    $('#new-question').show();\n\n24    $('#dialog div:last').append(' <i>' + $('#what').val() + '</i>');\n\n25 });\n\n26\n\n27 // The user clicked yes in answer to a question. Descend the tree\n\n28 // unless we hit bottom in which case we boast and start over.\n\n29\n\n30 $('#yes').click(function() {\n\n31    if (question($(node).children(':first-child'), ' <i>yes</i><br>')) {\n\n32      $('#dialog').append(\"<div>I knew it! I'm so smart!</div><p>\");\n\n33      restart();\n\n34    }\n\n35 });\n\n36\n\n37 // The user clicked no in answer to a question. Descend the tree\n\n38 // unless we hit bottom, in which case we hide the yes/no buttons\n\n39 // and make the what-is-it text field and done button visible.\n\n40\n\n41 $('#no').click(function() {\n\n42    if (question($(node).children(':last-child'), ' <i>no</i><br>')) {\n\n43      $('#yesno').hide();\n\n44      $('#dialog').append('<div>I give up. What is it?</div>');\n\n45      $('#what-is-it').show();\n\n46    }\n\n47 });\n```", "```\n1 invisible {\n\n2   display: none; /* elements with this class are not displayed */\n\n3 }\n```", "```\n1 char buffer[2];\n\n2\n\n3 gets(buffer);\n```", "```\n1 #include <stdio.h>  // standard I/O library\n\n2 #include <stdlib.h> // standard library for exit and malloc\n\n3 #include <string.h> // string library\n\n4\n\n5 struct node {\n\n6   struct node *no;  // references no answer node\n\n7   struct node *yes; // references yes answer node\n\n8   char string[1];   // question or animal\n\n9 };\n```", "```\n10 struct  node    *\n\n11 make_node(char *string)\n\n12 {\n\n13     struct  node    *memory;        // newly allocated memory\n\n14\n\n15     if ((memory = (struct node *)malloc(sizeof (struct node) + strlen(string))) == (struct node *)0) {\n\n16         (void)fprintf(stderr, \"gta: out of memory.\\n\");\n\n17         exit(-1);\n\n18     }\n\n19\n\n20     (void)strcpy(memory->string, string);\n\n21     memory->yes = memory->no = (struct node *)0;\n\n22\n\n23     return (memory);\n\n24 }\n```", "```\n 25 int\n\n 26 main(int argc, char *argv[])\n\n 27 {\n\n 28     char            animal[50];     // new animal name buffer\n\n 29     char            buffer[3];      // user input buffer\n\n 30     int             c;              // current character from buffer\n\n 31     struct  node    **current;      // current tree traversal node\n\n 32     FILE            *in;            // input file for training data or typing\n\n 33     struct  node    *new;           // newly created node\n\n 34     FILE            *out;           // output file for saving training data\n\n 35     char            *p;             // newline removal pointer\n\n 36     char            question[100];  // new question buffer\n\n 37     struct  node    *root;          // root of the tree of knowledge\n\n 38\n\n 39     //  Process the command line arguments.\n\n 40\n\n 41     in = out = (FILE *)0;\n\n 42\n\n 43     for (argc--, argv++; argc > 1 && argc % 2 == 0; argc -= 2, argv += 2) {\n\n 44         if (strcmp(argv[0], \"-i\") == 0 && in == (FILE *)0) {\n\n 45             if ((in = fopen(argv[1], \"r\")) == (FILE *)0) {\n\n 46                 (void)fprintf(stderr, \"gta: can't open input file `%s'.\\n\", argv[1]);\n\n 47                 exit(-1);\n\n 48             }\n\n 49         }\n\n 50\n\n 51         else if (strcmp(argv[0], \"-o\") == 0 && out == (FILE *)0) {\n\n 52             if ((out = fopen(argv[1], \"w\")) == (FILE *)0) {\n\n 53                 (void)fprintf(stderr, \"gta: can't open output file `%s'.\\n\", argv[1]);\n\n 54                 exit(-1);\n\n 55             }\n\n 56         }\n\n 57\n\n 58         else\n\n 59             break;\n\n 60     }\n\n 61\n\n 62     if (argc > 0) {\n\n 63         (void)fprintf(stderr, \"usage: gta [-i input-file-name] [-o output-file-name]\\n\");\n\n 64         exit(-1);\n\n 65     }\n\n 66\n\n 67     //  Read from standard input if no input file was specified on the command line.\n\n 68\n\n 69     if (in == (FILE *)0)\n\n 70         in = stdin;\n\n 71\n\n 72     //  Create the initial tree of knowledge.\n\n 73\n\n 74     root = make_node(\"Does it bark\");\n\n 75     root->yes = make_node(\"dog\");\n\n 76     root->no = make_node(\"cat\");\n\n 77\n\n 78     for (;;) {      // play games until the user quits.\n\n 79\n\n 80         if (in == stdin)\n\n 81             (void)printf(\"Think of an animal.\\n\");\n\n 82\n\n 83         current = &root;    //  start at the top\n\n 84\n\n 85         for (;;) {          // play a game\n\n 86\n\n 87             for (;;) {      // get valid user input\n\n 88                 if (in == stdin) {\n\n 89                     if ((*current)->yes == (struct node *)0)\n\n 90                         (void)printf(\"Is it a \");\n\n 91\n\n 92                     (void)printf(\"%s?[ynq] \", (*current)->string);\n\n 93                 }\n\n 94\n\n 95                 if (fgets(buffer, sizeof (buffer), in) == (char *)0 || strcmp(buffer, \"q\\n\") == 0) {\n\n 96                     if (in != stdin) {\n\n 97                         (void)fclose(in);\n\n 98                         in = stdin;\n\n 99                     }\n\n100                     else {\n\n101                         if (in == stdin)\n\n102                             (void)printf(\"\\nThanks for playing.  Bye.\\n\");\n\n103                         exit(0);\n\n104                     }\n\n105                 }\n\n106                 else if (strcmp(buffer, \"y\\n\") == 0) {\n\n107                     if (out != (FILE *)0)\n\n108                         fputs(\"y\\n\", out);\n\n109\n\n110                     current = &((*current)->yes);\n\n111\n\n112                     if (*current == (struct node *)0) {\n\n113                         (void)printf(\"I knew it!\\n\");\n\n114                         break;\n\n115                     }\n\n116                 }\n\n117                 else if (strcmp(buffer, \"n\\n\") == 0) {\n\n118                     if (out != (FILE *)0)\n\n119                         fputs(\"n\\n\", out);\n\n120\n\n121                     if ((*current)->no == (struct node *)0) {\n\n122                         if (in == stdin)\n\n123                             (void)printf(\"I give up.  What is it? \");\n\n124\n\n125                         fgets(animal, sizeof (animal), in);\n\n126\n\n127                         if (out != (FILE *)0)\n\n128                             fputs(animal, out);\n\n129\n\n130                         if ((p = strchr(animal, '\\n')) != (char *)0)\n\n131                             *p = '\\0';\n\n132\n\n133                         if (in == stdin)\n\n134                             (void)printf(\n\n135                              \"What's a good question that I could use to tell a %s from a %s? \",\n\n136                               animal, (*current)->string);\n\n137                         fgets(question, sizeof (question), in);\n\n138\n\n139                         if (out != (FILE *)0)\n\n140                             fputs(question, out);\n\n141\n\n142                         if ((p = strchr(question, '\\n')) != (char *)0)\n\n143                             *p = '\\0';\n\n144\n\n145                         new = make_node(question);\n\n146                         new->yes = make_node(animal);\n\n147                         new->no = *current;\n\n148                         *current = new;\n\n149\n\n150                         if (in == stdin)\n\n151                             (void)printf(\"Thanks!  I'll remember that.\\n\");\n\n152\n\n153                         break;\n\n154                     }\n\n155\n\n156                     else\n\n157                         current = &((*current)->no);\n\n158                 }\n\n159                 else {\n\n160                     if (in == stdin)\n\n161                         (void)printf(\"Huh?  Please answer y for yes, n for no, or q for quit.\\n\");\n\n162\n\n163                     while ((c = getc(in)) != '\\n' && c != EOF)\n\n164                         ;\n\n165                 }\n\n166             }\n\n167\n\n168             break;\n\n169         }\n\n170\n\n171         if (in == stdin)\n\n172             (void)printf(\"Let's play again.\\n\\n\");\n\n173     }\n\n174 }\n```", "```\nprompt> gta -o training\n\nThink of an animal.\n\nDoes it bark?\n\nn\n\nIs it a dog?\n\nn\n\nI give up. What is it?\n\ngiant purple snorklewhacker\n\nWhat's a question that I could use to tell a giant purple snorklewhacker from a dog?\n\nDoes it live in an anxiety closet?\n\nThanks. I'll remember that.\n\nLet's play again.\n\nThink of an animal.\n\nDoes it bark?\n\nq\n\nThanks for playing. Bye.\n```", "```\nn\n\nn\n\ngiant purple snorklewhacker\n\nDoes it live in an anxiety closet?\n```", "```\nprompt> gta -i training\n```"]