- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fuzzing
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](image_fi/book_art/chapterart.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: In this chapter, you’ll explore using fuzzing techniques to discover several
    of the top API vulnerabilities discussed in Chapter 3. The secret to successfully
    discovering most API vulnerabilities is knowing where to fuzz and what to fuzz
    with. In fact, you’ll likely discover many API vulnerabilities by fuzzing input
    sent to API endpoints.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Wfuzz, Burp Suite Intruder, and Postman’s Collection Runner, we’ll cover
    two strategies to increase your success: fuzzing wide and fuzzing deep. We’ll
    also discuss how to fuzz for improper assets management vulnerabilities, find
    the accepted HTTP methods for a request, and bypass input sanitization.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Effective Fuzzing
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In earlier chapters, we defined API fuzzing as the process of sending requests
    with various types of input to an endpoint in order to provoke an unintended result.
    While “various types of input” and “unintended result” might sound vague, that’s
    only because there are so many possibilities. Your input could include symbols,
    numbers, emojis, decimals, hexadecimal, system commands, SQL input, and NoSQL
    input, for instance. If the API has not implemented validation checks to handle
    harmful input, you could end up with a verbose error, a unique response, or (in
    the worst case) some sort of internal server error indicating that your fuzz caused
    a denial of service, killing the app.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'Fuzzing successfully requires a careful consideration of the app’s likely expectations.
    For example, take a banking API call intended to allow users to transfer money
    from one account to another. The request could look something like this:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To fuzz this request, you could easily set up Burp Suite or Wfuzz to submit
    huge payloads as the `userid`, `account`, and `transfer-amount` values. However,
    this could set off defensive mechanisms, resulting in stronger rate limiting or
    your token being blocked. If the API lacks these security controls, by all means
    release the krakens. Otherwise, your best bet is to send a few targeted requests
    to only one of the values at a time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the fact that the `transfer-amount` value likely expects a relatively
    small number. Bank.com isn’t anticipating an individual user to transfer an amount
    larger than the global GDP. It also likely expects a decimal value. Thus, you
    might want to evaluate what happens when you send the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: A value in the quadrillions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String of letters instead of numbers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large decimal number or a negative number
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Null values like `null`, `(null)`, `%00`, and `0x00`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Symbols like the following: `!@#$%^&*();'':''''|,./?>`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These requests could easily lead to verbose errors that reveal more about the
    application. A value in the quadrillions could additionally cause an unhandled
    SQL database error to be sent back as a response. This one piece of information
    could help you target values across the API for SQL injection vulnerabilities.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the success of your fuzzing will depend on where you are fuzzing and what
    you are fuzzing with. The trick is to look for API inputs that are leveraged for
    a consumer to interact with the application and send input that is likely to result
    in errors. If these inputs do not have sufficient input handling and error handling,
    they can often lead to exploitation. Examples of this sort of API input include
    the fields involved in requests used for authentication forms, account registration,
    uploading files, editing web application content, editing user profile information,
    editing account information, managing users, searching for content, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，模糊测试的成功将取决于你进行模糊测试的位置以及你使用的模糊测试内容。关键是寻找API输入，这些输入供消费者与应用程序交互，并发送可能导致错误的输入。如果这些输入没有足够的输入处理和错误处理，它们通常会导致漏洞利用。这类API输入的示例包括用于认证表单、账户注册、上传文件、编辑Web应用内容、编辑用户信息、编辑账户信息、用户管理、搜索内容等请求中涉及的字段。
- en: 'The types of input to send really depend on the type of input you are attacking.
    Generically, you can send all sorts of symbols, strings, and numbers that could
    cause errors, and then you could pivot your attack based on the errors received.
    All of the following could result in interesting responses:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 发送的输入类型实际上取决于你攻击的输入类型。一般来说，你可以发送各种符号、字符串和数字，这些可能会导致错误，然后你可以根据收到的错误来调整攻击方法。以下所有内容都可能导致有趣的响应：
- en: Sending an exceptionally large number when a small number is expected
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当预期为小数字时发送异常大的数字
- en: Sending database queries, system commands, and other code
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送数据库查询、系统命令和其他代码
- en: Sending a string of letters when a number is expected
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当预期为数字时发送一串字母
- en: Sending a large string of letters when a small string is expected
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当预期为短字符串时发送一串长字母
- en: Sending various symbols (`-_\!@#$%^&*();':''|,./?>`)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送各种符号（`-_\!@#$%^&*();':''|,./?>`）
- en: Sending characters from unexpected languages (漢, さ, Ж, Ѫ, Ѭ, Ѧ, Ѩ, Ѯ)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送来自意外语言的字符（漢, さ, Ж, Ѫ, Ѭ, Ѧ, Ѩ, Ѯ）
- en: If you are blocked or banned while fuzzing, you might want to deploy evasion
    techniques discussed in Chapter 13 or else further limit the number of fuzzing
    requests you send.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在模糊测试过程中被阻止或禁止，你可能需要部署第13章中讨论的规避技术，或者进一步限制你发送的模糊请求数量。
- en: Choosing Fuzzing Payloads
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择模糊测试有效负载
- en: Different fuzzing payloads can incite various types of responses. You can use
    either generic fuzzing payloads or more targeted ones. *Generic payloads* are
    those we’ve discussed so far and contain symbols, null bytes, directory traversal
    strings, encoded characters, large numbers, long strings, and so on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的模糊测试有效负载可以引发不同类型的响应。你可以使用通用的模糊测试有效负载，也可以使用更有针对性的模糊测试有效负载。*通用有效负载*是我们到目前为止讨论的内容，包含符号、空字节、目录遍历字符串、编码字符、大数字、长字符串等。
- en: '*Targeted* fuzzing payloads are aimed at provoking a response from specific
    technologies and types of vulnerabilities. Targeted fuzzing payload types might
    include API object or variable names, cross-site scripting (XSS) payloads, directories,
    file extensions, HTTP request methods, JSON or XML data, SQL or No SQL commands,
    or commands for particular operating systems. We’ll cover examples of fuzzing
    with these payloads in this and future chapters.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*针对性*模糊测试有效负载旨在针对特定技术和漏洞类型引发响应。针对性模糊测试有效负载可能包括API对象或变量名称、跨站脚本（XSS）有效负载、目录、文件扩展名、HTTP请求方法、JSON或XML数据、SQL或NoSQL命令，或者特定操作系统的命令。在本章及未来章节中，我们将介绍使用这些有效负载的模糊测试示例。'
- en: You’ll typically move from generic to targeted fuzzing based on the information
    received in API responses. Similar to reconnaissance efforts in Chapter 6, you
    will want to adapt your fuzzing and focus your efforts based on the results of
    generic testing. Targeted fuzzing payloads are more useful once you know the technologies
    being used. If you’re sending SQL fuzzing payloads to an API that leverages only
    NoSQL databases, your testing won’t be as effective.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会根据API响应中收到的信息，从通用模糊测试转向更具针对性的模糊测试。类似于第6章中的侦察工作，你需要根据通用测试的结果调整模糊测试并集中精力。知道使用的技术后，针对性的模糊测试有效性更强。如果你向一个只使用NoSQL数据库的API发送SQL模糊测试有效负载，那么你的测试将不会那么有效。
- en: One of the best sources for fuzzing payloads is SecLists ([https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)).
    SecLists has a whole section dedicated to fuzzing, and its *big-list-of-naughty-strings.txt*
    wordlist is excellent at causing useful responses. The fuzzdb project is another
    good source for fuzzing payloads ([https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb)).
    Also, Wfuzz has many useful payloads ([https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)),
    including a great list that combines several targeted payloads in their injection
    directory, called *All_attack.txt*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊测试负载的最佳来源之一是SecLists（[https://github.com/danielmiessler/SecLists](https://github.com/danielmiessler/SecLists)）。SecLists有一个专门的模糊测试部分，其*big-list-of-naughty-strings.txt*词表在引发有用响应方面表现出色。fuzzdb项目是另一个很好的模糊测试负载来源（[https://github.com/fuzzdb-project/fuzzdb](https://github.com/fuzzdb-project/fuzzdb)）。此外，Wfuzz也有许多有用的负载（[https://github.com/xmendez/wfuzz](https://github.com/xmendez/wfuzz)），其中包括一个很棒的列表，结合了多个目标负载，位于其注入目录中，名为*All_attack.txt*。
- en: 'Additionally, you can always quickly and easily create your own generic fuzzing
    payload list. In a text file, combine symbols, numbers, and characters to create
    each payload as line-separated entries, like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以快速轻松地创建自己的通用模糊测试负载列表。在文本文件中，结合符号、数字和字符，将每个负载作为以换行符分隔的条目创建，像这样：
- en: '`AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`'
- en: '`9999999999999999999999999999999999999999`'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`9999999999999999999999999999999999999999`'
- en: '`~''!@#$%^&*()-_+`'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`~''!@#$%^&*()-_+`'
- en: '`{}[]|\:''''; ''<>?,./`'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`{}[]|\:''''; ''<>?,./`'
- en: '`%00`'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`%00`'
- en: '`0x00`'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`0x00`'
- en: '`$ne`'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ne`'
- en: '`%24ne`'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`%24ne`'
- en: '`$gt`'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$gt`'
- en: '`%24gt`'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`%24gt`'
- en: '`|whoami`'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`|whoami`'
- en: '`-- -`'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-- -`'
- en: '`'' ''''`'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`'' ''''`'
- en: '`'' OR 1=1-- -`'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`'' OR 1=1-- -`'
- en: '`'''' ''''''''''''`'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`'''' ''''''''''''`'
- en: '`漢, さ, Ж, Ѫ, Ѭ, Ѧ, Ѩ, Ѯ`'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`漢, さ, Ж, Ѫ, Ѭ, Ѧ, Ѩ, Ѯ`'
- en: 😀 😃 😄 😁 😆
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 😀 😃 😄 😁 😆
- en: Note that instead of 40 instances of `A` or `9`, you could write payloads consisting
    of hundreds them. Using a small list like this as a fuzzing payload can cause
    all sorts of useful and interesting responses from an API.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与你使用40个`A`或`9`的情况不同，你可以编写包含成百上千个这些字符的负载。像这样的简单列表作为模糊测试负载，可能会从API中引发各种有用和有趣的响应。
- en: Detecting Anomalies
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检测异常
- en: 'When fuzzing, you’re attempting to cause the API or its supporting technologies
    to send you information that you can leverage in additional attacks. When an API
    request payload is handled properly, you should receive some sort of HTTP response
    code and message indicating that your fuzzing did not work. For example, sending
    a request with a string of letters when numbers are expected could result in a
    simple response like the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行模糊测试时，你的目标是让API或其支持的技术发送信息给你，这些信息可以被用来进行进一步的攻击。当API请求负载被正确处理时，你应该收到某种HTTP响应代码和消息，表明你的模糊测试未能成功。例如，当预期接收数字时，发送一串字母可能会导致如下简单的响应：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From this response, you can deduce that the developers configured the API to
    properly handle requests like yours and prepared a tailored response.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个响应中，你可以推断出开发者已配置API来正确处理像你这样的请求，并准备了一个定制的响应。
- en: 'When input is not handled properly and causes an error, the server will often
    return that error in the response. For example, if you sent input like `~''!@#$%^&*()-_+`
    to an endpoint that improperly handles it, you could receive an error like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当输入未正确处理并导致错误时，服务器通常会在响应中返回该错误。例如，如果你向一个处理不当的端点发送了类似`~'!@#$%^&*()-_+`的输入，你可能会收到类似下面的错误：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This response immediately reveals that you’re interacting with an API request
    that does not handle input properly and that the backend of the application is
    utilizing a SQL database.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个响应立刻揭示了你正在与一个未正确处理输入的API请求交互，并且该应用程序的后端正在使用SQL数据库。
- en: You’ll typically be analyzing hundreds or thousands of responses, not just two
    or three. Therefore, you need to filter your responses in order to detect anomalies.
    One way to do this is to understand what ordinary responses look like. You can
    establish this baseline by sending a set of expected requests or, as you’ll see
    later in the lab, by sending requests that you expect to fail. Then you can review
    the results to see if a majority of them are identical. For example, if you issue
    100 API requests and 98 of those result in an HTTP 200 response code with a similar
    response size, you can consider those requests to be your baseline. Also examine
    a few of the baseline responses to get a sense of their content. Once you know
    that the baseline responses have been properly handled, review the two anomalous
    responses. Figure out what input caused the difference, paying particular attention
    to the HTTP response code, response size, and the content of the response.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the differences between baseline and anomalous requests will
    be miniscule. For example, the HTTP response codes might all be identical, but
    a few requests might result in a response size that is a few bytes larger than
    the baseline responses. When small differences like this come up, use Burp Suite’s
    Comparer to get a side-by-side comparison of the differences within the responses.
    Right-click the result you’re interested in and choose **Send to Comparer (Response)**.
    You can send as many responses as you’d like to Comparer, but you’ll at least
    need to send two. Then migrate to the Comparer tab, as shown in [Figure 9-1](#figure9-1).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of the burp suite comparer tab that lists results to be selected
    for comparison](image_fi/502444c09/F09001.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-1: Burp Suite’s Comparer'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Select the two results you would like to compare and use the **Compare Words**
    button (located at the bottom right of the window) to pull up a side-by-side comparison
    of the responses (see [Figure 9-2](#figure9-2)).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of the burp suite compare words window that shows the responses
    for the results previously selected](image_fi/502444c09/F09002.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-2: Comparing two API responses with Comparer'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: A useful option located at the bottom-right corner, called Sync Views, will
    help you synchronize the two responses. Sync Views is especially useful when you’re
    looking for small differences in large responses, as it will automatically highlight
    differences between the two responses. The highlights signify whether the difference
    has been modified, deleted, or added.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing Wide and Deep
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will introduce you to two fuzzing techniques: fuzzing wide and
    fuzzing deep. *Fuzzing wide* is the act of sending an input across all of an API’s
    unique requests in an attempt to discover a vulnerability. *Fuzzing deep* is the
    act of thoroughly testing an individual request with a variety of inputs, replacing
    headers, parameters, query strings, endpoint paths, and the body of the request
    with your payloads. You can think of fuzzing wide as testing a mile wide but an
    inch deep and fuzzing deep as testing an inch wide but a mile deep.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Wide and deep fuzzing can help you adequately evaluate every feature of larger
    APIs. When you’re hacking, you’ll quickly discover that APIs can greatly vary
    in size. Certain APIs could have only a few endpoints and a handful of unique
    requests, so you may be able to easily test them by sending a few requests. An
    API can have many endpoints and unique requests, however. Alternatively, a single
    request could be filled with many headers and parameters.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: This is where the two fuzzing techniques come into play. Fuzzing wide is best
    used to test for issues across all unique requests. Typically, you can fuzz wide
    to test for improper assets management (more on this later in this chapter), finding
    all valid request methods, token-handling issues, and other information disclosure
    vulnerabilities. Fuzzing deep is best used for testing many aspects of individual
    requests. Most other vulnerability discovery will be done by fuzzing deep. In
    later chapters, we will use the fuzzing-deep technique to discover different types
    of vulnerabilities, including BOLA, BFLA, injection, and mass assignment.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing Wide with Postman
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I recommend using Postman to fuzz wide for vulnerabilities across an API, as
    the tool’s Collection Runner makes it easy to run tests against all API requests.
    If an API includes 150 unique requests across all the endpoints, you can set a
    variable to a fuzzing payload entry and test it across all 150 requests. This
    is particularly easy to do when you’ve built a collection or imported API requests
    into Postman. For example, you might use this strategy to test whether any of
    the requests fail to handle various “bad” characters. Send a single payload across
    the API and check for anomalies.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Create a Postman environment in which to save a set of fuzzing variables. This
    lets you seamlessly use the environmental variables from one collection to the
    next. Once the fuzzing variables are set, just as they are in [Figure 9-3](#figure9-3),
    you can save or update the environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: At the top right, select the fuzzing environment and then use the variable shortcut
    `{{``variable name``}}` wherever you would like to test a value in a given collection.
    In [Figure 9-4](#figure9-4), I’ve replaced the `x-access-token` header with the
    first fuzzing variable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman’s manage environments window that lists fuzzing variables,
    their initial values, and their current values](image_fi/502444c09/F09003.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-3: Creating fuzzing variables in the Postman environment editor'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of the postman’s edit collection window’s authorization tab that
    shows the x-access-token header is replaced with fuzz1](image_fi/502444c09/F09004.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-4: Fuzzing a collection token header'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, you could replace parts of the URL, the other headers, or any
    custom variables you’ve set in the collection. Then you use the Collection Runner
    to test every request within the collection.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Another useful Postman feature when fuzzing wide is Find and Replace, found
    at the bottom left of Postman. Find and Replace lets you search a collection (or
    all collections) and replace certain terms with a replacement of your choice.
    If you were attacking the Pixi API, for example, you might notice that many placeholder
    parameters use tags like `<email>`, `<number>`, `<string>`, and `<boolean>`. This
    makes it easy to search for these values and replace them with either legitimate
    ones or one of your fuzzing variables, like `{{fuzz1}}`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, try creating a simple test in the Tests panel to help you detect anomalies.
    For instance, you could set up the test covered in Chapter 4 for a status code
    of 200 across a collection:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With this test, Postman will check that responses have a status code of 200,
    and when a response is 200, it will pass the test. You can easily customize this
    test by replacing 200 with your preferred status code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to launch the Collection Runner. You can click the **Runner
    Overview** button, the arrow next to a collection, or the **Run** button. As mentioned
    earlier, you’ll need to develop a baseline of normal responses by sending requests
    with no values or expected values to the targeted field. An easy way to get such
    a baseline is to unselect the checkbox **Keep Variable Values**. With this option
    turned off, your variables won’t be used in the first collection run.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: When we run this sample collection with the original request values, 13 requests
    pass our status code test and 5 fail. There is nothing extraordinary about this.
    The 5 failed attempts may be missing parameters or other input values, or they
    may just have response codes that are not 200\. Without us making additional changes,
    this test result could function as a baseline.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s try fuzzing the collection. Make sure your environment is set up correctly,
    responses are saved for our review, that **Keep Variable Values** is checked,
    and that any responses that generate new tokens are disabled (we can test those
    requests with deep fuzzing techniques). In [Figure 9-5](#figure9-5), you can see
    these settings applied.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman’s collection runner results that shows requests and
    their responses](image_fi/502444c09/F09005.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-5: Postman Collection Runner results'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Run the collection and then look for deviations from the baseline responses.
    Also watch for changes in the request behavior. For example, when we ran the requests
    using the value `Fuzz1('OR 1=1-- -)`, the Collection Runner passed three tests
    and then failed to process any additional requests. This is an indication that
    the web application took issue with the fuzzing attempt involved in the fourth
    request. Although we did not receive an interesting response, the behavior itself
    is an indication that you may have discovered a vulnerability.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve cycled through a collection run, update the fuzzing value to the
    next variable you would like to test, perform another collection run, and compare
    results. You could detect several vulnerabilities by fuzzing wide with Postman,
    such as improper assets management, injection weaknesses, and other information
    disclosures that could lead to more interesting findings. When you’ve exhausted
    your fuzzing-wide attempts or found an interesting response, it is time to pivot
    your testing to fuzzing deep.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing Deep with Burp Suite
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should fuzz deep whenever you want to drill down into specific requests.
    The technique is especially useful for thoroughly testing each individual API
    request. For this task, I recommend using Burp Suite or Wfuzz.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: In Burp Suite, you can use Intruder to fuzz every header, parameter, query string,
    and endpoint path, along with any item included in the body of the request. For
    example, in a request like the one in [Figure 9-6](#figure9-6), shown in Postman,
    with many fields in the request body, you can perform a deep fuzz that passes
    hundreds or even thousands of fuzzing inputs into each value to see how the API
    responds.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of a request in postman under edit user information; the body
    of the request contains the following: “user”: “<email>”, / “pass”: “<string>”,
    / “id”: “<number>”, “name”: “<string>”, “is_admin”: “<boolean>”, “account_balance”:
    “<number>”](image_fi/502444c09/F09006.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-6: A PUT request in Postman'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: While you might initially craft your requests in Postman, make sure to proxy
    the traffic to Burp Suite. Start Burp Suite, configure the Postman proxy settings,
    send the request, and make sure it was intercepted. Then forward it to Intruder.
    Using the payload position markers, select every field’s value to send a payload
    list as each of those values. A sniper attack will cycle a single wordlist through
    each attack position. The payload for an initial fuzzing attack could be similar
    to the list described in the “Choosing Fuzzing Payloads” section of this chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, consider whether a request’s field expects any particular
    value. For example, take a look at the following PUT request, where the tags (`<
    >`) suggest that the API is configured to expect certain values:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you’re fuzzing, it is always worthwhile to request the unexpected. If
    a field expects an email, send numbers. If it expects numbers, send a string.
    If it expects a small string, send a huge string. If it expects a Boolean value
    (true/false), send anything else. Another useful tip is to send the expected value
    and include a fuzzing attempt following that value. For example, email fields
    are fairly predictable, and developers often nail down the input validation to
    make sure that you are sending a valid-looking email. Since this is the case,
    when you fuzz an email field, you may receive the same response for all your attempts:
    “not a valid email.” In this case, check to see what happens if you send a valid-looking
    email followed by a fuzzing payload. That would look something like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you receive the same response (“not a valid email”), it is likely time to
    try a different payload or move on to a different field.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: When fuzzing deep, be aware of how many requests you’ll be sending. A sniper
    attack containing a list of 12 payloads across 6 payload positions will result
    in 72 total requests. This is a relatively small number of requests.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: When you receive your results, Burp Suite has a few tools to help detect anomalies.
    First, organize the requests by column, such as status code, length of the response,
    and request number, each of which can yield useful information. Additionally,
    Burp Suite Pro allows you to filter by search terms.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'If you notice an interesting response, select the result and choose the **Response**
    tab to dissect how the API provider responded. In [Figure 9-7](#figure9-7), fuzzing
    any field with the payload `{}[]|\:";''<>?,./` resulted in an HTTP 400 response
    code and the response `SyntaxError: Unexpected token in JSON at position 32`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of burp suite showing an http 400 response code and a syntaxerror](image_fi/502444c09/F09007.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-7: Burp Suite attack results'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Once you have an interesting error like this one, you could improve your payloads
    to narrow down exactly what is causing the error. If you figure out the exact
    symbol or combination of symbols causing the issue, attempt to pair other payloads
    with it to see if you can get additional interesting responses. For instance,
    if the resulting responses indicate a database error, you could use payloads that
    target those databases. If the error indicates an operating system or specific
    programming language, use a payload targeting it. In this situation, the error
    is related to an unexpected JSON token, so it would be interesting to see how
    this endpoint handles JSON fuzzing payloads and what happens when additional payloads
    are added.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing Deep with Wfuzz
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’re using Burp Suite CE, Intruder will limit the rate you can send requests,
    so you should use Wfuzz when sending a larger number of payloads. Using Wfuzz
    to send a large POST or PUT request can be intimidating at first due to the amount
    of information you’ll need to correctly add to the command line. However, with
    a few tips, you should be able to migrate back and forth between Burp Suite CE
    and Wfuzz without too many challenges.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'One advantage of Wfuzz is that it’s considerably faster than Burp Suite, so
    we can increase our payload size. The following example uses a SecLists payload
    called *big-list-of-naughty-strings.txt*, which contains over 500 values:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s build our Wfuzz command step-by-step. First, to match the Burp Suite example
    covered in the previous section, we will need to include the `Content-Type` and
    `x-access-token` headers in order to receive authenticated results from the API.
    Each header is specified with the option `-H` and surrounded by quotes.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, note that the request method is PUT. You can specify it with the `-X`
    option. Also, to filter out responses with a status code of 400, use the `--hc
    400` option:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, to fuzz a request body using Wfuzz, specify the request body with the
    `-d` option and paste the body into the command, surrounded by quotes. Note that
    Wfuzz will normally remove quotes, so use backslashes to keep them in the request
    body. As usual, we replace the parameters we would like to fuzz with the term
    `FUZZ`. Finally, we use `-u` to specify the URL we’re attacking:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is a decent-sized command with plenty of room to make mistakes. If you
    need to troubleshoot it, I recommend proxying the requests to Burp Suite, which
    should help you visualize the requests you’re sending. To proxy traffic back to
    Burp, use the `-p` proxy option with your IP address and the port on which Burp
    Suite is running:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In Burp Suite, inspect the intercepted request and send it to Repeater to see
    if there are any typos or mistakes. If your Wfuzz command is operating properly,
    run it and review the results, which should look like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now you can seek out the anomalies and conduct additional requests to analyze
    what you’ve found. In this case, it would be worth seeing how the API provider
    responds to the payload that caused a 302 response code. Use this payload in Burp
    Suite’s Repeater or Postman.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing Wide for Improper Assets Management
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Improper assets management vulnerabilities arise when an organization exposes
    APIs that are either retired, in a test environment, or still in development.
    In any of these cases, there is a good chance the API has fewer protections than
    its supported production counterparts. Improper assets management might affect
    only a single endpoint or request, so it’s often useful to fuzz wide to test if
    improper assets management exists for any request across an API.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in Chapter 3, you can find improper assets management vulnerabilities
    by paying close attention to outdated API documentation. If an organization’s
    API documentation has not been updated along with the organization’s API endpoints,
    it could contain references to portions of the API that are no longer supported.
    Also, check any sort of changelog or GitHub repository. A changelog that says
    something along the lines of “resolved broken object level authorization vulnerability
    in v3” will make finding an endpoint still using v1 or v2 all the sweeter.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Other than using documentation, you can discover improper assets vulnerabilities
    through the use of fuzzing. One of the best ways to do this is to watch for patterns
    in the business logic and test your assumptions. For example, in [Figure 9-8](#figure9-8),
    you can see that the `baseURL` variable used within all requests for this collection
    is *https://petstore.swagger.io/v2*. Try replacing *v2* with *v1* and using Postman’s
    Collection Runner.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman showing the variables tab within a collection](image_fi/502444c09/F09008.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-8: Editing the collection variables within Postman'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'The production version of the sample API is *v2*, so it would be a good idea
    to test a few keywords, like *v1*, *v3*, *test*, *mobile*, *uat*, *dev*, and *old*,
    as well as any interesting paths discovered during analysis or reconnaissance
    testing. Additionally, some API providers will allow access to administrative
    functionality by adding */internal/* to the path before or after the versioning,
    which would look like this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '*/api/v2/****internal****/users*'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*/api/****internal****/v2/users*'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As discussed earlier in the section, begin by developing a baseline for how
    the API responds to typical requests using the Collection Runner with the API’s
    expected version path. Figure out how an API responds to a successful request
    and how it responds to bad ones (or requests for resources that do not exist).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: To make our testing easier, we’ll set up the same test for status codes of 200
    we used earlier in this chapter. If the API provider typically responds with status
    code 404 for nonexistent resources, a 200 response for those resources would likely
    indicate that the API is vulnerable. Make sure to insert this test at the collection
    level so that it will be run on every request when you use the Collection Runner.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Now save and run your collection. Inspect the results for any requests that
    pass this test. Once you’ve reviewed the results, rinse and repeat with a new
    keyword. If you discover an improper asset management vulnerability, your next
    step will be to test the non-production endpoint for additional weaknesses. This
    is where your information-gathering skills will be put to good use. On the target’s
    GitHub or in a changelog, you might discover that the older version of the API
    was vulnerable to a BOLA attack, so you could attempt such an attack on the vulnerable
    endpoint. If you don’t find any leads during reconnaissance, combine the other
    techniques found in this book to leverage the vulnerability.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Testing Request Methods with Wfuzz
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One practical way to use fuzzing is to determine all the HTTP request methods
    available for a given API request. You can use several of the tools we’ve introduced
    to perform this task, but this section will demonstrate it with Wfuzz.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'First, capture or craft the API request whose acceptable HTTP methods you would
    like to test. In this example, we’ll use the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, create your request with Wfuzz, using `-X FUZZ` to specifically fuzz
    the HTTP method. Run Wfuzz and review the results:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Based on these results, you can see that the baseline response tends to include
    a 405 status code (Method Not Allowed) and a response length of 163 characters.
    The anomalous responses include the two request methods with 200 response codes.
    This confirms that GET and HEAD requests both work, which doesn’t reveal much
    of anything new. However, this test also reveals that you can use a POST request
    to the *api/v2/account* endpoint. If you were testing an API that did not include
    this request method in its documentation, there is a chance you may have discovered
    functionality that was not intended for end users. Undocumented functionality
    is a good find that should be tested for additional vulnerabilities.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing “Deeper” to Bypass Input Sanitization
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When fuzzing deep, you’ll want to be strategic about setting payload positions.
    For example, for an email field in a PUT request, an API provider may do a pretty
    decent job at requiring that the contents of the request body match the format
    of an email address. In other words, anything sent as a value that isn’t an email
    address might result in the same 400 Bad Request error. Similar restrictions likely
    apply to integer and Boolean values. If you’ve thoroughly tested a field and it
    doesn’t yield any interesting results, you may want to leave it out of additional
    tests or save it for more thorough testing in a separate attack.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, to fuzz even deeper into a specific field, you could try to escape
    whatever restrictions are in place. By *escaping*, I mean tricking the server’s
    input sanitization code into processing a payload it should normally restrict.
    There are a few tricks you could use against restricted fields.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'First, try sending something that takes the form of the restricted field (if
    it’s an email field, include a valid-looking email), add a null byte, and then
    add another payload position for fuzzing payloads to be inserted. Here’s an example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Instead of a null byte, try sending a pipe (`|`), quotes, spaces, and other
    escape symbols. Better yet, there are enough possible symbols to send that you
    could add a second payload position for typical escape characters, like this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use a set of potential escape symbols for the `§escape§`payload and the payload
    you want to execute as the `§test§`. To perform this test, use Burp Suite’s cluster
    bomb attack, which will cycle through multiple payload lists and attempt every
    other payload against it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Escape1
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escape1
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escape1
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escape2
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escape2
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escape2
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Payload1
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Payload2
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Payload3
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Payload1
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Payload2
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Payload3
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cluster bomb fuzzing attack is excellent at exhausting certain combinations
    of payloads, but be aware that the request quantity will grow exponentially. We
    will spend more time with the style of fuzzing when we are attempting injection
    attacks in Chapter 12.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzing for Directory Traversal
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another weakness you can fuzz for is directory traversal. Also known as path
    traversal, *directory traversal* is a vulnerability that allows an attacker to
    direct the web application to move to a parent directory using some form of the
    expression `../` and then read arbitrary files. You could leverage a series of
    path traversal dots and slashes in place of the escape symbols described in the
    previous section, like the following ones:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`..`'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`..\`'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`../`'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`\..\`'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`\..\.\`'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This weakness has been around for many years, and all sorts of security controls,
    including user input sanitization, are normally in place to prevent it, but with
    the right payload, you might be able to avoid these controls and web application
    firewalls. If you’re able to exit the API path, you may be able to access sensitive
    information such as application logic, usernames, passwords, and additional personally
    identifiable information (like names, phone numbers, emails, and addresses).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Directory traversal can be conducted using both wide and deep fuzzing techniques.
    Ideally, you would fuzz deeply across all of an API’s requests, but since this
    can be an enormous task, try fuzzing wide and then focusing in on specific request
    values. Make sure to enrich your payloads with information collected from reconnaissance,
    endpoint analysis, and API responses containing errors or other information disclosures.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chapter covered the art of fuzzing APIs, one of the most important attack
    techniques you’ll need to master. By sending the right inputs to the right parts
    of an API request, you can discover a variety of API weaknesses. We covered two
    strategies, fuzzing wide and deep, useful for testing the entire attack surface
    of large APIs. In the following chapters, we’ll return to the fuzzing deep technique
    to discover and attack many API vulnerabilities.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'Lab #6: Fuzzing for Improper Assets Management Vulnerabilities'
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this lab, you’ll put your fuzzing skills to the test against crAPI. If you
    haven’t done so already, build a crAPI Postman collection, as we did in Chapter
    7, and obtain a valid token. Now we can start by fuzzing wide and then pivot to
    fuzzing deep based on our findings.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin by fuzzing for improper assets management vulnerabilities. First,
    we’ll use Postman to fuzz wide for various API versions. Open Postman and navigate
    to the environmental variables (use the eye icon located at the top right of Postman
    as a shortcut). Add a variable named `path` to your Postman environment and set
    the value to *v3*. Now you can update to test for various versioning-related paths
    (such as *v1*, *v2, internal*, and so on).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'To get better results from the Postman Collection Runner, we’ll configure a
    test using the Collection Editor. Select the crAPI collection options, choose
    **Edit**, and select the **Tests** tab. Add a test that will detect when a status
    code 404 is returned so that anything that does not result in a 404 Not Found
    response will stick out as anomalous. You can use the following test:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run a baseline scan of the crAPI collection with the Collection Runner. First,
    make sure that your environment is up-to-date and **Save Responses** is checked
    (see [Figure 9-9](#figure9-9)).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman’s collection runner window that shows save responses
    as checked](image_fi/502444c09/F09009.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-9: Postman Collection Runner'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Since we’re on the hunt for improper assets management vulnerabilities, we’ll
    only test API requests that contain versioning information in the path. Using
    Postman’s Find and Replace feature, replace the values *v2* and *v3* across the
    collection with the `path` variable (see [Figure 9-10](#figure9-10)).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman’s find and replace window that shows v2 in the find
    box and {{path}} in the replace box](image_fi/502444c09/F09010.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-10: Replacing version information in the path with a Postman variable'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'You may have noticed a matter of interest regarding our collection: all of
    the endpoints have *v2* in their paths except for the password reset endpoint,
    */identity/api/auth/v3/check-otp*, which is using *v3*.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Now that the variable is set, run a baseline scan with a path that we expect
    to fail across the board. As shown in [Figure 9-11](#figure9-11), the `path` variable
    is set to a current value of `fail12345`, which is not likely to be a valid value
    in any endpoint. Knowing how the API reacts when it fails will help us understand
    how the API responds to requests for nonexistent paths. This baseline will aid
    our attempts to fuzz wide with the Collection Runner (see [Figure 9-12](#figure9-12)).
    If requests to paths that do not exist result in Success 200 responses, we’ll
    have to look out for other indicators to use to detect anomalies.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman’s manage environments window that shows the variable
    as path, the initial value as v2, and the current value as fail12345](image_fi/502444c09/F09011.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-11: The improper assets management variable'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot of postman’s collection runner test that shows all nine requests
    have failed](image_fi/502444c09/F09012.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9-12: A baseline Postman Collection Runner test'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: As expected, [Figure 9-12](#figure9-12) shows that all nine requests failed
    the test, as the API provider returned a status code 404\. Now we can easily spot
    anomalies when testing for paths such as *test*, *mobile*, *uat*, *v1*, *v2*,
    and *v3*. Update the current value of the `path` variable to these other potentially
    unsupported paths and run the Collection Runner again. To quickly update a variable,
    click the eye icon found at the top right of Postman.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Things should start to get interesting when you return to the path values */v2*
    and */v3*. When the `path` variable is set to */v3*, all requests fail the test.
    This is slightly odd, because we noted earlier that the password reset request
    was using */v3*. Why is that request failing now? Well, based on the Collection
    Runner, the password reset request is actually receiving a 500 Internal Server
    Error, while all other requests are receiving a 404 Not Found status code. Anomaly!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: Investigating the password reset request further will show that an HTTP 500
    error is issued using the */v3* path because the application has a control that
    limits the number of times you can attempt to send the one-time passcode (OTP).
    Sending the same request to */v2* also results in an HTTP 500 error, but the response
    is slightly larger. It may be worth retrying the two requests back in Burp Suite
    and using Comparer to see the small differences. The */v3* password reset request
    responds with `{"message":"ERROR..","status":500}`. The */v2* password reset request
    responds with `{"message":"Invalid OTP! Please try again..","status":500}`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'The password reset request does not align with the baseline we have developed
    by responding with a 404 status code when a URL path is not in use. Instead, we
    have discovered an improper assets management vulnerability! The impact of this
    vulnerability is that */v2* does not have a limitation on the number of times
    we can guess the OTP. With a four-digit OTP, we should be able to fuzz deep and
    discover any OTP within 10,000 requests. Eventually, you’ll receive a message
    indicating your victory: `{"message":"OTP verified","status":200}`.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
